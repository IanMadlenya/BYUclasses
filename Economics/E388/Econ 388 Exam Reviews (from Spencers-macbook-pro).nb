(* Content-type: application/vnd.wolfram.mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='Mathematica 8.0' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       157,          7]
NotebookDataLength[    433260,       9986]
NotebookOptionsPosition[    416575,       9475]
NotebookOutlinePosition[    417479,       9506]
CellTagsIndexPosition[    417436,       9503]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{

Cell[CellGroupData[{
Cell["1", "BookChapterNumber",
 CellChangeTimes->{
  3.527594369850812*^9, {3.527594653264103*^9, 3.527594657613694*^9}}],

Cell["Introduction", "BookChapterTitle",
 CellChangeTimes->{{3.527594377552558*^9, 3.5275943790698442`*^9}}],

Cell[CellGroupData[{

Cell["Models and Basic Concepts", "Section",
 CellChangeTimes->{{3.527594508084622*^9, 3.527594511706336*^9}, {
  3.527594708573003*^9, 3.527594708979919*^9}}],

Cell[CellGroupData[{

Cell["Introduction to Econometrics", "Subsection",
 CellChangeTimes->{{3.5275947536530457`*^9, 3.527594758706539*^9}}],

Cell["\<\
Econometrics deals with estimating relationships between variables in many \
different settings. They help understand theoretical relationships between \
different variables and also provide a useful analytical platform for policy \
analysis and decision making. \
\>", "Text",
 CellChangeTimes->{{3.5275947606118402`*^9, 3.527594830581122*^9}}],

Cell["Each application of Econometrics involves a few steps:", "Text",
 CellChangeTimes->{{3.527594831064178*^9, 3.527594842514332*^9}}],

Cell[CellGroupData[{

Cell["The formulation of a model", "Item1Numbered",
 CellChangeTimes->{{3.527594851639245*^9, 3.527594854732842*^9}, {
  3.52759650604319*^9, 3.527596507322378*^9}}],

Cell["The estimation of unknown parameters", "Item1Numbered",
 CellChangeTimes->{{3.527594856783352*^9, 3.527594865306522*^9}}],

Cell["The testing of hypothesis", "Item1Numbered",
 CellChangeTimes->{{3.527594865879027*^9, 3.5275948731939487`*^9}}],

Cell["Prediction of future events using the model", "Item1Numbered",
 CellChangeTimes->{{3.527594875206698*^9, 3.5275948831025248`*^9}, 
   3.52797134075008*^9}]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Formulation of a Model", "Subsection",
 CellChangeTimes->{{3.527594959839102*^9, 3.5275949655807753`*^9}, {
  3.527596502116948*^9, 3.527596515034142*^9}}],

Cell["\<\
The formulation step usually begins with a mental exercise where the \
econometrician uses theory and other practical considerations in deciding \
which Variables would be useful to include in the model. \
\>", "Text",
 CellChangeTimes->{{3.527594972541089*^9, 3.527595057180087*^9}, 
   3.527971348189783*^9}],

Cell["\<\
Think of Consumer Demand Theory. We have consumers who are trying to maximize \
their utility subject to a budget constraint. The solution to this problem \
will yield a demand function for each good being considered. \
\>", "Example",
 CellChangeTimes->{{3.527595066016712*^9, 3.52759513099043*^9}, {
  3.5279713489297533`*^9, 3.5279713496697235`*^9}}],

Cell[CellGroupData[{

Cell["Classification of Variables", "Subsubsection",
 CellChangeTimes->{{3.5275953232343683`*^9, 3.527595326919739*^9}}],

Cell[CellGroupData[{

Cell[TextData[{
 StyleBox["Endogenous Variables (dependent):",
  FontWeight->"Bold"],
 " These are the variables you are trying to explain in your model.  (the are \
the \[OpenCurlyDoubleQuote]end...\[CloseCurlyDoubleQuote] goal in your \
modelling process"
}], "Definition",
 CellChangeTimes->{{3.52759520296635*^9, 3.527595224470663*^9}, {
  3.527595255490638*^9, 3.527595265706479*^9}}],

Cell[TextData[{
 StyleBox["Exogenous Variables (independent):",
  FontWeight->"Bold"],
 " These are the Variables you are using in your model to try and explain the \
endogenous variables."
}], "Definition",
 CellChangeTimes->{{3.527595279274459*^9, 3.5275953043114157`*^9}, 
   3.527971350349696*^9}]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Representation of Models", "Subsubsection",
 CellChangeTimes->{{3.527595334232177*^9, 3.5275953403052263`*^9}}],

Cell[CellGroupData[{

Cell[TextData[{
 StyleBox["Structural Representation: ",
  FontWeight->"Bold"],
 "This is a mathematical representation of a hypothesized model (developed \
using economic theory) representing the endogenous and exogenous variables \
contained in your model. "
}], "Definition",
 CellChangeTimes->{{3.527595384690277*^9, 3.5275954618553343`*^9}, {
  3.527595516626864*^9, 3.527595543129602*^9}}],

Cell[TextData[Cell[BoxData[{
 FormBox[
  RowBox[{
   RowBox[{"Demand", ":", 
    SubscriptBox["Q", "t"]}], " ", "=", " ", 
   RowBox[{
    SubscriptBox["\[Beta]", "1"], "+", 
    RowBox[{
     SubscriptBox["\[Beta]", "2"], 
     SubscriptBox["P", "t"]}], " ", "+", " ", 
    RowBox[{
     SubscriptBox["\[Gamma]", "1"], 
     SubscriptBox["Y", "1"]}], "+", 
    SubscriptBox["\[Epsilon]", 
     RowBox[{"1", "t"}]]}]}], TraditionalForm], "\[IndentingNewLine]", 
 FormBox[
  RowBox[{
   RowBox[{"Supply", ":", " ", 
    SubscriptBox["Q", "t"]}], " ", "=", " ", 
   RowBox[{
    SubscriptBox["\[Beta]", "3"], "+", 
    RowBox[{
     SubscriptBox["\[Beta]", "4"], 
     SubscriptBox["P", "t"]}], "+", 
    RowBox[{
     SubscriptBox["\[Gamma]", "2"], 
     SubscriptBox["w", "t"]}], "+", 
    SubscriptBox["\[Epsilon]", 
     RowBox[{"2", "t"}]]}]}], TraditionalForm]}]]], "Example",
 CellChangeTimes->{{3.527595733971438*^9, 3.527595788069045*^9}}],

Cell[TextData[{
 StyleBox["Reduced Form Representation",
  FontWeight->"Bold"],
 ": Here you express the endogenous variable by itself on the left side of \
the equation and the exogenous variables all on the right side of the \
equation. "
}], "Definition",
 CellChangeTimes->{{3.527595463723036*^9, 3.527595481299608*^9}, {
  3.527595548169245*^9, 3.527595602767887*^9}}],

Cell[TextData[Cell[BoxData[{
 FormBox[
  RowBox[{
   SubscriptBox["P", "t"], " ", "=", " ", 
   RowBox[{
    FractionBox[
     RowBox[{
      SubscriptBox["\[Beta]", "3"], "-", 
      SubscriptBox["\[Beta]", "1"]}], 
     RowBox[{
      SubscriptBox["\[Beta]", "2"], "-", 
      SubscriptBox["\[Beta]", "4"]}]], "+", 
    RowBox[{
     FractionBox[
      SubscriptBox["\[Gamma]", "2"], 
      RowBox[{
       SubscriptBox["\[Beta]", "2"], "-", 
       SubscriptBox["\[Beta]", "4"]}]], 
     SubscriptBox["w", "t"]}], "+", 
    RowBox[{
     FractionBox[
      SubscriptBox["\[Gamma]", "1"], 
      RowBox[{
       SubscriptBox["\[Beta]", "2"], "-", 
       SubscriptBox["\[Beta]", "4"]}]], 
     SubscriptBox["Y", "1"]}], "+", 
    FractionBox[
     RowBox[{
      SubscriptBox["\[Epsilon]", 
       RowBox[{"1", "t"}]], "-", 
      SubscriptBox["\[Epsilon]", 
       RowBox[{"2", "t"}]]}], 
     RowBox[{"1", "-", 
      SubscriptBox["\[Beta]", "2"]}]]}]}], 
  TraditionalForm], "\[IndentingNewLine]", 
 FormBox[
  RowBox[{
   SubscriptBox["Q", "t"], " ", "=", " ", 
   RowBox[{
    FractionBox[
     RowBox[{
      RowBox[{"-", 
       SubscriptBox["\[Beta]", "2"]}], 
      SubscriptBox["\[Beta]", "4"]}], 
     RowBox[{
      SubscriptBox["\[Beta]", "2"], "-", 
      SubscriptBox["\[Beta]", "4"]}]], "+", 
    RowBox[{
     FractionBox[
      RowBox[{
       SubscriptBox["\[Beta]", "2"], 
       SubscriptBox["\[Gamma]", "2"]}], 
      RowBox[{
       SubscriptBox["\[Beta]", "2"], "-", 
       SubscriptBox["\[Beta]", "4"]}]], 
     SubscriptBox["w", "t"]}], "-", 
    RowBox[{
     FractionBox[
      RowBox[{
       SubscriptBox["\[Beta]", "4"], 
       SubscriptBox["\[Gamma]", "1"]}], 
      RowBox[{
       SubscriptBox["\[Beta]", "2"], "-", 
       SubscriptBox["\[Beta]", "4"]}]], 
     SubscriptBox["Y", "t"]}], "+", 
    FractionBox[
     RowBox[{
      RowBox[{
       SubscriptBox["\[Beta]", "2"], 
       SubscriptBox["\[Epsilon]", 
        RowBox[{"1", "t"}]]}], "-", 
      RowBox[{
       SubscriptBox["\[Beta]", "4"], 
       SubscriptBox["\[Epsilon]", 
        RowBox[{"2", "t"}]]}]}], 
     RowBox[{
      SubscriptBox["\[Beta]", "2"], "-", 
      SubscriptBox["\[Beta]", "4"]}]]}]}], TraditionalForm]}]]], "Example",
 CellChangeTimes->{{3.527595815544611*^9, 3.527595880618635*^9}, {
  3.527595913806573*^9, 3.527596039056177*^9}}]
}, Open  ]]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Estimation of Unknown Parameters", "Subsection",
 CellChangeTimes->{{3.5275960656039886`*^9, 3.5275960718919287`*^9}}],

Cell[TextData[{
 "After you have written your model in Reduced Form the coefficients for the \
variables in the model are referred to as parameters and their values are \
usually unknown. The focus of this next step in the model creation process \
will be to fine adequate estimated for these parameters. The notation of ",
 Cell[BoxData[
  FormBox[
   OverscriptBox["\[Beta]", "^"], TraditionalForm]]],
 " will be used to represent an ",
 StyleBox["estimator",
  FontWeight->"Bold",
  FontSlant->"Italic"],
 " for the unknown parameter \[Beta] in the model. "
}], "Text",
 CellChangeTimes->{{3.527596219413487*^9, 3.5275963471546097`*^9}, {
  3.527971351209662*^9, 3.5279713517896385`*^9}}],

Cell[TextData[{
 StyleBox["Estimator",
  FontWeight->"Bold"],
 ": An estimator is a function or algorithm that one follows to produce an \
estimated value for a parameter. "
}], "Definition",
 CellChangeTimes->{{3.527596354265211*^9, 3.527596396885889*^9}, 
   3.5279713526296053`*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell["Hypothesis Testing", "Subsection",
 CellChangeTimes->{{3.527596521283229*^9, 3.527596525216114*^9}}],

Cell["\<\
After you have come up with estimates for unknown parameters you may want to \
determine how important particular variables are\.08 with regards to the \
overall explanatory power of your model. To do this you will need to have a \
knowledge of the distribution (density or pdf) of the estimator under a \
certain hypothesis.\
\>", "Text",
 CellChangeTimes->{{3.527596541923937*^9, 3.527596603416506*^9}, {
   3.527596645678873*^9, 3.5275966941729727`*^9}, {3.527596779175056*^9, 
   3.527596793521985*^9}, 3.5279713533195777`*^9}],

Cell[TextData[Cell[BoxData[
 FormBox[
  RowBox[{
   RowBox[{
    SubscriptBox["H", "0"], ":", " ", 
    SubscriptBox["\[Beta]", "2"]}], "=", "0"}], TraditionalForm]]]], "Example",\

 CellChangeTimes->{{3.527596802178061*^9, 3.5275968082369547`*^9}}],

Cell[BoxData[
 RowBox[{"Plot", "[", 
  RowBox[{
   RowBox[{"Evaluate", "@", 
    RowBox[{"Table", "[", 
     RowBox[{"PDF", "[", 
      RowBox[{
       RowBox[{"NormalDistribution", "[", 
        RowBox[{"0", ",", "2"}], "]"}], ",", "x"}], "]"}], "]"}]}], ",", 
   RowBox[{"{", 
    RowBox[{"x", ",", 
     RowBox[{"-", "6"}], ",", "6"}], "}"}], ",", 
   RowBox[{"Filling", "\[Rule]", "Axis"}], ",", 
   RowBox[{"Ticks", "\[Rule]", "False"}]}], "]"}]], "Input",
 CellOpen->False,
 CellChangeTimes->{{3.527596828501503*^9, 3.527596849183873*^9}, {
  3.527596925354121*^9, 3.527597006857336*^9}, {3.5275970999996758`*^9, 
  3.527597111746749*^9}, {3.5275971965223007`*^9, 3.527597206447776*^9}}],

Cell[BoxData[
 FormBox[
  GraphicsBox[{GraphicsComplexBox[CompressedData["
1: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
PB6t7Q95Rc2PW4PJSMrTEk3qX3eYuyMTvHqHgsjeUgjSdXYGL8PDtGN+VMR8
RM8v7Zs1nHXSdwtwmUC/Nhhq8uH96j6HNA7pt31ok7MSx/BRJsRdLqfL2D9F
ZfZs/ncX54c3oVGNYodaoWP0TIanI16PCOeOC7rQ0ZjsMBNlZybcq6jgOmFc
CuDQ/9kan69h/bfpyYs3oD58TkNTnQmE0z/I9RgVOdkZqz4/Ywk8cbt2TO6t
QtVCXFYkcT65WTnfnSSN84nU6MQ/nE+eh3B55EIb+qxXh8ZyA9en40oyBgPZ
sOj4NjkCz28eOcUCkaUsdMsQUzwbx2m5KYTg3NdoLBUp+oPr//jaR5rfCqpg
JM3IZBznE7Pm7ks+k1Rk3cJYk2XZAkrqeda1v9SgCoHKu2dwfSyhrmzn3JoA
Gycs3xLw89FZmdp6bekRaunlQ2zB+WE+CjWL+lIBfdtLUrtxPrE1PoL43qpA
O5R/LXLhfHLhwvQZz6kCmJs+dPQhPp+1W976798Y1CKAKiqK2wvfdGTV6AcV
4QjMebfmZwHpXvd/vhkIBI/t9wRV8PG53W2zjU+L0eqnt2VV8O/LxFluCUg/
hF3vZmPE8f3RGRbzel730K+eI0dncTzgb+MUZpwKr9mXLg/huLDlj+LywQdo
ltrjVxo4XhKSmWoR8UG70leea+D2RcTdTzE2qMi/D3mec1oW/91nYiz/e/67
3/wP/x99gHxZ
     "], {{{}, 
       {Hue[0.67, 0.6, 0.6], Opacity[0.2], EdgeForm[None], 
        GraphicsGroupBox[PolygonBox[CompressedData["
1:eJwl1Hecz3UcB/A7W6HIXlEhMsrMHmUV7pwZWWfdGXfKKsQRWjSEyi7tQRMV
FS0yKoqitMseyY56vh/3x/Pxfn1en8dvfH+fz+NXMTUzJSNHQkJCIlmJ2XNK
YnauLU82b2Ach6yrmhmslH+nojyECfIL/EAp6750lNOYxxfk1XWI95Pv5nn2
UFLXJ/bkocxlE3l0t3K9fBfPsZsSuttjTx7C42wkt+4WasnjeZbvKa7rHXvy
YObwObl07akpj2M531FM1yv25EE8xmfk1LWjhjyWZ9hFUd1tsScP5FE+JYeu
LdXltqTyCJ/E761vw3VyGwbwMB8nZB9Ga6qJrenPbDbwHzfbq2peSxUqU4lr
uJqr4lyowJWUj9fQj1ms5yI3eZ9yMenLQ3zEBVrZK2uO4Wl2coWuJ63kPjzI
h/xLS30ZcwW/xWdbD2a0vIxvKWLdg5byK/xMOevUOE/5z/j+choPyB9wnhbW
pc2D8czySF6Ta5h38ms8pzko1nItcwz74p6ZlRjGUuuJ8Zszim/inpiF6U4L
63vivjGW/dYTzMoM52XrSXGe3MFPcS/jd2JA3DHrmvHM/BHnYA7lfrmamck6
+RzN5VLmgThDeQSvyr/EeckD4zPkv+Jc5XSWyDu4XO5Gc/kl9lLGun/cW/k+
1nKWZrqS5igWs53LdF1pJr/Ij5S27hf3WJ7J+5yhqa6EmckivqaQrgtN5Z7M
4D1O00Rf3MxgIV9RUJdCE7kH03mXUzTWFzOLxv2KO0LheMb4nvFZ8XoKcCmX
xGvozr2s4SSNvE/+mHRjGqv5h4b28sWkK1NZxQlutJc3Jl3I4h3+poG9POZI
FvBlfA9dZxrIKUzhbY5TX5/bHMFTbIvvrEumvtyZybzFMerpc5nDeZKt8Xy6
JOrJyXEfeZOj1NXnNIfxBFvIr+tEXTkp7idvcIQ6+vhvT2c+m8kX/8vUkTsx
kdc5TG39/0UUong=
          "]]]}, {}, {}}, {{}, {}, 
       {Hue[0.67, 0.6, 0.6], LineBox[CompressedData["
1:eJwl1HfcjWUcBvDX3ntvr71XhZZoUCElUWmRtJHKpilaSjRoaZJKiaK9FCHt
PaxKU4Mmje/16Y/vua77d7/Pec9znvtzCoePHjiqSEFBwTQvyS5efpCPMpkj
2IP+5qVZp9/EmRTNntl2uZQpDGDPXGdehvX6zZxFseyZ/SgfYypHsleuMy/L
6/otnE3x7Jn9JJflM3IUXXOdeTk26PM4hxLZM/tZLuciBtIt15mX5w19PudS
Mntmv8jHuZij6U6ppL0d8gkuYRB7Uzppb6dcwaUcwz6USdr7Va7kMgazL2Up
R3kqUJFKVKYKValGdWrkGu/zm3ySyxnCfrkn8wq8qd/KKGpmz+x3+RTTOZb9
c0/mFXlLv43R1Mqe2R/yaa7gOE42q8tn+iJ65L6tK/G2fjtjqJ09sz/lM8zg
eE4xq8fn+gMckO/GujLv6Hfk7OjN2Kafx6l6QzbrD+VZ6i35Vq+T99D/ks/m
s+ttmKmfLpvwpX6+7MBQfZiszwQ25n/Idkxhcc6WbMEkvrG+UHZiKj3zvGQV
xvNu7le2ZTJ35izL5kzka+sLZEfG6iNkI7boY2V7Hs55k634Tq9LT32XfI4r
OcO6KV/pJzBcb8Am/UF65flbV+U9fUHumdOsG7NVX0K9/K31bvk8V3EiB+Y8
mFfjff2ufG7qZ8/sb/kCV3MSB9Egae8f+SLX5HxwMA1pRGMKaUJTmtGcFrSk
Fa1zjff5V77EtTknHEKbZH54eFnMyvOjN22T+V1ilX5dvhf60C5pXpRX9Otz
jjg059isOh/od+f50j57ZsV4VZ+dZ8VhObdmNfhQv4dxdMieWXFW6zfku+Zw
hprV5CP9XsbTMXtmJVijz2EkffM8zWrxsX4fE+iUPbOSvKbPzXmmX56XWW0+
0e9nIp2zZ1aKtfqNOTP0z/Myq8On+kIm5X9bF/KF/gj5kW/N97k/2bnI/7/5
Xaz/AxkpoXM=
         "]]}}}], InsetBox[Cell[TextData[Cell[BoxData[
      FormBox[
       RowBox[{"f", "(", 
        SubscriptBox[
         OverscriptBox["\[Beta]", "^"], "2"], ")"}], TraditionalForm]]]],
      GeneratedCell->False,
      CellAutoOverwrite->False,
      CellBaseline->Baseline,
      TextAlignment->Left], {1.7767558528428165`, 0.15546447865226737`}, {
     Left, Baseline},
     Alignment->{Left, Top}], InsetBox[Cell[TextData[Cell[BoxData[
      FormBox[
       RowBox[{
        SubscriptBox["\[Beta]", "2"], "=", "0"}], TraditionalForm]]]],
      GeneratedCell->False,
      CellAutoOverwrite->False,
      CellBaseline->Baseline,
      TextAlignment->Left], {0.2961259754738075, 0.02053510983692919}, {
     Left, Baseline},
     Alignment->{Left, Top}]},
   AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
   Axes->True,
   AxesOrigin->{0, 0},
   ImagePadding->{{0.1, 1.1}, {1.1, 0.1}},
   Method->{"AxesInFront" -> True},
   PlotRange->{{-6.25, 6.25}, {-0.004155648311087712, 0.2036267672432979}},
   PlotRangeClipping->True,
   PlotRangePadding->Automatic,
   Ticks->False], TraditionalForm]], "Input",
 CellChangeTimes->{{3.527597248891858*^9, 3.5275972626087313`*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell["Prediction", "Subsection",
 CellChangeTimes->{{3.5275972980671473`*^9, 3.527597299783345*^9}}],

Cell["\<\
After your model has been formulated, estimated, and tested you usually want \
to use it to predict certain values for your endogenous variable using \
particular Variables for exogenous variables. \
\>", "Text",
 CellChangeTimes->{{3.527597312778178*^9, 3.527597324553054*^9}, {
  3.527597379223238*^9, 3.527597406231583*^9}, {3.527597451052491*^9, 
  3.527597451056178*^9}, {3.527971354029549*^9, 3.5279713559494724`*^9}}],

Cell[TextData[{
 "If your model was Y = ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    SubscriptBox["\[Beta]", "1"], "+", 
    RowBox[{
     SubscriptBox["\[Beta]", "2"], "X", " "}]}], TraditionalForm]]],
 " you could plug in an interesting value (X*) for X and produce a \
corresponding Y value (Y*). You should remember that there is a zero \
probability of Y being exactly  Y*, but you will be able to establish some \
sort of confidence interval for the true value of Y. "
}], "Text",
 CellChangeTimes->{{3.527597451356598*^9, 3.5275975856803617`*^9}}],

Cell[BoxData[
 GraphicsBox[{
   {Hue[0.67, 0.6, 0.6], 
    LineBox[{{0.16944444444444445`, 0.8861111111111111}, {
     0.16944444444444445`, 0.13611111111111107`}, {1.063888888888889, 
     0.13055555555555554`}}]}, 
   {Hue[0.67, 0.6, 0.6], 
    LineBox[{{0.2972222222222222, 0.28055555555555545`}, {0.8527777777777779, 
     0.6694444444444443}}]}, 
   {Hue[0.67, 0.6, 0.6], LineBox[CompressedData["
1:eJxl1E9IFHEUB/Ax0A6bUARRsAX9AeuwFUTgaV+HCqTAlLJgO1jQn4MRQlCC
WyEEnSyQDkGwCpKgHfSyCdohCuxgiavplq47O7Nr7qU6SIetQ/u+85v34LeP
leHDOrO873u/2X/9bvuNLY7jJKp/fG2vDLdWhueo6/2u6selc6nNltTmvPgv
f92aEY+NcqkT4/XVzwIdTmaakpk8NaY7I+lO9bspLvUd3Lco3jvTHZ3pVn+e
5VI/4kvTV/GxbF8s26fO57jUz/zmfr95SUzlgXh5QP3rJ5d6iNttWRa3IQ91
ncOVFU9wuwn1tQg3rN65g+ub+AO326U+eIDru3iB20uqn8S4wVqHeZ88wbUi
LnG7/St0GqWOIleXXsQ5gFqj7ZRLZ3DfqniEx11ZJYxh1qXLl7hyhDWouLQV
A89RL+ZSoLc87sgaXcT/qY9jTgW6dZOr1i7mVqA9aKTWk3iORz33ufL0HHP1
6IjJJXSYg+3b+B2PzppcTmEPPNpncrC9Gzd69MfkYPs39sajLyaX0K9NLp/4
MVGfHppcQneYXAYRsE9HTQ4P0Jf6AvbOpwbkWzDz92nN5GIba+kUKW1yso3H
xoqSi+2nKDVuSxclN9tYK1+9HXtekhw3+BJXf8Teq1+95FLfw0Kqz+O9U5Lc
bR/CuVkX/8NCqhdxjtZlLm/wnlJfxXvqh8zF9jYEp57Ge0sd7NWGzDE4b+rg
/KiD86MOzo/6MfakLHtwBXuiDs5LWfYi9H+nhPI0
     "]]}, 
   {Hue[0.67, 0.6, 0.6], LineBox[CompressedData["
1:eJxl1DFIW1EUBuAgKAWhaAdxCKJS0EUR7CAdPB1KMSJEhBYhHUSodAhVoWAX
pUgHcSiCIAqCDkGkOEgHEQqCXVSoGmOqzyQteTHaxEEcpEgmc/4b7z+8Q8Lj
I3kv99z7nzQMDve9K/P5fN3Ft17/B5ZuA0tp6dXL7Z48uM2ZbHEm9617C5Fg
IXJojY9botYdX8+LLzo325mf7Tyynl/Qorvwe/SdPj4Ys179pkX3r5eH1suP
5eCXltebP7SOZUUfU0jLyHZNeLsmbl2/M+rfGaWjuC8uE7Gm8ViTK+k/Wr/l
zWstV2a0nY4TaUWjrtxca9HLuvzAqVSEdCFuaX9O5S+e44oP5VhjuSFHNgYq
i6+Mx7hsOPJ+SCsjVdVaZ/Iirxvp9YhfGzqT2rA2mpH6Rq2E7Gqb/nOJalvj
idI6vf6sx+ck5NOYFm36oJv1thht+spaJ5AD+jv6ykpbu1ZSpqe06EH0ST9H
brKSQ4CS8gR9XlhfIUf0Tz3WML2IXF3IvH4tn5SP2Be6Bzmjn2KfLj3ueqmV
kjj2iV5DDukv6NPrO+Q0JW9xsP+sn6FP+jEOnL5EH/QWckzPYZ30B+Q6Z/0K
66DrkHPazE9OVpH7VGleaDMPtJmHvHU/5oE2/wv0I+SfNnNEbyLYV9ZmrmiT
Z9rkmb4HrVh0Yg==
     "]]}, InsetBox[
    StyleBox[Cell["y",
      GeneratedCell->False,
      CellAutoOverwrite->False,
      CellBaseline->Baseline,
      TextAlignment->Left],
     Background->GrayLevel[1.]], {0.125, 0.9472222222222224}, {Left, Baseline},
    Alignment->{Left, Top}], InsetBox[
    StyleBox[Cell["x",
      GeneratedCell->False,
      CellAutoOverwrite->False,
      CellBaseline->Baseline,
      TextAlignment->Left],
     Background->GrayLevel[
      1.]], {1.1138888888888892`, 0.11944444444444446`}, {Left, Baseline},
    Alignment->{Left, Top}], InsetBox[
    StyleBox[Cell["x*",
      GeneratedCell->False,
      CellAutoOverwrite->False,
      CellBaseline->Baseline,
      TextAlignment->Left],
     Background->GrayLevel[1.]], {0.5916666666666668, 0.06944444444444464}, {
    Left, Baseline},
    Alignment->{Left, Top}]},
  ContentSelectable->True,
  ImagePadding->{{0., 0.}, {0., 0.}},
  ImageSize->{240., 180.},
  PlotRange->{{0., 1.3333333333333335`}, {0., 1.}},
  PlotRangePadding->Automatic]], "Input",
 CellChangeTimes->{{3.527597599334285*^9, 3.527597665844928*^9}}]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Data", "Section",
 CellChangeTimes->{{3.527594518842452*^9, 3.527594520027174*^9}}],

Cell["\<\
Often the models you create using econometric principles are \
influenced/limited by both the model presented AND the data used in the \
estimation of the parameters in the model. \
\>", "Text",
 CellChangeTimes->{{3.527866594137283*^9, 3.5278666450347376`*^9}}],

Cell[CellGroupData[{

Cell["Data Characteristics", "Subsection",
 CellChangeTimes->{{3.5278667466296577`*^9, 3.52786676078895*^9}}],

Cell[CellGroupData[{

Cell["Quantitative-Qualitative", "Subsubsection",
 CellChangeTimes->{{3.527866988587559*^9, 3.5278669923273726`*^9}}],

Cell[CellGroupData[{

Cell[TextData[{
 StyleBox["Quantitative Variables",
  FontWeight->"Bold"],
 " measure quantities such as price, sales volume, or income. "
}], "Definition",
 CellChangeTimes->{{3.5278667733983192`*^9, 3.527866795747202*^9}}],

Cell[TextData[{
 StyleBox["Qualitative Variables",
  FontWeight->"Bold"],
 " are used to model \[OpenCurlyDoubleQuote]either/or\[CloseCurlyDoubleQuote] \
situations and are usually associated with membership in a particular group. \
"
}], "Definition",
 CellChangeTimes->{{3.52786679718713*^9, 3.527866852014388*^9}}]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Time Series, Cross Sectional, Pooled Data", "Subsubsection",
 CellChangeTimes->{{3.5278669959871893`*^9, 3.5278670086965537`*^9}}],

Cell[CellGroupData[{

Cell[TextData[{
 StyleBox["Time Series Data: ",
  FontWeight->"Bold"],
 "Measures a particular variable over successive time periods (annual, \
quarterly, weekly...)"
}], "Definition",
 CellChangeTimes->{{3.5278668539142933`*^9, 3.5278668892925243`*^9}, 
   3.5279713565594482`*^9}],

Cell[TextData[{
 StyleBox["Cross Seasonal Data: ",
  FontWeight->"Bold"],
 "Measures a particular variable at a given point in time for different \
entities. An example would be the price of gas at a particular time at \
different gas station. "
}], "Definition",
 CellChangeTimes->{{3.5278668906324573`*^9, 3.5278669495595107`*^9}, {
  3.5279713575294094`*^9, 3.5279713653990946`*^9}}],

Cell[TextData[{
 StyleBox["Pooled or Merged Cross Sectional/Time Series Data(Panel Data): ",
  FontWeight->"Bold"],
 "This is used when you have cross sectional data sources all measured over \
time. You could compare  the average gas price in all states for a series of \
years. (the cross sectional data is the prices in the same year in different \
states and the time series is the data for one state in different years)."
}], "Definition",
 CellChangeTimes->{{3.5278669518793945`*^9, 3.5278669645487614`*^9}, {
  3.5278670460846844`*^9, 3.527867124240776*^9}}]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Non-Experimental and Experimental Data", "Subsubsection",
 CellChangeTimes->{{3.527867129220527*^9, 3.527867138690054*^9}}],

Cell[CellGroupData[{

Cell[TextData[{
 StyleBox["Non-Experimental",
  FontWeight->"Bold"],
 ": This type of data is drawn from a system that is not subject to \
experimental control . "
}], "Definition",
 CellChangeTimes->{{3.527867146059685*^9, 3.5278671785880585`*^9}, {
  3.5279713740987463`*^9, 3.527971377788599*^9}}],

Cell[TextData[{
 StyleBox["Experimental",
  FontWeight->"Bold"],
 ":  Data collected by experiment. This is where the individual has the \
ability to control for certain factors in the data. "
}], "Definition",
 CellChangeTimes->{{3.5278671812479258`*^9, 3.5278672205559607`*^9}}]
}, Open  ]]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Data Problems", "Subsection",
 CellChangeTimes->{{3.5278672333053226`*^9, 3.5278672405749593`*^9}}],

Cell["\<\
There are many different things that could cause problems in your data. Among \
them are that you simply don\[CloseCurlyQuote]t have enough data, the idea of \
mulicolinearity (different variables move together and influence each other), \
and the fact that all measured data is subject to uncertainty and error .\
\>", "Text",
 CellChangeTimes->{{3.527867262343871*^9, 3.5278673284105673`*^9}, {
  3.527971379308538*^9, 3.5279713857782793`*^9}}]
}, Open  ]]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["2", "BookChapterNumber",
 CellChangeTimes->{3.527594385775165*^9}],

Cell["Simple Regression - The Classical Linear Regression Model", \
"BookChapterTitle",
 CellChangeTimes->{{3.527594392756012*^9, 3.52759440468734*^9}}],

Cell[CellGroupData[{

Cell["Introduction", "Section",
 CellChangeTimes->{{3.527594525849762*^9, 3.527594526955306*^9}}],

Cell[TextData[{
 "The main model we will be working with can be described mathematically as \
follows: ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    SubscriptBox["Y", "t"], "=", "  ", 
    RowBox[{
     SubscriptBox["\[Beta]", "1"], "+", 
     RowBox[{
      SubscriptBox["\[Beta]", "2"], 
      SubscriptBox["X", "t"]}], "+", 
     SubscriptBox["\[Epsilon]", "t"]}]}], TraditionalForm]]]
}], "Text",
 CellChangeTimes->{{3.527867424525761*^9, 3.527867464413767*^9}}],

Cell[BoxData[""], "Input"],

Cell[CellGroupData[{

Cell[TextData[{
 StyleBox["Population Regression Line (PRL or PRF): ",
  FontWeight->"Bold"],
 "This is the function that is defined by our model, assuming the error terms \
are zero. Mathematically it is ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    SubscriptBox["Y", "t"], " ", "=", " ", 
    RowBox[{
     SubscriptBox["\[Beta]", "1"], "+", 
     RowBox[{
      SubscriptBox["\[Beta]", "2"], 
      SubscriptBox["X", "t"]}]}]}], TraditionalForm]]],
 "."
}], "Definition",
 CellChangeTimes->{{3.5278674789730387`*^9, 3.527867559968989*^9}, 
   3.5279713963878546`*^9}],

Cell[TextData[{
 StyleBox["True Random Disturbance or Error Term",
  FontWeight->"Bold"],
 " This is how far off our models predicting of a point is from the actual \
data. "
}], "Definition",
 CellChangeTimes->{{3.5278675606989527`*^9, 3.527867619206027*^9}, 
   3.5279713975878067`*^9}]
}, Open  ]],

Cell["\<\
Below we will see a graphical representation of a PRL, the data points that \
could have produced this PRL, and a marker showing the error terms.\
\>", "Text",
 CellChangeTimes->{{3.5278676296255054`*^9, 3.5278676993620186`*^9}}],

Cell[BoxData[
 GraphicsBox[{
   LineBox[{{0.15, 0.8444444444444448}, {0.15277777777777782`, 
    0.07500000000000018}, {1.155555555555556, 0.07500000000000018}}], 
   LineBox[{{0.15555555555555559`, 0.2777777777777779}, {1.1250000000000002`, 
    0.48888888888888915`}}], 
   PointBox[{0.2583333333333334, 0.37222222222222245`}], 
   PointBox[{0.38055555555555565`, 0.2250000000000001}], 
   PointBox[{0.5833333333333335, 0.32777777777777795`}], 
   PointBox[{0.8250000000000002, 0.4416666666666669}], 
   PointBox[{0.7638888888888891, 0.2500000000000002}], 
   PointBox[{0.538888888888889, 0.47777777777777786`}], 
   PointBox[{0.9611111111111112, 0.4833333333333336}], 
   PointBox[{1.041666666666667, 0.3611111111111114}], 
   PointBox[{1.0750000000000002`, 0.5833333333333335}], 
   PointBox[{0.6638888888888891, 0.28055555555555567`}], 
   PointBox[{0.7777777777777779, 0.5138888888888891}], 
   {Dashing[{Medium, Medium}], 
    LineBox[{{0.7638888888888891, 0.40555555555555567`}, {0.7638888888888891, 
     0.26388888888888906`}}]}, InsetBox[Cell[TextData[Cell[BoxData[
     FormBox[
      SubscriptBox["\[Epsilon]", "t"], TraditionalForm]]]],
     GeneratedCell->False,
     CellAutoOverwrite->False,
     CellBaseline->Baseline,
     TextAlignment->Left], {0.7777777777777779, 0.31944444444444464`}, {
    Left, Baseline},
    Alignment->{Left, Top}], InsetBox[Cell[TextData[Cell[BoxData[
     FormBox[
      SubscriptBox["X", "t"], TraditionalForm]]]],
     GeneratedCell->False,
     CellAutoOverwrite->False,
     CellBaseline->Baseline,
     TextAlignment->Left], {1.1861111111111113`, 0.07222222222222241}, {
    Left, Baseline},
    Alignment->{Left, Top}], InsetBox[
    StyleBox[Cell[TextData[Cell[BoxData[
      FormBox[
       SubscriptBox["Y", "t"], TraditionalForm]]]],
      GeneratedCell->False,
      CellAutoOverwrite->False,
      CellBaseline->Baseline,
      TextAlignment->Left],
     Background->GrayLevel[1.]], {0.13055555555555556`, 0.8861111111111113}, {
    Left, Baseline},
    Alignment->{Left, Top}], InsetBox[
    StyleBox[Cell["PRL",
      GeneratedCell->False,
      CellAutoOverwrite->False,
      CellBaseline->Baseline,
      TextAlignment->Left],
     Background->GrayLevel[1.]], {1.1353350739773718`, 0.4986945169712793}, {
    Left, Baseline},
    Alignment->{Left, Top}]},
  ContentSelectable->True,
  ImagePadding->{{0., 0.}, {0., 0.}},
  ImageSize->{219., 162.},
  PlotRange->{{0., 1.3333333333333335`}, {0., 1.}},
  PlotRangePadding->Automatic]], "Input",
 CellChangeTimes->{{3.5278677038217955`*^9, 3.527867737680103*^9}, {
  3.5278677791880274`*^9, 3.527867856474163*^9}}],

Cell[CellGroupData[{

Cell[TextData[{
 StyleBox["Population Regression Function (PRF):",
  FontWeight->"Bold"],
 " The regression function is defined as the PRL + error terms. \
Mathematically this is ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    SubscriptBox["Y", "t"], " ", "=", " ", 
    RowBox[{
     SubscriptBox["\[Beta]", "1"], "+", 
     RowBox[{
      SubscriptBox["\[Beta]", "2"], 
      SubscriptBox["X", "t"]}], "+", 
     SubscriptBox["\[Epsilon]", "t"]}]}], TraditionalForm]]]
}], "Definition",
 CellChangeTimes->{{3.5278678829728374`*^9, 3.527867949029535*^9}, {
  3.527949669986481*^9, 3.527949673716332*^9}}],

Cell[TextData[{
 StyleBox["Sample Regression Function (SRF): ",
  FontWeight->"Bold"],
 "This is the estimator of the population regression line and we will use ",
 Cell[BoxData[
  FormBox[
   OverscriptBox["\[Beta]", "^"], TraditionalForm]]],
 " for the estimated one and \[Beta] for the actual . Mathematically this is ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    SubscriptBox[
     OverscriptBox["Y", "^"], "t"], " ", "=", " ", 
    RowBox[{
     SubscriptBox[
      OverscriptBox["\[Beta]", "^"], "1"], "+", 
     RowBox[{
      SubscriptBox[
       OverscriptBox["\[Beta]", "^"], "2"], 
      SubscriptBox["X", "t"]}], "+", 
     SubscriptBox["e", "t"]}]}], TraditionalForm]]]
}], "Definition",
 CellChangeTimes->{{3.527867950859443*^9, 3.527868049884492*^9}, {
  3.5278681008219447`*^9, 3.527868100881942*^9}}],

Cell[TextData[{
 StyleBox["Estimated Random Disturbance (residual): ",
  FontWeight->"Bold"],
 "This is the estimate for the actual random disturbance and is ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    SubscriptBox["e", "t"], " ", "instead", " ", "of", " ", 
    SubscriptBox["\[Epsilon]", "t"]}], TraditionalForm]]]
}], "Definition",
 CellChangeTimes->{{3.5278680513444185`*^9, 3.5278680978420935`*^9}}]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Parameter Estimators", "Section",
 CellChangeTimes->{{3.527594531258162*^9, 3.527594537217503*^9}, 
   3.5278681574691124`*^9}],

Cell["\<\
We are often presented with a set of (x,y) data pairs and told to estimate a \
linear relationship between them. In doing this we will have to find a \
reasonable estimate for a slope constant and also for an intercept constant. \
\
\>", "Text",
 CellChangeTimes->{{3.5278681808279448`*^9, 3.5278682175961056`*^9}, {
   3.527868288562557*^9, 3.527868288562557*^9}, 3.527971398787759*^9}],

Cell[TextData[{
 "We now have the question of how should we find ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    SubscriptBox[
     OverscriptBox["\[Beta]", "^"], "1"], "and", " ", 
    SubscriptBox[
     OverscriptBox["\[Beta]", "^"], "2"]}], TraditionalForm]]],
 " (the estimates for ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{
     SubscriptBox["\[Beta]", "1"], " ", "and", " ", 
     SubscriptBox["\[Beta]", "2"]}], ")"}], TraditionalForm]]],
 "? We know that we are going to want to minimize the distance from our \
regression line and from the actual data points (the further you are away, \
the worse your model did at predicting the appropriate value of y for a given \
x). Below are 5 possible methods for minimizing this distance (we will only \
use two of them: OLS and MM):"
}], "Text",
 CellChangeTimes->{{3.5278682890625324`*^9, 3.527868340949938*^9}, {
  3.527868387757597*^9, 3.527868495032233*^9}}],

Cell[CellGroupData[{

Cell[TextData[{
 "minimize Vertical distances: ",
 Cell[BoxData[
  FormBox[
   RowBox[{"1", "=", " ", 
    RowBox[{
     RowBox[{"Min", "[", " ", 
      RowBox[{"\[Sum]", 
       SubscriptBox["e", "t"]}], "]"}], " ", 
     RowBox[{"(", 
      RowBox[{
       RowBox[{
       "this", " ", "one", " ", "has", " ", "no", " ", "unique", " ", 
        "solution", " ", "because", " ", "any", " ", "line", " ", "that", " ",
         "passes", " ", "through", " ", 
        RowBox[{"(", 
         RowBox[{
          OverscriptBox["x", "_"], ",", 
          OverscriptBox["y", "_"]}], ")"}], " ", "yields", " ", 
        RowBox[{"\[Sum]", 
         SubscriptBox["e", "t"]}]}], "=", " ", "0"}]}]}]}], 
   TraditionalForm]]]
}], "Item1Numbered",
 CellChangeTimes->{{3.5278685045817556`*^9, 3.527868649344517*^9}, {
  3.5278687238007946`*^9, 3.5278687296305027`*^9}}],

Cell[TextData[Cell[BoxData[
 FormBox[
  RowBox[{
   RowBox[{"Min", "[", " ", 
    RowBox[{"\[Sum]", 
     SuperscriptBox[
      SubscriptBox["e", "t"], "2"]}], "]"}], " ", "this", " ", "is", " ", 
   "the", " ", "OLS"}], TraditionalForm]]]], "Item1Numbered",
 CellChangeTimes->{{3.527868733250322*^9, 3.527868736370166*^9}}],

Cell[TextData[{
 "min ",
 Cell[BoxData[
  FormBox[
   RowBox[{"\[Sum]", 
    RowBox[{"|", "e", 
     SuperscriptBox["|", "p"]}]}], TraditionalForm]]],
 " (when p=2 we have OLS, when p=1 we have least absolute deviations (LAD)"
}], "Item1Numbered",
 CellChangeTimes->{{3.5278687373101187`*^9, 3.527868764978735*^9}}],

Cell[TextData[{
 "min \[Sum](horizontal ",
 Cell[BoxData[
  FormBox[
   SuperscriptBox[
    RowBox[{"distances", ")"}], "2"], TraditionalForm]]]
}], "Item1Numbered",
 CellChangeTimes->{{3.5278687821378775`*^9, 3.527868782297869*^9}, {
  3.52786881848606*^9, 3.527868818856041*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell["Derivation of Least Squares Estimators (OLS)", "Subsection",
 CellChangeTimes->{{3.527868850294469*^9, 3.527868862663851*^9}}],

Cell[TextData[{
 StyleBox["Sum of Squared errors: ",
  FontWeight->"Bold"],
 "The sum of the squares of the vertical distances between ",
 Cell[BoxData[
  FormBox[
   SubscriptBox["Y", "t"], TraditionalForm]]],
 " and the Sample regression line is called the Sum of Squared Errors (SEE). \
The mathematical representation of this is SS = ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{"\[Sum]", 
     SubscriptBox[
      SuperscriptBox["e", "2"], "t"]}], " ", "=", " ", 
    RowBox[{"\[Sum]", 
     SuperscriptBox[
      RowBox[{"(", 
       RowBox[{
        SubscriptBox["Y", "t"], " ", "-", " ", 
        SubscriptBox[
         OverscriptBox["\[Beta]", "^"], "1"], "-", 
        RowBox[{
         SubscriptBox[
          OverscriptBox["\[Beta]", "^"], "2"], 
         SubscriptBox["X", "t"]}]}], ")"}], "2"]}]}], TraditionalForm]]]
}], "Definition",
 CellChangeTimes->{{3.527868880342967*^9, 3.527868995177225*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Plot3D", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{
      RowBox[{
       RowBox[{"(", "x", ")"}], "^", "2"}], "+", 
      RowBox[{
       RowBox[{"(", "y", ")"}], "^", "2"}], "+", "2"}], ",", 
     RowBox[{
      RowBox[{"-", 
       RowBox[{
        RowBox[{"(", 
         RowBox[{"x", "-", "1"}], ")"}], "^", "2"}]}], "-", 
      RowBox[{"y", "^", "2"}]}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"x", ",", 
     RowBox[{"-", "2"}], ",", "2"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"y", ",", 
     RowBox[{"-", "2"}], ",", "2"}], "}"}], ",", 
   RowBox[{"PlotRange", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"0", ",", "6"}], "}"}]}], ",", 
   RowBox[{"BoxRatios", "\[Rule]", "Automatic"}], ",", 
   RowBox[{"AxesLabel", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{
     "\"\<\!\(\*SubscriptBox[\(\[Beta]\), \(1\)]\)\>\"", ",", 
      "\"\<\!\(\*SubscriptBox[\(\[Beta]\), \(2\)]\)\>\""}], "}"}]}], ",", 
   RowBox[{"PlotLabel", "\[Rule]", "\"\<SSE\>\""}]}], "]"}]], "Input",
 CellChangeTimes->{{3.527869021215923*^9, 3.527869068913538*^9}, {
  3.527869105531707*^9, 3.527869318981034*^9}}],

Cell[BoxData[
 Graphics3DBox[GraphicsComplex3DBox[CompressedData["
1:eJy9fXmYVcW1/RVFBRGZBJyCIg5Eo0ZFYp6PaoIDqDFGjDNOKFEjmpiYaCJG
8SmOUdsBB+IYJRLUQLCdiKclkTxF7aZVRFrTDQLdgNgXuEiDDfxy7qm1q2vt
sxPzvny/+8/97urqffZeVbVr17TPHudfftKFHQqFwuldC4Ut//G9xyff/dPm
zZsTfBfKn74VY372xwerxn6p8Cnb9bxubP0XCv/8iSvHDBixWuEXluWsMMov
MvA6hRf8B/i48ncflHeGfIV7fYzyqxXu7VW450fh/reFJ+CVeWYcPDMOnhkH
z8BvqNrt+cen9Raegb9148KBU3fYUXgG/puL/vz0kl69hGfgNWdP2+uE13sK
z1wePLN88Jyvz2pn2Ktw8Mw4eDbwBPwxz4zjN+PgGfjNd66cMmy02CX4Scc9
uGe/nXsKz8Af2HnUIwOv6i48Ax+18Vu7jB7XTXgG/sia/R+aM7Cb8MzlwTPL
B8/5+qx2rD94NvhROHg28AQ8Mc+M4/+BQx/8xvf7g6/fo3hFD+EZeMzPIsHf
LLe37YVn4N8v87Cd8BzL7yw8c3nwzPLBc74+qx3rD57ZXvDM/IBnA0/AB/MM
HP0LPAOn9iA49MdvfL9b7u/Cg+BnldvhtsIz8MWzir3mTdhaeAb+w+fn95jc
2FF45vLgmeWD53x9VjvWHzyzveCZ+QHPzGfcnhcZ7XmR+Le4PS+i/r5acGo/
gsd8LhJ8+cPV3a46vCO150XJFedd1XnFsC2pPS9K1n733G1nTupA7TmUj9tz
kB+3Z9ZntWP94/Yc7I3bc+Anbs+LDJ7rDJ7rZHyJea4jf7hacPTfmOc6bm+C
x/zUCb5h74O2OvuELYjnumRcz74dDpxcIJ5D+ZjnID/mmfVZ7Vj/mOdgb8xz
4CfmuU7xDDsQL8XjZaGA8T3274UC+TfB4T/j/lMoxP19keDUPoM+ns9C/kd4
5vLgmeWD53x9VgsO/cEz2wuemR/wzHxSe3ZGe3ZGe3ZGe3ZGe3ZGe3ZGe3ZG
e3ZGe3ZGe3ZGe3ZGe3ZGe3ZGe3ZGexY+yT8bPC9yhn92hn92hn92hn92hn92
hn92hn92hn92hn92hn92hn92hn92hn9WPMf9ScUbzog3nBFvOCPecEa84Yx4
wxnxhjPiDe4vjuVTvOGMeMMZ8YYz4g1nxBtGe15ttOeAU/zsjPjZGfGzM+Jn
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
/ki4zB9FDs0T5bk072N7FU7zOMUbr2vROoDiLT+faoshp8koX2Pks21QOM2j
+bkKp/my4odx8BDHQYEH5IlkHp791XFbVg7g9ynUOMg5bdBu100aH+oXcpBP
FXZN9XKS94YefNHUPmLXX+i9DLBrwQfTRwwYsYn1VPlmocfrLx39ZNXYdcqu
OL4Ldq3q8dyy4ZWtsg6D+kUeyq3L40Jvqd/dx+54UH3V+mS7az74fa+ZYm+C
PJPPjx68dKcVPaVffO9v1/x8bP2GpHj6fheOnyi4g54jbx5z+9j64E+g59P7
HVx9RecewlvR64n8n+ANenb0eoK3fl5P5g16cn+BnsxnxxOfuWVsvZ6/77bx
46lVY9ckQ6sHHnR4xz7CJ76zuLSX8Hn8qUeuGV5Z8vMUsSu5YKurelcOWCvx
Ofj81bQ/HF5ftda/b1H8cHLP2Q1nDRjxRXLgqmUvL+kV/DP0xHupwCf0pDjE
Her1PKJDUn/A5G7CJ+sJPkd7PfE+IPAJPZlP6Ml83lPuF58lDe+++pNJ40N8
lbX/lcn+5fG3l/C5ptzOP096H3DlY6f160H+p0Xe7wk+f//wgrbhlcXklrKe
2wufyfCuu1cOWJV0+8FTv6saK/FA8uHaocPqq1bJ+17B571ez/Fzx59yeEeJ
b90sr+dH3b6/W+WATsLnKq/npeVxTeZHbnfSE3xO9nru6Y6d9fi0HsIn9Dzm
wfX71VftKHxCT+Zz13L9fppURX5mnW9vi7kek2vK9bUk6frF5b+cNkTqPbwX
4Io39xl3kcQ/Cb6zOKeT8LObf+7rFw39w6TxIW7Hc9987Oi5w0Z3FH5+6Z+L
96mBn2foueDnQ/9ctE/ws025vy8TfwIeji0/9/3kvQ1/eunxab0ojpqXbLvb
Y9fucEeY33Uqy/lI+kUcD9Qnpw64uN/rc4K9x3v5lwz86eJho8P87hkv/56z
Vo/ot/OWYu82Xn7r1PsOfn1OmN9dQPJh7+vldvWJf89LV7F3d99+0f5h79/L
8eQTCc/fsU/F8/ex5ee+mqy47syLG5eE+XvR71PF9VLjPvPyu3b/YI8RlWH+
/pmXj7z9sHe0l//xrSs+P2BymL9/RvJh79Nl3mb798CG+SzyG7/i42rYO8Dr
VVr7jdYPJgR7sd/9ShyHJ16+g3zY6/VxbC++/9Dvh6On7hDqd4yX33vEgmOK
VwR7p3j5M+/8yfMbaoO9RZIPez3/DvzDrupyf1/oqrvt8HDV2NB/fb071Dvs
8u3EoZ3ALt+uHLfbxMs/8gcDnxlb34HirgZ53wHs+ouXf/+r+/xswIitxa4x
JB92+X5E81zE8/PcVf0+PXvt46Ees/F3ucO4CXt9v3bo17DX+wFH41TyDN7L
QP7K+xlVv4f55344bZc1t6/tKDxs6597g/fz4AHfsd/D/CU8Fzx4v+rgV8GD
94cOfhg8eH+u4nDv/x38P3jw44XDeAEe/PjieBz045GLx6OGxI9fDuMXxkE/
3rl4vKvBuOPi8bEB45TDeAq+/Pjr4vEXcXvQE7z58d2xf/Pxg+LHxxtqnuLj
E3lfIcVdjuMuH/9Qu2pAXOficaEGcaCL46saxDkujscaEBc5xG/gx8d7Lo73
JO7idoK4Ts1ffLyq+PHxreLHx8NqHoe8+x0pzvfxtovj7QbMI9yOUTxWg3mH
u63Tzdc0LglxKfSM4/8GxOEO8wXw4+cXDvMLPC9e3w1xJp7L/HQ+aOe7qsbq
eS6//wL8+HmW4ucv9L4V6FmfX169nwXt3M8f1fwU7zEw9Ff72pj3da3v/N5O
K/oIzvNN1AvkrDt5dP/6qj6C4zkYT1EvLB88sz7AeR4NfbxfTW6I4+eE40Po
4/1zEvvnmiQ/zhR/nhj+XJ5L42wSj7NNvn4/STDeAef4LV5Pm51g3AeeH//g
fEJDEr+PqSHhuBH2+vE6icfrmsSIP328OidBfAKc4zSKB5R8fMfxT01ixYH5
dkkclRhxVMJxlMG/Y57R3rgegefH/1IvDvVC9UjxG9aNZyVV9x6++vFpBebT
xXwK/y7mX3hzMW/CM8WZWJfm50oc7ow43BlxuNgLfnz8LP0dOOYRT31+wakD
RvTi+YUDTv3Ccb/IjxuFT8d8+vbv4vYv/cVRu0L7d3H7l/5C8a3w6ZjPfDky
j3PGPE7sJT4d8Yl5qEM7hJ44P/bHVy/+YvPmUO+MU3sWOdT+Zb5AftXFflX8
sIv9sPhVR341yY+TZb7vjPm+PJfWV3m9F+OUi8cpGddcPK7JOOXicUrGNUfj
mssvL+ux8lwav1RcwfEDnZuy1tXV+nA+3mDgNbIO81Sntza9Oin4VcbjfTE+
JyDtLYnbW4OUx3503E/5fIK0T5GD5xb8J96vbxAc+/uQDxznAUh/2gcXPZ2h
J+2zC2/O4I3wBmufQuFx+wjnJSAf7+96YnTvvabu0FvwTj5eOvPek6Y8Pi20
Tx83Jr9Y8+Yp4yf2pv3BOsfnT7AecqzfX4v3W2clVx80Mak9LfgfrPMMff7K
mlEnhPgZ50KxLkTrLY7ki/8k+RgvHHgAjvUNPBf2Yt/k7ffOX/PBBOl3WM+R
fRPgWBf647SXnh82OvRfrNvH85EaWf+f/vmNfSsHyHxE1vN37bu+7YMJoTz2
Bfpe88XF4yfKuivWW2TfAfqoPCfxOZlqxrk8nZ+pZpzLY97B5YHn69Nk6NNk
yG8w5DcY5WuM8jXG+6Tkw+Ud4/gYz1V5ZtAeDB6M8joPIZ0jqo7lrDNxlk/+
oZpxo7x6PxTaD+NoJ4yjPeTLaTLKNxh4jfG+KpVPWurFkK9w1Iuhv8JRLwY/
CgfPBq7eDwWeGQfPjIPnfDlNRvkGA68x3lel8nMLz4Z8hYNnQ3+Fg2eDH4WD
ZwNX74cCz4yDZ8bBc76cJqN8g4HXGO+rUvnOhWdDvsLBs6G/wsGzwY/CwbOB
q/dDgWfGwTPj4DlfTpNRvsHAa4z3Van88cKzIV/h4NnQX+Hg2eBH4eDZwFU+
NPDMOHhmHDzny2kyyjcYeI2Fq/yr4NN4rsLj9buQ9y+OcwIexzMBj+MWltNk
lG8w8BoLd4YchcfnigMOezlvKuxlHPYyDnvz5TQZ5RsMvMbCVX5X2Gs8V+Gw
l9/7A3sZh72Mw958OU1G+QYDrzHeo6TeCyE8GPIVDh4M/RUOv2Hwo3D4DQNX
7y0Cz4zL/ibh4DlfTpNRvsHAa4z3KKn3bAjPhnyFg2dDf4XLuY58fhQu517y
cfXeIvDMOHhmHDzny2kyyjcYeI3xHiX13hLh2ZCvcPBs6K9w8Gzwo3DwbODq
vUXgmXHwzDh4zpfTZJRvMPAa4z1K6j0wwrMhX+Hg2dBf4eDZ4Efh4NnA1XuL
wDPj4Jlx8Jwvp8ko32DgNcZ7lNR7dYRnQ77CwbOhv8LBs8GPwsGzgSPuqWCe
Gad1G8FpfYbkNBnlGwy8RuH04fIuH29QeBz/BDz//HPgYeNzXVYMb5eXGDyM
O2LQTuH8c+Bh45ujjmmfdxo8jDv1pivDueXAw8bFzz3ZPp8zeLj2ig/nhv3l
8NlUzse8mcu7M468v1Oh0MbyXf3c1wa3z6sMHs48p+nC9vrD/tPnf/+BcF46
8EDtQng4fc0TpfQcMvPw0XVz+rfPwwweTu9aOjGcQw48fPTwrr9unycZPJwx
8Khnwznk8FlgrI8d9uWWS9rrDx5evHn/noVCq+JhcO8fDB1Ryfg69+Jr785p
rw/60beOX7e+vT7gbdCdyU/DuejA2wu7Nj+enjdm3vgeIXh7YfDhm9Lzxszb
oDfO2z89b8y8vXDSrWeE88aBt8Map98czhuHT5WxftVj+k+q2+sP3u5xD33e
Xn/w1vOdWbsWCiXW391zxopjR7TTH/6qZ3PPq9vrD57vufKIye31B8+9trzw
g/b6y77S7Wc8kp5DZp73mPyHDQuqViqe95jVdkp6Dpl5Jr8lPHe/pmabEZVF
xfPdnVoHpeeQmeceE3e/IJxDDp9KY/3q43J//Ezx/PFnO9xb305/8PzJNucV
c/R3l3c/fe9Coah4bnnk+pPb6w+eL99/yvj2+oPnlpfr/thefxl/1w/6QXrO
hHme32vCtPS8CvM8/8D526fnmZnn+ccOvKT9e2T4HDXzvKDsN5YpnheU/cNy
xXO9sX6VtdtPdXsut8/FiuesHS5R/Ny/8Lq+e7V7Lvj5Wk3/vun5Cubnax3f
qL20fp7ip99//fCWuwd8pPj52k86fad9/nnwsnu5PX+i+KHxU/jJ2udCxcO9
ZXvfVzzcd9cdW17WTk/wcN/sA2dWttMT9p5/8jsH7DriCWXvweNb1u/eLp8/
7D3kjKs+/tPYV5W9fR+87pw9270XAPbuWuZttrI342eOspfiBbG3yx+7v7FX
Oz1hb4ZPV/Zuf/NDk19qpyfs3fqXl3fZolCr4s/tyuXnCA57O+96ymGX189W
8Wf23Fkkpynplj1XxZ9eTxV/ertUnElxkNjreVNxZtY+g56w9/jvnVWTnqNg
e48/dLufFgqNyt6JB//sGx9XfaLsfaBt7s9ebPeeHVlHzdqVste3Q2Wvb7fK
Xt/Olb0U94m92bjwibL3vqxfK3uz9r9M2XvfH/5+TqHQrOzN9F+q7L038yfK
3syuxcpe768Ex6fSWP/x/lDxkMVdyxQPFP+G9YTMzyt+/Lig+PHjiOLHjzuK
Hz9OKX78uKb48eOg4sePm4qfemPdxo/Lih8/jit+/LjP+ss5bbLX+biC+fHt
baXiefcsblE898ziHMWzj4sUzz6OUjz7uEvx7OM0xbOP6xTPPg402qFet/Fx
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
4c5YD3fGeriUp/pyqC/yAw79i/q7o/4u4wj6NfVfGe/I74k/9L8VTvu/gtN8
x8Hvkf905D8Fh/8kvyq4l+NYDvlbZ/hb9vMKp3Va8cPIn579rk3+tObDwsxJ
WEetF/y1p37RmuY5R35t4H+99phS+h4B5MVmHHn8WQ7yj/Nzaf3c0tMZejpD
T2fo6Qw9naGnIz2lPUNP2o9zxn6cM/bjjPJtibH+kPz8/OMmpXnR4/NztcmU
03bbO827fmHsl5LJ77TMSPOu//ruXSvCubraxK1edkKadz1+T0+tgxxfXnCU
Pzub5yLeoPMAs0TPfc4c/2WaL532U4Q32n9x2J96bfOqB8K9nbbk+k2XFdP8
59l5u2Bvz+TEjWke9fg9RrVuz6kvHbV2jz6Yp4ueNy/qNCN97yGtjyX7vLXr
+trTuiM+l/7y3o2/3jnNr4686njuK5/evlOaX93PawQ/+4XBW8+b0NPzGcov
633l6DS/etze2pLfpd1/c6+K+PxouHfpP9WMx/mdAx7nIw54nD834HG+14DH
591ZH5xHD3h8XjzgcV7IgMd53wIe5ykLeMxPq8FPq8FPq8FPq8FPq8FPq8EP
6wN+Wg1+Wg1+Ah7neWw1eGs1eFP8VDAe81ky+CwZfJYMPksGnyWDz5LBJ+sD
PksGnyWDz5LBZ8DjPI8lg+eSwbPirYLxmOeiwXPR4Llo8Fw0eC4aPBcNnlkf
8Fw0eC4aPBcNnosGz0WD56LBs+KtgvGY52aD52aD52aD52aD52aD52aDZ9YH
PDcbPDcbPDcbPDcbPDcbPDcbPCveKhiPeW40+Gw0+Gw0+Gw0+Gw0+Gw0+Gw0
+Gw0+Gw0+Gw0+Gw0+Gw0+GQ9wWejwWetwWetwWetwWetwWetwWetwWetwWet
wWetwWetwWetwWetwSfrKevZBp/hQzw7+nM141/t/R+h/Fd7j0Uo/9XexxDK
f7X3CoTy1n1FqnfiQd8zjPFQnu8H5uOhvJXf3MrHbeWPtvIdf7X8vKreK7g8
+TejnTQa7aTRaA+NRr03GvXbaNQj6yN+z6iXgJNfEpzGTcPeZsPeZsPeZsPe
ZsPeZsNe1kfGTcPeZsNeZVcF4xSnGTwUDR6KBg9Fg4eiwUPR4IH1kTjN4CHg
FKcJTnGa4BSnCU5xmsGz4q2CcZp3GDyXDJ5LBs8lg+eSwXPJ4Jn1kXmHwXPJ
4Llk8FwyeC4ZPJcMnhVvFYzTfNngudXgudXgudXgudXgudXgmfWR+bLBc6vB
c6vBc6vBc6vBc6vBs+KtgnFatzH4bDP4bDP4bDP4bDP45Pxmsj5j8Nlm8Nlm
8Nlm8Nlm8Nlm8KnysFUwnvHJ55fAp17X2idVp935JeB/L8v5VOFfL5d/X+Gv
l+16QuGryunWZX1e8KPL98MXKvzOspzlCs/u4fO5JvCp18EyPvlcE/jhfVXg
4VwT8MvLz12p8L3LPCxW+Kvl585T+ONRHoSAbyzzg/wkAT+mzM8yhQ8v46sU
nvHD553AD593KhR8ngIDD+edYh6WKPz4sj4fKXxhmc9XFZ6l30felYCX1Wx3
Diq2d63CM3v5HFShcE9ZEJ+Dgl3hHBTwT6L8JgGvjPIpFEl/5NMokv4lhWf6
r1f4ZVFeiYCXtWm3vw/85fIfZiu8/Fg5F9FMdoX9buALIv8Q4vmqyD8EfEDk
HwJeH/kHLv++wu+K/APPI8J5qtiuhQqvjPxDwC+L/AOX/0LhVZF/CPgnkX9g
e8N5KuBjI//QSDwsVnhV5B8CfnfkH3ieEs5TxfwsM/BVCh8b+Qd+7gaFvxT5
B9Y/nKeK5S9R+PDIP7TLfxX5B55fhPNUQPaK/EMz2btW4WMj/xDw2D80k13h
3FSsZ73C7479A+kfzk0BIf9A/KxXOPkHwS+N/EOIV6dF/oHjW/wukT6tCj82
8icBnxv5E47r+DwV6ovPU8n46+WE8XfnzG84xudlfkbh2bip97n8p4LxbDwN
55SAn5PxqfCM5yUK3yNuh4Jn48IahR8Vt0/B94z4D/jFcbsV/IWsPyp/nsVv
bQrP/G04pwT8z1k9Ktz7Z/g9wb2/UuW9fzPw95Wco2K/JHh9VL+1xMNaVf6S
2M8T/+tU+Tti/yb4b+JxQfDp8bhAdrUpOTNiP0n66HXXj+LxRfBuMf/SXyqN
dcJeMc9UXq8TvhfzLH+fbqwHzjPWA7+M7ZK//z3q1wE/MW6HgtO6t+BPx+1N
cFoPF3zXuB0KTuvkgtM6ueBfxu2H7a7g8rvH7UHwl+N+athr2WXp32job+kZ
8MGx3xP8gti/EQ9rFN4v9leCz4/9ueBbZr8V7j/VjO8b+3/BP4n9v+AXxfNB
wW+P54OC/zGeD5I+fB5M7DLKyzq29N84H2vo13EeUvYzSxXeFs0vAt4/ih8C
fnQUPwQ8zlun9n2qGed8svn6hw/nGczXP3xi/cMn1j98OO9evp6hPxLP5N+W
Kpx4Fpx4Fpx4Fpx4Nvp76C+072z094DTvjPJ1/s72UetI+O9dwq/zOC5PtIz
fGhdS9oP51XE55ho3A8fWgeT/8vG95WW/kr+j43n+k81A7Geof0viMcvwbP1
xk0Kj9tP0L9/FB8GvEP0O8jJ4n+tD627Cu7naxhfBN8yKhfwOA8jx3UbFJ7x
qcvH/SLYRfdGE+PeaGLcG02Me6CJcQ+U5IdzaLhXS/dtE7pv68uXEtxrpvvO
Cd139uWLCe6V031zwf39FymffffF/R3/O+Rpye7NhXWb4TfU7ZHmM7wwPifv
cO6UzufLOfPsXkyYP15078i/p/fvvD2wy98f7+XvuYR5360nfWdwqr+/ryrj
He6r+vutguN+62OvThwwT/K+hfspv9t35n+FvG+tjDvGh+5xcoeQDy7cW6zI
cMf4nDNOWR7ywYX7UG9luDNwxf+cuDw/F/qInKGxPoKTvYw7xj1vwifw977/
3MyQzy6cM/e41LuBS/nht75XDPnjahlHv7aeK3jpl9csCfkHg5y+pTOmXP9n
fQ750dguKT9x5ejJIQ9d8V/y/+/aZelp8Wm1B6+n6r9W+7TaucWPVY9WuyXe
vmo7VO3t0bifsvyE5Vv9y2onVrvyz1P+ge5rJLN2uWL6pPHwS22Kz/h3wLP7
LFjHaE1G3vyb/mn+GX8fUPArW0sfX9G5B+4Pqnr0/lBw+MO4HPLR9cL9RPFL
uJ/o7zMKjvuM/v6j4Lj/6P22tDf4bX+/UnDcr8RvfOM+pr+/Kf0L9zf9fU/B
cd/T3w8VHPdD/X1SwXGf1N9Llf6Ce6n+HqvguMfq770Kjnuv+I1v3JP193DF
D+Aerr+3Kzju7fp7voLjnq+/Lyz9HfeF/f1iwXG/2N+DFj+De9D+3rTguDft
71kLjnvW/r62+B/c1/b3uwXH/W5/P138GO6n+/vsguM+u7//Ljjuv9N9SbkX
RvcQ5R6cjzekXyPe8PfxBcd9fLrvKffI6F6n3Dvz9/2VP/H5AQRHfgCfT0Bw
5BPw+QfE7yH/gM9XIDjyFfj8BoIjv4HPh6DGcZ8/QeE+34LgyLfg8zMIjvwM
Pp+D+GHkc/D5HwRH/gefL0Jw5Ivw+SUER34Jn48Cfk/09PkrFO7zXSjc58cQ
HPkxfD4NwZFP46z4XpJD/g26B+SQr8Pn9xAc+T18XhE17vg8JAr3eUsU7vOu
OMZ9nhaF+3wpMu4gX4rPPyB+APkHfH4G6afIz4By+I7zGCyU8sjzgN/4Rl4I
//+O5fhyjstTHgmRT/kTWH8pD/3JLsk7Qfo7Q3/Ja+Hzcoh85OUgPiWfA/Em
+R9IjuT3oPpyqC/KeyM45QNJ9nnriJvG1ndjP+mAU16RZK/xn12VxhuUNyM5
r+nhqjRO8M+juEXW/ykOwYfjE9kvc4zH830+/8BxJj4lhfv9Psf4pdF+FuM8
P5X9R4X7/UqFx78Dfne0Lhfwj6J1uYBXRetyLIfny7Kfq3C//6twf55E4fHv
ZtIz5D2Inxviivi5qwx8mcLj3wH35xOkfQL35xkU7s8/KNyfl1B4/Dvg2Xqa
Ps+/IDqPFz5V0Xm88KmMzuOFT310Ho/L63P4ldF5vPDZM97fFD39fp/CP4n3
NwU/Jup3YR11z6jf8TmEksJfjvpdwC+P95EFp34nOPU7wanfkb0tCq+M+x3x
UK/wF+N+J/hdUb8rkf4cL8m5LIXH/a5E+jcpfGHU7wJ+fLRvVSKelyjcn1tT
+IxoP47PtXIcJefoFD486u8BPybq7wH35/oU/ni0HxrwV6N9z4DvHe1vthIP
KxXuzzEqfEa03hv2s+6O/E8b8cDxGHhbrvBjIv8T8PXZ+U+F/yna7w54tq8q
643iDzL99X5Btk+3TuGt0TnD4M+ronYS8MbonGrwk8XofGbw20Pj81eEL1Ry
xkb1xffslqvy9VE98vmKz1T5qogf3tdYp3B+v2msj3V+QO8H7RrrQ35J709N
j/WUv1f903MI61R5fv80Pn83xq8LY/7l/z6MeRb8ubidCO6i+g3t9uaoHgO+
d9yeBX8pbs/Uf3leg/as91Uviv2A2J3xEOJk4PNj/yC4z98ofgP5G32+R8GR
79Hnn5R+jfyT/+46sLXOaa3HWuuW1jqnte9g7S9Y+xrWur21/m/tI+B9Kywf
72dhHO9zyccbBK/a+6Ctzj5hR3lPjSFf4fH7/hjHeN2a7LbqhYXDRvek57Ym
Zxw3+Z10vQLvrwF+2Iyvf5nmA4nfs9mafC2S0yL4tU+dMrhywI6kT6iv+H2O
+v1BqMdfjj3oxHEX9SD9S8lOL9+5IV0njPUvJc/u3eGdCbO7kv6l5ILWbfe9
6vDtSc8gP+azlFx90Oim9H1nsZ4lg89icuedP3l+Q20X0qeYdDry5AkDRnQm
fYrJazueuajXzG3pucVkH3f7kcHedYL/pdv3d0v5jPUpGvXenOw55s3X0nqJ
yzcnZx29+0evTupN7bbWfbF48rtp/cbtttb9ae/ZK34ReBP8hcfO/XOqf8xD
rdvp+uEnTd2hI/FQ696uOn7nEZUdiIda90qnKy9M1yXiegnyY36CPrG9te4v
0wY1pHnFY3tr3ZfLD12frkvE9ja6Qzvc/bu0ncf2NroDzntgYmg/LYIfVH/w
xWk9xvY2uief2rcwc9LWZG+j+9oZ281P10ni99UGPO5HLKfF8XNjHhrdN7ye
MQ+N7pBcu5rdTfdutTT0lxbBuz755G/Tdhvb1eyO//b5q0ed0In0bHbf9Xis
Z5AT6xmeS+3T9c9vn26Ub5+xnkW37zWnP5vuX1C/c7/J73du2/x+5xLf72L9
g3zqj27v/P7o0B/JL7md8/2SM/ySg18i/+Pgf+LnltyOHfatHja6D/slGY/I
nzvDn7vYn4t/FjnknxmXcQF43L+Unxc/nF++lMCuuN0GP4z3rAGP/XmD4OA5
brelBPUSPzf41fi5xQT1Tu0wQTuJ9SkmcbtqEBztMNanmMTtNuzTQX7MW3My
KtdvNyfoR9TfE6O/J0Z/T76b39+T4/P7e2L094T6O/xh8s7DU99I12PJ3ybf
yPe3ieFvE8PfJoa/TQx/mxj+NjH8bXJAvr9NMI7QeJrsdew7YwaMUONpYoyn
Cca7uF3VJvH42CA4xtPYrtokHn/DuVNjPE2M8TRBPEDt0OXHD82O4g3xt9k3
9/fgP6nfuX2ifif9y72W379cp/z+5RCPkf8RfcjPuNjPSPzpEB+S/3GG/3GG
/3FxvCrxp8gnv2rwxu+PaBE8jrclzndxfA79g/+P9Q/jBcX5DvMFmu8YfHK+
zRYDl/mOi+c70IdxmQfxcxVO8yBj/OL5V8j/PGPatYeleUfjcdCarzUnzcte
6xT8SY3gzz713ph28bDj8rE+jclh581+d5TYWyN4h+4f7JH291gfVV7iQCoP
Oc6Qz+Vdfnmx15G9Er8Z9rp8e7k9hHVF8B/LDzjVC8sRnqEPzVMSY56SGPMU
8sPCs9QL+W1n+G1n+G2aN0n7IT6l/yYjb15+Vzq+ED/J1uduOzPdD415rk3O
n/ur68M+aThPtWL4BSvTcZn6XbLfuv/5zYAROxr9JbxfHnKA58eBeM970D9f
TsmQE3COD/PlM96gcBqnjOcWjecWSX6LgYf4MF8ffm6TwjkOzNez2dCz2dCT
5TQZ5UM/yte/2dCz0dCz0dCz0dCT5TQZ5RsMPPTT/OfWGs+tNZ7L5RsMvEbh
1B9dPj/hE+sZPrGe4RPryeUbDLxG4Txe5OsZcB538uU0G3ICzusV+fKbDflF
Q37RkF8k+XofluPPGG9QOMef+XqWDD1Lhp4lQ0+Wo/dhOV7N11/JMcq3KDw/
XlX+37Cr1bCL5TQZ5fU+LMe3+fYq+Ub5FoXHcWarwUObwUObwUObwQPLaTLK
Nxi43p/lOMrQ0/CTAc/fv1B6Gn6S8RqFxx9V3jGeH5+r9mboz3FLk1G+wcBr
FB5/lBzHOO+nxDjvm7C9ll0cRzUpnPdN8u3ic2v4KPmOcd5nAc77LPn2qjjN
KB/2X/LtUvGYwuOPiusc47xfk6+/it8UzvPHfD1V/uEC47y/ky9H5d0tMM7z
yvzyKp5xjPO+EnDeV4r1bFE47yvF5RsMvEbhpD/7bcc47wfl68lxUZNRvsHA
axQef1Tc5RjneXq+nhx3NSmc5/X5eqp8oQXGed8nX38Vvxnlw/5Ovp4qTlN4
/FHxnmOc933y9VdxncJ53ydfT31vnnHeD8rXR8VjCud9n/znqvjNMZ6/H8Sf
NqO8iluAG+MI4/o8GO9TxPJbDFyf++J9gXw5av74L8rXGuWVn1Q4ryPl66/8
pOXHVD3Fzw2fuL7Ch3gznqv8j8J5/zpfDvufFgMP68P5clRcrfD8dWPV3iz/
ZtSjtX6i1g2M9tBk4DoPUiw/fGL54RPL5/I6bwafu8jXx2qf1jzdeq6Fq/hW
+QFe58zX31qftMrb85r3Lt9v+5my/xX8FXCed1xTfq8c3l8f5h3Yr2E9x/ny
HA/Tvj/0d5vuvr18viV/POL9jnBeiOM3yOF1ifx9+VY3LrZLxgXDLndNZFeY
zxp8Cv7/AM1FQJA=
   "], {{
     {EdgeForm[None], GraphicsGroup3DBox[{Polygon3DBox[CompressedData["
1:eJxFmnncTlX3xu/jvjfn9JyjeZ5n1a9SIZWKprdBEnpEVGQK8SsZklKiSZOh
IslQaEAyNBcaDVGkgeZBA2kumt/v9V77/bx/nGdd9zrr7LP3Pnuvda21nz07
9m7Rq0apVPqBP2XkSUmptDnXteAlaal0PvKXqlKpTlYqLQb/X14q7RtKpaPB
dbm/LfgA8IWVUmkFvzuDf8V+Mbg9+GfwS+DW4B/BH4Cvkz3tbcOzDcE9eXZH
cDc6UM39LcH7om+H/mPsrqY/XyJ34VqKfhiyJjY7gpthczB9+pDfJxWl0mf8
fg39B/zeletwcFd0L9PuueCf6MMW6PcBn4d+c/De4LbgnWl3CXgo8nnsLqE/
k5G1sdkLfRtsnuP3LPQfYNMMfV/096JfSftdwBu5/ya4K3gT+HjwY+Bl2Azh
Ohs8ludmom8MXofNdehbgMehn4r+SPAX6J8BNwN/B24Mng1ugJzLdQr4G/Tz
wP8CbwA/Dj4V/C34WfBZ4O/B+9DuUeBevGcK+gbgteinpZ7/L8EvxLk9ELk/
V1vG+Ab6Q5nbf3j+PeQQ5DPYvEU7D/BsffDn2LwIrtYaAj8KbgJeD24IbkM7
fZAzuI5H/zX6R8DHgb8CX0ubT4NXVdyH3fjWCyXRH4G+G/rOfNcKv1djvwq5
AzY/Is+sjQHyeOyf4noTfA625yC3wGYp8kn0K5Ct0O/JGC7ikdd5f1N0AZvn
kM9z1QTPR57OVQYvQp7BVQE/i0y4tuHZU+jPKeBa6Bcgm9KHf9Adx3taBe+d
JVovvKsT9m/wrn1y7wvtj43c649NuSZ7CfyNvjWyxO/r0ddATuD3d6gmIu+k
3fEaK/1/Uv3A5kXk41z/YPME8nZsTgQ/Rvt3g+9D1wz7k+jXocx/T/QL0aU8
+wLyJa7NwC8jf4v9Ub9qZF6rVyHLmdfb1cj3eX4I+AJwb2wv5Forv4D+AWR/
9H+CHwEPBO9OW/XAF/P+v9BPB1+J/m+tA/Ag8B/gh8FXgF/BPqfN5cjmtT2/
rdG3Bp+A3YPMXxnddtifTptnoP8NeZTWKvcGo58B/hnb+8H9wAXXs+AhyKrM
a+waZMb83sq7aiHzzOv5WmQ1bTbh+Wm017K210QdcA3ktticyvtuxm578Bpk
iWsiooJNgc1h4M7YzOD38cz5+CqvM623+7G9intnlvxttk48/+q39tFJyBbY
3MQ1mvun8e3uTL3+T0N3V+r5PB08gvufg0ci76rynDRAf2+VffKZ4Lvj3jwD
PBl8Ari5/G3ieb5G+4p3BNpYw3PNkQPRTaCP9/D7QMWBzOtxGFd/9btim2XY
fkGbI8DdselCOxu59zbPteDeIPST+L0Wm1vle7E5G/2VWs/oN3F9Cb4T3a2p
Y8eJ2JzJ78vlA7nfATwSPBvcCJs7wfWQF6O/F/w0+gn8rgv+lPeOBdcBf1zl
GKHvvpX2OvajwXOxH4PN/uCPsNkp9/w9lXs9aQ41782xuYlvtyZ4DvdD/yH2
41L7z6a0vSvXc+CteXY3xQnwNuCJqdfAZ9j34vlJ4Pm03Rs8GbwA/BX2tySe
8wuD5/Ax9HugX1DyOv8EPDixrzsu7q/6qX3yIvBD2Eygjz2wmYg8Nq75hbRz
d5VjYkNsX6f92tgsRt6cOp42Qb8RPAZcop3fwGOBSXyvxjtc92mnPm3Pr/I+
0p7NsBkO3gH8XuaxaD6/ls/I/K7fsZ9JP25D/yrvPTC3j/kktx/eDpv7sVmv
ecbmT8VW9DPBm2GzVXBs6k4b/2AzAVxGP52rOf2pYJsHf/dO2ByQ2599jNyc
e4+ir8rtZ+4D1wDvgP5J8BbgLcCzNHRwBn4InIJT8IPgWuAdFUvAW4JvSs0T
GqPrF+zHFvHey4N91yvgnvTrD/AI5GmMb/vE4x9bZc6guPCTuAr6txVfEsev
27XmUvOTU7E5GbxHYh4zPK69E9B/mXov9AAflJnbvIx8KTPHacv+6xvse1+l
P+30PPgR8GpxoMTrWXtGe0cx8lme3Qn93/TxXH4PQz+N+89wjVd8R9ee6xbw
dOkz9/8v7KuD+dsU9AsiXzoAeQPj3wqbu5Dnac2hfxib1uCh4KniOIzl2rL3
/kSe6Yh+udYvv3+QLxSXDOYtg7GvE8x/rgYfFMydrgXvH+xL5VP3DuY8A8Fd
gr/pS+CltHsBeBf5Y/S9wHejv48xNKEPC+TntOcVF9DvFcyjrtB+BJ+suAbe
KZi3XCqfBl5fMk87iLFuALfiOiqY+42oeG61blfrW9GHC8G70YeBwXt8tXhm
MPe7LPJecaH/B18SvD6XgvcM5ngDwLsEc6o+4Nm0ewf4CeSczD5E/vjRzHuu
Jethunw3Y1wlvsS9biXHMnGMLen3a9idxNWvZO46F/sbsX8T+5OD/f34irmf
1sZHqXmM+MwUbGvQxib1n6ttIgeCX5EfD+bD8uEvYH+Ovin2ozLznJHilcE+
5/G4f7XGPk/tKxQvFDfkT7Q/Hkf2DN7XSyrmS5rvoeB54F+0zoPXp/b7u8g2
wf5tHjZDwcvUPrhHsJ9ZDH468xrvxFwdTt9/LTlO1wX/XPK6PDqYw4/E/jr0
F3H9ye85cS19g3yDdv4Cnyfux/2jE/fp2MTcsg94QuY270Mehe4nfWuuw8Rh
47umBPN/5QEfYjeQe+8jGwT36zb0RwbP/+3ghtz/Hty7ZE6o9r6NnFC6DRo3
89gBvHvud/4d36v9pndOpv1GifmtvmM18pjE3LdPHK847qVcXRPz45WZ+Wd7
ZK/EY9a3PzTx/tX77gnmov2Uh2VeF3rXY+jbgA9X3A7OxW7UGgvODW8AHxKc
R1yvPCv13tyZ/j+feu/vCv4qeN6mIocoT+XqoT0cnJ9+zLPHBK/5UeLl4EvA
d4EPTLwOW8q3Rr5xD/oBwXH8HfAd7INv9S2QDYN5+x3olzOG3+P6bxw8Z2PQ
Nwn+zmO1rlL7pXXYLMu8R8T9+gdzhrexqR/sl24F1wvOr28BXwGerzUM7hMc
g1ZWzP/lZ0YjD0ffDnyzct7g/TUM/K/gObgTfCq4ZxyvOPJFjKMl/bosOA6u
0Dznzs2Vo7+dmteJb58W50p+UjnFOq095HvYXB3XeZY479BaeoTfw2j/RfzG
iMy+8Q5kqOlv8yft3Zg6v1aOJi7fD/tmyN0zj1d8e3Awt/mI946ucp5VL3Ne
1Qn7VuKAVebh9dEfw+/TtYeQtXh2J/Ah4O2Cueuh4vHYDeXZF3ju6rI58y3I
E7nXH3lW6hxP6/2ZYF8vn39v8Hf/Dfxo8LfWGn46eD9qL68P5pDqj/r1cPRF
8klaV1ons4LHr3n4K/h5tTMDOS14Tz6IHJ9532i/yrfIn8wN9vvy/8r9tPfl
o6brudR8sm9mfngZY2maOq5pTlqhP4d3ViXeq/ouyi9mp16rWpMzta6DOc+L
FXNrcWzlybMqjinvKJaiP037hTaOiHFktvx35rim+DYp2BdNRh4WbD9Ivjqz
751Gv0ahH0w/e6fOcdaiPxL5buq84Fz5+7LzgmuQY4Jzlr6Kudy7hnF8itw6
uDbSQ1wm8z5eQBv3ZPaf88XB+S6bsf62L5zzXoX+u2B7+Y1x4oOpfVE1uC9t
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
qb8vXlk4z9f5478BRYuHqg==
         "]], Polygon3DBox[CompressedData["
1:eJwtmnn8TtUWxs/xvltne99fpZluNA+aNIgmIXUTSqbSgBSKooEmDSjdJoro
mgnJFCJ0K1JRZKhoUlEqipJmpek+389z/ji/337O2vsM++y91vOs9R7UqWfL
HpWSJBmmP0X9HxCTZIX+fy7wVzlJZus4rZAkx2dJcsGuSTKqlCSnC3fVsV7t
3uo/Qf1fVv9v1Heljt5qN9K5CRpTT/ZqajfTuWsrdG3Ze6ndUOeelH2p7CvV
/lLnGsu+XNe8Wtf+R7iZ7vdBSJLqaZI8pj6zdW65xvfQ/1OFR2n8szrOVnuk
+jXT+GNkXy68UX3OFn5H+EG1L9G5Beo7Qv22qt1SR3+up/sfq+t3FB6h9suZ
bU+p34UaP0r/vxFupeNe9V+t6/XR//OEp6jv/sIt1O6nc9XVf5nw9WrX45lk
36zxR+v6rYWPUXsP3aO13u9mHU/pXfsIz5DtDY35QWO7Cw8Rflb4C+HVGrOn
xt+jc6+r/R124f2EH1a7kvqMVfsl9T9e9++vcy8Jvyf8m2z9hF8Ufld4h/Au
OqYILxE+Sf37yv6C8FrhX2VbJzxOuL3u1Vb2TLilnvVOvUtrfY9MfabKvlT9
T5Z9qXBXtU/UuaHq84bwtdiEnxC+VH0a639NPfMSXetfsneQ7Std/wrZUuER
fBuNOU54uvpUVt9FsrfS/U7W2Ka6/w06zlC7KHsLtW/UMUnzl2j8cP2br/HH
anw32Qfna+Vz2Z7VUV99a2vshbpeV9kHyj5D9s9ke033ibrfDTr3vNoLotda
K7Uv0vVmCO8i+7nCLTT+AI25KF87+8v+uvA1zCV7SPcolD1/C3WutuxF4fHC
i4RPEP5MfR4UvlDXayl8q64/SfgV2bep71t6p1v0vI3U72Ld70f1a6L7D+Ib
qn0X61r2bjqOEF6h8SfI3kn28Wp/o3MnCl8lfIrad+rcM2ov07gfdf3ndLTS
2HeE2+j6d8g+nbUl/L1sdYT3Fj5X+HzZ7xJ+Vnil8E+y3y48Lf/+24Xn6bhQ
13ut6PVRR8/dXPgmHfXV/iHz+3fQs1ys912i/l2YC517XLan9b6r1N6kc+00
fozGXa3n78YzqH1N9Ls/I/tGjd0q3Fz4buF9db2vhB9W/7t0fKb2WMaofZv6
nKf23To3R+1V6v+zxm8RPkK4qOfprPH3Cb+Z+4s/ZR+tMVdqvB4tOVHtP0v+
XlNlP1r9P1f/vrLvq3MPqX22jqN4P9kXa/wqHbcU7ZMm6iIl4Vlqr9C5uhq/
VddrIHyz8B7C35TsC/GJewpXqpwk/9H1q+pI1K6i8TPVfFP2U2TvqWsO1HNt
Yv70DgX1eUB9NwvvAKtPm8w+Gl9dxofn36+ebMfqeTvK1ivzfO9Rtr94X/Yz
Zf9L17hX1/tT5/5U+xqdq1zZPvyRfA+xl04THl1yTCA21MLfCX+s6z2taw0Q
Pl7tj3RMFr5PeIP6rRN+Svhe4fXCHwr/T/dJdc81eraq4NwfnaF779A1uwgP
ET5SeC37S+07eGaNf5f9JdxH+EPhT4WnCz8s/EXmPc5ef0T4qLLXEGsJH1BL
7Q06pgk/RMzLPP/361luFU7V/oSYFvw9PtXz7Sm8ULYPNKa+nmd92WuDNcLe
3k992mp++2TeX1cJ3594TpibV3R0LHrNDFSfD4QX6Pr/CL+jvlOFl3EtYhb+
Svd4SO3Lda522fulj67fQccx6n+yjivVPk7HUNk266irvtdpTEWFfTpzyZxW
iY4BxAJ8fkn4q5JjFTFr1wrHDGIHMaMs+xbZz1L7Jp2rKvsU4TsLXkOsJdY8
a//IfH18WvL+aq9zlSvMIeAS7LH91f9z2Wur3VnnYoX3HHuPmF1d9q9lr6/2
jTq3u+w7ZW+eOWYSO7+UvY7s3WQvVdhfdcK/6xgm217qv4i1IPtZsnep8B65
Vd/vY/V9WvaXZV8ne1vN7xThxcJ1c387B5+R779hBX9DfOXzib/tZyW/K++8
S4V9Hr6PmEqs7FhhH/yz8DjhTep/itrd1acs29UV9un76fovRO+3/mp3V58z
cp+0i553YGpfxZxyv5DvxQ263uHCV+h6ocI+Gl+9V+Lvf4rG7IPv45vr3d7H
52vsXzr3tmy/qE971p7sh2j8y7JfrvZh+DNibfT8EsOJ5dvZ48L3CO+n/t8L
XyjcV7ia8A/CbYX/I1xD+Fvhc4Vv55mEY9nxZ7lwHeFFwpepfajOPaj7Pcc+
UftYPWNz2X8qmavB2Q4UvkH/G+DTdVRTnzGsR7Wv1bFR7fd1rprm6lGNmaW+
TaJjMZwEbjJN/Xqn5h8j1f5RYy6W/QHZa+r676p/Y9n64ePVXotPF+4rPEXt
ZtFck/0Bt2sUPf/MGXP3pvDx6n+lzo1Ru2H0XPKOvOtbOu7kubg+sVDP0F39
P+Ibqn2W+h+idjv1aa5vuVn4wdz/fqJ2g+i5ulT2hbrWFyXHTmJoFT3/e7Kf
o/79dW4a6xtumZqzDC14DGO5xwOZ9wDccUfRe6O+8MHCl+R8+1Th6sIXCDcV
/ln3u4K9LXyw+m8T/rfwHcJ7s/6iuR4cCC4Eh4BLwBH+yLwm8U3XZ16rcFy4
Lpzjz8ycBG4CB/5L+LuyeR58b1bJHAOuAefcmZkjwZUmCv8s/KXwnKI581eZ
OR/cDw43R8+2e9l7d43Onc58CT+p9p34APX/VfforPZgnTsC/yfcldiKj67w
HmIvwYmql83J4eZwzLm6/rf4j6I10E+ZNRBa6EnhH+H/7D/hocJbMsfIU/Vu
XXI9dUvmdcn6hCc/qXbP1PGdON84OrYSM4gd50Vzbb4/XOqFzLHhRO2DC/S8
k+DGqTn046x92Ufp/4HC56jdQ8cjwl/yzhqzSdeYq2s9Lvx1Zo4EV4LzVdK9
vitZ66B59oFvlc3V4ezb1H9r2dx2fGKu9zXzLTxS+DvhLcRz4VHC2zNzSLgI
nCSN5iBwv9WJ48nF0bF9bNF8mxjROeeL4zOved6dOUA/4pPwTfiklzJzQrgh
PuuEsn0UvgqNtjCzRkOrweGH614HCN9ftA87hPnUnFTSXN0k3CCY48P10YQj
o2MKsYUYUjM6BnTI4zl6j5jXPo+HIzL7aHw1MXF4Zk6zNo+/xLu60d+6Iz5B
7SayDw324U+UzMngZnCOA6JjFLGqTcFagT3KXoWf/bdkTgI3IQbWiPYp+Bb2
+IiSNTZaG859bNkaeWMenxdH+wB8Qb2CtfirOgar/QccBv2m/gOK9tkHlv39
4JJwErhJ0wprbOZ3dub7bQhef0vz94O38s4PRmv2TcJHpdbyxEhiJRxmcuY1
PTaY87PW4chw5Ub59fHh+HJixtLMmv1r9T8utZbHR+GrWMPzM8eYMcExitiz
KLP2356vBzg53BxOPiszB4GLwIGeEV6rd3wCLqLrP6f+75bsZ/G3aMXXSt53
7D+0LP5jSPB+IzbDoeBSDYRnZuZ4n+X858joGEosJUYtkX23Cus89N7skmMq
sRUfPC/znuyTxxfyG3AauA2c5sBoDfuWxu+dWtuuVJ+esn2fON8xVMe2xDmK
ubJ9i35OzUmWCe8oWAvhkyaqvaZgbYWPmaz2CB01Use0cQWPxx89JrwNPaqj
X+prgmsUHfuIyTPQ9EVrPWLW1II5F9wLDYeWu1ZjymrvpWN+dE6B+Fo1mJ+w
59h7ewfH51G5FtknOFfUULi3rtNOR73MnJv4tkuwP0VPPpr6mVlf8C32UuVg
bvtfjdtH9od0zCuYI7E3C8HxHw5DbKgUHO/JARCvdw+Oh+REiL27BfMRNC97
cddg/01MhrulwbH6uYLvhaZtovaEkvnoXLUXqT2EXExqjYxWRs8s1dgqqbUy
OZQFuf/dmeufV2XPUuc+fhE+JbMmLkTHWzT7JOFfMmvUFbl/3j06Zq7J9UO1
6BhOLIdzw73ZT3A31tAw4SHERLVr6X5zMmvOlXk8qRq9n4lV3+GvhNfo/iei
RYWfz6y3dgZrpqPVHqT73J5ak6PNf5PtNrVnotPVf72u0QffAdeBq0Rzt0a5
nkRz/aMxA1JrsaNyvf+xzrWrcE6CHOPgPH6hR38IzrcdkfPn7eRdhA8rW699
L3y38OFl55zm5/HwdzYKHJ58KbE757BwWd7v9cw5tZ/Up2nqXBv5vK9k+63o
/Ggm7j8odY6hqc49XPReYo2epHEjhM9Q+zeNaRjMF+9IrRHRisPhOcI78vh1
uc6N1v9zEu/v9sJbgjkr3HWxztVW+0fZR0e/W8PU62lJ8Ls3SL1+Xgn+pnxb
cqKDo302vpuc6qP4v2gu001Hreh7/ETsCL73ZdFzxzXRI+SvfhGeJnuHCucE
yQ2SkyU3+0rmfBaaCm3VhvWo9r469z/ZR+p9z1R7J99c5wcJn5Raf5H/ujla
a52v48Po+YX/oq+i2tvU59TU+nt+cMwgdvyQx/ubou9FDu6DaB+KL90tNb9k
TzE3vNMm+Jvwr4mfmWf/SGvykdQ5FPTbU9HPerOOt2VvpXNvBOe45sm2OTOX
3z01v5ypo6R2IbUeYY/zbcgJ03+2jgq1i6n1Cz4SX7krewJfHL2W+abkFybp
+F34ah2vZv4eaENiwsfsv8zPFlLridZ6vreDfeDz+ErN78mp37Fu8PWZO3Ko
z6g9MXptwqHe0rVWsydSf2Pyk99qTL3U95yLH9BxWur8D/nXVer/d+I1g55i
P2NjDpiLx9CRqd+hXp5DXRXMGcm/ML+8G31W589DLpRnXhWdIyNXhg/5Xe1f
dXRNnXMj3zMheu/wzDz7UN3vqtQ5MfR5C91vDlo838+s2a3BOVjWci1yJEXn
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
/g+W83ls
         "]], Polygon3DBox[CompressedData["
1:eJwt12e0FdUVAOAr9z3Xu/JARTRL6YIisBZCAEET6SBdBanSgtJbkI6AiIAF
iZFuaNJBqqAGpYNEFDCKSkQpShFLosYSQlDIt9fcH3u92d/sc2bm3DNnzivT
Y3DrQQVSqdQ6kStGZFKpHg4256RSM+U/5aVSw1h39jKbzn5gI9lD7BU2i/3M
hrAubC2bxr5nt7EH0+pFA3mHwqnUGNZH3evq5qv7hfdk97MX2Vh2mvVirdli
No6dYYNYB7aSTWFfs4GsPVvBJrOv2ADWji1nk9iX7GF2H1vEHmWnWBtWjg1i
d7HVrBNryuawQewT1oO1YvPZCHaSTWQj2P6cZPwKyf8k5rLhrAF7Tv5n8Rc2
gjVkz8sfF8PZW2wty5dPEMPY39gaVlD+B9GSzWPD2QnX7ciasNlsIDsa48ru
YbPYAPYxa8eqsrGsGdvCJrOJ7CO2jRWXjxeD2S62lKXlY0U/tpUtZJe0fZT1
ZW+wBexXNpr1ZlvYPHaRTYrnYx+yrayY/I+iM1vDnmXfqbuDnXE83tyoKmYX
TKV2s0/VnVJ3wLk98nliOXuCtWHz5XPUVtfmIXGBNzevhsd4qdskn6HuR9f4
r3ydmmoxB69QKx+nbpC/O9UtUVdA/oL+aqrpmU5ehJb6Gxxz1/FL6qbib/VX
OuafmuGiXoyxuuPaFlLXU10VdfPkf3eugOu9EdcXZfLNPW1LOO6trpq6JWqa
s2tZZ3Yrm8PuZyVZH1adLWUt2PWsO6sY12CtWSnWl9Vgy9gx185nD7Pfu8f9
8rOiDBvFGqlbru4LdjMbzRqzFay6/oo6bhhzSL7JPZ9WV1zdUFbXuRf5KVaM
PcLqsEXsDCvNRmbneNzLOVaWjWH3sJVsAavt+EbeTr7ONZq57jXyB9Xd4txs
flRdDuuSHZfP1axi7zqu5fxQsVnbYmJRrBuim3Pb+d5MMndOa3ucvykvrm6x
4yW5yTt9QF0JtlS+LMaV7Yj7UZvxu+2N9UmUV7Pcdes4d0h/m9QVUbOC1Y05
HL+XcX5XvkzcLd+tbpm6HHU1xW8cN4v1VH9PxxpkziyMMdFuiljLFmv7O22r
ivpst/yi6KjNq2pbsMPyNtpWU9NIPlms0fZzfpO6ITnJ2MYYfyluY+NZS7ZG
m6Zqr2adWDk2i32lrgJ7jLWK7wA7rm6jvjeIMcbihPx9dePyknuZq+58zA/t
LjoekE7uJ+4rxmBIOhmTGJuf85Nn6y9vKH7LDrP32BjHJ/W3Xx/lXWN/rKmu
l3ulsRNV1O1S1yc7LrGGLcyOy2B9NROr4n0oZP5pP0XblHYH3VclbXeq66ld
ZXGTU3MLJmtMrDWPiRnqmmp7hJ2PNURM0MfZTPKbD1XTVtTU/kJ+8p73ltcS
HdTmaLuEDZQ3FVO1PZf9Pfqmk/cv3sM8df9it7vek/J27uVVfX7LqrCnWHv2
Gvue1WDTWFe2jX0Xax17lnVhW1kT1ynMOrKybCb7Wl1FNoHdy9bH99d974i1
Lt5N9iH7Rl0l+ePq7mMb2GesKBvAarIX2AlWhPXLri+xNp1k17H+7I4Y03gX
M8k3Ir4VH8X3Qf5IJvlGxLfig3iX4tshnov7Ym+xDfJ/6q+y4ymsrXOv6O+s
GO/4Tb5PVPQM/1Z3p+Pn1fV0bq+aH9hdbDrrFfV5ydjEGFXjV5kLVbVdmZ+s
1bFuxPpRynXrZJJ1Pta6WPOecm5mJlkfY51cEN9S+fRMsp7Fujafzcgk73W8
37VjXRZr9d+AXel8q5xkrk3jddkVrDG7nj2dl+wlYv3ZHHsncUt+sq+J/c1u
+R5RIT/ZX8Q+45L8srid1ddfOjdZS2JNmaqmHivAmrAb2DNsYSb5Tk5iq2O/
I68kupqPo+M9jD2OOfm/WE/id8hJfpeX1ZxnDbP7nNhvHI7vmGv3Z29n9zmx
F/hFXSf2WnY9+IZdYt3YdrYo5q7+fmVd2bbsPmIr+4Tlsq6sfOzN4rlcYwB7
h61nl/X3qRgc7wX/q7hVTY4Y6PiAug3OpbTdJ0p796amk2eMZ/2PazTI7puG
KXs/1qJYx7P7utg3vRP7A9aILcju6z6I/ZWxOcae0VdnUSGTRByPEiVca1f8
tu6lV3xftF2l7QVtu/JmsScUhdRtlL+dl+zJ7o71UlTOT+ZvzONaMf6iLLtW
THD8WXZNvFHb1fnJvvne+M3SyTrZXjSO/Vq8h+qOOJenbqj8sLZbYlgyyTPH
s9fnG0U5NatiHvFWeck+JvYzRdlk589qe0h9SXYdm8TOsIOsBPsxvlHxDrDe
bJ8+forveXYvGs8Yz1pE2ydyk+/vgewes594IH5fMZF9oa4/axu/Zezt2DnW
nbWIOZSb3PtxVjLeYfmq3GQ+HIxvseMixvfJdPIdje9pvrox/Kjjnequ0Vc3
0TzmX+xh2DFt38tLjuux9eJm7TJipOMj2X1x7OXvzCR7yzbqa6ST78ee+D/C
+Zpq14rS2pUSL8V3Wlxy7pCa2tpe1vaBvGRfGfvLgupGq/mY71B3tZqr2Cj2
D7adFWb/B5gtwsA=
         "]], Polygon3DBox[CompressedData["
1:eJwVzj9LglEYh+GH/qhRhFNEW0PQoCkRUUFCZEuRgkYNDkHQauAYRBQNNhaY
EOESlGvQ0N4ncKwhP0a2dTnccLjO7z288ydnlfpIREwrocxExPFoxLl2UhE/
4xHZqYjWZESeXeiO3WuO79vPOOdsN9xt6sk26a7Be2MRVVZRyvZB187bw7fc
dWza7Nk3dbanFW/1+AcvKum8xFbdrevRdo0PfN9ydzX8Rm3+wt/Ysn2R3eiV
HWiB53mBbalj/6cy73prlzX1bpv2/5e8z4/YoWZ58FP+ycuspF9vZvgX/9Yt
q2nR/h8tlCcH
         "]]}]}, {}, 
     {GrayLevel[0.82], EdgeForm[None], 
      GraphicsGroup3DBox[{Polygon3DBox[CompressedData["
1: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
h8Mz79Nl6LRE5yHwF/Jjspfg+xlzeOq9eS/49NQ24R7wP2XbwwH6jcz794qT
GG9i6n3xJPIFFcc89zP+mNT760Hko1Pv8WXg89H5L+Ocp/dFvj/yJchb8T4P
g78q9soXiW29bL7W4865fYTW7E65/YL2yo7gX7j/AeUHZfvGL5P/jxXUy09M
KNuPvKhvC74F/Uaa8xr7aMWcn/P/YuRN6L/QWOCmivfK3qfPF/vy88S+qm6N
195dyO+g/zpxnNqoxvlBUuPc5d3E+cu5/OZ14HH0s3n/B7QfeP/LwfdrP+SO
BT5K7MvlNx7kvu5aD6njasXzv/L/MuVuiidT5zGKe3/m/6XKBfS9UsdTivm/
5P/bwM3LzgPeSnxPdY3jkP/F4fQfJvb3H6I3n+sblR1DKJaQP36X/+ciz+nP
4/8RGgt8Lng4+E1wznr/OfG3fI//r0S/Pv1HtKuVu9A3RqcR7enE+/IZ2nVV
jlVfTZyX7hic63RVbI9sLe052jTmaj7P25a5Gq/4i3Y9emchOxG8vLBL94KP
RvdgxS6KW+jf59o8dBvSX8y167mnT7GWtS9eKDsOfSPx3I0v2449o/XH+3wr
v8B9v8p20s6U36U9IpusOZXtpD1G+4B7r0K/Mf0v3L9Auaa+Ee1a8Pn0P9Hm
gCfT/5h6vB+KOP31xHncDJ63AFlv3nMW+B7ZRPAJmfOzafR7I9sU/VmKE8Bd
wBcr7gVvBr4cfAh4G/B88KGaP/DV4L7g1uDzwDdV7O/k9+ZXivhNv7tsW9qO
/jva3eAO9Fvx7B9ko9DpXOOcrSN9r8z5+77I92X8zRl/NvrbZN4H+8mXau/q
2yE/JnVMcoPGT+xrFLv3Q96GfrLsMOPelzhPHEBrD54iu13jb628chdaW/D5
ikXBW8l+gCcE/966PH8/5FuAr0B+Yuo45zbwCaljp1vBQ1PHLYvBB4O3ln9R
bJw6plpUNjeh33inxsu8n8SRfFO2vW1Fv31m26I8YIfMtkL+ar2emZhD6cP9
DejHot8bXB98Nvgn2hLG6Uy/LfJ6yM8Cryvb72xWNjehWP3q1Dl664KjOFBz
QX8zOr/THkZ/U80/8hz5GPB24Ibaf9rjvNNj6LxGf0/i/Es51d2JbXGzYt9p
X4o3uq+wF1qXXXhmZ1ob2tdlxyQt6TfNvIfEEyxJbde037SGZWOUWzyXmrOS
7bsrsW2VXX0vdT4mWy17eVPi2Ojd1LmV7PALqfkK2dAzg9e8cqJ3yt5TFcUS
+h7gi3jmOvTWgudpjqu9V0fR1tD+1HqoMm8lzkh8UaXaOfkJssPF3ta+Pihz
ji57ojhkabGuPkmdM17Ec9vz/0r5ep4/PbVta4u8Dd+rzLgb009DvhB5G+Sz
s8IOot8k9b37ylantm3twT8kfp8HClsom7iIa6Hgo2THx2bulV8mxfvrvj+4
/3F0e9GfndkO1KGvqvb8am4nZ+ZwlNs24f3+SczbzE2MlfcOy+zX5L/0THFh
4nceLGJXxbDjuZaBTw7m3jSf+v+szPuousgpzpE9R2cGuC3jTM/Mk33Jex4q
u5v62x1eNsejb6dveEzmtSfesktqP3kGOptn5u76KQaWbQUfg3wW+COtQ3Dz
Gtvqb5B1zMxxdaDvntm2y8bP5toK7WX0e2bmJ/sib1P435M1jvKcKr9/69R2
+iTknVOv7ZGKB7WPE9t6rbEnaKMTx2eK0xYpd8j8rC2RNUrt7wZz7+BgO/B1
8NrU/WNoT2oeaddojyl/455zo2PsJcU3bZ359/YK1pmYmD/8LTV/eKli7dR7
+UTFF8h+pIlYHpPZZibau2XbhC3KjtUUsz0dvPYmJP5+WgNafyuK/aF9Jf8n
+5ZV28Zpvdettv+rKbhE2agpqWNUxapaI+KOtU4UK0vn7yr7oKfQ65dbVlPI
9Q5ptd9D8Ua9IuZoWuM5l5+VTNdGJo6PFSdfX3Hc0bDaz948ON5ulTk+lt1+
Ur6J/z+u8tpYX3Y+uDn9FsH5wtSK+doXE68P8bjLE6+hDYXtWFa8Wyze4RP5
V67XK9u+flXY2E/5/2bkDcrW1T2KneTrvkmc+ymHkf+VfdiY682rHXs1rHHc
8Z18eI3noD59dWHffivWTp1qrz/JdG1UIVtT2L0xhd7oYl7XFrZFv0V2RDZQ
ucJPieO8BjX+TdpH84p1IDvwXGGbtDYmZuZDnuKdp2T+budnzouUHy1MzL0L
Sy5+XvmS4hntW+3fTWq8R8XbK9bRt2tRxI3Nqj0Xmgf5vVbFulLuoRzk0Mxz
Ih3lFA2LmFM294aKuepdctu2JtW2b3/UOrZ5Nvg5jYp1or5xce+SYN7yOsaY
XPFv1G/9PvEelA94Kjr+ewzdxam5bnHeW/K8r1Ovw63A36a2A9dG58PHVfxu
Kwpbe2PqeRWP3rXwofKlXQr/Kz98dXRufIxyiGhecqz4pdxxnridGdF1GnEj
t0dzxCOUh0VzzWeCX4n23y/zzguic/Xjkb8aHdO8grwXY36Z+rffEc3tjtQc
RHPTZ4gLiuaXh4vvyh0/iY96PTp2fINxXouOKV8Hb1n4cfnz21Lz/6oDXIZO
z9R846RgzuRY7btgfkBzNRudzVNzieIaFKt/Tz85mKPQ+8+L5hSOECdJ3xf5
jTx7Jjp9wCcinxbMYwwFp7ljxCHgq6L5jiPBb0THZG+iezl4s9R85izwpqm5
0JngHqn5z535zdcx5mBwryLOUbyzKeMPSm1jL46uyYnTUyyrmPZZrRfk3VNz
p+KhZH9e5bkXBMfMKbKeRdwlu6z6iPaTOM+XonPXl4Kvdyl07o6uQ4xG57Ho
OOkhdB6PzuseBj8LXgF+Arx9EWsp5hJvrNhMvNT06BqhuLWbousQwyrmi5QD
H6q8NrpeMl68WXT94GTwRdG1RnGAN0TXEk6qOFdR/Pa24rpom/iC+MzMNmAg
c7Y6mrP+GPlf0XnLP8HcuHL+D+lPieaAxE+G3DmPOEzFGB2r7b/EwyumFSf3
dHSu+zjyJ6Lz1UfEE0fnio+K5w7OtV+kXxRd89CauT46zj5BPFN03WgU+INo
3/kB+u9Fx+vviReM5hc0zvvRfuV98IroOtAK+ZboWO1DcdLR+fxb4p6jOY63
xUlH5//vgD+Krid9pPyiiJkVO98aza2czvusjK5LrUTnwei61wTky6LrW+eA
b46u2ZwiTiW6HjYR/G50/vAu9z4cXfeahPy6aD5R+2VxNH90Gnh5NLeyHP3n
o33e8+BHoutk51ZcoxXn/47+51q3xLbrymhu9HDNZ3D9S+8gG/lo4ePuDq7N
6R0UZyrOOKfgG7W/htNPSh3LvFE2Fyqf1ks1hNxc1XnKoYPrcXof5Smysccp
Ps0dL7aRLwquf2lut8kdF7ZDvji4djZO8xbMm50NviWYy5LtvUl5r2K1imNy
xdjifpQDil89VfFUcC1P32K73LXwzTLnkvIXx2fOo2UPh2TOJcXZnkLfKDdP
J45dHLLs5wj1wRyvvrt4SeWJstsLg2t2ss91gvNB2fk0OC+QHV5AG5TYL9QL
rmNqvTUKrn9pDWwUXEvV2m4SXMvTGm4cXEvSOq8fXAfU+lS+r1xqKP21wbVC
+Yvrg2uX2i+nZc4T9B3nBeet8h1zg2211lUMrpnK9l4XXIuUz8pzcwengo9N
Pef38d0XBdcfZev65q4jigtSXUK1zqfEUwXXXrW/7gyuUWov3Bddm9Q3XRJd
f9W3bsk4M1PHfq2Da3MrivxOPNQM+eKK64+qM2/CtVXofEJ/aTB3LVvXJrjG
qv0Yc3MKqoNcW3HsrRi8SW7+tAl4VHCNUv6rcW4uVXWWjsG5g+zhxshXlR1r
JcGcoez/nGhuXfW1C4P5edmrDsE5wqpgPyWfsyG69iob/Ce4kpujUT3omor5
GJ13GB1cF9A+bYbOyrJj5nuja95a89dEc/fy1/Vy8ymq7zTIzbmoznJHcJ1a
PqJncP36U/nW4BqBbFG73DGQzhJ0Bj+SumbaFrwoNRfXPneMpXMInXL7WtVD
O4K3SB0PdMgdW+jsyia5Yw7Vauvn5n1UA5oVXI+QL7ssuO4gnzUmuDahGKCU
m3s6CtwwNz+uetDA1PHDHOaie25brDMGnYJz+dX0XZA/lroWvGlwnvsZfRvk
C1NzFN1y+13VpruCn0hd1zg1uk6jWltT+bAq+wjl3crZdf5CNS7VDXvQ3xK9
H7QvOhR8nWp4mj/ZENV/xN8qplcdQGtHeZPyJ+XFc3Q9ug6h/Eh5puopWuPN
c9dOVEORnmquqr1emZr7EwfYqcb1WfFbOiskrkP8huowin+VgysXn6ncm34y
z2pddlwvbuSYYM75O9mVaP5a9btHo+27bHiNfHaV40nFpMqZVEPQWSLlZDrT
Ih5G51tkt6dUnPu24P2PLDtX03mbH4qY7SvGOSqYE/uW/vsiBvsSvKbWdQHF
A4qn2hYxleJ/1VgGMOavtc7jFEctjI41FUOKI1UNQOd5VDNqxzv213cO5jS+
KOKcTuJS5IOCOdXPg3Nk5c/ijX6pdf6omK1Rwc+IpxHvoXMv8h2b0C5IfNZo
ZHA8uS64pqXalua6XepzNR3ACyvOZZTTiN8Q76xzIlqP4sF1hkh1CuVGOvsg
nl98wefy98G88W/0w6LPosnPtk19XkprQHzIlMR8/fSK+RxxcnpPrZdp3Hd7
cO1Stm54MH+7NphXUT1AZ1jEjYjH+FW+PZgTXhPMEYnTELch26w8XOeq9Bt1
DuGUsmsr4oh0PmJcMBddUr5ZMd+iOoNsieoiOid1djCXrthSNlk1z81y8/Di
eXSeTr9F52ha564jiBfSuacRwWchfg+2PbMT8/Vzo8+rKRe4IvrcieJknXOQ
zun086PtiGzL2GDe/l/6HsxjD+azZ43fWWd5WuWuU6sOuavqIMGcdhXjHJ15
znUmSmeAZGM/457L+b8b41yWOf8QvyBO/acif/kmWKc7OrMy7+PuxRmsrtW+
Vzm5anz6/pvnPkvXsli3dXLXIZSbyA+qdt0DWd3cdQidQ6jOXZ8og9dG89r6
jmdE10R15mFUdO1TZye+isXZpuAat/hX1RxVp9D6HcR4H0ef0ZEv61LjvEhz
JR5Wubhq8AcH897/28vRPLjW7YXRZxxV36/JXTPQWQXVKFUr3g1ZOXcNQ+cl
/o6uSei7jIiu3er8xvDo+q7OdbQtci7x4aq1iGtVrXp9NOeu/SguomPBLZwe
XT/WGZUzo2u9OqPSNHUt5lhx+NG1Ae0L7VnVbLfgvf6NPn+j7y7fothSNXzZ
VX0znTP8J7ouojWvMyp6L9mgLkUtWzXtddF1CK1bybTexDep5iHOVvV72U9x
X+LALog+Y6czGF9Gc9ayV+Oi6+s6V3NOdO1c52p+r3X9UXnWP7Wuaygv0Bkt
cSY57zA+ugavszfnR59x1HkPcaTi2hSTDy3iSZ39+6XI/eUjTiz2kc4sHRFc
T9F6LgXXhZWP/Fzk7LLtPxbcgvhVnRlTvUlnHI4o20bpTOZvta4RKx+cSOud
FOu21nVhcTvi/MX/19P5x1rXXpW3jo0+W6BzIKoXaP8tRTYx+kzGwMJOqr42
rOz4SmdDevJN+wfvM+3Bs6PPBOhsyaHBNSD5qc+jz4cpfpgafX5LZ2A+iz63
pzjqk+jzdoo9Po0+B6lYdEL0+QadZRodfZ5A55cUx4lbVl1ySvQ5UZ0v0vkS
1XTECYyJPgegs0//Bze8tdE=
         "]], Polygon3DBox[CompressedData["
1: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
0DTVNtUoza29l0ctlXqMerx7xXq+0vWS3vn5ZM/NNbyfx1xqo80HVItYK64R
14r21vyea8i1pDbn3GrD1ctbJ//g+jTeUiNVK1WTtZagSU7ns7LIJ5ozmpHi
A+MZNR25mXPq3PYpQit59f/ZV+fauge1Hg/PnaNzyqh3MVb+Ns2Z/snYfPMs
tB1rTMx9mgM1nlaTkduM4rif5z9bi1jvZI6ORVzjtdaonWFtVC3qATplkX8r
ishv3ZxFvvPMMvr6DJ9lflv+pZ6nrqeGpFa6dx7aUr2I2MUYxnxaWUT+7JYs
8q9Lg3esxpp17boG/S6/z1qhlkWs5YeyyK8tWcR6uyeLfJ4akVqROXv1PDV2
tXZzlrvXIn/u3nKP7ek9ioiVnRPnRv2tWxb6yemObxn5c32kvtKcirkV9Q5r
hazRGZzib2ulrLmx9saaGGuTzJmaOzVHuXMtamwGpXhU/cacn7Ur1qyYCzSH
aS5TfXXHtD7U/hYn/m7OxdyLORVrLazhsNbInIy1HRcUwY3nJ/4/L+kZ1tRZ
m2AO3Vola47MrVtTY22NNTTWglkzY+2M+o+1Zmqudyc+tSb3HlqEbdRGrltE
zsTciTmNPWuR4zDX4fhqy15PetLTSb9apojYY16KD8wRjEvxv7UOIzi+rsae
3bQIfd/csDZ2cBE5DnMd5hisnViU9AP1EPVoc1zmusyBWVtkjtVc69z0/da0
WIulfmatizUBW6T1rn5yeRn1YnIkuZI1T1um/WMt1A+1qM+Uk8nNrixD/5Fj
ybUmllGvJgeUC15YRr2FHEGu8GHSy95K+tr5Zaxt94pa+AVlaJn/5frg+/Lw
nXI86+VeSfrfI8lfP5BHbZ2cpnfi09c2RMzarjFqHKx1sAbL2kNrvqz9sqbL
WkFrJqw9m5n0QnNCO6Xxshbxx1rYUjmyXNkaGmtprGmxtmt7js+qwdfWK6Lm
y/Gek/RA7ZlcUU67WS1ytOYP5CRyE2vGrF2zxs1aMvUibfP3eWjj1hhYa2AN
wq61sEGdEl9Rj9qljHt5T3MT2gBtgTbGXL85GnMz2+SRu3mqFtpu5yzyd3Io
tdnV8+BWR6Z4dd08uJU2W9utjbI2ZFQZuRI1KbWprcvYW+4xtcMDitAa/moI
vdKci7Gba0C9T44t1zb/pF6oRq2tnJ7i35OK4OpFNfjr9WX4Fn2MscjUMriD
nEhuZExgbKCPXLsIG6ot1UZb2yLHl+u7RgcVEZMYm7jG1YvlrHJXbZx6pTGQ
sVCbtL+10dpq9STzOb6v2rqah/makWVwQXMu5l62KkNLPSCLeuEjwMOroWmp
bT2X9Oz7k36wexnjr6aptrl9GVqnmqja6OZlaPP7ZlHfbI7ZXLN6uLVn1uA4
F86J+SBzzOaazUlbu7ZtGXqRupFa7HZlaLFqqmqrh5aRCzNHZa7KnKq5VXOa
1ubo4/R16o/W+pjDNL9lPsv81ZZl1AurIaslH1wGXzMnZm7sIPDa1chRmasa
Uca13sNc2RZl1OPvl0U99yFl5NLM0ZmrM6dqbtV8mrUxO5ShFatJq03vWIY2
rSatNr1TGdq0GrJa8m7gZaqRgzAXof+Xa8pJV03+0tyXHFQuulkRtefG4PLz
To1Ra3JENfQQfa6+V59prUtTY9RuyznVR8yXfpYHZzI+Ncdurt2ctrUk5rTN
bZv/s/bk8DJydeYgzUVuoI+shma3ehE5dPOF5iPVh10DrgXHzNp39UVzrfps
fbc5cnPl1nCZX1GDU4sz5lSPsAbAWgBrAKyFadsYsaUxj/ql+d8v8qgJM55X
P+ucNKSeRcQM8tPhefBDc3jm8vzNNnPFxuZybPUdc8lqA3J09aIjE59VszDe
cb8bq+rfjM/VR+UeakLGl+qx2sZLk96zMI/aZvmf9a9qeWoRckTrk40xjTWX
S3rH73nUJupTrM8eUovaPzUl+dRvecTu5uOsf9UmahvlfOrv15URuxizGLuY
n9EXXpz0Nb/fWGrjPPTCWhF7xT3p3rSG3Fpy30n9VJtwQOIj/m+B+e438hgf
4yX3gHvBPeX/Opij11aqEa5SRH26Wqw+btks8uHWEhgzbiJ/bQxtYEpD1Lur
Mag16JON//8P2Li1Ow==
         "]], Polygon3DBox[CompressedData["
1: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
WLPifwFqZSU1
         "]], 
        Polygon3DBox[{{3162, 1851, 1670, 1669, 1989, 2880}, {2853, 1942, 1624,
          1625, 1943, 2854}, {2796, 1841, 1969, 3217, 2657, 2658}}]}]}, 
     {GrayLevel[0.82], EdgeForm[None], 
      GraphicsGroup3DBox[{Polygon3DBox[CompressedData["
1:eJwtlmtMlmUYx++X53nxfYAXzQI0MAXTWSGk1UwQzRrIkmlAhkqHRX1hy7TW
Wq1zFtBJXR/0S6e12UFbfajI1LQgYVmh5gFKRcVVYK2Dp5kY9Pt33dt77/9/
rvu6D9d9nd78huU196c4535gBIxLIufawZXg6rhzR+GnQueWxJyrYRznexXy
I+BJ5KcZF8FnhzY/kdHH9zbW96C3OOnc7gznJsMXIXsA/Iz53egXhcaLwZeR
H4b/BZ/C6IFfAV7O+BE+CRzLOAi/FNzOXl/DvwBbWLsPPhDaubkxky8GCxj5
jO/SnYsz/wjyI+jvQb+f72Z4G/wg/BV4L/xv3YvHmMy6TeBa5JnIb0VewFgg
O8ETzF2M/DewCZ2v4D8h/5cxAX4beIixw9lb3MBbvABm8R5z4S/Cs+Et3GkU
Ok8lnLsR+UvIc5B3RuaXaWBBZHdukt2cdxV8B7gC3Vb4Lt2ZNWfBa9DZz9wM
7nkADJCtRScM7e30hrngZvTPgyXof4PeUuQ7wa3ILyCfhXwIzEdeB27gfvOd
+bEVnTPIpsPTuUMx8nv4PsX6EfDTgflMvpsMZust4Dngn8ylytfgFvYZRFbK
Pjlxs+tu+YLvy+Bl4CH0quCHwUH0H4tbfLqkvXU3vo0l7a498KEM84feajjD
fNwMP8f917FsGJ1CdDvhU8FW72v5XLE6H72N/v0VOx1gfdLiRvwf9CqQnwdT
kmb/QfZsSpgfdZ/KpOXGfnhWZD7KZM8S5E/EjW9jfRry7eAEdO9TrIKvss94
Z3tOT5qP4+ivQT4V+Tz22+f9Kz/PROdxdJLoPBk3u3pDi68Dik/4IsY4+Lq4
vTeq7hawlj0GlAvOYoEj3cLQ/M+2ria0vRXDimXdvUO+CC1Ou+G/w2cwHoVf
D37PnRrhXWAfOqova+IW+/vhJ5TXke2pXEiFvwtP9bmg+qF3K8Felrhy1RjG
Lvho8KSPMcVaHffPi1nO50RWT0ayzwj4O87eLRv+qbP3SYaWp5mqOZG9x80Y
+nzC6pjip5Dve+MWJ78EFv+/ghN9PiqWOplrZE0NhaGNfSP0KyLLN/mlG0xw
xsfoR8oDvutVH8DNDIXvlsBq1J2MY8580eD9IV7PGOnMxjsYe2UPCz9RrQCf
S5hPlacZ3i7Z1+Xffxe4Ep08Z/m1m+/Z7LMHbOX+tzNXjq2DPp4vgMtidifd
Z5R/c719sdbDx6rGsG69s1paFJnOmAyrHaoh3yqfIotD1bFqv2e+7yF3+T4h
uxq9/2SrbJ7ibdVcVcx8Ucd5H7LPqoTVh/LI3qnWv49q5lLmPsqwvXUGv//f
VedW+zquHP88sB5W4/vUatYVOvOdelAWttYje50xS7kQ2Z10Vr/3mXy3FSxD
9yHk7wVmR5330XjkD8M3In+NfUqRLWDRXr4fRL4ePKfaDX87sLss8Xeu8vvk
+rsv8z2sHdvS4pb7kyLLQfWOEs6aw3xpaP1SffPK0OJRfq+Fz0taL5fvFPP9
vq4e8/39KPizj3PF+zMJ62vqI+oRlXxv8HVX8dzFnm8gK4K/mW45r9yfGVpN
VCwpptTzZfty9SRGC/xaMMaoRCcFvDq03J8GViTtv4ViaUzc/NIQWv7o3LTQ
8lL6baoznL2Ce1STgx2BndUJfoCsDP4W88cC6019qpPIWeZuCq22/IFsHtiB
Xm9g+uqf+h80F3yf7wrmN/lepzo2JzQbZMt14Bn1OWw5C+bxvRA+DtzpbVD8
JMBc9KuRD6HXrB4U2J10t+OB+Va5rDr9NGeOdtZb2wJb2w72+BqiWjLg/3vo
P8iw31PGbfc95Uvw2YStVX//D7dkNwU=
         "]], Polygon3DBox[CompressedData["
1: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
rRftePAfSX8lccAJ/UXy5ob/ALnPYWA=
         "]], Polygon3DBox[CompressedData["
1:eJwt00lsjlEUxvEb+lWLlqAtMY8bRQwbWgQxJAStlERslLVhJzErNZWKBRvT
BkkJC0NEQqJobaiIaqMTO9GaacT8u94untzz/O855w7vfUeWbize0C2EMI1S
tCXTmBZCGp3gOzNCmIH94JdRb2wPtgwbqKAUm4CdxpZiedhaLB871VU7WFzd
PYRF/G0NSrDF2CNsMfYUW4j1VFuidpi5Y3g5Vo69xKqxUbG/3FpxPrZaztys
EHbiPfh0Oh/Pwdf3CuErP4v6YgewQvrFF1M2tlf9Lf0WGNvtpT+2WzxVXqec
OfEeuliOvIP28hZ4jo3p2sthrAN7gY3D9kdhTdh9bDSfK+8Q1o7VY2MzkzsY
h23ECrEqaxRgP/nl5FihDPvrHCfFU7BVfL6JO/IeYM1Yox53+QWUKV6BDTVX
KbfKuvecS4v/3y/e/by05Du/wztourz58e6wD/x7mhGZddYY+5mrMzdR/0/i
FvEAY386otFHYzOWa8yhilSy5/XGav6Cue/69LH2DqwVq8Hy9Cv2Edbxk/jX
1q1Vly1vu7wW/CGeE98jtgmrw25gPbAsbFsquYN4F7lYkX5P+Gt8hvGxfmfp
ld5tNBM/Yy+X4hviC0LyDeL7G0SV4i/q2vBJ+pXR1lTS83o8Nz+fMrAibAh2
VL+Bao9in7HWrrtqsO5vfiUNx8rlTcG/8bPJ8mEXNjMzee/x3Z/Uo4KvoTbx
G+yZuVr+nH6tilpoCXZZ7VXrjpfTEJJ3GP+FK9hk7GJIvkF8L01qe6WSu56I
H1fbiP2Jb4pGYPuwdLWb431gN7F06/4DkOmCOQ==
         "]]}]}, {}, {}, {}}, {
     {GrayLevel[0], Line3DBox[CompressedData["
1:eJwl0Mkug1EYxvG3aoyNOxDBrrG1EhGhkVhZEUHSXdsEd2DnAlyAhR3pZZh2
3aDGojVPNTaW/Ynk+5//87wn5yTn68ksTS0mImIaC8JfnrFUeaU9ootXuZvX
eIDXeYgLPMn7HREpZ2blojwoHyQjDnGEErY7I475BKc4w47ZOV+gjF39kq+Q
dfeefi1XUEVBv+GcvVu+wz22zB84b/7IT3jGuL5p70V+RVp/4xreMad/8Ce+
8I15sx+u4xcbWPaefkw0R7R5Y5+cllvlMW7hUfbFiMWRGOYmrtjsTfz/2wbT
5Dds
       "]], Line3DBox[CompressedData["
1:eJwl08dOVVEUBuBtcECiz2DCC4gdC/auiHIVrFjoIoIKolLsXbAroGCJRKPB
gmh0Yo+JTizoyBdx6rfi4Mu/1to7N/ucs29OWUOmfkRK6TMTslLKln/lPe7S
SYPhITmeg3RQb9Yux1HGTv1YuY3no1Oq0+eqK8ljjb5Cfh2V0lRZzQyKzavk
F/N8uZ3ZPPYbJdZq1HN4Zr1Wzucor/QX5TGexjpvzAblZfpYRK3nyR+Z0kP1
A67y276TcjGnuM4vs9NyWTwvw/oC2e4MP9WF6pW8dK42s4x6NS/0rfoS9Vpa
1D/s3xD71fvkRs6wSt8t97OJsxSZ9cjb3KGUP848xpkH1I+4QbN9B+RmznGT
vWYtcgutNOm3yjaGnKtRvz72sY5CfbP87nzFsjG+CyvMm+Q38yK5O87KgN8o
sLYn9sR7tr5LLo/vz2t9V7yTeA8sjXvAW/OhuAdc4xZL4rk917C8Tz9X+GTv
CbmQOi7x0ey4XMAOPujnyRpnea+eq57FoPNVm81UT487oK/ST1NPibunfmf/
5PhW6nI5iSNk9BfkYSbGfYu7a/ZEnqc36///4R87o2PH
       "]], 
      Line3DBox[CompressedData["
1:eJwl0LsuRGEYheElTOLsDiQaNFqVqDERTKai2zQaEvchcQNKzUwUGsw4H8f5
EHEFNO7CI4o371pf9v739++hYr2y1pZkASNCF3+VkmF5vz05wCEaKDqTJh/h
GCdYNjvlM5xjRb/gWm8yJV/KV5iW6z3JtXyDGX1Xv5VbqHu+bHYn75nf8wMe
/76tP/EzXvCKptkbv+MDO9iw8yQ+nbPqHuNyS16UG1zmGk/wNo/xFg/ypov/
cOGdAV7iUVQ7kn69wn08z1bNHFshs9zN36X///cLSsIuYw==
       "]], 
      Line3DBox[CompressedData["
1:eJwl0Dsvg2EYxvG7QRBmk0Gr1KFObdUpjdHSGro4JF1sEmGR0G/gG/gGYiIR
JhKLb1BVRqPTRmL0awz//K/rfu4875snuXNQ3U9ERBWtnog6rxm8yifyJ5/y
L59xd2/EDQ/wA9/zoP1dNPQal/HWGfGov3OTP/ipfR+3+Iuf+bsromL/Rf6R
1+U9DDlPIoVhHPl+mkcwigyOzcZ4HBOo65N82R+xLWflKWzJ130R0/IMNvUr
fVaew4X9DbNcO5vnuYB53OlFXsAilnBrtswrKOG8I+LQP68m/t/wD36pKY8=

       "]], Line3DBox[CompressedData["
1:eJwl0Mkug1EYxvG32k/7qaGomUi5AjchdrTbCmJvXLgCiTtwB1aWhhuwM2ws
bIyNvTGRmP0Si3/+z/Oes3jPqSyu1JYzEVHHlLDF92nEpjyJ92zEBz7xhW8c
FyN++BeRi8igCSfmWc4hwanezHmsFiLO9IKcogV7epHXnLVyG9pxYN7B6+Yl
7kQXZvVDZ91yGXW9h3vRhwW9nwcwiCHMmw3zCEaxa+cN75rGg37pCTPyo3wl
P/E1P/MNv/Atv/IdN5KIMfeX0NDnuIoJf3auj/MRl3mfE97hN3ts80X6/89/
Eposbg==
       "]]}, 
     {GrayLevel[0], Line3DBox[CompressedData["
1:eJwl0jlMVFEUBuDDDJFlJjoSw5qIWhi1N4HawukIxkBnQQIKKIiCHcTG0tAA
bgy4dFBBpZXsiaKymBgrobRh0xJI/F4sTr7/5N137r0v73xb742eoogoqOJ0
xIjmMBXxSO2XRbzTH3GW5eUR86zhOi9xi7cyEavW78od8k/5WH4iV5m5rb9p
bZa/VbdcxwFe4WM2cph5TrCVLd5/z6wZHUxxh59ORNzmZ97hKjv5hV38ym5+
412u8R7XuaF6krOqTbmXe+q7fJ+19siVurt8Su7jaf0BH6gK+Q8fJjNKIj4y
Z10/0/zLD87fzmm2cJzX+ZQNHOJlNrnfTLKnystTzJjR6Xkm2VcusFl/5Hv+
kK/JO/JV/uJFrrGKcyzlDGvNG7S+xIy3+mN5RV1wzzf6Zfmc/FpekuvlSfmM
9Yv6s/oJ/YE7LugL8r48n9wn+Qc8r1av5Eq+TN7lC1bwOXN8xpMcY5aj3DNn
LvX/f/sHQrZSvg==
       "]]}, {
      Line3DBox[{106, 355, 1172, 107, 1173, 108, 1174, 109, 1175, 110, 1516, 
       312, 111, 1517, 313, 112, 1518, 314, 357, 113, 348, 315, 1176, 114, 
       316, 1177, 115, 317, 1178, 116, 1179, 117, 1180, 118, 1181, 119, 1526, 
       359, 120}], 
      Line3DBox[{2991, 3310, 2293, 2423, 3309, 2292, 2422, 3308, 2291, 2421, 
       3307, 2290, 2420, 3306, 2289, 3415, 3070, 2492, 2521, 3414, 3069, 2491,
        2520, 2419, 2490, 3428, 2519, 2418, 2489, 3413, 2288, 2417, 3305, 
       2287, 2416, 3304, 2286, 2415, 3303, 2285, 3371, 3068, 2283, 3370, 3067,
        3026}], 
      Line3DBox[{2992, 3343, 2219, 3048, 3344, 2221, 3049, 3345, 2222, 3050, 
       3346, 2223, 3051, 3347, 2224, 3403, 2446, 2447, 2225, 3404, 2448, 2449,
        2226, 2450, 2451, 3420, 2227, 2452, 2453, 3405, 2228, 3052, 3348, 
       2229, 3053, 3349, 2230, 3054, 3350, 2231, 3281, 2390, 2232, 3282, 2977,
        3009}], 
      Line3DBox[{2999, 2454, 2455, 3406, 2234, 2538, 3351, 3121, 2235, 3055, 
       3352, 2236, 3056, 3353, 2237, 3099, 3354, 2456, 2238, 3101, 3355, 2458,
        2239, 3407, 2459, 2460, 2240, 2462, 2463, 3424, 2241, 2465, 3356, 
       3104, 2242, 2468, 3357, 3107, 2243, 3057, 3358, 2244, 3058, 3359, 2245,
        3059, 3360, 2246, 3408, 2470, 2471, 3010}], 
      Line3DBox[{3000, 2979, 2488, 3412, 2282, 2414, 3302, 2281, 2413, 3301, 
       2280, 2412, 3300, 2279, 2411, 3299, 2483, 2278, 2410, 3298, 2482, 2487,
        3409, 3066, 2481, 2486, 2409, 2479, 3411, 2485, 2408, 3297, 3114, 
       2277, 2407, 3296, 3113, 2276, 2406, 3295, 2275, 2405, 3294, 2274, 2404,
        3293, 2272, 3410, 3065, 2484, 3027}], 
      Line3DBox[{3005, 2525, 2526, 2524, 2534, 3431, 3120, 2248, 2540, 2541, 
       2539, 3361, 3118, 2249, 3060, 3362, 2250, 3061, 3363, 2251, 3100, 3421,
        2505, 2457, 2252, 3102, 3422, 2506, 2461, 2253, 3103, 3423, 2507, 
       2464, 2254, 2466, 2508, 3364, 3105, 2255, 2467, 2509, 3365, 3106, 2256,
        2469, 2510, 3366, 3108, 2257, 3062, 3367, 2258, 3063, 3368, 2259, 
       3064, 3369, 2260, 3112, 3667, 2475, 3011}], 
      Line3DBox[{3006, 2978, 2535, 2528, 2527, 3292, 3115, 2532, 2403, 3291, 
       3119, 2271, 2402, 3290, 2270, 2401, 3289, 2269, 2400, 3427, 2517, 2474,
        2268, 2399, 3426, 2516, 2473, 2480, 2398, 3425, 2515, 2472, 2478, 
       2397, 2514, 3288, 3111, 2477, 2396, 2513, 3287, 3110, 2267, 2395, 2512,
        3286, 3109, 2266, 2394, 3285, 2265, 2393, 3284, 2264, 2392, 3283, 
       2262, 2391, 3664, 2476, 3028}], 
      Line3DBox[{3007, 2968, 2361, 3659, 2967, 2360, 3433, 2542, 2443, 2523, 
       3430, 3030, 2533, 2530, 2442, 2522, 2359, 2441, 3401, 2966, 2358, 3257,
        3098, 2965, 2357, 3658, 2964, 2356, 3250}], 
      Line3DBox[{3008, 2974, 2388, 3279, 2217, 2387, 3278, 2216, 3342, 3047, 
       2215, 3341, 3046, 2214, 3340, 3045, 2213, 3339, 3044, 2212, 2386, 3277,
        2211, 2385, 3276, 2210, 2384, 3275, 2209, 3338, 3043, 2208, 3337, 
       3042, 2207, 3336, 3041, 2973, 3245}], 
      Line3DBox[{3016, 3036, 3331, 2971, 3037, 3332, 2195, 3268, 2376, 2196, 
       3269, 2377, 2197, 3270, 2378, 2198, 3271, 2379, 2199, 3038, 3333, 2200,
        3039, 3334, 2201, 3040, 3335, 2202, 3272, 2380, 2203, 3273, 2381, 
       2972, 3663, 3249}], 
      Line3DBox[{3017, 3660, 2366, 2969, 3661, 2367, 2184, 3261, 2368, 2185, 
       3262, 2369, 2186, 3263, 2370, 2187, 2529, 3033, 3429, 2537, 2536, 3034,
        3432, 2188, 3264, 2371, 2189, 3265, 2372, 2970, 3662, 3248}], 
      Line3DBox[{3022, 2982, 3322, 2322, 2981, 3321, 2321, 3384, 3084, 2320, 
       3383, 3083, 2319, 3382, 3082, 2318, 3381, 3081, 2317, 2434, 3320, 2316,
        2433, 3319, 2315, 2432, 3318, 2314, 3380, 3080, 2313, 3379, 3079, 
       2312, 3668, 3253}], 
      Line3DBox[{3023, 3671, 3240, 2336, 3670, 3239, 2335, 3391, 3092, 2334, 
       3390, 3091, 2333, 3389, 3090, 2332, 2437, 3325, 2331, 2436, 3324, 2330,
        3388, 3089, 2329, 3387, 3088, 2328, 3669, 3252}], 
      Line3DBox[{3024, 2343, 3241, 3672, 2344, 3116, 3395, 2496, 2345, 3417, 
       2497, 2498, 2346, 2499, 2500, 3418, 2347, 2501, 3396, 3117, 2348, 2983,
        3673, 2349, 2984, 3251}], 
      Line3DBox[{3025, 2295, 3072, 3373, 2297, 3073, 3374, 2298, 3311, 2425, 
       2299, 3312, 2426, 2300, 3313, 2427, 2301, 3314, 2428, 2302, 3074, 3375,
        2303, 3075, 3376, 2304, 3076, 3377, 2305, 3315, 2429, 2306, 3316, 
       2430, 2307, 3317, 2980, 2308, 3244}]}, {
      Line3DBox[{8, 352, 2522, 23, 2187, 38, 2199, 53, 2212, 68, 2226, 298, 
       83, 2240, 304, 98, 2254, 256, 366, 113, 358, 267, 2478, 128, 276, 2486,
        143, 330, 2520, 158, 2302, 173, 2317, 188, 2332, 203, 2346, 362, 
       218}], Line3DBox[{2124, 2110, 2101, 3310, 2108, 2100, 1489, 3412, 1488,
        1530, 3292, 1484, 1536, 1538, 1537, 1526, 1471, 1470, 3667, 2099, 
       1458, 3408, 1457, 2098, 3282, 2107, 2097, 2152}], 
      Line3DBox[{2125, 3322, 2112, 2102, 3317, 2109, 1217, 3309, 1379, 1204, 
       3302, 1368, 1191, 3291, 1535, 1534, 1181, 1349, 3369, 1171, 1339, 3360,
        1161, 3281, 1329, 1148, 3279, 1317, 2096, 3663, 2151}], 
      Line3DBox[{2126, 2114, 3671, 2103, 3321, 2111, 1229, 3316, 1391, 1216, 
       3308, 1378, 1203, 3301, 1367, 1190, 3290, 1358, 1180, 1348, 3368, 1170,
        1338, 3359, 1160, 1328, 3350, 1147, 3278, 1316, 1134, 3273, 1302, 
       2095, 3662, 2150}], 
      Line3DBox[{2127, 2115, 3672, 1248, 1408, 3388, 1235, 3318, 1396, 1222, 
       3312, 1384, 1209, 3305, 1373, 1196, 3296, 1474, 1473, 1519, 3286, 1460,
        1459, 1516, 1442, 1441, 3421, 1511, 1440, 1439, 3354, 1153, 1323, 
       3347, 1140, 3275, 1309, 1127, 3269, 1295, 1114, 3261, 1281, 1094, 3658,
        2157}], 
      Line3DBox[{2128, 1498, 1497, 3395, 1249, 3324, 1409, 1236, 3319, 1397, 
       1223, 3313, 1385, 1210, 1491, 3413, 1490, 1197, 3297, 1477, 1476, 1520,
        3287, 1463, 1462, 1517, 1448, 1447, 3422, 1513, 1444, 1443, 3355, 
       1154, 1433, 3403, 1432, 1141, 3276, 1310, 1128, 3270, 1296, 1115, 3262,
        1282, 1096, 3257, 1426, 1425, 2158}], 
      Line3DBox[{2129, 1500, 3417, 1499, 1250, 3325, 1410, 1237, 3320, 1398, 
       1224, 3314, 1386, 1211, 1493, 3428, 1522, 1492, 1198, 1479, 3411, 1486,
        1478, 1521, 3288, 1465, 1475, 1464, 1518, 1451, 1461, 1450, 3423, 
       1514, 1446, 1512, 3407, 1445, 1155, 1435, 1509, 3404, 1434, 1142, 3277,
        1311, 1129, 3271, 1297, 1116, 3263, 1283, 1098, 1428, 3401, 1427, 
       2159}], Line3DBox[{2130, 1429, 1272, 3433, 1100, 1542, 3432, 1285, 
       1118, 3334, 1299, 1131, 3340, 1313, 1144, 1437, 3405, 1325, 1157, 3356,
        1452, 1335, 1167, 3365, 1454, 1345, 1177, 1468, 1355, 3426, 1187, 
       1482, 1364, 3298, 1200, 1495, 3415, 1375, 1213, 3376, 1388, 1226, 3382,
        1400, 1239, 3390, 1412, 1252, 3396, 1502, 2117, 2165}], 
      Line3DBox[{2131, 1273, 3659, 1102, 1286, 3264, 1119, 3335, 1300, 1132, 
       3341, 1314, 1145, 3348, 1326, 1158, 3357, 1455, 1336, 1168, 3366, 1456,
        1346, 1178, 1469, 1356, 3427, 1188, 1483, 1365, 3299, 1201, 1376, 
       3306, 1214, 3377, 1389, 1227, 3383, 1401, 1240, 3391, 1413, 1253, 3673,
        2164}], 
      Line3DBox[{2132, 1279, 3660, 1112, 3332, 1293, 1125, 3337, 1307, 1138, 
       3345, 1321, 1151, 3352, 1332, 1164, 3362, 1342, 1174, 1352, 3284, 1184,
        1361, 3294, 1194, 1371, 3303, 1207, 3374, 1382, 1220, 3379, 1394, 
       1233, 3669, 2171}], 
      Line3DBox[{2133, 3331, 1292, 1124, 3336, 1306, 1137, 3344, 1320, 1150, 
       3351, 1546, 1331, 1163, 3361, 1531, 1341, 1173, 1351, 3283, 1183, 1360,
        3293, 1193, 3371, 1370, 1206, 3373, 1381, 1219, 3668, 2172}], 
      Line3DBox[{2134, 1305, 1136, 3343, 1319, 1149, 1438, 3406, 1330, 1162, 
       3431, 1540, 1541, 1532, 1533, 1340, 1172, 1472, 1350, 3664, 1182, 1485,
        3410, 1359, 1192, 3370, 1369, 1205, 2173}], 
      Line3DBox[{2145, 1528, 1529, 1527, 1539, 3430, 1271, 1099, 1544, 1545, 
       1543, 3429, 1284, 1117, 3333, 1298, 1130, 3339, 1312, 1143, 1436, 3420,
        1510, 1324, 1156, 1449, 3424, 1515, 1334, 1166, 3364, 1453, 1466, 
       1344, 1176, 1467, 1480, 1354, 3425, 1186, 1481, 1487, 3409, 1363, 1199,
        1494, 1523, 3414, 1374, 1212, 3375, 1387, 1225, 3381, 1399, 1238, 
       3389, 1411, 1251, 1501, 3418, 2116, 2166}], 
      Line3DBox[{2156, 1092, 1280, 3661, 1113, 1294, 3268, 1126, 3338, 1308, 
       1139, 3346, 1322, 1152, 3353, 1333, 1165, 3363, 1343, 1175, 1353, 3285,
        1185, 1362, 3295, 1195, 1372, 3304, 1208, 1383, 3311, 1221, 3380, 
       1395, 1234, 3387, 1407, 1247, 2170}], 
      Line3DBox[{2163, 2104, 2113, 3670, 1241, 1402, 3384, 1228, 3315, 1390, 
       1215, 3307, 1377, 1202, 3300, 1366, 1189, 3289, 1357, 1179, 1347, 3367,
        1169, 1337, 3358, 1159, 1327, 3349, 1146, 1315, 3342, 1133, 3272, 
       1301, 1120, 3265, 1287, 2094, 2149}]}, {}, {}, {}, {}, {}}},
   VertexNormals->CompressedData["
1:eJztfWdYVUvSLmZQwYQ5ggomxIA5lKiAOQMmjglBxSxiwqx4xIAKBhTFjFkx
JyyQbNpsQLIEyWkLgor57uVUr+/5eu6ac5zr3Dkzzzp/1uN7mlrV1dVV1b12
v603c9G42eU1NDQm6WhoVNCQ+q8I/qL4hqIeSwfPqfYGdukl7J5TTfHv1ucv
g/c76HHilW8i9P/xzIfqNqcXBRhGwDPnF1pLN0aByYNbOu0HFoKJr3PxoFpK
ULx/Z6PZKwh6vC3audNSBUf7H3fO9lWKdraYjplj76rgpMNI8635Ynvk25N8
5OWTPsjr81ezmxR+/2BQueVD0uG8X7eB+xrlwMStX7bbpUTAg/vjNO9tTwEL
88OdGw3Jg5JVRxtfmh0JXYMyrcsOx8CAbikLbpsWgKbJWGfP0ChwyO+7Yeyj
ULAwGJGaebkQwp00Nm0LiRbtPML6ypx6JioYpsIhTq1esvbItyf5yMsnfZDX
h/RHXv9/lz2ZHsyuTB+Ljt26vzqaKT4Ppgc+1MuLBHf7bmcGNH8Ni1KKXS62
zRHtc3/m3QJLnwR65oF1bmV7h3Gx0GST5b177s/oWQDe5Rs+GlguXrRzeNjJ
Vm3HFsKjrO39KvrEs/bItyf5yMsnfZDXh/RGXn/qL/L9/VX2ZPOKzXs2v5gf
MD9l/sD0ZnZl+o/fGB3wLi9DfAYrhlk42seBzvbF2dWKUuCpnUehZmk2NHjt
fLnq20QYndxgYM9bSnAa2XpWtFse2PYq9tP/miza+XDayv11TudDDdOYfreb
p7L2yLcn+cjLJz2Q14f0R15/6i/y/SX7IG+fn7Uzi2tiHKX4xuYhm/dsPjK/
YX7K/If1k9mV9Xe1T537X/qli88Oj9oP7xeTCmcqjZvf3DWGnlmw9FD1K4l3
00U7X9s1x7tx3RzY7fPFZmXtTNYe+fYkF3n5pA/y+pD+yOtP/UW+v2Qf5O3z
s3ZmeYXlJZZfWBxkcZTFQzZv2bxn85f5GfNT5m/MLsyuzD7jtU1KQpYkiU83
V8cxu9NzRDt3bz5wtJ9/CtytUZx9JiyftUO+PclHXj7pg7w+pD/y+lN/ke8v
2Qd5+0jZk9VJrB+sXmJ5neEsv7M8xHA2v1jcZDiLn2yeM5zNd+aXDGf+yezI
cGZP9u///Sxi7ZFvT/KRl0/6iDjTh/QXcaY/9VfExXjyN/uIOLMP2VPE/6j+
5PwZJfwZJfwZJfwZJfwZJfwZJfwZJfwZJfwZJfwZJfwZJfwZJfwZ/8ifpXAu
PqNEfEaJ+IwS8Rkl4jNKxGeUiM8oEZ9RIj6jRHxGifiMEvEZJeIz/rPxmas3
UKLeQIl6AyXqDZSoN1Ci3kCJegMl6g2UqDdQot5AiXoDJeoNlKg38Fevd7j6
GSXqZ5Son1GifkaJ+hkl6meUqJ9Ron5GifoZJepnlKif8d+9fuHWgyixHkSJ
9SBKrAdRYj2IEutBlFgPosR6ECXWg/92e/4szu1voMT+Bkrsb/D5he1voMT+
Bkrsb6DE/sYvn+//JTjbr8P/9v26y1b9nmnGPoV9YQe7lLZRwe6Fs0sW9YuA
Y3ru97e8vw6n6hlfPRihgl32lYbfPCjiyOMkB3k5P6tPvem+jR37JIHf6kcB
qS7ZsCp+2OsKK1Ohfd635WbXg+D26XVRMcm5UMvy7NsvjV8zHHmc5CAvh+nH
+s30ZO3Y+1l7Jpe9n8n3yZpQ2cYxTXyObZ80s75NBhQ90er6XP8pmEy0yGo4
OQOe1tobvOxRtvhv9v8ZTv9Gvv349Sn6vUsjxGfc5JYV7S4Wsvch/15qh3x7
kov8e6m/KNFf5PtLdkPebswPmL8wf+DshkyOVstlpkeUyfR8Ac7LshrO+ZDH
2weZnuQYG17U0Qipsl8J2VH9M54HqXj7IOsvyUdePmcflLCP+F7ODqL+1F/k
+8vZARnO+RUyO3N2QKYn51fIxpezAzI7cP4m6s/ZQZTP+ZvYnvMr8b2cn4j6
c3YQ+8vNL2R+8umzvVmdVfHw+Yu244tG6Xj0kkHt4qFZYr9S58wbOyQqA3uv
6+EZPTyHtUe+PeeHonwubqBE3ECJuIEScUOU8/8YV1EirqJEXEWJuIr/bFz9
q+HbR09YXFYYBfNnzd3plJsDLjPq7uy1OE30hw/jzoS27pEHUXsslc8nvWbt
UaL938ln7dh7WHvOD4H5Ffs3+/8S/gnMP1l8YfOYzS/Ob0U5bB7y7Zl/8+8l
/ZHX/2ftzOzI+sHsyfrDcNYvFmcZzuIMizs8zuYtL4fei/x7f1Z/bhyR2YEb
L+TsLMY/ZmfO/ihhf5SwP/6z9pfCOf/n5TP/Rwn//+X6/LvwtTs1cxcVBIjP
xYO+6AfZvOFx5HDk8V+sD/L6SLXPD1lt2KDR4//Zpz1fYe+Fy79OHybXKSz3
+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
wxuFkJlyyunWwpcQe7eWxyfdcFTetHJfkVwAF68/D/t+KA62KEfOf94gFqP1
d26b5p4PGUaVO22PjIHUhZM8iqek4O4hT2Z2Sc8F/QPDw/aHRYPm1b3KBZGv
8f2D8u8nNs2BwDNWrbLDImFrREXLriaZ6DT2ssHMeVkwqmaKt9v7n7dz0G8H
OxSr6+dSw2kzR3ZMglY3Tjps9lBAx7TSUQs65UFyokXS9japUDQsoMuLXUrQ
MR/3vVObHIjp2Ms1f+9rKHt+a0jJrihQvp10q86wTPF53MC2zO3KS+jdfm78
i4lpMO6os6GOXg5sedzmyauHsfDOzbV60Lo4uP59unnvO3lQyy3l0v2x8TBy
vt7NI/XD4UUDbV8TtwJw1L40spNGAph4589ObaXAoZWC3TdUzYejbidSTVcl
g1fzlhnxYYkYXpSStGZiLnyskFFp8YpEeLvo1MFag15jRVXpiZLR2fCor07x
ggFxkFxydrSlZSbSE1Kmh22ytHwJT5d22rxgSzbGt1+nvLwzHWbV6KbvHBsJ
mUZ5+50b5uKAHdsO7PmWBrZ2vdv3fyxt58abjuf27lwIA+33D7UyiQbTb4NK
jdTztO/dSuZ2rQqgVeKmFtZZsXDY3apco4xIMKr1PKn+rjxwXjHvnL1LEqz8
3WPg6I0voXH44X6NG+fApL5d88fqpoGX35RE/4NxcKJRq5oWkzPEZxulfi/3
D4mwxrvzfLP9UWg+o2Hk5DXZkPxuRJ3oOelQ8lvohZnBqbir1ecBnhsyoY+m
xbRjj1Lh071Oae5mmfjymeemkv7pEG3cZ3Hw1CTY29dtz1PtHPz6pFvB/THq
+n7P0Msv9OLA7W9+ia/+5qeif9Z2T9t6rGU+zggZsWfw2SSApKNbS1tGwkOz
GhemjVSB2/mPLjf1Q8BlvLv+Wisl1AxZt+fu0UK4Ve18Pd2vT0F3Tu6QM0+i
4INO2TLYXgBTHHq5XHFUwqdE7cY1msTCtdpQcvxuHjQJ339vrXkMZGqcy3Ew
S4QCr6bx34risG30YYuUsBTo9unp3LHKHNCbUbK2WpsMLJr+yUuzNAla+5T3
S+6aAb3fn84O/i0HJ2cOunPvmtrPShynNh+SCis2D71y/VAe+n6rXXzQPhZs
m2veaq1IAOM6Mxee+Z6Pny7aXTMyewmXbyVojdoeA31yy+4pMwpw546lU4Lc
ouBjZGf9yVZR8M7CflWTQBXseIkhZbfcwXJd+Zzo/UqYs/PukhvjVPC2vsV0
rWZnoafD21lGA6Mh8FNJQMzBQlhxr2elpRm+cK/3pgspb2LBoMvMlNuWBTDB
c5XthhcP4fWS5n16JiZBi/NX/QNsk3BYhGl4Rhtf2KpqF9/YswDStw1fFGCX
hctVH/vaTn0A9/qZLKx4KAs+WMyIbDY7DysfGTbLoBVC78xTxaUX0mC8otyw
LoMK0ORIs8sncwOgftjQxOwzSfC2ZGH9pTMKMeBGj+cXPwVAM8XOktW3Y8F9
EW5zq6bCQ5/vfI9ODoDZwbNH5+ip17OtzLvErVKp82e7sJCdAVg+903jrQuV
rD1Qe2TtST6QfGTySR8gfZDpM3HSl5DRYfHInvcPTQveMiIPKgbMO5iwKxO7
3Pjs07R1JE4/PvFJUGwmVOjQ93ZC/Tyc7z5u/aD5YehitjW409o0Zk8keyKz
J9kfyf7I7D+00dUGxRsLwU//oPH15pGI9XyOhqVEsHEHGndk405+AuQnyPyE
/ArIr5D51Ta7WXcOTYvG6VXufZxbJwtbXJ5XecKLDDgcnzi8vO1rZE+t/AMx
Z06/ht2ru1897pONpwOSH1kZv0KjOv3TE+6ksHmBNC+QzQuaR0jzCNk80l0z
NdHTuxCjdxZ79D3yFC+HlnfzTYuCJD/9Y8ZaBWBbcV16RZsEzOpnUHNxlQg2
r4HmNbJ5TXEAKA4giwMUN4DiBrK4QXEGKM4gizPbllpdLX2qwOl581K3LM7D
iu7hGTFGqTBkdru7lZono+bl90XBQdkY5aFX22F1Mot3yJ4s7lGcRIqTyOIk
xVWkuIosrlIcRorDyOKwVDyn+A8U/5HFf8oXQPkCWb5geYXlGZZfKB8B5SNk
+YjyF1D+Qpa/KN8B5Ttk+Y7yI1J+RJYfKZ8i5VNk+ZTyL1L+RZZ/KU8je7J8
TfkdKb8jy+8/W1dQfQJUnyCrT6ieAapnkNUzVP8A1T+iX1G9BFQvIauXqL4C
qq+Q1VdUjyHVY8jqMarfkOo3ZPUb1XtI9R6yeo/qQ6T6EFl9+LN2+Fmc6meg
+hlZ/Uz1NlC9jazeZnmI5SUWlyxyKxQ5KoMgOv3ihrTkQrxVKyg8Y3k0q/+R
6n9k9T+tF5DWC8jWC7S+QFpfIFtf/Kvt8J+C9wx5P6mtgQL213rbx06d95oH
j32r0VbB1pvArzeVW4tTOvVBOFtkNX5UqAqK187s7jZZAZF/y6NiXmX5lOQj
L/9n9aS4ChRXgcVVqg+Brw8pPgPFZ2DxmepM4OtMLp6DRDwX38vlWWB5lvId
UL4Dlu+ofgO+fqO8D5T3geV9qn+Ar38ov4pPlmepbgS+bqR8DZSvgeVrqj+B
rz+pPgGqT4DVJ1SnAV+ncfWAKJ/qHvHJ6h+qA4GvA7n6QewXV0eBRB0l6snV
G6L9ufpKtDONI/LjSPU/8vU/Ny7IxoUbR7F+O7PWFuatS4QnRhnvagcooOEe
jC8Ky+fticyenP3F+pCzGzK7cXYW60x6L/Lv5epwlKjDUaIOF/tL8xypfhbn
u+8NE+/AxypMTfe+1+PjPkj9fr6wlqeIA+HIcG5eIJsX3DwS60bOnsj6xfk/
Mv/n5otYl3L+j8z/ufki1recPcX3cus4lFjHocQ6TuwvZ09xPcKtQ5H54Te3
CK109xiw/5pzaqtzOp6dc2d58YMshiOPc/4syuH8X1wvcHEVWVzl4rBY33Jx
Fbm4CnydzK33UWK9L75XKi9weQpZnuLyGrK8w+Up0c5cXkMuryHfntuPFd/7
q/Lyr8KzNDVaP9mnhJLrc7906pYLcdBRp++ZNIYjj9N3ZOB/J8D5GzC/ou/R
wP/egL5fA//7BM4/RTn0vV7sB/teT9/3RZx936ffA4g4+z0Ap7/4HZzTEyX0
FL+zc3ZDCbuJ+M+OC/1eQvxdAfu9hHPig7jezv74/K5R9pLTKpiucfeOan0E
zNtjW9xjJGLnnGUVu6jrrvd7Qg2fWyugdPGSgHUD/FHv1em79a6poKbz9vJ7
e0Sw358g/f4E2e9Pnm71gG+1VNBgRVxIP4cAWGDXY9Nz3WhQ3Lh8u/iiCj6M
7226VvsmFD1qEfh8hxIslxcFvritgjop27YtNL8CFn7Tc8/uFveFkPaFkO0L
kXwk+cjJR5KPTD7tOyHtOyHbd6L3Ir0X2Xs3ZrtUz/D3x5S2dq88Dqpgd7ff
Dec+jwD2veT1376fiN9N9nTV7tHZWwWhrqtmX8y+CwZuUVXmb1TC6/rdrlkr
1OuFpvfnGtkVgtZEO1dflRIOd4/TSW4biAcSrnSdaaACRzMdrRvGUaBpoWGi
UfUxwuBzRYunqsDwsF5ntwaRcOfgTX+jxMeouddszMGeKqj6puLGi4pIYN8b
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
zffW2mJa41IBdt6+9/pTn1h4d7BZ5If1Cva7U6TfnSL73Sn3+3zxd+b+Zk02
/l4vD9t9mjYqxTUVD32MHDDnZgT0mDyqTOBhZM8jhUPaCHyM5Qct6SPwKr52
6Hpe4Fm86xo1TOBXpPOqSOdVkZ1XpfOtSOdbkZ1v/Vf71c/iS/vmxAr8a2PS
wErgY1ua1OMHDxvhQDgw/K+mf5UjJVMFPrvJWZ2bfdZVwKobhj/44ghHwpHh
/2p95rftdELgJSwbszXjqQ7Cp8SbP/gJd5xYfzf3mQoNvwQOXKeN6N69vuli
bQW4RE7bVe/OK3w3YkyV0QPy4WTnIzkCX9yY1bqt7iXk4QFFGVjppUCFA5XH
C7x5J05UjhPGa8K785bCuDSY0OvHuHD9Fe3QcVbdSgJfXkpE7/cCz988DZ1f
ypsnhfvoHj8g8FrOyDW1EXguv46fV07gt3y2ZaCvwGvpGt97g8BzmTnk6hyB
3/L/kz5I+iCnD5I+yPShcQEaF+TGBWhckBsXoHFBblyA90MaF6BxwT8al+6X
V2rOcgrAEdvHRn5YrYJrFT4tGzL/53+/vSNO40C4QwA6h3r9/r6WCqqZXp/9
Sjcalq/ek7VnRhSGdl3mFlpYABqbzhgPGS19PpHiIVA8BBYPKW6KTxY/6Xwi
0vlEYOcT6Twj0nlGYOcZ6fwj0vlHYOcfKW4DxW1gcZvOVwKdrwR2vpLOYYpP
dh6Tzm8ind8Edn6TznsinfcEdt6TzocinQ8Fdj6UzpMinScFdp6UzqUCnUsF
di6VzrECnWMFdo6Vzr0CnXsFdu6VzseKT3ZOls7hIp3DBXYOl87tIp3bBXZu
l875Ip3zBXbOl84LA50XBnZemM4XA50vBna+mM5BI52DBnYOms5NI52bBnZu
ms5ZI52zBnbOms5rA53XBnZem853A53vBna+m86nI51PB3Y+nc6zI51nB3ae
nc6/I51/B3b+nTsvKZ4L484hiufgqN4AqjeQ1Rt0Hh/oPD6y8/jceU/xHBl3
rlM8dyY1v4gfAIgfABk/APEJAPEJIOMTIP4BJP4BZPwDxFeAxFeAjK+A+A2Q
+A2Q8Rv8bDwhvgUgvgVkfAvEzwDEz4CMn4H4HJD4HJDxORD/AxL/AzL+B+KL
QOKLQMYXQfwSSPwSyPglflZ/KZz4MYD4MZDxYxCfBhCfBjI+DeLfQOLfQMa/
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

    "]],
  Axes->True,
  AxesLabel->{
    FormBox[
    "\"\\!\\(\\*SubscriptBox[\\(\[Beta]\\), \\(1\\)]\\)\"", TraditionalForm], 
    
    FormBox[
    "\"\\!\\(\\*SubscriptBox[\\(\[Beta]\\), \\(2\\)]\\)\"", TraditionalForm]},
  
  ImageSize->{214.40630541959558`, Automatic},
  Method->{"RotationControl" -> "Globe"},
  PlotLabel->FormBox["\"SSE\"", TraditionalForm],
  PlotRange->{{-2, 2}, {-2, 2}, {0, 6}},
  PlotRangePadding->{
    Scaled[0.02], 
    Scaled[0.02], Automatic},
  ViewPoint->{-3.0445776086328675`, 0.6297463121889487, 1.3356521879949905`},
  ViewVertical->{0., 0., 1.}]], "Output",
 CellChangeTimes->{3.5278693761581745`*^9},
 ImageCache->GraphicsData["CompressedBitmap", "\<\
eJztvQeUFcW6tz8XATGf41FPuCfnc+89dwBFgogoillyzml2mNl5T45kzAEQ
I4iCSJAcJOecs4SZIegxEVSyqPX9qurt7ure1XtmOMNa//X9P9cqd+rd4X2e
euut7p7Nk33i3gGBPnFfvz6/fzjaJ+z19Yv9vmUoireu+Y+UlJR9KSn/0fD3
Kfw5w0v63z6G/1JSYvyhJn+rl3wjIB6u4e8w+i+lpuO9FGvxYCUW5696KouL
zekW6qGus5b6kbnZa9y/FtJ8VIO/qlHBd64xFxKL91ZXV9O2F3jeTz7+3TyQ
BzXBoYX+ofnoIXM7tNB/afZusvzovzUffVDhR3/X7/gfzUMdquyd2JM/a1Y2
RC7Uqto++oO5uT5yod+aIfynZvHf64+C4PxOE9n/MTfwx6Tf/YW5XZ2DrZJ+
9w+ab1jmPKb/7l/MyDeqYC2OI6rD/3+/fqV/1ayjoRLYxG+IrnOd+UysvIm5
779LGpWGSthrWAvJPpqWlqZuB5+FJp6+zuquzEg6YpNd3Vf/lyQrvYmvtI5j
pfxBvNe2opXWtK0Uz+/g67tes5PX8v8/qlmfFaHbkq75d+bh1zAjfp8ZuD86
1pxire/PyuErRygW+StfKX0Nz6w9tVi2T0rwZ/ptKPudsA3+qpZmu3Xsx9Ze
s7VbK95aY3uYxEqfqGhVCcFuYWph7VBzZVFzNWaU/8QfrnGA5wf5mJsRtZnY
XYPg7cp6XI7tSU0ka2r29OGKV9XN3Cvra83Ur9W0fQ3P+ydFJp7draygBh0x
fVt8OajZ11+bC98iv/1Hx14ru5AS1QSghltaEB7/TA/t5ivb1g1Jt3V90m39
yhSklmY5bPVpu7lWN3Rd5X+KB02VZHjIj8XY9xc0/GqZW3Opi3Q1zo3yQxFZ
17xwjctKsUcpr/Lt11CiaIS86kd7RZsR+6sqV9k1U5JIGS1CWTtBG1rm9grW
WlNDZ6RCxzgAXfAp3/7KPAQZ/No6enwloyhJOHY1yap/n3yFI/Ur1Dlw69Vc
oRFEHkAKZMrL+lXVqtq+GR0E33ylyiv8nXi4VnuwtFK33az97631Jf1ar61g
rTVlCpD2JeaLKq8vsfvqVv68fuV13Fcutis+kQOuW76qjm053tXh/pm5O/Jj
dZgQOJKFTzkMZ9npuq2qxNWeRq5PeqDGxmX0UvRT4SrswXP6467cTvCHGvpt
3cQfxQ7WrvzOPKvfmRvcd8Zl67p86TLcKwOw3gwXHyvaKcfphBuTbL0KneMZ
/c7cWOUI3ZJsfzSTxurYFaeqKdWyH0/r9+Mm9/1wFhT6OXKt5Bu0d9pbNFv7
qVzbHebWksHWbWiE/siSbOvXbtFMXPlw/cp/UsHK1QKNeop2369w9ZXb92H6
lf/UfeX/mST07luwM761otUn7HstzZqH6ve9opXXTL4++57+rFr2dEjlosxD
qJa5LlHWbWGwfgtibUI0db015WBS6bXc5h6EX+mDoFv5IP3Kb3dfuSDpOnFM
uhk7xTvct6ED7Da3SnHZ5ED9kV3JVnXnUXS8B2qO8udXcpQJMb1Ws7US/QFe
vQ0W6zf4iyvYYM3q24bwscLxR2eIy7Z+pdmWzOvypHpVgmV3QTcFV9esG3x0
O16k3/GKVl+5HS/S7Piv3df88yRB162+UL/vFW1BFxrd6gv0q/9NRQdgfSNF
zj7quK7cHprfVn7NtHbdmvOTREWs+9YrXKV9Z3/nvrN3mJuqRJTz9LubZPXi
pJlyei7hEK5z3Yz9EH7vvg1n4ZhSta3l6g8qyQZ11Z4Ins5WHaMc/SZ1V85o
kzLpVXzV2NiCjl6OJqzOCzaV3GQNzSZ1B5qtP9AkW71ZD04c4810uIlbsB/U
n9xXf4uJST2zx1coT3Xi/9fRB8YlA5nRUvg1c+3BJNna7cqqjI9E6K43NyQu
fgzQHMRfNKu9xX21Yt5+g321XTWr1V1ZrWi1jvfqmJuiZ1jXU/rYVMPWfqaJ
14OaA/ub+6Zu06z2Rs17v9FsqrH+wHRbEwvdULVN/s0eS7HJVM3Rydse9Kde
6bGqm65vHq2F8U/6o/275mjdz0VVeg+aauL9SzdnaaaYuNHrqrbRlpqI36zZ
qO7OFd1JySSb1+nc1h7162Vy00Zd7kGlTgJWcSe623fCuIhB2xWL6DbObCf9
Kr21NHNr12g+dd5GxJL3W90Gwvz/4q3/+fdXFtW8p3Ph/632/9Or1d1CdvP/
zauNad7Txfb/d6t1Dl4811F99jPN4roxQ7da6wbDalhZkkP/f6v9v3a1zfn/
xRrqXp0NWDdAokJonZrGuqD1QfOgBdHiaHmpcp5TkJomL73+j2ZNVdwZXd+0
7jFDfm+PjXZH64+WgRZDy0UrQhuMNoJ26mU8jkIbjTYS7cVUqzKr5v2Td1SK
+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
rSM+YZuGHWcbhhxnawcdZ6tKjrPlRcfY0oJjbFGe3NbczKPicUbkSIqi/K0I
cZYI8aU8qZwVYiXM2hD7qxDis2TdF0PTrizEmu77Zx5fcbtEShPGVh1mbCXa
ilLGlqEtLWNsCdqicrmhBeWMzT/C2Fy0OUcljxmcx1F2aZrK45idxzucx3Hw
OO7KY38Cj+MOHscsHrlyW/PAY3ZMMpkWOsImB8rZpPRyNsFXzsZ7ytjYAWXi
szG9S9moHofZy90Osee7HKpF8cSRm8rWtnrcjUDhtQ1tP4yweFx6mv5AH89F
9x+WpmNh3QV5zRVQ+S3fN/nnyY8ztnUvY1v2MbZ5P2Mb0TZ8zNj6A4ytO8jY
2oNyswa55YeJHNpiTq7MIjePyM0+kpzcxGMJ5Pjnn755nB17/TjIHQe54yB3
nB14+TjIHQe54yB33CS32SR3zCKXz8kdtZFDTxKvp7iQe633YTaqpyT3QpdD
7JlOB9nw9gfYkLYHxOeFT+0Xj9mP7mPxh/fKK0TX2+uDX1J6UfAo0cZ//8Gf
/od85srquiRJ6hd8g2LTKZ0Y27WdsZ07GNuxk7HtuxjbtltuegswbgbGTU6M
aGsMjIfQ+RSMS3QYyxMxfsgxHk3E+N4xC+PYCjC+WDHGFYUc41EHxiMajGUC
47gBpSbG0SbGg+xZYByhYCyyY2SRh/awwAO7ma/5LpZ2707W954drGej7bKP
3WGvOAww1YFX0xVvs7piW8b2bmJsz2a5rd1b5WNVeK9DWyuPma0G65UK76UK
74XEez7xnkO8Zx4xeV80eH/g4D3+WALv4wrvww7efJkdzxxXeB+TvIvdec8E
7w9DclAweL+r4f1K90PsRYN3hwNsaNuP2aDWH8sB7SaWA9yZhDvYYjfzK7h7
NdouVtX5LhnmdvU2szZ1N0kF/mhWBeI0ZU0rz9a0eWAooGdeR/NeDZk2TOa1
Gdu/lrF969A2gP9GwwF5DL8m/Gg7kimAtgEKrHcosOogKYC2jCtwWCqwqNRN
ATl2/dOF+jFQl8n80zfcqe99XqV+DNSPSeoDDepHBfXFJvUjWuoTiTp//Va/
UvY6qL/a85BJ/TmDejtBPcWYnuQ8JrFHgT0E7OnA7mm2k/Xj2BtvZ93v3kbL
1hbY29bdxFrX3Yh0uwFtHdpaAee/OaaEcRc06W/qkg++dZIk9JushI7E8PFK
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\
\>"]]
}, {2}]],

Cell[TextData[{
 "Our goal is to minimize the SEE with respect to ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    SubscriptBox["\[Beta]", "1"], "and", " ", 
    SubscriptBox[
     StyleBox["\[Beta]",
      FontWeight->"Bold"], "2"]}], TraditionalForm]]],
 ". We will do this by taking partial derivatives with respect to those \
parameters and setting the resultant expressions =0"
}], "Text",
 CellChangeTimes->{{3.5278694732433205`*^9, 3.527869511511407*^9}, 
   3.5279714032775793`*^9}],

Cell[CellGroupData[{

Cell[TextData[Cell[BoxData[{
 FormBox[
  RowBox[{
   FractionBox[
    RowBox[{"\[PartialD]", "SSE"}], 
    RowBox[{"\[PartialD]", 
     SubscriptBox["\[Beta]", "1"]}]], " ", "=", " ", 
   RowBox[{
    RowBox[{"2", " ", 
     RowBox[{"\[Sum]", 
      RowBox[{
       SuperscriptBox[
        RowBox[{"(", 
         RowBox[{
          SubscriptBox["Y", "t"], " ", "-", " ", 
          SubscriptBox[
           OverscriptBox["\[Beta]", "^"], "1"], "-", 
          RowBox[{
           SubscriptBox[
            OverscriptBox["\[Beta]", "^"], "2"], 
           SubscriptBox["X", "t"]}]}], ")"}], "1"], " ", 
       RowBox[{"(", 
        RowBox[{"-", "1"}], ")"}]}]}]}], " ", "=", "0"}]}], 
  TraditionalForm], "\[IndentingNewLine]", 
 FormBox[
  RowBox[{" ", 
   RowBox[{"=", " ", 
    RowBox[{
     RowBox[{"-", "2"}], "*", 
     RowBox[{"(", 
      RowBox[{
       RowBox[{
        RowBox[{"\[Sum]", 
         FractionBox[
          SubscriptBox["Y", "t"], "n"]}], " ", "-", " ", 
        FractionBox[
         SubscriptBox["n\[Beta]", "1"], "n"], " ", "-", " ", 
        RowBox[{
         SubscriptBox["\[Beta]", "2"], 
         RowBox[{"\[Sum]", 
          FractionBox[
           SubscriptBox["X", "t"], "n"]}]}]}], " ", "=", " ", 
       RowBox[{
        FractionBox["0", "n"], "\[IndentingNewLine]", " ", "=", " ", 
        RowBox[{
         RowBox[{
          OverscriptBox["y", "-"], " ", "-", " ", 
          SubscriptBox[
           OverscriptBox["\[Beta]", "^"], "1"], " ", "-", " ", 
          RowBox[{
           SubscriptBox[
            OverscriptBox["\[Beta]", "^"], "2"], 
           SubscriptBox["X", "t"]}]}], " ", "=", " ", 
         RowBox[{
          RowBox[{"0", "\[IndentingNewLine]", 
           StyleBox[
            SubscriptBox["\[Beta]", "1"],
            FontSize->16,
            FontWeight->"Bold"]}], 
          StyleBox[" ",
           FontSize->16,
           FontWeight->"Bold"], 
          StyleBox["=",
           FontSize->16,
           FontWeight->"Bold"], 
          StyleBox[" ",
           FontSize->16,
           FontWeight->"Bold"], 
          StyleBox[
           RowBox[{
            OverscriptBox["y", "-"], "-", 
            RowBox[{
             SubscriptBox[
              OverscriptBox["\[Beta]", "^"], "2"], 
             SubscriptBox["X", "t"]}]}],
           FontSize->16,
           FontWeight->"Bold"]}]}]}]}]}]}]}]}], TraditionalForm]}],
 FormatType->"TraditionalForm"]], "Example",
 CellChangeTimes->{{3.5278695329803333`*^9, 3.527869628015581*^9}, {
  3.52786967904303*^9, 3.5278697814179106`*^9}}],

Cell[TextData[Cell[BoxData[{
 FormBox[
  RowBox[{
   FractionBox[
    RowBox[{"\[PartialD]", "SSE"}], 
    RowBox[{"\[PartialD]", 
     SubscriptBox["\[Beta]", "2"]}]], " ", "=", " ", 
   RowBox[{
    RowBox[{"2", " ", 
     RowBox[{"\[Sum]", 
      RowBox[{
       SuperscriptBox[
        RowBox[{"(", 
         RowBox[{
          SubscriptBox["Y", "t"], " ", "-", " ", 
          SubscriptBox[
           OverscriptBox["\[Beta]", "^"], "1"], "-", 
          RowBox[{
           SubscriptBox[
            OverscriptBox["\[Beta]", "^"], "2"], 
           SubscriptBox["X", "t"]}]}], ")"}], "1"], " ", 
       RowBox[{"(", 
        RowBox[{"-", 
         SubscriptBox["X", "t"]}], ")"}]}]}]}], "=", " ", "0"}]}], 
  TraditionalForm], "\[IndentingNewLine]", 
 FormBox[
  RowBox[{
   RowBox[{
    RowBox[{"\[Sum]", " ", 
     RowBox[{
      SubscriptBox["Y", "t"], 
      SubscriptBox["X", "t"]}]}], " ", "-", " ", 
    RowBox[{
     SubscriptBox[
      OverscriptBox["\[Beta]", "^"], "1"], 
     RowBox[{"\[Sum]", 
      SubscriptBox["X", "t"]}]}], " ", "-", " ", 
    RowBox[{
     SubscriptBox[
      OverscriptBox["\[Beta]", "^"], "2"], 
     RowBox[{"\[Sum]", 
      SuperscriptBox[
       SubscriptBox["X", "t"], "2"]}]}]}], " ", "=", " ", 
   RowBox[{"0", "/", 
    RowBox[{"-", "2"}]}]}], TraditionalForm], "\[IndentingNewLine]", 
 FormBox[
  StyleBox[
   RowBox[{
    RowBox[{"\[Sum]", 
     RowBox[{"(", 
      RowBox[{
       SubscriptBox["e", "t"], 
       SubscriptBox["X", "t"]}], ")"}]}], " ", "=", " ", "0"}],
   FontSize->16,
   FontWeight->"Bold"], TraditionalForm]}],
 CellMargins->{{90.77777777777776, 3.}, {4., 4.}}]], "ExampleContinuation",
 CellMargins->{{42.666666666666664`, 24.}, {4., 4.}},
 CellChangeTimes->{{3.527869601806892*^9, 3.527869603106827*^9}, {
  3.527869821515906*^9, 3.527869979807991*^9}}]
}, Open  ]],

Cell[TextData[{
 "If we take the result we found in the equations above and plug the value \
for ",
 Cell[BoxData[
  FormBox[
   SubscriptBox[
    OverscriptBox["\[Beta]", "^"], "1"], TraditionalForm]],
  FormatType->"TraditionalForm"],
 " into the second equation and solve for ",
 Cell[BoxData[
  FormBox[
   SubscriptBox["\[Beta]", "2"], TraditionalForm]],
  FormatType->"TraditionalForm"]
}], "Text",
 CellChangeTimes->{{3.527870728546047*^9, 3.5278707884427*^9}}],

Cell[TextData[Cell[BoxData[{
 FormBox[
  RowBox[{
   RowBox[{
    RowBox[{"\[Sum]", " ", 
     RowBox[{
      SubscriptBox["Y", "t"], 
      SubscriptBox["X", "t"]}]}], " ", "-", " ", 
    RowBox[{
     SubscriptBox[
      OverscriptBox["\[Beta]", "^"], "1"], 
     RowBox[{"\[Sum]", 
      SubscriptBox["X", "t"]}]}], " ", "-", " ", 
    RowBox[{
     SubscriptBox[
      OverscriptBox["\[Beta]", "^"], "2"], 
     RowBox[{"\[Sum]", 
      SuperscriptBox[
       SubscriptBox["X", "t"], "2"]}]}]}], " ", "=", " ", 
   RowBox[{"0", "/", 
    RowBox[{"-", "2"}]}]}], TraditionalForm], "\[IndentingNewLine]", 
 FormBox[
  RowBox[{
   RowBox[{
    RowBox[{"\[Sum]", " ", 
     RowBox[{
      SubscriptBox["Y", "t"], 
      SubscriptBox["X", "t"]}]}], " ", "-", " ", 
    RowBox[{
     RowBox[{"(", 
      RowBox[{
       OverscriptBox["Y", "-"], "-", 
       RowBox[{
        SubscriptBox[
         OverscriptBox["\[Beta]", "^"], "2"], 
        OverscriptBox["X", "-"]}]}], ")"}], 
     RowBox[{"\[Sum]", 
      SubscriptBox["X", "t"]}]}], " ", "-", " ", 
    RowBox[{
     SubscriptBox[
      OverscriptBox["\[Beta]", "^"], "2"], 
     RowBox[{"\[Sum]", 
      SuperscriptBox[
       SubscriptBox["X", "t"], "2"]}]}]}], " ", "=", "0"}], 
  TraditionalForm], "\[IndentingNewLine]", 
 FormBox[
  RowBox[{
   RowBox[{
    RowBox[{"\[Sum]", " ", 
     RowBox[{
      SubscriptBox["Y", "t"], 
      SubscriptBox["X", "t"]}]}], "-", "  ", 
    RowBox[{
     OverscriptBox["Y", "-"], 
     RowBox[{"\[Sum]", 
      SubscriptBox["X", "t"]}]}]}], "=", " ", 
   RowBox[{
    RowBox[{
     SubscriptBox[
      OverscriptBox["\[Beta]", "^"], "2"], 
     RowBox[{"\[Sum]", 
      SuperscriptBox[
       SubscriptBox["X", "t"], "2"]}]}], "-", 
    RowBox[{
     SubscriptBox[
      OverscriptBox["\[Beta]", "^"], "2"], 
     OverscriptBox["X", "-"], 
     RowBox[{"\[Sum]", 
      SuperscriptBox[
       SubscriptBox["X", "t"], "2"]}]}]}]}], 
  TraditionalForm], "\[IndentingNewLine]", 
 FormBox[
  RowBox[{
   RowBox[{
    RowBox[{"\[Sum]", " ", 
     RowBox[{
      SubscriptBox["Y", "t"], 
      SubscriptBox["X", "t"]}]}], " ", "-", " ", 
    RowBox[{"n", 
     OverscriptBox["Y", "-"], 
     OverscriptBox["X", "-"]}]}], " ", "=", " ", 
   RowBox[{
    SubscriptBox[
     OverscriptBox["\[Beta]", "^"], "2"], "(", 
    RowBox[{
     RowBox[{"\[Sum]", 
      SuperscriptBox[
       SubscriptBox["X", "t"], "2"]}], " ", "-", " ", 
     RowBox[{
      OverscriptBox["X", "-"], 
      RowBox[{"\[Sum]", 
       SubscriptBox["X", "t"]}]}]}], ")"}]}], 
  TraditionalForm], "\[IndentingNewLine]", 
 FormBox[
  StyleBox[
   RowBox[{
    SubscriptBox[
     OverscriptBox["\[Beta]", "^"], "2"], " ", "=", " ", 
    RowBox[{
     FractionBox[
      RowBox[{
       RowBox[{"\[Sum]", " ", 
        RowBox[{
         SubscriptBox["Y", "t"], 
         SubscriptBox["X", "t"]}]}], " ", "-", " ", 
       RowBox[{"n", 
        OverscriptBox["Y", "-"], 
        OverscriptBox["X", "-"]}]}], 
      RowBox[{
       RowBox[{"\[Sum]", 
        SuperscriptBox[
         SubscriptBox["X", "t"], "2"]}], " ", "-", " ", 
       RowBox[{
        OverscriptBox["X", "-"], 
        RowBox[{"\[Sum]", 
         SubscriptBox["X", "t"]}]}]}]], " ", "=", " ", 
     FractionBox[
      RowBox[{"Cov", "(", 
       RowBox[{"x", ",", "y"}], ")"}], 
      RowBox[{"Var", "(", "x", ")"}]]}]}],
   FontSize->16,
   FontWeight->"Bold"], TraditionalForm]}],
 CellMargins->{{90.77777777777776, 3.}, {4., 4.}}]], "Example",
 CellChangeTimes->{{3.5279446943920116`*^9, 3.527944960601363*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell["Derivation of MLE Estimators", "Subsection",
 CellChangeTimes->{{3.5279458079574676`*^9, 3.5279458122572956`*^9}}],

Cell["\<\
The basic idea behind maximum likelihood estimators (MLE) is that we are \
looking for the most likely values parameters will have under certain \
conditions. To do this for the linear regression model we will operate under \
A.1-A.5 (see below).\
\>", "Text",
 CellChangeTimes->{{3.5279458254767666`*^9, 3.5279459117433157`*^9}, 
   3.527971404037549*^9}],

Cell[TextData[{
 "If that is the case then our model is ",
 Cell[BoxData[{
  FormBox[
   RowBox[{
    SubscriptBox["Y", "t"], " ", "=", " ", 
    RowBox[{
     SubscriptBox["\[Beta]", "1"], "+", 
     RowBox[{
      SubscriptBox["\[Beta]", "2"], 
      SubscriptBox["X", "t"]}], "+", 
     SubscriptBox["\[Epsilon]", "t"]}]}], 
   TraditionalForm], "\[IndentingNewLine]", 
  FormBox[
   RowBox[{
    RowBox[{
     RowBox[{"(", "1", ")"}], " ", 
     RowBox[{"E", "(", 
      SubscriptBox["Y", "t"], ")"}]}], " ", "=", " ", 
    RowBox[{
     SubscriptBox["\[Beta]", "1"], "+", 
     RowBox[{
      SubscriptBox["\[Beta]", "2"], 
      SubscriptBox["X", "t"]}]}]}], TraditionalForm], "\[IndentingNewLine]", 
  FormBox[
   RowBox[{
    RowBox[{
     RowBox[{"(", "2", ")"}], " ", 
     RowBox[{"Var", "(", 
      RowBox[{
       SubscriptBox["Y", "t"], "|", 
       SubscriptBox["x", "t"]}], ")"}]}], " ", "=", " ", 
    RowBox[{
     RowBox[{"Var", "(", 
      RowBox[{
       RowBox[{
        SubscriptBox["\[Beta]", "1"], "+", 
        RowBox[{
         SubscriptBox["\[Beta]", "2"], 
         SubscriptBox["X", "t"]}], "+", 
        SubscriptBox["\[Epsilon]", "t"]}], "|", " ", 
       SubscriptBox["X", "t"]}], ")"}], " ", "=", " ", 
     SuperscriptBox["\[Sigma]", "2"]}]}], TraditionalForm]}],
  FormatType->"TraditionalForm"],
 " and we can say that ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    SubscriptBox["Y", "t"], "~", 
    RowBox[{"N", "["}]}], TraditionalForm]],
  FormatType->"TraditionalForm"],
 Cell[BoxData[
  FormBox[
   RowBox[{
    SubscriptBox["\[Beta]", "1"], "+", 
    RowBox[{
     SubscriptBox["\[Beta]", "2"], 
     SubscriptBox["X", "t"]}]}], TraditionalForm]]],
 "; ",
 Cell[BoxData[
  FormBox[
   SuperscriptBox["\[Sigma]", "2"], TraditionalForm]]],
 "]"
}], "Text",
 CellChangeTimes->{{3.5279459120833025`*^9, 3.5279460396282005`*^9}}],

Cell[TextData[{
 "Keeping that in mind and recalling the pdf for a normal distribution we can \
say that ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{"f", "(", 
     RowBox[{
      SubscriptBox["Y", "t"], "|", 
      SubscriptBox["X", "t"]}], ")"}], " ", "=", " ", 
    FractionBox[
     SuperscriptBox["e", 
      RowBox[{
       RowBox[{
        RowBox[{"-", 
         SuperscriptBox[
          RowBox[{"(", 
           RowBox[{
            SubscriptBox["Y", "t"], "-", 
            SubscriptBox["\[Beta]", "1"], "+", 
            RowBox[{
             SubscriptBox["\[Beta]", "2"], 
             SubscriptBox["X", "t"]}]}], ")"}], "2"]}], "/", "2"}], 
       SuperscriptBox["\[Sigma]", "2"]}]], 
     RowBox[{
      SqrtBox[
       RowBox[{"2", "\[Pi]"}]], 
      SqrtBox[
       SuperscriptBox["\[Sigma]", "2"]]}]]}], TraditionalForm]]]
}], "Text",
 CellChangeTimes->{{3.5279460406481595`*^9, 3.5279461299745865`*^9}, 
   3.5279714047475204`*^9}],

Cell[TextData[{
 StyleBox["Likelihood Function: ",
  FontWeight->"Bold"],
 "The likelihood function (L) for a random sample is the product of the \
density functions for all points. "
}], "Definition",
 CellChangeTimes->{{3.52794614063416*^9, 3.5279461920221043`*^9}, 
   3.52797140576748*^9}],

Cell[TextData[{
 "L =(Y, ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{
     RowBox[{
      SubscriptBox["\[Beta]", "1"], ",", 
      SubscriptBox["\[Beta]", "2"], ",", 
      SuperscriptBox["\[Sigma]", "2"]}], ")"}], " ", "=", " ", 
    RowBox[{
     RowBox[{
      RowBox[{
       RowBox[{
        RowBox[{"f", "(", 
         SubscriptBox["y", "1"], ")"}], "*", 
        RowBox[{"f", "(", 
         SubscriptBox["y", "2"], ")"}], "*"}], "..."}], "*", 
      RowBox[{"f", "(", 
       SubscriptBox["y", "n"], ")"}]}], " ", "=", " "}]}], TraditionalForm]],
  FormatType->"TraditionalForm"],
 Cell[BoxData[
  RowBox[{" ", 
   FractionBox[
    SuperscriptBox["e", 
     RowBox[{"-", 
      RowBox[{"\[Sum]", 
       RowBox[{
        RowBox[{
         SuperscriptBox[
          RowBox[{"(", 
           RowBox[{
            SubscriptBox["Y", "t"], "-", 
            SubscriptBox["\[Beta]", "1"], "+", 
            RowBox[{
             SubscriptBox["\[Beta]", "2"], 
             SubscriptBox["X", "t"]}]}], ")"}], "2"], "/", "2"}], 
        SuperscriptBox["\[Sigma]", "2"]}]}]}]], 
    RowBox[{
     SuperscriptBox[
      RowBox[{"(", 
       RowBox[{"2", "\[Pi]"}], ")"}], 
      RowBox[{"n", "/", "2"}]], 
     SuperscriptBox[
      RowBox[{"(", 
       SuperscriptBox["\[Sigma]", "2"], ")"}], 
      RowBox[{"n", "/", "2"}]]}]]}]]]
}], "Text",
 CellChangeTimes->{{3.527946196061943*^9, 3.527946348815832*^9}}],

Cell[TextData[{
 StyleBox["Log Likelihood Function:",
  FontWeight->"Bold"],
 " The log likelihood function (l) for a random sample is the natural log of \
the Likelihood function (L)"
}], "Definition",
 CellChangeTimes->{{3.5279463544656067`*^9, 3.5279463940740223`*^9}, {
  3.5279714067074423`*^9, 3.5279714072974186`*^9}}],

Cell[TextData[Cell[BoxData[
 FormBox[
  RowBox[{
   RowBox[{"l", "(", 
    RowBox[{"Y", ",", 
     SubscriptBox["\[Beta]", "1"], ",", 
     SubscriptBox["\[Beta]", "2"], ",", 
     SuperscriptBox["\[Sigma]", "2"]}], ")"}], " ", "=", " ", 
   RowBox[{"ln", "[", 
    RowBox[{"L", "(", 
     RowBox[{"Y", ",", 
      SubscriptBox["\[Beta]", "1"], ",", 
      SubscriptBox["\[Beta]", "2"], ",", "\[Sigma]"}], ")"}], "]"}]}], 
  TraditionalForm]],
 FormatType->"TraditionalForm"]], "Text",
 CellChangeTimes->{{3.5279464001337795`*^9, 3.5279464347323956`*^9}}],

Cell[TextData[{
 Cell[BoxData[
  RowBox[{"l", 
   RowBox[{"(", 
    RowBox[{"Y", ",", 
     SubscriptBox["\[Beta]", "1"], ",", 
     SubscriptBox["\[Beta]", "2"], ",", 
     SuperscriptBox["\[Sigma]", "2"]}], ")"}], " "}]]],
 Cell[BoxData[{
  FormBox[
   RowBox[{"=", " ", 
    RowBox[{"ln", "[", 
     RowBox[{"L", "(", 
      RowBox[{"Y", ",", 
       SubscriptBox["\[Beta]", "1"], ",", 
       SubscriptBox["\[Beta]", "2"], ",", "\[Sigma]"}], ")"}], "]"}]}], 
   TraditionalForm], "\[IndentingNewLine]", 
  FormBox[
   RowBox[{"=", " ", 
    RowBox[{
     SubscriptBox["\[Sum]", "t"], 
     RowBox[{"ln", "(", 
      RowBox[{
       RowBox[{"f", "(", 
        SubscriptBox["Y", "t"], ")"}], "\[IndentingNewLine]", "=", " ", 
       RowBox[{
        RowBox[{"-", 
         RowBox[{"\[Sum]", 
          RowBox[{
           RowBox[{
            SuperscriptBox[
             RowBox[{"(", 
              RowBox[{
               SubscriptBox["Y", "t"], "-", 
               SubscriptBox["\[Beta]", "1"], "+", 
               RowBox[{
                SubscriptBox["\[Beta]", "2"], 
                SubscriptBox["X", "t"]}]}], ")"}], "2"], "/", "2"}], 
           SuperscriptBox["\[Sigma]", 
            RowBox[{"2", " "}]]}]}]}], "-", 
        RowBox[{
         FractionBox["n", "2"], 
         RowBox[{"ln", "(", 
          RowBox[{"2", "\[Pi]"}], ")"}]}], "-", " ", 
        RowBox[{
         FractionBox["n", "2"], 
         RowBox[{"ln", "(", 
          SuperscriptBox["\[Sigma]", "2"], ")"}]}]}]}]}]}]}], 
   TraditionalForm]}]]
}], "Text",
 CellChangeTimes->{{3.527946456011544*^9, 3.527946544997985*^9}}],

Cell["\<\
Now we will use the above maximize the log likelihood function subject to our \
\[Beta]\[CloseCurlyQuote]s by taking partial derivatives and setting them =0\
\>", "Text",
 CellChangeTimes->{{3.5279466052215767`*^9, 3.527946663159259*^9}, 
   3.527971408587367*^9}],

Cell[TextData[Cell[BoxData[{
 FormBox[
  RowBox[{
   FractionBox[
    RowBox[{"\[PartialD]", "l"}], 
    RowBox[{"\[PartialD]", 
     SubscriptBox["\[Beta]", "1"]}]], " ", "=", " ", 
   RowBox[{
    RowBox[{
     FractionBox[
      RowBox[{"-", "1"}], 
      RowBox[{"2", 
       SuperscriptBox["\[Sigma]", "2"]}]], 
     FractionBox[
      RowBox[{"\[PartialD]", "SSE"}], 
      RowBox[{"\[PartialD]", 
       SubscriptBox["\[Beta]", "1"]}]]}], " ", "=", "0"}]}], 
  TraditionalForm], "\[IndentingNewLine]", 
 FormBox[
  RowBox[{
   FractionBox[
    RowBox[{"\[PartialD]", "l"}], 
    RowBox[{"\[PartialD]", 
     SubscriptBox["\[Beta]", "2"]}]], " ", "=", " ", 
   RowBox[{
    RowBox[{
     FractionBox[
      RowBox[{"-", "1"}], 
      RowBox[{"2", 
       SuperscriptBox["\[Sigma]", "2"]}]], 
     FractionBox[
      RowBox[{"\[PartialD]", "SSE"}], 
      RowBox[{"\[PartialD]", 
       SubscriptBox["\[Beta]", "2"]}]]}], " ", "=", " ", "0"}]}], 
  TraditionalForm], "\[IndentingNewLine]", 
 FormBox[
  RowBox[{
   FractionBox[
    RowBox[{"\[PartialD]", "l"}], 
    RowBox[{"\[PartialD]", 
     SuperscriptBox["\[Sigma]", "2"]}]], " ", "=", " ", 
   RowBox[{
    RowBox[{
     RowBox[{
      FractionBox["SSE", "2"], 
      SuperscriptBox[
       RowBox[{"(", 
        SuperscriptBox[
         OverscriptBox["\[Sigma]", "^"], "2"], ")"}], 
       RowBox[{"-", "2"}]]}], "-", 
     RowBox[{
      FractionBox["n", "2"], 
      FractionBox["1", 
       SuperscriptBox[
        OverscriptBox["\[Sigma]", "^"], "2"]]}]}], "=", "0"}]}], 
  TraditionalForm]}],
 FormatType->"TraditionalForm"]], "Text",
 CellChangeTimes->{{3.527946666159139*^9, 3.5279467979838657`*^9}}],

Cell[TextData[{
 "Notice that these are the first two are the exact same equations that \
allowed us to find the OLS estimates (the constant divides through and is \
wiped out be zero and we just differentiate the SSE). The third is just \
saying that we are minimizing the variance ",
 Cell[BoxData[
  FormBox[
   SuperscriptBox["\[Sigma]", "2"], TraditionalForm]]],
 "which was our other normal equation in finding the OLS estimators. "
}], "Text",
 CellChangeTimes->{{3.52794679988379*^9, 3.527946890980146*^9}, {
  3.5279714121572237`*^9, 3.5279714160770674`*^9}}]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Properties of OLS estimators", "Section",
 CellChangeTimes->{{3.527594539129323*^9, 3.527594545209127*^9}, {
  3.527870726194686*^9, 3.527870727169549*^9}}],

Cell[CellGroupData[{

Cell["The Five Assumptions (A.1-A.5)", "Subsection",
 CellChangeTimes->{{3.5279450131392612`*^9, 3.527945022358893*^9}}],

Cell[CellGroupData[{

Cell[TextData[{
 "(A.1): ",
 Cell[BoxData[
  FormBox[
   SubscriptBox["\[Epsilon]", "t"], TraditionalForm]],
  FormatType->"TraditionalForm"],
 "are normally distributed"
}], "Item1",
 CellChangeTimes->{{3.527945035248377*^9, 3.527945048227858*^9}}],

Cell[TextData[{
 "(A.2): ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{"E", "(", 
     RowBox[{
      SubscriptBox["\[Epsilon]", "t"], "|", 
      SubscriptBox["X", "t"]}], ")"}], " ", "=", " ", "0"}], TraditionalForm]],
  FormatType->"TraditionalForm"]
}], "Item1",
 CellChangeTimes->{{3.5279450502577767`*^9, 3.527945068217058*^9}}],

Cell[TextData[{
 "(A.3): Homoskedasticity: ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{"Var", "(", 
     RowBox[{
      SubscriptBox["\[Epsilon]", "t"], "|", 
      SubscriptBox["X", "t"]}], ")"}], "=", 
    RowBox[{
     SuperscriptBox[
      SubscriptBox["\[Sigma]", "t"], "2"], " ", "=", " ", 
     SuperscriptBox["\[Sigma]", "2"]}]}], TraditionalForm]]],
 ", for all t"
}], "Item1",
 CellChangeTimes->{{3.527945070066984*^9, 3.5279451193050146`*^9}, {
   3.5279451548335934`*^9, 3.5279451741328216`*^9}, 3.5279714179669914`*^9, 
   3.527971675737017*^9}]
}, Open  ]],

Cell[BoxData[
 GraphicsBox[{
   LineBox[{{0.09722222222222224, 0.8138888888888891}, {0.09444444444444447, 
    0.23055555555555562`}, {0.5194444444444446, 0.2333333333333334}}], 
   LineBox[{{0.7500000000000001, 0.8236111111111111}, {0.7472222222222223, 
    0.2402777777777776}, {1.1722222222222225`, 0.24305555555555536`}}], 
   LineBox[{{0.09444444444444447, 0.411111111111111}, {0.4722222222222223, 
    0.5749999999999997}}], 
   LineBox[{{0.7444444444444446, 0.4458333333333333}, {1.1222222222222225`, 
    0.609722222222222}}], 
   PointBox[{0.11944444444444444`, 0.4583333333333335}], 
   PointBox[{0.15277777777777782`, 0.4222222222222225}], 
   PointBox[{0.20555555555555557`, 0.48888888888888893`}], 
   PointBox[{0.2444444444444445, 0.43611111111111134`}], 
   PointBox[{0.31666666666666676`, 0.5194444444444446}], 
   PointBox[{0.3777777777777779, 0.5833333333333335}], 
   PointBox[{0.4222222222222223, 0.48611111111111116`}], 
   PointBox[{0.35277777777777786`, 0.48611111111111116`}], 
   PointBox[{0.4666666666666668, 0.5833333333333335}], 
   PointBox[{0.48611111111111127`, 0.5444444444444445}], 
   PointBox[{0.7722222222222224, 0.48888888888888893`}], 
   PointBox[{0.7750000000000001, 0.40555555555555545`}], 
   PointBox[{0.838888888888889, 0.46111111111111125`}], 
   PointBox[{0.8527777777777779, 0.5055555555555558}], 
   PointBox[{0.916666666666667, 0.5333333333333334}], 
   PointBox[{0.9333333333333336, 0.46944444444444455`}], 
   PointBox[{0.9583333333333335, 0.38611111111111107`}], 
   PointBox[{1.013888888888889, 0.3666666666666667}], 
   PointBox[{1.0500000000000003`, 0.3666666666666667}], 
   PointBox[{1.052777777777778, 0.411111111111111}], 
   PointBox[{1.0361111111111114`, 0.6111111111111112}], 
   PointBox[{1.0500000000000003`, 0.802777777777778}], 
   PointBox[{1.1305555555555558`, 0.5722222222222224}], 
   PointBox[{1.1583333333333337`, 0.6472222222222224}], InsetBox[
    StyleBox[Cell["Homoskedasticity",
      GeneratedCell->False,
      CellAutoOverwrite->False,
      CellBaseline->Baseline,
      TextAlignment->Left],
     Background->GrayLevel[1.]], {0.21451077943615268`, 0.7978026533996689}, {
    Left, Baseline},
    Alignment->{Left, Top}], InsetBox[
    StyleBox[Cell["Heteroskedasticity",
      GeneratedCell->False,
      CellAutoOverwrite->False,
      CellBaseline->Baseline,
      TextAlignment->Left],
     Background->GrayLevel[1.]], {0.8638888888888889, 0.8472222222222221}, {
    Left, Baseline},
    Alignment->{Left, Top}]},
  ContentSelectable->True,
  ImagePadding->{{0., 0.}, {0., 0.}},
  ImageSize->{268., 201.},
  PlotRange->{{0., 1.3333333333333335`}, {0., 1.}},
  PlotRangePadding->Automatic]], "Input",
 CellChangeTimes->{{3.527945319587003*^9, 3.527945386384331*^9}}],

Cell[TextData[{
 "(A.4): No Autocorrelation: ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{"Cov", "(", 
     RowBox[{
      SubscriptBox["\[Epsilon]", "t"], 
      SubscriptBox["\[Epsilon]", "s"]}], ")"}], " ", "=", " ", "0"}], 
   TraditionalForm]],
  FormatType->"TraditionalForm"],
 " t\[NotEqual]s"
}], "Item1",
 CellChangeTimes->{{3.527945174472808*^9, 3.5279452667791157`*^9}}],

Cell[BoxData[
 GraphicsBox[{
   LineBox[{{0.0777777777777778, 0.8361111111111112}, {0.0777777777777778, 
    0.25}, {0.5500000000000002, 0.25}}], 
   LineBox[{{0.7180555555555558, 0.8374999999999999}, {0.7180555555555558, 
    0.25138888888888866`}, {1.1902777777777782`, 0.25138888888888866`}}], 
   LineBox[{{0.08055555555555557, 0.44444444444444464`}, {0.4750000000000002, 
    0.5861111111111112}}], 
   LineBox[{{0.7152777777777779, 0.4097222222222223}, {1.1097222222222225`, 
    0.5513888888888889}}], 
   PointBox[{0.10833333333333336`, 0.4222222222222225}], 
   PointBox[{0.15555555555555559`, 0.4472222222222224}], 
   PointBox[{0.16111111111111112`, 0.4916666666666667}], 
   PointBox[{0.23611111111111113`, 0.463888888888889}], 
   PointBox[{0.25277777777777777`, 0.5194444444444446}], 
   PointBox[{0.28333333333333344`, 0.4805555555555556}], 
   PointBox[{0.33611111111111125`, 0.5444444444444445}], 
   PointBox[{0.3750000000000001, 0.5694444444444446}], 
   PointBox[{0.41666666666666674`, 0.5916666666666668}], 
   PointBox[{0.4222222222222223, 0.5361111111111112}], 
   PointBox[{0.4750000000000001, 0.5555555555555556}], 
   PointBox[{0.4833333333333334, 0.6222222222222222}], 
   PointBox[{0.5138888888888891, 0.5805555555555557}], 
   PointBox[{0.7500000000000002, 0.37777777777777777`}], 
   PointBox[{0.7972222222222224, 0.3916666666666666}], 
   PointBox[{0.8305555555555557, 0.4083333333333332}], 
   PointBox[{0.8361111111111112, 0.4305555555555558}], 
   PointBox[{0.8361111111111112, 0.46944444444444455`}], 
   PointBox[{0.8444444444444446, 0.5055555555555558}], 
   PointBox[{0.8555555555555558, 0.5333333333333334}], 
   PointBox[{0.8805555555555558, 0.5444444444444445}], 
   PointBox[{0.916666666666667, 0.5527777777777778}], 
   PointBox[{0.9388888888888891, 0.5583333333333333}], 
   PointBox[{0.9500000000000002, 0.5611111111111111}], 
   PointBox[{0.9722222222222225, 0.5527777777777778}], 
   PointBox[{0.9944444444444447, 0.5527777777777778}], 
   PointBox[{1.0444444444444447`, 0.5333333333333334}], 
   PointBox[{1.0555555555555558`, 0.5194444444444446}], 
   PointBox[{1.0861111111111112`, 0.5194444444444446}], 
   PointBox[{1.127777777777778, 0.5361111111111112}], 
   PointBox[{1.1361111111111113`, 0.5444444444444445}], InsetBox[
    StyleBox[Cell["No Autocorrelation",
      GeneratedCell->False,
      CellAutoOverwrite->False,
      CellBaseline->Baseline,
      TextAlignment->Left],
     Background->GrayLevel[1.]], {0.20833333333333334`, 0.7416666666666669}, {
    Left, Baseline},
    Alignment->{Left, Top}], InsetBox[
    StyleBox[Cell["Autocorrelation",
      GeneratedCell->False,
      CellAutoOverwrite->False,
      CellBaseline->Baseline,
      TextAlignment->Left],
     Background->GrayLevel[1.]], {0.8444444444444446, 0.7666666666666668}, {
    Left, Baseline},
    Alignment->{Left, Top}]},
  ContentSelectable->True,
  ImagePadding->{{0., 0.}, {0., 0.}},
  ImageSize->{303., 227.},
  PlotRange->{{0., 1.3333333333333335`}, {0., 1.}},
  PlotRangePadding->Automatic]], "Input",
 CellChangeTimes->{{3.5279453959439487`*^9, 3.527945465541165*^9}}],

Cell["\<\
(A.5):  X\[CloseCurlyQuote]s are non-stochastic or in other words the X\
\[CloseCurlyQuote]s and the \[Epsilon]\[CloseCurlyQuote]s are not \
statistically correlated. \
\>", "Item1",
 CellChangeTimes->{{3.5279452674290895`*^9, 3.527945295497967*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell["\<\
The Two models (Classical Linear, and Classical Normal Linear)\
\>", "Subsection",
 CellChangeTimes->{{3.527945485890351*^9, 3.5279454953799715`*^9}}],

Cell[CellGroupData[{

Cell["\<\
Classical Linear Regression Model (A.2-A.5)\
\>", "Subsubsection",
 CellChangeTimes->{{3.527945498829833*^9, 3.527945529778595*^9}, {
  3.527945677722677*^9, 3.5279456808925505`*^9}}],

Cell[CellGroupData[{

Cell["Properties", "Subsubsubsection",
 CellChangeTimes->{{3.5279455071195016`*^9, 3.527945513859232*^9}}],

Cell[CellGroupData[{

Cell[TextData[{
 "The ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{
     OverscriptBox["\[Beta]", "^"], "'"}], "s"}], TraditionalForm]],
  FormatType->"TraditionalForm"],
 " are unbiased: ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{"E", "(", 
     SubscriptBox[
      OverscriptBox["\[Beta]", "^"], "i"], ")"}], " ", "=", " ", 
    SubscriptBox["\[Beta]", "i"]}], TraditionalForm]],
  FormatType->"TraditionalForm"]
}], "Item2",
 CellChangeTimes->{{3.527945535538365*^9, 3.5279455648671913`*^9}}],

Cell[TextData[{
 "The ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{
     OverscriptBox["\[Beta]", "^"], "'"}], "s"}], TraditionalForm]],
  FormatType->"TraditionalForm"],
 " are consistent: ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{"Var", "(", 
     SubscriptBox[
      OverscriptBox["\[Beta]", "^"], "i"], ")"}], "->", " ", 
    RowBox[{
     RowBox[{"0", " ", "as", " ", "n"}], "->", "\[Infinity]"}]}], 
   TraditionalForm]],
  FormatType->"TraditionalForm"]
}], "Item2",
 CellChangeTimes->{{3.5279455659471483`*^9, 3.5279455985558443`*^9}}],

Cell[TextData[{
 "They have the minimum variable of all ",
 StyleBox["linear",
  FontWeight->"Bold",
  FontSlant->"Italic"],
 " unbiased estimators (THE ARE BLUE)"
}], "Item2",
 CellChangeTimes->{{3.527945599305814*^9, 3.5279456212749352`*^9}, 
   3.527945724450808*^9}],

Cell["OLS\[NotEqual]MLE", "Item2",
 CellChangeTimes->{{3.527945621784915*^9, 3.5279456398641915`*^9}}],

Cell["\<\
They are not normally distributed and therefore t and f stats are not exact.\
\>", "Item2",
 CellChangeTimes->{{3.527945640474167*^9, 3.527945655943548*^9}}]
}, Open  ]]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["\<\
Classical Normal Liner Regression Model (A.1-A.5)\
\>", "Subsubsection",
 CellChangeTimes->{{3.527945660453368*^9, 3.5279456753327727`*^9}}],

Cell[CellGroupData[{

Cell["Properties", "Subsubsubsection",
 CellChangeTimes->{{3.5279456844724073`*^9, 3.5279456864923267`*^9}}],

Cell[CellGroupData[{

Cell[TextData[{
 "The ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{
     OverscriptBox["\[Beta]", "^"], "'"}], "s"}], TraditionalForm]],
  FormatType->"TraditionalForm"],
 " are unbiased: ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{"E", "(", 
     SubscriptBox[
      OverscriptBox["\[Beta]", "^"], "i"], ")"}], " ", "=", " ", 
    SubscriptBox["\[Beta]", "i"]}], TraditionalForm]],
  FormatType->"TraditionalForm"]
}], "Item2",
 CellChangeTimes->{{3.527945535538365*^9, 3.5279455648671913`*^9}}],

Cell[TextData[{
 "The ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{
     OverscriptBox["\[Beta]", "^"], "'"}], "s"}], TraditionalForm]],
  FormatType->"TraditionalForm"],
 " are consistent: ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{"Var", "(", 
     SubscriptBox[
      OverscriptBox["\[Beta]", "^"], "i"], ")"}], "->", " ", 
    RowBox[{
     RowBox[{"0", " ", "as", " ", "n"}], "->", "\[Infinity]"}]}], 
   TraditionalForm]],
  FormatType->"TraditionalForm"]
}], "Item2",
 CellChangeTimes->{{3.5279455659471483`*^9, 3.5279455985558443`*^9}}],

Cell["\<\
They have the minimum variable of ALL unbiased estimators (THE ARE BLUE, and \
more)\
\>", "Item2",
 CellChangeTimes->{{3.527945599305814*^9, 3.5279456212749352`*^9}, {
   3.527945726250736*^9, 3.5279457383602514`*^9}, 3.5279714222568197`*^9}],

Cell["OLS=MLE", "Item2",
 CellChangeTimes->{{3.527945621784915*^9, 3.5279456398641915`*^9}, {
  3.527945704971587*^9, 3.527945705001586*^9}}],

Cell["\<\
They ARE  normally distributed and therefore t and f stats are not exact.\
\>", "Item2",
 CellChangeTimes->{{3.527945640474167*^9, 3.527945655943548*^9}, {
  3.5279457079114695`*^9, 3.5279457111113415`*^9}}]
}, Open  ]]
}, Open  ]]
}, Open  ]]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Distribution of Estimators", "Section",
 CellChangeTimes->{{3.527594552849972*^9, 3.5275945533305902`*^9}}],

Cell["\<\
The theoretical groundwork for being able to talk about the distribution of \
our estimators is that the \[Beta]\[CloseCurlyQuote]s are functions of the Y\
\[CloseCurlyQuote]s (which are random variables). Because the \[Beta]\
\[CloseCurlyQuote]s are functions of random variables, they themselves are \
also random variables with the same distribution as the y\[CloseCurlyQuote]s. \
That being said we can talk about the Expected Value, Variance, and \
distribution of the \[Beta]\[CloseCurlyQuote]s.\
\>", "Text",
 CellChangeTimes->{{3.5279470082054567`*^9, 3.5279470956119604`*^9}, {
  3.527947230396569*^9, 3.527947239396209*^9}}],

Cell[TextData[Cell[BoxData[{
 FormBox[
  RowBox[{
   SuperscriptBox[
    SubscriptBox["\[Sigma]", 
     SubscriptBox["\[Beta]", "2"]], "2"], " ", "=", " ", 
   RowBox[{
    FractionBox[
     SuperscriptBox["\[Sigma]", "2"], 
     RowBox[{"\[Sum]", 
      SuperscriptBox[
       RowBox[{"(", 
        RowBox[{
         SubscriptBox["x", "t"], "-", 
         OverscriptBox["x", "-"]}], ")"}], "2"]}]], " ", "=", " ", 
    FractionBox[
     SuperscriptBox["\[Sigma]", "2"], 
     RowBox[{"Var", "(", "x", ")"}]]}]}], 
  TraditionalForm], "\[IndentingNewLine]", 
 FormBox[
  RowBox[{
   SubscriptBox["\[Sigma]", 
    SuperscriptBox[
     SubscriptBox["\[Beta]", "1"], "2"]], "=", "  ", 
   RowBox[{
    RowBox[{
     SuperscriptBox["\[Sigma]", "2"], "(", 
     RowBox[{
      FractionBox["1", "n"], "+", 
      FractionBox[
       SuperscriptBox[
        OverscriptBox["X", "-"], "2"], 
       RowBox[{"\[Sum]", 
        SuperscriptBox[
         RowBox[{"(", 
          RowBox[{
           SubscriptBox["X", "t"], "-", 
           OverscriptBox["X", "-"]}], ")"}], "2"]}]]}], ")"}], "=", 
    RowBox[{
     FractionBox[
      SuperscriptBox["\[Sigma]", "2"], "n"], "+", 
     RowBox[{
      OverscriptBox["X", "-"], 
      SubscriptBox[
       SuperscriptBox["\[Sigma]", "2"], 
       SubscriptBox["\[Beta]", "2"]], " "}]}]}]}], TraditionalForm]}],
 FormatType->"TraditionalForm"]], "Text",
 CellChangeTimes->{{3.5279472529856653`*^9, 3.527947398009864*^9}, {
  3.527947532454486*^9, 3.5279475347243953`*^9}}],

Cell["\<\
There are a number of things that might affect the variance of your \
estimators. Some of the things that actually improve the precision of your \
estimators (reduce variance) are having less spread out data and having more \
data.\
\>", "Text",
 CellChangeTimes->{{3.527947428198656*^9, 3.527947488556242*^9}}],

Cell[CellGroupData[{

Cell["Review up to this point", "Subsection",
 CellChangeTimes->{{3.5279475646331987`*^9, 3.527947569373009*^9}}],

Cell[TextData[{
 "The model we are looking at is ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    SubscriptBox["Y", "t"], " ", "=", " ", 
    RowBox[{
     SubscriptBox["\[Beta]", "1"], "+", 
     RowBox[{
      SubscriptBox["\[Beta]", "2"], 
      SubscriptBox["X", "t"]}], "+", 
     SubscriptBox["\[Epsilon]", "t"]}]}], TraditionalForm]],
  FormatType->"TraditionalForm"],
 "and we follow A.1-A,.5 (see above)"
}], "Text",
 CellChangeTimes->{{3.5279475906621575`*^9, 3.5279476309905443`*^9}}],

Cell[TextData[{
 "The unknown parameters we want to estimate are ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    SubscriptBox["\[Beta]", "1"], ",", 
    RowBox[{
     SubscriptBox["\[Beta]", 
      RowBox[{"2", ","}]], "and", " ", 
     SuperscriptBox["\[Sigma]", "2"]}]}], TraditionalForm]]]
}], "Text",
 CellChangeTimes->{{3.527947639300212*^9, 3.527947655329571*^9}, 
   3.5279714264646535`*^9}],

Cell[TextData[{
 "The Estimators are given as follows: ",
 Cell[BoxData[{
  FormBox[
   RowBox[{
    RowBox[{
     SubscriptBox["\[Beta]", 
      RowBox[{"1", ":"}]], 
     SubscriptBox[
      OverscriptBox["\[Beta]", "^"], "1"]}], " ", "=", " ", 
    RowBox[{
     OverscriptBox["Y", "-"], "-", 
     RowBox[{
      SubscriptBox[
       OverscriptBox["\[Beta]", "^"], "2"], 
      OverscriptBox["X", "-"]}]}]}], TraditionalForm], "\[IndentingNewLine]", 
 
  FormBox[
   RowBox[{
    RowBox[{
     SubscriptBox["\[Beta]", 
      RowBox[{"2", ":", " "}]], 
     SubscriptBox[
      OverscriptBox["\[Beta]", "^"], "2"]}], " ", "=", " ", 
    RowBox[{
     FractionBox[
      RowBox[{"\[Sum]", 
       RowBox[{
        RowBox[{"(", 
         RowBox[{
          SubscriptBox["X", "t"], "-", 
          OverscriptBox["X", "-"]}], ")"}], 
        RowBox[{"(", 
         RowBox[{
          SubscriptBox["Y", "t"], "-", 
          OverscriptBox["Y", "-"]}], ")"}]}]}], 
      RowBox[{"\[Sum]", 
       RowBox[{
        RowBox[{"(", 
         RowBox[{
          SubscriptBox["X", "t"], "-", 
          OverscriptBox["X", "-"]}], ")"}], "2"}]}]], "=", 
     RowBox[{
      FractionBox[
       RowBox[{
        RowBox[{"\[Sum]", " ", 
         RowBox[{
          SubscriptBox["Y", "t"], 
          SubscriptBox["X", "t"]}]}], " ", "-", " ", 
        RowBox[{"n", 
         OverscriptBox["Y", "-"], 
         OverscriptBox["X", "-"]}]}], 
       RowBox[{
        RowBox[{"\[Sum]", 
         SuperscriptBox[
          SubscriptBox["X", "t"], "2"]}], " ", "-", " ", 
        RowBox[{
         OverscriptBox["X", "-"], 
         RowBox[{"\[Sum]", 
          SubscriptBox["X", "t"]}]}]}]], " ", "=", " ", 
      FractionBox[
       RowBox[{"Cov", "(", 
        RowBox[{"x", ",", "y"}], ")"}], 
       RowBox[{"Var", "(", "x", ")"}]]}]}]}], 
   TraditionalForm], "\[IndentingNewLine]", 
  FormBox[
   RowBox[{
    RowBox[{
     SuperscriptBox["\[Sigma]", "2"], ":", "   ", 
     SuperscriptBox["s", "2"]}], " ", "=", " ", 
    RowBox[{
     RowBox[{"\[Sum]", 
      FractionBox[
       SubscriptBox[
        SuperscriptBox["e", "2"], "t"], 
       RowBox[{
        RowBox[{"(", 
         RowBox[{"n", "-", "2"}], ")"}], " "}]]}], " ", "=", " ", 
     RowBox[{
      FractionBox[
       RowBox[{"\[Sum]", 
        SuperscriptBox[
         RowBox[{"(", 
          RowBox[{
           SubscriptBox["Y", "t"], "-", 
           SubscriptBox["\[Beta]", "1"], "-", 
           RowBox[{
            SubscriptBox["\[Beta]", "2"], 
            SubscriptBox["X", "t"]}]}], ")"}], "2"], " "}], 
       RowBox[{"n", "-", "2"}]], "  ", "=", 
      FractionBox["SEE", 
       RowBox[{"n", "-", "2"}]]}]}]}], TraditionalForm]}],
  FormatType->"TraditionalForm"]
}], "Text",
 CellChangeTimes->{{3.5279476569795046`*^9, 3.5279478944300065`*^9}}],

Cell[TextData[{
 "The distributions of the estimators are as follows: ",
 Cell[BoxData[{
  FormBox[
   RowBox[{
    SubscriptBox[
     OverscriptBox["\[Beta]", "^"], "1"], "~", " ", 
    RowBox[{"N", "[", 
     RowBox[{
      SubscriptBox["\[Beta]", "1"], ",", 
      RowBox[{
       SubscriptBox[
        SuperscriptBox["\[Sigma]", "2"], 
        SubscriptBox["\[Beta]", "1"]], "=", 
       RowBox[{
        FractionBox[
         SuperscriptBox["\[Sigma]", "2"], "n"], "+", 
        RowBox[{
         OverscriptBox["X", "-"], 
         SubscriptBox[
          SuperscriptBox["\[Sigma]", "2"], 
          SubscriptBox["\[Beta]", "2"]]}]}]}]}], "]"}]}], 
   TraditionalForm], "\[IndentingNewLine]", 
  FormBox[
   RowBox[{
    SubscriptBox[
     OverscriptBox["\[Beta]", "^"], "2"], " ", "~", 
    RowBox[{"N", "[", 
     RowBox[{
      SubscriptBox["\[Beta]", "2"], ",", 
      RowBox[{
       SubscriptBox[
        SuperscriptBox["\[Sigma]", "2"], 
        SubscriptBox["\[Beta]", "2"]], " ", "=", " ", 
       FractionBox[
        SuperscriptBox["\[Sigma]", "2"], 
        RowBox[{"\[Sum]", 
         SuperscriptBox[
          RowBox[{"(", 
           RowBox[{
            SubscriptBox["x", "t"], "-", 
            OverscriptBox["x", "-"]}], ")"}], "2"]}]]}]}], "]"}]}], 
   TraditionalForm]}]]
}], "Text",
 CellChangeTimes->{{3.5279478951999755`*^9, 3.527948006395528*^9}}]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["\<\
Statistical Inference (Descriptive Statistics and Hypothesis Testing)\
\>", "Section",
 CellChangeTimes->{{3.527594556560766*^9, 3.5275945630827923`*^9}, {
  3.52794802232489*^9, 3.5279480326944757`*^9}}],

Cell["\<\
For this section we assume that A.1-A.5 are valid.\
\>", "Text",
 CellChangeTimes->{{3.527948295771452*^9, 3.5279483043811073`*^9}}],

Cell[TextData[{
 "One hypothesis that we might be concerned with is ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{
     SubscriptBox["H", "0"], ":", 
     SubscriptBox["\[Beta]", "2"]}], "=", "0"}], TraditionalForm]]],
 " or that our model is just the intercept plus the error. We hope this is \
wrong but we could test it. (We would use either a Z stat that corresponds to \
a standard normal distribution or a t stat that corresponds to a t \
distribution. THE ONLY WAY TO USE A Z STAT is if we know the actual variance \
for the parameter we are testing. This hardly ever happens so we almost \
always use the t statistic.)"
}], "Text",
 CellChangeTimes->{{3.527948306141037*^9, 3.5279484275261817`*^9}}],

Cell[TextData[{
 Cell[BoxData[{
  FormBox[
   RowBox[{"Z", "=", 
    RowBox[{
     FractionBox[
      RowBox[{
       OverscriptBox["\[Beta]", "^"], "-", 
       SuperscriptBox["\[Beta]", "0"]}], 
      SubscriptBox["\[Sigma]", "\[Beta]"]], "~", 
     RowBox[{"N", "[", 
      RowBox[{"0", ",", "1"}], "]"}]}]}], 
   TraditionalForm], "\[IndentingNewLine]", 
  FormBox[
   RowBox[{"t", " ", "=", " ", 
    RowBox[{
     FractionBox[
      RowBox[{
       OverscriptBox["\[Beta]", "^"], "-", 
       SuperscriptBox["\[Beta]", "0"]}], 
      SubscriptBox["s", "\[Beta]"]], "~", 
     RowBox[{"t", "[", 
      RowBox[{"n", "-", "2"}], "]"}]}]}], TraditionalForm]}],
  FormatType->"TraditionalForm"],
 " And here ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    SuperscriptBox["\[Beta]", "0"], " "}], TraditionalForm]],
  FormatType->"TraditionalForm"],
 "is what we find on the right and side of ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    SubscriptBox["H", "0"], " ", 
    RowBox[{"(", 
     RowBox[{
      RowBox[{"in", " ", "our", " ", "example", " ", "above", " ", 
       SuperscriptBox["\[Beta]", "0"]}], "=", "0."}], ")"}]}], 
   TraditionalForm]],
  FormatType->"TraditionalForm"]
}], "Example",
 CellChangeTimes->{{3.5279484357858515`*^9, 3.527948547881367*^9}}],

Cell[CellGroupData[{

Cell[TextData[{
 "The Coefficient of Determination ",
 Cell[BoxData[
  FormBox[
   RowBox[{"(", 
    SuperscriptBox["R", "2"], ")"}], TraditionalForm]]]
}], "Subsection",
 CellChangeTimes->{{3.527948567120598*^9, 3.5279485745603*^9}, 
   3.527971430582017*^9}],

Cell["\<\
The coefficient of determination measures the fraction of the total sum of \
squares error \[OpenCurlyDoubleQuote]explained\[CloseCurlyDoubleQuote] by the \
regression model . Look at the diagram below to see what SSE, SSR and SST \
are. \
\>", "Text",
 CellChangeTimes->{{3.527948578260152*^9, 3.527948631708014*^9}, 
   3.527971432250948*^9}],

Cell[BoxData[
 GraphicsBox[{
   LineBox[{{0.07222222222222222, 0.8722222222222225}, {0.07222222222222222, 
    0.10833333333333339`}, {1.138888888888889, 0.10833333333333339`}}], 
   LineBox[{{0.08055555555555557, 0.31111111111111134`}, {1.063888888888889, 
    0.6000000000000005}}], PointBox[{0.9333333333333336, 0.7777777777777779}], 
   {Dashing[{Medium, Medium}], 
    LineBox[{{0.06944444444444445, 0.46944444444444455`}, {
     1.1972222222222224`, 0.48611111111111116`}}]}, InsetBox[
    StyleBox[Cell[TextData[Cell[BoxData[
      FormBox[
       OverscriptBox["Y", "-"], TraditionalForm]],
      FormatType->"TraditionalForm"]],
      GeneratedCell->False,
      CellAutoOverwrite->False,
      CellBaseline->Baseline,
      TextAlignment->Left],
     Background->GrayLevel[1.]], {0.03888888888888889, 0.4583333333333335}, {
    Left, Baseline},
    Alignment->{Left, Top}], 
   {Dashing[{0, Small}], 
    LineBox[{{0.9305555555555558, 0.7750000000000001}, {0.9305555555555558, 
     0.48055555555555585`}}]}, LineBox[CompressedData["
1:eJxl1EFEQ3EcB/AnIiLqMB0SJUaMiEyH/TskItKIWIcZpUPKiIiR6ZAOExER
kemQDtNhIqLTknSYDhOR99p7G/XqsNN0qO9+e/8v7/2Y5zP2/7//7//9bSi1
GV/pMAxj4f+D59xZY/as8aUO9lE19Zufb+bnXfWajVSykZpaW0W5auM+tH4f
qqmXcKYczgSNtQyDPo7Vj2J1R03hceSqUXxddtTVJcpVd7coR/WvYyFXxZvY
2FF72LYStB3NWdGco37cVgW8s42ie4rJ7mKSPscxZx21XOhMFDq/A54YR9GP
6YFSeoCWJy3r2trynrScy9b7e/bOI32gpU+27off0lda7sXW/fRb7pE+tNAw
W9+H3yPDKFvfn983aGe3rfMguanqvLy/oegttK9EdyXQmGp736BPT1D0GNqS
rbbfI+ilRRT9iWPE6F3ELUz39aLoC7xW80N7EnGy6OcnFJ3C8Yu0zAs9iOOm
6WvEIEHPTKNomS9a5omWeaJlnixtmSdL98tvmS9a5omW+aFlfmiZH1rmhX5o
zQctuacl96a25JyWHJs6H35LbmnJKX/v2euH5NRs5zRoyS0t65rK+//z/Ad4
dotH
    "]], LineBox[CompressedData["
1:eJxTTMoPSmViYGCQA2IQvSOBe1sC9zt7jugNrNEbHtr/WeL/a4n/O3uDG026
N5oe2mekgQCCf0W99pJ6LSb/iFjOQbEcBD8iFAQe2ju8nGz3cjIm/w2Isnto
v2YVCLyzb7gE0ojgrwA549cDON+m77FF32ME/8IZEEDwU0De2PYAbj46/4fn
/C+e8xH8ng4QeAB3Lzpf4XihzPFCBB8UOqzRD+Dh4QIGCD44OHQRfFBoHBRD
8BnAAMHXABl76T6cHwDy7hIEv6IcBO7D4wPGnwAKBgsEX0UJBBB8WHzC+ABC
c/TO
    "]], LineBox[CompressedData["
1:eJxllV+EVGEYxo9YYohWRhcrtZZJDFEykvm6WMsSmyViulir0sUoS5TYrNFF
khVLRGyyknQxulgRscQkSVYXKzLfnHN2z1nOpIuRjC7qfd/vvA/feRnjN3bn
/fM8z5kj8zdmr+wJgmDp/4veL16g6pvTy1FtOUrN6H6qvnlwnyp1n2cFPtRZ
GOsspGa+tD5XWi/ym5FGe6QBnpqkSs3v6dXB9GqRv7eqW61q6voU+fpGublR
Tl2fzNDsQQB+XN9dqe8mrm+Rjy1uVhY3E9c3M+/fUYFnh2szw7XE9c3MnVtU
ieubmX20xhz4+YAGT9wcmTl1ggr8icYaA19q0yDgXz+pdpTvUdst8MEmNQK/
fkUFPkvrrYC/VWhB8LWrVOC/tN4M+BHJWAO/pfVKYPuDalv5Jq3TAe+ls7bB
T59QgY/TOi3wBzpbEyy+A2e0Th28RHJVtvXe4kvwC1pnGCuLL8FfPlOBxYex
6uuz+BAsvovVHz6Lr8DyHqvf5HvAMgdY9ow9v0bqZ/FrpP73WfwbaX7Ev+Cd
Gh9E85ez3CX3N1j8HWm+fRa/R+7u4Px54fNJzkNk7rKOYNG5yB85L2DJC/4/
5/z7JT+hzuOz5CnU+SVPoe6bc34fyRdY8hXqPX2WvIElb6HqI3kDS97AE+NU
oerts+QRfI7aDHrKkk+w5BMs+QRLPsGSz57O47PkFSx57em+ohNY8go+wDr1
9J4+v2SdrPIZ1gn8lXWyqpfPl/nvrOrr8x+eA/yQ97DqD58P812s+stntl/D
qh857pNW/eozn7NqTf776jPbr2zdnYvMj4fAOl2KfJSfB12na9+c5/x3ne5F
vs157zqf9M0zzmvX/AN/r8BP
    "]], InsetBox[
    StyleBox[Cell["SSE",
      GeneratedCell->False,
      CellAutoOverwrite->False,
      CellBaseline->Baseline,
      TextAlignment->Left],
     Background->GrayLevel[1.]], {1.0000000000000002`, 0.6944444444444446}, {
    Left, Baseline},
    Alignment->{Left, Top}], InsetBox[
    StyleBox[Cell["SSR",
      GeneratedCell->False,
      CellAutoOverwrite->False,
      CellBaseline->Baseline,
      TextAlignment->Left],
     Background->GrayLevel[1.]], {1.013888888888889, 0.5194444444444448}, {
    Left, Baseline},
    Alignment->{Left, Top}], InsetBox[
    StyleBox[Cell["SST",
      GeneratedCell->False,
      CellAutoOverwrite->False,
      CellBaseline->Baseline,
      TextAlignment->Left],
     Background->GrayLevel[1.]], {0.8027777777777779, 0.6500000000000004}, {
    Left, Baseline},
    Alignment->{Left, Top}]},
  ContentSelectable->True,
  ImagePadding->{{0., 0.}, {0., 0.}},
  ImageSize->{221., 166.},
  PlotRange->{{0., 1.3333333333333335`}, {0., 1.}},
  PlotRangePadding->Automatic]], "Input",
 CellChangeTimes->{{3.5279486354778633`*^9, 3.527948711594818*^9}}],

Cell[TextData[{
 "SST",
 Cell[BoxData[{
  FormBox[
   RowBox[{
    RowBox[{"=", 
     RowBox[{
      RowBox[{"\[Sum]", 
       SuperscriptBox[
        RowBox[{"(", 
         RowBox[{
          SubscriptBox["Y", "t"], "-", 
          OverscriptBox["Y", "-"]}], ")"}], "2"]}], " ", "=", 
      RowBox[{"\[Sum]", 
       SuperscriptBox[
        RowBox[{"(", 
         RowBox[{
          SubscriptBox["Y", "t"], "-", 
          SubscriptBox[
           OverscriptBox["Y", "^"], "t"], "+", 
          SubscriptBox[
           OverscriptBox["Y", "^"], "t"], "-", 
          OverscriptBox["Y", "-"]}], ")"}], "2"]}]}]}], "  "}], 
   TraditionalForm], "\[IndentingNewLine]", 
  FormBox[
   RowBox[{"=", " ", 
    RowBox[{
     RowBox[{"\[Sum]", 
      SuperscriptBox[
       RowBox[{"(", 
        RowBox[{
         SubscriptBox["Y", "t"], "-", 
         OverscriptBox["Y", "-"]}], ")"}], "2"]}], " ", "+", " ", 
     RowBox[{"\[Sum]", 
      SuperscriptBox[
       RowBox[{"(", 
        RowBox[{
         OverscriptBox["Y", "^"], "-", 
         OverscriptBox["Y", "-"]}], ")"}], "2"]}], "+", " ", 
     RowBox[{"0", " ", 
      RowBox[{"(", 
       RowBox[{
        RowBox[{
        "if", " ", "OLS", " ", "use", " ", "used", " ", "cross", " ", 
         "terms"}], "=", "0"}], ")"}]}]}]}], 
   TraditionalForm], "\[IndentingNewLine]", 
  FormBox[
   RowBox[{"=", " ", 
    RowBox[{
     RowBox[{
      RowBox[{"\[Sum]", 
       SubscriptBox[
        SuperscriptBox["e", "2"], "t"]}], "+", 
      RowBox[{"\[Sum]", 
       SuperscriptBox[
        RowBox[{"(", 
         RowBox[{
          OverscriptBox["Y", "^"], "-", 
          OverscriptBox["Y", "-"]}], ")"}], "2"]}]}], " ", "=", " ", 
     RowBox[{"SSE", " ", "+", " ", "SSR"}]}]}], TraditionalForm]}],
  FormatType->"TraditionalForm"]
}], "Text",
 CellChangeTimes->{{3.527948743353548*^9, 3.527948743723533*^9}, {
  3.5279488047710915`*^9, 3.5279489403756666`*^9}, {3.5279490028031693`*^9, 
  3.5279490401616755`*^9}}],

Cell[TextData[Cell[BoxData[
 FormBox[
  RowBox[{
   SuperscriptBox["R", "2"], " ", "=", " ", 
   RowBox[{
    FractionBox["SSR", "SSE"], " ", "=", " ", 
    RowBox[{"1", "-", 
     FractionBox["SSE", "SST"]}]}]}], TraditionalForm]],
 FormatType->"TraditionalForm"]], "Text",
 CellChangeTimes->{{3.527949075520261*^9, 3.527949095969443*^9}}],

Cell[TextData[{
 "We should note that increasing the number of parameters (n) will not change \
the SST, but it will decrease the SSE as long as the coefficient for that \
parameter is not zero. This will result in ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    SuperscriptBox["R", "2"], " "}], TraditionalForm]]],
 "always going up or staying the same if you add an additional parameter. "
}], "Text",
 CellChangeTimes->{{3.527949117258591*^9, 3.5279491931555552`*^9}, {
  3.5279493731183567`*^9, 3.5279493772281923`*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell["ANOVA", "Subsection",
 CellChangeTimes->{{3.527949225974242*^9, 3.527949227114197*^9}}],

Cell["\<\
In the following table K= number of \[Beta]\[CloseCurlyQuote]s (including \
intercept!), n is the number of observations\
\>", "Text",
 CellChangeTimes->{{3.527949329300109*^9, 3.5279493815480194`*^9}}],

Cell[TextData[Cell[BoxData[
 FormBox[GridBox[{
    {
     RowBox[{"Source", " ", "of", " ", "Variation"}], "SS_", 
     RowBox[{"d", ".", "f", "."}], "MSE"},
    {
     RowBox[{"Model", "\[IndentingNewLine]", "Error"}], 
     RowBox[{"SSR", "\[IndentingNewLine]", "SSE"}], 
     RowBox[{
      RowBox[{"K", "-", "1"}], "\[IndentingNewLine]", 
      RowBox[{"n", "-", "K"}]}], 
     RowBox[{
      RowBox[{"SSR", "/", 
       RowBox[{"(", 
        RowBox[{"K", "-", "1"}], ")"}]}], "\[IndentingNewLine]", 
      RowBox[{"SSE", "/", 
       RowBox[{"(", 
        RowBox[{"n", "-", "K"}], ")"}]}]}]},
    {"Total", "SST", 
     RowBox[{"n", "-", "1"}], 
     RowBox[{
      RowBox[{"SST", "/", "n"}], "-", "1"}]}
   }], TraditionalForm]],
 FormatType->"TraditionalForm"]], "Text",
 CellChangeTimes->{{3.52794924853334*^9, 3.527949323720332*^9}}],

Cell["\<\
From the ANOVA table we can take the ratio between (2,4) and (3,4) and \
produce an f statistic. The hypothesis that corresponds to that statistic is \
that all slope \[Beta]\[CloseCurlyQuote]s =0. \
\>", "Text",
 CellChangeTimes->{{3.5279494033871455`*^9, 3.5279494663646264`*^9}}],

Cell[TextData[Cell[BoxData[
 FormBox[
  RowBox[{
   RowBox[{
    RowBox[{
     RowBox[{
      FractionBox[
       RowBox[{"SSR", "/", 
        RowBox[{"(", 
         RowBox[{"K", "-", "1"}], ")"}]}], 
       RowBox[{"SSE", "/", 
        RowBox[{"(", 
         RowBox[{"n", "-", "K"}], ")"}]}]], 
      RowBox[{"`F", "[", 
       RowBox[{
        RowBox[{"K", "-", "1"}], ",", 
        RowBox[{"n", "-", "K"}]}], "]"}]}], " ", "..."}], " ", 
    RowBox[{
     SubscriptBox["H", "0"], ":", " ", 
     SubscriptBox["\[Beta]", "2"]}]}], "=", " ", 
   RowBox[{"...", "=", " ", 
    RowBox[{
     SubscriptBox["\[Beta]", "k"], "=", " ", "0"}]}]}], TraditionalForm]],
 FormatType->"TraditionalForm"]], "Example",
 CellChangeTimes->{{3.5279494788141284`*^9, 3.527949535921844*^9}}]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Prediction/Forecasting", "Section",
 CellChangeTimes->{{3.527594563416649*^9, 3.527594569138548*^9}}],

Cell[TextData[{
 "We have just discovered that Y~N[",
 Cell[BoxData[
  RowBox[{
   SubscriptBox["\[Beta]", "1"], "+", 
   RowBox[{
    SubscriptBox["\[Beta]", "2"], 
    SubscriptBox["X", "t"]}]}]]],
 ", ",
 Cell[BoxData[
  FormBox[
   SubscriptBox[
    SuperscriptBox["\[Sigma]", "2"], 
    OverscriptBox["Y", "^"]], TraditionalForm]],
  FormatType->"TraditionalForm"],
 "]  (note we can estimate  ",
 Cell[BoxData[
  FormBox[
   SubscriptBox[
    SuperscriptBox["\[Sigma]", "2"], 
    OverscriptBox["Y", "^"]], TraditionalForm]],
  FormatType->"TraditionalForm"],
 " by ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    SubscriptBox[
     SuperscriptBox["s", "2"], 
     RowBox[{
      OverscriptBox["Y", "^"], " "}]], " ", "=", 
    RowBox[{
     FractionBox[
      SuperscriptBox["s", "2"], "n"], " ", "+", 
     RowBox[{
      SuperscriptBox[
       RowBox[{"(", 
        RowBox[{
         SubscriptBox["X", "t"], "-", 
         OverscriptBox["X", "-"]}], ")"}], "2"], 
      SubscriptBox[
       SuperscriptBox["s", "2"], 
       SubscriptBox[
        OverscriptBox["\[Beta]", "^"], "2"]]}]}]}], TraditionalForm]],
  FormatType->"TraditionalForm"],
 ")"
}], "Text",
 CellChangeTimes->{{3.5279496349378834`*^9, 3.527949791611616*^9}}],

Cell[TextData[{
 "Knowing this we can then create confidence intervals for acceptable values \
of our estimate of Y, ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    OverscriptBox["Y", "^"], ",", " ", "by", " "}], TraditionalForm]],
  FormatType->"TraditionalForm"],
 " saying that ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{
     OverscriptBox["Y", "^"], " ", "\[PlusMinus]", 
     RowBox[{
      SubscriptBox["t", "c"], 
      SubscriptBox["s", "y"]}]}], ",", " ", 
    RowBox[{
     SubscriptBox["t", "c"], "=", 
     RowBox[{
      SubscriptBox["t", 
       RowBox[{"\[Alpha]", "/", "2", " "}]], "(", 
      RowBox[{"n", "-", "2"}], ")"}]}]}], TraditionalForm]],
  FormatType->"TraditionalForm"]
}], "Text",
 CellChangeTimes->{{3.5279499655446587`*^9, 3.5279499701344748`*^9}}],

Cell[TextData[{
 "With forecasting we are more concerned with finding the confidence \
intervals for the actual value of ",
 Cell[BoxData[
  FormBox[
   SubscriptBox["Y", "t"], TraditionalForm]]],
 " instead of the expected value of ",
 Cell[BoxData[
  FormBox[
   SubscriptBox["Y", "t"], TraditionalForm]]],
 "as shown above. To to this we need to talk about the Forecast Error (FE)"
}], "Text",
 CellChangeTimes->{{3.527949973574337*^9, 3.5279499964934206`*^9}, {
  3.527952944815483*^9, 3.527952946735406*^9}, {3.527953011812803*^9, 
  3.5279530655106544`*^9}, {3.5279714346594057`*^9, 3.5279714372177672`*^9}}],

Cell[TextData[Cell[BoxData[{
 FormBox[
  RowBox[{"FE", "=", 
   RowBox[{
    SubscriptBox["Y", "t"], "-", 
    SubscriptBox[
     OverscriptBox["Y", "^"], "t"]}]}], 
  TraditionalForm], "\[IndentingNewLine]", 
 FormBox[
  RowBox[{
   RowBox[{"E", "(", "FE", ")"}], " ", "=", " ", "0"}], 
  TraditionalForm], "\[IndentingNewLine]", 
 FormBox[
  RowBox[{
   SuperscriptBox[
    SubscriptBox["\[Sigma]", "FE"], "2"], " ", "=", " ", 
   RowBox[{
    RowBox[{"Var", "(", 
     RowBox[{"FE", "|", "Y"}], ")"}], " ", "=", " ", 
    RowBox[{
     SuperscriptBox["\[Sigma]", "2"], "+", 
     SuperscriptBox[
      SubscriptBox["\[Sigma]", "y"], "2"]}]}]}], 
  TraditionalForm], "\[IndentingNewLine]", 
 FormBox[
  RowBox[{
   SubscriptBox[
    SuperscriptBox["s", "2"], 
    RowBox[{"FE", " "}]], "=", " ", 
   RowBox[{
    SubscriptBox[
     SuperscriptBox["s", "2"], 
     OverscriptBox["Y", "^"]], "+", 
    SuperscriptBox["s", "2"]}]}], TraditionalForm]}],
 FormatType->"TraditionalForm"]], "Text",
 CellChangeTimes->{{3.527953065780644*^9, 3.5279531742663045`*^9}}],

Cell[TextData[{
 "To find the confidence intervals for the Actual ",
 Cell[BoxData[
  FormBox[
   SubscriptBox["Y", "t"], TraditionalForm]],
  FormatType->"TraditionalForm"],
 " we do this"
}], "Text",
 CellChangeTimes->{{3.527953185075872*^9, 3.5279531977653646`*^9}}],

Cell[TextData[Cell[BoxData[
 FormBox[
  RowBox[{
   SubscriptBox["Y", "t"], "\[PlusMinus]", 
   RowBox[{"t", "*", 
    SubscriptBox["s", "FE"]}]}], TraditionalForm]],
 FormatType->"TraditionalForm"]], "Text",
 CellChangeTimes->{{3.527953201055233*^9, 3.5279532181845474`*^9}}],

Cell["", "Text"],

Cell["", "Text"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Functional Forms", "Section",
 CellChangeTimes->{{3.527594571464429*^9, 3.527594576336076*^9}}],

Cell[CellGroupData[{

Cell["Transformable Models", "Subsection",
 CellChangeTimes->{3.5279532735323334`*^9}],

Cell[CellGroupData[{

Cell["Log-Log or Double Log Model", "Subsubsection",
 CellChangeTimes->{{3.52795327787216*^9, 3.5279532875317736`*^9}}],

Cell[BoxData[
 GraphicsBox[{
   LineBox[{{0.08333333333333334, 0.8500000000000001}, {0.08333333333333334, 
    0.10000000000000009`}, {1.0694444444444446`, 0.10277777777777786`}}], 
   LineBox[{{0.08611111111111111, 0.37222222222222223`}, {1.0805555555555557`,
     0.37777777777777777`}}], 
   LineBox[{{0.08888888888888888, 0.10833333333333339`}, {0.9416666666666668, 
    0.7333333333333334}}], LineBox[CompressedData["
1:eJxll0tonFUUx8dCtRCV6CK4qDJWoSJEA4oMFXq6qJKqYCyogaqMBbULH0kV
fEBliC6CixrwQRQhQawUdTG6iNU+nD6TtE3yzSSpk3nENGkHqyIVooTqwtz/
+d97YO5lyscvzcx85/wffLl15yvbn1uTSqUurf5z17YXj66+RiSbX7sjv/ag
fPqJOz8EvvLFo6uvHwM/w6vnIwdxAt8y2rt+tPdQ4LdLG/eUNh4OPF93x3jz
pQ9WX0ciLvBzP1/eNrS87afAV6XcKQT+1r1th/GzLSPZlhHjG3COBj6uAwd+
db27YePbNrhzLPC0u/09Mac55zvt5b72svE9OMcDX8zsXcrsNf4IAxo/sNWd
E4H/duMOGe9z678Sc457ffJxd04GvsatI39SFrjn77NuIacCv/C8O8bjvVhA
xFuow5uvu2M81+cGHot4mDrd78ZdGpMUdfrd/drm8cAPu/GWjf+Fv05Lnjp+
/ZU7pyVLHZ/Gf5wJfJ27ZM9IK3U9DFmMX3Lqtp2VAnW+GXuLuYe6T53FkTR1
v9vJ2TchCXV+342TmZQcdfbcQZ3/+tOdSVmgzo8hMFMyQJ09b6HOOncSGF/X
HvNl+uC9fndiHqYPNmHfiXTRB55T9MFv2H8x8DHsoSh5+mI39lCULH3xEPQp
SivWdUpux15KUqAv/oNexjPYU0nSuIzKu9hTSRL64inoNy053LdxB31yLfQ0
voA9TsswemhcDkFf4w+xV+OXofeMdNFXnlP71FcPYq/G2k8zkqfP/sFeY87S
d5OwR8yt9OGX0MFY+2424gJ96rmHPn0Cus0y38YJfdkBQ8SseZ+QddB1lj+f
YI5j1uuEHIDu5yIeoK/1eo75Nr5Mn++CT2LW/E/xfTF3MQc3wVcxB9/jc43H
4LOfI9a+SPg9Mff7nJC1PxJ5C30Wc4a52Y77iln7pSh3wucx/8qcrUG+yxEX
mLsK5jD+DvddlkH42biHudS8x9zJnHpOM6c7MZex9kHMK8zxjZhjLuKEuf4D
c8zJfuSjJCdw3zHnmPvPMEfM3cz9a5gjZu3TaXkEcxlr/1RkHXvC8wJ7wvMB
9oT2U8wD7A3tq5h3sTe+wVwV6WRvaJ9VmE/jFfaE54S9oP1WjXg/e8Jzjj3g
uZu5vw9zG1+Puash9559rhvYQzXk2LPPrWefU31eq4Zcfow9VEPuPPucaZ/W
5A3mRPu0JnfQ955T9Ln2a415LLNPY+6nb7VPa8zTHPu0xvwYD3pfYW915sG4
k77xnKYvdI91+rnCPdbpX+Nu6qB9Wqf//J7r9J9xgXv0PMi9qQ7z9E8t8Arn
9pxwbtVpnv4w9nOobvPhPj37+/TsP9ez6musPWus+v4SWHvSWPU1xtvbFgJj
vK3GkKPXGB83ZKx9aqx6nw+sehtrPxqr/sa69/NN8y8G1j0a63WxaT+LTfsx
1lwuBb4XfjDW5xZjfW4x1ucWY83Hhab9GWuPG2uPG2tvG2tPXwysz3nGd8Ev
xlfDL8b6d5gxxmlpBEZ8Nhjj6zONpn0aa482mvZrrL3aaNq3sfZoQ/4HS3gt
fg==
    "]], LineBox[CompressedData["
1:eJxll1toXGUUhceCWPBCq1B9qBIvUBWCgVYJCtl9ULEqGAtqwQuhoPahaqKC
F6iE6EP1oRSq4g0apUoRH6IPNtqmTi5N0jRNJjMTMzNp09xam0Y0QpRSfTD/
Xuv8C878TDj9yMmZs9de+9Kbt7+y9flVmUzmz5WfcP2x6crwsZqBlvUDLUfs
7TfCOWSbF/Y1LOw7Grl9ecv+5S2/WKWtttRW2xn53j1z9XvmOq3j8qdXPtnI
eGzWPvs0nJ+qeM3acLrt0oHHVj4/W3bdzu6Vjz3nDzpszevDC3Xb0cN+rOaW
cHoi5zbsym/Y1WM38b3T3Bpes9Rj7+TDL7oiT50Op8vqNobTG3m6Prx4r33F
uPY2BAF67bJMOFnbfH84ffY941wKt+0Xt4cwLvXZWsbV+EQ4xyJnwm0dx+w1
xtXhgvRHbnohnH67lXEmXGBc2Ra/0d5lHM2eF3FNuC0/YBsZV8JnGVfO8zYY
uXV3OOI6z9ugfcS4E36AcS8FOzQct78Zd7vnUdwYLsvH7WvqkOaM/2PInqIu
CV9BXTq+DWfIDlGXJvfBichr3Kgn7EXqkvD1bpt+y7otxM3hsm7Y3qJOaYbf
h+0O6pQb9mNl6tTqvjlp71OnuiBzm3jafXPS7qNOad4bLvUjtkjdEv6cuqG+
RuwR6rT0Rzhi1Neo/XsAOqW50Qtn1J6lTm7TTC6yv25tzrqoC+ozZy9RBw9j
d85upA6oz5yNUge3xZwY9Tpmd1GHNKN+x+wMdUjzJx73mBnjTjPqfcz+og4P
uQ5j9iXjTvhxxo1+kI9xX3RdxOgHefuBcaf5oPstbx9Qh4S3Uwf0izz7Wc62
uYAFu5Zxo38U7ILnt5pXuz8L1kMd0F8K9irjTPhhxpXwbYwrzZ2ex4IVGUea
0a8K9h3jSPg9xrHD8160ZxhHwpv43qiHol3F9054nu+R8BF+70WvezHqp2gf
8nsTfpnfc9D7QNEe9H5SZH2N2z98TsLf8L5t3ifEqL9x9vPxKl7tfWTcnuTf
JZzcl3D6irodt04vgF+rrqjbak6uO7wfiVHX4hu8H+k+1Ll40Pv6RGTUuRjz
dyI+d6v7X3ynp1+8yv1fiox5LYb/xfC/GP4Xw/9i+L8cuc/9XY5xfuF1LX7d
/S5+1P0uhr8rkf/zOhbD32L4Wwx/V6Ku8Pdk5Hvc35NR52vc3+Jz7m/xx+5f
Mfx7KjL2CzH8Kx5x35+KeYR/xfD56cjwuRh+FcOnYvhVDF9O2Zv0CXwnRp7E
0E0MnaY4TyZsyOM4U8W302fYj8Twoxj70jT7cInztJpL9CX2CzH0FcOfYvhz
mvOsRL2nOc9K1FsMv85wvpXYn2c430rsF+Je97MY81qMfUWM/W3Gzvtzy5zf
Yuwvs5yHZe53Yvh9lvOwzLqf5TxM6kwM/4uRz1nOxzL9P8f5WKEvxej34qu9
HuY4PyvcB8WYt2LsS2LsE/ORkV8x+r0Y+Z3nPK6wfsTIpxj5FCOfZyNjnxRj
HxEjX2LsI2Lk51xk5EOM/iOG/mLUj/hu1/e3yNg3xdBPjP5ynvtHhX4XQw/x
dR7/QmTEL4ZfxfCnGP1XjH5xITLiFcNfYvRbMfy2yH0p8ZsYfUqM/ivGfBOj
H4vRX8T4/58Y82+R+9kk+7cY8/D3yP8DgQ2Ovw==
    "]], InsetBox[
    StyleBox[Cell["\[Beta]>1",
      GeneratedCell->False,
      CellAutoOverwrite->False,
      CellBaseline->Baseline,
      TextAlignment->Left],
     Background->GrayLevel[1.]], {0.44444444444444453`, 0.7805555555555557}, {
    Left, Baseline},
    Alignment->{Left, Top}], InsetBox[
    StyleBox[Cell["\[Beta]=0",
      GeneratedCell->False,
      CellAutoOverwrite->False,
      CellBaseline->Baseline,
      TextAlignment->Left],
     Background->GrayLevel[
      1.]], {1.1138888888888892`, 0.37777777777777777`}, {Left, Baseline},
    Alignment->{Left, Top}], InsetBox[
    StyleBox[Cell["\[Beta]=1",
      GeneratedCell->False,
      CellAutoOverwrite->False,
      CellBaseline->Baseline,
      TextAlignment->Left],
     Background->GrayLevel[1.]], {0.9750000000000003, 0.7472222222222222}, {
    Left, Baseline},
    Alignment->{Left, Top}], InsetBox[
    StyleBox[Cell["0<\[Beta]<1",
      GeneratedCell->False,
      CellAutoOverwrite->False,
      CellBaseline->Baseline,
      TextAlignment->Left],
     Background->GrayLevel[1.]], {0.9138888888888892, 0.4277777777777776}, {
    Left, Baseline},
    Alignment->{Left, Top}], InsetBox[
    StyleBox[Cell["\[Beta]<0",
      GeneratedCell->False,
      CellAutoOverwrite->False,
      CellBaseline->Baseline,
      TextAlignment->Left],
     Background->GrayLevel[1.]], {0.0777777777777778, 0.8583333333333334}, {
    Left, Baseline},
    Alignment->{Left, Top}]},
  ContentSelectable->True,
  ImagePadding->{{0., 0.}, {0., 0.}},
  ImageSize->{218., 164.},
  PlotRange->{{0., 1.3333333333333335`}, {0., 1.}},
  PlotRangePadding->Automatic]], "Input",
 CellChangeTimes->{{3.527953487093791*^9, 3.5279535626507683`*^9}}],

Cell[TextData[Cell[BoxData[{
 FormBox[
  RowBox[{
   SubscriptBox["Y", "t"], "=", 
   RowBox[{
    SuperscriptBox[
     SubscriptBox["AX", "t"], "\[Beta]"], 
    SubscriptBox["\[Epsilon]", "t"]}]}], 
  TraditionalForm], "\[IndentingNewLine]", 
 FormBox[
  RowBox[{
   FractionBox["dY", "dX"], "=", 
   SuperscriptBox["A\[Beta]x", 
    RowBox[{"\[Beta]", "-", "1"}]]}], TraditionalForm], "\[IndentingNewLine]", 
 FormBox[
  RowBox[{
   SubscriptBox["\[Eta]", 
    RowBox[{"Y", ",", "X"}]], " ", "=", " ", 
   RowBox[{
    RowBox[{
     FractionBox["dy", "dx"], "*", 
     FractionBox["x", "y"]}], " ", "=", " ", "\[Beta]"}]}], TraditionalForm]}],
 FormatType->"TraditionalForm"]], "Text",
 CellChangeTimes->{{3.5279533048110824`*^9, 3.5279533905676517`*^9}}],

Cell[TextData[{
 "You can estimate this with OLS by estimating the model: ln(y) = Ln(a) + \
\[Beta]ln(x) + ln(\[Epsilon]t) (",
 StyleBox["reg ly lx)",
  FontSlant->"Italic"]
}], "Text",
 CellChangeTimes->{{3.5279533910976305`*^9, 3.527953420596451*^9}, {
  3.5279536151986666`*^9, 3.527953629678087*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell["Semi-Log Models", "Subsubsection",
 CellChangeTimes->{{3.527953425766244*^9, 3.5279534299560766`*^9}}],

Cell[BoxData[
 GraphicsBox[{
   LineBox[{{0.09444444444444447, 0.913888888888889}, {0.09722222222222224, 
    0.061111111111110894`}, {1.1500000000000001`, 0.058333333333333126`}}], 
   LineBox[{{0.10277777777777777`, 0.43055555555555536`}, {1.102777777777778, 
    0.4333333333333331}}], LineBox[CompressedData["
1:eJxFlEtIVGEUxydBCnpQLaTFEPQAW2QFtRgKPC0ssAJLeoEFEvRY9MAKKkgL
aSEtJLCiaGGFWEQLayFBRaaWRmZmVjM549y5j5m5dxEtJEJa5Dnff853UO78
lPnu//z/53wrjpypP1oWi8VOz/7yc/lQU3yo6RX9re2cru1M08Np/vBGeU6M
q0/5WXlDT3mD5YGKk29nf5RXreTqV94oNaC8rYZrUHkuH9fzTvn4Ma73NDbC
laZLF7iGlFOtVcnWqmHlLe1eot2zvJOPmf6gfJiPL/+ovLC3cX5vo+VTrL5i
RPnKeGXzeOUn5fVJfqFlCjuqw45R5Qfi12flPTNddTNdluXrVWPK19u4LG8W
/ZYjPr76i3K/+Gv5bJwDs7xa/B5XnmD5zZafPuGyfEj8+KrsJ1iA5Zv8+tDy
dslrQnlUnpb37+P6puxkuCyfkDy/Ky+TcbF8X/z7oVwv/lkuk/lL0uM6/kea
nsv8Jemq5JSBf5aXLuFKKQ+Kfyk6KDoztEvmI0UbJJgM/ePX1f1UNv5M0jyZ
ywwtknmxfFv8mUSfGTL7k6YbLCMxRd3QWeLS97bK3Ezp30ts/LBPs39Z+v2L
awr758CnLObfoYuyF1m836E1EnsW+TgUw/eMHofk+AqHWsSXHEmsNQ721/K9
u1w5iuPcc/IhRzK2bQ5lpW3LZt9dEnmdDvx0aQQ6TP4uyZh5Dvp0abHklKNr
3E7SpcvQZfz3aK/klcN+edQHneY+8Git5JXDvnl0B7pvST4enYdu45dPLzjG
+S7mx8feuPRHdPuq28yTjz1yMU8B9siFXwHyceFPQJvknvNwbh575eGcPPLx
0G8e94KP/grw26fXL7kKqsPMfxH3QoB9LNI6OSBA/kXcCwHyL9IOmfOAHkn+
RZLjEnncb6HqOiA+h+gvj/xD1Wnu55CG+TXxAvIPaYHsRQG+Rui3gP4j2i25
FOBrhHksYh4i9F+Ejkj7MHsR4Z60XOrL6Izgj+Vu9FniFvT5HzcnuSE=
    "]], 
   LineBox[CompressedData["
1:eJxllEloVXcYxZ+CKEghcZF2IZKqEBUKgVIJCp4sqigujIJW0EIqVF04RQXr
QgjqQhE0EATFhQMqol1EF5o2Jr5BM5nhTRk18UUTjQMSIYoEF+Z//ufeb/E+
brj5Pe69/2845/t5x/5Nf8+MRCJnpv/cfXjIRSO+Xt8wdX3DIAK+cNHFQMjj
tave1q4yLih0YVx29tX01R9y5dz705fxKUY/3Ffe1jahbta26cu4//gv7sK1
yXWXJ9c9yuMIw3jJsXTJsXRfyBVTroA+zOBz0Tz+54gL4yt8rw93mYfxX8w7
n1ur5rdUzTee+OiiN+Sf9sSK9sR6wbYUxvK4nHUa797poheJIj6IGte+MuN6
NrAXh9yxLTHk2MeekOe4tOt6sGihizi2bnbRg0yJa0wct9w4p7I4wTbGkexw
YfzVlXc5i18ZCaz93UUWYxxkArtdFkXGNRxUBud5T6C+wUUGq/neY+T4nPEc
15bKDD7znHwu5bnGWymIDG4w78eoZp5p/MG6noQ8m3U/wa3bLoyTrDuNB+xb
s/Scxi72uRnF7FMaP7K9zVjrjp1MoY1zbcEB3lI4Sp20SP8pLOVnjQeoy1b5
IYXT1LXxSvqgVf5I4T1/b5M/krjE77TJH0msZx5t8kMSd1hXe8h/8p+n0n8S
P7CPxns5pw7ptRvdnHOH9NmFF9RNp/TVhXO65/T7Jz0X8Eb6phvVruySzvCc
pL57T3kd0Lk7VEeUeniKFaqzQHm+U18qVcdB9blOdS7WXCIcfDu+aW4V6stJ
zX1CfdwunZSqz6PSXVJzeShdFmtu+6TjgBe446uyiGruN+WTAulii3xUKd0E
PquTrgKfVkiXgc8DDvbGhHS9THuqXL64p71XIx990F7NyWeHmdaA/JFQPwal
/ziW8/dn0nscTaz3mfQbwxee+xxR7RE/x6GQS7lYh6TPYM8Mh+z30rD0GUU7
+/RCeoxiE/Vh7P2QU92P1F9jr4ec9l8T5vGcEemtUf0eUZ6N8oex1+8Iivnd
h9LvS+mtQfka/0tdvZTeGuQD46vM65X09r/2m7H3u7GvbxRXmNd/qm8U5Xyt
Hl20xShyfK5e9Y2F7PfXGKq5Vx6oPmNfn7H3w+uQfX3GWc7d2Ndr7P3xJuTf
qBdjvz+Mff3G3v/Gvh/Gfv8bz+R+GA/Z+814kH0wXkMfGHs/GPv+5nPQz+8u
rk6b
    "]], InsetBox[
    StyleBox[Cell["\[Beta]>1",
      GeneratedCell->False,
      CellAutoOverwrite->False,
      CellBaseline->Baseline,
      TextAlignment->Left],
     Background->GrayLevel[1.]], {0.8611111111111114, 0.7416666666666667}, {
    Left, Baseline},
    Alignment->{Left, Top}], InsetBox[
    StyleBox[Cell["\[Beta]<1",
      GeneratedCell->False,
      CellAutoOverwrite->False,
      CellBaseline->Baseline,
      TextAlignment->Left],
     Background->GrayLevel[1.]], {0.8166666666666669, 0.11111111111111116`}, {
    Left, Baseline},
    Alignment->{Left, Top}], InsetBox[
    StyleBox[Cell["\[Beta]=1",
      GeneratedCell->False,
      CellAutoOverwrite->False,
      CellBaseline->Baseline,
      TextAlignment->Left],
     Background->GrayLevel[
      1.]], {1.1527777777777781`, 0.43611111111111134`}, {Left, Baseline},
    Alignment->{Left, Top}]},
  ContentSelectable->True,
  ImagePadding->{{0., 0.}, {0., 0.}},
  ImageSize->{234., 175.},
  PlotRange->{{0., 1.3333333333333335`}, {0., 1.}},
  PlotRangePadding->Automatic]], "Input",
 CellChangeTimes->{{3.5279535730703516`*^9, 3.5279536024391766`*^9}}],

Cell[TextData[Cell[BoxData[{
 FormBox[
  RowBox[{
   SubscriptBox["Y", "t"], " ", "=", " ", 
   RowBox[{
    SuperscriptBox["A\[Beta]", 
     SubscriptBox["x", "t"]], 
    SubscriptBox["\[Epsilon]", "t"]}]}], 
  TraditionalForm], "\[IndentingNewLine]", 
 FormBox[
  RowBox[{
   FractionBox["dy", "dx"], " ", "=", " ", 
   RowBox[{
    SubscriptBox["Y", "t"], 
    RowBox[{"ln", "(", "\[Beta]", ")"}]}]}], 
  TraditionalForm], "\[IndentingNewLine]", 
 FormBox[
  RowBox[{
   SubscriptBox["\[Eta]", 
    RowBox[{"y", ",", "x"}]], " ", "=", " ", 
   RowBox[{"X", "*", 
    RowBox[{"ln", "(", "\[Beta]", ")"}]}]}], TraditionalForm]}],
 FormatType->"TraditionalForm"]], "Text",
 CellChangeTimes->{{3.5279534324259777`*^9, 3.527953474714286*^9}, {
  3.527953632557972*^9, 3.527953632557972*^9}}],

Cell[TextData[{
 "You can estimate this model by ln(y) = ln(A) + ln(\[Beta])*x+ln(\[Epsilon]) \
(",
 StyleBox["reg ly x)",
  FontSlant->"Italic"]
}], "Text",
 CellChangeTimes->{{3.527953633037953*^9, 3.5279536717864027`*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell["Reciprocal Transformations", "Subsubsection",
 CellChangeTimes->{{3.52795368409591*^9, 3.5279536961754274`*^9}, 
   3.527971448840324*^9}],

Cell[BoxData[
 GraphicsBox[{
   LineBox[{{0.08888888888888888, 0.875}, {0.0916666666666667, 
    0.09444444444444455}, {1.216666666666667, 0.08333333333333348}}], 
   LineBox[{{0.09444444444444447, 0.4916666666666667}, {1.1833333333333336`, 
    0.48888888888888893`}}], LineBox[CompressedData["
1:eJxl111o1mUYBvAxsIIS+oDVwRAKYRXZgiJGQXcHdbASllIZWBBCHwdaLIU+
yALroDqYgQnVAjNWQXUgHeigjNzUbTZdzrW2lXv3vv/3fTfdlALrwCTac1/X
/VzE+zB5+ck+/s9z3ffzPP8bN724/pnmpqamf5f/pc9TbdvH27YP2A2bD7Vs
PnTWws8/m4Z8qa/rYl+X/H7R0VN0yDf5kPc/feXyl/zQngudey6cyZ49nYb8
UutQd+uQfNnGfSs27pM//igN+fapHWumdsgDLWkC8uOPpSGf3XXfmeWv7Guv
SUP+Ik3v4kL2PT1pgvKmNJ398t+daULye++kIa9K0+mWv12RJiQ/4EP26axZ
sLfSx9SANfmQP/DHn8/+/rs05EfS4/fJ1RRPj/zKy2nM250+Bu0qD0i+yz/n
reY/1+jhNJ1W+ckUzwr5j/Np1LPf9r9bt93+3IOsr7o96PM+bN98lYZ8f/q2
XXX7y9e10RO+TnX73HNqtE+/q24bPPcj5vF11O1yr6MjrE8Z9Vm3A/55lPVZ
s+e87o+yPmt2vT93o1GvNRvxdRnKftXXeYj1W7Nb0mOOD7F+azbtOQ9nv+t1
M8x6rtm9/uDDrOeaLXrdjrCeZdRzzXr998gP+zxG7I30Z9tk1HvN/vF1Opb9
tedwjPVftac8159Y//KJ0TSqttIXrtHoj6od9LqUt6Tlahllv1RtzH9ulP0i
+/J1V+1Nf+7j2e2+LnLJczjO/qnaTs/5RLZ53ch/el02Gv1Wtb1peTrHstd5
IY2Zx9xSZR/+nI0+bjS+r8p5yVhHGet+Mhs5n2R/F6wLGXUpr/Y6Hrebva4K
9oGMvpPRp6eysS80GvtJwb8jv+DznMjGvjbB/aZgrjLqQkYd/pKNOpbv8IWX
5zxfud/7czIb546MfWKS8yi4z8jYlya53xXcx37N/tTzl9f775WbPaep7Bmv
Exl5y8i70fg7hS15n05zfy3sE89b3uaFLq/1/GWcwzOcR8F9VEb+M8y9sLv9
537Lrvu6yD94rjLy/p3rVsnG760wfxn5y9hH5Cc879PZyFtG3jLynmWOFeYt
I+9ZzrvC/5fx3PJnvu6lbORb4u+p2K3eByX2UYX71Vw29msZ59Uc70exHjLq
Qcb6yOgPGfUhY/1k7OvlbPRPmXVQsUHfP2ScB/JWrycZ50GZ61rh+VfJ3snP
cPxcONYhHOsYjpywT1VyruGoq3DUbXgv+6Sfz7WSfRTG+Sqv+98+UeH5I+/m
vhnewn07PM19fy3XBfu5vIrnTjjOsXCcc+E4F8NxrobjXEbdl3lfkdt5D9jG
3Hp5Twhv5T0jXOK9JHyA95or/P5R5rrKl3hP+pB1EveocNy7wnFvC8c9Lxz3
wPAI74lh5Dlvt/m8ysxPrvGe+iPr+CDvteFm3oPD2I/kGd6bH2VfxD07HPfy
cNzbw3GvD8e9P/wl3wvC1/G9IbzI94rwBr53LLBvB/leEm7ne0u4l+81r3td
RL5yie9J4X6+V4VX870rHO9l4XhvCyNvGXnL6FcZ+S5mo19lnGvya56vjPNG
xnkjY/+VkfdSNvKVka+MfGXkKSPPJbvacyvz/nUuG/0oH/a8ZJxXMvronPVx
n0bfysjjfDbykJGHjH1dRh4yzi0Z/SgjLxn9Kf8H0TQT4w==
    "]], 
   LineBox[CompressedData["
1:eJxllktonVUUha9CsVAVdVAdtBIfEBWCgVoJFro6UGlUSCmohShcCmoHahMV
FKEaooPqoBai4gtaoUpRB8FBLPggrzaPJunNfT9smzbpI02tV6hSqgN79tr/
WXBzuOHy/eS//1lrr73Pf9f2nVtfuD6VSg1e+wvft9oawuDql4euffD6mrHu
NWNDaF0X1kjkubY98217xJseDWsU99wd1jD2d1w90HF1FLnmXdnmXcs51dm/
orP/MN5rKfe2lIeRfjGsI1jnz2nkwW57EM74cxu5682wxE3hMdkxfLJxsW/j
4ggyveFB43jM99mzOyxxa7htfhx/t++73L5vFPW+cOMEvvF9bwmXL0/g2afD
Ooz+78KajJwOclYcxQ2uK+Gf0qsG0quOYPDnsMRdwd3VU3jJdTYFNd1TuN1s
X86ZKVuYcN09QV7zdOTWYGPvNO533Y28N8hrm8EHrntTsKVPXL8U1gw2uA/7
g9z2Y1hyH7YEGw4cw5efhyV+0n2xx7Vk8G+43DEZ+Xv3yR6zO4Pn3ZeEbxoI
hhyFlW0+g1/dp1ssh7NY6z4wj+LPbB+zeNd92Gz7EDdZDrM4eTysaVyxfWUB
133Q9pXFX667x3KYxdeue5vtM4eUrUzkRNdK23cOP4bLnRnvhxw+dF2HTId4
r+Uwh0dc5w6rfx63uc7NlsM8Lpjfs17/PIZd9xXLZR5fuO6EX7Pyz3o+8njC
fThouc3jXveBeSngP/dhm+W2gB/ch4Tfdx+YnwIesv7LYaXluoAbXXfCC657
znwu4BfXfchyXsTHrpv5K+JV173Dcl/Ena6TeSziH9fVyHdYHxTxretK+Bnf
N/NbjPset74oxX0xz6W4r7dsXpTiPpjnUvzd+6xvSvF3E05+h7koY6vfx1yU
8YD/X8JV/7b4dJY9L2XPfxnbw3YGxMxDBWm/ftHyIB61PFS8Pyp4yuotZr2r
OO/3sd5i1rfq/VTBw1bfmvdTBTdbfcW/WT3Fj1tOf4/M+ohnLIdi5u54ZOZG
zHqciMx6iFmPE+iynFcwaXU9GZn+i6+zusxFrpj/YuZNzP2LuX8x63EqMvtT
PGI+nvL5U/H5KOb5KOb8P+3zqer1EeftfBSzXmLmej4y56eY55+Y81/8ivXf
QmT6IaYfCz4vqz6vxPTjTGSef+IHLfhi6hdT/9nI1C9m34vZf+L1ltdzkalX
TL1izpvzyJivVe8/MftPzPNj0c+HqtdXzPN90c+LqvefmHPuQmTqEbOeYtZz
yc+XGt62uSRm/y35+1cNn9o8FVPfRT+Paq5PzPNHzHyLOU/F75j+PyJz/og5
X8VfWd7F7G/xG1Z/Mfv9UmT6JWb/i+mfmPNA/Jz59GdkzjMx55n4rOVFzPkh
pr9i5rUemf0j5vuu+CPTI+b7pZjvR2K+/4n5flxvqF+9wQ8x+1XM81zMfNcb
/FvOfH+p4X9spOJc
    "]], InsetBox[
    StyleBox[Cell["A",
      GeneratedCell->False,
      CellAutoOverwrite->False,
      CellBaseline->Baseline,
      TextAlignment->Left],
     Background->GrayLevel[1.]], {0.05555555555555555, 0.4916666666666667}, {
    Left, Baseline},
    Alignment->{Left, Top}], InsetBox[
    StyleBox[Cell["\[Beta]>0",
      GeneratedCell->False,
      CellAutoOverwrite->False,
      CellBaseline->Baseline,
      TextAlignment->Left],
     Background->GrayLevel[1.]], {0.4666666666666668, 0.6527777777777779}, {
    Left, Baseline},
    Alignment->{Left, Top}], InsetBox[
    StyleBox[Cell["\[Beta]<0",
      GeneratedCell->False,
      CellAutoOverwrite->False,
      CellBaseline->Baseline,
      TextAlignment->Left],
     Background->GrayLevel[1.]], {0.6750000000000002, 0.286111111111111}, {
    Left, Baseline},
    Alignment->{Left, Top}]},
  ContentSelectable->True,
  ImagePadding->{{0., 0.}, {0., 0.}},
  ImageSize->{283., 212.},
  PlotRange->{{0., 1.3333333333333335`}, {0., 1.}},
  PlotRangePadding->Automatic]], "Input",
 CellChangeTimes->{{3.527953736683807*^9, 3.527953766402618*^9}}],

Cell[TextData[{
 Cell[BoxData[{
  FormBox[
   RowBox[{
    SubscriptBox["Y", "t"], " ", "=", " ", 
    RowBox[{"A", "+", 
     FractionBox["\[Beta]", 
      SubscriptBox["x", "t"]], "+", 
     SubscriptBox["\[Epsilon]", "t"]}]}], 
   TraditionalForm], "\[IndentingNewLine]", 
  FormBox[
   RowBox[{
    FractionBox["dy", "dx"], " ", "=", " ", 
    RowBox[{
     RowBox[{"-", "\[Beta]"}], "/", 
     SuperscriptBox["x", "2"]}]}], TraditionalForm], "\[IndentingNewLine]", 
  FormBox[
   RowBox[{
    SubscriptBox["\[Eta]", 
     RowBox[{"y", ",", "x"}]], " ", "=", 
    RowBox[{
     RowBox[{"-", "\[Beta]"}], "/", 
     RowBox[{"(", "xy", ")"}]}]}], TraditionalForm]}],
  FormatType->"TraditionalForm",
  FontWeight->"Plain"],
 "\[LineSeparator]You can estimate this model by saying Z = 1/x and \
regressing y = A+\[Beta]Z+\[Epsilon] ",
 StyleBox["(reg y z)",
  FontSlant->"Italic"]
}], "Text",
 CellChangeTimes->{{3.5279536978653593`*^9, 3.5279537166846066`*^9}, {
  3.52795378160201*^9, 3.5279538740083137`*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell["\<\
Logarithmic Reciprocal Transformations\
\>", "Subsubsection",
 CellChangeTimes->{{3.5279538202604637`*^9, 3.5279538273801785`*^9}}],

Cell[BoxData[
 GraphicsBox[{
   LineBox[{{0.05833333333333335, 0.9138888888888888}, {0.06388888888888888, 
    0.05277777777777759}, {1.227777777777778, 0.058333333333333126`}}], 
   LineBox[{{0.05833333333333335, 0.5083333333333331}, {1.1750000000000003`, 
    0.5166666666666659}}], LineBox[CompressedData["
1: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
    "]]},
  ContentSelectable->True,
  ImagePadding->{{0., 0.}, {0., 0.}},
  ImageSize->{198., 149.},
  PlotRange->{{0., 1.3333333333333335`}, {0., 1.}},
  PlotRangePadding->Automatic]], "Input",
 CellChangeTimes->{{3.5279538928675594`*^9, 3.5279539209664354`*^9}}],

Cell[TextData[Cell[BoxData[{
 FormBox[
  RowBox[{
   SubscriptBox["Y", "t"], " ", "=", " ", 
   SuperscriptBox["e", 
    RowBox[{"A", "-", 
     RowBox[{"B", "/", "X"}], "+", 
     SubscriptBox["\[Epsilon]", "t"]}]]}], 
  TraditionalForm], "\[IndentingNewLine]", 
 FormBox[
  RowBox[{
   FractionBox["dy", "dx"], " ", "=", 
   RowBox[{
    RowBox[{"-", "\[Beta]y"}], "/", 
    SuperscriptBox["x", "2"]}]}], TraditionalForm], "\[IndentingNewLine]", 
 FormBox[
  RowBox[{
   SubscriptBox["\[Eta]", 
    RowBox[{"y", ",", "x"}]], " ", "=", " ", 
   RowBox[{"\[Beta]", "/", "x"}]}], TraditionalForm]}],
 FormatType->"TraditionalForm"]], "Text",
 CellChangeTimes->{{3.5279539325759706`*^9, 3.5279539809340363`*^9}}],

Cell[TextData[{
 "You can estimate this using OLS by saying ln(y) = A- \[Beta]/x + \[Epsilon] \
then making the substitution Z = 1/x (",
 StyleBox["reg ly Z)",
  FontSlant->"Italic"]
}], "Text",
 CellChangeTimes->{{3.527953981234024*^9, 3.527954030612049*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell["Polynomials", "Subsubsection",
 CellChangeTimes->{{3.527954034651888*^9, 3.5279540411516275`*^9}}],

Cell[BoxData[
 GraphicsBox[{
   LineBox[{{0.05555555555555555, 0.877777777777778}, {0.061111111111111116`, 
    0.07499999999999973}, {1.1611111111111114`, 0.08333333333333348}}], 
   LineBox[{{0.06388888888888888, 0.3222222222222224}, {0.8916666666666668, 
    0.8444444444444446}}], LineBox[CompressedData["
1:eJxllluIVWUUx0+CJVhRPlgPFlaCFV2EIgYDVw8WTgWZdBG0mIQuD120gi5k
SfRQPlRQgV3Aii5SPQw9aGTKOGp5mXQazc5lzjn7dvbZex8vBRZiPXS+//rv
bz2cxR42v2Gfvb/vv/5rre+KNc+seHRGpVI52P9z95dfcLFNqq9f7y45+8U9
/etHzw+Pzlw1OnO7553bEZ5fnVq4fmrhDs9L8vf6107P51RcjAles6oqj8ze
OjJ7q/HuuU/u6l/yJqIqV13pYtzzEff69eMygt9V5SbEbs8f4IPGty91sUeG
3o77V1X+Ht58eniz8Zdue2eNH7zfxV7P57llje6Viy52UZNtePHPnh9/zIXx
JVi+8f51837pXwOcOVmW1OQl6G18jdve1CCPQZea1KDjPs9vQRfjW7Fu4x7e
s9/zxx+6ML7LyXHa+F/k+4BswnM1+fYbF8YPIVEHPV/gZB4Z5LXYZk12wB7G
Tzl55k54vszd1hkfnkAM8DKssyavwV+/er4RxjJuN10Yv+PkGDrk+a+TLow/
c7fhw57vheGNYdfKpGf1sfFG6G+8Br4zXox8TMp8+Lguc+CD3zwXyI/xOPJg
/BF0NX4Wuhjfie8YL8B9aoDPIK91OYr6Mf4O+TV+A2VqvBr5PuL5ZtSb8fnI
t3GCwjH+Cfk3fhr5P+r5DtSn8eXwg/EhpN9Y+8vvAzyJfdVlERJkPAv1axzA
H8Y/oJ6PeX4XfjF+AvVtfBv6mfGf8NMx2QId67IP9f2H50/hL2Ptr8Yr4Dfj
a5Ee4zr7Zsnfs0+WvJF9cQMeq9N/xovZx0qewz5U8h7WfcmfsI5XIu8NeZ51
WPIC+qrk/5iHRfBFg/4yXs3nSr6F95IvhH8aMov3FP5pSMC7zhdj9c+0Z/XP
tIzxOfWPsfpnWjZhLjTkK/R74w3wT9Oz+qcpa8vvwC9NWcbvqF9antUfLZnP
76o/jNUfLTmDuTMtB+CPtkxyXZ/DH8bqh7Zs4TrVD22/Tu2fgWedB8Y67wJZ
iTnWpB6B35f6xfgfrCtgnTSpV+D3rXoFft/qn5B10mL/Cr0OD+C7oddB+3Mo
l2IutjhPQ6+L9uuQddPmfI08q78ieRF106a/IllOnbR/RXI1ddL+FbFvB/Rf
zL4dsH/FPG8EnFexzKNO2v9jnh8Czt9YJqiLnl8SzvOQ/kvkFegfUu9E7qMO
qm8i11EHrceEeofUs0O9Q/azjtyNvh7yPNSh3hH17FDviHp2qHfEed6h3hH1
TKl3RD1T6htTz5R9KqaeKfWOqWfKPh5Tz668j3qJOT+71DfheaZLfRPq2aXv
EurZpc8SmQE9M/osoZ6Z10F/l3EOdqhnJi3o1eF7MoGsQ6l8jfdk1CfleSGn
HinPdzn1SKlvTj26PB/lnGvGy7mP52CUnH7r0r85/ZYxb7ks5T60bgr27Yz9
s/D7Kln7dsY8F9QjY74K6pFzXwXrzvgGJCBnPgs5F77Imc+C5wTj8juqS+H/
r/kuqI+x+qPn/6/779EPPe7vOHXsMS/H/e/0XHOC/b5HnU5wHva47pPs/+V7
T7Ef9pgPY/XjKfkfiSN29g==
    "]], LineBox[CompressedData["
1:eJxlll2I1GUUxifBEqyoLtYuVrEMrGApqGBJ8HRhoBRYQiVYsAllF2ZaggSu
iXURXUhQgX3AlphICm1dmJC7ze6q466rrut+zMzufOzOfs3HjjOzW8jWRb7P
+7zn4Pqyy8tvmP/7P+9znnPOPLL9gy3vLIlEIr/e+nf784dzjYdzZ+Tmppb5
TS0D0v4nlmx9za1B5WXbWpduax2UVbE99bE9ZyWbcmtQDvSvbe5f2yZfumMa
hySNz9vkvXfdGpL1+a9u/bXLC9iH5Oi8e9Ff8vDOjrqdHUNyV8StqFTKbhlf
dK+pH5bflroXR+VHPDcsby8/3bT8dFReWTi2eeGY8ePNLpBheRCrQ3BMJK7c
inPi0lWHF9/Bn2MZN+Fc40boZPwAzk0oR7En5CMXdqxDjnzrVkLWPOpWp+zG
58YbndzzxquxJ+W6k7O5U26662027sNufOIXt5LyaUP8UEO8Uw5iT8ozWF2y
FRccUV7mrtM0IpO4SJdksRtHkWbjI0jciHyDvUt2u1vWjcqLG9w6dwdvxG68
Gj4Zlb/hq3P016j87K61YPwGfHZe+nrdMj6B743KPfDdeTkIn6XkDyTmgvIO
+OyCPO2ufyglK5AO4274KKb88T63YvRzSp6Ab4wT7msNF+nvlKxD3o2Lzsbr
u5W/R5675QziSstLyGs36yEt/yKPPconkbce1kda3kKeLim3IQ+XWC9peR86
9yqvhK7GV6FbL+spLZ9Al8vKGYR5mfWVFsFzV5Sr2I1/Qp1dVfZ11KcMGRuM
v0DdGG9H3Rj7/mL8EOrmmvJ30M/4Q6TL+DHURb/yAPxv/Cb0u658L3xufBZ6
Gu+CngPKvp8ZX4Gcxt43g8qh7wUOfS9w6HOBQ18LHPpY4CfZtwInoW98kb7x
RXoal+DHhPJe9pnb9UuqHwbYR4J/PmPfCHw/+0TwYzv7QuBdrPvAq1jngY+z
bgOHugv+D3UTePF+u65pzouMstfL2NdrVuvPx2Ps9TL282pM43gK8Rn7/m3s
+/O4sr+X8SnUs7GfWznl+6Cnsa9vY1/fE8o+fmPvR2NfP5PKfv4Y+35p7Ovf
+D/0oyll7wdjr/+U6vUc5se06v0q5u605ncJ+sPMIj/MqN98/Ma+f+Y1z75/
5lkXGb63wPmeYbwFzvcM9S4IjqvL8pyCYOxsyNK/RamnD7x/i4LjW7KsrxLn
eVb+wecl2U9feH/Mcp6PyQ+Ib5bzYYz1VJaX0efHGE+ZcY5LD/J/g3U1zvff
4P1yzHeFfSnH3zcV/h6ZYB1W6NsJ7hXpZJ59v6vyd9akvI55WeVzU/RzlT6c
pp+r8jVkn+Y8r7KvzDCeGu+dZz3VeH6e8dXokwL1qsmz8EWRea0xP0Xmuya/
47kS469xLpSYr5rq7O8zx/sZ3w29Z+n3Oept7P1Y5j3nqL+x96Ox16cs/wNa
bw7l
    "]], InsetBox[
    StyleBox[Cell[TextData[Cell[BoxData[
      FormBox[
       RowBox[{
        SubscriptBox["\[Beta]", "4"], "\[NotEqual]", "0"}], TraditionalForm]],
      
      FormatType->"TraditionalForm"]],
      GeneratedCell->False,
      CellAutoOverwrite->False,
      CellBaseline->Baseline,
      TextAlignment->Left],
     Background->GrayLevel[1.]], {1.0305555555555557`, 0.5638888888888891}, {
    Left, Baseline},
    Alignment->{Left, Top}], InsetBox[
    StyleBox[Cell[TextData[Cell[BoxData[
      FormBox[
       RowBox[{
        SubscriptBox["\[Beta]", "4"], " ", "=", " ", "0"}], TraditionalForm]],
      
      FormatType->"TraditionalForm"]],
      GeneratedCell->False,
      CellAutoOverwrite->False,
      CellBaseline->Baseline,
      TextAlignment->Left],
     Background->GrayLevel[1.]], {0.8750000000000002, 0.9583333333333335}, {
    Left, Baseline},
    Alignment->{Left, Top}], InsetBox[
    StyleBox[Cell[TextData[Cell[BoxData[
      FormBox[
       RowBox[{
        SubscriptBox["\[Beta]", "3"], "=", 
        RowBox[{
         SubscriptBox["\[Beta]", "4"], "=", "0"}]}], TraditionalForm]],
      FormatType->"TraditionalForm"]],
      GeneratedCell->False,
      CellAutoOverwrite->False,
      CellBaseline->Baseline,
      TextAlignment->Left],
     Background->GrayLevel[1.]], {0.22472613458528973`, 0.6993740219092339}, {
    Left, Baseline},
    Alignment->{Left, Top}]},
  ContentSelectable->True,
  ImagePadding->{{0., 0.}, {0., 0.}},
  ImageSize->{213., 161.},
  PlotRange->{{0., 1.3333333333333335`}, {0., 1.}},
  PlotRangePadding->Automatic]], "Input",
 CellChangeTimes->{{3.5279540935695305`*^9, 3.527954165196666*^9}}],

Cell[TextData[{
 "y=  ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    SubscriptBox["\[Beta]", "1"], "+", 
    SubscriptBox["\[Beta]", 
     RowBox[{"2", "x"}]], "+", 
    RowBox[{
     SubscriptBox["\[Beta]", "3"], 
     SuperscriptBox["x", "2"]}], "+", 
    RowBox[{
     SubscriptBox["\[Beta]", "4"], 
     SuperscriptBox["x", "3"]}]}], TraditionalForm]],
  FormatType->"TraditionalForm"]
}], "Text",
 CellChangeTimes->{{3.527954043911517*^9, 3.527954082189986*^9}}]
}, Open  ]]
}, Open  ]]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["3", "BookChapterNumber",
 CellChangeTimes->{3.5275944104144278`*^9}],

Cell["\<\
Classical Normal Linear Regression Model with k Independent Variables\
\>", "BookChapterTitle",
 CellChangeTimes->{{3.527594416381343*^9, 3.527594437324204*^9}}],

Cell[CellGroupData[{

Cell["Basic Concepts", "Section",
 CellChangeTimes->{{3.527594582480628*^9, 3.527594588137897*^9}}],

Cell["\<\
We are now moving out of scalar land and into matrices and vectors. For that \
reason will have to redefine some things. \
\>", "Text",
 CellChangeTimes->{{3.527959112592143*^9, 3.527959146109798*^9}, 
   3.5279714500895243`*^9}],

Cell[TextData[{
 "y = ",
 Cell[BoxData[
  FormBox[
   RowBox[{"(", GridBox[{
      {
       SubscriptBox["y", "1"]},
      {
       SubscriptBox["y", "2"]},
      {"..."},
      {
       SubscriptBox["y", "n"]}
     }], ")"}], TraditionalForm]]],
 " E(y) = ",
 Cell[BoxData[
  FormBox[
   RowBox[{"(", GridBox[{
      {
       RowBox[{"E", "(", 
        SubscriptBox["y", "1"], ")"}]},
      {
       RowBox[{"E", "(", 
        SubscriptBox["y", "2"], ")"}]},
      {"..."},
      {
       RowBox[{"E", "(", 
        SubscriptBox["y", "n"], ")"}]}
     }], ")"}], TraditionalForm]]],
 " Var(y) = ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{"(", GridBox[{
       {
        RowBox[{"Var", "(", 
         SubscriptBox["y", "1"], ")"}], 
        RowBox[{"Cov", "(", 
         RowBox[{
          SubscriptBox["y", "1"], 
          SubscriptBox["y", "2"]}], ")"}], "...", 
        RowBox[{"Cov", "(", 
         RowBox[{
          SubscriptBox["y", "1"], ",", 
          SubscriptBox["y", "n"]}], ")"}]},
       {
        RowBox[{"Cov", "(", 
         RowBox[{
          SubscriptBox["y", "2"], ",", 
          SubscriptBox["y", "1"]}], ")"}], 
        RowBox[{"Var", "(", 
         SubscriptBox["y", "2"], ")"}], "...", 
        RowBox[{"Cov", "(", 
         RowBox[{
          SubscriptBox["y", "2"], ",", 
          SubscriptBox["y", "n"]}], ")"}]},
       {"...", "...", "...", "..."},
       {
        RowBox[{"Cov", "(", 
         RowBox[{
          SubscriptBox["y", "n"], ",", 
          SubscriptBox["y", "1"]}], ")"}], 
        RowBox[{"Cov", "(", 
         RowBox[{
          SubscriptBox["y", "n"], ",", 
          SubscriptBox["y", "2"]}], ")"}], "...", 
        RowBox[{"Var", "(", 
         SubscriptBox["y", "n"], ")"}]}
      }], ")"}], "=", " ", 
    RowBox[{
     RowBox[{
      SuperscriptBox[
       RowBox[{"(", 
        RowBox[{"E", "(", "y", ")"}], ")"}], "T"], 
      RowBox[{"E", "(", "y", ")"}]}], " ", "=", " ", "\[CapitalSigma]"}]}], 
   TraditionalForm]]]
}], "Text",
 CellChangeTimes->{{3.5279593004778013`*^9, 3.527959436178989*^9}}],

Cell["\<\
This n x 1 vector is said to be distributed as a multivariate normal with a \
mean vector \[Mu] and a variance-Covariance matrix \[CapitalSigma] (y ~ N[\
\[Mu],\[CapitalSigma]] )\
\>", "Text",
 CellChangeTimes->{{3.52795946392633*^9, 3.527959521314087*^9}, {
  3.5279714531575594`*^9, 3.5279714545266824`*^9}}],

Cell[TextData[{
 "If this is the case the probability density function (pdf = f) f = ",
 Cell[BoxData[
  FormBox[
   FractionBox[
    SuperscriptBox["e", 
     RowBox[{
      FractionBox[
       RowBox[{"-", "1"}], "2"], 
      SuperscriptBox[
       RowBox[{"(", 
        RowBox[{"y", "-", "\[Mu]"}], ")"}], "T"], 
      RowBox[{
       SuperscriptBox["\[CapitalSigma]", 
        RowBox[{"-", "1"}]], "(", 
       RowBox[{"y", "-", "\[Mu]"}], ")"}]}]], 
    RowBox[{
     SuperscriptBox[
      RowBox[{"(", 
       RowBox[{"2", "\[Pi]"}], ")"}], 
      RowBox[{"n", "/", "2"}]], "|", "\[CapitalSigma]", 
     SuperscriptBox["|", 
      RowBox[{"n", "/", "2"}]]}]], TraditionalForm]]],
 "where |\[CapitalSigma]| = Det[\[CapitalSigma]]"
}], "Text",
 CellChangeTimes->{{3.52795952166376*^9, 3.5279596101414347`*^9}, 
   3.5279600269421864`*^9, {3.5279605296216345`*^9, 3.5279605310915756`*^9}, 
   3.5279714558958054`*^9}],

Cell[CellGroupData[{

Cell[TextData[{
 StyleBox["The Useful Theorem: ",
  FontWeight->"Bold"],
 " If ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{
     RowBox[{"y", "~", 
      RowBox[{"N", "[", 
       RowBox[{
        SubscriptBox["\[Mu]", "y"], ",", 
        SubscriptBox["\[CapitalSigma]", "y"]}], "]"}]}], " ", "then", " ", 
     "Z"}], " ", "=", " ", 
    RowBox[{"Ay", "~", 
     RowBox[{"N", "[", 
      RowBox[{
       RowBox[{
        SubscriptBox["\[Mu]", "z"], " ", "=", " ", 
        SubscriptBox["A\[Mu]", "y"]}], ",", " ", 
       RowBox[{
        SubscriptBox["\[CapitalSigma]", "Z"], " ", "=", " ", 
        RowBox[{
         SubscriptBox["A\[CapitalSigma]", "y"], 
         SuperscriptBox["A", "T"]}]}]}], "]"}]}]}], TraditionalForm]]],
 " where A is a matrix of constant. Proof Below"
}], "Definition",
 CellChangeTimes->{{3.5279605380312977`*^9, 3.5279606474369216`*^9}}],

Cell[TextData[Cell[BoxData[{
 FormBox[
  RowBox[{
   RowBox[{"E", "(", "z", ")"}], " ", "=", " ", 
   RowBox[{
    RowBox[{"E", "(", "Ay", ")"}], " ", "=", " ", 
    RowBox[{
     RowBox[{"A", " ", 
      RowBox[{"E", "(", "y", ")"}]}], " ", "=", " ", 
     SubscriptBox["A\[Mu]", "y"]}]}]}], 
  TraditionalForm], "\[IndentingNewLine]", 
 FormBox[
  RowBox[{
   RowBox[{"Var", " ", 
    RowBox[{"(", "Z", ")"}]}], " ", "=", " ", 
   RowBox[{"E", "(", 
    RowBox[{
     RowBox[{
      RowBox[{"(", 
       RowBox[{"z", "-", 
        RowBox[{"E", "(", "z", ")"}]}], ")"}], 
      RowBox[{"(", 
       RowBox[{"z", " ", "-", " ", 
        RowBox[{"E", "(", "z", ")"}]}], ")"}]}], "\[IndentingNewLine]", "=", 
     " ", 
     RowBox[{
      RowBox[{"E", "[", 
       RowBox[{
        RowBox[{"(", 
         RowBox[{"Ay", " ", "-", " ", 
          SubscriptBox["A\[Mu]", "y"]}], ")"}], " ", 
        SuperscriptBox[
         RowBox[{"(", 
          RowBox[{"Ay", " ", "-", 
           SubscriptBox["A\[Mu]", "y"]}], ")"}], "T"]}], "]"}], 
      "\[IndentingNewLine]", "=", " ", 
      RowBox[{
       RowBox[{"A", " ", 
        RowBox[{"E", "[", 
         RowBox[{
          RowBox[{"(", 
           RowBox[{"y", " ", "-", " ", 
            SubscriptBox["\[Mu]", "y"]}], ")"}], 
          RowBox[{"(", 
           RowBox[{"y", "-", " ", 
            SubscriptBox["\[Mu]", "y"]}], ")"}]}], "]"}], 
        SuperscriptBox["A", "T"]}], "\[IndentingNewLine]", "=", " ", 
       RowBox[{"A", " ", 
        SubscriptBox["\[CapitalSigma]", "y"], 
        SuperscriptBox["A", "T"]}]}]}]}]}]}], TraditionalForm]}]]], "Example",\

 CellChangeTimes->{{3.5279606633762836`*^9, 3.5279608257797875`*^9}}]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Basic Model", "Section",
 CellChangeTimes->{{3.5275945889758463`*^9, 3.527594590426078*^9}}],

Cell[TextData[{
 "We are now going to spend a little bit of time extending the basic model we \
have been using to cases where we wish to have more than two parameters. In \
this case ",
 Cell[BoxData[
  FormBox[
   SubscriptBox["\[Beta]", "i"], TraditionalForm]],
  FormatType->"TraditionalForm"],
 " is interpreted as the marginal effect of ",
 Cell[BoxData[
  FormBox[
   SubscriptBox["x", "i"], TraditionalForm]],
  FormatType->"TraditionalForm"],
 " on the expected value of y. "
}], "Text",
 CellChangeTimes->{{3.5279609073665237`*^9, 3.5279609941330533`*^9}}],

Cell["\<\
The model can be re-written as shown below. \
\>", "Text",
 CellChangeTimes->{{3.527961066110174*^9, 3.527961082299526*^9}}],

Cell[TextData[Cell[BoxData[{
 FormBox[
  RowBox[{
   SubscriptBox["y", "1"], " ", "=", " ", 
   RowBox[{
    RowBox[{
     RowBox[{
      RowBox[{
       RowBox[{
        RowBox[{
         SubscriptBox["\[Beta]", "1"], 
         SubscriptBox["x", "11"]}], "+", 
        RowBox[{
         SubscriptBox["\[Beta]", "2"], 
         SubscriptBox["x", "12"]}], "+"}], "..."}], ".", 
      RowBox[{"+", 
       SubscriptBox["\[Beta]", "k"]}]}], 
     SubscriptBox["x", 
      RowBox[{"1", "k"}]]}], "+", 
    SubscriptBox["\[Epsilon]", "1"]}]}], 
  TraditionalForm], "\[IndentingNewLine]", 
 FormBox[
  RowBox[{
   SubscriptBox["y", "2"], " ", "=", " ", 
   RowBox[{
    RowBox[{
     RowBox[{
      RowBox[{
       RowBox[{
        RowBox[{
         SubscriptBox["\[Beta]", "1"], 
         SubscriptBox["x", "21"]}], "+", 
        RowBox[{
         SubscriptBox["\[Beta]", "2"], 
         SubscriptBox["x", "22"]}], "+"}], "..."}], ".", 
      RowBox[{"+", 
       SubscriptBox["\[Beta]", "k"]}]}], 
     SubscriptBox["x", 
      RowBox[{"2", "k"}]]}], "+", 
    SubscriptBox["\[Epsilon]", "2"]}]}], 
  TraditionalForm], "\[IndentingNewLine]", 
 FormBox["...", TraditionalForm], "\[IndentingNewLine]", 
 FormBox[
  RowBox[{
   SubscriptBox["y", "n"], " ", "=", " ", 
   RowBox[{
    RowBox[{
     RowBox[{
      RowBox[{
       RowBox[{
        RowBox[{
         SubscriptBox["\[Beta]", "1"], 
         SubscriptBox["x", "n1"]}], "+", 
        RowBox[{
         SubscriptBox["\[Beta]", "2"], 
         SubscriptBox["x", "n2"]}], "+"}], "..."}], ".", 
      RowBox[{"+", 
       SubscriptBox["\[Beta]", "k"]}]}], 
     SubscriptBox["x", "nk"]}], "+", 
    SubscriptBox["\[Epsilon]", "n"]}]}], TraditionalForm]}],
 FormatType->"TraditionalForm"]], "Text",
 CellChangeTimes->{{3.5279609959829793`*^9, 3.5279610569905386`*^9}}],

Cell[TextData[{
 "For simplicity we define y = ",
 Cell[BoxData[
  FormBox[
   RowBox[{"(", GridBox[{
      {
       SubscriptBox["y", "1"]},
      {
       SubscriptBox["y", "2"]},
      {"..."},
      {
       SubscriptBox["y", "n"]}
     }], ")"}], TraditionalForm]]],
 " , X = ",
 Cell[BoxData[
  FormBox[
   RowBox[{"(", GridBox[{
      {
       SubscriptBox["x", "11"], "...", 
       SubscriptBox["x", 
        RowBox[{"1", "k"}]]},
      {
       SubscriptBox["x", "21"], "...", 
       SubscriptBox["x", 
        RowBox[{"2", "k"}]]},
      {"...", "...", "..."},
      {
       SubscriptBox["x", "n1"], "...", 
       SubscriptBox["x", "nk"]}
     }], ")"}], TraditionalForm]],
  FormatType->"TraditionalForm"],
 " \[Beta] = ",
 Cell[BoxData[
  FormBox[
   RowBox[{"(", GridBox[{
      {
       SubscriptBox["\[Beta]", "1"]},
      {
       SubscriptBox["\[Beta]", "2"]},
      {"..."},
      {
       SubscriptBox["\[Beta]", "k"]}
     }], ")"}], TraditionalForm]],
  FormatType->"TraditionalForm"],
 " and \[Epsilon] = ",
 Cell[BoxData[
  FormBox[
   RowBox[{"(", GridBox[{
      {
       SubscriptBox["\[Epsilon]", "1"]},
      {
       SubscriptBox["\[Epsilon]", "2"]},
      {"..."},
      {
       SubscriptBox["\[Epsilon]", "3"]}
     }], ")"}], TraditionalForm]],
  FormatType->"TraditionalForm"]
}], "Text",
 CellChangeTimes->{{3.527961084759428*^9, 3.5279611546666317`*^9}, {
  3.5279611892452483`*^9, 3.527961242753108*^9}, {3.527962644844737*^9, 
  3.527962644844737*^9}}],

Cell["\<\
The idea of dimension s really important in matrix algebra so we will define \
the dimension of all these matrices. y:n\[Cross]1  X: n\[Cross]k    \[Beta]: \
k\[Cross]1  \[Epsilon]: n\[Cross]1\
\>", "Text",
 CellChangeTimes->{{3.527962645494711*^9, 3.5279627235615883`*^9}, {
  3.5279714597233543`*^9, 3.5279714607027273`*^9}}],

Cell["\<\
Now the model described by the equations above reduces to y = X\[Beta] + \
\[Epsilon]. (NOTE that if you want to include an intercept term you need to \
have a column of zeros at the beginning of X)\
\>", "Text",
 CellChangeTimes->{{3.5279612434330807`*^9, 3.5279613333894825`*^9}, 
   3.5279714636408453`*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell["Estimation", "Section",
 CellChangeTimes->{{3.5275945913197803`*^9, 3.527594593785902*^9}}],

Cell[CellGroupData[{

Cell["\<\
Deriving the OLS estimator for \[Beta]\
\>", "Subsection",
 CellChangeTimes->{{3.527962402944413*^9, 3.5279624047243423`*^9}}],

Cell[TextData[{
 "y = X\[Beta] + \[Epsilon] = ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    OverscriptBox["y", "^"], "+", "\[Epsilon]"}], TraditionalForm]],
  FormatType->"TraditionalForm"]
}], "Text",
 CellChangeTimes->{{3.527962406864257*^9, 3.52796243253323*^9}}],

Cell[TextData[{
 "SSE( ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{
     OverscriptBox["\[Beta]", "^"], ")"}], " ", "=", " ", 
    RowBox[{
     RowBox[{"\[Sum]", 
      SuperscriptBox[
       SubscriptBox["e", "t"], "2"]}], " ", "=", " ", 
     RowBox[{
      RowBox[{
       SuperscriptBox["\[Epsilon]", "T"], "\[Epsilon]"}], " ", "=", " ", 
      RowBox[{
       RowBox[{
        SuperscriptBox[
         RowBox[{"(", 
          RowBox[{"y", "-", " ", "X\[Beta]"}], ")"}], "T"], 
        RowBox[{"(", 
         RowBox[{"y", " ", "-", " ", "X\[Beta]"}], ")"}]}], " ", "=", " ", 
       RowBox[{
        RowBox[{
         RowBox[{"y", "'"}], "y"}], "-", 
        RowBox[{"2", 
         RowBox[{
          OverscriptBox["\[Beta]", "^"], "'"}], 
         RowBox[{"X", "'"}], "y"}], "+", 
        RowBox[{
         RowBox[{
          OverscriptBox["\[Beta]", "^"], "'"}], 
         RowBox[{"X", "'"}], "X", " ", 
         OverscriptBox["\[Beta]", "^"]}]}]}]}]}]}], TraditionalForm]],
  FormatType->"TraditionalForm"]
}], "Text",
 CellChangeTimes->{{3.527962432753221*^9, 3.527962546358677*^9}}],

Cell[TextData[Cell[BoxData[
 FormBox[
  RowBox[{
   FractionBox[
    RowBox[{"\[PartialD]", "SSE"}], 
    RowBox[{"\[PartialD]", 
     OverscriptBox[
      StyleBox["\[Beta]",
       FontWeight->"Bold"], "^"]}]], " ", "=", " ", 
   RowBox[{
    RowBox[{
     RowBox[{
      RowBox[{"-", "2"}], 
      RowBox[{"X", "'"}], "y"}], "+", 
     RowBox[{"2", 
      RowBox[{"X", "'"}], 
      OverscriptBox["X\[Beta]", "^"]}]}], " ", "=", " ", 
    RowBox[{
     RowBox[{"0", "->", " ", 
      RowBox[{
       RowBox[{"X", "'"}], 
       OverscriptBox["X\[Beta]", "^"]}]}], " ", "=", " ", 
     RowBox[{
      RowBox[{"X", "'"}], "y"}]}]}]}], TraditionalForm]],
 FormatType->"TraditionalForm"]], "Text",
 CellChangeTimes->{{3.5279625246895437`*^9, 3.5279626210356894`*^9}}],

Cell[TextData[Cell[BoxData[
 FormBox[
  RowBox[{
   OverscriptBox["\[Beta]", "^"], " ", "=", " ", 
   RowBox[{
    SuperscriptBox[
     RowBox[{"(", 
      RowBox[{
       RowBox[{"X", "'"}], "X"}], ")"}], 
     RowBox[{"-", "1"}]], 
    RowBox[{"X", "'"}], "y"}]}], TraditionalForm]],
 FormatType->"TraditionalForm"]], "Text",
 CellChangeTimes->{{3.52796262351559*^9, 3.527962634975132*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell["Deriving MLE Estimator for \[Beta]", "Subsection",
 CellChangeTimes->{{3.527962770809698*^9, 3.527962775969492*^9}, 
   3.5279714645202827`*^9}],

Cell[TextData[{
 "Recall that y ~ N[ X\[Beta], \[CapitalSigma] = ",
 Cell[BoxData[
  FormBox[
   SuperscriptBox["I\[Sigma]", "2"], TraditionalForm]],
  FormatType->"TraditionalForm"],
 "]"
}], "Text",
 CellChangeTimes->{{3.52796278476914*^9, 3.5279628094281535`*^9}}],

Cell[TextData[{
 "L(y, \[Mu], \[CapitalSigma]) = ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    FractionBox[
     SuperscriptBox["e", 
      RowBox[{
       FractionBox[
        RowBox[{"-", "1"}], "2"], 
       SuperscriptBox[
        RowBox[{"(", 
         RowBox[{"y", "-", "X\[Beta]"}], ")"}], "T"], 
       RowBox[{
        SuperscriptBox["\[CapitalSigma]", 
         RowBox[{"-", "1"}]], "(", 
        RowBox[{"y", "-", "X\[Beta]"}], ")"}]}]], 
     RowBox[{
      SuperscriptBox[
       RowBox[{"(", 
        RowBox[{"2", "\[Pi]"}], ")"}], 
       RowBox[{"n", "/", "2"}]], "|", "\[CapitalSigma]", 
      SuperscriptBox["|", 
       RowBox[{"n", "/", "2"}]]}]], " ", "=", "  ", 
    RowBox[{
     FractionBox[
      SuperscriptBox["e", 
       RowBox[{
        FractionBox[
         RowBox[{"-", "1"}], 
         RowBox[{"2", 
          SuperscriptBox["\[Sigma]", "2"]}]], 
        SuperscriptBox[
         RowBox[{"(", 
          RowBox[{"y", "-", "X\[Beta]"}], ")"}], "T"], 
        RowBox[{"(", 
         RowBox[{"y", "-", "X\[Beta]"}], ")"}]}]], 
      RowBox[{
       SuperscriptBox[
        RowBox[{"(", 
         RowBox[{"2", "\[Pi]"}], ")"}], 
        RowBox[{"n", "/", "2"}]], "|", 
       RowBox[{
        SuperscriptBox["\[Sigma]", "2"], "I"}], 
       SuperscriptBox["|", 
        RowBox[{"n", "/", "2"}]]}]], " ", "=", " ", 
     FractionBox[
      SuperscriptBox["e", 
       RowBox[{
        SuperscriptBox[
         RowBox[{"(", 
          RowBox[{"y", "-", "X\[Beta]"}], ")"}], "T"], 
        RowBox[{
         RowBox[{"(", 
          RowBox[{"y", "-", "X\[Beta]"}], ")"}], "/", "2"}], 
        SuperscriptBox["\[Sigma]", "2"]}]], 
      RowBox[{
       SuperscriptBox[
        RowBox[{"(", 
         RowBox[{"2", "\[Pi]"}], ")"}], 
        RowBox[{"n", "/", "2"}]], 
       SuperscriptBox[
        RowBox[{"(", 
         SuperscriptBox["\[Sigma]", "2"], ")"}], 
        RowBox[{"n", "/", "2"}]]}]], " "}]}], TraditionalForm]],
  FormatType->"TraditionalForm"]
}], "Text",
 CellChangeTimes->{{3.5279628106481047`*^9, 3.527962987691023*^9}}],

Cell[TextData[{
 "l (y,\[Mu],\[CapitalSigma]) = ln (L) = ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{
     FractionBox[
      RowBox[{
       SuperscriptBox[
        RowBox[{"(", 
         RowBox[{"y", "-", "X\[Beta]"}], ")"}], "T"], 
       RowBox[{"(", 
        RowBox[{"y", "-", "X\[Beta]"}], ")"}]}], 
      RowBox[{"2", 
       SuperscriptBox["\[Sigma]", "2"]}]], "-", 
     RowBox[{
      FractionBox["n", "2"], 
      RowBox[{"ln", "(", 
       RowBox[{"2", "\[Pi]"}], ")"}]}], " ", "-", " ", 
     RowBox[{
      FractionBox["n", "2"], 
      RowBox[{"ln", "(", 
       SuperscriptBox["\[Sigma]", "2"], ")"}]}]}], " ", "=", " ", 
    RowBox[{
     RowBox[{
      RowBox[{"(", 
       FractionBox[
        RowBox[{"-", "1"}], 
        SuperscriptBox["\[Sigma]", "2"]], ")"}], "SSE"}], " ", "-", 
     RowBox[{
      FractionBox["n", "2"], 
      RowBox[{"ln", "(", 
       RowBox[{"2", "\[Pi]"}], ")"}]}], " ", "-", " ", 
     RowBox[{
      FractionBox["n", "2"], 
      RowBox[{"ln", "(", 
       SuperscriptBox["\[Sigma]", "2"], ")"}], " "}]}]}], TraditionalForm]]]
}], "Text",
 CellChangeTimes->{{3.52796298851099*^9, 3.527963111966051*^9}}],

Cell[TextData[{
 Cell[BoxData[
  FormBox[
   RowBox[{
    FractionBox[
     RowBox[{"\[PartialD]", "l"}], 
     RowBox[{"\[PartialD]", "\[Beta]"}]], "=", " ", 
    RowBox[{
     FractionBox["1", 
      RowBox[{"2", 
       SuperscriptBox[
        OverscriptBox["\[Sigma]", "\[CapitalDelta]"], "2"]}]], 
     RowBox[{"(", 
      RowBox[{
       RowBox[{
        RowBox[{"-", "2"}], 
        RowBox[{"X", "'"}], "y"}], " ", "+", " ", 
       RowBox[{"2", 
        RowBox[{"(", 
         RowBox[{
          RowBox[{"X", "'"}], "X"}], ")"}], 
        OverscriptBox["\[Beta]", "\[CapitalDelta]"]}]}], ")"}]}]}], 
   TraditionalForm]],
  FormatType->"TraditionalForm"],
 "=0 (this is the same as above (",
 Cell[BoxData[
  FormBox[
   FractionBox[
    RowBox[{"\[PartialD]", "SSE"}], 
    RowBox[{"\[PartialD]", 
     OverscriptBox[
      StyleBox["\[Beta]",
       FontWeight->"Bold"], "^"]}]], TraditionalForm]]],
 "= 0))"
}], "Text",
 CellChangeTimes->{{3.527963113385995*^9, 3.5279632108520956`*^9}}],

Cell[TextData[{
 Cell[BoxData[
  FormBox[
   RowBox[{
    FractionBox[
     RowBox[{"\[PartialD]", "l"}], 
     RowBox[{"\[PartialD]", 
      SuperscriptBox["\[Sigma]", "2"]}]], " ", "=", " "}], TraditionalForm]],
  FormatType->"TraditionalForm"],
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{
     RowBox[{
      RowBox[{
       FractionBox[
        RowBox[{
         SuperscriptBox[
          RowBox[{"(", 
           RowBox[{"y", "-", 
            RowBox[{"X", " ", 
             OverscriptBox["\[Beta]", "\[CapitalDelta]"]}]}], ")"}], "T"], 
         RowBox[{"(", 
          RowBox[{"y", "-", 
           RowBox[{"X", " ", 
            OverscriptBox["\[Beta]", "\[CapitalDelta]"]}]}], ")"}]}], 
        SuperscriptBox[
         RowBox[{"(", 
          RowBox[{"2", 
           SuperscriptBox[
            OverscriptBox["\[Sigma]", "\[CapitalDelta]"], "2"]}], ")"}], 
         "2"]], "-", 
       FractionBox["n", "2"]}], ")"}], 
     FractionBox["1", 
      SuperscriptBox[
       OverscriptBox["\[Sigma]", "\[CapitalDelta]"], "2"]]}], "=", "0"}], 
   TraditionalForm]]]
}], "Text",
 CellChangeTimes->{{3.527963169733741*^9, 3.5279631703037176`*^9}, 
   3.527963345466711*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[{
 "BLUE estimators ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    OverscriptBox["\[Beta]", "^"], " ", "and", " ", 
    OverscriptBox["\[Beta]", "\[CapitalDelta]"]}], TraditionalForm]],
  FormatType->"TraditionalForm"],
 " (the \[CapitalDelta] is MLE and the ^ is OLS)"
}], "Subsection",
 CellChangeTimes->{{3.5279633484765906`*^9, 3.527963359656143*^9}, {
  3.527963400414513*^9, 3.527963421913653*^9}}],

Cell[TextData[{
 "There are a few properties these BLUE estimators have to have. They must be \
linear ",
 Cell[BoxData[
  FormBox[
   RowBox[{"(", 
    OverscriptBox["\[Beta]", "~"]}], TraditionalForm]]],
 " = Ay), they must be unbiased ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{
     RowBox[{
      RowBox[{"(", 
       RowBox[{
        RowBox[{"E", "(", 
         OverscriptBox["\[Beta]", "~"], ")"}], " ", "=", " ", 
        RowBox[{
         RowBox[{"AE", "(", "y", ")"}], " ", "=", " ", "AX\[Beta]"}]}], ")"}],
       " ", "=", " ", "\[Beta]"}], ",", " ", 
     RowBox[{
      RowBox[{"thus", " ", "AX"}], "=", " ", "I"}]}], ")"}], 
   TraditionalForm]]],
 ", they must have minimum variance. Note that method of moments (MOM), MLE \
,and OLS all lead to the same \[Beta] estimator under assumptions A.1-A.5."
}], "Text",
 CellChangeTimes->{{3.527963431373275*^9, 3.52796354697865*^9}, {
  3.5279635930268083`*^9, 3.5279635939667706`*^9}, {3.527963664033968*^9, 
  3.5279636640939655`*^9}, {3.527964066307876*^9, 3.5279640959066925`*^9}}],

Cell[CellGroupData[{

Cell[TextData[{
 "Derivation (proof) of Expected Value of ",
 Cell[BoxData[
  FormBox[
   OverscriptBox["\[Beta]", "~"], TraditionalForm]],
  FormatType->"TraditionalForm"]
}], "Subsubsection",
 CellChangeTimes->{{3.527963885765098*^9, 3.527963895364714*^9}, {
  3.527963979911332*^9, 3.527963982031247*^9}}],

Cell[TextData[Cell[BoxData[
 FormBox[
  RowBox[{
   RowBox[{"E", "(", 
    OverscriptBox["\[Beta]", "~"], ")"}], " ", "=", " ", 
   RowBox[{
    RowBox[{"E", "(", "Ay", ")"}], " ", "=", " ", 
    RowBox[{
     RowBox[{
      RowBox[{"AE", "(", "y", ")"}], " ", 
      SuperscriptBox[
       RowBox[{"(", 
        RowBox[{
         RowBox[{"X", "'"}], "X"}], ")"}], 
       RowBox[{"-", "1"}]], 
      RowBox[{"X", "'"}], 
      RowBox[{"E", "(", "y", ")"}]}], " ", "=", 
     RowBox[{
      RowBox[{
       SuperscriptBox[
        RowBox[{"(", 
         RowBox[{
          RowBox[{"X", "'"}], "X"}], ")"}], 
        RowBox[{"-", "1"}]], 
       RowBox[{"X", "'"}], " ", 
       RowBox[{"(", "X\[Beta]", ")"}]}], " ", "=", 
      RowBox[{
       RowBox[{
        SuperscriptBox[
         RowBox[{"(", 
          RowBox[{
           RowBox[{"X", "'"}], "X"}], ")"}], 
         RowBox[{"-", "1"}]], 
        RowBox[{"X", "'"}], "X", " ", "\[Beta]"}], " ", "=", " ", 
       RowBox[{"I\[Beta]", " ", "=", " ", "\[Beta]", "  "}]}]}]}]}]}], 
  TraditionalForm]],
 FormatType->"TraditionalForm"]], "Text",
 CellChangeTimes->{{3.5279638991845617`*^9, 3.527963969651743*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell["\<\
Derivation (proof) of Variance (\[Beta])\
\>", "Subsubsection",
 CellChangeTimes->{{3.5279636664938693`*^9, 3.527963679803337*^9}, {
  3.5279639840311675`*^9, 3.527963985191121*^9}}],

Cell[TextData[Cell[BoxData[{
 FormBox[
  RowBox[{
   RowBox[{"Var", "(", "\[Beta]", ")"}], "=", 
   RowBox[{
    RowBox[{"A\[CapitalSigma]A", "'"}], " ", "=", " ", 
    RowBox[{
     RowBox[{"A", "(", 
      RowBox[{
       SuperscriptBox["\[Sigma]", "2"], "I"}], ")"}], 
     RowBox[{"A", "'"}]}]}]}], TraditionalForm], "\[IndentingNewLine]", 
 FormBox[
  RowBox[{"=", " ", 
   RowBox[{
    SuperscriptBox[
     RowBox[{"(", 
      RowBox[{
       RowBox[{"X", "'"}], "X"}], ")"}], 
     RowBox[{"-", "1"}]], 
    RowBox[{"X", "'"}], " ", 
    RowBox[{"(", 
     RowBox[{
      SuperscriptBox["\[Sigma]", "2"], "I"}], ")"}], " ", 
    RowBox[{
     RowBox[{"(", 
      RowBox[{
       SuperscriptBox[
        RowBox[{"(", 
         RowBox[{
          RowBox[{"X", "'"}], "X"}], ")"}], 
        RowBox[{"-", "1"}]], 
       RowBox[{"X", "'"}]}], ")"}], "'"}]}]}], 
  TraditionalForm], "\[IndentingNewLine]", 
 FormBox[
  RowBox[{"=", " ", 
   RowBox[{
    SuperscriptBox["\[Sigma]", "2"], 
    SuperscriptBox[
     RowBox[{"(", 
      RowBox[{
       RowBox[{"X", "'"}], "X"}], ")"}], 
     RowBox[{"-", "1"}]], 
    RowBox[{"X", "'"}], "I", "  ", 
    RowBox[{"X", "''"}], 
    RowBox[{
     RowBox[{"(", 
      SuperscriptBox[
       RowBox[{"(", 
        RowBox[{
         RowBox[{"X", "'"}], "X"}], ")"}], 
       RowBox[{"-", "1"}]], ")"}], "'"}]}]}], 
  TraditionalForm], "\[IndentingNewLine]", 
 FormBox[
  RowBox[{"=", " ", 
   RowBox[{
    SuperscriptBox["\[Sigma]", "2"], 
    SuperscriptBox[
     RowBox[{"(", 
      RowBox[{
       RowBox[{"X", "'"}], "X"}], ")"}], 
     RowBox[{"-", "1"}]], 
    RowBox[{"X", "'"}], 
    RowBox[{"X", "''"}], 
    RowBox[{"(", 
     SuperscriptBox[
      RowBox[{"(", 
       RowBox[{
        RowBox[{"X", "'"}], "X"}], ")"}], 
      RowBox[{"-", "1"}]], ")"}]}]}], TraditionalForm], "\[IndentingNewLine]", 
 FormBox[
  RowBox[{"=", " ", 
   SuperscriptBox[
    RowBox[{
     SuperscriptBox["\[Sigma]", "2"], "(", 
     RowBox[{
      RowBox[{"X", "'"}], "X"}], ")"}], 
    RowBox[{"-", "1"}]]}], TraditionalForm]}],
 FormatType->"TraditionalForm"]], "Text",
 CellChangeTimes->{{3.527963683273198*^9, 3.5279638236575823`*^9}, {
  3.527963878395393*^9, 3.527963878395393*^9}}]
}, Open  ]]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Distribution of Estimators", "Section",
 CellChangeTimes->{{3.52759459413538*^9, 3.5275945976814537`*^9}, 
   3.5279714673684587`*^9}],

Cell[TextData[{
 "Remember again that under A.1-A.5  y ~ N[X\[Beta], ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    SuperscriptBox["\[Sigma]", "2"], "I"}], TraditionalForm]],
  FormatType->"TraditionalForm"],
 "] and that ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    OverscriptBox["\[Beta]", "~"], " ", "=", " ", 
    RowBox[{
     OverscriptBox["\[Beta]", "^"], " ", "=", " ", 
     RowBox[{
      OverscriptBox["\[Beta]", "\[CapitalDelta]"], " ", "=", " ", 
      RowBox[{
       SuperscriptBox[
        RowBox[{"(", 
         RowBox[{
          RowBox[{"X", "'"}], "X"}], ")"}], 
        RowBox[{"-", "1"}]], 
       RowBox[{"X", "'"}], 
       RowBox[{"y", "."}]}]}]}]}], TraditionalForm]],
  FormatType->"TraditionalForm"]
}], "Text",
 CellChangeTimes->{{3.5279641298253355`*^9, 3.527964191892853*^9}, 
   3.52797146842778*^9}],

Cell[TextData[{
 "The normal theorem therefore says that ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{
     OverscriptBox["\[Beta]", "~"], "~", 
     RowBox[{"N", "[", 
      RowBox[{
       SubscriptBox["A\[Mu]", "y"], ",", " ", 
       RowBox[{"A\[CapitalSigma]A", "'"}]}], "]"}]}], " ", "=", 
    RowBox[{
     RowBox[{"N", " ", "[", 
      RowBox[{"AX\[Beta]", ",", " ", 
       RowBox[{
        SuperscriptBox["A\[Sigma]", "2"], "IA"}]}], "]"}], " ", "=", " ", 
     RowBox[{"N", "[", 
      RowBox[{"\[Beta]", ",", " ", 
       SuperscriptBox[
        RowBox[{
         SuperscriptBox["\[Sigma]", "2"], "(", 
         RowBox[{
          RowBox[{"X", "'"}], "X"}], ")"}], 
        RowBox[{
         RowBox[{"-", "1"}], "]"}]]}]}]}]}], TraditionalForm]],
  FormatType->"TraditionalForm"],
 " where A = ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    SuperscriptBox[
     RowBox[{"(", 
      RowBox[{
       RowBox[{"X", "'"}], "X"}], ")"}], 
     RowBox[{"-", "1"}]], 
    RowBox[{
     RowBox[{"X", "'"}], "."}]}], TraditionalForm]],
  FormatType->"TraditionalForm"]
}], "Text",
 CellChangeTimes->{{3.527964192282837*^9, 3.5279643320972443`*^9}, {
  3.5279714712459755`*^9, 3.5279714721154184`*^9}}],

Cell[TextData[{
 "An unbiased estimator for ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    SuperscriptBox[
     RowBox[{
      SuperscriptBox["\[Sigma]", "2"], "(", 
      RowBox[{
       RowBox[{"X", "'"}], "X"}], ")"}], 
     RowBox[{"-", "1"}]], " ", "is", " ", 
    SuperscriptBox[
     RowBox[{
      SuperscriptBox["s", "2"], "(", 
      RowBox[{
       RowBox[{"X", "'"}], "X"}], ")"}], 
     RowBox[{"-", "1"}]]}], TraditionalForm]],
  FormatType->"TraditionalForm"],
 " where ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    SuperscriptBox["s", "2"], " ", "=", " ", 
    FractionBox[
     RowBox[{
      RowBox[{"e", "'"}], "e"}], 
     RowBox[{"(", 
      RowBox[{"n", "-", "k"}], ")"}]]}], TraditionalForm]],
  FormatType->"TraditionalForm"],
 " and it ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    FractionBox[
     RowBox[{
      RowBox[{"(", 
       RowBox[{"n", "-", "k"}], ")"}], 
      SuperscriptBox["s", "2"]}], 
     SuperscriptBox["\[Sigma]", "2"]], "~", " ", 
    SuperscriptBox["\[Chi]", 
     RowBox[{"2", 
      RowBox[{"(", 
       RowBox[{"n", "-", "k"}], ")"}]}]]}], TraditionalForm]],
  FormatType->"TraditionalForm"]
}], "Text",
 CellChangeTimes->{{3.5279643325672255`*^9, 3.527964416293876*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell["Statistical Inference", "Section",
 CellChangeTimes->{{3.52759459840759*^9, 3.5275946033458347`*^9}}],

Cell[CellGroupData[{

Cell["The F statistic", "Subsection",
 CellChangeTimes->{{3.527964752980408*^9, 3.5279647579902077`*^9}}],

Cell[TextData[{
 "The first question we should as when it comes to statistical inference is \
how much overall explanatory power does our model have? This can be tested \
using ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{
     SubscriptBox["H", "0"], ":", " ", 
     SubscriptBox["\[Beta]", "2"]}], "=", " ", 
    RowBox[{
     RowBox[{
      RowBox[{
       SubscriptBox["\[Beta]", "3"], "=."}], ".."}], "=", " ", 
     RowBox[{
      SubscriptBox["\[Beta]", "k"], " ", "=", "0.", " "}]}]}], 
   TraditionalForm]],
  FormatType->"TraditionalForm"],
 "This hypothesis will yield the following F statistic. F =",
 Cell[BoxData[
  FormBox[
   RowBox[{
    FractionBox[
     RowBox[{" ", 
      RowBox[{"SSR", "/", 
       RowBox[{"(", 
        RowBox[{"k", "-", "1"}], ")"}]}]}], 
     RowBox[{"SSE", "/", " ", 
      RowBox[{"(", 
       RowBox[{"n", "-", "k"}], ")"}]}]], " ", "=", " ", 
    RowBox[{
     FractionBox[
      SuperscriptBox["R", "2"], 
      RowBox[{"1", "-", 
       SuperscriptBox["R", "2"]}]], 
     RowBox[{
      RowBox[{
       RowBox[{"(", 
        FractionBox[
         RowBox[{"n", "-", "k"}], 
         RowBox[{"k", "-", "1"}]], ")"}], "~", 
       RowBox[{"F", "[", 
        RowBox[{
         RowBox[{"(", 
          RowBox[{"k", "-", "1"}], ")"}], ",", 
         RowBox[{"(", 
          RowBox[{"n", "-", "k"}], ")"}]}], "]"}]}], "."}]}]}], 
   TraditionalForm]],
  FormatType->"TraditionalForm"],
 " This can easily be computed from the ANOVA table by remembering that the \
2nd and 3rd entries of the last row are SSR/(k-1) and SSE/ (n-k), \
respectively. "
}], "Text",
 CellChangeTimes->{{3.527964478591384*^9, 3.527964558848174*^9}, {
  3.5279646046863403`*^9, 3.5279647225016274`*^9}, {3.527964760580104*^9, 
  3.5279647890689645`*^9}, {3.527971478821124*^9, 3.5279714795406632`*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell["T statistics", "Subsection",
 CellChangeTimes->{{3.527964806258277*^9, 3.5279648091181626`*^9}}],

Cell[CellGroupData[{

Cell["General Theory about T stats (THIS IS GOOD STUFF I ADDED!)", \
"Subsubsection",
 CellChangeTimes->{{3.527964811458069*^9, 3.5279648216976595`*^9}}],

Cell[TextData[{
 "Whenever we have a hypothesis we want to test we would set it up like this ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{
     SubscriptBox["H", 
      RowBox[{"0", ":", " "}]], 
     SubscriptBox[
      OverscriptBox["\[Theta]", "^"], "i"]}], " ", "=", " ", 
    SubscriptBox["\[Theta]", "guess"]}], TraditionalForm]],
  FormatType->"TraditionalForm"]
}], "Text",
 CellChangeTimes->{{3.5279648264774685`*^9, 3.527964874605543*^9}, {
  3.527964932083244*^9, 3.5279649322732363`*^9}}],

Cell[TextData[{
 "To test this hypothesis we would just need to say that ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    FractionBox[
     RowBox[{
      SubscriptBox[
       OverscriptBox["\[Theta]", "^"], "i"], "-", 
      SubscriptBox["\[Theta]", "guess"]}], 
     SubscriptBox["s", 
      SubscriptBox["\[Theta]", "i"]]], "~", " ", 
    RowBox[{"t", "(", 
     RowBox[{"n", "-", "k"}], ")"}]}], TraditionalForm]],
  FormatType->"TraditionalForm"]
}], "Text",
 CellChangeTimes->{{3.527964874985528*^9, 3.5279649448027353`*^9}}],

Cell[TextData[{
 "We could test another hypothesis: ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{
     SubscriptBox["H", "0"], ":", " ", 
     SubscriptBox["\[Theta]", "i"]}], "=", 
    RowBox[{
     RowBox[{
      SubscriptBox["\[Theta]", "j"], "  ", "->", " ", 
      RowBox[{
       SubscriptBox["\[Theta]", "i"], "-", 
       SubscriptBox["\[Theta]", "j"]}]}], " ", "=", "0."}]}], 
   TraditionalForm]]],
 " This would lead to ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    FractionBox[
     RowBox[{
      SubscriptBox["\[Theta]", "i"], "-", 
      SubscriptBox["\[Theta]", "j"], "-", "0"}], 
     RowBox[{
      SqrtBox[
       RowBox[{
        SubscriptBox[
         SuperscriptBox["s", "2"], 
         SubscriptBox["\[Theta]", "i"]], "+", 
        SubscriptBox[
         RowBox[{"(", 
          SuperscriptBox["s", "2"], ")"}], 
         SubscriptBox["\[Theta]", "j"]]}]], "+", 
      RowBox[{"2", 
       RowBox[{"Cov", "(", 
        RowBox[{
         SubscriptBox["\[Theta]", "i"], ",", 
         SubscriptBox["\[Theta]", "j"]}], ")"}]}]}]], "~", 
    RowBox[{"t", "(", 
     RowBox[{"n", "-", "k"}], ")"}]}], TraditionalForm]]]
}], "Text",
 CellChangeTimes->{{3.527964945502707*^9, 3.5279650918368535`*^9}}]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Other Tests", "Subsection",
 CellChangeTimes->{{3.527965096616662*^9, 3.527965101476468*^9}, {
   3.527965174943529*^9, 3.527965188192999*^9}, 3.527966746354744*^9}],

Cell[TextData[{
 "Above we talked about testing the overall explanatory power of our model \
(the f stat), testing individual parameters or linear combinations of \
parameters (t-stats). Now we want to talk about a few other tests that can be \
used to test our model. The main idea behind this is that if a hypothesis \
about a particular variable is accurate imposing those hypothesis on our \
model shouldn\[CloseCurlyQuote]t effect ",
 Cell[BoxData[
  FormBox[
   SuperscriptBox["R", "2"], TraditionalForm]],
  FormatType->"TraditionalForm"],
 ", SSE, or log-likelihoodsvery much. "
}], "Text",
 CellChangeTimes->{{3.527965198542585*^9, 3.5279653831751995`*^9}, {
   3.5279714805200357`*^9, 3.527971484897233*^9}, 3.52797168260262*^9}],

Cell["\<\
There are a few basic steps to doing this:\
\>", "Text",
 CellChangeTimes->{{3.5279653839751673`*^9, 3.5279653912248774`*^9}}],

Cell[CellGroupData[{

Cell["\<\
Test the model without imposing any constraints\
\>", "Item1Numbered",
 CellChangeTimes->{{3.527965400774495*^9, 3.5279654071442404`*^9}}],

Cell["\<\
Estimate the same model, but this time with the constraints. Collected any \
additional data you might need to perform tests. \
\>", "Item1Numbered",
 CellChangeTimes->{{3.527965409244157*^9, 3.5279654452227173`*^9}}],

Cell["\<\
Compare results from the two models.\
\>", "Item1Numbered",
 CellChangeTimes->{{3.527965427433429*^9, 3.527965434583143*^9}}]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Chow test", "Subsection",
 CellChangeTimes->{{3.5279654480426044`*^9, 3.527965450102522*^9}, 
   3.5279657124570274`*^9}],

Cell[TextData[{
 "In this case we will look at the ",
 Cell[BoxData[
  FormBox[
   SuperscriptBox["R", "2"], TraditionalForm]],
  FormatType->"TraditionalForm"],
 "values and compare them in a ratio using an F statistic. Note that R, SSE \
without a * are before the restrictions and if they have a * are after the \
restrictions."
}], "Text",
 CellChangeTimes->{{3.5279655578132133`*^9, 3.527965588032005*^9}, 
   3.5279714865761576`*^9}],

Cell[TextData[Cell[BoxData[
 FormBox[
  RowBox[{"F", "=", " ", 
   RowBox[{
    FractionBox[
     RowBox[{
      RowBox[{"(", 
       RowBox[{"SSE", "*", 
        RowBox[{"-", "SSE"}]}], ")"}], "/", "r"}], 
     RowBox[{
      RowBox[{"(", "SSE", ")"}], "/", 
      RowBox[{"(", 
       RowBox[{"n", "-", "k"}], ")"}]}]], "=", " ", 
    RowBox[{
     RowBox[{
      FractionBox[
       RowBox[{
        SuperscriptBox["R", "2"], "-", 
        SuperscriptBox["R", 
         RowBox[{"2", "*"}]]}], 
       RowBox[{"1", "-", 
        SuperscriptBox["R", "2"]}]], 
      RowBox[{
       FractionBox[
        RowBox[{"n", "-", "k"}], "r"], "~", 
       RowBox[{"F", "(", 
        RowBox[{"r", ",", 
         RowBox[{"(", 
          RowBox[{"n", "-", "k"}], ")"}]}], ")"}]}], " ", "where", " ", "r"}],
      " ", "=", " ", 
     RowBox[{
     "#", " ", "of", " ", "restrictions", " ", "imposed", " ", "on", " ", 
      RowBox[{"model", ".", " "}]}]}]}]}], TraditionalForm]],
 FormatType->"TraditionalForm"]], "Text",
 CellChangeTimes->{{3.5279655909318886`*^9, 3.527965690167919*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell["\<\
The Likelihood ratio  (LR) test\
\>", "Subsection",
 CellChangeTimes->{{3.527965715046924*^9, 3.527965724966527*^9}}],

Cell[TextData[{
 "The theory or idea behind this is about he same, but instead of focusing on \
the ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    SuperscriptBox["R", "2"], " ", "or", " ", "SSE"}], TraditionalForm]]],
 " it focuses on the log likelihood value l. "
}], "Text",
 CellChangeTimes->{{3.527965732526225*^9, 3.527965770714697*^9}, 
   3.527971487695441*^9}],

Cell["\<\
If your hypothesis wasn't very good you should see a rather large drop in l. \
On the other hand if your hypothesis is really good you should see very \
little change. \
\>", "Text",
 CellChangeTimes->{{3.527965771064683*^9, 3.5279658205027056`*^9}, 
   3.527971489264436*^9}],

Cell[TextData[{
 "LR = 2 (l-l*)  = ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    FractionBox[
     RowBox[{
      SuperscriptBox["SSE", "*"], "-", " ", "SSE"}], 
     SuperscriptBox["\[Sigma]", "2"]], " ", "=", " ", 
    RowBox[{
     RowBox[{"n", " ", 
      RowBox[{"ln", "(", 
       FractionBox["1", 
        RowBox[{"1", "-", 
         SuperscriptBox["R", "2"]}]], ")"}]}], " ", "=", " ", 
     RowBox[{"-", 
      RowBox[{"nln", "(", 
       RowBox[{"1", "-", 
        SuperscriptBox["R", "2"]}], ")"}]}]}]}], TraditionalForm]],
  FormatType->"TraditionalForm"],
 "~ ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    SuperscriptBox["\[Chi]", "2"], "(", "r", ")"}], TraditionalForm]],
  FormatType->"TraditionalForm"],
 ", again r is the number of restrictions."
}], "Text",
 CellChangeTimes->{{3.5279658211126814`*^9, 3.527965925318513*^9}}]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Stepwise Regression", "Section",
 CellChangeTimes->{{3.527594604487088*^9, 3.5275946080244913`*^9}}],

Cell["\<\
Stepwise regression is used when trying to determine which variables or \
parameters to include when regressing a model. It isn\[CloseCurlyQuote]t \
theoretical at all (at least not economic theory) and you add or remove \
variables to see if the statistical effect is desirable. \
\>", "Text",
 CellChangeTimes->{{3.527965969306753*^9, 3.5279660318342524`*^9}, 
   3.5279714939014664`*^9}],

Cell["\<\
There are two types of stepwise regression- forward and backwards.\
\>", "Text",
 CellChangeTimes->{{3.5279660320742426`*^9, 3.52796605038351*^9}, 
   3.5279714960500903`*^9}],

Cell["\<\
In forwards regression you are add one independent variable at a time to see \
if it is statistically significant. If it is you keep it and move on to \
another variable. You should be aware that adding different variables to a \
model causes significance of older variables to change so you not only have \
to check significance of the added Variables each time, but also all \
surviving Variables. \
\>", "Text",
 CellChangeTimes->{{3.527966050673498*^9, 3.5279661619890456`*^9}, {
  3.5279714968495784`*^9, 3.5279714988982663`*^9}}],

Cell["\<\
In backwards stepwise regression you will do just the opposite. You start by \
doing the regression with all independent variables included and then you try \
to delete them one at time to see if it makes your model better or worse.\
\>", "Text",
 CellChangeTimes->{{3.527966162829012*^9, 3.5279662388659706`*^9}, {
  3.5279714997477226`*^9, 3.5279715021461864`*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell["Forecasting", "Section",
 CellChangeTimes->{{3.527594610639752*^9, 3.527594612518594*^9}, {
  3.527971503095578*^9, 3.5279715212949233`*^9}}],

Cell["\<\
Forecasting deals with trying to use data you already have to create a model \
and then use that model to predict values of an independent variables given \
certain values for independent variables. \
\>", "Text",
 CellChangeTimes->{{3.5279662843841496`*^9, 3.527966326222476*^9}, 
   3.527971519236242*^9}],

Cell[TextData[{
 "Remember from before that the Forecast Error FE is given by FE= ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    SubscriptBox["y", "t"], "-", 
    RowBox[{
     SubscriptBox[
      OverscriptBox["y", "^"], "t"], "."}]}], TraditionalForm]],
  FormatType->"TraditionalForm"]
}], "Text",
 CellChangeTimes->{{3.527966342671818*^9, 3.5279663649809256`*^9}, 
   3.5279715262017813`*^9}],

Cell["\<\
There are at least 4 things that will contribute to FE: having the wrong \
functional form for your model, random disturbance (error), uncertainty about \
the true values for \[Beta], and uncertainty about X. \
\>", "Text",
 CellChangeTimes->{{3.5279663652609143`*^9, 3.5279664165088644`*^9}, {
  3.5279664466576586`*^9, 3.5279664466976566`*^9}}],

Cell[TextData[{
 "If the problem is the existence of random disturbance (\[Epsilon]) you \
realize that FE= ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{
     SubscriptBox["y", "t"], "-", 
     SubscriptBox[
      OverscriptBox["y", "^"], "t"]}], " ", "=", " ", 
    RowBox[{
     RowBox[{
      SubscriptBox["y", "t"], "-", 
      RowBox[{"F", "(", 
       RowBox[{
        SubscriptBox["X", "t"], "\[Beta]"}], ")"}]}], " ", "=", " ", 
     SubscriptBox["\[Epsilon]", "t"]}]}], TraditionalForm]],
  FormatType->"TraditionalForm"],
 " and ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    SubscriptBox[
     SuperscriptBox["\[Sigma]", "2"], "FE"], " ", "=", " ", 
    RowBox[{
     RowBox[{"Variance", " ", 
      RowBox[{"(", "FE", ")"}]}], " ", "=", " ", 
     RowBox[{
      RowBox[{"Var", "(", 
       SubscriptBox["\[Epsilon]", "t"], ")"}], " ", "=", " ", 
      RowBox[{
       SuperscriptBox["\[Sigma]", "2"], "."}]}]}]}], TraditionalForm]],
  FormatType->"TraditionalForm"],
 " In this case the confidence intervals for ",
 Cell[BoxData[
  FormBox[
   SubscriptBox["y", "t"], TraditionalForm]],
  FormatType->"TraditionalForm"],
 " can be constructed ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    SubscriptBox["y", "t"], "=", " ", 
    RowBox[{
     RowBox[{"\[ImplicitPlus]", 
      RowBox[{"F", "(", 
       RowBox[{
        SubscriptBox["X", "t"], "\[Beta]"}], ")"}]}], "\[PlusMinus]", 
     RowBox[{
      SubscriptBox["t", 
       RowBox[{"\[Alpha]", "/", "2"}]], "\[Sigma]"}]}]}], TraditionalForm]],
  FormatType->"TraditionalForm"]
}], "Text",
 CellChangeTimes->{{3.5279664473576307`*^9, 3.5279666334501867`*^9}}],

Cell["\<\
If the problem is uncertainty about \[Beta] ASK JESSE AND LANCE FOR THEIR \
NOTES ON SECTION III PG. 33\
\>", "Text",
 CellChangeTimes->{{3.527966633460186*^9, 3.5279666408998885`*^9}, {
  3.52796669459774*^9, 3.527966709777133*^9}}],

Cell[" ", "Text",
 CellChangeTimes->{3.5279665812222757`*^9}]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["4", "BookChapterNumber",
 CellChangeTimes->{3.527594442284842*^9}],

Cell["Miscellaneous Topics - multicolinearity and Dummy Variables.", \
"BookChapterTitle",
 CellChangeTimes->{{3.527594463619616*^9, 3.527594495482765*^9}, 
   3.527971540112872*^9, 3.527971683941763*^9}],

Cell[CellGroupData[{

Cell["multicolinearity", "Section",
 CellChangeTimes->{{3.5275946179508667`*^9, 3.5275946222568417`*^9}, 
   3.5279715429110804`*^9, 3.5279716867499647`*^9}],

Cell[CellGroupData[{

Cell["Introduction/Review", "Subsection",
 CellChangeTimes->{{3.5279668007286882`*^9, 3.527966811218269*^9}}],

Cell[TextData[{
 "Remember that in the model y = X\[Beta] + \[Epsilon] the OLS estimator for ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    OverscriptBox["\[Beta]", "^"], " ", "=", " ", 
    RowBox[{
     SuperscriptBox[
      RowBox[{"(", 
       RowBox[{
        RowBox[{"X", "'"}], "X"}], ")"}], 
      RowBox[{"-", "1"}]], 
     RowBox[{"X", "'"}], "y"}]}], TraditionalForm]],
  FormatType->"TraditionalForm"],
 ". As long as the columns of X are independent (the parameters are not \
related to each other) ",
 Cell[BoxData[
  FormBox[
   SuperscriptBox[
    RowBox[{"(", 
     RowBox[{
      RowBox[{"X", "'"}], "X"}], ")"}], 
    RowBox[{"-", "1"}]], TraditionalForm]],
  FormatType->"TraditionalForm"],
 " will exist and you will be able to find a value for \[Beta]. If any of \
those columns, however, can be expressed as a linear combination of any other \
columns then ",
 Cell[BoxData[
  FormBox[
   SuperscriptBox[
    RowBox[{"(", 
     RowBox[{
      RowBox[{"X", "'"}], "X"}], ")"}], 
    RowBox[{"-", "1"}]], TraditionalForm]]],
 " is not defined and we have problems finding \[Beta]. "
}], "Text",
 CellChangeTimes->{{3.5279668126282125`*^9, 3.527966933463379*^9}, {
   3.527966980611493*^9, 3.5279669806214924`*^9}, 3.5279715443301716`*^9}],

Cell[TextData[{
 "Correlation matrix = Cor (X) = ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{"(", GridBox[{
       {
        RowBox[{"Cor", " ", 
         RowBox[{"(", 
          RowBox[{
           SubscriptBox["X", "1"], ",", 
           SubscriptBox["X", "1"]}], ")"}]}], 
        RowBox[{"Cor", " ", 
         RowBox[{"(", 
          RowBox[{
           SubscriptBox["X", "1"], ",", 
           SubscriptBox["X", "2"]}], ")"}]}], "...", 
        RowBox[{"Cor", " ", 
         RowBox[{"(", 
          RowBox[{
           SubscriptBox["X", "1"], ",", 
           SubscriptBox["X", "k"]}], ")"}]}]},
       {
        RowBox[{"Cor", " ", 
         RowBox[{"(", 
          RowBox[{
           SubscriptBox["X", "2"], ",", 
           SubscriptBox["X", "1"]}], ")"}]}], 
        RowBox[{"Cor", " ", 
         RowBox[{"(", 
          RowBox[{
           SubscriptBox["X", "2"], ",", 
           SubscriptBox["X", "2"]}], ")"}]}], "...", 
        RowBox[{"Cor", "(", 
         RowBox[{
          SubscriptBox["X", "2"], ",", 
          SubscriptBox["X", "k"]}], ")"}]},
       {"...", "...", "...", "..."},
       {
        RowBox[{"Cor", "(", 
         RowBox[{
          SubscriptBox["X", "k"], ",", 
          SubscriptBox["X", "1"]}], ")"}], 
        RowBox[{"Cor", "(", 
         RowBox[{
          SubscriptBox["X", "k"], ",", 
          SubscriptBox["X", "2"]}], ")"}], "...", 
        RowBox[{"Cor", "(", 
         RowBox[{
          SubscriptBox["X", "k"], ",", " ", 
          SubscriptBox["X", "k"]}], ")"}]}
      }], ")"}], " ", "=", " ", 
    RowBox[{"(", GridBox[{
       {"1", 
        SubscriptBox["\[Rho]", "12"], "...", 
        SubscriptBox["\[Rho]", 
         RowBox[{"1", "k"}]]},
       {
        SubscriptBox["\[Rho]", "21"], "1", "...", 
        SubscriptBox["\[Rho]", 
         RowBox[{"2", "k"}]]},
       {"...", "...", "...", "..."},
       {
        SubscriptBox["\[Rho]", "k1"], 
        SubscriptBox["\[Rho]", "k2"], "...", "1"}
      }], ")"}]}], TraditionalForm]],
  FormatType->"TraditionalForm"],
 " Remember that 0 <  Cor(X,Y) < 1"
}], "Text",
 CellChangeTimes->{{3.527966989401141*^9, 3.52796721867197*^9}, 
   3.527971545069698*^9}],

Cell["\<\
If two variables are completely independent the Cor between them will be \
equal to 1. If they are exact linear combinations of one another the Cor \
between them will be 0. Both are extreme and not very common (especially the \
second where Cor=0).\
\>", "Text",
 CellChangeTimes->{{3.52796721942194*^9, 3.5279672860892735`*^9}, {
  3.527971548397567*^9, 3.527971549057144*^9}}],

Cell[TextData[{
 StyleBox["Multicolinearity:",
  FontWeight->"Bold"],
 " We define this term as existing whenever Cor(X) <1. It almost always \
exists so we usually ask how bad is the multicolinearity rather than the \
question about its existence. "
}], "Definition",
 CellChangeTimes->{{3.5279672864792576`*^9, 3.527967361366262*^9}, {
  3.527971557941455*^9, 3.527971565246776*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell["\<\
Example with two explanatory variables\
\>", "Subsection",
 CellChangeTimes->{{3.527967370995877*^9, 3.527967380965478*^9}}],

Cell[TextData[{
 "A model with two explanatory variables is written as follows: ",
 Cell[BoxData[
  FormBox[
   SubscriptBox["y", "t"], TraditionalForm]],
  FormatType->"TraditionalForm"],
 " = ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    SubscriptBox["\[Beta]", "1"], "+", 
    RowBox[{
     SubscriptBox["\[Beta]", "2"], 
     SubscriptBox["x", "t2"]}], "+", 
    RowBox[{
     SubscriptBox["\[Beta]", "3"], 
     SubscriptBox["x", "t3"]}], "+", 
    SubscriptBox["\[Epsilon]", "t"]}], TraditionalForm]],
  FormatType->"TraditionalForm"],
 " where t= 1,2,...,n"
}], "Text",
 CellChangeTimes->{{3.527967406834443*^9, 3.527967473761766*^9}}],

Cell[TextData[{
 "With this model ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    SuperscriptBox[
     SubscriptBox["\[Sigma]", 
      SubscriptBox["\[Beta]", "i"]], "2"], " ", "=", " ", 
    FractionBox[
     SuperscriptBox["\[Sigma]", "2"], 
     RowBox[{"n", " ", 
      RowBox[{"Var", "(", 
       SubscriptBox["X", "i"], ")"}], " ", 
      RowBox[{"(", 
       RowBox[{"1", "-", 
        SubscriptBox[
         SuperscriptBox["\[Rho]", "2"], "23"]}], ")"}]}]]}], TraditionalForm]],
  FormatType->"TraditionalForm"],
 " where ",
 Cell[BoxData[
  FormBox[
   SubscriptBox["\[Rho]", "23"], TraditionalForm]],
  FormatType->"TraditionalForm"],
 " =",
 Cell[BoxData[
  FormBox[
   RowBox[{
    SuperscriptBox["Correllation", "2"], "(", 
    RowBox[{
     SubscriptBox["X", "2"], ",", 
     SubscriptBox["X", "3"]}], ")"}], TraditionalForm]],
  FormatType->"TraditionalForm"],
 "."
}], "Text",
 CellChangeTimes->{{3.5279674740017567`*^9, 3.527967541619052*^9}}],

Cell[TextData[{
 "The confidence intervals for ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{
     RowBox[{
      SubscriptBox[
       OverscriptBox["\[Beta]", "^"], "i"], " ", "are", " ", "given", " ", 
      "by", " ", 
      SubscriptBox[
       OverscriptBox["\[Beta]", "^"], "i"]}], " ", "\[PlusMinus]", 
     RowBox[{
      SubscriptBox["t", 
       RowBox[{"\[Alpha]", "/", "2"}]], 
      SubscriptBox["s", 
       SubscriptBox["\[Beta]", "i"]]}]}], " ", "=", 
    SuperscriptBox[
     RowBox[{
      SubscriptBox["t", 
       RowBox[{"\[Alpha]", "/", "2"}]], "(", " ", 
      FractionBox[
       SuperscriptBox["s", "2"], 
       RowBox[{"n", " ", 
        RowBox[{"Var", "(", 
         SubscriptBox["X", "i"], ")"}], " ", 
        RowBox[{"(", 
         RowBox[{"1", "-", 
          SubscriptBox[
           SuperscriptBox["\[Rho]", "2"], "23"]}], ")"}]}]], ")"}], 
     RowBox[{"1", "/", "2"}]]}], TraditionalForm]],
  FormatType->"TraditionalForm"],
 " where ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    SubscriptBox["t", 
     RowBox[{"\[Alpha]", "/", "2"}]], " ", "=", " ", 
    RowBox[{
     FractionBox[
      RowBox[{
       SubscriptBox["\[Beta]", "i"], "-", "\[Beta]"}], 
      SubscriptBox["s", 
       SubscriptBox["\[Beta]", "i"]]], " ", "("}]}], TraditionalForm]],
  FormatType->"TraditionalForm"],
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{
     RowBox[{
      SubscriptBox["H", 
       RowBox[{"0", ":"}]], 
      SubscriptBox["\[Beta]", "i"]}], " ", "=", " ", "\[Beta]"}], ")"}], 
   TraditionalForm]],
  FormatType->"TraditionalForm"]
}], "Text",
 CellChangeTimes->{{3.527967542129031*^9, 3.5279676601743093`*^9}, {
   3.5279676980927925`*^9, 3.5279676980927925`*^9}, 3.5279715664360147`*^9}],

Cell[TextData[{
 "We can see that there are other things besides \[Rho] that effect ",
 Cell[BoxData[
  FormBox[
   SuperscriptBox["\[Sigma]", "2"], TraditionalForm]],
  FormatType->"TraditionalForm"],
 " for each \[Beta]. In order for us to focus on the effect multicolinearity \
on the variance of a particular \[Beta] we need to define something called \
the Variance Inflation Factor (VIF)"
}], "Text",
 CellChangeTimes->{{3.5279676984727774`*^9, 3.5279677881791887`*^9}, 
   3.527971572871893*^9}],

Cell[TextData[{
 StyleBox["Variance Inflation Factor (VIF): ",
  FontWeight->"Bold"],
 "The Variance inflation factor is equal to ",
 Cell[BoxData[
  FormBox[
   FractionBox["1", 
    RowBox[{"1", "-", 
     SubscriptBox[
      RowBox[{"(", 
       SuperscriptBox["\[Rho]", "2"], ")"}], "23"]}]], TraditionalForm]],
  FormatType->"TraditionalForm"],
 "and estimates how much the variance of an estimated parameter is effected \
by mulicolinearity. A high VIF means a larger effect on the variance of the \
estimate and it means you have more severe multicolinearity. "
}], "Definition",
 CellChangeTimes->{{3.527967793748966*^9, 3.5279678245077353`*^9}, {
   3.5279678784365788`*^9, 3.5279679571834283`*^9}, 3.527971575230383*^9}],

Cell[BoxData[
 RowBox[{"Plot", "[", 
  RowBox[{
   RowBox[{"Evaluate", "@", 
    RowBox[{"Table", "[", 
     RowBox[{
      RowBox[{"PDF", "[", 
       RowBox[{
        RowBox[{"NormalDistribution", "[", 
         RowBox[{"3", ",", "\[Sigma]"}], "]"}], ",", "x"}], "]"}], ",", 
      RowBox[{"{", 
       RowBox[{"\[Sigma]", ",", 
        RowBox[{"{", 
         RowBox[{".75", ",", "1", ",", "2"}], "}"}]}], "}"}]}], "]"}]}], ",", 
   
   RowBox[{"{", 
    RowBox[{"x", ",", 
     RowBox[{"-", "6"}], ",", "9"}], "}"}], ",", 
   RowBox[{"Filling", "\[Rule]", "Axis"}]}], "]"}]], "Input",
 Evaluatable->False,
 CellOpen->False,
 CellChangeTimes->{{3.527968102277624*^9, 3.527968119786924*^9}, {
  3.5279682095233345`*^9, 3.5279682096333303`*^9}, {3.5279682403421016`*^9, 
  3.527968240662089*^9}}],

Cell[BoxData[
 GraphicsBox[{GraphicsComplexBox[CompressedData["
1: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
kns87CMW9dZvXbbBC/73/Xnw/8P/7+3/AN90Ncc=
    "], {{{}, 
      {Hue[0.67, 0.6, 0.6], Opacity[0.2], EdgeForm[None], 
       GraphicsGroupBox[PolygonBox[CompressedData["
1:eJwl2GW0VVUbhuEjmIAoKSAhnYqgkoJ0I10qDSqggIGJICldKgoG3SgN0mnQ
3d3SLYL1Xe/4fsyx7vt53q3j7DXXXFuztupUt2OihISEe6zj9yYkfOb6ftKE
hMKud/g3iRMSrrmWNlQcj8BlDffA+/AuvE2XH//gM0Pkp3Fy2UO4Nf5X/gqe
j0eYH6I7z1+Rj3S9KM8ly4o/wk+Y6Yh/xvPxbF1S3Nf8Z/Ij+Jr8orwy3iuv
Jp+AO8hfk6/jheSjXa/KS8mK4eG4jJlP8V68E2/V5cMzzQ+Wn8IPyx7ErfA/
8pfxPDzc/GDdOf6y/EvXC/KcsifwhziLmTfxOjwPz9IlwX3MX+UXeCW+h1c1
Nx63l78qX8uflo9yvSJ/XlYUD8MvmOmO9+AdeIsuL55hfpD8JE4mewC3xH/L
X8Jz8TDzg3S/85fkX7iel+eQZcEf4Mxm3sBr8Vz8Y9xD3Nt8X/lhfEV+Xl4R
75ZXkY/D7eRt5Wt4QXlJXAQPjb2j64Z34+14sy4Pnm4uKb5f14L/xZvgOXio
uYG6s7yJPDvOjN/XZdJ1wGvwHPxD3Cvcy9xlfo5XiL3JK5sbi1+Xt5Gv5k/J
S+Dn8JDYG7pP8C68DW/S5cbTzCXB9+ma87u8MZ6Nh5gboDvDG8uz4Uz4PV1G
XXu8Gs/GM+Oe4J7mLvHfefnYe7ySuTH4NXlr+Sr+pLw4fhYPjj2g64p34q14
oy4XnmruIXyvrhm/wxvhWXiwuf6607yRPCvOiLvoHte1w6vwLDwj7gHuYe4i
P8vLxR7jFc19j1+Vt5Kv5AXkxfAzeJCupO5jvANvwRt0OfEUcw/ixLqm/E/e
EP+IB5nrpzvFG8qfwI/jd3UZdK/jlfhHPD3uAf7U3AV+hpeNvcQrmPsOt5W3
lK/g+eVFcWE8UFdC9xHejjfj9boceLK5B3CiOIv4bd4A/4AHmvtMd5I3kGfB
GfA7uvRxxuAVcebhaXEPcHdz5/lpXib2Ei9v7lvcRt5CvpznkxfBhfAAXXHd
h3gb3oR/02XHk8zdj++Js4b/wQfo+8pOyOrzzDg9flufLvaaNTW+c95Nf46f
4i/E3uGteXO+zGfy8ufw07i/vljsLetXWTY+UX9fvBzizOC3YH99H9lxWT2e
CafDb+kfi71kTYnvlH+i/52f5KVjb/BWvBlf6jN5+LO4IO6nLxp7x/ol3gV8
gv5e/J/VhN/k/fS9+TGfqcsz4sdwZ33a2CvW5PjOeFf9WX6Cl4p7z1vypnyJ
z+SO+xD7wfo5zm8z4+PPxf9ajfmNeOfoe/GjPlOHp4l7bk2K78bMxy5n+HH+
fNxD3oK/whf7TK74nuO+WuvivDUzTpYI/2M14tfjjNX35Ed8pjZPHffSmhjf
QbwbZaf5MV7SZzby5vxl/pM+Z3yfcf+stXFemhkru2b1iXe27LC5WjxV3Cdr
Qvyt8d6SbbCayV6SLZLl4M/E/bDWxPnmnzcm3mFW73iHyg6Ze5GnjO/dGh9/
U7xPZOutprImsoWy7Px764rVK95l8oPymvGbw/otfifIG8sXyLPx7+JMt3rG
O0R+QF6Dv2f9Gu9leSP5fHlWXt3qYv0S7z5dQ9083RP82zh/rR5x3sv3y6vx
FHEvrXGyv+MMkp3iR3kJf/PP8V7iDfhcfZb4XvBT+DN94dg/1uo4Y+M3k36g
7gS+J/6ZVkN8UV5fPjPOMvPXY4/q9smq6v7kn+NzcUbLb8We5p1cHzX/R5zD
fHk8m/xG3F9zf8W55PO34zcGPuR6Un/T9Yi+uOs6fTndN7ixrr58Ds8sL4yf
xH11hXQf4K3xGbwqzmU8OiE2rH+X1YBfoN3j3Od7zVfhj8R+ssbI7saZJFsb
7yRZPdlsWab4bRPnpNUtzmX5Hnll/pa1Jt4R8rryWfKM8Y60Olur43zW1dH9
qHucfx1nnPVJnKHy3fKKvJO1Kr5veW35D/IM/Ks4k6yu8XfKd8kr8OSxd63v
ZXdkHWUrrXqyWrKZsvT86Xi2rJXxPvA9jIwzxvpY9r5sp7ny/OHYT9Z3sj9l
b8pWWHVlL8pmyNLxgvFsWSviHPfP+1L2H7/L6/Mz/CP+Ht/hM+V4Mj7W+lZ2
W/aG7AQ/zIv5zHJeh9fk0/WP8adif1rL47w284XsX36H1+On+Ye8C9/uM2V5
0riX1jeyP2QdZMf5IV7UZ5bx2rwGn6ZPy5+MPWMti3M59rPsH/4nr8tP8Q/4
u3ybz5ThGXCa+M71SeIeWKNj/8va64/xg7yIfimvxavzqfo0vBAugPvoC8S9
sZbK0vIR+r/5bV4nnos4a/g7fKvPvMDT49Rxj/QPxT2zRsluytrpj/ID/Dn9
Ev4ir8an6FPHnsD5cW99/riX1pL4m/hw/V/x7PLa/EScXfxtvsVnSvN0OFXc
R/2DcV+tr2U3ZK/rj/D9/Fn9Yl6TV+WT9aliD+F8uJc+X+xDvCX2AV4cfxse
Zu4uv8Vr8eOxt83NwF3kb8k381Lyx3DKuN+6B3Rt8bI41/BXuuv8NXOH+T7+
jO4nXlY+GteQV5FP4ilj7+G8uKcub+xlvDn2D/4p/nY81NydOLP4i/xYPCvm
puN35Z3lm/jz8rQ4RewN3f26NnhpnFF4pO4af9XcIb6XF9Yt4mXko3B1eWX5
RJ4i9izOg3vo8sQzgDfFXsOL4rvAQ+J8jjOX1+RH4xkzNw2/I+8k38hLytPg
R2Pv6O7TtcZL8Cj8pe4qb2vuIN/DC+kW8hfkX+Nq8kryCfxReQGcG3+qyx3P
Dt4YexEvjO8CD47zP94pvEac+/FsmpuK35bHf+Rv4CXkqfEjsbd09+pa4cX4
a/yF7gpvY+4A382f1i3gpeVf4aryivLx/BF5fpwLd9flimcLb4i9ihfEd4EH
mfuDX+PV+eF4js1NwW/J35Sv58XlqXDy2GO6xLqW+Cf8Ff5cd5m3Nref7+IF
dfN5KflIXEVeQT6OJ5fnwzlxN13OePbw+tizeH58F3iguQGJ////QG7Jr8qr
4UPxvMsn487yN+S/8WLyEa6/y1PKHo49hxOZaYEXxbsBj9Bd4q3M93Y9KN8n
3xm/H/A8+fPyL3FleXn5WP6wPC/OgT/R5YhnFP8WexnPi+8IDzB3k1/hVfnB
OB/MTcKd5B3kv/Ki8uGuZ+UpZMliD8bvEzPN8cJ49+Dhuou8pflergfke+U7
4jcCnisvKf8CV5KXk4/hyeJd7Ho5niFZdtwVZ49nF/8aexzPje8K9zffX34M
35BfllfBB+Q15BNxR3l7+S+8iHyY65n4LSRLGnsUx/+4aoYXxDsND9Nd4C1U
PV33y/fIt8c7As+Rl5B/jivKy8q/50njt4HrpXjGZNnwxzhbPNv4l3gG8Jz4
7nA/8/3kR/F1+SX5fln1eI/wdvG+4EPjGcFJXP/jTePfrR8qa85349muFVyT
uGZ1/R+yCH1M
         "]]]}, {}, 
      {Hue[0.9060679774997897, 0.6, 0.6], Opacity[0.2], EdgeForm[None], 
       GraphicsGroupBox[PolygonBox[CompressedData["
1:eJwV1nXYVFUbhfGhU2kQVLpLSkXQT8IAg5IW6W4LMOjubqQ77Q66QVIagy7B
DhC+3/PHus5a99rzzjtn9tnP5Gvdo173pIlEIgm1TJ5I1E+dSPRKl0iUSJFI
tEqTSNSTm7hWT5VIlOUr83VTJhK1+Ab8z/xp3WX5A68pwGfm79el162k2dhy
rKm+HJ+PL6Evq9tL32C7sJH61PzflEz/kzxA/4o8QF9crsaX4Svp6+iu0Sns
Eva+Pj+fib9Pn063gmZhy+Jz6MvyeeNv6cvo9tDX2E5shD4V/xcl1f8o99e/
LPfXF5Or8g/wj+hr667SSewi9p4+H5+Rv1efVrecZmJLscb6Mnye+Fv6B3S7
6StsBzZcn5L/k5Lof5D76XvK/fRF5Sp8ab6ivpbuCp3ALmDv6vPyGfhc+jS6
ZTQDW4I10peWd9GX2HZsGJaC/4MSXvO93FffQ+6rLyI/L1+m49h5bB2Wh7+b
z+k1qXVLaTq2GGuoLyXvpC+wbdhQLDn/O92RT8tv67vLb8uF5efkS3QMO4et
xXLzd/H3eJ9UuiU0DVsU+09fUt5Bn2NbsSFYMv43ui2fkt/Sd5PfkgvJz8oX
6Sh2FluD3c+n53N4n5S6xTQVW4jV15eQt9Nn2BZsMJaU/5X+k0/Kb+q7ym/K
BeVn5At0BDuDrcbu49Px2b1PCt0imoItwF7QF5e30afYZmwQloT/hW7JJ+Q3
9F3kN+QCck35PH2H/YStwu7l0/LZvE9y3UKajM3H6umLyVvpE2wTNhBL8Dfo
pnxc7qPvLPeR88s15HN0GPsRWxn3Wl5Ak7B5WF2sqLyFPsY2YgOwY9Qb64T1
xvLJT8tn6RD2A7Yi7qk8nyZic7E6WBF5M32EbcD6Y0epF9YR64XllZfHvcLm
0QT8Hbw2VljeRB9i67F+2BF6HeuAvY7lkZfFPcDm0nh8Dl4LKyRvpA+wb7C+
2Hf0GtYeew3LLS+lO/QOPg6fjT8f+5wO06t4O/zVOB/lJXSb5uBj8Vn4c7Ff
6RC9grfFX4nzLPZt7DE6SC/r2uhejrNGzhX7LfYGHaCe+tb6nvGMyovpP5qN
j8Fn4jXlgvIGeh/7GusTn0G+Lv8r75d7yK3kHvEcyo/zpfiH7a2ndM/HM8Kf
4Q/qvpcXWVcnzhw8F5aGz8rfitfzT/OzrG/qOlo/A6uhaxnzJc7KOB/xl1xz
x9nnWsD65vGecV9d18svur5n3VdYb69vEedynEGut/XNYkbp/8H26Su6VsW6
61ri3eOZx//Hl+Qf0j2pey6ex5hB/AHdaXmhdTn51HwW3U15pn4UNj0+U8yf
mGf0LvZlzFLsW+qGtcC6xbMvL6B/aQY+Ep+GPxV7kvZS1/iseNd4huX59A9N
x0fgU/EnYw/SHuqCv4R3ifssPxH7jXZT57gPus7xf8vVY2/RLuoU91DXSZdZ
nkd/0zR8OD4Frxb7jXZSx/jO8I54Jnku/UVT8WH45Li/MQdjrtI67AusJ7aD
OmBNsA5YxnhW6E+agg/FJ+FVYo7FXKS12OdYD2w7tccaY+2xDPE55R9pP3YK
m4P9QZOxIdhE7PGYVzHzaA32GdYd20btsEZYO+zuuDfyD7QPO4nNxn6nSdhg
bAL2v5hLMdtoNfYp1g3bSm2xhlhb7C65mvw9fYudwGZhv9FEbBA2Hnss5k/M
MFqFfYJ1xbZQG6wB1gZLL1eVT9Ne7Dg2E7uHTxXfnz35qzxBPxAbhz0aMyfm
Fq3EPsa6xFkgX5P/ljfLreX6cms5nVxFPkV7sGPYDCwHnzK+d+/zizxePwAb
i1WOmRNzi1ZgH2GdsVvyVfkveZPcSn5BbiWnjbNAPkm7saPYdCw7nyL2h/e5
IY/T98fGYJXirIu5RcuxD7FO2E35Svx2kjfGOSLXk1vKaeL5lk/QLuwINg3L
xiePfeR9rstj9f2w0dgjcmn+/vgNpM8Z84yWYR9gHeP5lS/Hbyd5Q5w9cl25
hZxafkw+Tjux77CpWFY+Wey1OJfkMfq+2CisYnyXMedoKfY+1iGee/lS/HaS
18vN5TpyczlVvA9fgn/Q33xUd4x2YIexKfosfNLYj/pr8mj929jIOMPlUvx9
fGF9jpiTtAR7D2sf54F8MX5Tyd/IL8m142yWU8qP8sX5Cl5fWXeUtmOHsMn6
zHyS2L/6q/Io/VvYiDhv5ZL8vXwhffaYs7QYexdrF+eLfCF+a8lfy83kWnIz
OYVcmS/Gl/f6SrojtA07iE3SZ+ITsa/1V+SR+jex4XHP5BJ8Lr6gPlvMQlqE
rcPaxvkkn4/fYPJX8osx8+QX5eRyJb4oX87rH9F9R1uxA9hEfUb+Tvwe01+O
vRhnPT/CujfwYXHv8OJ8Tr6ALqvuyfg9EPONX6hbK7eJ800+J9+Qv5QfjjPT
uqYxt/CmcjL8Eb4IX1ZXUXeYtmD7sQn6DPztmM36S/JwfR95aNxLuRh/D59f
nyVmGi3A1mCt41yUz8rX5S/kJvKzchM5acxavjBfxusfjo6vxx/iN+v2yeOt
u5v/L+aq7mLs55ht/DDreuND4t7iRfkcfD5dZt0T/LP8On6+brXcKs5X+Yz8
s/y5/FDMAOsa48/gjeUkcd/4QvwDuoei4+vyB/lNum/lcdbdxd+KM1Z3IfY7
/gQ/1Lpe+OC4x3gRPjufV5dJV51/hl/Lz9Otklta96v8k3xN/kx+MGaKdY3w
mngjORH/N1+QL617MDq+Dn+A36jbK4+1Lj1/M85m3fl4HvDq/BDrXscHxXeA
F+az8Xl0GXXV+Jr8Gn6ubqXcwrpfYqbKV+VP5Qoxo6xriNfAG8p3kvuf+AJ8
KV2F6Pja/H5+g26PPMbr0/H/xpmuOxfPS/ym4Adb9xo+ML4DvBCflc+ty6Cr
ytfgV/Pv6FbIza27ETNaviJ/IpePOWddA/xpvIF82/9Xgc/Pl9SVj46vxe/j
1+t2y6O9Pi3/T8wC3dl4bvBB1ryKlZYLumaJMxur4rrKdU6cf7rrMd9jrvLl
dPXlp2I/e//yruVi9tMofRr5jOtAuVTsK9dmrh/RC/G86/8Pz0Axeg==
         "]]]}, {}, 
      {Hue[0.14213595499957954`, 0.6, 0.6], Opacity[0.2], EdgeForm[None], 
       GraphicsGroupBox[PolygonBox[CompressedData["
1:eJwV1VW4VGUYgNGhpLs7pbu7kVTCxka6u1tAQVFJQVEw6O7u7u7uDgHpcP0X
6/m/790zF2dm7zmZG7Vr0DZqJBKJQjJDo9iRSOe4kUgXRpk7OWPRislxIpHX
NDLXdv7OYxran3ptafMPXKGmtkw7TQZ7e3aQTx+pPaGU/XsuU0Nfqp0ivb0d
28mrj9AeU9I+jEtU15doJ0lnb8s28ug/a48oYR/KRd7SF2snSGtvw1Zy6z9p
/1Hc/h0XqKYv0o6Txt6aLeTSf9QeUsz+Leepqi/UjpHa3orN5NSHaw8oah/C
OaroC7SjpLK3ZBM59B+0+RwhpdaCjWR37XttHodJoTVnA2+6Nkwbynd8yxAG
M4i5HCK51zZjPdm85xttDgdJpjVlHVldG6jdp4h9MGeprM/WDpDU3oS1ZNEH
aLXME3jEx9q/WmHzIM5QSZulvWUex33e1/ZrE81P+dSexNmYNWS293f9H/Mr
vrLXdEZ3NuM38398ZL7ndW84W/Cn9pzPzYWcUZyNw98cvk/naWdF50zv6eiM
SUv+Cvef84XzC2e1cP86o9KEX8L9E/4253vOfd7fwRmD5vwR7kfnE+cnzsTO
iPPrwLyaTOZ+3ve3+SVf2ms4ozmb8qv5IR+a73rdJPMzPrMXdA7kFBXsM1yv
ah7LPd7V9mqJwrPKKjJqfbXq5vE84APtjlbAPICTlNema1XMY7hLA22PljB8
9qwkg9ZHu01+e39OUE6fpu0mQfi7WEF6vbc2lV3ED58ty0nnWi+tJz3oTje6
0oUp7CRe+C5ZRlrv6axNZgdxw2fDUtK41incL2wnTrinWEJq1zqGz51txA7f
EYtJ5VoH7Rb57P04TtlwT2hbiWVvyCJS6u21m+S19+UYZcK9p20hZngOWEgK
vZ12gzz2PhyltD5J2xzu3XAfs4DkelvtOrntvTlCKX2itokY4R5hPsn0Nto1
ctl7cZiS4Z7UNhI9fO/MI6neWrtKTntPDlFC/13bQLTwfDKXJOH/gHaFHPYe
HKS4PkFbT9TwTDCHxOF50i6T3d6dAxQLz6xW2TyaO9TX1mlRwv3LbBKF51i7
xJv2buynaHg+tErmUdymnrZWi4T7lVkkDM+jdpFs9q7so4g+XqtoHskt6mpr
tNfUt88kQfh9sV8gq70Leymsj9MqmEdwk3e01dor6tlnED88y/bzZLF3Zg+F
wm+IVt78Mzd4W1ulvaSufTrxwu+N/RyZ7Z3YTUF9rFbO/BPXqaOt1F7wjn0a
ccPvnf0smewd2UUBfYxW1vwj16itrdCe87Z9KnHC75X9DBntHdhJfn20VsY8
nKvU0pZrz6hjn0Js7X+MBB3h
         
         "]]]}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}}, {{}, {}, 
      {Hue[0.67, 0.6, 0.6], LineBox[CompressedData["
1:eJwl2HfYjoUbh/FXKLKyop0ykhmZKbOIsmVkj2jYWVkh2VtWVkZl75FC2YXM
7BkZ2Qptv891/P64jvs8v9/rfo+397nHoyxN21ZvkyghIeHPJAkJcZycOCGh
5D0JCWXIQt7AFDSiBFWCtYSk5l5zn0lmkpspylKWyjpvEW9onjeb5a3k78kP
8QEmC77fsZzjYsefHBs5jrA3Bjdwzl1+v2Ma2QjHQvxt3FpfiR/mV/hNftIv
NVA2UJYSL5GvkG/BbeVP4e74KZxDdwWPxynsT3UsLXvZzhh5cb5EnhvvkR+Q
H8Z95Y3llxxHysfKV8gbxh8FN8cp8AO6c3gkLqza4viOLP7Is+Sv8SPyCviq
/Df5KTxIPkieCi+Vr5Rvxe3kT+Me+Gn8jO4qnoBT2p/mWEb2ip2x8hf4Unke
vFd+UH4E95M3kV92HCX/RL5S3ognwi1wSpxWdx6PwkXsb3V8V9bWzmz56/yo
/FV8Tf67fDBPzZfxVXwbbm8vK+6Js+KculT2puOyuLzuE10JvkyeF++TH5If
xR/Jm8Zn7DhaPk6+St6Y34PfwqlwOt0FPBoXtb/N8T1ZOzufyyvzY/KK+Lr8
lvw0HiwfIk+Dl8tXy7/HHeTZcC+cDT+rS23vM1wOV9CN073Il8vz4f3yw/Jm
/Kp8DB/PV+ua8MS4JU6N0+uK2fset8btdV/oqvDj8kr4hvy2fCh/gK/gX/Ef
cEd72XFvnB3n0qWxNwO/jF/Vjde9xFfI8+Of5EfiGuXX5GP5BP6VrilPglvh
NDiDrri9H3Ab3EH3pa4qPyF/Dd+U35EP42n5Sr6Gb8fvxz2GP8Q5cG7dA/Zm
4ldwRd0EXUm+Uv4cPiA/Gtcgvy7/hE/ka3TNeFL8Nn4AZ9S9YG87bos76ubo
qvGT8tfxb/I/5MN5Or6Kf8134E5xD+E++BmcR5fW3ixcHlfSTdSV4qvkBfBB
+bG45vgN+Tg+iX+ta87vxe/gtPhBXQl7O3A7/L5urq46PyWvjH+X/ykfwdPz
1fwbvhN3jnsF98U5cV5dOnuzcQX8mm6SrjRfHc9mfEh+PK4xflM+nn/Kv9G1
4Pfhd3E6nEn3or2duD3upJunq8FPy6vgW/K/5CN5Bv4VX8t/xF3insD98LM4
ny69vc/xq/j1uK7i2a8/zE/EtcV/00/gk3ky854+vSyz7CX9j7gD7qz7mVfV
3+Z/81E8I1/D1/Fc5iOeyzn5ZRn0X+CKuHJcN7yQ/gg/GdcO/10/kU/hyU1r
fQbZQ7KS+l24I+6iO8Or6e/wf/ho/iD/mq/nuU1/nts5z8ky6r/ElXCVuC54
Yf1RfiquDX5LP4lPjXefaaPPKHtYVkq/G7+Pu+rO8ur6P/i/8V7imfg3/Fue
xzwom+Oc12RV47PmRewc46fj8+a39Z/yaTyFKS3bI+sk68Z/4TWc8yf/L94f
PDNfy7/jeU0m2VznvC6rxtfyonaO85/jc+R39JP5dJ7SlJHtlXWWfcDP8ZrO
+Yvfjec+f4iv4xt4PpNZNs85lWXV+Tre2vwhmyL7TJbKlJXtk3WRdefn+Tjz
sJ+3XrZRlt88JJtvr4qsBl/P28T3HNlU2QxZalNOtl/WVdaDX+Dj4+eZBfKq
8pryb3lb83J8X5F3k/eUX+QTzCNmobyavJb8O97OvGIeNYt01XVv6Dbw9qa8
OSD/QN5L/iufaB4zi+U15LXlG3kH85dsmmymLI2pIDso6y7rzS/xWv4Of8eX
tXhGxe/Fv8Wb9Ltw17hm8cc4Dy6ge9zeElwT19F9qivDN8mL4RPxnnc8ozvm
2F93J95F+r/x9Pgew2fF9eH4lux2PK95W8cH+S3HR+xddBzD/3B81fmHcA/5
Tf6h/fmONWWXdW/gf3SJ4lrDQ+J6jr8n/k622X4BM4Dn1RWUPaFfimvhurrN
vLj+JD/L3+f/6D/js3laU1F2WNZT1odf4ZPNk2aZ/A15PfkW3ine0SaLWa6r
rXtTt5V3jvejOSLvJe8rv8qnmKfMCnkdeX35Nt4l3lfmqLy3vJ/8Gp9qnjYr
5XXlDeK7Ce9q/pXNkH0uS2cqy47JPpR9xK/zaXEN+W/eINsiK2iyylbZqydr
GN8leDfzn2ym7AtZelNFdlzWR9af3+DTzeN+3kbZVtnzJptstb03ZY3i3c9f
sHOK/8I/4Hf1s/iXPIOpKjsh6yv7mN/ktZ3zL78n7nH+BN+Et+kLmeyyr5xT
X9Y43uG8hJ3T/BzvzuMfJbP5HJ7RVBOddE4/2QD+G69j5z+eOO79+Gz5Zvy9
vrDJIVvjnAayJvEu5i/a+Zmf5z14Iv45nxvPX9OOZ3LOo/HM0p/CH+GBut95
Xf1dniTu2bhm+Bb8g76IGcjzOed52TP6r3FD3DTetfyluOf4Bd4zbmn+BZ8X
z2XTnmd2zmPxjNOfxv3xIN0tXk8f/2hLKpsV1yDfirfri5pBPL++kCyn/hvc
CDeLZwUvqT8b9yzvFT+Kf8nnx/PadOAPOefxeEbqf8Yf48G62/xNfaL4fhT3
WlzTfBveod+Nu+mK4cH4OVxY96y9tbgxbq6brCvLd8tL4V/kv8p7x8fO5/AF
8b7ALeN9jjvih/ET8Sy2dwYPwEN0C3S14vklr4/vie9HcT/xrPx7vNPeHvyB
rjgeggvgIrpc9tbhJriFboquHN8jL43PyS/JP+RJ+Vy+MN4/uFW87+MZFM9C
/GS8D+ydxQPxUN1C3RvxfJQ3wIlxsrg/eTb+A/7R3l7cXfcCHooL4qK63PbW
46b4Ld1U3ct8r7wMPi+/LO/D7+Xz+KJ4v+G37T2CO+FHcZZ4/9j7BQ/Cw3SL
dLX5n/KGOAlOHvc4z86341329uEeuhJ4GH4+PmtdHnvf4ma4pW6a7hW+T14W
X5Bfkffl9/H5fHG8T/E7ca/hzvgx/FS8r+ydw4PxcN1iXR3+l7wRTorvj2cD
z8F34N329uOeuhfxcFwoPmtdXnvf4ea4lW66rjzfLy+HL8qvyvvxZHwBXxLv
dPxu3Iu4C34cPx3vIHvn8RA8QrdEV5f/LW+M78Up4pnCn+E78R57P+Feupfw
CFw4PmtdPnsbcAv8tu4zXQX+U3w3wb/Kr8mP44/jeSRPjhfKl8Z3Cfxe3LO4
K34CZ417Co+N94P9C45DZSPtLJXX4//Im+D7cErdGTwUz5PnxD/K9to/gHvL
S+KRuEhcA/E74Yk4v/2Njm/J3rEzI74H8APxXQlfkl+X9+f380V8Gd+EW8c9
jbvhJ3G2uNfwJ/Eesn/RcZhslJ1l8jf5v/KmOBlOFd8B8DA8X/4s3iXbZ/9g
fP+Ql8KjcNG4NuJ3wZPiO5P9TY4tZe/amSmvyA/Ky+PL8hvyE3hAPAflKfBi
+fL4HoLbxD0f70acBWePexGPi/eb/V8dh8tG21kur8//kzfDyXHqeLfi4XiB
PBfeLdtv/xDuIy+NR+Nice3E74Q/Tfz//79XwDn/AyYkhEw=
        "]]}, 
      {Hue[0.9060679774997897, 0.6, 0.6], LineBox[CompressedData["
1:eJwV1mXYFGUYhuGlOwy6xQAkpcGkpDtEpRsUbMKmUbC7i+7u7lS620K6Gzyf
H88x93XdM9/ut/u+M1ugfa/GPZMkEomuyROJa6ZJ6kSiWqpEonHKRGJGikTi
GVPUXNfdME311fVN9DP5Z00GuZjju45HHdPo33P8HT9kSuObrq3h2DScvzFL
fxCfxq3k7+Tx8uO6jI53Od7LFde97Nifq8j9iZOnSSSucmnN+3gDv0T+wzn1
dU/i0nJR+R65jO6W128mPyk30z2sK41nu/644yH+DN8aj8Xf4wm4pvOewJnk
vPLd8n26EvH/yq/IA3RVdJXwX3wK+RqfzgzHG/ml8mbnNdDVjPcUn5lcUC6r
u+39NZdrys11j+jK4DmuP+F4mD/Lt8Hj8A94Iq7lvCo4s5xPziLfryvpvP7y
q/JAXVVdZfw3n1K+zqc3I/Amfpm8xXkNdbXiPcnF5XvlcrqE81rIteQWukd1
ZfFc/qTjEf4c3xaPxz/iSbi286riO+T8clb5AV0p5w2QX5MH6arpHsb/8Knk
G3wG80GsI365vNV5jXS14z3JJeT75PK6JM57Sq4tP6V7TFcOz+NPOR7lz/Pt
8AT8E56M6zivGr5TLiBnkwvpHnLeQLm3PFhXXfcI/pdPLd/kM5oP8R/8Cnmb
8xrr6sR7kkvK98sVdEmd11KuI7fUzcenYz3jC7g9noh/xlNi/Zt7XJ+dK8yV
1g+S+8hDdMdin+lv4UzmI7xZv1Lerq9gSukf4CpyyfRPy3Xlp2Of6crjBfyZ
WLf8Rb4DnoR/wVNxXedVx3fLBeUcchFdGecNlvvKQ3U1dI/i//i08m0+s/kY
b+FXyTtiD8f+1xfiKnHJ4x4j15Of0S3EZ2Od4ku4I56Mf8XTcBZzr+tzcg9y
ZfVD5H7yMN1xnE6fiDXHfYK3yqvlnfpKcT/SF+YqcyniHibXl5/VLcLnYh3i
y7gTnoJ/w9NxVnOf63NxRbly+qHy63HP053A6fVJYk1xn+Jt8hp5l76yKaMv
wj3MpdS3khvIrXSL8flYZ/gK7oyn4pF4Bs5m7nd9bq4YV14/TH4j7oW6k3E/
1ifl7uI+w9vltfLuuO+ZsvoHuUe4VPrWckO5tW4JvoCP4au4C56GR+GZOHus
Le497s24v+FTOKO/mSzWCfc53iGvk/fEvcyk5tpwjbg2eCm+GOsFX8Nd8XQ8
Gs/COcwD/mYerjhXUf++/Fbcs3SncSZ9ci4L9wXeKa+X98b9yaTh2nKNubZ4
Gb6Ej+PruBuegcfg2ThnrA9uOPd23HvwGZzZ66TgsnJf4l3yBnlf3GdMWq4d
14Rrh5fjy/gEvoG745l4LJ6Dc8U64EZw78Q9BJ/Fd3idlFw27iu8W94o74/9
atJx7bmmXHu8Al/BJ+P5invgWXgcnotzx/fNfcC9G/cIfA7f6XVScdm5r/Ee
eZN8QP+ESc914JpxHfBK/JyZzY3n5nF54nvlPuT6xz7H5/E3Zi/3O3cwnosm
A9eRa851xKvw82YON4GbH8/W+M64j7gBsW/xBfyt2cf9wR2K55jJyHXiWnCd
8Grc08zlJnIL4lkY3w33MTcw9iG+GL8zzH5uM3c4njsmE9eZe4rrjNfgXmYe
N4lbGM+u+A64T7hBsa/wJfx9rA/ThW/Jd+HX4hfMfG4ytyieLfHZcp9yg2OP
4Mv4h/jeTVf+ab4rvw6/aKqYz/ghsb75K/jH+P5MN/4Zvhu/Hr9kqpq7THfd
s7ruug3x+8lUM3ebHrpWuh66jfgVU918zg+N9c1fxT+ZLPG986355/hN+FVT
w3zBD4t1yl/DP5us8b3ybfjn+d/xa2YBN4VbHM808yT3JfderD98Pd63NZma
y8H9gg/IW+Qj+ia6uri6XE4uKj+qyxbfu9xW7hmfr65CrBX+quOpuKfHM1LX
3LFBvDfH3vqF8tR45uAl+nqONeJ/jd9kuJBj3visHEvEbwrHRvFa8fvN9V/J
78ezFH8T/5PjY9yN+JzlNHLO+K0kN4znF3/QcSt31PlN+Xq4hlxeLiY/psse
a09uJ/fSbcbX8Gl8G/fBi/A0vDSehaYW9zU3nPsW38S/mRyxDvn2/Av8FtzX
1DY5Ta5YZ/oO+hf1W3E/U8fkjjWl66h7SbcNv27qxh7nR/Df8bfwSJMn1hnf
iX+Z347fMPViD/Mf8N/zt/EokzfWHt+Zf4Xfgd80i7np3LJ4zpr6sWe5D7kf
cMKM5vLFWuS78K9yO/FbZgk3g1sez0nTIPYo9xH3I05ixnD5Y23yXfnXuF34
bbOUm8mtiOePaRh7lPuY+wknNWO5Q9w27s/47mN/c725blxvvBu/Y5Zxs7iV
saZMo9jD3CfczziZGccd5rZzf+GasU+4Plx3rg/eg6/jMzhh3sXL8Wx5lb6w
aRz7lvs09hBObrJYW2m5XNx4/RF5h/x3rBtTMNYE14Pri/fiG/gsTmL64xV4
jrxaXyT2Y+x37jPuV5zCZPU66bjc3AT9UXmn/I+udqzTWFvcc1w/vA/fxOdw
UjMAr8Rz5TX6B2OPcL9wn3O/4ZQmm9dJz+XhJur/lHfJ/+rqxJqJdco9z72O
9+Nb+DxOZgbiVXievFZf1DTjfuW+4EbiVCa718nA5eUm6f+Sd8vHdHVjbcX6
5npyb+AD+Da+gJObQXg1ni+v0xeLe1DsS+5LbhRObXJ4nYxcPm6y/m95j/xf
3JNiDca+4Hpxb+KDOOGaiziFGYzX6BfI6/XFTYvYk9xX3GicxuR0TSYuPzdF
/4+8Vz4ee8xU0BfnHucKxV6SX5Df0h3CSfSXcEozBK/VL5Q36EvE+tPn40rG
vTL2uPy1PEaX1uTSZ+YKcFP1/8r75BOxR03FuM9yT3CFYy/KL8pv6w7jpPrL
OJUZitfpF8kb9SVjXerzc6W4lvrR8jfyWF06k1t/B3cPN01/TN4vn4w9birp
S3JVuCKxd+WX5Hd0R3Ay/RWc2gzD6/WL5U36UrFe9QW4h+KZoB8jfyuP06U3
efR3cgW56fr/5APyqVh/uvq4kVxZLiVXjf9DbhzPgvi97pr/AbsXNkQ=
        "]]}, 
      {Hue[0.14213595499957954`, 0.6, 0.6], LineBox[CompressedData["
1:eJwV1GXUVFUYgNEBpEu6u7s7pBuky6ZBuiUMukVRQaWkQTollO6SFpRuKWlB
wn1+7PWe97kz31ozd+6XqVW3hl2jRCKRxFEjkVaxI5HYcSOReXEikTo8t6+n
lnbdPp4yfKPl1/Y79yAD57TWxNHn2+vyn30DtbUb9gmU5VutgHbAuScZOa+1
Ia6+wF6PF/aN1NFu2r+kHN9pBbWDzr3IxAWtLfH0hfa3eWnfRF3tb/tEyjNZ
K6Qdcu5NZi5q7YivL7LX55X9V+ppt+xf8RZTtMLaYec+ZOGS1p4E+s/2Bry2
/8bb2m3711Tge62I9rtzX7JyWetAQn2xvSERNmv1tTvOk6jID1pR7YhzP7Jx
RevIm/oSeyOisEVroN0N941K/KgV04469yc7V7VOJNKX2hsTla3aVIrrx+yf
kINr2sck1pfZmxCNbdo0SujH7QPIyXWtM0n05famvMF2bTol9RP2geTihtaF
pPoKezOis0ObQSn9pH0QubmpdSWZvtLenBjs1GZSWj9lH0we/ta6kVxfZW9B
THZpP1FG/8P+KXm5pXUnhb7a3pJY7NZmUVY/bf+MfNzWepBSX2N/h9js0WbT
k1SurdXeJQ57tTn0IrVr67T3iMs+bS69SePaL9r7xGO/No8+9KUf/fmEAQwk
rfes99oPiM8BbT6DSOfaBu1DEnBQW0A5/Yz9c/JzRxtMen2j/SMSckhrqN0L
zzaVWaiV1/50/oIC3NWaag/DM0D18P1qGbRNzq14k8NaI+2f8KxThUXaW9pf
zkMoGL4b+3NzJvdcb2Z/FJ4P2jlHo0b4XOZLc3a4P16X0f6rc+vAOUKicI/M
f82u5nSzgxmdHuFZ9b7G5n29iznZbGtGpTtVw3drvjC7mbPMTmZMeob/Cd5f
wTyrdzaHmm3MKBQK99L8z/yJjs4xwuf3nubm4/DM0t75DWqG7958Zc4J98fr
Mtl/C3+TxOE3ZX9mzuCI603sD5ynUI3FWkXtnPMwCnNfa6E9cZ5KrXDvtMza
5vB5ScJRbQmV9PP24RThgTaELPqWcA9IyjFtKUPJ6trW8FlIxnFtGcMYzghG
MorRjCGb92wL94PknNCWM5bsrm0P3xkpOKmtYBw5XNsR7gMpOaWtpLJ+wT6C
ojzUxpNT32n/mFT8oa2iin7RPpJiPNImkEvfFe4nqTmtraaqfsk+iuI81r4k
t747/H5IwxltDdX0y/bRlOCJNpE8+p7weyQtf2prqa5fsY+hJE+1r8ir7w2/
P9Lxl7aOGvpV+1hK8a/2Nfn0ffbupOes9gs19Wv2cZTmmdZSe+o8jdrhWbW/
NueG78s5Fr2Y5LX/Az+XHN4=
        "]]}}}], {
    InsetBox["", {-0.5946557971014477, 0.4220678136241778}, {Left, Baseline},
     Alignment->{Left, Top}], InsetBox[
     StyleBox[Cell[TextData[Cell[BoxData[
       FormBox[
        RowBox[{
         SuperscriptBox["\[Sigma]", "2"], " ", "=", " ", "0.75"}], 
        TraditionalForm]],
       FormatType->"TraditionalForm"]],
       GeneratedCell->False,
       CellAutoOverwrite->False,
       CellBaseline->Baseline,
       TextAlignment->Left],
      Background->GrayLevel[1.]], {3.655622909699, 0.44705473255834516`}, {
     Left, Baseline},
     Alignment->{Left, Top}], InsetBox[
     StyleBox[Cell[TextData[Cell[BoxData[
       FormBox[
        RowBox[{
         SuperscriptBox["\[Sigma]", "2"], " ", "=", " ", "1.0"}], 
        TraditionalForm]],
       FormatType->"TraditionalForm"]],
       GeneratedCell->False,
       CellAutoOverwrite->False,
       CellBaseline->Baseline,
       TextAlignment->Left],
      Background->GrayLevel[1.]], {4.300132385730215, 0.1896896148098679}, {
     Left, Baseline},
     Alignment->{Left, Top}], InsetBox[
     StyleBox[Cell[TextData[Cell[BoxData[
       FormBox[
        RowBox[{
         SuperscriptBox["\[Sigma]", "2"], " ", "=", " ", "2.0"}], 
        TraditionalForm]],
       FormatType->"TraditionalForm"]],
       GeneratedCell->False,
       CellAutoOverwrite->False,
       CellBaseline->Baseline,
       TextAlignment->Left],
      Background->GrayLevel[1.]], {6.425271739130438, 0.06475508900532811}, {
     Left, Baseline},
     Alignment->{Left, Top}]}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->True,
  AxesOrigin->{0, 0},
  ImagePadding->{{0.1, 1.1}, {11.564988, 0.1}},
  Method->{"AxesInFront" -> True},
  PlotRange->{{-6.3125, 9.3125}, {-0.01108172479026877, 0.5430045147231698}},
  PlotRangeClipping->True,
  PlotRangePadding->Automatic]], "Input",
 CellChangeTimes->{{3.5279682459118786`*^9, 3.527968251361661*^9}},
 ImageCache->GraphicsData["CompressedBitmap", "\<\
eJzNXQl8VNW5v2ZmsrGK4NpWrEtF2ldbW6tULQoiCigVKWuVCMQgqwQISVgS
kbAlJJKwZJvsexiSQFYSEgIhBCMh7BiU7UW04E8LLkXty5v/We49d3Lu3PHp
+73XX2eYuXPO9/2/9XzfOTfXMQGLgmbODVg0a3rAwOcWBiwImjU9eOCI+Qud
lyw3KcpNQYqifDpQwecu50f21uX8f9csvOGK/LMf+ceiVAQq9H+BFcqv2bWu
jjhliPM7vg0i7zZtnDq8Sxnn5rfBEloPSXg+xGh0dXUocUNUCkqF8+rPKVRf
PgTzhsQpHc5vHc6x7tlYyZghcR3ObxVKXFzHK/LLMgqD3HDU/cbGc5IMMKjB
CExOC3n36UaJj8HMX3IUgi69+Gwyj6rHwq5RASiNgYZzvVWefGxHXBxU+zc2
hX0l3x7kZARLeEnY/YopQCaGqhynbgOJcpz/KkOUuI5u1tTM0KVQNfPpVkKO
kKY2Uf1SpdqljJdcM5j+kBuOD7noDtN+4eJ2oKL5NtGX5snO78xxfqNeo/KK
KMVrgyRzH3LDS6dTdo3M1SKEB7Mo4WBRQS7BppldM884N789JKE1WMJTJwYz
Cg0TFaq/MA3/w1TjELRqLOnYV+SXZZlrsISTpksh27AQYQDfpdNYJqUmO/6/
9JMP/SmhMjPnfPLyeXgpg8m75XhySMSR5MVReCl+5N1yOHnxuoaUeWl4KU+S
d8v+5DeT01NXl+OlWPHuF5Fmb1Vs4IdP/DWxrvasYhnadrhTsTx24vgnKpYQ
qpMHL1z4HL/yV1BpyQmlF6FlibNvalCZWOh7furKHSoYGwXTHhuwrTF5jp18
60WvHUwOSmxNmbGFfLuTXltTsa1W5W8TkyY+8EVMUWbi7SadrnRq9JNc8/2J
x1nJu0/fG/+6PrTz4mH+whj8u+Boa6HiFdHaZFesW/ftjq7fWTAPr86sbWO9
uhKjn1R8zuTbp2B4Tl15ZGJjzYbQtoOZgSfbSx//tPOYYnvkyienKUt8It/8
JNd8DcfZxGt4jblw7D3FK/Bk3R7FN37/trzi3auSWx1BG75NfjoYY+t2LdmU
sD8xN+BMU4PP1I6WRsU3orqwCj85YlY52mfPzPlu2NNJH8x4NcOxaXVhZH3x
LuvyfSXllDs+kW++kmt+/4/GWci7T+GWtcVH58zMhEgnA6dlQ0SMW70rt1Lx
JeL7xx5Iza+sCNtMvC/xybeOFk9fA60lNsbnzD1euRu6hFYtP9pY+muUnv+I
S+cOwSEiWg/YHdWlYY6akjCMa3VkzbiRHPsM3Aj/esGxFO+82l0RcDj+ggt2
KTxC/s8CRTaOXvN++OqnH+A6kAIxJIAsXpBKsUHOsqodIfH762KhB0Kix4/Q
Kx3njWtRLZmO6vKlm79KHbGkuWRuzPqDGUV+xOreASeb9q7fkVHRGLqw4POX
RqVWrFtRAGf3kjhT/x99zU+8hldZTCRh27x4bl5CTuIuwFG8CDQyH5/INyuF
C+SNZQvjEMb1O4M3xTSnErP7/2in7I1rUDwMAEPAIHC6qxmbR8FOaQ1VUUl7
a9bPPXa4mCc+3++/uyFzA5uxFw6WXHuAvPuDGqhOO328Yk1L4zZwxTiOAHkT
CAdRUUQhHv/00onQtu27mkrmbbyS8WK4vSEuw58qbnZr7Z7KVWFFlyeOsyfl
bnHcLrHOYMm1W8m7dXNhUsmVV15KrVuxpHDBwao6StWW2JiQBUZgGNGaXwoA
ipdEuw/Q8EaeB3bI0FSSNwtLA8ZBLsgKmSH7nVRzM2iE3f7Vl5+NPdfRiHgh
2nDa42hx+mtYReYef7+YrB73GSYVK/IVchiQIr9R8JYl+3bWdgRMzYKzK7dJ
ZB9Gr8E7MQ7jFaZOeGBn1rjlZVXLt4H8YGoMoAEqrHMIaKAF6pEXPzo48No/
L99N5aKNp89jn3x8HHmgsmL7IoyGRmKa6xPGXPiwSblHIo9Nkwdu3148c+3s
47W7mTww74HQ+TkE9WSKfU9kSB5sRiLKj7mCcwriH0Yb99Hhg9SRfJB6kXaB
GWiACuiQsZT7KPC5NIlBnNgD9ZtgPoiKYAHoX0gw+9Brwe1llVDY6kO525kS
Ldlbo0sOLwjKJlAnUsCHFs/JwbpERlDAlojWwpLzORMj4drKgxraqJbGRMQn
IgNxCR9B9LC+TFmgpVw4F9DCbSAkXOYu48ww9OMP21EnZO+JtnO0BZvW7Ghc
HpxLcP6Noq1ZHZYPtYtoERNYNUdcOt3G/N4b7MCWo0V5BD+naUAJpukC/gA5
MKJ4d9ky4gd3gIJFyG45dWvTHDWrkkSeyNsoUAiqVyi23KTo4tYFs3LFcQW1
a1LgsoTS/dSnwAXcuBaBS/kPCmwxBYaKL+jEkRJoEE4a3P5ennKbRH1spUKx
oEKkhYUFHojk867DXqqMoxDxGZEV2N7QwCFiXlpDTCahRIPahrCCW57LTR4P
HMCjPEwhLqWlKVxyR3VJ2LncpPHQ9AAJup7G6ML3OGouTp2QjkVPeZmi+2ja
5HSURuI4KFBFdy8NR2gDUYCAgQs+QoGFUWAPfv7ZBagVugOwWyTAetFryFFI
2SLDsrUri+FlBNJYLSEhqMVxqGKxuBNKv6TAUF2DLfSCIPgjBbaMAkM+4sAg
ws0SYL3pNYQCApew8tHsiTV7XWVOmfISBYbPsDEWGw4MwYv5ZGmgSc2KJQCR
iOIHMP5Ega3QgAEyggULQh9jYIhTZIYFx6qqOMPYwtTyk0EBmQTSixQY0iKy
jShA4KmGOswlPcJAnlk/bOJtC6LxcQosggJDZDSX5AQhWoZ+fPFwLwkwBhZl
8snCaVGiic5PnZiBdZRAGq1p7MrLL9pJfmbjWh2zNiBdEko0pVrBLq2hMupU
gX0KfOzPFNjbtIxATMDxYXDu5TpUfSWez9SAegtNgYhKpi44JhxURIW4BN+l
bS3ZSLxPUFSrqLqwbMPCyBhI1/5qJmNw4BLIlOFtjjKpW42SKImNg8XP5U6I
JG71cwoHTMAMgQjmT1E4q6mSkCHg61hhpVUhC4BJZ5v3wy9E4aEMdWl9Qcv9
iE5xHFZkdEmE0s8oPa4k8FeGUkhRVEPQGdZReDrA+0hQ9aPXkLWxstACWNPV
9VEjU1bvLtilPE9RIYFBfyQEGSrUPKgXCKW7NIdCfQtdIZ0+TYGtpbqCpwMz
SfTexqiwxmFVRyxxbshMyFAEz0iKCmsT1igdemfPjbkk/thajHBHKsW/yjAK
aR2FBJDICiivpFsFLLGiF0ADK7JCdkdeEiGhp0fLI47TZfc7KT3UNgh6ZCVl
OIW0gUJCdYQ0BtMpsob4Fs3PUXui8OJa6pwwLg3LHwEzQvPzL158IVWEhDmd
WS+vIH5+B896Fw/DZVDUKCMopGgKCUkLCpx09mSNtBDvb6wlXYEzQuLkbBzm
YT6hdDulN+6jDxqgClI8PEchxdDiAZGIn5CcMJj0PLdKNMPIo72AB4sw0Hqg
/KZdh0Qzt2uxBmNh0VVGUhgbqWYQa8hGaD2oTgYYqwK7I/bMeAfhPlwrVmA1
Q1XcxunVJ/CoUp6nGOIoBrQC4EwaFjcqsKfElaIQFtmjklcLY5kKVHqdxxDY
yCt00+HX2Ey8rdsOLGxCKsxbJXqwSWwx3NgWusAZwHPDuUN8Cae7JN2BWAEE
pQnAYOAAY6Xols9nJDaxaXkFc0n9zehBTrBAeKj77toRW4VyJ9lw7Sk9vxNO
G8goPmZIXIelm0Q23tLD7VFGwCU5DJTuaClEuLApbCuKpYs6m2T97c+XqpM1
EIvkph5sj9YJi8BkpxG9u6i0xsdpVCorfXc9EyQSamd8TAH0LMSrm/Te4oYG
Ig4ZG4tIf26HY+/BNqJguuT8jKT0ZuOwJmNtFjMrCkkoGcp2Wo9CpSgBoUOJ
C6QnGncyLbAjHfqNicZO7+gcdnrXXTQf3V6NIB6Kem4QrLJYbUXcqFxidmbS
TD9UW6W/Hf50kk4PziroTP6rq0X5oDo1l/Ti8rGTL1G+Xh5a2cbH0bNCnR40
C7vTg37Pih7vWtBHoBsXawOUsChlRRl1tQHTRaY9djs22sVx2NzDfpJID3qG
vkmH35tzF04JVXmZfmBXfkjM5CKy9WM6YG5Mvnn9EF8gKqCHIRZ08lhSxApS
l71skq5kqKTMtmpdydWMMWEkpffTShBomHDsQ3xPNDczYz9VhO6nlj8simW7
mGTtQgciCqrrJ7gAzl7+m+eGJ4mCYgnBUiKOQx5EPhTpobYjRQ049sW7nyAo
t8vNLFO5HHxy1xbSs9I9P+tl86bX0L9gzRR7JVmq0i1BT1HZENoIccNUpfZe
NRvI2RgRAe/+HHCcFp93mwBme8lYKl0B65p0q7YliO1NEbBu98CqNenoxAwB
99MBFgLHDLCvBDDrkXEegQM4EYguTBhgbBEmZiSU6QQTC68+EsC34N1HGhI0
OwwUgNM2uqfOdbpcxncJKz/LqBaJvH4SeYXNii/SX1iKAkUaLU9JCiw2DvNQ
0Ij0dPL21+TtFhn3CKJG8pgW7tnhmcCqpnTcEkDFtkpk9DeWUbcAWiVR8wSV
ES3rV8+PSBbHwXnhxIYyDnAtIrkwsvtvPBWmh0SYXpIVTBZRT0h2Wtk4ODYc
XKSnE2aSXgR+b4hHIpAiU2aFntoCBI8hbbkssp4wXoB0ntZTAnzyT6f7XsYi
6PY7LJJgYSJg0xZH9uI4nSPJRJjy08VCb211VMsAtguO4wqcs4ja1RWDQ7Ri
ELFAtrdk7tOD58vGRJQbhONUMXPpFz2rwrMAv7OHwJeh7yNB76/5EE6KxWyF
81ncRCCiR5uMdlk0AObAj5DxOHqUb2oR83fjBaMvvYb2FZ20CAn729jnFlnp
duaGSNonNg4HdjjwEunpIL1qDOlmrcjFFDLZT2JjxgruCLcUISHyEIHiOF2R
66dtYKhF7mvGkPpJIAlnV+oyww3idC1EDjneYJDwHRElQoLBMV+kp4M0zRQS
b4tI3+snKU0sklXhMUktJQtmGaQA18r8FgkQX0nJYZFk9Mck+5VsHApdFLyE
ko/WgKP/JP3Z68a66a9BwnCyJeIjqTMZK1Q76sHoY5JczXUo1pneEkjTjSEN
oNcwDLs0ZMOQQUIXim6UMPGSdOmPSbp0L21fHltShpBmGEO6VQLJW9JpMOlx
GxMcmoD5k8SpvSQ7JzZtQwg8yM7JTGNIt0kg2fhedWNjR/7UVSIkHGbi7goC
5lEKCU4OZxfH6c4JrBJIgcaQbqfX+LYq2cJjkBC+WPNF6XUt96OSgsVLy9nX
7COXksZTBukNY0h30GsYhuEEklWSs7lBxO1NBgkbz9iAFsfpcrZFv/dN7koI
MoZ0pwSShaf9/FLkXpGVLmc/KsnZXJviuuwlgTTLNRvdpQFRzeXFd0hPtyFT
68zgzNRwbBGIrn2m43yQMpA6+Ma+DsSbxnr5Gb2GDXJVL17GYa/L0n+Q1O4M
jrh51Q3ObGM49E5jb9FMmI69ZOwpWyR1B0OBMEO4CSi8xT0FEcEcYwD0Dneb
CICf3UpLDMYdC4Z64wflbuPntjrZ5xqzvlvP+uVzZxrVop1HwI6MChxUiawR
OYgggbUVgT/64umDnO08Y670TySsnGtzSchaNGyMIY4NcaQoMPRF2kf6xwi8
YOuOvIBIzmy+MbN7NOe/kLNpclNJ6FquVWRqeBLh8Qh598GWKAKAc6qoeGdT
Z/bGCUSTC4zZsD8ZeeLy2VPfJi8fs6S93sE1iJ1F7DASBr+nbMRTA7wWHGss
+zr17TEzTu2tU95yDeB7qYteyp4afj5388TVh2rSMYmXDQw63BNuShVUl382
f9vkf9pfDvb9/sZ3Opou0Bn1tIaovLUtqSVNJZlzEvbvSuApklL35tkRzFsd
aW8sOrK9un7nvM0LTQlPO13RUlYVkvL4pyc+qi7PW1JVlPI2Eh0jjBxXnbV1
LfgO/fjYmcTGDYURrfYqU8I+A69d/qwza+zKR66cvoRXUVXBO9+HL5wW2ego
ZYr2/jp84Rt7HOkhYI4xrY4ZG4d2Hu5wQ53eaObTVvx69KSzNe9z6tffnBF+
IWPTlHX1xYXKb1ke2utwnM+Mn/KvOTODkcNOX0IuPnz287Tn6b03pmx8Yw9s
KolpTijhbJrmz3JkZyZkX8xKmJhUnZ/0G3b34+4C++WM+FdSilJyzrw2JY8x
C27Pq99RHWb3jJnf2HONR2E0zixnfWRNduyq6gUHdu09mbt1ekVJeiS7B9Pm
2Jm1tiNny6v4LSFlY311WHAZlzGnLjJ7wdHCBs/Y9uh74/rX1+zPLeVso3IS
99eFzi+d+n71sYDWysOVJekrwR7qVH5FvRmfDxckvdm43b4YYzC2LDJkV3xS
bAOHcSZ/ypqHr37wn91gEBT30+Qm2jGwofTIyden5jszgJOcs8WrK8q+kr7p
Jciq3M8OAypz4nEtsTo/mY2ztc6eURRcntcKGqp9FxnLzViLth3RcejsF6NH
pjkbWZC0zj5Y3gTZPsjZ+hpc6h5qZ3yE2O35iUEYQkfbrvx1dPqYk00fgFJo
W2ZtXm1EpjkAb1d7fzXy2ZTA/aVHbBTD+j3F+RC1ZkfacgTNL9jK4vQCVQN0
qDdmXXvhuVTVc5gHmGNwNf7Rma8VRjhSD3hTDIGHKg6VlWas+tz+7mjnv+/c
RfUAi+ASXAND6Gjv8LKMg3B/Tox7ANmSG2mM5YHuvlC8elmVPX7NbsWXqhja
rtthD+NASBYZQGMBn3ENv8FoiAk2z5vHhs43utguIYNE90h83e7uOn+jR0U2
bTOLvogkD3Z3KYQCQkLxpxIAFST4JnnjcPgQPFm5mUqAz7h2PTVuJMYQCeg8
P0dUeEXi5g17QFOXUMTj6bsIkB6uG9CKm6NpevbBVGC+09X94NfYkKJjIzAR
oEpPIo4vsgVcFyEEcZFZYDx7Vd5WGJL+yYoPkisuH81LDMQwDMc0eBsj5d+8
IGh7aEnmIdHjqWZ+zAm3y5Zel04xXaJivCQKlO12sgMy3V+QutGeGJLjjjSc
6hw/NlPpQ90ZYYC0CCeB5r5L2vg07na3fZS9eYriDU3hK1YGDEnYXZCGKXR2
j/OTx2dPeq/mhBibhKfsRPwON9owPAV10YZs09qmyq/9NSrRhs1gWfh22NPJ
AS3l7Up/SGFb3eDY7qxDnVLhKxGsH01WyJ9Dzx8+x+Pci6H4Mefh7nzC8Dzc
A59gB4u6v3b1kvgE+wtilH8ou4jlnBkWmVb5DUuNDY73r740Kl2XILy4Xv8H
5999fwLLyxKJRdWH5ADaWHZeoUI+pHKkdC776sKk/a1vzijWpQAiu+wE/JYf
EeDuN9J1x2myjXQmi1gUI6kjuXNZsNxh2dNFJ5HF/SG3bhPf8JDbzfJLFy/r
udzxq8ZcaDqBlIrUSmFZK5cH74xJT2jkUUUsZXg0bc6GuzISERISY8OLOO7B
ejauB8rmbLjXICEgMTA2SKZIqtxZCBvTY2BTdrYHP7/wKRQI4yEYEZTKYGpY
JK8bw59J1hlWYCw/jxV5Epbsz7yxNMAWvFKjTKxLKnMPnZs8Poebyepa5cjA
M5LQN/RetjKkPHHb+jpGMjZj0976xfNKuEmWmhKCRqFZXvswQgUbVlalxUXV
cqWbE4KKoCrui4wQ2hK0J7xPdEOI/R0+tPXmvh2tHa9OymX2sKLHmF2//X2o
Ce23ORVIv+xQei0ciVGxoOgPO5BVj0JHCTUjYV3all0L1+dF/iCKhfsG76vN
CUFuyM/tP0hv/6aSWe+OvHjwlEiI0GHTITCUsjv8rRJk0kF6W+MnFCBucLA/
TYTcO7eEFJIURqlY0K1WxCwqxvLN/r7FHQkI3JA5L6Vx0ZwdnARMvDv9rTSU
0h6QQKn5ft70OGJfRqL9jWmF7dnTYvGbByQg7vXUEUtJ/zdIM+6XKc8SVbgj
wR6mAHm/mTAsAYZVfkVJwLLfvvjMFmQFJdyUBOT9x9IXY8nKzkjAplfeGv0u
/MYDEhPP1h6+vHHsGrJAMhKw6+Xol9YhHepIEApsIlal69tGhCNO+USY8sut
z4bhN3e82aM8rqaMWtG0fFYBmfwAJdEQMbfos+QXlpMR5iQqHYtSO5eMjRdJ
nAsZv+1A/qzNHpJY1JK395sVw1aJJL4Mf3ZN1N7ESg9JIJH/V/STIaTiZCS6
1j4ZqtbKbkjQP4qz/HvzU4tWVqTvJ5PvoyRCq7MO/DvhKdqQLzMl8XH02HVl
GSG5IominOWFV6LHRHlIonrzwpwPt0yIEUm0bXl9y3vxM5O6kSAU2MS3C1IP
fL1lWKg48Wr86LeTMtdXesh77L7Gc98kDAtdcKCwWbmXxUNr+ZHvtgxd/Pfa
qjPKclMSeMbG9cgRqxOr1zs4idUNSTVfbhgRQZ7JYU7C98aN77+bPnRD4/Y5
WzgJx87wzBtvPbO27/XrN9yR+C299o/JY1Kv2kctJ5N/SUmcyZ687vqrI+LJ
CEaCVoc9zLYQ+BIv3kEiY1s/f95ORBTR3z2a/r5KGr60ZfYbDvaXcG6rba3P
0roeWZXNWKatiWpoSwlIIPq+R9P3hykT1uVFRtS6snTX6IpSu2G5NCe7bV/M
7Exin3s0+7RsDkxek7itxZWlu1ug+JNroAXtFigW03iey/6w2UWdGWMjOKOT
uVPXN0UG5U6rrDj9g2RzNlRxFcZNPJXNChc9GvBa8dW0UctmH3Qcupvvp5W+
j0vNc4IcI1sOXvTAjrxr6uro0LZ0hpjZ0woHv/b8c/b67fO2xdZt2sUA4CMu
nZswPhchtkL0X4PuRmghDbob+qe2FvBLqIwtqywJTlUYQ3yOqUso/+bZYSkI
yBXGMceotE1/vXhpRebB81nj32FULPg8f09RK2ArK81IWOGwodmZbTA4Yujn
mvavpT4XGriz9CRCzJwQ3DD+3dj9ZWUhaYgMRihh98bS6h3ByXjkDwLHnBAe
EVS8YtnuiAZ7HfydEcJHXAIRhINIiNBh0/GUodaZMxxDTxy+9FXKsyFs+pX0
0cvHtDedrV4UXA4nN8VhG3j58rXOl8dmPXLm9JWj+a9FR+xN3aPcxXcoC5uh
MfKb03dJmnVD8ncUG8rXx48f+zSxeoMD4cuo2SvXFBXvWkY4wTFIxjWnBguP
OdB0YdqhiiMdOZOi7mLtYcGMuOCmvP1ORXz8+ajn0yLMCNlgYBga/KEyGF+5
g3VkzlwKR3j81LFPJtXWnIXLKeYkt8ZE74tKSmwBSe4RnCRyJUDiN7geyZnm
JGF0GB/TovYkVtftmJ/ISZaVhqTF744txW9wQpITzUnCEeAQmAbngJNwkjDv
uLaG0/gN7kieXCWSJBQpIW+ewzAYrzM5U9aG78touI3uRYruglfTm7NKkNNM
EXrf/tlnX10dMyqDz+SewwhnV6zKyymPzOM/w1/ht24I/56KDj+Dh2AWdyCF
UrUh4Qe2lLZyql1/eTKRJV43JL3hGnARFQxLKQPYyQtLKfzncXsbPjr19ykF
5oR3hIdVBxfktfOZaZVRRQXlK3MYYfgWfIz/PNdRfLxy8aIKc8I8Z/GZXBGM
MI8k/jMcGo5tStjCcxhmKV7k3cLVIezDWvgih+ji43LejqxbUFR4lFAyNaSF
5zuRFVeQyEpMMnwcAh8FaDdWhBNjIOZBPpErSmQgeg0fd2bqlPyHOz64aiYL
fc6DhedHQ7X1pazEeFIs9F1NnJ6xgufBA0VWWHyxCIusoEaoUxw34r1Dly7/
9aUsQsmNMzBWovuqJI4dOo9sg/TKWYkZR1W0s+ZqnhVU4iGr2PhNB2K2JDSL
iuFlDWHSWytXeQrm49RU7BkrnYszEnObi1va86fFiKzEIOLjEqM3NJJnAHrG
CqkSKZNMtjLPYhmWMKGnXBZUj1AiiSY2jq/3HrJCoYd1VWSlcwvGitdq4ji1
EHBlRTj9gTF15lKeT7g6gBcVBuRRekhksdFxWAiwIJjJ8geJizOMsAQsQo8F
jWXhxQOh9LYpK6RbpF0y2SaxkK+xVGpV4RkrnYvbJOnIV5KO2DhEIaLRQ1bI
wsjGZLI3c122ANMVgm0ACaswH6dWIQIr+o+P29ZXdxolnvnJIYoVjOJDWTcV
zYpXA57ed2FZv2dLJRIBUTwbp1Y1AkSP2mTPoCHvI/8L0PzAHjBQr8EXAA5r
IDQK2ASeLxODFUkyeLK2U9VctycN23RPGu4ilBTlUTqed38UIPUWlJJf2EeG
4amNKIhhdMWfrUesxJLBkrXdVEPdHh+sdd4s82BBwcJCuNzKEoNzLUQ3SEas
MlcBb/HFhwDLmlD69CKLWPdzlrpodGHp/o97tIf4umGJAh6ZX2Spi8pVYqjo
u2x+EGzmf4yV2C9wVrqoXGWcAP4oia5bJVFjTkIXBbdKFgpzEtgLIIdiAgld
teOGxKMS5+ovSfHvuC5Xj0oSe3+Ji7xjyltsBTkJXa1hTkKXiPtLTGlOQldD
9JfUBuYkxF6Mk9AVuG5I0Mdy6QvcWygJvt3jIQmxy1L6URLYBSD7PRix2pQE
3/MRSfCmqRsJQuFPkpBiE7EWY032kLcupPpJQoqk8d8hSb9sSkwXXP0kwfVD
iOnCrJ8kzDwi9hi9pqu9+kraBnVZEJ/NHlhB707zF/NeFyWtvzuN3VlGn7Vg
1fZ0CZEuL89A6hqTvhI/0G5DGeJ6p5ji6a1i7p6XoN6CEec63sIfRk++mYsi
dvJcFJ1nUlG8dTeGCPv9t3dpkrretKM+6KMiTr21gqPsiAtUr5mjRK+NRVdE
qXN+FaXur+VVlJ7eiuXuMSTiY0vimE25G1FnVPUuCkTkYWLomqS+krDjqzLh
yxyc3z5ldktVHzeW8O6i6mH+IgQPoWnm9o9LknAfSaAT+OKdRK7PBZH5MpXW
V+moqFDtIHoMw2zxDKMuy/eW5A9SY/kLGLmutEeyaJUTvXOrh8t/CELILur1
IZ54M8Ooq+V6S2o5grEHxyPE+L2eKUG37PeWbB3oGQh3PnnIQFcU9JbsiREG
vqpHdr/n6T7PGOmaDMaInyu5Mup2j9P9JjyG0Gv8OIBQ7ymp8da6hvMQyTLQ
U7IMrDXlDYvAMiIJXYFmTkK3j9lTYgtzEjot95Tsmbgh8WdJ3PlLqiv6CEWP
boR3ZjCenMUb4WX3rjLuulLZXxJRjLu7hky7XVZ72IoblthgLAsNqRJZ6nag
XVi6u0OXLYZmLHXLB2NJTuzwXxGRsHR7a7S2Ygm3RssiwldrqRERpOJeby5b
9zrN8AkQ9JGt+uqaceXHqGSEC1d3XbW60HXJb4J4QmJEX0miXC96rX5tsHUT
kECQNdaMm+5AwFfSB603DrMn6TVdeewtCbMNpiR0KYeR4Ac0HpLQtQ/eEkd0
Q+IpiSBWyTod7Zp0n5LAt0oyZrQpb6Q12AEurW4lOz/jGkl5McYk/kKv6cpm
fgoils2mJHwQSFAi1wLMiCxKqqmNxtOHUveHM2E69I5/ydZarPG0p7VUDzMR
LnHGwz38DymRX8zHKjf9NxhCOQ8=\
\>"]]
}, Open  ]],

Cell[CellGroupData[{

Cell["\<\
Problems associated with multicolinearity\
\>", "Subsection",
 CellChangeTimes->{{3.5279679678430023`*^9, 3.5279679794525375`*^9}, {
   3.52796801940094*^9, 3.52796801940094*^9}, 3.527971580926735*^9}],

Cell[CellGroupData[{

Cell[TextData[{
 "One of the problems associated with mulicolinearity is that you have a \
greater chance of assigning the wrong sign to a parameter coefficient. This \
could be really bad Because your model could say that advertising had a \
negative effect on sales, when that just doesn\[CloseCurlyQuote]t make much \
sense or you really need a new marketing department. You can see this in the \
example above. The most likely answer is that the coefficient is (+), but you \
can see that as ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    SuperscriptBox["\[Sigma]", "2"], " "}], TraditionalForm]]],
 " increases the chances of your model giving you a (-) increase. "
}], "Item1Numbered",
 CellChangeTimes->{{3.527968020860881*^9, 3.5279680844783363`*^9}, {
  3.5279682948599205`*^9, 3.5279683750367136`*^9}, {3.5279715822059155`*^9, 
  3.527971586333272*^9}}],

Cell["\<\
Another problem is that you will have a hard time separating effects \
particular variables have on your dependent variable because things tend to \
move together. \
\>", "Item1Numbered",
 CellChangeTimes->{{3.527968375516694*^9, 3.5279684091853476`*^9}, 
   3.527971587012837*^9}],

Cell["\<\
Another issue is that you will end up computing much Smaller individual t \
statistics for the individual hypothesis that the \[Beta]\[CloseCurlyQuote]s= \
0.This is because as multicolinearity increases so does the variance and in \
computing t stats you divide by the variance. \
\>", "Item1Numbered",
 CellChangeTimes->{{3.5279684098353214`*^9, 3.5279684735127745`*^9}, {
  3.5279715877223825`*^9, 3.5279715937185426`*^9}}],

Cell["\<\
The last issue is that you will often have very large or \
\[OpenCurlyDoubleQuote]significant\[CloseCurlyDoubleQuote] F statistics \
coupled with these small t stats. The F stat tells you that your model does \
well overall at predicting the dependent variable, but the small t\
\[CloseCurlyQuote]s tell you that none of the variables does a good job at it \
by themselves. \
\>", "Item1Numbered",
 CellChangeTimes->{{3.527968523450777*^9, 3.52796856611907*^9}, 
   3.5279715966466675`*^9}],

Cell["\<\
Another problem is that coefficients may be really sensitive to more data.\
\>", "Item1Numbered",
 CellChangeTimes->{{3.5279685671390295`*^9, 3.527968578948557*^9}}],

Cell["\<\
The corr may be close to 1 which means 1-\[Rho] is close to zero. \
\>", "Item1Numbered",
 CellChangeTimes->{{3.527968580528494*^9, 3.5279685946479287`*^9}}]
}, Open  ]],

Cell["\<\
Another thing to keep in mind is that even though you have all these \
potential problems, you still haven't violated A.1-A.5 and that means your \
\[Beta]\[CloseCurlyQuote]s are still BLUE. \
\>", "Text",
 CellChangeTimes->{{3.5279686135571723`*^9, 3.527968647845801*^9}, {
  3.5279715997646704`*^9, 3.5279716023230324`*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell["Extending to more variables", "Subsection",
 CellChangeTimes->{{3.5279687072934227`*^9, 3.527968714243145*^9}}],

Cell[TextData[{
 "If you extend to more variables you have the same s\[CloseCurlyQuote]s and \
\[Beta]\[CloseCurlyQuote]s defined above but you need to know that ",
 Cell[BoxData[
  FormBox[
   SubscriptBox["\[Rho]", "i"], TraditionalForm]],
  FormatType->"TraditionalForm"],
 " (for ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    SubscriptBox["\[Beta]", "i"], ")"}], TraditionalForm]],
  FormatType->"TraditionalForm"],
 " is equal to the ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    SuperscriptBox["R", "2"], " "}], TraditionalForm]],
  FormatType->"TraditionalForm"],
 "term that you get when you call ",
 Cell[BoxData[
  FormBox[
   SubscriptBox["X", "1"], TraditionalForm]],
  FormatType->"TraditionalForm"],
 " the dependent variable and do a regression with that and all the other \
variables as the independent variables. "
}], "Text",
 CellChangeTimes->{{3.5279687167730436`*^9, 3.527968792840001*^9}}],

Cell[TextData[{
 "This intuitively makes sense because if you have a high Correlation between \
one variable and the rest of them. A model where you try to predict the one \
using the others would be pretty good and therefore have a larger ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    SuperscriptBox["R", "2"], "."}], TraditionalForm]],
  FormatType->"TraditionalForm"]
}], "Text",
 CellChangeTimes->{{3.5279687930499926`*^9, 3.527968829258544*^9}, {
  3.527971604471656*^9, 3.527971605381074*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell["\<\
Proposed to solutions to mulicolinearity\
\>", "Subsection",
 CellChangeTimes->{{3.52796799014211*^9, 3.5279680024616175`*^9}}],

Cell[CellGroupData[{

Cell["Get more Data", "Item1Numbered",
 CellChangeTimes->{{3.527968846477855*^9, 3.527968865007114*^9}}],

Cell["\<\
Break the model down to it principle components by reducing correlated \
variables into linear combinations of those and then doing the regression. \
\>", "Item1Numbered",
 CellChangeTimes->{{3.5279688730367928`*^9, 3.5279689047055264`*^9}, 
   3.527971606030658*^9}],

Cell["\<\
Deleting a variable: sometimes all your Variables are different enough except \
for one or two that seem to be related to all of the other and therefore are \
the cause of multicolinearity. \
\>", "Item1Numbered",
 CellChangeTimes->{{3.5279689049955144`*^9, 3.5279689502437043`*^9}, {
  3.527971606650261*^9, 3.5279716162541103`*^9}}],

Cell["\<\
Impose constraints on the parameters. This is pretty similar to the deleting \
a variable, but instead of saying that \[Beta]=0 you have the flexibility to \
say the \[Beta] = anything.  One good example is saying that you want \
constant returns to scale in a production function so your \[Beta]\
\[CloseCurlyQuote]s corresponding to labor and capital need to sum to 1. \
\>", "Item1Numbered",
 CellChangeTimes->{{3.527968950503694*^9, 3.5279690273606195`*^9}, 
   3.527971617093573*^9}]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["\<\
Using Instrumental Variables to overcome endogenous regresses\
\>", "Subsection",
 CellChangeTimes->{{3.5279690491697474`*^9, 3.5279690603393*^9}, 
   3.5279716176931887`*^9}],

Cell[TextData[{
 StyleBox["Endogenous Regressor (ER): ",
  FontWeight->"Bold"],
 " An endogenous regressor is one that experiences feedback with the \
dependent variable. In other words, you have an endogenous regressor when \
changes in the regressor affect cause changes in the dependent variable and \
then that change causes further change in your ER. "
}], "Definition",
 CellChangeTimes->{{3.527969069569931*^9, 3.527969144496934*^9}, {
  3.5279716250284915`*^9, 3.5279716256181135`*^9}}],

Cell["\<\
The result of a regression including an endogenous regressor is that you will \
have biased and inconsistent \[Beta]\[CloseCurlyQuote]s. this is a big deal \
because most of the statistical inference we have done breaks down and is not \
feasible. \
\>", "Text",
 CellChangeTimes->{{3.5279691446369286`*^9, 3.5279692079143972`*^9}, 
   3.527971626407608*^9}],

Cell[TextData[{
 StyleBox["Instrumental Variables: ",
  FontWeight->"Bold"],
 "Instrumental variables are variables that you include in your regression \
that may explain an endogenous regressor. You do this so you can delete the \
ER from the model and hopefully not have the same feedback."
}], "Definition",
 CellChangeTimes->{{3.5279692127842026`*^9, 3.5279692535325727`*^9}, 
   3.5279716273270197`*^9}],

Cell[TextData[{
 "One example is this model: salary = ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    SubscriptBox["\[Beta]", "1"], "+", 
    RowBox[{
     SubscriptBox["\[Beta]", "2"], "education"}], "+", 
    RowBox[{
     SubscriptBox["\[Beta]", "3"], "experience"}]}], TraditionalForm]],
  FormatType->"TraditionalForm"],
 ". In this case education is your endogenous regressor Because as education \
goes up so does salary and that often motivates individuals to pursue more \
education. Some instrumental variables we could put in the model to replace \
education are mothersEducation, fathersEducation, proximityToUniversity..."
}], "Text",
 CellChangeTimes->{{3.527969255292502*^9, 3.527969385557291*^9}, {
  3.5279716280665455`*^9, 3.5279716373116255`*^9}}]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Dummy Variables", "Section",
 CellChangeTimes->{{3.527594622686491*^9, 3.527594624198615*^9}, 
   3.5279716380511513`*^9}],

Cell[CellGroupData[{

Cell[TextData[{
 StyleBox["Binary Variables",
  FontWeight->"Bold"],
 ": Many variables that you might be interested in don\[CloseCurlyQuote]t \
have continuous values. Some may have only yes or no (like gender or age \
above a threshold). If this is the case you have a binary or dummy variable."
}], "Definition",
 CellChangeTimes->{{3.5279694245757303`*^9, 3.527969480213505*^9}, {
  3.527969549230744*^9, 3.527969561930236*^9}}],

Cell[TextData[{
 StyleBox["Dummy Variables",
  FontWeight->"Bold"],
 ": Other times you have more than just binary responses, but they are still \
at discrete levels (maybe age, work experience, or education). If this is the \
case what you will do is set up a dummy variable for each level in your \
category. "
}], "Definition",
 CellChangeTimes->{{3.527969482163427*^9, 3.527969529601529*^9}, {
   3.527969563870158*^9, 3.5279695678200006`*^9}, 3.527971639750064*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell["\<\
Models with binary explanatory (independent) variables\
\>", "Subsection",
 CellChangeTimes->{{3.527969542201025*^9, 3.5279695434509754`*^9}, {
  3.5279695764896536`*^9, 3.5279695892891417`*^9}}],

Cell[TextData[{
 "An possible model for salary could include a binary variable for whether or \
not an individual is a college grad. A model for that could be ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    SubscriptBox["Y", "t"], " ", "=", " ", 
    RowBox[{
     SubscriptBox["\[Alpha]", "1"], "+", 
     RowBox[{
      SubscriptBox["\[Alpha]", "2"], 
      SubscriptBox["D", 
       RowBox[{"1", "t"}]]}], "+", 
     SubscriptBox["\[Epsilon]", "t"]}]}], TraditionalForm]],
  FormatType->"TraditionalForm"],
 " where D is the dummy variable. If D = 1 the person graduated from college \
,if D=0 they didn\[CloseCurlyQuote]t. "
}], "Text",
 CellChangeTimes->{{3.5279696334473753`*^9, 3.527969726373658*^9}}],

Cell[TextData[{
 "Another model talks about salary and whether or not you are a minority ",
 Cell[BoxData[
  FormBox[
   RowBox[{"(", 
    RowBox[{
     SubscriptBox["D", "1"], "=", "1"}], ")"}], TraditionalForm]],
  FormatType->"TraditionalForm"],
 " and whether or not you are female ",
 Cell[BoxData[
  FormBox[
   RowBox[{"(", 
    RowBox[{
     SubscriptBox["D", "2"], " ", "=", "1"}], ")"}], TraditionalForm]],
  FormatType->"TraditionalForm"],
 " ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    SubscriptBox["Y", "t"], " ", "=", " ", 
    RowBox[{
     RowBox[{
      SubscriptBox["\[Beta]", "1"], 
      SubscriptBox["D", 
       RowBox[{"1", "t"}]]}], "+", 
     RowBox[{
      SubscriptBox["\[Beta]", "2"], 
      RowBox[{
       SubscriptBox["D", 
        RowBox[{"2", "t"}]], "."}]}]}]}], TraditionalForm]],
  FormatType->"TraditionalForm"]
}], "Text",
 CellChangeTimes->{{3.527969727523612*^9, 3.527969789171146*^9}, {
  3.5279698419390354`*^9, 3.5279698419390354`*^9}}],

Cell["\<\
In each model you can infer that the coefficient in front of your dummy \
variable represents the impact on the dependent variable of having the dummy \
variable be 1. \
\>", "Text",
 CellChangeTimes->{{3.5279698422090244`*^9, 3.5279699206558867`*^9}}],

Cell[CellGroupData[{

Cell[TextData[{
 StyleBox["Dummy Variable Trap:",
  FontWeight->"Bold"],
 " The Dummy Variable Trap is when regressing a model with \
\[OpenCurlyDoubleQuote]n\[CloseCurlyDoubleQuote] categories you include \
\[OpenCurlyDoubleQuote]n\[CloseCurlyDoubleQuote] slope coefficients. You can \
avoid the trap by simply leaving out an intercept coefficient or by including \
n-1 slope coefficients. "
}], "Definition",
 CellChangeTimes->{{3.5279699267356434`*^9, 3.527970027781601*^9}, 
   3.5279716411291804`*^9}],

Cell[TextData[{
 StyleBox["Interaction Term: ",
  FontWeight->"Bold"],
 " An interaction term is created by taking the product of two regressors. \
The Coefficient in front of that joint term is the additive marginal effect \
of the two regressors (in the case of two dummy variables it is the effect of \
belonging to both D=1 groups). "
}], "Definition",
 CellChangeTimes->{{3.527970043260982*^9, 3.5279701546165276`*^9}, 
   3.527971644956729*^9}]
}, Open  ]],

Cell["\<\
If you have things you would like to consider as dummy variables, but they \
don\[CloseCurlyQuote]t have just two states you will end up creating a binary \
variable for each level of distinction in that category (for example if you \
wanted each month would have 12 of them, each corresponding to a particular \
month). \
\>", "Text",
 CellChangeTimes->{{3.527970214704124*^9, 3.527970288881157*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell["\<\
Models with binary dependent variables or limited dependent variables\
\>", "Subsection",
 CellChangeTimes->{{3.5279703757876806`*^9, 3.5279703926670055`*^9}}],

Cell["\<\
Some good models that you would need binary dependent variables for are \
testing to see if a student will get in to graduate school, testing to see if \
someone is likely to Default on a loan, if someone will be married....\
\>", "Text",
 CellChangeTimes->{{3.5279704029565935`*^9, 3.5279704528745966`*^9}, 
   3.527971646046032*^9}],

Cell[CellGroupData[{

Cell["\<\
Linear Probability Model (LPM using OLS)\
\>", "Subsubsection",
 CellChangeTimes->{{3.527970454504532*^9, 3.527970480993472*^9}, {
  3.527970827560609*^9, 3.5279708289705524`*^9}}],

Cell[TextData[{
 "This model is presented as ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    SubscriptBox["y", "t"], " ", "=", " ", 
    RowBox[{"\[Alpha]", "+", 
     SubscriptBox["\[Beta]x", "t"], "+", 
     SubscriptBox["\[Epsilon]", "t"]}]}], TraditionalForm]],
  FormatType->"TraditionalForm"],
 " where y=1 if a particular option is taken and 0 if otherwise."
}], "Text",
 CellChangeTimes->{{3.5279704814034557`*^9, 3.527970560660285*^9}, 
   3.527971646895488*^9}],

Cell["\<\
 If you do this regression the result will be describing the probability that \
the first choice was taken. \
\>", "Text",
 CellChangeTimes->{{3.5279704814034557`*^9, 3.527970577750602*^9}, {
  3.5279716477249565`*^9, 3.5279716484345016`*^9}}],

Cell["\<\
There are two main problems with this model: A.1 is violated (errors aren\
\[CloseCurlyQuote]t normal) so is A.5 (correlated error and x\
\[CloseCurlyQuote]s - heteroskedacity)!! Another problem is that your model \
is not bounded between 0,1 like it should be for a binary dependent variable. \
\>", "Text",
 CellChangeTimes->{{3.5279712575934067`*^9, 3.5279712596233253`*^9}, 
   3.5279716490940795`*^9}],

Cell[TextData[Cell[BoxData[{
 FormBox[
  RowBox[{
   RowBox[{"reg", " ", "y"}], ",", " ", 
   RowBox[{
    RowBox[{"X", "'"}], "s"}]}], TraditionalForm], "\[IndentingNewLine]", 
 FormBox[
  RowBox[{"predict", " ", "yhat"}], TraditionalForm], "\[IndentingNewLine]", 
 FormBox[
  RowBox[{
   RowBox[{"gen", " ", "predy"}], " ", "=", " ", 
   RowBox[{"yhat", " ", ">", " ", ".5"}]}], 
  TraditionalForm], "\[IndentingNewLine]", 
 FormBox[
  RowBox[{"tabulate", " ", "y", " ", "predy"}], TraditionalForm]}],
 FormatType->"TraditionalForm"]], "Proposition",
 CellChangeTimes->{{3.527971246183863*^9, 3.527971287992191*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell["Qualitative Response Models", "Subsubsection",
 CellChangeTimes->{{3.5279707488737564`*^9, 3.5279707496137266`*^9}, {
  3.5279708533695765`*^9, 3.527970857829398*^9}}],

Cell["\<\
The idea behind both probit and logit are that they are bounded between 0 and \
1 so they make much more sense to use in binary dependent variable case. \
\>", "Text",
 CellChangeTimes->{{3.5279707922520213`*^9, 3.5279708232907796`*^9}, 
   3.527971660416828*^9}],

Cell[TextData[{
 Cell[BoxData[
  FormBox[
   RowBox[{"(", GridBox[{
      {"\[Placeholder]", 
       RowBox[{"pdf", ":", 
        RowBox[{"f", "(", 
         RowBox[{"s", ";", "\[Theta]"}], ")"}]}], 
       RowBox[{
        RowBox[{"F", "(", "z", ")"}], " ", "=", " ", 
        RowBox[{
         SubsuperscriptBox["\[Integral]", 
          RowBox[{"-", "\[Infinity]"}], "z"], 
         RowBox[{"f", "(", 
          RowBox[{"s", ";", "\[Theta]"}], ")"}]}]}]},
      {
       RowBox[{"Normal", "\[IndentingNewLine]", 
        RowBox[{"(", "Probit", ")"}]}], 
       FractionBox[
        SuperscriptBox["e", 
         RowBox[{
          RowBox[{"-", 
           SuperscriptBox["s", "2"]}], "/", "2"}]], 
        SqrtBox[
         RowBox[{"2", "\[Pi]"}]]], 
       RowBox[{
        SubsuperscriptBox["\[Integral]", 
         RowBox[{"-", "\[Infinity]"}], "z"], 
        FractionBox[
         SuperscriptBox["e", 
          RowBox[{
           RowBox[{"-", 
            SuperscriptBox["s", "2"]}], "/", "2"}]], 
         SqrtBox[
          RowBox[{"2", "\[Pi]"}]]]}]},
      {
       RowBox[{"Logistic", "\[IndentingNewLine]", 
        RowBox[{"(", "Logit", ")"}]}], 
       FractionBox[
        SuperscriptBox["e", 
         RowBox[{"-", "s"}]], 
        SuperscriptBox[
         RowBox[{"(", 
          RowBox[{"1", "+", 
           SuperscriptBox["e", 
            RowBox[{"-", "s"}]]}], ")"}], "2"]], 
       FractionBox["1", 
        RowBox[{"1", "+", 
         SuperscriptBox["e", 
          RowBox[{"-", "z"}]]}]]}
     }], ")"}], TraditionalForm]],
  FormatType->"TraditionalForm"],
 " in all cases Z = X\[Beta] = ",
 Cell[BoxData[
  FormBox[
   OverscriptBox["y", "^"], TraditionalForm]],
  FormatType->"TraditionalForm"],
 "."
}], "Text",
 CellChangeTimes->{{3.527970860179304*^9, 3.527971046421854*^9}}],

Cell[TextData[{
 StyleBox["Marginal Effect of parameters: ",
  FontWeight->"Bold"],
 " The marginal effect of a parameter in a probit or logit model is ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    FractionBox[
     RowBox[{"\[PartialD]", "cdf"}], 
     RowBox[{"\[PartialD]", 
      SubscriptBox["X", "it"]}]], " ", "=", 
    RowBox[{
     RowBox[{
      SubscriptBox["\[Beta]", "i"], "*", 
      FractionBox[
       RowBox[{"\[PartialD]", "cdf"}], 
       RowBox[{"\[PartialD]", "\[Beta]"}]]}], "=", "  ", 
     RowBox[{
      SubscriptBox["\[Beta]", "i"], "*", "pdf"}]}]}], TraditionalForm]],
  FormatType->"TraditionalForm"],
 ". This is given to us with the Stata command \[OpenCurlyDoubleQuote] \
margins, dydx(*) atmeans\[CloseCurlyDoubleQuote]"
}], "Definition",
 CellChangeTimes->{{3.527971059331338*^9, 3.5279712163150578`*^9}}]
}, Open  ]]
}, Open  ]]
}, Open  ]]
}, Open  ]]
},
WindowToolbars->{"RulerBar", "EditBar"},
WindowSize->{720, 796},
WindowMargins->{{0, Automatic}, {Automatic, 0}},
PrintingCopies->1,
PrintingPageRange->{Automatic, Automatic},
PrintingOptions->{"Magnification"->1.,
"PaperOrientation"->"Portrait",
"PaperSize"->{612, 792}},
FrontEndVersion->"8.0 for Mac OS X x86 (32-bit, 64-bit Kernel) (February 23, \
2011)",
StyleDefinitions->Notebook[{
   Cell[
    StyleData[
    StyleDefinitions -> 
     FrontEnd`FileName[{"Book"}, "Textbook.nb", CharacterEncoding -> 
       "UTF-8"]]], 
   Cell[
    StyleData["BookChapterNumber"]]}, Visible -> False, FrontEndVersion -> 
  "8.0 for Mac OS X x86 (32-bit, 64-bit Kernel) (February 23, 2011)", 
  StyleDefinitions -> "PrivateStylesheetFormatting.nb"]
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{}
*)
(*CellTagsIndex
CellTagsIndex->{}
*)
(*NotebookFileOutline
Notebook[{
Cell[CellGroupData[{
Cell[579, 22, 121, 2, 146, "BookChapterNumber"],
Cell[703, 26, 108, 1, 125, "BookChapterTitle"],
Cell[CellGroupData[{
Cell[836, 31, 159, 2, 54, "Section"],
Cell[CellGroupData[{
Cell[1020, 37, 118, 1, 31, "Subsection"],
Cell[1141, 40, 355, 6, 35, "Text"],
Cell[1499, 48, 136, 1, 20, "Text"],
Cell[CellGroupData[{
Cell[1660, 53, 165, 2, 16, "Item1Numbered"],
Cell[1828, 57, 127, 1, 16, "Item1Numbered"],
Cell[1958, 60, 118, 1, 16, "Item1Numbered"],
Cell[2079, 63, 161, 2, 16, "Item1Numbered"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[2289, 71, 161, 2, 31, "Subsection"],
Cell[2453, 75, 320, 6, 35, "Text"],
Cell[2776, 83, 363, 6, 35, "Example"],
Cell[CellGroupData[{
Cell[3164, 93, 120, 1, 18, "Subsubsection"],
Cell[CellGroupData[{
Cell[3309, 98, 389, 8, 35, "Definition"],
Cell[3701, 108, 301, 7, 35, "Definition"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[4051, 121, 117, 1, 18, "Subsubsection"],
Cell[CellGroupData[{
Cell[4193, 126, 395, 8, 35, "Definition"],
Cell[4591, 136, 946, 29, 36, "Example"],
Cell[5540, 167, 373, 8, 35, "Definition"],
Cell[5916, 177, 2357, 79, 64, "Example"]
}, Open  ]]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[8334, 263, 124, 1, 31, "Subsection"],
Cell[8461, 266, 691, 15, 55, "Text"],
Cell[9155, 283, 285, 7, 20, "Definition"]
}, Open  ]],
Cell[CellGroupData[{
Cell[9477, 295, 106, 1, 31, "Subsection"],
Cell[9586, 298, 541, 9, 50, "Text"],
Cell[10130, 309, 249, 7, 20, "Example"],
Cell[10382, 318, 693, 17, 19, "Input",
 CellOpen->False],
Cell[11078, 337, 11539, 204, 238, "Input"]
}, Open  ]],
Cell[CellGroupData[{
Cell[22654, 546, 100, 1, 31, "Subsection"],
Cell[22757, 549, 434, 7, 35, "Text"],
Cell[23194, 558, 554, 13, 50, "Text"],
Cell[23751, 573, 3015, 66, 195, "Input"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[26815, 645, 89, 1, 54, "Section"],
Cell[26907, 648, 272, 5, 35, "Text"],
Cell[CellGroupData[{
Cell[27204, 657, 109, 1, 31, "Subsection"],
Cell[CellGroupData[{
Cell[27338, 662, 117, 1, 18, "Subsubsection"],
Cell[CellGroupData[{
Cell[27480, 667, 224, 5, 20, "Definition"],
Cell[27707, 674, 317, 7, 35, "Definition"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[28073, 687, 136, 1, 18, "Subsubsection"],
Cell[CellGroupData[{
Cell[28234, 692, 282, 7, 20, "Definition"],
Cell[28519, 701, 386, 8, 35, "Definition"],
Cell[28908, 711, 565, 9, 50, "Definition"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[29522, 726, 129, 1, 18, "Subsubsection"],
Cell[CellGroupData[{
Cell[29676, 731, 300, 7, 20, "Definition"],
Cell[29979, 740, 280, 6, 35, "Definition"]
}, Open  ]]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[30320, 753, 105, 1, 31, "Subsection"],
Cell[30428, 756, 456, 7, 50, "Text"]
}, Open  ]]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[30945, 770, 72, 1, 146, "BookChapterNumber"],
Cell[31020, 773, 152, 2, 154, "BookChapterTitle"],
Cell[CellGroupData[{
Cell[31197, 779, 97, 1, 54, "Section"],
Cell[31297, 782, 465, 14, 20, "Text"],
Cell[31765, 798, 26, 0, 27, "Input"],
Cell[CellGroupData[{
Cell[31816, 802, 569, 17, 35, "Definition"],
Cell[32388, 821, 288, 7, 20, "Definition"]
}, Open  ]],
Cell[32691, 831, 239, 4, 35, "Text"],
Cell[32933, 837, 2624, 60, 177, "Input"],
Cell[CellGroupData[{
Cell[35582, 901, 602, 17, 35, "Definition"],
Cell[36187, 920, 816, 23, 47, "Definition"],
Cell[37006, 945, 405, 10, 20, "Definition"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[37460, 961, 133, 2, 54, "Section"],
Cell[37596, 965, 397, 7, 35, "Text"],
Cell[37996, 974, 922, 23, 72, "Text"],
Cell[CellGroupData[{
Cell[38943, 1001, 856, 24, 28, "Item1Numbered"],
Cell[39802, 1027, 324, 8, 22, "Item1Numbered"],
Cell[40129, 1037, 315, 9, 18, "Item1Numbered"],
Cell[40447, 1048, 281, 8, 19, "Item1Numbered"]
}, Open  ]],
Cell[CellGroupData[{
Cell[40765, 1061, 132, 1, 31, "Subsection"],
Cell[40900, 1064, 923, 27, 47, "Definition"],
Cell[CellGroupData[{
Cell[41848, 1095, 1143, 33, 70, "Input"],
Cell[42994, 1130, 135690, 2237, 326, 102111, 1685, "CachedBoxData", \
"BoxData", "Output"]
}, {2}]],
Cell[178696, 3370, 486, 13, 35, "Text"],
Cell[CellGroupData[{
Cell[179207, 3387, 2555, 79, 116, "Example"],
Cell[181765, 3468, 1828, 58, 76, "ExampleContinuation"]
}, Open  ]],
Cell[183608, 3529, 468, 14, 27, "Text"],
Cell[184079, 3545, 3539, 123, 160, "Example"]
}, Open  ]],
Cell[CellGroupData[{
Cell[187655, 3673, 120, 1, 31, "Subsection"],
Cell[187778, 3676, 366, 7, 35, "Text"],
Cell[188147, 3685, 1865, 64, 58, "Text"],
Cell[190015, 3751, 958, 31, 48, "Text"],
Cell[190976, 3784, 293, 7, 20, "Definition"],
Cell[191272, 3793, 1417, 48, 50, "Text"],
Cell[192692, 3843, 325, 7, 20, "Definition"],
Cell[193020, 3852, 555, 15, 26, "Text"],
Cell[193578, 3869, 1607, 50, 73, "Text"],
Cell[195188, 3921, 274, 5, 20, "Text"],
Cell[195465, 3928, 1670, 57, 93, "Text"],
Cell[197138, 3987, 568, 11, 53, "Text"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[197755, 4004, 162, 2, 54, "Section"],
Cell[CellGroupData[{
Cell[197942, 4010, 120, 1, 31, "Subsection"],
Cell[CellGroupData[{
Cell[198087, 4015, 249, 8, 16, "Item1"],
Cell[198339, 4025, 341, 11, 18, "Item1"],
Cell[198683, 4038, 567, 17, 21, "Item1"]
}, Open  ]],
Cell[199265, 4058, 2750, 55, 216, "Input"],
Cell[202018, 4115, 390, 13, 16, "Item1"],
Cell[202411, 4130, 3109, 62, 242, "Input"],
Cell[205523, 4194, 260, 5, 16, "Item1"]
}, Open  ]],
Cell[CellGroupData[{
Cell[205820, 4204, 160, 3, 31, "Subsection"],
Cell[CellGroupData[{
Cell[206005, 4211, 193, 4, 18, "Subsubsection"],
Cell[CellGroupData[{
Cell[206223, 4219, 106, 1, 18, "Subsubsubsection"],
Cell[CellGroupData[{
Cell[206354, 4224, 513, 18, 22, "Item2"],
Cell[206870, 4244, 562, 20, 22, "Item2"],
Cell[207435, 4266, 270, 8, 15, "Item2"],
Cell[207708, 4276, 102, 1, 15, "Item2"],
Cell[207813, 4279, 167, 3, 15, "Item2"]
}, Open  ]]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[208041, 4289, 150, 3, 18, "Subsubsection"],
Cell[CellGroupData[{
Cell[208216, 4296, 108, 1, 18, "Subsubsubsection"],
Cell[CellGroupData[{
Cell[208349, 4301, 513, 18, 22, "Item2"],
Cell[208865, 4321, 562, 20, 22, "Item2"],
Cell[209430, 4343, 253, 5, 15, "Item2"],
Cell[209686, 4350, 141, 2, 15, "Item2"],
Cell[209830, 4354, 217, 4, 15, "Item2"]
}, Open  ]]
}, Open  ]]
}, Open  ]]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[210132, 4367, 113, 1, 54, "Section"],
Cell[210248, 4370, 644, 10, 50, "Text"],
Cell[210895, 4382, 1505, 48, 96, "Text"],
Cell[212403, 4432, 321, 6, 35, "Text"],
Cell[CellGroupData[{
Cell[212749, 4442, 113, 1, 31, "Subsection"],
Cell[212865, 4445, 491, 15, 20, "Text"],
Cell[213359, 4462, 395, 12, 26, "Text"],
Cell[213757, 4476, 2810, 94, 122, "Text"],
Cell[216570, 4572, 1376, 44, 74, "Text"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[217995, 4622, 214, 4, 54, "Section"],
Cell[218212, 4628, 142, 3, 20, "Text"],
Cell[218357, 4633, 714, 15, 65, "Text"],
Cell[219074, 4650, 1265, 42, 76, "Example"],
Cell[CellGroupData[{
Cell[220364, 4696, 260, 8, 38, "Subsection"],
Cell[220627, 4706, 354, 7, 35, "Text"],
Cell[220984, 4715, 4025, 87, 181, "Input"],
Cell[225012, 4804, 1966, 64, 91, "Text"],
Cell[226981, 4870, 340, 9, 31, "Text"],
Cell[227324, 4881, 521, 11, 53, "Text"]
}, Open  ]],
Cell[CellGroupData[{
Cell[227882, 4897, 93, 1, 31, "Subsection"],
Cell[227978, 4900, 212, 4, 20, "Text"],
Cell[228193, 4906, 842, 24, 71, "Text"],
Cell[229038, 4932, 292, 5, 35, "Text"],
Cell[229333, 4939, 773, 24, 32, "Example"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[230155, 4969, 107, 1, 54, "Section"],
Cell[230265, 4972, 1234, 46, 36, "Text"],
Cell[231502, 5020, 787, 25, 42, "Text"],
Cell[232292, 5047, 614, 14, 35, "Text"],
Cell[232909, 5063, 1061, 35, 81, "Text"],
Cell[233973, 5100, 269, 8, 20, "Text"],
Cell[234245, 5110, 276, 7, 20, "Text"],
Cell[234524, 5119, 16, 0, 20, "Text"],
Cell[234543, 5121, 16, 0, 20, "Text"]
}, Open  ]],
Cell[CellGroupData[{
Cell[234596, 5126, 101, 1, 54, "Section"],
Cell[CellGroupData[{
Cell[234722, 5131, 86, 1, 31, "Subsection"],
Cell[CellGroupData[{
Cell[234833, 5136, 119, 1, 18, "Subsubsection"],
Cell[234955, 5139, 5442, 110, 179, "Input"],
Cell[240400, 5251, 757, 23, 77, "Text"],
Cell[241160, 5276, 304, 7, 20, "Text"]
}, Open  ]],
Cell[CellGroupData[{
Cell[241501, 5288, 108, 1, 18, "Subsubsection"],
Cell[241612, 5291, 3744, 76, 190, "Input"],
Cell[245359, 5369, 789, 24, 64, "Text"],
Cell[246151, 5395, 225, 6, 20, "Text"]
}, Open  ]],
Cell[CellGroupData[{
Cell[246413, 5406, 144, 2, 18, "Subsubsection"],
Cell[246560, 5410, 4626, 91, 227, "Input"],
Cell[251189, 5503, 1013, 31, 93, "Text"]
}, Open  ]],
Cell[CellGroupData[{
Cell[252239, 5539, 141, 3, 18, "Subsubsection"],
Cell[252383, 5544, 2704, 47, 164, "Input"],
Cell[255090, 5593, 710, 21, 67, "Text"],
Cell[255803, 5616, 260, 6, 20, "Text"]
}, Open  ]],
Cell[CellGroupData[{
Cell[256100, 5627, 104, 1, 18, "Subsubsection"],
Cell[256207, 5630, 5097, 105, 176, "Input"],
Cell[261307, 5737, 465, 16, 23, "Text"]
}, Open  ]]
}, Open  ]]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[261845, 5761, 74, 1, 146, "BookChapterNumber"],
Cell[261922, 5764, 171, 3, 154, "BookChapterTitle"],
Cell[CellGroupData[{
Cell[262118, 5771, 99, 1, 54, "Section"],
Cell[262220, 5774, 239, 5, 20, "Text"],
Cell[262462, 5781, 2067, 76, 73, "Text"],
Cell[264532, 5859, 320, 6, 35, "Text"],
Cell[264855, 5867, 920, 27, 49, "Text"],
Cell[CellGroupData[{
Cell[265800, 5898, 877, 27, 42, "Definition"],
Cell[266680, 5927, 1686, 51, 105, "Example"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[268415, 5984, 98, 1, 54, "Section"],
Cell[268516, 5987, 566, 15, 35, "Text"],
Cell[269085, 6004, 134, 3, 20, "Text"],
Cell[269222, 6009, 1817, 61, 66, "Text"],
Cell[271042, 6072, 1494, 60, 73, "Text"],
Cell[272539, 6134, 337, 6, 35, "Text"],
Cell[272879, 6142, 320, 6, 35, "Text"]
}, Open  ]],
Cell[CellGroupData[{
Cell[273236, 6153, 97, 1, 54, "Section"],
Cell[CellGroupData[{
Cell[273358, 6158, 136, 3, 31, "Subsection"],
Cell[273497, 6163, 265, 8, 22, "Text"],
Cell[273765, 6173, 1101, 35, 25, "Text"],
Cell[274869, 6210, 766, 25, 35, "Text"],
Cell[275638, 6237, 392, 12, 25, "Text"]
}, Open  ]],
Cell[CellGroupData[{
Cell[276067, 6254, 150, 2, 31, "Subsection"],
Cell[276220, 6258, 267, 8, 23, "Text"],
Cell[276490, 6268, 2062, 67, 55, "Text"],
Cell[278555, 6337, 1161, 38, 35, "Text"],
Cell[279719, 6377, 998, 35, 42, "Text"],
Cell[280720, 6414, 1185, 39, 65, "Text"]
}, Open  ]],
Cell[CellGroupData[{
Cell[281942, 6458, 416, 11, 42, "Subsection"],
Cell[282361, 6471, 1055, 28, 66, "Text"],
Cell[CellGroupData[{
Cell[283441, 6503, 308, 8, 22, "Subsubsection"],
Cell[283752, 6513, 1166, 37, 25, "Text"]
}, Open  ]],
Cell[CellGroupData[{
Cell[284955, 6555, 192, 4, 18, "Subsubsection"],
Cell[285150, 6561, 2222, 79, 104, "Text"]
}, Open  ]]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[287433, 6647, 140, 2, 54, "Section"],
Cell[287576, 6651, 830, 27, 31, "Text"],
Cell[288409, 6680, 1209, 40, 29, "Text"],
Cell[289621, 6722, 1219, 45, 36, "Text"]
}, Open  ]],
Cell[CellGroupData[{
Cell[290877, 6772, 107, 1, 54, "Section"],
Cell[CellGroupData[{
Cell[291009, 6777, 105, 1, 31, "Subsection"],
Cell[291117, 6780, 1826, 55, 81, "Text"]
}, Open  ]],
Cell[CellGroupData[{
Cell[292980, 6840, 102, 1, 31, "Subsection"],
Cell[CellGroupData[{
Cell[293107, 6845, 153, 2, 18, "Subsubsection"],
Cell[293263, 6849, 508, 14, 27, "Text"],
Cell[293774, 6865, 527, 16, 43, "Text"],
Cell[294304, 6883, 1224, 41, 51, "Text"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[295577, 6930, 171, 2, 31, "Subsection"],
Cell[295751, 6934, 739, 14, 68, "Text"],
Cell[296493, 6950, 136, 3, 20, "Text"],
Cell[CellGroupData[{
Cell[296654, 6957, 148, 3, 16, "Item1Numbered"],
Cell[296805, 6962, 227, 4, 16, "Item1Numbered"],
Cell[297035, 6968, 135, 3, 16, "Item1Numbered"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[297219, 6977, 127, 2, 31, "Subsection"],
Cell[297349, 6981, 439, 11, 38, "Text"],
Cell[297791, 6994, 1078, 34, 36, "Text"]
}, Open  ]],
Cell[CellGroupData[{
Cell[298906, 7033, 127, 3, 31, "Subsection"],
Cell[299036, 7038, 366, 10, 23, "Text"],
Cell[299405, 7050, 286, 6, 35, "Text"],
Cell[299694, 7058, 841, 28, 34, "Text"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[300584, 7092, 106, 1, 54, "Section"],
Cell[300693, 7095, 400, 7, 35, "Text"],
Cell[301096, 7104, 185, 4, 20, "Text"],
Cell[301284, 7110, 545, 9, 50, "Text"],
Cell[301832, 7121, 377, 6, 35, "Text"]
}, Open  ]],
Cell[CellGroupData[{
Cell[302246, 7132, 147, 2, 54, "Section"],
Cell[302396, 7136, 317, 6, 35, "Text"],
Cell[302716, 7144, 394, 12, 24, "Text"],
Cell[303113, 7158, 356, 6, 35, "Text"],
Cell[303472, 7166, 1630, 53, 44, "Text"],
Cell[305105, 7221, 243, 5, 20, "Text"],
Cell[305351, 7228, 61, 1, 20, "Text"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[305461, 7235, 72, 1, 146, "BookChapterNumber"],
Cell[305536, 7238, 204, 3, 154, "BookChapterTitle"],
Cell[CellGroupData[{
Cell[305765, 7245, 157, 2, 54, "Section"],
Cell[CellGroupData[{
Cell[305947, 7251, 109, 1, 31, "Subsection"],
Cell[306059, 7254, 1257, 37, 61, "Text"],
Cell[307319, 7293, 2176, 70, 88, "Text"],
Cell[309498, 7365, 389, 7, 35, "Text"],
Cell[309890, 7374, 385, 8, 35, "Definition"]
}, Open  ]],
Cell[CellGroupData[{
Cell[310312, 7387, 134, 3, 31, "Subsection"],
Cell[310449, 7392, 641, 21, 20, "Text"],
Cell[311093, 7415, 957, 34, 41, "Text"],
Cell[312053, 7451, 1733, 57, 44, "Text"],
Cell[313789, 7510, 502, 11, 38, "Text"],
Cell[314294, 7523, 730, 17, 68, "Definition"],
Cell[315027, 7542, 796, 23, 19, "Input",
 Evaluatable->False,
 CellOpen->False],
Cell[315826, 7567, 81963, 1371, 248, 70148, 1176, "CachedBoxData", "BoxData", \
"Input"]
}, Open  ]],
Cell[CellGroupData[{
Cell[397826, 8943, 211, 4, 31, "Subsection"],
Cell[CellGroupData[{
Cell[398062, 8951, 861, 16, 71, "Item1Numbered"],
Cell[398926, 8969, 291, 6, 29, "Item1Numbered"],
Cell[399220, 8977, 436, 7, 29, "Item1Numbered"],
Cell[399659, 8986, 500, 9, 42, "Item1Numbered"],
Cell[400162, 8997, 175, 3, 16, "Item1Numbered"],
Cell[400340, 9002, 167, 3, 16, "Item1Numbered"]
}, Open  ]],
Cell[400522, 9008, 336, 6, 35, "Text"]
}, Open  ]],
Cell[CellGroupData[{
Cell[400895, 9019, 117, 1, 31, "Subsection"],
Cell[401015, 9022, 909, 27, 56, "Text"],
Cell[401927, 9051, 498, 11, 38, "Text"]
}, Open  ]],
Cell[CellGroupData[{
Cell[402462, 9067, 137, 3, 31, "Subsection"],
Cell[CellGroupData[{
Cell[402624, 9074, 104, 1, 16, "Item1Numbered"],
Cell[402731, 9077, 277, 5, 29, "Item1Numbered"],
Cell[403011, 9084, 344, 6, 29, "Item1Numbered"],
Cell[403358, 9092, 498, 8, 42, "Item1Numbered"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[403905, 9106, 185, 4, 31, "Subsection"],
Cell[404093, 9112, 494, 9, 50, "Definition"],
Cell[404590, 9123, 368, 7, 35, "Text"],
Cell[404961, 9132, 408, 8, 35, "Definition"],
Cell[405372, 9142, 763, 17, 50, "Text"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[406184, 9165, 128, 2, 54, "Section"],
Cell[CellGroupData[{
Cell[406337, 9171, 432, 8, 35, "Definition"],
Cell[406772, 9181, 470, 9, 35, "Definition"]
}, Open  ]],
Cell[CellGroupData[{
Cell[407279, 9195, 205, 4, 31, "Subsection"],
Cell[407487, 9201, 705, 18, 35, "Text"],
Cell[408195, 9221, 980, 33, 32, "Text"],
Cell[409178, 9256, 262, 5, 35, "Text"],
Cell[CellGroupData[{
Cell[409465, 9265, 506, 10, 35, "Definition"],
Cell[409974, 9277, 450, 9, 50, "Definition"]
}, Open  ]],
Cell[410439, 9289, 411, 7, 50, "Text"]
}, Open  ]],
Cell[CellGroupData[{
Cell[410887, 9301, 169, 3, 31, "Subsection"],
Cell[411059, 9306, 344, 6, 35, "Text"],
Cell[CellGroupData[{
Cell[411428, 9316, 190, 4, 18, "Subsubsection"],
Cell[411621, 9322, 468, 13, 22, "Text"],
Cell[412092, 9337, 253, 5, 20, "Text"],
Cell[412348, 9344, 416, 7, 35, "Text"],
Cell[412767, 9353, 618, 16, 66, "Proposition"]
}, Open  ]],
Cell[CellGroupData[{
Cell[413422, 9374, 173, 2, 18, "Subsubsection"],
Cell[413598, 9378, 273, 5, 35, "Text"],
Cell[413874, 9385, 1809, 59, 111, "Text"],
Cell[415686, 9446, 837, 23, 49, "Definition"]
}, Open  ]]
}, Open  ]]
}, Open  ]]
}, Open  ]]
}
]
*)

(* End of internal cache information *)
