(* Content-type: application/vnd.wolfram.mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='Mathematica 8.0' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       157,          7]
NotebookDataLength[    403253,       8873]
NotebookOptionsPosition[    385736,       8329]
NotebookOutlinePosition[    386195,       8347]
CellTagsIndexPosition[    386152,       8344]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{

Cell[CellGroupData[{
Cell["1", "BookChapterNumber",
 CellChangeTimes->{3.532447871626556*^9}],

Cell["Introduction to the Model", "BookChapterTitle",
 CellChangeTimes->{{3.532447878575789*^9, 3.532447883145348*^9}}],

Cell[CellGroupData[{

Cell["The model", "Section",
 CellChangeTimes->{{3.532447885152425*^9, 3.5324478859192142`*^9}}],

Cell[CellGroupData[{

Cell["\<\
The Five Assumptions (A.1-A.5, A.2-A.5 are called the Gauss Markov \
Assumptions)\
\>", "Subsection",
 CellChangeTimes->{{3.5279450131392612`*^9, 3.527945022358893*^9}, {
  3.532448405163476*^9, 3.532448414373958*^9}}],

Cell[CellGroupData[{

Cell[TextData[{
 "(A.1): ",
 Cell[BoxData[
  FormBox[
   SubscriptBox["\[Epsilon]", "t"], TraditionalForm]]],
 "are normally distribute, \[Epsilon] ~ N ",
 Cell[BoxData[
  FormBox[
   RowBox[{"(", 
    RowBox[{"0", ",", 
     RowBox[{
      SuperscriptBox["\[Sigma]", "2"], "I"}]}], ")"}], TraditionalForm]],
  FormatType->"TraditionalForm"]
}], "Item1",
 CellChangeTimes->{{3.527945035248377*^9, 3.527945048227858*^9}, {
  3.532454434972728*^9, 3.532454444462929*^9}}],

Cell[TextData[{
 "(A.2): ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{"E", "(", 
     RowBox[{
      SubscriptBox["\[Epsilon]", "t"], "|", 
      SubscriptBox["X", "t"]}], ")"}], " ", "=", " ", "0"}], TraditionalForm]]]
}], "Item1",
 CellChangeTimes->{{3.5279450502577767`*^9, 3.527945068217058*^9}}],

Cell[TextData[{
 "(A.3): Homoskedasticity: ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{"Var", "(", 
     RowBox[{
      SubscriptBox["\[Epsilon]", "t"], "|", 
      SubscriptBox["X", "t"]}], ")"}], "=", 
    RowBox[{
     SuperscriptBox[
      SubscriptBox["\[Sigma]", "t"], "2"], " ", "=", " ", 
     SuperscriptBox["\[Sigma]", "2"]}]}], TraditionalForm]]],
 ", for all t"
}], "Item1",
 CellChangeTimes->{{3.527945070066984*^9, 3.5279451193050146`*^9}, {
   3.5279451548335934`*^9, 3.5279451741328216`*^9}, 3.5279714179669914`*^9, 
   3.527971675737017*^9}]
}, Open  ]],

Cell[BoxData[
 GraphicsBox[{
   LineBox[{{0.09722222222222224, 0.8138888888888891}, {0.09444444444444447, 
    0.23055555555555562`}, {0.5194444444444446, 0.2333333333333334}}], 
   LineBox[{{0.7500000000000001, 0.8236111111111111}, {0.7472222222222223, 
    0.2402777777777776}, {1.1722222222222225`, 0.24305555555555536`}}], 
   LineBox[{{0.09444444444444447, 0.411111111111111}, {0.4722222222222223, 
    0.5749999999999997}}], 
   LineBox[{{0.7444444444444446, 0.4458333333333333}, {1.1222222222222225`, 
    0.609722222222222}}], 
   PointBox[{0.11944444444444444`, 0.4583333333333335}], 
   PointBox[{0.15277777777777782`, 0.4222222222222225}], 
   PointBox[{0.20555555555555557`, 0.48888888888888893`}], 
   PointBox[{0.2444444444444445, 0.43611111111111134`}], 
   PointBox[{0.31666666666666676`, 0.5194444444444446}], 
   PointBox[{0.3777777777777779, 0.5833333333333335}], 
   PointBox[{0.4222222222222223, 0.48611111111111116`}], 
   PointBox[{0.35277777777777786`, 0.48611111111111116`}], 
   PointBox[{0.4666666666666668, 0.5833333333333335}], 
   PointBox[{0.48611111111111127`, 0.5444444444444445}], 
   PointBox[{0.7722222222222224, 0.48888888888888893`}], 
   PointBox[{0.7750000000000001, 0.40555555555555545`}], 
   PointBox[{0.838888888888889, 0.46111111111111125`}], 
   PointBox[{0.8527777777777779, 0.5055555555555558}], 
   PointBox[{0.916666666666667, 0.5333333333333334}], 
   PointBox[{0.9333333333333336, 0.46944444444444455`}], 
   PointBox[{0.9583333333333335, 0.38611111111111107`}], 
   PointBox[{1.013888888888889, 0.3666666666666667}], 
   PointBox[{1.0500000000000003`, 0.3666666666666667}], 
   PointBox[{1.052777777777778, 0.411111111111111}], 
   PointBox[{1.0361111111111114`, 0.6111111111111112}], 
   PointBox[{1.0500000000000003`, 0.802777777777778}], 
   PointBox[{1.1305555555555558`, 0.5722222222222224}], 
   PointBox[{1.1583333333333337`, 0.6472222222222224}], InsetBox[
    StyleBox[Cell["Homoskedasticity",
      GeneratedCell->False,
      CellAutoOverwrite->False,
      CellBaseline->Baseline,
      TextAlignment->Left],
     Background->GrayLevel[1.]], {0.21451077943615268`, 0.7978026533996689}, {
    Left, Baseline},
    Alignment->{Left, Top}], InsetBox[
    StyleBox[Cell["Heteroskedasticity",
      GeneratedCell->False,
      CellAutoOverwrite->False,
      CellBaseline->Baseline,
      TextAlignment->Left],
     Background->GrayLevel[1.]], {0.8638888888888889, 0.8472222222222221}, {
    Left, Baseline},
    Alignment->{Left, Top}]},
  ContentSelectable->True,
  ImagePadding->{{0., 0.}, {0., 0.}},
  ImageSize->{268., 201.},
  PlotRange->{{0., 1.3333333333333335`}, {0., 1.}},
  PlotRangePadding->Automatic]], "Input",
 CellChangeTimes->{{3.527945319587003*^9, 3.527945386384331*^9}}],

Cell[TextData[{
 "(A.4): No Autocorrelation: ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{"Cov", "(", 
     RowBox[{
      SubscriptBox["\[Epsilon]", "t"], 
      SubscriptBox["\[Epsilon]", "s"]}], ")"}], " ", "=", " ", "0"}], 
   TraditionalForm]]],
 " t\[NotEqual]s"
}], "Item1",
 CellChangeTimes->{{3.527945174472808*^9, 3.5279452667791157`*^9}}],

Cell[BoxData[
 GraphicsBox[{
   LineBox[{{0.0777777777777778, 0.8361111111111112}, {0.0777777777777778, 
    0.25}, {0.5500000000000002, 0.25}}], 
   LineBox[{{0.7180555555555558, 0.8374999999999999}, {0.7180555555555558, 
    0.25138888888888866`}, {1.1902777777777782`, 0.25138888888888866`}}], 
   LineBox[{{0.08055555555555557, 0.44444444444444464`}, {0.4750000000000002, 
    0.5861111111111112}}], 
   LineBox[{{0.7152777777777779, 0.4097222222222223}, {1.1097222222222225`, 
    0.5513888888888889}}], 
   PointBox[{0.10833333333333336`, 0.4222222222222225}], 
   PointBox[{0.15555555555555559`, 0.4472222222222224}], 
   PointBox[{0.16111111111111112`, 0.4916666666666667}], 
   PointBox[{0.23611111111111113`, 0.463888888888889}], 
   PointBox[{0.25277777777777777`, 0.5194444444444446}], 
   PointBox[{0.28333333333333344`, 0.4805555555555556}], 
   PointBox[{0.33611111111111125`, 0.5444444444444445}], 
   PointBox[{0.3750000000000001, 0.5694444444444446}], 
   PointBox[{0.41666666666666674`, 0.5916666666666668}], 
   PointBox[{0.4222222222222223, 0.5361111111111112}], 
   PointBox[{0.4750000000000001, 0.5555555555555556}], 
   PointBox[{0.4833333333333334, 0.6222222222222222}], 
   PointBox[{0.5138888888888891, 0.5805555555555557}], 
   PointBox[{0.7500000000000002, 0.37777777777777777`}], 
   PointBox[{0.7972222222222224, 0.3916666666666666}], 
   PointBox[{0.8305555555555557, 0.4083333333333332}], 
   PointBox[{0.8361111111111112, 0.4305555555555558}], 
   PointBox[{0.8361111111111112, 0.46944444444444455`}], 
   PointBox[{0.8444444444444446, 0.5055555555555558}], 
   PointBox[{0.8555555555555558, 0.5333333333333334}], 
   PointBox[{0.8805555555555558, 0.5444444444444445}], 
   PointBox[{0.916666666666667, 0.5527777777777778}], 
   PointBox[{0.9388888888888891, 0.5583333333333333}], 
   PointBox[{0.9500000000000002, 0.5611111111111111}], 
   PointBox[{0.9722222222222225, 0.5527777777777778}], 
   PointBox[{0.9944444444444447, 0.5527777777777778}], 
   PointBox[{1.0444444444444447`, 0.5333333333333334}], 
   PointBox[{1.0555555555555558`, 0.5194444444444446}], 
   PointBox[{1.0861111111111112`, 0.5194444444444446}], 
   PointBox[{1.127777777777778, 0.5361111111111112}], 
   PointBox[{1.1361111111111113`, 0.5444444444444445}], InsetBox[
    StyleBox[Cell["No Autocorrelation",
      GeneratedCell->False,
      CellAutoOverwrite->False,
      CellBaseline->Baseline,
      TextAlignment->Left],
     Background->GrayLevel[1.]], {0.20833333333333334`, 0.7416666666666669}, {
    Left, Baseline},
    Alignment->{Left, Top}], InsetBox[
    StyleBox[Cell["Autocorrelation",
      GeneratedCell->False,
      CellAutoOverwrite->False,
      CellBaseline->Baseline,
      TextAlignment->Left],
     Background->GrayLevel[1.]], {0.8444444444444446, 0.7666666666666668}, {
    Left, Baseline},
    Alignment->{Left, Top}]},
  ContentSelectable->True,
  ImagePadding->{{0., 0.}, {0., 0.}},
  ImageSize->{303., 227.},
  PlotRange->{{0., 1.3333333333333335`}, {0., 1.}},
  PlotRangePadding->Automatic]], "Input",
 CellChangeTimes->{{3.5279453959439487`*^9, 3.527945465541165*^9}}],

Cell["\<\
(A.5):  X\[CloseCurlyQuote]s are non-stochastic or in other words the X\
\[CloseCurlyQuote]s and the \[Epsilon]\[CloseCurlyQuote]s are not \
statistically correlated. \
\>", "Item1",
 CellChangeTimes->{{3.5279452674290895`*^9, 3.527945295497967*^9}}]
}, Closed]],

Cell[CellGroupData[{

Cell["\<\
The Two models (Classical Linear, and Classical Normal Linear)\
\>", "Subsection",
 CellChangeTimes->{{3.527945485890351*^9, 3.5279454953799715`*^9}}],

Cell[CellGroupData[{

Cell["Classical Linear Regression Model (A.2-A.5)", "Subsubsection",
 CellChangeTimes->{{3.527945498829833*^9, 3.527945529778595*^9}, {
  3.527945677722677*^9, 3.5279456808925505`*^9}}],

Cell[CellGroupData[{

Cell["Properties", "Subsubsubsection",
 CellChangeTimes->{{3.5279455071195016`*^9, 3.527945513859232*^9}}],

Cell[CellGroupData[{

Cell[TextData[{
 "The ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{
     OverscriptBox["\[Beta]", "^"], "'"}], "s"}], TraditionalForm]]],
 " are unbiased: ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{"E", "(", 
     SubscriptBox[
      OverscriptBox["\[Beta]", "^"], "i"], ")"}], " ", "=", " ", 
    SubscriptBox["\[Beta]", "i"]}], TraditionalForm]]]
}], "Item2",
 CellChangeTimes->{{3.527945535538365*^9, 3.5279455648671913`*^9}}],

Cell[TextData[{
 "The ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{
     OverscriptBox["\[Beta]", "^"], "'"}], "s"}], TraditionalForm]]],
 " are consistent: ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{"Var", "(", 
     SubscriptBox[
      OverscriptBox["\[Beta]", "^"], "i"], ")"}], "->", " ", 
    RowBox[{
     RowBox[{"0", " ", "as", " ", "n"}], "->", "\[Infinity]"}]}], 
   TraditionalForm]]]
}], "Item2",
 CellChangeTimes->{{3.5279455659471483`*^9, 3.5279455985558443`*^9}}],

Cell[TextData[{
 "They have the minimum variable of all ",
 StyleBox["linear",
  FontWeight->"Bold",
  FontSlant->"Italic"],
 " unbiased estimators (THE ARE BLUE)"
}], "Item2",
 CellChangeTimes->{{3.527945599305814*^9, 3.5279456212749352`*^9}, 
   3.527945724450808*^9}],

Cell["OLS\[NotEqual]MLE", "Item2",
 CellChangeTimes->{{3.527945621784915*^9, 3.5279456398641915`*^9}}],

Cell["\<\
They are not normally distributed and therefore t and f stats are not exact.\
\>", "Item2",
 CellChangeTimes->{{3.527945640474167*^9, 3.527945655943548*^9}}]
}, Open  ]]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell["Classical Normal Liner Regression Model (A.1-A.5)", "Subsubsection",
 CellChangeTimes->{{3.527945660453368*^9, 3.5279456753327727`*^9}}],

Cell[CellGroupData[{

Cell["Properties", "Subsubsubsection",
 CellChangeTimes->{{3.5279456844724073`*^9, 3.5279456864923267`*^9}}],

Cell[CellGroupData[{

Cell[TextData[{
 "The ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{
     OverscriptBox["\[Beta]", "^"], "'"}], "s"}], TraditionalForm]]],
 " are unbiased: ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{"E", "(", 
     SubscriptBox[
      OverscriptBox["\[Beta]", "^"], "i"], ")"}], " ", "=", " ", 
    SubscriptBox["\[Beta]", "i"]}], TraditionalForm]]]
}], "Item2",
 CellChangeTimes->{{3.527945535538365*^9, 3.5279455648671913`*^9}}],

Cell[TextData[{
 "The ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{
     OverscriptBox["\[Beta]", "^"], "'"}], "s"}], TraditionalForm]]],
 " are consistent: ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{"Var", "(", 
     SubscriptBox[
      OverscriptBox["\[Beta]", "^"], "i"], ")"}], "->", " ", 
    RowBox[{
     RowBox[{"0", " ", "as", " ", "n"}], "->", "\[Infinity]"}]}], 
   TraditionalForm]]]
}], "Item2",
 CellChangeTimes->{{3.5279455659471483`*^9, 3.5279455985558443`*^9}}],

Cell["\<\
They have the minimum variable of ALL unbiased estimators (THE ARE BLUE, and \
more)\
\>", "Item2",
 CellChangeTimes->{{3.527945599305814*^9, 3.5279456212749352`*^9}, {
   3.527945726250736*^9, 3.5279457383602514`*^9}, 3.5279714222568197`*^9}],

Cell["OLS=MLE", "Item2",
 CellChangeTimes->{{3.527945621784915*^9, 3.5279456398641915`*^9}, {
  3.527945704971587*^9, 3.527945705001586*^9}}],

Cell["\<\
They ARE  normally distributed and therefore t and f stats are exact.\
\>", "Item2",
 CellChangeTimes->{{3.527945640474167*^9, 3.527945655943548*^9}, {
  3.5279457079114695`*^9, 3.5279457111113415`*^9}, {3.5324488376744337`*^9, 
  3.532448838255596*^9}}]
}, Open  ]]
}, Open  ]]
}, Closed]]
}, Closed]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Parameter Estimators", "Section",
 CellChangeTimes->{{3.527594531258162*^9, 3.527594537217503*^9}, 
   3.5278681574691124`*^9}],

Cell["\<\
We are often presented with a set of (x,y) data pairs and told to estimate a \
linear relationship between them. In doing this we will have to find a \
reasonable estimate for a slope constant and also for an intercept constant. \
\
\>", "Text",
 CellChangeTimes->{{3.5278681808279448`*^9, 3.5278682175961056`*^9}, {
   3.527868288562557*^9, 3.527868288562557*^9}, 3.527971398787759*^9}],

Cell[CellGroupData[{

Cell["OLS", "Subsection",
 CellChangeTimes->{{3.527962402944413*^9, 3.5279624047243423`*^9}, {
  3.532540701813569*^9, 3.532540703019763*^9}}],

Cell[CellGroupData[{

Cell["Derivation", "Subsubsection",
 CellChangeTimes->{{3.5325407045326366`*^9, 3.532540705546022*^9}}],

Cell[TextData[{
 "y = X\[Beta] + \[Epsilon] = ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    OverscriptBox["y", "^"], "+", "\[Epsilon]"}], TraditionalForm]]]
}], "Text",
 CellChangeTimes->{{3.527962406864257*^9, 3.52796243253323*^9}}],

Cell[TextData[{
 "SSE( ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{
     OverscriptBox["\[Beta]", "^"], ")"}], " ", "=", " ", 
    RowBox[{
     RowBox[{"\[Sum]", 
      SuperscriptBox[
       SubscriptBox["e", "t"], "2"]}], " ", "=", " ", 
     RowBox[{
      RowBox[{
       SuperscriptBox["\[Epsilon]", "T"], "\[Epsilon]"}], " ", "=", " ", 
      RowBox[{
       RowBox[{
        SuperscriptBox[
         RowBox[{"(", 
          RowBox[{"y", "-", " ", "X\[Beta]"}], ")"}], "T"], 
        RowBox[{"(", 
         RowBox[{"y", " ", "-", " ", "X\[Beta]"}], ")"}]}], " ", "=", " ", 
       RowBox[{
        RowBox[{
         RowBox[{"y", "'"}], "y"}], "-", 
        RowBox[{"2", 
         RowBox[{
          OverscriptBox["\[Beta]", "^"], "'"}], 
         RowBox[{"X", "'"}], "y"}], "+", 
        RowBox[{
         RowBox[{
          OverscriptBox["\[Beta]", "^"], "'"}], 
         RowBox[{"X", "'"}], "X", " ", 
         OverscriptBox["\[Beta]", "^"]}]}]}]}]}]}], TraditionalForm]]]
}], "Text",
 CellChangeTimes->{{3.527962432753221*^9, 3.527962546358677*^9}}],

Cell[TextData[Cell[BoxData[
 FormBox[
  RowBox[{
   FractionBox[
    RowBox[{"\[PartialD]", "SSE"}], 
    RowBox[{"\[PartialD]", 
     OverscriptBox[
      StyleBox["\[Beta]",
       FontWeight->"Bold"], "^"]}]], " ", "=", " ", 
   RowBox[{
    RowBox[{
     RowBox[{
      RowBox[{"-", "2"}], 
      RowBox[{"X", "'"}], "y"}], "+", 
     RowBox[{"2", 
      RowBox[{"X", "'"}], 
      OverscriptBox["X\[Beta]", "^"]}]}], " ", "=", " ", 
    RowBox[{
     RowBox[{"0", "->", " ", 
      RowBox[{
       RowBox[{"X", "'"}], 
       OverscriptBox["X\[Beta]", "^"]}]}], " ", "=", " ", 
     RowBox[{
      RowBox[{"X", "'"}], "y"}]}]}]}], TraditionalForm]]]], "Text",
 CellChangeTimes->{{3.5279625246895437`*^9, 3.5279626210356894`*^9}}],

Cell[TextData[Cell[BoxData[
 FormBox[
  RowBox[{
   OverscriptBox["\[Beta]", "^"], " ", "=", " ", 
   RowBox[{
    SuperscriptBox[
     RowBox[{"(", 
      RowBox[{
       RowBox[{"X", "'"}], "X"}], ")"}], 
     RowBox[{"-", "1"}]], 
    RowBox[{"X", "'"}], "y"}]}], TraditionalForm]]]], "Text",
 CellChangeTimes->{{3.52796262351559*^9, 3.527962634975132*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell["Properties", "Subsubsection",
 CellChangeTimes->{{3.532540710731701*^9, 3.532540711861258*^9}}],

Cell[CellGroupData[{

Cell["minimizes SSE", "Item1",
 CellChangeTimes->{{3.532540724421989*^9, 3.532540730718878*^9}}],

Cell["\<\
A.1-A.5 holding determines properties\
\>", "Item1",
 CellChangeTimes->{{3.532540731627883*^9, 3.532540747750711*^9}}],

Cell[TextData[{
 "Normal Equations (",
 Cell[BoxData[
  RowBox[{
   RowBox[{
    UnderoverscriptBox["\[Sum]", 
     RowBox[{"t", "=", "1"}], "n"], 
    SubscriptBox["e", "t"]}], "=", 
   RowBox[{
    RowBox[{"0", " ", "and", " ", 
     RowBox[{
      UnderoverscriptBox["\[Sum]", 
       RowBox[{"t", "=", "1"}], "n"], 
      RowBox[{
       SubscriptBox["e", "t"], 
       SubscriptBox["X", "t"]}]}]}], "=", "0"}]}]]],
 ". In matrix world it is ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{
     RowBox[{"X", "'"}], "X", " ", 
     OverscriptBox["B", "^"]}], " ", "=", " ", 
    RowBox[{
     RowBox[{"X", "'"}], "y"}]}], TraditionalForm]],
  FormatType->"TraditionalForm"],
 ")"
}], "Item1",
 CellChangeTimes->{{3.532540749843129*^9, 3.5325407554592447`*^9}, {
  3.5325524775143213`*^9, 3.532552560289419*^9}, {3.532552792794428*^9, 
  3.532552792808337*^9}}],

Cell["OLS \[NotEqual] MLE when ", "Item1",
 CellChangeTimes->{{3.532552793218869*^9, 3.532552830126026*^9}}],

Cell["OLS \[NotEqual]  BLUE when ", "Item1",
 CellChangeTimes->{{3.532552810937155*^9, 3.532552826478301*^9}}]
}, Open  ]]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell[" MLE ", "Subsection",
 CellChangeTimes->{{3.527962770809698*^9, 3.527962775969492*^9}, 
   3.5279714645202827`*^9, {3.532552884359095*^9, 3.5325528862250433`*^9}}],

Cell[CellGroupData[{

Cell["Derivation", "Subsubsection",
 CellChangeTimes->{{3.5325528880173473`*^9, 3.5325528898762407`*^9}}],

Cell[TextData[{
 "Recall that y ~ N[ X\[Beta], \[CapitalSigma] = ",
 Cell[BoxData[
  FormBox[
   SuperscriptBox["I\[Sigma]", "2"], TraditionalForm]]],
 "]"
}], "Text",
 CellChangeTimes->{{3.52796278476914*^9, 3.5279628094281535`*^9}}],

Cell[TextData[{
 "L(y, \[Mu], \[CapitalSigma]) = ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    FractionBox[
     SuperscriptBox["e", 
      RowBox[{
       FractionBox[
        RowBox[{"-", "1"}], "2"], 
       SuperscriptBox[
        RowBox[{"(", 
         RowBox[{"y", "-", "X\[Beta]"}], ")"}], "T"], 
       RowBox[{
        SuperscriptBox["\[CapitalSigma]", 
         RowBox[{"-", "1"}]], "(", 
        RowBox[{"y", "-", "X\[Beta]"}], ")"}]}]], 
     RowBox[{
      SuperscriptBox[
       RowBox[{"(", 
        RowBox[{"2", "\[Pi]"}], ")"}], 
       RowBox[{"n", "/", "2"}]], "|", "\[CapitalSigma]", 
      SuperscriptBox["|", 
       RowBox[{"n", "/", "2"}]]}]], " ", "=", "  ", 
    RowBox[{
     FractionBox[
      SuperscriptBox["e", 
       RowBox[{
        FractionBox[
         RowBox[{"-", "1"}], 
         RowBox[{"2", 
          SuperscriptBox["\[Sigma]", "2"]}]], 
        SuperscriptBox[
         RowBox[{"(", 
          RowBox[{"y", "-", "X\[Beta]"}], ")"}], "T"], 
        RowBox[{"(", 
         RowBox[{"y", "-", "X\[Beta]"}], ")"}]}]], 
      RowBox[{
       SuperscriptBox[
        RowBox[{"(", 
         RowBox[{"2", "\[Pi]"}], ")"}], 
        RowBox[{"n", "/", "2"}]], "|", 
       RowBox[{
        SuperscriptBox["\[Sigma]", "2"], "I"}], 
       SuperscriptBox["|", 
        RowBox[{"n", "/", "2"}]]}]], " ", "=", " ", 
     FractionBox[
      SuperscriptBox["e", 
       RowBox[{
        SuperscriptBox[
         RowBox[{"(", 
          RowBox[{"y", "-", "X\[Beta]"}], ")"}], "T"], 
        RowBox[{
         RowBox[{"(", 
          RowBox[{"y", "-", "X\[Beta]"}], ")"}], "/", "2"}], 
        SuperscriptBox["\[Sigma]", "2"]}]], 
      RowBox[{
       SuperscriptBox[
        RowBox[{"(", 
         RowBox[{"2", "\[Pi]"}], ")"}], 
        RowBox[{"n", "/", "2"}]], 
       SuperscriptBox[
        RowBox[{"(", 
         SuperscriptBox["\[Sigma]", "2"], ")"}], 
        RowBox[{"n", "/", "2"}]]}]], " "}]}], TraditionalForm]]]
}], "Text",
 CellChangeTimes->{{3.5279628106481047`*^9, 3.527962987691023*^9}}],

Cell[TextData[{
 "l (y,\[Mu],\[CapitalSigma]) = ln (L) = ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{
     FractionBox[
      RowBox[{
       SuperscriptBox[
        RowBox[{"(", 
         RowBox[{"y", "-", "X\[Beta]"}], ")"}], "T"], 
       RowBox[{"(", 
        RowBox[{"y", "-", "X\[Beta]"}], ")"}]}], 
      RowBox[{"2", 
       SuperscriptBox["\[Sigma]", "2"]}]], "-", 
     RowBox[{
      FractionBox["n", "2"], 
      RowBox[{"ln", "(", 
       RowBox[{"2", "\[Pi]"}], ")"}]}], " ", "-", " ", 
     RowBox[{
      FractionBox["n", "2"], 
      RowBox[{"ln", "(", 
       SuperscriptBox["\[Sigma]", "2"], ")"}]}]}], " ", "=", " ", 
    RowBox[{
     RowBox[{
      RowBox[{"(", 
       FractionBox[
        RowBox[{"-", "1"}], 
        SuperscriptBox["\[Sigma]", "2"]], ")"}], "SSE"}], " ", "-", 
     RowBox[{
      FractionBox["n", "2"], 
      RowBox[{"ln", "(", 
       RowBox[{"2", "\[Pi]"}], ")"}]}], " ", "-", " ", 
     RowBox[{
      FractionBox["n", "2"], 
      RowBox[{"ln", "(", 
       SuperscriptBox["\[Sigma]", "2"], ")"}], " "}]}]}], TraditionalForm]]]
}], "Text",
 CellChangeTimes->{{3.52796298851099*^9, 3.527963111966051*^9}}],

Cell[TextData[{
 Cell[BoxData[
  FormBox[
   RowBox[{
    FractionBox[
     RowBox[{"\[PartialD]", "l"}], 
     RowBox[{"\[PartialD]", "\[Beta]"}]], "=", " ", 
    RowBox[{
     FractionBox["1", 
      RowBox[{"2", 
       SuperscriptBox[
        OverscriptBox["\[Sigma]", "\[CapitalDelta]"], "2"]}]], 
     RowBox[{"(", 
      RowBox[{
       RowBox[{
        RowBox[{"-", "2"}], 
        RowBox[{"X", "'"}], "y"}], " ", "+", " ", 
       RowBox[{"2", 
        RowBox[{"(", 
         RowBox[{
          RowBox[{"X", "'"}], "X"}], ")"}], 
        OverscriptBox["\[Beta]", "\[CapitalDelta]"]}]}], ")"}]}]}], 
   TraditionalForm]]],
 "=0 (this is the same as above (",
 Cell[BoxData[
  FormBox[
   FractionBox[
    RowBox[{"\[PartialD]", "SSE"}], 
    RowBox[{"\[PartialD]", 
     OverscriptBox[
      StyleBox["\[Beta]",
       FontWeight->"Bold"], "^"]}]], TraditionalForm]]],
 "= 0))"
}], "Text",
 CellChangeTimes->{{3.527963113385995*^9, 3.5279632108520956`*^9}}],

Cell[TextData[{
 Cell[BoxData[
  FormBox[
   RowBox[{
    FractionBox[
     RowBox[{"\[PartialD]", "l"}], 
     RowBox[{"\[PartialD]", 
      SuperscriptBox["\[Sigma]", "2"]}]], " ", "=", " "}], 
   TraditionalForm]]],
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{
     RowBox[{
      RowBox[{
       FractionBox[
        RowBox[{
         SuperscriptBox[
          RowBox[{"(", 
           RowBox[{"y", "-", 
            RowBox[{"X", " ", 
             OverscriptBox["\[Beta]", "\[CapitalDelta]"]}]}], ")"}], "T"], 
         RowBox[{"(", 
          RowBox[{"y", "-", 
           RowBox[{"X", " ", 
            OverscriptBox["\[Beta]", "\[CapitalDelta]"]}]}], ")"}]}], 
        SuperscriptBox[
         RowBox[{"(", 
          RowBox[{"2", 
           SuperscriptBox[
            OverscriptBox["\[Sigma]", "\[CapitalDelta]"], "2"]}], ")"}], 
         "2"]], "-", 
       FractionBox["n", "2"]}], ")"}], 
     FractionBox["1", 
      SuperscriptBox[
       OverscriptBox["\[Sigma]", "\[CapitalDelta]"], "2"]]}], "=", "0"}], 
   TraditionalForm]]]
}], "Text",
 CellChangeTimes->{{3.527963169733741*^9, 3.5279631703037176`*^9}, 
   3.527963345466711*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell["Properties", "Subsubsection",
 CellChangeTimes->{{3.5325529031650057`*^9, 3.532552905819215*^9}}],

Cell[CellGroupData[{

Cell["\<\
Maximizes the Log liklihood function\
\>", "Item1",
 CellChangeTimes->{{3.532552909560459*^9, 3.532552921258812*^9}}],

Cell["OLS = MLE when assumptions", "Item1",
 CellChangeTimes->{{3.5325529275765*^9, 3.5325529354096746`*^9}}]
}, Open  ]]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell[TextData[{
 "BLUE (GLS) estimators ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    OverscriptBox["\[Beta]", "^"], " ", "and", " ", 
    OverscriptBox["\[Beta]", "\[CapitalDelta]"]}], TraditionalForm]]],
 " (the \[CapitalDelta] is MLE and the ^ is OLS)"
}], "Subsection",
 CellChangeTimes->{{3.5279633484765906`*^9, 3.527963359656143*^9}, {
  3.527963400414513*^9, 3.527963421913653*^9}, {3.532539095829253*^9, 
  3.532539096874638*^9}}],

Cell[TextData[{
 "There are a few properties these BLUE estimators have to have. They must be \
linear ",
 Cell[BoxData[
  FormBox[
   RowBox[{"(", 
    OverscriptBox["\[Beta]", "~"]}], TraditionalForm]]],
 " = Ay), they must be unbiased ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{
     RowBox[{
      RowBox[{"(", 
       RowBox[{
        RowBox[{"E", "(", 
         OverscriptBox["\[Beta]", "~"], ")"}], " ", "=", " ", 
        RowBox[{
         RowBox[{"AE", "(", "y", ")"}], " ", "=", " ", "AX\[Beta]"}]}], ")"}],
       " ", "=", " ", "\[Beta]"}], ",", " ", 
     RowBox[{
      RowBox[{"thus", " ", "AX"}], "=", " ", "I"}]}], ")"}], 
   TraditionalForm]]],
 ", they must have minimum variance. Note that method of moments (MOM), MLE \
,and OLS all lead to the same \[Beta] estimator under assumptions A.1-A.5."
}], "Text",
 CellChangeTimes->{{3.527963431373275*^9, 3.52796354697865*^9}, {
  3.5279635930268083`*^9, 3.5279635939667706`*^9}, {3.527963664033968*^9, 
  3.5279636640939655`*^9}, {3.527964066307876*^9, 3.5279640959066925`*^9}}],

Cell[CellGroupData[{

Cell[TextData[{
 "Derivation (proof) of Expected Value of ",
 Cell[BoxData[
  FormBox[
   OverscriptBox["\[Beta]", "~"], TraditionalForm]]]
}], "Subsubsection",
 CellChangeTimes->{{3.527963885765098*^9, 3.527963895364714*^9}, {
  3.527963979911332*^9, 3.527963982031247*^9}}],

Cell[TextData[Cell[BoxData[
 FormBox[
  RowBox[{
   RowBox[{"E", "(", 
    OverscriptBox["\[Beta]", "~"], ")"}], " ", "=", " ", 
   RowBox[{
    RowBox[{"E", "(", "Ay", ")"}], " ", "=", " ", 
    RowBox[{
     RowBox[{
      RowBox[{"AE", "(", "y", ")"}], " ", 
      SuperscriptBox[
       RowBox[{"(", 
        RowBox[{
         RowBox[{"X", "'"}], "X"}], ")"}], 
       RowBox[{"-", "1"}]], 
      RowBox[{"X", "'"}], 
      RowBox[{"E", "(", "y", ")"}]}], " ", "=", 
     RowBox[{
      RowBox[{
       SuperscriptBox[
        RowBox[{"(", 
         RowBox[{
          RowBox[{"X", "'"}], "X"}], ")"}], 
        RowBox[{"-", "1"}]], 
       RowBox[{"X", "'"}], " ", 
       RowBox[{"(", "X\[Beta]", ")"}]}], " ", "=", 
      RowBox[{
       RowBox[{
        SuperscriptBox[
         RowBox[{"(", 
          RowBox[{
           RowBox[{"X", "'"}], "X"}], ")"}], 
         RowBox[{"-", "1"}]], 
        RowBox[{"X", "'"}], "X", " ", "\[Beta]"}], " ", "=", " ", 
       RowBox[{"I\[Beta]", " ", "=", " ", "\[Beta]", "  "}]}]}]}]}]}], 
  TraditionalForm]]]], "Text",
 CellChangeTimes->{{3.5279638991845617`*^9, 3.527963969651743*^9}}]
}, Closed]],

Cell[CellGroupData[{

Cell["\<\
Derivation (proof) of Variance (\[Beta])\
\>", "Subsubsection",
 CellChangeTimes->{{3.5279636664938693`*^9, 3.527963679803337*^9}, {
  3.5279639840311675`*^9, 3.527963985191121*^9}}],

Cell[TextData[Cell[BoxData[{
 FormBox[
  RowBox[{
   RowBox[{"Var", "(", "\[Beta]", ")"}], "=", 
   RowBox[{
    RowBox[{"A\[CapitalSigma]A", "'"}], " ", "=", " ", 
    RowBox[{
     RowBox[{"A", "(", 
      RowBox[{
       SuperscriptBox["\[Sigma]", "2"], "I"}], ")"}], 
     RowBox[{"A", "'"}]}]}]}], TraditionalForm], "\[IndentingNewLine]", 
 FormBox[
  RowBox[{"=", " ", 
   RowBox[{
    SuperscriptBox[
     RowBox[{"(", 
      RowBox[{
       RowBox[{"X", "'"}], "X"}], ")"}], 
     RowBox[{"-", "1"}]], 
    RowBox[{"X", "'"}], " ", 
    RowBox[{"(", 
     RowBox[{
      SuperscriptBox["\[Sigma]", "2"], "I"}], ")"}], " ", 
    RowBox[{
     RowBox[{"(", 
      RowBox[{
       SuperscriptBox[
        RowBox[{"(", 
         RowBox[{
          RowBox[{"X", "'"}], "X"}], ")"}], 
        RowBox[{"-", "1"}]], 
       RowBox[{"X", "'"}]}], ")"}], "'"}]}]}], 
  TraditionalForm], "\[IndentingNewLine]", 
 FormBox[
  RowBox[{"=", " ", 
   RowBox[{
    SuperscriptBox["\[Sigma]", "2"], 
    SuperscriptBox[
     RowBox[{"(", 
      RowBox[{
       RowBox[{"X", "'"}], "X"}], ")"}], 
     RowBox[{"-", "1"}]], 
    RowBox[{"X", "'"}], "I", "  ", 
    RowBox[{"X", "''"}], 
    RowBox[{
     RowBox[{"(", 
      SuperscriptBox[
       RowBox[{"(", 
        RowBox[{
         RowBox[{"X", "'"}], "X"}], ")"}], 
       RowBox[{"-", "1"}]], ")"}], "'"}]}]}], 
  TraditionalForm], "\[IndentingNewLine]", 
 FormBox[
  RowBox[{"=", " ", 
   RowBox[{
    SuperscriptBox["\[Sigma]", "2"], 
    SuperscriptBox[
     RowBox[{"(", 
      RowBox[{
       RowBox[{"X", "'"}], "X"}], ")"}], 
     RowBox[{"-", "1"}]], 
    RowBox[{"X", "'"}], 
    RowBox[{"X", "''"}], 
    RowBox[{"(", 
     SuperscriptBox[
      RowBox[{"(", 
       RowBox[{
        RowBox[{"X", "'"}], "X"}], ")"}], 
      RowBox[{"-", "1"}]], ")"}]}]}], TraditionalForm], "\[IndentingNewLine]", 
 FormBox[
  RowBox[{"=", " ", 
   SuperscriptBox[
    RowBox[{
     SuperscriptBox["\[Sigma]", "2"], "(", 
     RowBox[{
      RowBox[{"X", "'"}], "X"}], ")"}], 
    RowBox[{"-", "1"}]]}], TraditionalForm]}]]], "Text",
 CellChangeTimes->{{3.527963683273198*^9, 3.5279638236575823`*^9}, {
  3.527963878395393*^9, 3.527963878395393*^9}}]
}, Closed]],

Cell[CellGroupData[{

Cell["Properties", "Subsubsection",
 CellChangeTimes->{{3.532552983129414*^9, 3.532552984352964*^9}}],

Cell[CellGroupData[{

Cell["Consistent Estimators", "Item1",
 CellChangeTimes->{{3.532552990759616*^9, 3.532552994933361*^9}}],

Cell["\<\
Minimum variance of linaer unbiased estimators\
\>", "Item1",
 CellChangeTimes->{{3.532552997263485*^9, 3.532553007596384*^9}}],

Cell["unbiased", "Item1",
 CellChangeTimes->{{3.532553007863536*^9, 3.532553011756424*^9}}],

Cell["OLS = BLUE iff A.1-A.5 hold. ", "Item1",
 CellChangeTimes->{{3.532553012407288*^9, 3.532553027511793*^9}}]
}, Open  ]]
}, Open  ]]
}, Closed]],

Cell["Instrumental Variables", "Subsection",
 CellChangeTimes->{{3.532533801765367*^9, 3.5325338066715183`*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell["Functional Forms", "Section",
 CellChangeTimes->{{3.527594571464429*^9, 3.527594576336076*^9}}],

Cell[CellGroupData[{

Cell["Transformable Models", "Subsection",
 CellChangeTimes->{3.5279532735323334`*^9}],

Cell[CellGroupData[{

Cell["Log-Log or Double Log Model", "Subsubsection",
 CellChangeTimes->{{3.52795327787216*^9, 3.5279532875317736`*^9}}],

Cell[BoxData[
 GraphicsBox[{
   LineBox[{{0.08333333333333334, 0.8500000000000001}, {0.08333333333333334, 
    0.10000000000000009`}, {1.0694444444444446`, 0.10277777777777786`}}], 
   LineBox[{{0.08611111111111111, 0.37222222222222223`}, {1.0805555555555557`,
     0.37777777777777777`}}], 
   LineBox[{{0.08888888888888888, 0.10833333333333339`}, {0.9416666666666668, 
    0.7333333333333334}}], LineBox[CompressedData["
1:eJxll0tonFUUx8dCtRCV6CK4qDJWoSJEA4oMFXq6qJKqYCyogaqMBbULH0kV
fEBliC6CixrwQRQhQawUdTG6iNU+nD6TtE3yzSSpk3nENGkHqyIVooTqwtz/
+d97YO5lyscvzcx85/wffLl15yvbn1uTSqUurf5z17YXj66+RiSbX7sjv/ag
fPqJOz8EvvLFo6uvHwM/w6vnIwdxAt8y2rt+tPdQ4LdLG/eUNh4OPF93x3jz
pQ9WX0ciLvBzP1/eNrS87afAV6XcKQT+1r1th/GzLSPZlhHjG3COBj6uAwd+
db27YePbNrhzLPC0u/09Mac55zvt5b72svE9OMcDX8zsXcrsNf4IAxo/sNWd
E4H/duMOGe9z678Sc457ffJxd04GvsatI39SFrjn77NuIacCv/C8O8bjvVhA
xFuow5uvu2M81+cGHot4mDrd78ZdGpMUdfrd/drm8cAPu/GWjf+Fv05Lnjp+
/ZU7pyVLHZ/Gf5wJfJ27ZM9IK3U9DFmMX3Lqtp2VAnW+GXuLuYe6T53FkTR1
v9vJ2TchCXV+342TmZQcdfbcQZ3/+tOdSVmgzo8hMFMyQJ09b6HOOncSGF/X
HvNl+uC9fndiHqYPNmHfiXTRB55T9MFv2H8x8DHsoSh5+mI39lCULH3xEPQp
SivWdUpux15KUqAv/oNexjPYU0nSuIzKu9hTSRL64inoNy053LdxB31yLfQ0
voA9TsswemhcDkFf4w+xV+OXofeMdNFXnlP71FcPYq/G2k8zkqfP/sFeY87S
d5OwR8yt9OGX0MFY+2424gJ96rmHPn0Cus0y38YJfdkBQ8SseZ+QddB1lj+f
YI5j1uuEHIDu5yIeoK/1eo75Nr5Mn++CT2LW/E/xfTF3MQc3wVcxB9/jc43H
4LOfI9a+SPg9Mff7nJC1PxJ5C30Wc4a52Y77iln7pSh3wucx/8qcrUG+yxEX
mLsK5jD+DvddlkH42biHudS8x9zJnHpOM6c7MZex9kHMK8zxjZhjLuKEuf4D
c8zJfuSjJCdw3zHnmPvPMEfM3cz9a5gjZu3TaXkEcxlr/1RkHXvC8wJ7wvMB
9oT2U8wD7A3tq5h3sTe+wVwV6WRvaJ9VmE/jFfaE54S9oP1WjXg/e8Jzjj3g
uZu5vw9zG1+Puash9559rhvYQzXk2LPPrWefU31eq4Zcfow9VEPuPPucaZ/W
5A3mRPu0JnfQ955T9Ln2a415LLNPY+6nb7VPa8zTHPu0xvwYD3pfYW915sG4
k77xnKYvdI91+rnCPdbpX+Nu6qB9Wqf//J7r9J9xgXv0PMi9qQ7z9E8t8Arn
9pxwbtVpnv4w9nOobvPhPj37+/TsP9ez6musPWus+v4SWHvSWPU1xtvbFgJj
vK3GkKPXGB83ZKx9aqx6nw+sehtrPxqr/sa69/NN8y8G1j0a63WxaT+LTfsx
1lwuBb4XfjDW5xZjfW4x1ucWY83Hhab9GWuPG2uPG2tvG2tPXwysz3nGd8Ev
xlfDL8b6d5gxxmlpBEZ8Nhjj6zONpn0aa482mvZrrL3aaNq3sfZoQ/4HS3gt
fg==
    "]], LineBox[CompressedData["
1:eJxll1toXGUUhceCWPBCq1B9qBIvUBWCgVYJCtl9ULEqGAtqwQuhoPahaqKC
F6iE6EP1oRSq4g0apUoRH6IPNtqmTi5N0jRNJjMTMzNp09xam0Y0QpRSfTD/
Xuv8C878TDj9yMmZs9de+9Kbt7+y9flVmUzmz5WfcP2x6crwsZqBlvUDLUfs
7TfCOWSbF/Y1LOw7Grl9ecv+5S2/WKWtttRW2xn53j1z9XvmOq3j8qdXPtnI
eGzWPvs0nJ+qeM3acLrt0oHHVj4/W3bdzu6Vjz3nDzpszevDC3Xb0cN+rOaW
cHoi5zbsym/Y1WM38b3T3Bpes9Rj7+TDL7oiT50Op8vqNobTG3m6Prx4r33F
uPY2BAF67bJMOFnbfH84ffY941wKt+0Xt4cwLvXZWsbV+EQ4xyJnwm0dx+w1
xtXhgvRHbnohnH67lXEmXGBc2Ra/0d5lHM2eF3FNuC0/YBsZV8JnGVfO8zYY
uXV3OOI6z9ugfcS4E36AcS8FOzQct78Zd7vnUdwYLsvH7WvqkOaM/2PInqIu
CV9BXTq+DWfIDlGXJvfBichr3Kgn7EXqkvD1bpt+y7otxM3hsm7Y3qJOaYbf
h+0O6pQb9mNl6tTqvjlp71OnuiBzm3jafXPS7qNOad4bLvUjtkjdEv6cuqG+
RuwR6rT0Rzhi1Neo/XsAOqW50Qtn1J6lTm7TTC6yv25tzrqoC+ozZy9RBw9j
d85upA6oz5yNUge3xZwY9Tpmd1GHNKN+x+wMdUjzJx73mBnjTjPqfcz+og4P
uQ5j9iXjTvhxxo1+kI9xX3RdxOgHefuBcaf5oPstbx9Qh4S3Uwf0izz7Wc62
uYAFu5Zxo38U7ILnt5pXuz8L1kMd0F8K9irjTPhhxpXwbYwrzZ2ex4IVGUea
0a8K9h3jSPg9xrHD8160ZxhHwpv43qiHol3F9054nu+R8BF+70WvezHqp2gf
8nsTfpnfc9D7QNEe9H5SZH2N2z98TsLf8L5t3ifEqL9x9vPxKl7tfWTcnuTf
JZzcl3D6irodt04vgF+rrqjbak6uO7wfiVHX4hu8H+k+1Ll40Pv6RGTUuRjz
dyI+d6v7X3ynp1+8yv1fiox5LYb/xfC/GP4Xw/9i+L8cuc/9XY5xfuF1LX7d
/S5+1P0uhr8rkf/zOhbD32L4Wwx/V6Ku8Pdk5Hvc35NR52vc3+Jz7m/xx+5f
Mfx7KjL2CzH8Kx5x35+KeYR/xfD56cjwuRh+FcOnYvhVDF9O2Zv0CXwnRp7E
0E0MnaY4TyZsyOM4U8W302fYj8Twoxj70jT7cInztJpL9CX2CzH0FcOfYvhz
mvOsRL2nOc9K1FsMv85wvpXYn2c430rsF+Je97MY81qMfUWM/W3Gzvtzy5zf
Yuwvs5yHZe53Yvh9lvOwzLqf5TxM6kwM/4uRz1nOxzL9P8f5WKEvxej34qu9
HuY4PyvcB8WYt2LsS2LsE/ORkV8x+r0Y+Z3nPK6wfsTIpxj5FCOfZyNjnxRj
HxEjX2LsI2Lk51xk5EOM/iOG/mLUj/hu1/e3yNg3xdBPjP5ynvtHhX4XQw/x
dR7/QmTEL4ZfxfCnGP1XjH5xITLiFcNfYvRbMfy2yH0p8ZsYfUqM/ivGfBOj
H4vRX8T4/58Y82+R+9kk+7cY8/D3yP8DgQ2Ovw==
    "]], InsetBox[
    StyleBox[Cell["\[Beta]>1",
      GeneratedCell->False,
      CellAutoOverwrite->False,
      CellBaseline->Baseline,
      TextAlignment->Left],
     Background->GrayLevel[1.]], {0.44444444444444453`, 0.7805555555555557}, {
    Left, Baseline},
    Alignment->{Left, Top}], InsetBox[
    StyleBox[Cell["\[Beta]=0",
      GeneratedCell->False,
      CellAutoOverwrite->False,
      CellBaseline->Baseline,
      TextAlignment->Left],
     Background->GrayLevel[
      1.]], {1.1138888888888892`, 0.37777777777777777`}, {Left, Baseline},
    Alignment->{Left, Top}], InsetBox[
    StyleBox[Cell["\[Beta]=1",
      GeneratedCell->False,
      CellAutoOverwrite->False,
      CellBaseline->Baseline,
      TextAlignment->Left],
     Background->GrayLevel[1.]], {0.9750000000000003, 0.7472222222222222}, {
    Left, Baseline},
    Alignment->{Left, Top}], InsetBox[
    StyleBox[Cell["0<\[Beta]<1",
      GeneratedCell->False,
      CellAutoOverwrite->False,
      CellBaseline->Baseline,
      TextAlignment->Left],
     Background->GrayLevel[1.]], {0.9138888888888892, 0.4277777777777776}, {
    Left, Baseline},
    Alignment->{Left, Top}], InsetBox[
    StyleBox[Cell["\[Beta]<0",
      GeneratedCell->False,
      CellAutoOverwrite->False,
      CellBaseline->Baseline,
      TextAlignment->Left],
     Background->GrayLevel[1.]], {0.0777777777777778, 0.8583333333333334}, {
    Left, Baseline},
    Alignment->{Left, Top}]},
  ContentSelectable->True,
  ImagePadding->{{0., 0.}, {0., 0.}},
  ImageSize->{218., 164.},
  PlotRange->{{0., 1.3333333333333335`}, {0., 1.}},
  PlotRangePadding->Automatic]], "Input",
 CellChangeTimes->{{3.527953487093791*^9, 3.5279535626507683`*^9}}],

Cell[TextData[Cell[BoxData[{
 FormBox[
  RowBox[{
   SubscriptBox["Y", "t"], "=", 
   RowBox[{
    SuperscriptBox[
     SubscriptBox["AX", "t"], "\[Beta]"], 
    SubscriptBox["\[Epsilon]", "t"]}]}], 
  TraditionalForm], "\[IndentingNewLine]", 
 FormBox[
  RowBox[{
   FractionBox["dY", "dX"], "=", 
   SuperscriptBox["A\[Beta]x", 
    RowBox[{"\[Beta]", "-", "1"}]]}], TraditionalForm], "\[IndentingNewLine]", 
 FormBox[
  RowBox[{
   SubscriptBox["\[Eta]", 
    RowBox[{"Y", ",", "X"}]], " ", "=", " ", 
   RowBox[{
    RowBox[{
     FractionBox["dy", "dx"], "*", 
     FractionBox["x", "y"]}], " ", "=", " ", "\[Beta]"}]}], 
  TraditionalForm]}]]], "Text",
 CellChangeTimes->{{3.5279533048110824`*^9, 3.5279533905676517`*^9}}],

Cell[TextData[{
 "You can estimate this with OLS by estimating the model: ln(y) = Ln(a) + \
\[Beta]ln(x) + ln(\[Epsilon]t) (",
 StyleBox["reg ly lx)",
  FontSlant->"Italic"]
}], "Text",
 CellChangeTimes->{{3.5279533910976305`*^9, 3.527953420596451*^9}, {
  3.5279536151986666`*^9, 3.527953629678087*^9}}]
}, Closed]],

Cell[CellGroupData[{

Cell["Semi-Log Models", "Subsubsection",
 CellChangeTimes->{{3.527953425766244*^9, 3.5279534299560766`*^9}}],

Cell[BoxData[
 GraphicsBox[{
   LineBox[{{0.09444444444444447, 0.913888888888889}, {0.09722222222222224, 
    0.061111111111110894`}, {1.1500000000000001`, 0.058333333333333126`}}], 
   LineBox[{{0.10277777777777777`, 0.43055555555555536`}, {1.102777777777778, 
    0.4333333333333331}}], LineBox[CompressedData["
1:eJxFlEtIVGEUxydBCnpQLaTFEPQAW2QFtRgKPC0ssAJLeoEFEvRY9MAKKkgL
aSEtJLCiaGGFWEQLayFBRaaWRmZmVjM549y5j5m5dxEtJEJa5Dnff853UO78
lPnu//z/53wrjpypP1oWi8VOz/7yc/lQU3yo6RX9re2cru1M08Np/vBGeU6M
q0/5WXlDT3mD5YGKk29nf5RXreTqV94oNaC8rYZrUHkuH9fzTvn4Ma73NDbC
laZLF7iGlFOtVcnWqmHlLe1eot2zvJOPmf6gfJiPL/+ovLC3cX5vo+VTrL5i
RPnKeGXzeOUn5fVJfqFlCjuqw45R5Qfi12flPTNddTNdluXrVWPK19u4LG8W
/ZYjPr76i3K/+Gv5bJwDs7xa/B5XnmD5zZafPuGyfEj8+KrsJ1iA5Zv8+tDy
dslrQnlUnpb37+P6puxkuCyfkDy/Ky+TcbF8X/z7oVwv/lkuk/lL0uM6/kea
nsv8Jemq5JSBf5aXLuFKKQ+Kfyk6KDoztEvmI0UbJJgM/ePX1f1UNv5M0jyZ
ywwtknmxfFv8mUSfGTL7k6YbLCMxRd3QWeLS97bK3Ezp30ts/LBPs39Z+v2L
awr758CnLObfoYuyF1m836E1EnsW+TgUw/eMHofk+AqHWsSXHEmsNQ721/K9
u1w5iuPcc/IhRzK2bQ5lpW3LZt9dEnmdDvx0aQQ6TP4uyZh5Dvp0abHklKNr
3E7SpcvQZfz3aK/klcN+edQHneY+8Git5JXDvnl0B7pvST4enYdu45dPLzjG
+S7mx8feuPRHdPuq28yTjz1yMU8B9siFXwHyceFPQJvknvNwbh575eGcPPLx
0G8e94KP/grw26fXL7kKqsPMfxH3QoB9LNI6OSBA/kXcCwHyL9IOmfOAHkn+
RZLjEnncb6HqOiA+h+gvj/xD1Wnu55CG+TXxAvIPaYHsRQG+Rui3gP4j2i25
FOBrhHksYh4i9F+Ejkj7MHsR4Z60XOrL6Izgj+Vu9FniFvT5HzcnuSE=
    "]], 
   LineBox[CompressedData["
1:eJxllEloVXcYxZ+CKEghcZF2IZKqEBUKgVIJCp4sqigujIJW0EIqVF04RQXr
QgjqQhE0EATFhQMqol1EF5o2Jr5BM5nhTRk18UUTjQMSIYoEF+Z//ufeb/E+
brj5Pe69/2845/t5x/5Nf8+MRCJnpv/cfXjIRSO+Xt8wdX3DIAK+cNHFQMjj
tave1q4yLih0YVx29tX01R9y5dz705fxKUY/3Ffe1jahbta26cu4//gv7sK1
yXWXJ9c9yuMIw3jJsXTJsXRfyBVTroA+zOBz0Tz+54gL4yt8rw93mYfxX8w7
n1ur5rdUzTee+OiiN+Sf9sSK9sR6wbYUxvK4nHUa797poheJIj6IGte+MuN6
NrAXh9yxLTHk2MeekOe4tOt6sGihizi2bnbRg0yJa0wct9w4p7I4wTbGkexw
YfzVlXc5i18ZCaz93UUWYxxkArtdFkXGNRxUBud5T6C+wUUGq/neY+T4nPEc
15bKDD7znHwu5bnGWymIDG4w78eoZp5p/MG6noQ8m3U/wa3bLoyTrDuNB+xb
s/Scxi72uRnF7FMaP7K9zVjrjp1MoY1zbcEB3lI4Sp20SP8pLOVnjQeoy1b5
IYXT1LXxSvqgVf5I4T1/b5M/krjE77TJH0msZx5t8kMSd1hXe8h/8p+n0n8S
P7CPxns5pw7ptRvdnHOH9NmFF9RNp/TVhXO65/T7Jz0X8Eb6phvVruySzvCc
pL57T3kd0Lk7VEeUeniKFaqzQHm+U18qVcdB9blOdS7WXCIcfDu+aW4V6stJ
zX1CfdwunZSqz6PSXVJzeShdFmtu+6TjgBe446uyiGruN+WTAulii3xUKd0E
PquTrgKfVkiXgc8DDvbGhHS9THuqXL64p71XIx990F7NyWeHmdaA/JFQPwal
/ziW8/dn0nscTaz3mfQbwxee+xxR7RE/x6GQS7lYh6TPYM8Mh+z30rD0GUU7
+/RCeoxiE/Vh7P2QU92P1F9jr4ec9l8T5vGcEemtUf0eUZ6N8oex1+8Iivnd
h9LvS+mtQfka/0tdvZTeGuQD46vM65X09r/2m7H3u7GvbxRXmNd/qm8U5Xyt
Hl20xShyfK5e9Y2F7PfXGKq5Vx6oPmNfn7H3w+uQfX3GWc7d2Ndr7P3xJuTf
qBdjvz+Mff3G3v/Gvh/Gfv8bz+R+GA/Z+814kH0wXkMfGHs/GPv+5nPQz+8u
rk6b
    "]], InsetBox[
    StyleBox[Cell["\[Beta]>1",
      GeneratedCell->False,
      CellAutoOverwrite->False,
      CellBaseline->Baseline,
      TextAlignment->Left],
     Background->GrayLevel[1.]], {0.8611111111111114, 0.7416666666666667}, {
    Left, Baseline},
    Alignment->{Left, Top}], InsetBox[
    StyleBox[Cell["\[Beta]<1",
      GeneratedCell->False,
      CellAutoOverwrite->False,
      CellBaseline->Baseline,
      TextAlignment->Left],
     Background->GrayLevel[1.]], {0.8166666666666669, 0.11111111111111116`}, {
    Left, Baseline},
    Alignment->{Left, Top}], InsetBox[
    StyleBox[Cell["\[Beta]=1",
      GeneratedCell->False,
      CellAutoOverwrite->False,
      CellBaseline->Baseline,
      TextAlignment->Left],
     Background->GrayLevel[
      1.]], {1.1527777777777781`, 0.43611111111111134`}, {Left, Baseline},
    Alignment->{Left, Top}]},
  ContentSelectable->True,
  ImagePadding->{{0., 0.}, {0., 0.}},
  ImageSize->{234., 175.},
  PlotRange->{{0., 1.3333333333333335`}, {0., 1.}},
  PlotRangePadding->Automatic]], "Input",
 CellChangeTimes->{{3.5279535730703516`*^9, 3.5279536024391766`*^9}}],

Cell[TextData[Cell[BoxData[{
 FormBox[
  RowBox[{
   SubscriptBox["Y", "t"], " ", "=", " ", 
   RowBox[{
    SuperscriptBox["A\[Beta]", 
     SubscriptBox["x", "t"]], 
    SubscriptBox["\[Epsilon]", "t"]}]}], 
  TraditionalForm], "\[IndentingNewLine]", 
 FormBox[
  RowBox[{
   FractionBox["dy", "dx"], " ", "=", " ", 
   RowBox[{
    SubscriptBox["Y", "t"], 
    RowBox[{"ln", "(", "\[Beta]", ")"}]}]}], 
  TraditionalForm], "\[IndentingNewLine]", 
 FormBox[
  RowBox[{
   SubscriptBox["\[Eta]", 
    RowBox[{"y", ",", "x"}]], " ", "=", " ", 
   RowBox[{"X", "*", 
    RowBox[{"ln", "(", "\[Beta]", ")"}]}]}], TraditionalForm]}]]], "Text",
 CellChangeTimes->{{3.5279534324259777`*^9, 3.527953474714286*^9}, {
  3.527953632557972*^9, 3.527953632557972*^9}}],

Cell[TextData[{
 "You can estimate this model by ln(y) = ln(A) + ln(\[Beta])*x+ln(\[Epsilon]) \
(",
 StyleBox["reg ly x)",
  FontSlant->"Italic"]
}], "Text",
 CellChangeTimes->{{3.527953633037953*^9, 3.5279536717864027`*^9}}]
}, Closed]],

Cell[CellGroupData[{

Cell["Reciprocal Transformations", "Subsubsection",
 CellChangeTimes->{{3.52795368409591*^9, 3.5279536961754274`*^9}, 
   3.527971448840324*^9}],

Cell[BoxData[
 GraphicsBox[{
   LineBox[{{0.08888888888888888, 0.875}, {0.0916666666666667, 
    0.09444444444444455}, {1.216666666666667, 0.08333333333333348}}], 
   LineBox[{{0.09444444444444447, 0.4916666666666667}, {1.1833333333333336`, 
    0.48888888888888893`}}], LineBox[CompressedData["
1:eJxl111o1mUYBvAxsIIS+oDVwRAKYRXZgiJGQXcHdbASllIZWBBCHwdaLIU+
yALroDqYgQnVAjNWQXUgHeigjNzUbTZdzrW2lXv3vv/3fTfdlALrwCTac1/X
/VzE+zB5+ck+/s9z3ffzPP8bN724/pnmpqamf5f/pc9TbdvH27YP2A2bD7Vs
PnTWws8/m4Z8qa/rYl+X/H7R0VN0yDf5kPc/feXyl/zQngudey6cyZ49nYb8
UutQd+uQfNnGfSs27pM//igN+fapHWumdsgDLWkC8uOPpSGf3XXfmeWv7Guv
SUP+Ik3v4kL2PT1pgvKmNJ398t+daULye++kIa9K0+mWv12RJiQ/4EP26axZ
sLfSx9SANfmQP/DHn8/+/rs05EfS4/fJ1RRPj/zKy2nM250+Bu0qD0i+yz/n
reY/1+jhNJ1W+ckUzwr5j/Np1LPf9r9bt93+3IOsr7o96PM+bN98lYZ8f/q2
XXX7y9e10RO+TnX73HNqtE+/q24bPPcj5vF11O1yr6MjrE8Z9Vm3A/55lPVZ
s+e87o+yPmt2vT93o1GvNRvxdRnKftXXeYj1W7Nb0mOOD7F+azbtOQ9nv+t1
M8x6rtm9/uDDrOeaLXrdjrCeZdRzzXr998gP+zxG7I30Z9tk1HvN/vF1Opb9
tedwjPVftac8159Y//KJ0TSqttIXrtHoj6od9LqUt6Tlahllv1RtzH9ulP0i
+/J1V+1Nf+7j2e2+LnLJczjO/qnaTs/5RLZ53ch/el02Gv1Wtb1peTrHstd5
IY2Zx9xSZR/+nI0+bjS+r8p5yVhHGet+Mhs5n2R/F6wLGXUpr/Y6Hrebva4K
9oGMvpPRp6eysS80GvtJwb8jv+DznMjGvjbB/aZgrjLqQkYd/pKNOpbv8IWX
5zxfud/7czIb546MfWKS8yi4z8jYlya53xXcx37N/tTzl9f775WbPaep7Bmv
Exl5y8i70fg7hS15n05zfy3sE89b3uaFLq/1/GWcwzOcR8F9VEb+M8y9sLv9
537Lrvu6yD94rjLy/p3rVsnG760wfxn5y9hH5Cc879PZyFtG3jLynmWOFeYt
I+9ZzrvC/5fx3PJnvu6lbORb4u+p2K3eByX2UYX71Vw29msZ59Uc70exHjLq
Qcb6yOgPGfUhY/1k7OvlbPRPmXVQsUHfP2ScB/JWrycZ50GZ61rh+VfJ3snP
cPxcONYhHOsYjpywT1VyruGoq3DUbXgv+6Sfz7WSfRTG+Sqv+98+UeH5I+/m
vhnewn07PM19fy3XBfu5vIrnTjjOsXCcc+E4F8NxrobjXEbdl3lfkdt5D9jG
3Hp5Twhv5T0jXOK9JHyA95or/P5R5rrKl3hP+pB1EveocNy7wnFvC8c9Lxz3
wPAI74lh5Dlvt/m8ysxPrvGe+iPr+CDvteFm3oPD2I/kGd6bH2VfxD07HPfy
cNzbw3GvD8e9P/wl3wvC1/G9IbzI94rwBr53LLBvB/leEm7ne0u4l+81r3td
RL5yie9J4X6+V4VX870rHO9l4XhvCyNvGXnL6FcZ+S5mo19lnGvya56vjPNG
xnkjY/+VkfdSNvKVka+MfGXkKSPPJbvacyvz/nUuG/0oH/a8ZJxXMvronPVx
n0bfysjjfDbykJGHjH1dRh4yzi0Z/SgjLxn9Kf8H0TQT4w==
    "]], 
   LineBox[CompressedData["
1:eJxllktonVUUha9CsVAVdVAdtBIfEBWCgVoJFro6UGlUSCmohShcCmoHahMV
FKEaooPqoBai4gtaoUpRB8FBLPggrzaPJunNfT9smzbpI02tV6hSqgN79tr/
WXBzuOHy/eS//1lrr73Pf9f2nVtfuD6VSg1e+wvft9oawuDql4euffD6mrHu
NWNDaF0X1kjkubY98217xJseDWsU99wd1jD2d1w90HF1FLnmXdnmXcs51dm/
orP/MN5rKfe2lIeRfjGsI1jnz2nkwW57EM74cxu5682wxE3hMdkxfLJxsW/j
4ggyveFB43jM99mzOyxxa7htfhx/t++73L5vFPW+cOMEvvF9bwmXL0/g2afD
Ooz+78KajJwOclYcxQ2uK+Gf0qsG0quOYPDnsMRdwd3VU3jJdTYFNd1TuN1s
X86ZKVuYcN09QV7zdOTWYGPvNO533Y28N8hrm8EHrntTsKVPXL8U1gw2uA/7
g9z2Y1hyH7YEGw4cw5efhyV+0n2xx7Vk8G+43DEZ+Xv3yR6zO4Pn3ZeEbxoI
hhyFlW0+g1/dp1ssh7NY6z4wj+LPbB+zeNd92Gz7EDdZDrM4eTysaVyxfWUB
133Q9pXFX667x3KYxdeue5vtM4eUrUzkRNdK23cOP4bLnRnvhxw+dF2HTId4
r+Uwh0dc5w6rfx63uc7NlsM8Lpjfs17/PIZd9xXLZR5fuO6EX7Pyz3o+8njC
fThouc3jXveBeSngP/dhm+W2gB/ch4Tfdx+YnwIesv7LYaXluoAbXXfCC657
znwu4BfXfchyXsTHrpv5K+JV173Dcl/Ena6TeSziH9fVyHdYHxTxretK+Bnf
N/NbjPset74oxX0xz6W4r7dsXpTiPpjnUvzd+6xvSvF3E05+h7koY6vfx1yU
8YD/X8JV/7b4dJY9L2XPfxnbw3YGxMxDBWm/ftHyIB61PFS8Pyp4yuotZr2r
OO/3sd5i1rfq/VTBw1bfmvdTBTdbfcW/WT3Fj1tOf4/M+ohnLIdi5u54ZOZG
zHqciMx6iFmPE+iynFcwaXU9GZn+i6+zusxFrpj/YuZNzP2LuX8x63EqMvtT
PGI+nvL5U/H5KOb5KOb8P+3zqer1EeftfBSzXmLmej4y56eY55+Y81/8ivXf
QmT6IaYfCz4vqz6vxPTjTGSef+IHLfhi6hdT/9nI1C9m34vZf+L1ltdzkalX
TL1izpvzyJivVe8/MftPzPNj0c+HqtdXzPN90c+LqvefmHPuQmTqEbOeYtZz
yc+XGt62uSRm/y35+1cNn9o8FVPfRT+Paq5PzPNHzHyLOU/F75j+PyJz/og5
X8VfWd7F7G/xG1Z/Mfv9UmT6JWb/i+mfmPNA/Jz59GdkzjMx55n4rOVFzPkh
pr9i5rUemf0j5vuu+CPTI+b7pZjvR2K+/4n5flxvqF+9wQ8x+1XM81zMfNcb
/FvOfH+p4X9spOJc
    "]], InsetBox[
    StyleBox[Cell["A",
      GeneratedCell->False,
      CellAutoOverwrite->False,
      CellBaseline->Baseline,
      TextAlignment->Left],
     Background->GrayLevel[1.]], {0.05555555555555555, 0.4916666666666667}, {
    Left, Baseline},
    Alignment->{Left, Top}], InsetBox[
    StyleBox[Cell["\[Beta]>0",
      GeneratedCell->False,
      CellAutoOverwrite->False,
      CellBaseline->Baseline,
      TextAlignment->Left],
     Background->GrayLevel[1.]], {0.4666666666666668, 0.6527777777777779}, {
    Left, Baseline},
    Alignment->{Left, Top}], InsetBox[
    StyleBox[Cell["\[Beta]<0",
      GeneratedCell->False,
      CellAutoOverwrite->False,
      CellBaseline->Baseline,
      TextAlignment->Left],
     Background->GrayLevel[1.]], {0.6750000000000002, 0.286111111111111}, {
    Left, Baseline},
    Alignment->{Left, Top}]},
  ContentSelectable->True,
  ImagePadding->{{0., 0.}, {0., 0.}},
  ImageSize->{283., 212.},
  PlotRange->{{0., 1.3333333333333335`}, {0., 1.}},
  PlotRangePadding->Automatic]], "Input",
 CellChangeTimes->{{3.527953736683807*^9, 3.527953766402618*^9}}],

Cell[TextData[{
 Cell[BoxData[{
  FormBox[
   RowBox[{
    SubscriptBox["Y", "t"], " ", "=", " ", 
    RowBox[{"A", "+", 
     FractionBox["\[Beta]", 
      SubscriptBox["x", "t"]], "+", 
     SubscriptBox["\[Epsilon]", "t"]}]}], 
   TraditionalForm], "\[IndentingNewLine]", 
  FormBox[
   RowBox[{
    FractionBox["dy", "dx"], " ", "=", " ", 
    RowBox[{
     RowBox[{"-", "\[Beta]"}], "/", 
     SuperscriptBox["x", "2"]}]}], TraditionalForm], "\[IndentingNewLine]", 
  FormBox[
   RowBox[{
    SubscriptBox["\[Eta]", 
     RowBox[{"y", ",", "x"}]], " ", "=", 
    RowBox[{
     RowBox[{"-", "\[Beta]"}], "/", 
     RowBox[{"(", "xy", ")"}]}]}], TraditionalForm]}],
  FontWeight->"Plain"],
 "\[LineSeparator]You can estimate this model by saying Z = 1/x and \
regressing y = A+\[Beta]Z+\[Epsilon] ",
 StyleBox["(reg y z)",
  FontSlant->"Italic"]
}], "Text",
 CellChangeTimes->{{3.5279536978653593`*^9, 3.5279537166846066`*^9}, {
  3.52795378160201*^9, 3.5279538740083137`*^9}}]
}, Closed]],

Cell[CellGroupData[{

Cell["Logarithmic Reciprocal Transformations", "Subsubsection",
 CellChangeTimes->{{3.5279538202604637`*^9, 3.5279538273801785`*^9}}],

Cell[BoxData[
 GraphicsBox[{
   LineBox[{{0.05833333333333335, 0.9138888888888888}, {0.06388888888888888, 
    0.05277777777777759}, {1.227777777777778, 0.058333333333333126`}}], 
   LineBox[{{0.05833333333333335, 0.5083333333333331}, {1.1750000000000003`, 
    0.5166666666666659}}], LineBox[CompressedData["
1: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
    "]]},
  ContentSelectable->True,
  ImagePadding->{{0., 0.}, {0., 0.}},
  ImageSize->{198., 149.},
  PlotRange->{{0., 1.3333333333333335`}, {0., 1.}},
  PlotRangePadding->Automatic]], "Input",
 CellChangeTimes->{{3.5279538928675594`*^9, 3.5279539209664354`*^9}}],

Cell[TextData[Cell[BoxData[{
 FormBox[
  RowBox[{
   SubscriptBox["Y", "t"], " ", "=", " ", 
   SuperscriptBox["e", 
    RowBox[{"A", "-", 
     RowBox[{"B", "/", "X"}], "+", 
     SubscriptBox["\[Epsilon]", "t"]}]]}], 
  TraditionalForm], "\[IndentingNewLine]", 
 FormBox[
  RowBox[{
   FractionBox["dy", "dx"], " ", "=", 
   RowBox[{
    RowBox[{"-", "\[Beta]y"}], "/", 
    SuperscriptBox["x", "2"]}]}], TraditionalForm], "\[IndentingNewLine]", 
 FormBox[
  RowBox[{
   SubscriptBox["\[Eta]", 
    RowBox[{"y", ",", "x"}]], " ", "=", " ", 
   RowBox[{"\[Beta]", "/", "x"}]}], TraditionalForm]}]]], "Text",
 CellChangeTimes->{{3.5279539325759706`*^9, 3.5279539809340363`*^9}}],

Cell[TextData[{
 "You can estimate this using OLS by saying ln(y) = A- \[Beta]/x + \[Epsilon] \
then making the substitution Z = 1/x (",
 StyleBox["reg ly Z)",
  FontSlant->"Italic"]
}], "Text",
 CellChangeTimes->{{3.527953981234024*^9, 3.527954030612049*^9}}]
}, Closed]],

Cell[CellGroupData[{

Cell["Polynomials", "Subsubsection",
 CellChangeTimes->{{3.527954034651888*^9, 3.5279540411516275`*^9}}],

Cell[BoxData[
 GraphicsBox[{
   LineBox[{{0.05555555555555555, 0.877777777777778}, {0.061111111111111116`, 
    0.07499999999999973}, {1.1611111111111114`, 0.08333333333333348}}], 
   LineBox[{{0.06388888888888888, 0.3222222222222224}, {0.8916666666666668, 
    0.8444444444444446}}], LineBox[CompressedData["
1:eJxllluIVWUUx0+CJVhRPlgPFlaCFV2EIgYDVw8WTgWZdBG0mIQuD120gi5k
SfRQPlRQgV3Aii5SPQw9aGTKOGp5mXQazc5lzjn7dvbZex8vBRZiPXS+//rv
bz2cxR42v2Gfvb/vv/5rre+KNc+seHRGpVI52P9z95dfcLFNqq9f7y45+8U9
/etHzw+Pzlw1OnO7553bEZ5fnVq4fmrhDs9L8vf6107P51RcjAles6oqj8ze
OjJ7q/HuuU/u6l/yJqIqV13pYtzzEff69eMygt9V5SbEbs8f4IPGty91sUeG
3o77V1X+Ht58eniz8Zdue2eNH7zfxV7P57llje6Viy52UZNtePHPnh9/zIXx
JVi+8f51837pXwOcOVmW1OQl6G18jdve1CCPQZea1KDjPs9vQRfjW7Fu4x7e
s9/zxx+6ML7LyXHa+F/k+4BswnM1+fYbF8YPIVEHPV/gZB4Z5LXYZk12wB7G
Tzl55k54vszd1hkfnkAM8DKssyavwV+/er4RxjJuN10Yv+PkGDrk+a+TLow/
c7fhw57vheGNYdfKpGf1sfFG6G+8Br4zXox8TMp8+Lguc+CD3zwXyI/xOPJg
/BF0NX4Wuhjfie8YL8B9aoDPIK91OYr6Mf4O+TV+A2VqvBr5PuL5ZtSb8fnI
t3GCwjH+Cfk3fhr5P+r5DtSn8eXwg/EhpN9Y+8vvAzyJfdVlERJkPAv1axzA
H8Y/oJ6PeX4XfjF+AvVtfBv6mfGf8NMx2QId67IP9f2H50/hL2Ptr8Yr4Dfj
a5Ee4zr7Zsnfs0+WvJF9cQMeq9N/xovZx0qewz5U8h7WfcmfsI5XIu8NeZ51
WPIC+qrk/5iHRfBFg/4yXs3nSr6F95IvhH8aMov3FP5pSMC7zhdj9c+0Z/XP
tIzxOfWPsfpnWjZhLjTkK/R74w3wT9Oz+qcpa8vvwC9NWcbvqF9antUfLZnP
76o/jNUfLTmDuTMtB+CPtkxyXZ/DH8bqh7Zs4TrVD22/Tu2fgWedB8Y67wJZ
iTnWpB6B35f6xfgfrCtgnTSpV+D3rXoFft/qn5B10mL/Cr0OD+C7oddB+3Mo
l2IutjhPQ6+L9uuQddPmfI08q78ieRF106a/IllOnbR/RXI1ddL+FbFvB/Rf
zL4dsH/FPG8EnFexzKNO2v9jnh8Czt9YJqiLnl8SzvOQ/kvkFegfUu9E7qMO
qm8i11EHrceEeofUs0O9Q/azjtyNvh7yPNSh3hH17FDviHp2qHfEed6h3hH1
TKl3RD1T6htTz5R9KqaeKfWOqWfKPh5Tz668j3qJOT+71DfheaZLfRPq2aXv
EurZpc8SmQE9M/osoZ6Z10F/l3EOdqhnJi3o1eF7MoGsQ6l8jfdk1CfleSGn
HinPdzn1SKlvTj26PB/lnGvGy7mP52CUnH7r0r85/ZYxb7ks5T60bgr27Yz9
s/D7Kln7dsY8F9QjY74K6pFzXwXrzvgGJCBnPgs5F77Imc+C5wTj8juqS+H/
r/kuqI+x+qPn/6/779EPPe7vOHXsMS/H/e/0XHOC/b5HnU5wHva47pPs/+V7
T7Ef9pgPY/XjKfkfiSN29g==
    "]], LineBox[CompressedData["
1:eJxlll2I1GUUxifBEqyoLtYuVrEMrGApqGBJ8HRhoBRYQiVYsAllF2ZaggSu
iXURXUhQgX3AlphICm1dmJC7ze6q466rrut+zMzufOzOfs3HjjOzW8jWRb7P
+7zn4Pqyy8tvmP/7P+9znnPOPLL9gy3vLIlEIr/e+nf784dzjYdzZ+Tmppb5
TS0D0v4nlmx9za1B5WXbWpduax2UVbE99bE9ZyWbcmtQDvSvbe5f2yZfumMa
hySNz9vkvXfdGpL1+a9u/bXLC9iH5Oi8e9Ff8vDOjrqdHUNyV8StqFTKbhlf
dK+pH5bflroXR+VHPDcsby8/3bT8dFReWTi2eeGY8ePNLpBheRCrQ3BMJK7c
inPi0lWHF9/Bn2MZN+Fc40boZPwAzk0oR7En5CMXdqxDjnzrVkLWPOpWp+zG
58YbndzzxquxJ+W6k7O5U26662027sNufOIXt5LyaUP8UEO8Uw5iT8ozWF2y
FRccUV7mrtM0IpO4SJdksRtHkWbjI0jciHyDvUt2u1vWjcqLG9w6dwdvxG68
Gj4Zlb/hq3P016j87K61YPwGfHZe+nrdMj6B743KPfDdeTkIn6XkDyTmgvIO
+OyCPO2ufyglK5AO4274KKb88T63YvRzSp6Ab4wT7msNF+nvlKxD3o2Lzsbr
u5W/R5675QziSstLyGs36yEt/yKPPconkbce1kda3kKeLim3IQ+XWC9peR86
9yqvhK7GV6FbL+spLZ9Al8vKGYR5mfWVFsFzV5Sr2I1/Qp1dVfZ11KcMGRuM
v0DdGG9H3Rj7/mL8EOrmmvJ30M/4Q6TL+DHURb/yAPxv/Cb0u658L3xufBZ6
Gu+CngPKvp8ZX4Gcxt43g8qh7wUOfS9w6HOBQ18LHPpY4CfZtwInoW98kb7x
RXoal+DHhPJe9pnb9UuqHwbYR4J/PmPfCHw/+0TwYzv7QuBdrPvAq1jngY+z
bgOHugv+D3UTePF+u65pzouMstfL2NdrVuvPx2Ps9TL282pM43gK8Rn7/m3s
+/O4sr+X8SnUs7GfWznl+6Cnsa9vY1/fE8o+fmPvR2NfP5PKfv4Y+35p7Ovf
+D/0oyll7wdjr/+U6vUc5se06v0q5u605ncJ+sPMIj/MqN98/Ma+f+Y1z75/
5lkXGb63wPmeYbwFzvcM9S4IjqvL8pyCYOxsyNK/RamnD7x/i4LjW7KsrxLn
eVb+wecl2U9feH/Mcp6PyQ+Ib5bzYYz1VJaX0efHGE+ZcY5LD/J/g3U1zvff
4P1yzHeFfSnH3zcV/h6ZYB1W6NsJ7hXpZJ59v6vyd9akvI55WeVzU/RzlT6c
pp+r8jVkn+Y8r7KvzDCeGu+dZz3VeH6e8dXokwL1qsmz8EWRea0xP0Xmuya/
47kS469xLpSYr5rq7O8zx/sZ3w29Z+n3Oept7P1Y5j3nqL+x96Ox16cs/wNa
bw7l
    "]], InsetBox[
    StyleBox[Cell[TextData[Cell[BoxData[
      FormBox[
       RowBox[{
        SubscriptBox["\[Beta]", "4"], "\[NotEqual]", "0"}], 
       TraditionalForm]]]],
      GeneratedCell->False,
      CellAutoOverwrite->False,
      CellBaseline->Baseline,
      TextAlignment->Left],
     Background->GrayLevel[1.]], {1.0305555555555557`, 0.5638888888888891}, {
    Left, Baseline},
    Alignment->{Left, Top}], InsetBox[
    StyleBox[Cell[TextData[Cell[BoxData[
      FormBox[
       RowBox[{
        SubscriptBox["\[Beta]", "4"], " ", "=", " ", "0"}], 
       TraditionalForm]]]],
      GeneratedCell->False,
      CellAutoOverwrite->False,
      CellBaseline->Baseline,
      TextAlignment->Left],
     Background->GrayLevel[1.]], {0.8750000000000002, 0.9583333333333335}, {
    Left, Baseline},
    Alignment->{Left, Top}], InsetBox[
    StyleBox[Cell[TextData[Cell[BoxData[
      FormBox[
       RowBox[{
        SubscriptBox["\[Beta]", "3"], "=", 
        RowBox[{
         SubscriptBox["\[Beta]", "4"], "=", "0"}]}], TraditionalForm]]]],
      GeneratedCell->False,
      CellAutoOverwrite->False,
      CellBaseline->Baseline,
      TextAlignment->Left],
     Background->GrayLevel[1.]], {0.22472613458528973`, 0.6993740219092339}, {
    Left, Baseline},
    Alignment->{Left, Top}]},
  ContentSelectable->True,
  ImagePadding->{{0., 0.}, {0., 0.}},
  ImageSize->{213., 161.},
  PlotRange->{{0., 1.3333333333333335`}, {0., 1.}},
  PlotRangePadding->Automatic]], "Input",
 CellChangeTimes->{{3.5279540935695305`*^9, 3.527954165196666*^9}}],

Cell[TextData[{
 "y=  ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    SubscriptBox["\[Beta]", "1"], "+", 
    SubscriptBox["\[Beta]", 
     RowBox[{"2", "x"}]], "+", 
    RowBox[{
     SubscriptBox["\[Beta]", "3"], 
     SuperscriptBox["x", "2"]}], "+", 
    RowBox[{
     SubscriptBox["\[Beta]", "4"], 
     SuperscriptBox["x", "3"]}]}], TraditionalForm]]]
}], "Text",
 CellChangeTimes->{{3.527954043911517*^9, 3.527954082189986*^9}}]
}, Closed]]
}, Open  ]]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["2", "BookChapterNumber",
 CellChangeTimes->{3.532552209761664*^9}],

Cell["Modifications to the Model", "BookChapterTitle",
 CellChangeTimes->{{3.532552213631917*^9, 3.5325522199099913`*^9}}],

Cell[CellGroupData[{

Cell["Dummy Variables", "Section",
 CellChangeTimes->{{3.527594622686491*^9, 3.527594624198615*^9}, 
   3.5279716380511513`*^9}],

Cell[CellGroupData[{

Cell[TextData[{
 StyleBox["Binary Variables",
  FontWeight->"Bold"],
 ": Many variables that you might be interested in don\[CloseCurlyQuote]t \
have continuous values. Some may have only yes or no (like gender or age \
above a threshold). If this is the case you have a binary or dummy variable."
}], "Definition",
 CellChangeTimes->{{3.5279694245757303`*^9, 3.527969480213505*^9}, {
  3.527969549230744*^9, 3.527969561930236*^9}}],

Cell[TextData[{
 StyleBox["Dummy Variables",
  FontWeight->"Bold"],
 ": Other times you have more than just binary responses, but they are still \
at discrete levels (maybe age, work experience, or education). If this is the \
case what you will do is set up a dummy variable for each level in your \
category. "
}], "Definition",
 CellChangeTimes->{{3.527969482163427*^9, 3.527969529601529*^9}, {
   3.527969563870158*^9, 3.5279695678200006`*^9}, 3.527971639750064*^9}]
}, Closed]],

Cell[CellGroupData[{

Cell["Models with binary explanatory (independent) variables", "Subsection",
 CellChangeTimes->{{3.527969542201025*^9, 3.5279695434509754`*^9}, {
  3.5279695764896536`*^9, 3.5279695892891417`*^9}}],

Cell[TextData[{
 "An possible model for salary could include a binary variable for whether or \
not an individual is a college grad. A model for that could be ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    SubscriptBox["Y", "t"], " ", "=", " ", 
    RowBox[{
     SubscriptBox["\[Alpha]", "1"], "+", 
     RowBox[{
      SubscriptBox["\[Alpha]", "2"], 
      SubscriptBox["D", 
       RowBox[{"1", "t"}]]}], "+", 
     SubscriptBox["\[Epsilon]", "t"]}]}], TraditionalForm]]],
 " where D is the dummy variable. If D = 1 the person graduated from college \
,if D=0 they didn\[CloseCurlyQuote]t. "
}], "Text",
 CellChangeTimes->{{3.5279696334473753`*^9, 3.527969726373658*^9}}],

Cell[TextData[{
 "Another model talks about salary and whether or not you are a minority ",
 Cell[BoxData[
  FormBox[
   RowBox[{"(", 
    RowBox[{
     SubscriptBox["D", "1"], "=", "1"}], ")"}], TraditionalForm]]],
 " and whether or not you are female ",
 Cell[BoxData[
  FormBox[
   RowBox[{"(", 
    RowBox[{
     SubscriptBox["D", "2"], " ", "=", "1"}], ")"}], TraditionalForm]]],
 " ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    SubscriptBox["Y", "t"], " ", "=", " ", 
    RowBox[{
     RowBox[{
      SubscriptBox["\[Beta]", "1"], 
      SubscriptBox["D", 
       RowBox[{"1", "t"}]]}], "+", 
     RowBox[{
      SubscriptBox["\[Beta]", "2"], 
      RowBox[{
       SubscriptBox["D", 
        RowBox[{"2", "t"}]], "."}]}]}]}], TraditionalForm]]]
}], "Text",
 CellChangeTimes->{{3.527969727523612*^9, 3.527969789171146*^9}, {
  3.5279698419390354`*^9, 3.5279698419390354`*^9}}],

Cell["\<\
In each model you can infer that the coefficient in front of your dummy \
variable represents the impact on the dependent variable of having the dummy \
variable be 1. \
\>", "Text",
 CellChangeTimes->{{3.5279698422090244`*^9, 3.5279699206558867`*^9}}],

Cell[CellGroupData[{

Cell[TextData[{
 StyleBox["Dummy Variable Trap:",
  FontWeight->"Bold"],
 " The Dummy Variable Trap is when regressing a model with \
\[OpenCurlyDoubleQuote]n\[CloseCurlyDoubleQuote] categories you include \
\[OpenCurlyDoubleQuote]n\[CloseCurlyDoubleQuote] slope coefficients. You can \
avoid the trap by simply leaving out an intercept coefficient or by including \
n-1 slope coefficients. "
}], "Definition",
 CellChangeTimes->{{3.5279699267356434`*^9, 3.527970027781601*^9}, 
   3.5279716411291804`*^9}],

Cell[TextData[{
 StyleBox["Interaction Term: ",
  FontWeight->"Bold"],
 " An interaction term is created by taking the product of two regressors. \
The Coefficient in front of that joint term is the additive marginal effect \
of the two regressors (in the case of two dummy variables it is the effect of \
belonging to both D=1 groups). "
}], "Definition",
 CellChangeTimes->{{3.527970043260982*^9, 3.5279701546165276`*^9}, 
   3.527971644956729*^9}]
}, Closed]],

Cell["\<\
If you have things you would like to consider as dummy variables, but they \
don\[CloseCurlyQuote]t have just two states you will end up creating a binary \
variable for each level of distinction in that category (for example if you \
wanted each month would have 12 of them, each corresponding to a particular \
month). \
\>", "Text",
 CellChangeTimes->{{3.527970214704124*^9, 3.527970288881157*^9}, {
  3.5325431863012133`*^9, 3.532543186308258*^9}}],

Cell["\<\
When you get back coefficient estimates for dummy variables theier \
interpretation is how much does the dependent variable change if an \
observation is a yes for that dummy variable. For example if you are looking \
at salary and one of your dummy variables is female, the coefficient is how \
much more  (less for (-) value) does a female make than a male.\
\>", "Text",
 CellChangeTimes->{{3.532543188236162*^9, 3.53254325995538*^9}, {
  3.5325432935168133`*^9, 3.5325433175629597`*^9}}]
}, Closed]],

Cell[CellGroupData[{

Cell["\<\
Models with binary dependent variables or limited dependent variables\
\>", "Subsection",
 CellChangeTimes->{{3.5279703757876806`*^9, 3.5279703926670055`*^9}}],

Cell["\<\
Some good models that you would need binary dependent variables for are \
testing to see if a student will get in to graduate school, testing to see if \
someone is likely to Default on a loan, if someone will be married....\
\>", "Text",
 CellChangeTimes->{{3.5279704029565935`*^9, 3.5279704528745966`*^9}, 
   3.527971646046032*^9}],

Cell[CellGroupData[{

Cell["Linear Probability Model (LPM using OLS)", "Subsubsection",
 CellChangeTimes->{{3.527970454504532*^9, 3.527970480993472*^9}, {
  3.527970827560609*^9, 3.5279708289705524`*^9}}],

Cell[TextData[{
 "This model is presented as ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    SubscriptBox["y", "t"], " ", "=", " ", 
    RowBox[{"\[Alpha]", "+", 
     SubscriptBox["\[Beta]x", "t"], "+", 
     SubscriptBox["\[Epsilon]", "t"]}]}], TraditionalForm]]],
 " where y=1 if a particular option is taken and 0 if otherwise."
}], "Text",
 CellChangeTimes->{{3.5279704814034557`*^9, 3.527970560660285*^9}, 
   3.527971646895488*^9}],

Cell["\<\
 If you do this regression the result will be describing the probability that \
the first choice was taken. \
\>", "Text",
 CellChangeTimes->{{3.5279704814034557`*^9, 3.527970577750602*^9}, {
  3.5279716477249565`*^9, 3.5279716484345016`*^9}}],

Cell["\<\
There are two main problems with this model: A.1 is violated (errors aren\
\[CloseCurlyQuote]t normal) so is A.5 (correlated error and x\
\[CloseCurlyQuote]s - heteroskedacity)!! Another problem is that your model \
is not bounded between 0,1 like it should be for a binary dependent variable. \
\>", "Text",
 CellChangeTimes->{{3.5279712575934067`*^9, 3.5279712596233253`*^9}, 
   3.5279716490940795`*^9}],

Cell[TextData[Cell[BoxData[{
 FormBox[
  RowBox[{
   RowBox[{"reg", " ", "y"}], ",", " ", 
   RowBox[{
    RowBox[{"X", "'"}], "s"}]}], TraditionalForm], "\[IndentingNewLine]", 
 FormBox[
  RowBox[{"predict", " ", "yhat"}], TraditionalForm], "\[IndentingNewLine]", 
 FormBox[
  RowBox[{
   RowBox[{"gen", " ", "predy"}], " ", "=", " ", 
   RowBox[{"yhat", " ", ">", " ", ".5"}]}], 
  TraditionalForm], "\[IndentingNewLine]", 
 FormBox[
  RowBox[{"tabulate", " ", "y", " ", "predy"}], 
  TraditionalForm]}]]], "Proposition",
 CellChangeTimes->{{3.527971246183863*^9, 3.527971287992191*^9}}]
}, Closed]],

Cell[CellGroupData[{

Cell["Qualitative Response Models", "Subsubsection",
 CellChangeTimes->{{3.5279707488737564`*^9, 3.5279707496137266`*^9}, {
  3.5279708533695765`*^9, 3.527970857829398*^9}}],

Cell["\<\
The idea behind both probit and logit are that they are bounded between 0 and \
1 so they make much more sense to use in binary dependent variable case. \
\>", "Text",
 CellChangeTimes->{{3.5279707922520213`*^9, 3.5279708232907796`*^9}, 
   3.527971660416828*^9}],

Cell[TextData[{
 Cell[BoxData[
  FormBox[
   RowBox[{"(", GridBox[{
      {"\[Placeholder]", 
       RowBox[{"pdf", ":", 
        RowBox[{"f", "(", 
         RowBox[{"s", ";", "\[Theta]"}], ")"}]}], 
       RowBox[{
        RowBox[{"F", "(", "z", ")"}], " ", "=", " ", 
        RowBox[{
         SubsuperscriptBox["\[Integral]", 
          RowBox[{"-", "\[Infinity]"}], "z"], 
         RowBox[{"f", "(", 
          RowBox[{"s", ";", "\[Theta]"}], ")"}]}]}]},
      {
       RowBox[{"Normal", "\[IndentingNewLine]", 
        RowBox[{"(", "Probit", ")"}]}], 
       FractionBox[
        SuperscriptBox["e", 
         RowBox[{
          RowBox[{"-", 
           SuperscriptBox["s", "2"]}], "/", "2"}]], 
        SqrtBox[
         RowBox[{"2", "\[Pi]"}]]], 
       RowBox[{
        SubsuperscriptBox["\[Integral]", 
         RowBox[{"-", "\[Infinity]"}], "z"], 
        FractionBox[
         SuperscriptBox["e", 
          RowBox[{
           RowBox[{"-", 
            SuperscriptBox["s", "2"]}], "/", "2"}]], 
         SqrtBox[
          RowBox[{"2", "\[Pi]"}]]]}]},
      {
       RowBox[{"Logistic", "\[IndentingNewLine]", 
        RowBox[{"(", "Logit", ")"}]}], 
       FractionBox[
        SuperscriptBox["e", 
         RowBox[{"-", "s"}]], 
        SuperscriptBox[
         RowBox[{"(", 
          RowBox[{"1", "+", 
           SuperscriptBox["e", 
            RowBox[{"-", "s"}]]}], ")"}], "2"]], 
       FractionBox["1", 
        RowBox[{"1", "+", 
         SuperscriptBox["e", 
          RowBox[{"-", "z"}]]}]]}
     }], ")"}], TraditionalForm]]],
 " in all cases Z = X\[Beta] = ",
 Cell[BoxData[
  FormBox[
   OverscriptBox["y", "^"], TraditionalForm]]],
 "."
}], "Text",
 CellChangeTimes->{{3.527970860179304*^9, 3.527971046421854*^9}}],

Cell[TextData[{
 StyleBox["Marginal Effect of parameters: ",
  FontWeight->"Bold"],
 " The marginal effect of a parameter in a probit or logit model is ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    FractionBox[
     RowBox[{"\[PartialD]", "cdf"}], 
     RowBox[{"\[PartialD]", 
      SubscriptBox["X", "it"]}]], " ", "=", 
    RowBox[{
     RowBox[{
      SubscriptBox["\[Beta]", "i"], "*", 
      FractionBox[
       RowBox[{"\[PartialD]", "cdf"}], 
       RowBox[{"\[PartialD]", "\[Beta]"}]]}], "=", "  ", 
     RowBox[{
      SubscriptBox["\[Beta]", "i"], "*", "pdf"}]}]}], TraditionalForm]]],
 ". This is given to us with the Stata command \[OpenCurlyDoubleQuote] \
margins, dydx(*) atmeans\[CloseCurlyDoubleQuote]"
}], "Definition",
 CellChangeTimes->{{3.527971059331338*^9, 3.5279712163150578`*^9}}]
}, Closed]]
}, Closed]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Lagged Independent Variables (Distributed Lag Models)", "Section",
 CellChangeTimes->{{3.532543397826345*^9, 3.532543406977359*^9}}],

Cell[TextData[{
 StyleBox["Lagged Variable: ",
  FontWeight->"Bold"],
 " A lagged variable is a variable where all of its values are shifted, or \
lagged,  one period later. "
}], "Definition",
 CellChangeTimes->{{3.5325434344753227`*^9, 3.532543451642982*^9}, {
  3.532543540473537*^9, 3.532543542191606*^9}}],

Cell["\<\
The coefficients in a DLM represent the effect on the dependent variable of \
the independent variable in teh current period (no lag), from one period \
before (lagged one period), or from n periods ago (lagged n periods). \
\>", "Text",
 CellChangeTimes->{{3.532543766517474*^9, 3.53254382745761*^9}}],

Cell["\<\
You can estimate them using OLS, but there are some problems with that:\
\>", "Text",
 CellChangeTimes->{{3.5325438277958193`*^9, 3.532543835315577*^9}, {
  3.532544014795532*^9, 3.532544026161117*^9}}],

Cell[CellGroupData[{

Cell["How many lags to use (s=?)", "Item1",
 CellChangeTimes->{{3.532544029547365*^9, 3.532544036357472*^9}, {
  3.532544069432399*^9, 3.532544072912305*^9}}],

Cell["\<\
the degrees of freedom ( [n-k] = n- 2s -s)\
\>", "Item1",
 CellChangeTimes->{{3.532544041936887*^9, 3.532544075165269*^9}}],

Cell["\<\
You could have serious multicolinearity issues. \
\>", "Item1",
 CellChangeTimes->{{3.5325440800323544`*^9, 3.532544092726349*^9}}]
}, Closed]],

Cell[CellGroupData[{

Cell["Alternate Estimation Procedures. ", "Subsection",
 CellChangeTimes->{{3.5325440993929377`*^9, 3.532544108549747*^9}}],

Cell[CellGroupData[{

Cell["Koyck Schemes", "Subsubsection",
 CellChangeTimes->{{3.532544167268911*^9, 3.5325441732275143`*^9}}],

Cell[TextData[{
 "The Koyck model assumes that the ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{
     SubscriptBox["\[Beta]", "i"], "'"}], "s"}], TraditionalForm]]],
 " decline geometrically, specifically that they follow the formula ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{
     SubscriptBox["\[Beta]", "i"], " ", "=", " ", 
     RowBox[{
      SubscriptBox["\[Beta]", "0"], 
      SuperscriptBox["\[Lambda]", "i"]}]}], ",", " ", 
    RowBox[{"0", "<", "\[Lambda]", "<", "1."}]}], TraditionalForm]]]
}], "Text",
 CellChangeTimes->{{3.532545205774673*^9, 3.532545221787149*^9}, {
  3.532545326173183*^9, 3.532545365613649*^9}, {3.5325454082913313`*^9, 
  3.532545408301814*^9}}],

Cell["\<\
With that in mind the Koyck model can be expressed in this way:\
\>", "Text",
 CellChangeTimes->{{3.5325454086194773`*^9, 3.5325454153299837`*^9}, {
  3.532545791745996*^9, 3.5325458012559643`*^9}}],

Cell[BoxData[
 FormBox[
  RowBox[{
   SubscriptBox["Y", "t"], " ", "=", " ", 
   RowBox[{
    RowBox[{"\[Alpha]", " ", 
     RowBox[{"(", 
      RowBox[{"1", "-", "\[Lambda]"}], ")"}]}], " ", "+", " ", 
    RowBox[{
     SubscriptBox["\[Beta]", "0"], 
     SubscriptBox["X", "t"]}], "+", 
    RowBox[{"\[Lambda]", " ", 
     SubscriptBox["Y", 
      RowBox[{"t", "-", "1"}]]}], "+", " ", 
    SubscriptBox["\[Epsilon]", "t"], "-", 
    RowBox[{"\[Lambda]", " ", 
     SubscriptBox["\[Epsilon]", 
      RowBox[{"t", "-", "1"}]]}]}]}], TraditionalForm]], "Equation",
 CellChangeTimes->{{3.532545806907391*^9, 3.532545836306052*^9}},
 TextAlignment->Center,
 TextJustification->0.,
 FontSize->14,
 FontWeight->"Bold"],

Cell[TextData[{
 "This can be done in stata by generating a lagged Y (dependent) variable \
then calling the command ",
 StyleBox["reg y x l.y",
  FontSize->14,
  FontWeight->"Bold",
  FontSlant->"Italic"],
 "."
}], "Text",
 CellChangeTimes->{{3.532545878343463*^9, 3.532545909895075*^9}}],

Cell[" ", "Text",
 CellChangeTimes->{{3.532545910401906*^9, 3.532545911614592*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell["Polynomial Distributed Lags", "Subsubsection",
 CellChangeTimes->{{3.532544177655053*^9, 3.532544182421493*^9}}],

Cell[TextData[{
 "This model (PDL) assumes that patterns in teh ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{
     SubscriptBox["\[Beta]", "i"], "'"}], "s"}], TraditionalForm]]],
 " can be modeled using general polynomials. "
}], "Text",
 CellChangeTimes->{{3.532545229661236*^9, 3.532545261871726*^9}, {
  3.5325453177166433`*^9, 3.532545322260783*^9}, {3.5325468466912003`*^9, 
  3.532546846699276*^9}}],

Cell["\<\
The \[Beta]\[CloseCurlyQuote]s are defined by this equation: \
\>", "Text",
 CellChangeTimes->{{3.532546847351474*^9, 3.532546930391872*^9}, {
  3.5325469893992357`*^9, 3.532547004558311*^9}}],

Cell[BoxData[
 FormBox[
  RowBox[{
   RowBox[{
    SubscriptBox["\[Beta]", "i"], " ", "=", 
    RowBox[{
     RowBox[{
      RowBox[{
       RowBox[{
        SubscriptBox["\[Alpha]", "0"], "+", 
        RowBox[{
         SubscriptBox["\[Alpha]", "1"], "i"}], "+", 
        RowBox[{
         SubscriptBox["\[Alpha]", "2"], 
         SuperscriptBox["i", "2"]}], "+"}], "..."}], ".", 
      RowBox[{"+", 
       SubscriptBox["\[Alpha]", "p"]}]}], 
     SuperscriptBox["i", "p"]}]}], ",", " "}], TraditionalForm]], "Equation",
 CellChangeTimes->{3.532546997312695*^9},
 TextAlignment->Center,
 TextJustification->0.,
 FontSize->14,
 FontWeight->"Bold"],

Cell["\<\
where p is the order of the polynomial. This is repeated for all the lagged \
\[Beta]'s.\
\>", "Text"],

Cell["\<\
You can test this scheme by comparing LR or chow values for this regression \
with those from a normal OLS regression. \
\>", "Text",
 CellChangeTimes->{{3.5325470072192907`*^9, 3.532547057693816*^9}}]
}, Closed]]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["\<\
Lagged Dependent Variables (Autoregressive Models)\
\>", "Section",
 CellChangeTimes->{{3.532547372290154*^9, 3.532547383303001*^9}}],

Cell["\<\
An autoregressive model is an economic modle containing lagged dependent \
variables. \
\>", "Text",
 CellChangeTimes->{{3.532547385614645*^9, 3.532547407690127*^9}}],

Cell["\<\
Below is an example of an autoregressive model:\
\>", "Text",
 CellChangeTimes->{{3.532550979730167*^9, 3.5325509903812847`*^9}}],

Cell[BoxData[
 FormBox[
  RowBox[{
   SubscriptBox["Y", "t"], " ", "=", " ", 
   RowBox[{"\[Alpha]", " ", "+", " ", 
    SubscriptBox["\[Beta]I", "t"], "+", 
    RowBox[{
     SubscriptBox["\[Gamma]Y", 
      RowBox[{"t", "-", "1"}]], 
     SubscriptBox["\[Epsilon]", "t"]}]}]}], TraditionalForm]], "Equation",
 CellChangeTimes->{{3.532550993314212*^9, 3.532551009991809*^9}},
 TextAlignment->Center,
 TextJustification->0.,
 FontSize->14,
 FontWeight->"Bold"],

Cell[CellGroupData[{

Cell["Properties of estimators", "Subsection",
 CellChangeTimes->{{3.532547470494252*^9, 3.5325474773990583`*^9}}],

Cell["\<\
If \[Epsilon]\[CloseCurlyQuote]s uncorrelated with eachother: consistent, \
biased.  t and F stats are bad\
\>", "Text",
 CellChangeTimes->{{3.532547489777459*^9, 3.53254751291463*^9}, {
  3.532547549876237*^9, 3.5325475505243483`*^9}, {3.532551866610882*^9, 
  3.5325519199756308`*^9}}],

Cell["\<\
If  \[Epsilon]\[CloseCurlyQuote]s are correlated with eachother: \
inconsistent, biased. t and F stats are bad. \
\>", "Text",
 CellChangeTimes->{{3.532547513332706*^9, 3.532547544164234*^9}, {
  3.532551899647806*^9, 3.53255191441005*^9}}]
}, Closed]],

Cell[CellGroupData[{

Cell["Interpretation of Coefiicients", "Subsection",
 CellChangeTimes->{{3.5325509509074917`*^9, 3.5325509549683447`*^9}}],

Cell[TextData[{
 StyleBox["Impact Multiplier:",
  FontWeight->"Bold"],
 StyleBox[" ",
  FontSize->14,
  FontWeight->"Bold"],
 "In the model above ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    FractionBox[
     RowBox[{"\[PartialD]", 
      SubscriptBox["Y", "t"]}], 
     RowBox[{"\[PartialD]", 
      SubscriptBox["I", "t"], " "}]], "=", "\[Beta]"}], TraditionalForm]],
  FormatType->"TraditionalForm"],
 ", which is known as the impace multiplier for thi smodel. This measures the \
change in Y in the same period as I. "
}], "Text",
 CellChangeTimes->{{3.53255102818573*^9, 3.532551083524454*^9}, {
  3.532551146291663*^9, 3.532551158630076*^9}}],

Cell[TextData[{
 "Becuase of how the model is defined, we can say that ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    SubscriptBox["Y", 
     RowBox[{"t", "-", "1"}]], " ", "=", " ", 
    RowBox[{"\[Alpha]", " ", "+", " ", 
     SubscriptBox["\[Beta]I", 
      RowBox[{"t", "-", "1"}]], "+", 
     RowBox[{
      SubscriptBox["\[Gamma]Y", 
       RowBox[{"t", "-", "2"}]], " ", "and", " "}]}]}], TraditionalForm]],
  CellChangeTimes->{{3.532550993314212*^9, 3.532551009991809*^9}},
  TextAlignment->Center,
  TextJustification->0.],
 " ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    SubscriptBox["Y", 
     RowBox[{"t", "-", "2"}]], " ", "=", " ", 
    RowBox[{"\[Alpha]", " ", "+", " ", 
     SubscriptBox["\[Beta]I", 
      RowBox[{"t", "-", "2"}]], "+", 
     SubscriptBox["\[Gamma]Y", 
      RowBox[{"t", "-", "3"}]]}]}], TraditionalForm]],
  CellChangeTimes->{{3.532550993314212*^9, 3.532551009991809*^9}},
  TextAlignment->Center,
  TextJustification->0.],
 " and so on. We can then re-write ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    SubscriptBox["Y", "t"], " ", "=", " ", 
    RowBox[{
     RowBox[{
      RowBox[{"\[Alpha]", " ", 
       RowBox[{"(", 
        RowBox[{
         RowBox[{"1", "+", "\[Gamma]", "+", 
          SuperscriptBox["\[Gamma]", "2"], "+"}], "..."}], ")"}]}], " ", "+", 
      " ", 
      RowBox[{"\[Beta]", " ", 
       RowBox[{"(", 
        RowBox[{
         RowBox[{"I", " ", "+", " ", 
          RowBox[{"\[Gamma]", " ", 
           SubscriptBox["I", 
            RowBox[{"t", "-", "1"}]]}], "+", " ", 
          RowBox[{
           SuperscriptBox["\[Gamma]", "2"], 
           SubscriptBox["I", 
            RowBox[{"t", "-", "2"}]]}], "+"}], "..."}], ")"}]}]}], " ", "=", 
     " ", 
     RowBox[{
      RowBox[{
       RowBox[{
        FractionBox["\[Alpha]", 
         RowBox[{"1", "-", "\[Gamma]"}]], "+", 
        SubscriptBox["\[Beta]I", "t"], "+", 
        SubscriptBox["\[Beta]\[Gamma]I", 
         RowBox[{"t", "-", "1"}]], "+", 
        RowBox[{
         SuperscriptBox["\[Beta]\[Gamma]", "2"], 
         SubscriptBox["I", 
          RowBox[{"t", "-", "2"}]]}], "+"}], "..."}], ".."}]}]}], 
   TraditionalForm]],
  FormatType->"TraditionalForm"]
}], "Text",
 CellChangeTimes->{{3.532551160906657*^9, 3.532551191296299*^9}, {
  3.532551230597515*^9, 3.532551330964635*^9}}],

Cell[TextData[{
 "Total Impact (Long Run Investment Multiplier): ",
 StyleBox["From the above equation we can say that the impact a change in I \
has on Y is defined as ",
  FontWeight->"Plain"],
 Cell[BoxData[
  FormBox[
   FractionBox["\[Beta]", 
    RowBox[{"1", "-", "\[Gamma]"}]], TraditionalForm]],
  FormatType->"TraditionalForm",
  FontSize->16],
 StyleBox[". ",
  FontSize->16],
 StyleBox["This is interpreted as the cumulitive (over time) change in Y \
corresponding to a one time change  in I or the increase in long-run \
equlibirum Y corresponding to a sustained increase in I.",
  FontWeight->"Plain"]
}], "Text",
 CellChangeTimes->{{3.5325513386222267`*^9, 3.532551434863265*^9}},
 FontWeight->"Bold"]
}, Closed]],

Cell[CellGroupData[{

Cell["\<\
Tests for Autoregressive Models\
\>", "Subsection",
 CellChangeTimes->{{3.532551534583584*^9, 3.532551541403372*^9}}],

Cell["\<\
You will often have problems with autocorrelation if you use an AR model so \
to test if this is teh case you can use the Durbin h or Breuch Godfrey tests. \
\>", "Text",
 CellChangeTimes->{{3.532551543229603*^9, 3.532551575592189*^9}}],

Cell[CellGroupData[{

Cell["Durbin h test", "Subsubsection",
 CellChangeTimes->{{3.532551578146819*^9, 3.5325515844604597`*^9}}],

Cell["\<\
The test is defined as follows:\
\>", "Text",
 CellChangeTimes->{{3.532551630983325*^9, 3.5325516366836433`*^9}}],

Cell[BoxData[
 FormBox[
  RowBox[{"h", " ", "=", " ", 
   RowBox[{"\[Rho]", " ", 
    SuperscriptBox[
     RowBox[{"(", 
      FractionBox["n", 
       RowBox[{"1", " ", "-", " ", 
        RowBox[{"nVar", "(", 
         RowBox[{
          RowBox[{"Coef", ".", " ", "est", ".", " ", "of"}], " ", 
          SubscriptBox["Y", 
           RowBox[{"t", "-", "1"}]]}], ")"}]}]], ")"}], 
     RowBox[{"1", "/", "2"}]]}]}], TraditionalForm]], "Equation",
 CellChangeTimes->{{3.532551640831633*^9, 3.5325516762543783`*^9}}],

Cell["\<\
This test has an asymptotic distribution of h ~ N (0,1). \
\>", "Text",
 CellChangeTimes->{{3.532551677293086*^9, 3.532551698775275*^9}}],

Cell["\<\
There are two main problems with this test:\
\>", "Text",
 CellChangeTimes->{{3.5325516989659348`*^9, 3.5325517051067123`*^9}}],

Cell[CellGroupData[{

Cell[TextData[{
 "The h test is invalid if n Var (cof. est. ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    SubscriptBox["Y", 
     RowBox[{"t", "-", "1"}]], ")"}], TraditionalForm]],
  FormatType->"TraditionalForm"],
 " >1"
}], "Item1Numbered",
 CellChangeTimes->{{3.53255171115768*^9, 3.5325517307186117`*^9}}],

Cell["\<\
N(0,1) seems to give a poor fit ot teh distributio of h for frequently \
encountered sample sizes. \
\>", "Item1Numbered",
 CellChangeTimes->{{3.5325517327781467`*^9, 3.532551755562978*^9}}]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell["Breuch-Godfrey Test", "Subsubsection",
 CellChangeTimes->{{3.5325517599801207`*^9, 3.53255177124186*^9}}],

Cell[TextData[{
 "This test can be preformed by regresion the OLS ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{
     SubscriptBox["e", "t"], "'"}], "s", " "}], TraditionalForm]]],
 "on the lagged y\[CloseCurlyQuote]s and lagged ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{
     SubscriptBox["e", "t"], "'"}], "s"}], TraditionalForm]]],
 " and then testing the collective explanatory power of the coefficients of \
the lagged errors using an F-test. "
}], "Text",
 CellChangeTimes->{{3.532551779187393*^9, 3.532551833771494*^9}}]
}, Open  ]]
}, Open  ]]
}, Open  ]],

Cell["Simultaneous Equations", "Section",
 CellChangeTimes->{{3.532955930539055*^9, 3.5329559351700993`*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell["3", "BookChapterNumber",
 CellChangeTimes->{3.532552229995948*^9}],

Cell["\<\
Violations of the 5 Assumptions\
\>", "BookChapterTitle",
 CellChangeTimes->{{3.532552236003166*^9, 3.532552243408416*^9}}],

Cell[CellGroupData[{

Cell["\<\
A.1: Errors are not normally distributed\
\>", "Section",
 CellChangeTimes->{{3.532552027624487*^9, 3.532552058826046*^9}}],

Cell[CellGroupData[{

Cell["Causes", "Subsection",
 CellChangeTimes->{{3.532552106646029*^9, 3.5325521075380163`*^9}}],

Cell["\<\
This isn\[CloseCurlyQuote]t really a cause, but sometimes the distribution of \
error temrs is too tall and pointed. This usually means they follow a Laplace \
distribution, or that they are LAD. This isn\[CloseCurlyQuote]t desireable, \
but it is something we know how to work with. To obtain LAD estimators for \
\[Beta]\[CloseCurlyQuote]s we use the qreg command.\
\>", "Text",
 CellChangeTimes->{{3.5325533258292303`*^9, 3.532553356331258*^9}, {
  3.53255341272213*^9, 3.5325534419326067`*^9}, {3.532553502480001*^9, 
  3.532553502492494*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell["Tests", "Subsection",
 CellChangeTimes->{{3.532552110959787*^9, 3.532552111800817*^9}}],

Cell[CellGroupData[{

Cell["Skewness", "Subsubsection",
 CellChangeTimes->{{3.532553179942152*^9, 3.5325531828332357`*^9}}],

Cell[TextData[{
 "A normal distribution is symmetric about the mean. This means is a property \
known as skewness and the expected value for the skewness in a perfectly \
symmetric distribution is 0. We can create parameter estimates for the \
skewness in this way (after creating the estimate we can use a normal t test \
with ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{
     RowBox[{
      SubscriptBox["H", "0"], ":", " ", "skewness"}], " ", "=", "0"}], ")"}], 
   TraditionalForm]],
  FormatType->"TraditionalForm"],
 ":"
}], "Text",
 CellChangeTimes->{{3.532553503320047*^9, 3.5325535866552*^9}, {
  3.5325536521021223`*^9, 3.532553678745858*^9}}],

Cell[BoxData[
 FormBox[
  RowBox[{
   SubscriptBox[
    OverscriptBox["\[Gamma]", "^"], "1"], " ", "=", " ", 
   RowBox[{
    RowBox[{
     FractionBox[
      RowBox[{"(", 
       RowBox[{
        UnderoverscriptBox["\[Sum]", 
         RowBox[{"t", "=", "1"}], "n"], 
        RowBox[{
         SuperscriptBox[
          SubscriptBox["\[Epsilon]", "t"], "3"], "/", "n"}]}], ")"}], 
      SuperscriptBox[
       RowBox[{"(", 
        RowBox[{
         UnderoverscriptBox["\[Sum]", 
          RowBox[{"t", "=", "1"}], "n"], 
         RowBox[{
          SuperscriptBox[
           SubscriptBox["\[Epsilon]", "t"], "2"], "/", "n"}]}], ")"}], 
       RowBox[{" ", 
        RowBox[{"3", "/", "2"}]}]]], "~", "N"}], " ", 
    RowBox[{"(", 
     RowBox[{"0", ",", " ", 
      RowBox[{"6", "/", "n"}]}], ")"}]}]}], TraditionalForm]], "Equation",
 CellChangeTimes->{{3.532553592410411*^9, 3.5325536444425793`*^9}, {
  3.5325540583632717`*^9, 3.5325540706537*^9}},
 TextAlignment->Center,
 TextJustification->0.]
}, Open  ]],

Cell[CellGroupData[{

Cell["Kurtosis", "Subsubsection",
 CellChangeTimes->{{3.532553183356719*^9, 3.532553184617572*^9}, {
  3.532553782965734*^9, 3.532553784001026*^9}}],

Cell["\<\
The other part of a normal distribution is known as the kurtosis of the \
distribution. With a perfect standard normal distribution the kurtosis is \
equal to 3. A similar test statistic can be computed in the following way:\
\>", "Text",
 CellChangeTimes->{{3.532553681459906*^9, 3.532553748448339*^9}, {
  3.5325540022253523`*^9, 3.532554002303402*^9}}],

Cell[BoxData[
 FormBox[
  RowBox[{
   SubscriptBox[
    OverscriptBox["\[Gamma]", "^"], "2"], " ", "=", " ", 
   RowBox[{
    FractionBox[
     RowBox[{"(", 
      RowBox[{
       UnderoverscriptBox["\[Sum]", 
        RowBox[{"t", "=", "1"}], "n"], 
       RowBox[{
        SuperscriptBox[
         SubscriptBox["\[Epsilon]", "t"], "4"], "/", "n"}]}], ")"}], 
     SuperscriptBox[
      RowBox[{"(", 
       RowBox[{
        UnderoverscriptBox["\[Sum]", 
         RowBox[{"t", "=", "1"}], "n"], 
        RowBox[{
         SuperscriptBox[
          SubscriptBox["\[Epsilon]", "t"], "2"], "/", "n"}]}], ")"}], 
      RowBox[{" ", "2"}]]], "-", 
    RowBox[{"3", "~", 
     RowBox[{"N", "(", 
      RowBox[{"0", ",", 
       RowBox[{"24", "/", "n"}]}], ")"}]}]}]}], TraditionalForm]], "Equation",\

 CellChangeTimes->{{3.532553753373043*^9, 3.5325537746935377`*^9}, {
  3.5325540746188583`*^9, 3.532554077690563*^9}},
 TextAlignment->Center,
 TextJustification->0.],

Cell["\<\
The (-3) in the test is accounting for the fact that the expected value is 3 \
and allows this statistic to return just the excess kurtosis. \
\>", "Text",
 CellChangeTimes->{{3.532554004753484*^9, 3.532554033181348*^9}, {
  3.532554103089156*^9, 3.5325541083936663`*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell["JB Test", "Subsubsection",
 CellChangeTimes->{{3.5325531850693207`*^9, 3.532553185913233*^9}}],

Cell["\<\
The JB test is kinda a summary of the two to get a picture of the overall \
normality of the distribution of the error terms.  It is defined as follows:\
\>", "Text",
 CellChangeTimes->{{3.532553810694265*^9, 3.532553841220845*^9}}],

Cell[BoxData[
 FormBox[
  RowBox[{"JB", " ", "=", " ", 
   RowBox[{
    RowBox[{"n", " ", "[", " ", 
     RowBox[{
      FractionBox[
       SuperscriptBox["skewness", "2"], "6"], "+", " ", 
      FractionBox[
       SuperscriptBox[
        RowBox[{"(", 
         RowBox[{"excess", " ", "kurtosis"}], ")"}], "2"], "24"]}], "]"}], 
    " ", "~", " ", 
    RowBox[{
     SuperscriptBox["\[Chi]", "2"], "(", "2", ")"}]}]}], 
  TraditionalForm]], "Equation",
 CellChangeTimes->{{3.532553856402315*^9, 3.532553883581711*^9}, {
  3.532554089644663*^9, 3.5325540910438004`*^9}}]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Consequences", "Subsection",
 CellChangeTimes->{{3.532552113853489*^9, 3.532552115220457*^9}}],

Cell[CellGroupData[{

Cell["\<\
OLS = BLUE, but may not be efficient.\
\>", "Item1",
 CellChangeTimes->{{3.532553145224481*^9, 3.5325531630131493`*^9}, {
  3.532553226155787*^9, 3.532553226161582*^9}}],

Cell["OLS \[NotEqual] MLE", "Item1",
 CellChangeTimes->{{3.5325532288760633`*^9, 3.532553232129239*^9}}],

Cell["t and F stats are not exact. ", "Item1",
 CellChangeTimes->{{3.532553235651861*^9, 3.532553247672896*^9}}],

Cell["\<\
Unibiased, but non-linear estimators mught have lower variance. \
\>", "Item1",
 CellChangeTimes->{{3.53255324946768*^9, 3.532553277359988*^9}}]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Fixes", "Subsection",
 CellChangeTimes->{{3.532552117012527*^9, 3.532552117564412*^9}}],

Cell[TextData[{
 "You can obtain  LAD estimates by using the STATA command ",
 StyleBox["qreg",
  FontWeight->"Bold",
  FontSlant->"Italic"],
 " When you do this you are assuming that the variance is bigger. This is \
often done if tehre are a fiarly large number of outliers in your data. "
}], "Text",
 CellChangeTimes->{{3.532553404605195*^9, 3.5325534096024847`*^9}, {
  3.532553446232895*^9, 3.532553490400367*^9}, {3.532554145614974*^9, 
  3.532554145620241*^9}}],

Cell["\<\
You could also consider using other estimators with different distributions. \
\
\>", "Text",
 CellChangeTimes->{{3.53255414607882*^9, 3.5325541743309298`*^9}}],

Cell["\<\
The last idea is to just delete some of the outliers in your data to try to \
get the distribution to behave a little better. \
\>", "Text",
 CellChangeTimes->{{3.5325541746074667`*^9, 3.532554190746561*^9}}]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["\<\
A.2 Expected Value of error terms is not 0\
\>", "Section",
 CellChangeTimes->{{3.532552034949749*^9, 3.5325520453181067`*^9}}],

Cell["Causes", "Subsection",
 CellChangeTimes->{{3.532552106646029*^9, 3.5325521075380163`*^9}}],

Cell["Tests", "Subsection",
 CellChangeTimes->{{3.532552110959787*^9, 3.532552111800817*^9}}],

Cell[CellGroupData[{

Cell["Consequences", "Subsection",
 CellChangeTimes->{{3.532552113853489*^9, 3.532552115220457*^9}}],

Cell[TextData[{
 "If A.2 doesn\[CloseCurlyQuote]t hold then all of the least squares \
estimators in the vector ",
 Cell[BoxData[
  FormBox[
   OverscriptBox["\[Beta]", "^"], TraditionalForm]],
  FormatType->"TraditionalForm"],
 " will be biased. There is a change that if the expected value of the error \
terms are all equal to \[Mu], then you can show that only the slope term is \
biased. "
}], "Text",
 CellChangeTimes->{{3.532703791153178*^9, 3.5327038579946947`*^9}}]
}, Open  ]],

Cell["Fixes", "Subsection",
 CellChangeTimes->{{3.532552117012527*^9, 3.532552117564412*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell["\<\
A.3 Variance of errors are not homoskedastic\
\>", "Section",
 CellChangeTimes->{{3.532552061453278*^9, 3.532552076789415*^9}}],

Cell[BoxData[
 GraphicsBox[{
   LineBox[{{0.09722222222222224, 0.8138888888888891}, {0.09444444444444447, 
    0.23055555555555562`}, {0.5194444444444446, 0.2333333333333334}}], 
   LineBox[{{0.7500000000000001, 0.8236111111111111}, {0.7472222222222223, 
    0.2402777777777776}, {1.1722222222222225`, 0.24305555555555536`}}], 
   LineBox[{{0.09444444444444447, 0.411111111111111}, {0.4722222222222223, 
    0.5749999999999997}}], 
   LineBox[{{0.7444444444444446, 0.4458333333333333}, {1.1222222222222225`, 
    0.609722222222222}}], 
   PointBox[{0.11944444444444444`, 0.4583333333333335}], 
   PointBox[{0.15277777777777782`, 0.4222222222222225}], 
   PointBox[{0.20555555555555557`, 0.48888888888888893`}], 
   PointBox[{0.2444444444444445, 0.43611111111111134`}], 
   PointBox[{0.31666666666666676`, 0.5194444444444446}], 
   PointBox[{0.3777777777777779, 0.5833333333333335}], 
   PointBox[{0.4222222222222223, 0.48611111111111116`}], 
   PointBox[{0.35277777777777786`, 0.48611111111111116`}], 
   PointBox[{0.4666666666666668, 0.5833333333333335}], 
   PointBox[{0.48611111111111127`, 0.5444444444444445}], 
   PointBox[{0.7722222222222224, 0.48888888888888893`}], 
   PointBox[{0.7750000000000001, 0.40555555555555545`}], 
   PointBox[{0.838888888888889, 0.46111111111111125`}], 
   PointBox[{0.8527777777777779, 0.5055555555555558}], 
   PointBox[{0.916666666666667, 0.5333333333333334}], 
   PointBox[{0.9333333333333336, 0.46944444444444455`}], 
   PointBox[{0.9583333333333335, 0.38611111111111107`}], 
   PointBox[{1.013888888888889, 0.3666666666666667}], 
   PointBox[{1.0500000000000003`, 0.3666666666666667}], 
   PointBox[{1.052777777777778, 0.411111111111111}], 
   PointBox[{1.0361111111111114`, 0.6111111111111112}], 
   PointBox[{1.0500000000000003`, 0.802777777777778}], 
   PointBox[{1.1305555555555558`, 0.5722222222222224}], 
   PointBox[{1.1583333333333337`, 0.6472222222222224}], InsetBox[
    StyleBox[Cell["Homoskedasticity",
      GeneratedCell->False,
      CellAutoOverwrite->False,
      CellBaseline->Baseline,
      TextAlignment->Left],
     Background->GrayLevel[1.]], {0.21451077943615268`, 0.7978026533996689}, {
    Left, Baseline},
    Alignment->{Left, Top}], InsetBox[
    StyleBox[Cell["Heteroskedasticity",
      GeneratedCell->False,
      CellAutoOverwrite->False,
      CellBaseline->Baseline,
      TextAlignment->Left],
     Background->GrayLevel[1.]], {0.8638888888888889, 0.8472222222222221}, {
    Left, Baseline},
    Alignment->{Left, Top}]},
  ContentSelectable->True,
  ImagePadding->{{0., 0.}, {0., 0.}},
  ImageSize->{268., 201.},
  PlotRange->{{0., 1.3333333333333335`}, {0., 1.}},
  PlotRangePadding->Automatic]], "Input",
 CellChangeTimes->{{3.527945319587003*^9, 3.527945386384331*^9}}],

Cell[CellGroupData[{

Cell["Information", "Subsection",
 CellChangeTimes->{{3.532703964185478*^9, 3.5327039676644773`*^9}}],

Cell["\<\
The definition of heteroskedasticity in the error terms is that the error \
term for each observation is not equal. \
\>", "Text",
 CellChangeTimes->{{3.5327039829486113`*^9, 3.5327040076145897`*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell["Causes", "Subsection",
 CellChangeTimes->{{3.532552106646029*^9, 3.5325521075380163`*^9}}],

Cell["\<\
This is common with cross-sectional data. \
\>", "Text",
 CellChangeTimes->{{3.532704254070982*^9, 3.532704259957121*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell["Tests", "Subsection",
 CellChangeTimes->{{3.532552110959787*^9, 3.532552111800817*^9}}],

Cell["\<\
The main idea behind the different tests is that that you try to find some \
kind of systematic behavior in the variances of the errors. \
\>", "Text",
 CellChangeTimes->{{3.5327043026760073`*^9, 3.532704334123829*^9}}],

Cell[CellGroupData[{

Cell["Goldfield Quandt Test", "Subsubsection",
 CellChangeTimes->{{3.5327043406929827`*^9, 3.532704345924458*^9}}],

Cell[TextData[{
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{
     SubscriptBox["H", "0"], ":", " ", 
     SuperscriptBox[
      SubscriptBox["\[Sigma]", "1"], "2"]}], " ", "=", " ", 
    RowBox[{
     RowBox[{
      RowBox[{
       SuperscriptBox[
        SubscriptBox["\[Sigma]", "2"], "2"], "=."}], ".."}], "=", 
     SuperscriptBox[
      SubscriptBox["\[Sigma]", "n"], "2"]}]}], TraditionalForm]],
  FormatType->"TraditionalForm"],
 " (homoskedasticity)"
}], "Text",
 CellChangeTimes->{{3.5327043545626717`*^9, 3.5327043772140627`*^9}, {
  3.5327046628026237`*^9, 3.532704669002997*^9}}],

Cell["\<\
You then divide the data in three groups (about the same size).\
\>", "Text",
 CellChangeTimes->{{3.532704439750506*^9, 3.5327044628456087`*^9}}],

Cell[TextData[{
 "Then run separate regressions on groups I and III and ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    SuperscriptBox[
     SubscriptBox["s", "I"], "2"], " ", "and", " ", 
    SuperscriptBox[
     SubscriptBox["s", "III"], "2"], " "}], TraditionalForm]],
  FormatType->"TraditionalForm"],
 "are estimators for ",
 Cell[BoxData[
  FormBox[
   SuperscriptBox["\[Sigma]", "2"], TraditionalForm]],
  FormatType->"TraditionalForm"]
}], "Text",
 CellChangeTimes->{{3.532704494673334*^9, 3.532704520958705*^9}}],

Cell[TextData[{
 "There is then a test statistic ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{
     FractionBox[
      SuperscriptBox[
       SubscriptBox["s", "III"], "2"], 
      SuperscriptBox[
       SubscriptBox["S", "I"], "2"]], "~", "F"}], " ", 
    RowBox[{"(", 
     RowBox[{
      RowBox[{
       SubscriptBox["n", "3"], "-", "k"}], ",", " ", 
      RowBox[{
       SubscriptBox["n", "1"], "-", "k"}]}], ")"}]}], TraditionalForm]],
  FormatType->"TraditionalForm"],
 "."
}], "Text",
 CellChangeTimes->{{3.532704523246829*^9, 3.53270459647369*^9}}],

Cell[TextData[{
 "We would expect the stat to be close to 1 (variance of error terms are \
similar). The further away we are the more reason to reject ",
 Cell[BoxData[
  FormBox[
   SubscriptBox["H", "0"], TraditionalForm]],
  FormatType->"TraditionalForm"]
}], "Text",
 CellChangeTimes->{{3.5327045967722387`*^9, 3.5327046578351793`*^9}}]
}, Open  ]],

Cell["Modified White Test", "Subsubsection",
 CellChangeTimes->{{3.532704717545282*^9, 3.532704723008778*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell["Consequences", "Subsection",
 CellChangeTimes->{{3.532552113853489*^9, 3.532552115220457*^9}}],

Cell["\<\
Estimators are still unbiased. \
\>", "Text",
 CellChangeTimes->{{3.5327040266715918`*^9, 3.532704033257825*^9}, 
   3.532704089567215*^9}],

Cell["They are still consistent.", "Text",
 CellChangeTimes->{{3.532704033502151*^9, 3.532704044849647*^9}, {
  3.532704090790683*^9, 3.5327040911087103`*^9}}],

Cell["They are NOT minimum variance.", "Text",
 CellChangeTimes->{{3.5327040453418427`*^9, 3.5327040547934628`*^9}}],

Cell["They are NOT BLUE. ", "Text",
 CellChangeTimes->{{3.532704055044897*^9, 3.53270406315308*^9}}],

Cell["\<\
The t and F stats aren\[CloseCurlyQuote]t exact [this is because the wrong \
formula is used in computing them]. \
\>", "Text",
 CellChangeTimes->{{3.532704063549124*^9, 3.532704098556067*^9}, 
   3.532954110353465*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell["Fixes", "Subsection",
 CellChangeTimes->{{3.532552117012527*^9, 3.532552117564412*^9}}],

Cell[TextData[{
 "To fix the mistake with the bad t and F stats we simply need to use the \
write equaitons when calculating the standard errors. This can be done using \
the STATA command ",
 StyleBox["reg y s\[CloseCurlyQuote]s, robust ",
  FontSize->14,
  FontWeight->"Bold",
  FontSlant->"Italic"],
 "(The equation that was used is ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    SuperscriptBox[
     RowBox[{
      SuperscriptBox["s", "2"], "(", 
      RowBox[{
       RowBox[{"X", "'"}], "X"}], ")"}], 
     RowBox[{"-", "1"}]], " ", "when", " ", "it", " ", "should", " ", "have", 
    " ", "been", " ", 
    SuperscriptBox[
     RowBox[{"(", 
      RowBox[{
       RowBox[{"X", "'"}], "X"}], ")"}], 
     RowBox[{"-", "1"}]], 
    RowBox[{"X", "'"}], "\[CapitalSigma]X", " ", 
    SuperscriptBox[
     RowBox[{"(", 
      RowBox[{
       RowBox[{"X", "'"}], "X"}], ")"}], 
     RowBox[{"-", "1"}]]}], TraditionalForm]],
  FormatType->"TraditionalForm"],
 ")"
}], "Text",
 CellChangeTimes->{{3.532704813856395*^9, 3.532704939246125*^9}}],

Cell[TextData[{
 "YTou can also use the command ",
 StyleBox["vwls y x\[CloseCurlyQuote]s, sd (std. error)",
  FontWeight->"Bold"]
}], "Text",
 CellChangeTimes->{{3.532959054470272*^9, 3.532959070532282*^9}}]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["\<\
A.4 Autocorrelation in the error terms\
\>", "Section",
 CellChangeTimes->{{3.532552078861003*^9, 3.5325520926246157`*^9}}],

Cell["\<\
When you have autocorrellation the error terms are not statistically \
independent. \
\>", "Text",
 CellChangeTimes->{{3.532955833637363*^9, 3.5329558628604107`*^9}, {
  3.5329575269274817`*^9, 3.532957539389638*^9}}],

Cell[BoxData[
 GraphicsBox[{
   LineBox[{{0.0777777777777778, 0.8361111111111112}, {0.0777777777777778, 
    0.25}, {0.5500000000000002, 0.25}}], 
   LineBox[{{0.7180555555555558, 0.8374999999999999}, {0.7180555555555558, 
    0.25138888888888866`}, {1.1902777777777782`, 0.25138888888888866`}}], 
   LineBox[{{0.08055555555555557, 0.44444444444444464`}, {0.4750000000000002, 
    0.5861111111111112}}], 
   LineBox[{{0.7152777777777779, 0.4097222222222223}, {1.1097222222222225`, 
    0.5513888888888889}}], 
   PointBox[{0.10833333333333336`, 0.4222222222222225}], 
   PointBox[{0.15555555555555559`, 0.4472222222222224}], 
   PointBox[{0.16111111111111112`, 0.4916666666666667}], 
   PointBox[{0.23611111111111113`, 0.463888888888889}], 
   PointBox[{0.25277777777777777`, 0.5194444444444446}], 
   PointBox[{0.28333333333333344`, 0.4805555555555556}], 
   PointBox[{0.33611111111111125`, 0.5444444444444445}], 
   PointBox[{0.3750000000000001, 0.5694444444444446}], 
   PointBox[{0.41666666666666674`, 0.5916666666666668}], 
   PointBox[{0.4222222222222223, 0.5361111111111112}], 
   PointBox[{0.4750000000000001, 0.5555555555555556}], 
   PointBox[{0.4833333333333334, 0.6222222222222222}], 
   PointBox[{0.5138888888888891, 0.5805555555555557}], 
   PointBox[{0.7500000000000002, 0.37777777777777777`}], 
   PointBox[{0.7972222222222224, 0.3916666666666666}], 
   PointBox[{0.8305555555555557, 0.4083333333333332}], 
   PointBox[{0.8361111111111112, 0.4305555555555558}], 
   PointBox[{0.8361111111111112, 0.46944444444444455`}], 
   PointBox[{0.8444444444444446, 0.5055555555555558}], 
   PointBox[{0.8555555555555558, 0.5333333333333334}], 
   PointBox[{0.8805555555555558, 0.5444444444444445}], 
   PointBox[{0.916666666666667, 0.5527777777777778}], 
   PointBox[{0.9388888888888891, 0.5583333333333333}], 
   PointBox[{0.9500000000000002, 0.5611111111111111}], 
   PointBox[{0.9722222222222225, 0.5527777777777778}], 
   PointBox[{0.9944444444444447, 0.5527777777777778}], 
   PointBox[{1.0444444444444447`, 0.5333333333333334}], 
   PointBox[{1.0555555555555558`, 0.5194444444444446}], 
   PointBox[{1.0861111111111112`, 0.5194444444444446}], 
   PointBox[{1.127777777777778, 0.5361111111111112}], 
   PointBox[{1.1361111111111113`, 0.5444444444444445}], InsetBox[
    StyleBox[Cell["No Autocorrelation",
      GeneratedCell->False,
      CellAutoOverwrite->False,
      CellBaseline->Baseline,
      TextAlignment->Left],
     Background->GrayLevel[1.]], {0.20833333333333334`, 0.7416666666666669}, {
    Left, Baseline},
    Alignment->{Left, Top}], InsetBox[
    StyleBox[Cell["Autocorrelation",
      GeneratedCell->False,
      CellAutoOverwrite->False,
      CellBaseline->Baseline,
      TextAlignment->Left],
     Background->GrayLevel[1.]], {0.8444444444444446, 0.7666666666666668}, {
    Left, Baseline},
    Alignment->{Left, Top}]},
  ContentSelectable->True,
  ImagePadding->{{0., 0.}, {0., 0.}},
  ImageSize->{303., 227.},
  PlotRange->{{0., 1.3333333333333335`}, {0., 1.}},
  PlotRangePadding->Automatic]], "Input",
 CellChangeTimes->{{3.5279453959439487`*^9, 3.527945465541165*^9}}],

Cell[CellGroupData[{

Cell["Causes", "Subsection",
 CellChangeTimes->{{3.532552106646029*^9, 3.5325521075380163`*^9}}],

Cell["\<\
This is very common in time-series data. \
\>", "Text",
 CellChangeTimes->{{3.532955821568927*^9, 3.5329558261570044`*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell["Tests", "Subsection",
 CellChangeTimes->{{3.532552110959787*^9, 3.532552111800817*^9}}],

Cell["\<\
Before dong any kind of autocorrelation test you will need to specify a time \
variable using the STATA Command tsset t (where t is that time variable. This \
is easily created with the command gen t = _n\
\>", "Text",
 CellChangeTimes->{{3.532957550878717*^9, 3.532957595588681*^9}}],

Cell[CellGroupData[{

Cell["Durbin-Watson", "Subsubsection",
 CellChangeTimes->{{3.532957764879492*^9, 3.53295776805028*^9}}],

Cell[TextData[{
 "The test will be testing the hypothesis that there is no autocorrelation. \
",
 Cell[BoxData[
  FormBox[
   RowBox[{"(", 
    RowBox[{
     SubscriptBox["H", "0"], ":", " ", 
     RowBox[{"no", " ", "autocorrelation"}]}], ")"}], TraditionalForm]],
  FormatType->"TraditionalForm"]
}], "Text",
 CellChangeTimes->{{3.532957967137939*^9, 3.532958015264689*^9}}],

Cell["\<\
The DW test stat is defined as follows:\
\>", "Text",
 CellChangeTimes->{{3.5329577687833757`*^9, 3.532957776367423*^9}}],

Cell[BoxData[
 FormBox[
  RowBox[{
   RowBox[{"DW", " ", "=", " ", 
    RowBox[{
     FractionBox[
      RowBox[{
       UnderoverscriptBox["\[Sum]", 
        RowBox[{"t", "=", "2"}], "n"], 
       SuperscriptBox[
        RowBox[{"(", 
         RowBox[{
          SubscriptBox["e", "t"], "-", 
          SubscriptBox["e", 
           RowBox[{"t", "-", "1"}]]}], ")"}], "2"]}], 
      RowBox[{
       UnderoverscriptBox["\[Sum]", 
        RowBox[{"t", "=", "1"}], "n"], 
       SubscriptBox["e", "t"]}]], "\[TildeTilde]", " ", 
     RowBox[{"2", 
      RowBox[{"(", 
       RowBox[{"1", "-", "\[Rho]"}], ")"}]}]}]}], ",", " ", 
   RowBox[{"(", 
    RowBox[{"\[Rho]", " ", "is", " ", "the", " ", "corr", " ", "between", " ", 
     SubscriptBox["e", "t"], " ", "and", " ", 
     SubscriptBox["e", 
      RowBox[{"t", "-", "1"}]]}], ")"}]}], TraditionalForm]], "Equation",
 CellChangeTimes->{{3.532957782578732*^9, 3.532957863536066*^9}}],

Cell["\<\
We want this statistic be as close to 2 as possible. The closer to 2 we are \
the less autocorrelation there is in our data. \
\>", "Text",
 CellChangeTimes->{{3.532957821918583*^9, 3.532957828269844*^9}, {
  3.532957871716762*^9, 3.532957903175495*^9}}],

Cell["\<\
In this test you will have two clear regection regions on the outsides (this \
is bad), a clear fail to reject region in the middle, and ambiguous regions \
in between. \
\>", "Text",
 CellChangeTimes->{{3.532957903724204*^9, 3.532957965146502*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell["Woolridge test", "Subsubsection",
 CellChangeTimes->{{3.532958034473336*^9, 3.532958037384178*^9}}],

Cell["\<\
This one is simple. You will do a regression of the error term with the error \
term from one period ago. \
\>", "Text",
 CellChangeTimes->{{3.5329580380721817`*^9, 3.53295805629958*^9}}],

Cell["\<\
You hope that there is not a statistically significant relationship between \
the 2 (shown by t stat and p-value reported with regression) so you can \
reject the idea of autocorrelation. \
\>", "Text",
 CellChangeTimes->{{3.5329580566079473`*^9, 3.532958095840948*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell["\<\
Other things for Autoregressive models\
\>", "Subsubsection",
 CellChangeTimes->{{3.532958109046547*^9, 3.532958114878211*^9}}],

Cell[CellGroupData[{

Cell["Durbin-h test", "Subsubsubsection",
 CellChangeTimes->{{3.532958119207595*^9, 3.5329581216002502`*^9}}],

Cell["\<\
The test stat is defined as follows\
\>", "Text",
 CellChangeTimes->{{3.532958123958088*^9, 3.532958129405945*^9}}],

Cell[BoxData[
 FormBox[
  RowBox[{"h", " ", "=", " ", 
   RowBox[{
    RowBox[{"(", 
     RowBox[{"1", "-", 
      FractionBox["DW", "2"]}], ")"}], 
    RowBox[{
     SqrtBox[
      FractionBox["n", 
       RowBox[{"1", "-", 
        SubscriptBox[
         RowBox[{"(", 
          SuperscriptBox["ns", "2"], ")"}], 
         RowBox[{"lagged", " ", "_y", " ", "coefficient"}]]}]]], "~", 
     RowBox[{"N", "[", 
      RowBox[{"0", ",", "1"}], "]"}]}]}]}], TraditionalForm]], "Equation",
 CellChangeTimes->{{3.5329581361691227`*^9, 3.532958169399152*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell["Breuch Godfrey Test", "Subsubsubsection",
 CellChangeTimes->{{3.5329581765739613`*^9, 3.5329581814124937`*^9}}],

Cell["\<\
This is similar to the woolridge, but you will be regressing the error terms \
on lagged y\[CloseCurlyQuote]s and lagged e\[CloseCurlyQuote]s.\
\>", "Text",
 CellChangeTimes->{{3.532958202005604*^9, 3.532958224943687*^9}}],

Cell["\<\
You will use the F-stat produced by the regression to see if there is any \
explanatory power in that. If there is you have autocorrelation. \
\>", "Text",
 CellChangeTimes->{{3.5329582252271833`*^9, 3.532958247437381*^9}}]
}, Open  ]]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Consequences", "Subsection",
 CellChangeTimes->{{3.532552113853489*^9, 3.532552115220457*^9}}],

Cell["They are still unbiased.", "Text",
 CellChangeTimes->{{3.5329576052003736`*^9, 3.5329576076958523`*^9}}],

Cell["They are still consistent", "Text",
 CellChangeTimes->{{3.532957607980073*^9, 3.532957612887089*^9}}],

Cell[TextData[{
 "THey are NOT minimum variance. (can be fixed by using the equation ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    SuperscriptBox[
     RowBox[{"(", 
      RowBox[{
       RowBox[{"X", "'"}], 
       SuperscriptBox["\[CapitalSigma]", 
        RowBox[{"-", "1"}]], "X"}], ")"}], 
     RowBox[{"-", "1"}]], 
    RowBox[{"X", "'"}], 
    SuperscriptBox["\[CapitalSigma]", 
     RowBox[{"-", "1"}]], "Y"}], TraditionalForm]],
  FormatType->"TraditionalForm"],
 " and then OLS = MLE = GLS)"
}], "Text",
 CellChangeTimes->{{3.532957622756658*^9, 3.5329576713304157`*^9}}],

Cell["They are NOT BLUE", "Text",
 CellChangeTimes->{{3.532957624323613*^9, 3.5329576340670443`*^9}}],

Cell[TextData[{
 "The t and F stats are not valid. (fix using ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    SuperscriptBox[
     RowBox[{"(", 
      RowBox[{
       RowBox[{"X", "'"}], "X"}], ")"}], 
     RowBox[{"-", "1"}]], 
    RowBox[{"X", "'"}], 
    SuperscriptBox["\[CapitalSigma]", 
     RowBox[{"-", "1"}]], 
    SuperscriptBox[
     RowBox[{"X", "(", 
      RowBox[{
       RowBox[{"X", "'"}], "X"}], ")"}], 
     RowBox[{"-", "1"}]]}], TraditionalForm]],
  FormatType->"TraditionalForm"]
}], "Text",
 CellChangeTimes->{{3.532957675564571*^9, 3.5329577014541817`*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell["Fixes", "Subsection",
 CellChangeTimes->{{3.532552117012527*^9, 3.532552117564412*^9}}],

Cell[CellGroupData[{

Cell["Transforming the model", "Subsubsection",
 CellChangeTimes->{{3.532958267331244*^9, 3.5329582718938627`*^9}}],

Cell["\<\
You can change the model using various transformation matricies T that have \
the characteristic that TX = I and that T\[CloseCurlyQuote]T = \
\[CapitalSigma].\
\>", "Text",
 CellChangeTimes->{{3.532958399156509*^9, 3.532958450661421*^9}}],

Cell[TextData[{
 "There are two matricies you could use: ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    SubscriptBox["T", "1"], " ", "=", " ", 
    RowBox[{"(", GridBox[{
       {
        RowBox[{"-", "\[Rho]"}], "0", "...", "0"},
       {"0", 
        RowBox[{"-", "\[Rho]"}], "...", "0"},
       {"...", "...", "...", "..."},
       {"0", "0", "0", 
        RowBox[{"-", "\[Rho]"}]}
      }], ")"}]}], TraditionalForm]],
  FormatType->"TraditionalForm"],
 " or ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    SubscriptBox["T", "2"], " ", "=", " ", 
    RowBox[{"(", GridBox[{
       {
        SqrtBox[
         RowBox[{"1", "-", 
          SuperscriptBox["\[Rho]", "2"]}]], "0", "...", "0"},
       {
        SubscriptBox["T", "1"], "\[SpanFromLeft]", "\[SpanFromLeft]", 
        "\[SpanFromLeft]"},
       {"\[SpanFromAbove]", "\[SpanFromBoth]", "\[SpanFromBoth]", 
        "\[SpanFromBoth]"},
       {"\[SpanFromAbove]", "\[SpanFromBoth]", "\[SpanFromBoth]", 
        "\[SpanFromBoth]"}
      }], ")"}]}], TraditionalForm]],
  FormatType->"TraditionalForm"]
}], "Text",
 CellChangeTimes->{{3.5329584515266657`*^9, 3.532958574924466*^9}}],

Cell[TextData[{
 "You can do this in STATA using the commands",
 StyleBox[" prais y x\[CloseCurlyQuote]s, corc",
  FontWeight->"Bold"],
 " (for ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    SubscriptBox["T", "1"], ")"}], TraditionalForm]],
  FormatType->"TraditionalForm"],
 " and",
 StyleBox[" prais y x\[CloseCurlyQuote]s",
  FontWeight->"Bold"],
 " (for ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    SubscriptBox["T", "2"], ")"}], TraditionalForm]],
  FormatType->"TraditionalForm"]
}], "Text",
 CellChangeTimes->{{3.532958578397204*^9, 3.53295861492208*^9}}],

Cell[TextData[{
 "The difference between ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    SubscriptBox["T", "1"], " ", "and", " ", 
    SubscriptBox["T", "2"], " ", "is", " ", "that", " ", "you", " "}], 
   TraditionalForm]],
  FormatType->"TraditionalForm"],
 "use one less observation than you have if you use ",
 Cell[BoxData[
  FormBox[
   SubscriptBox["T", "1"], TraditionalForm]],
  FormatType->"TraditionalForm"],
 ", but ",
 Cell[BoxData[
  FormBox[
   SubscriptBox["T", "2"], TraditionalForm]],
  FormatType->"TraditionalForm"],
 " doesn\[CloseCurlyQuote]t drop one. "
}], "Text",
 CellChangeTimes->{{3.5329586229530888`*^9, 3.5329586548831863`*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell["Newey", "Subsubsection",
 CellChangeTimes->{{3.532958677800362*^9, 3.5329586793507357`*^9}}],

Cell[TextData[{
 "If you use the command ",
 StyleBox["newey y x\[CloseCurlyQuote]s, lag(.75 ",
  FontWeight->"Bold"],
 Cell[BoxData[
  FormBox[
   RowBox[{
    SuperscriptBox["n", 
     RowBox[{"1", "/", "3"}]], ")"}], TraditionalForm]],
  FormatType->"TraditionalForm"],
 " you will correct the t and F stats, but not get rid of the \
Autocorrelation. It is like using the robust command in the case of \
heteroskedasticity in that is just makes STATA use the correct formula for \
the standard errors. "
}], "Text",
 CellChangeTimes->{{3.532958680663527*^9, 3.53295876691354*^9}}]
}, Open  ]]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["A.5 Non-stoichastic X\[CloseCurlyQuote]s", "Section",
 CellChangeTimes->{{3.532552093181164*^9, 3.532552100634286*^9}}],

Cell["\<\
Of all the assumptions that could be viotlated, a violoation of A.5 has the \
most severe consequences. \
\>", "Text",
 CellChangeTimes->{{3.532953971738564*^9, 3.5329540003652554`*^9}, {
  3.532958834114442*^9, 3.532958834116509*^9}}],

Cell["\<\
This is the result when the independent variables are correlated with the \
error terms. \
\>", "Text",
 CellChangeTimes->{{3.5329588348025293`*^9, 3.532958851947566*^9}}],

Cell["\<\
This is common when you have endogeneous regressors. \
\>", "Text",
 CellChangeTimes->{{3.532958852161952*^9, 3.532958859354199*^9}}],

Cell[CellGroupData[{

Cell["Causes", "Subsection",
 CellChangeTimes->{{3.532552106646029*^9, 3.5325521075380163`*^9}}],

Cell["Endogenous regressors", "Text",
 CellChangeTimes->{{3.532958913390864*^9, 3.532958917552326*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell["Tests", "Subsection",
 CellChangeTimes->{{3.532552110959787*^9, 3.532552111800817*^9}}],

Cell[CellGroupData[{

Cell["Hausman test", "Subsubsection",
 CellChangeTimes->{{3.5329588180045547`*^9, 3.53295881939499*^9}}],

Cell[TextData[{
 "You will have to do a normal OLS regression then tell it the command ",
 StyleBox["est store OLS",
  FontWeight->"Bold"],
 "."
}], "Text",
 CellChangeTimes->{{3.5329589191174583`*^9, 3.532958937698822*^9}}],

Cell[TextData[{
 "Then do",
 StyleBox[" ivregress 2sls y (x\[CloseCurlyQuote]s=instruments) ",
  FontWeight->"Bold"],
 " and then ",
 StyleBox["est store iv",
  FontWeight->"Bold"]
}], "Text",
 CellChangeTimes->{{3.5329589379280643`*^9, 3.532958985631297*^9}}],

Cell[TextData[{
 "Then the last test is you need to say ",
 StyleBox["hausman iv ols",
  FontWeight->"Bold"]
}], "Text",
 CellChangeTimes->{{3.532958963143138*^9, 3.5329589959691896`*^9}}],

Cell["\<\
The purpose of this is to do a regression using OLS and then do one using a \
two-step process for adding the instrumental variables and then comparing the \
two to see if there is a significant difference. \
\>", "Text",
 CellChangeTimes->{{3.532958996246132*^9, 3.5329590453331213`*^9}}]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Consequences", "Subsection",
 CellChangeTimes->{{3.532552113853489*^9, 3.532552115220457*^9}}],

Cell["They are biased.", "Text",
 CellChangeTimes->{{3.532958780137064*^9, 3.53295878573521*^9}}],

Cell["They ARE inconsistent", "Text",
 CellChangeTimes->{{3.532958786611835*^9, 3.532958792887639*^9}}],

Cell["They are NOT BLUE", "Text",
 CellChangeTimes->{{3.532958793174203*^9, 3.5329588001501007`*^9}}],

Cell["\<\
They are NOT minimum variance. \
\>", "Text",
 CellChangeTimes->{{3.532958801187655*^9, 3.5329588058769197`*^9}}]
}, Open  ]],

Cell["Fixes", "Subsection",
 CellChangeTimes->{{3.532552117012527*^9, 3.532552117564412*^9}}]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["4", "BookChapterNumber",
 CellChangeTimes->{{3.532552275828395*^9, 3.5325522768263493`*^9}}],

Cell["Extra Material", "BookChapterTitle",
 CellChangeTimes->{{3.5325522796788273`*^9, 3.532552282874032*^9}}],

Cell[CellGroupData[{

Cell["Definitions", "Section",
 CellChangeTimes->{{3.532540805077804*^9, 3.532540807035548*^9}}],

Cell[CellGroupData[{

Cell[TextData[{
 StyleBox["Adjusted ",
  FontWeight->"Bold"],
 Cell[BoxData[
  FormBox[
   StyleBox[
    SuperscriptBox["R", "2"],
    FontWeight->"Bold"], TraditionalForm]],
  FormatType->"TraditionalForm"],
 StyleBox[" ",
  FontWeight->"Bold"],
 Cell[BoxData[
  FormBox[
   RowBox[{":", 
    SuperscriptBox[
     OverscriptBox["R", "-"], "2"]}], TraditionalForm]],
  FormatType->"TraditionalForm"],
 " = 1 ",
 Cell[BoxData[
  FormBox[
   FractionBox[
    RowBox[{"SSE", "/", 
     RowBox[{"(", 
      RowBox[{"n", "-", "k"}], ")"}]}], 
    RowBox[{"SST", "/", " ", 
     RowBox[{"(", 
      RowBox[{"n", "-", "1"}], ")"}]}]], TraditionalForm]],
  FormatType->"TraditionalForm"],
 ".  The great thing about this is that with the addition new independent \
variables, the adjusted r-squared will only increase in value if the \
t-statistic associated with the new variable is greater than 1 in absolute \
value (it is significant)"
}], "Item1",
 CellChangeTimes->{{3.5327052296397953`*^9, 3.532705281227202*^9}, {
  3.532705322626136*^9, 3.532705357873044*^9}, {3.5327055342594547`*^9, 
  3.532705557764429*^9}, {3.532705591270494*^9, 3.532705591277171*^9}}],

Cell[TextData[{
 StyleBox["Asomptotic Distribution",
  FontWeight->"Bold"],
 ":  ",
 Cell[BoxData[
  FormBox[
   RowBox[{"f", "(", 
    OverscriptBox["\[Theta]", "^"], ")"}], TraditionalForm]],
  FormatType->"TraditionalForm"],
 " is the asmptotic distribution of ",
 Cell[BoxData[
  FormBox[
   OverscriptBox["\[Theta]", "^"], TraditionalForm]],
  FormatType->"TraditionalForm"],
 " if the exact distribution of ",
 Cell[BoxData[
  FormBox[
   OverscriptBox["\[Theta]", "^"], TraditionalForm]],
  FormatType->"TraditionalForm"],
 " approaches ",
 Cell[BoxData[
  FormBox[
   RowBox[{"f", "(", 
    OverscriptBox["\[Theta]", "^"], ")"}], TraditionalForm]],
  FormatType->"TraditionalForm"],
 " as the sample size increases. The actual distribution can be equal to the \
asymptotic distribution, but doesn\[CloseCurlyQuote]t have to be. This is \
pretty much like the central limit theorem saying that as n gets bigger the \
distribution converges to what it should be. "
}], "Item1",
 CellChangeTimes->{{3.5327052296397953`*^9, 3.532705281227202*^9}, {
  3.532705322626136*^9, 3.532705357873044*^9}, {3.5327055342594547`*^9, 
  3.532705557764429*^9}, {3.532705591270494*^9, 3.532705728215363*^9}}],

Cell[TextData[{
 StyleBox["Autocorrelation",
  FontWeight->"Bold"],
 ": Autocorrelation often exists in time-series data if the error terms in \
different time periods are correlated. This makes OLS \[NotEqual] BLUE. "
}], "Item1",
 CellChangeTimes->{{3.532705728807805*^9, 3.5327058027125483`*^9}, {
  3.532706978999278*^9, 3.532706979647068*^9}}],

Cell[TextData[{
 StyleBox["Auto-regressive models",
  FontWeight->"Bold"],
 ": An auto-regresive model is one that has lagged dependent variables. "
}], "Item1",
 CellChangeTimes->{{3.532705803093564*^9, 3.5327058430316477`*^9}}],

Cell[TextData[{
 StyleBox["ANOVA",
  FontWeight->"Bold"],
 ": ANOVA stands for analysis of variance and is usually represented in a \
table in this way:"
}], "Item1",
 CellChangeTimes->{{3.532705843924336*^9, 3.532705884078747*^9}}]
}, Open  ]],

Cell[TextData[Cell[BoxData[
 FormBox[GridBox[{
    {
     RowBox[{"Source", " ", "of", " ", "Variation"}], "SS_", 
     RowBox[{"d", ".", "f", "."}], "MSE"},
    {
     RowBox[{"Model", "\[IndentingNewLine]", "Error"}], 
     RowBox[{"SSR", "\[IndentingNewLine]", "SSE"}], 
     RowBox[{
      RowBox[{"K", "-", "1"}], "\[IndentingNewLine]", 
      RowBox[{"n", "-", "K"}]}], 
     RowBox[{
      RowBox[{"SSR", "/", 
       RowBox[{"(", 
        RowBox[{"K", "-", "1"}], ")"}]}], "\[IndentingNewLine]", 
      RowBox[{"SSE", "/", 
       RowBox[{"(", 
        RowBox[{"n", "-", "K"}], ")"}]}]}]},
    {"Total", "SST", 
     RowBox[{"n", "-", "1"}], 
     RowBox[{
      RowBox[{"SST", "/", "n"}], "-", "1"}]}
   }], TraditionalForm]]]], "Text",
 CellChangeTimes->{{3.52794924853334*^9, 3.527949323720332*^9}},
 TextAlignment->Center,
 TextJustification->0.],

Cell[CellGroupData[{

Cell[TextData[{
 StyleBox["Binary or Dummy Variable",
  FontWeight->"Bold"],
 ": Variables that can only have values of 0 or 1 can be used to model \
qualitative characteristics (gender, race...). If you have a qualitative \
characteristic is associated with k categories, you can only include k-1 \
binary variables or you could include k variables and no intercept term. If \
you include k binary variables and an intercept you fall into the dummy \
variable trap. "
}], "Item1",
 CellChangeTimes->{{3.532705913988635*^9, 3.532706050484151*^9}}],

Cell[TextData[{
 StyleBox["Confidence Intervals",
  FontWeight->"Bold"],
 ": A rule is used to construct a random interval so that a certain \
percentage of all data sets, determined by the confidence level, yields an \
interval that contains the population value. Essentially when you are \
estimating the value of something you can\[CloseCurlyQuote]t get it perfect. \
A confidence interval is a range of values which we can say we are x % \
confident that the true value lies in the range. "
}], "Item1",
 CellChangeTimes->{{3.532706060830546*^9, 3.532706132464402*^9}}],

Cell[TextData[{
 StyleBox["Consistent Estimator",
  FontWeight->"Bold"],
 ":p ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{
     RowBox[{
      SubscriptBox["lim", 
       RowBox[{"n", " ", "\[Rule]", " ", "\[Infinity]"}]], 
      RowBox[{"(", 
       OverscriptBox["\[Theta]", "^"], ")"}]}], " ", "=", " ", "\[Theta]"}], 
    " ", ",", " ", 
    RowBox[{"or", " ", 
     RowBox[{"bias", "(", 
      OverscriptBox["\[Theta]", "^"], ")"}], " "}]}], TraditionalForm]],
  FormatType->"TraditionalForm"],
 "\[Rule]0 and the var ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{"(", 
     OverscriptBox["\[Theta]", "^"], ")"}], " ", "\[Rule]", " ", "0", " "}], 
   TraditionalForm]],
  FormatType->"TraditionalForm"],
 " as n\[Rule] \[Infinity]."
}], "Item1",
 CellChangeTimes->{{3.5327061335566397`*^9, 3.5327062271525497`*^9}}],

Cell[TextData[{
 StyleBox["Cross Sectional-Data",
  FontWeight->"Bold"],
 ": This is a data set corresponding to a single point in time. "
}], "Item1",
 CellChangeTimes->{{3.532706227521975*^9, 3.532706259308823*^9}}],

Cell[TextData[{
 StyleBox["Distributed Lag Models",
  FontWeight->"Bold"],
 ": A time series regression model which includes lagged values of the \
explanatory variable. Koyck and polynomial distributive lag (PDL) \
specifiactions are used to help with multicolinearity. "
}], "Item1",
 CellChangeTimes->{{3.532706259560905*^9, 3.5327063115317373`*^9}}],

Cell[TextData[{
 StyleBox["Dummy Variable Trap",
  FontWeight->"Bold"],
 ": This happens when you have a binary variable with k categories and you \
include k binary variables and an intercept term in a regression. "
}], "Item1",
 CellChangeTimes->{{3.5327063118959827`*^9, 3.532706350626265*^9}}],

Cell[TextData[{
 StyleBox["Efficient Estimator",
  FontWeight->"Bold"],
 ": An estimator is said to be efficient when it is the minimum variance \
unbiased estimator. If A.1-!.5 hold, then OLS is BLUE and efficient. If A.1 \
doesn\[CloseCurlyQuote]t hold OLS is still BLUE, but no efficient because \
there may be a better unibased (nonlinear) estimator with a smaller variance. "
}], "Item1",
 CellChangeTimes->{{3.532706351182808*^9, 3.532706435783621*^9}}],

Cell[TextData[{
 StyleBox["Endogenous Regressor",
  FontWeight->"Bold"],
 ": An endogenous regressor is an \[OpenCurlyDoubleQuote]explanatory\
\[CloseCurlyDoubleQuote] variable that is correlated with the model\
\[CloseCurlyQuote]s error term. This means there is feedback between the \
dependent variable and the independent variable in question (we always takled \
about salary and education). When there are endogenous regressors the OLS \
estimators are biased and inconsistent. "
}], "Item1",
 CellChangeTimes->{{3.532706351182808*^9, 3.532706534505636*^9}}],

Cell[TextData[{
 StyleBox["F-test",
  FontWeight->"Bold"],
 ": A test stat that can be used to test hypothesis with multiple constraints \
on the parameter estimates. There is an F stat that is normally reported with \
a regresion that tests the null hypothesis that all slope coefficients are \
equal to zero. This is constructed as follows: F = ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{"(", 
     FractionBox[
      RowBox[{
       SuperscriptBox["R", "2"], "/", 
       RowBox[{"(", 
        RowBox[{"k", "-", "1"}], ")"}]}], 
      RowBox[{
       RowBox[{"(", 
        RowBox[{"1", "-", 
         SuperscriptBox["R", "2"]}], ")"}], "/", " ", 
       RowBox[{"(", 
        RowBox[{"n", "-", "k"}], ")"}]}]], ")"}], "~", 
    RowBox[{"F", "(", 
     RowBox[{
      RowBox[{"k", "-", "1"}], ",", 
      RowBox[{"n", "-", "k"}]}], ")"}]}], TraditionalForm]],
  FormatType->"TraditionalForm"]
}], "Item1",
 CellChangeTimes->{{3.532706509578858*^9, 3.5327066386387177`*^9}}],

Cell[TextData[{
 StyleBox["Elasticities",
  FontWeight->"Bold"],
 " associated with different functional forms: Elasticity  = ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    FractionBox[
     RowBox[{"%", "\[CapitalDelta]y"}], 
     RowBox[{"%", "\[CapitalDelta]x"}]], " ", "=", " ", 
    RowBox[{
     FractionBox["dy", "dx"], 
     FractionBox["x", "y"]}]}], TraditionalForm]],
  FormatType->"TraditionalForm"],
 ". Finding percentage changes is done easily in a regression analysis by \
taking the natural log of a variable. For example if you had log(salary) = \
stuff + log(hours) the elasticiy of horus on salary is going to be the \
coefficient in front of log(hours). This is because the log makes it a \
percentage change in..."
}], "Item1",
 CellChangeTimes->{{3.5327066391274767`*^9, 3.532706814130662*^9}}],

Cell[TextData[{
 StyleBox["Gauss Markov Assumptions",
  FontWeight->"Bold"],
 ": These are A.2-A.5. The normality in the error terms (A.1) is not \
included. This leads to the general linear regression model."
}], "Item1",
 CellChangeTimes->{{3.5327068145949707`*^9, 3.532706862108087*^9}}],

Cell[TextData[{
 StyleBox["Hedonic Pricing Model",
  FontWeight->"Bold"],
 ": A hedonic pricing model expresses the price of a good in terms of its \
attributes. They are very common in real estate when you do a regression to \
determine the effect of a bedroom, bathroom, lot size, or square footage on \
the price of the home. "
}], "Item1",
 CellChangeTimes->{{3.5327068636815767`*^9, 3.5327069257876*^9}}],

Cell[TextData[{
 StyleBox["Heteroskedasticity",
  FontWeight->"Bold"],
 ": This is when the error terms do not all have the same value. This is a \
violation of A.3 and makes OLS \[NotEqual]BLUE."
}], "Item1",
 CellChangeTimes->{{3.532706926440126*^9, 3.532706973598949*^9}, {
  3.532707024793108*^9, 3.5327070247973003`*^9}}],

Cell[TextData[{
 StyleBox["Instrumental Variables",
  FontWeight->"Bold"],
 ": If you have endogenous regressors in your model, an instrumental variable \
can be used in its place. The instrumental variable will need to NOT be \
correleted with the dependent variable (that was the problem with the \
endogenous one), but it must be correlated to the endogenous regressor. This \
will allow the model to have the same explanatory characteristics, but avoid \
the biased and inconsistent problems. "
}], "Item1",
 CellChangeTimes->{{3.532707026413732*^9, 3.532707067388234*^9}, {
  3.532707138338591*^9, 3.532707208093045*^9}}],

Cell[TextData[{
 StyleBox["Instrumental Variables Estimators",
  FontWeight->"Bold"],
 ": "
}], "Item1",
 CellChangeTimes->{{3.532707211049177*^9, 3.532707223936469*^9}, {
  3.532707291447317*^9, 3.532707295754339*^9}}],

Cell[TextData[{
 StyleBox["Interaction Terms",
  FontWeight->"Bold"],
 ": A regressor in a model which involves the product of two explanatory \
variables. It results in the marginal impact of one independent variable on \
the dependent variable as it depends on another independent one."
}], "Item1",
 CellChangeTimes->{{3.532707297254869*^9, 3.532707359009178*^9}}],

Cell[TextData[{
 StyleBox["Koyck Distributive Lag Models",
  FontWeight->"Bold"],
 ": A time series regression model that includes lagged values of the \
independent variables. This model assumes that the \[Beta]\[CloseCurlyQuote]s \
associated with an explanatory variable deline geometrically (see above for \
more information)."
}], "Item1",
 CellChangeTimes->{{3.5327073595413733`*^9, 3.532707469750651*^9}}],

Cell[TextData[{
 StyleBox["Kurtosis",
  FontWeight->"Bold"],
 ": The kurtosis is a rough estimate of the pointiness of a distribution as \
well as the thickness of the tails. The kurtosis for the normal distribution \
is 3. "
}], "Item1",
 CellChangeTimes->{{3.5327074703864813`*^9, 3.532707518673542*^9}, {
  3.532707644136012*^9, 3.532707647905857*^9}}],

Cell[TextData[{
 StyleBox["Liklihood Ratio Test",
  FontWeight->"Bold"],
 ": A liklihood ratio test (LR test) can be used to investigate the valitidy \
of a joint hypothesis of coefficietns. It is constructed by estimating the \
constrained model, the unconstrained model and getting log liklihood values \
for both. The test statistic is then constructed in this way: LR = 2  ",
 Cell[BoxData[
  FormBox[
   RowBox[{"(", 
    RowBox[{
     RowBox[{
      RowBox[{"l", "-", "l"}], "*)"}], "~", 
     RowBox[{
      SuperscriptBox["\[Chi]", "2"], "(", "r", ")"}]}]}], TraditionalForm]],
  FormatType->"TraditionalForm"]
}], "Item1",
 CellChangeTimes->{{3.532707649781901*^9, 3.532707744011438*^9}}],

Cell[TextData[{
 StyleBox["Linear Probability Model",
  FontWeight->"Bold"],
 ": This is just a model that has the dependent variable as a binary \
variable. These have problems of the errors not being normally distributed \
(A.1 violated), there will be heteroskedasticity (A.3 is violated), and you \
could get values outside the range [0,1] which just doesn\[CloseCurlyQuote]t \
make sense. "
}], "Item1",
 CellChangeTimes->{{3.532707744771885*^9, 3.5327077767707243`*^9}, {
  3.532707808274357*^9, 3.5327078395057297`*^9}, {3.532707878152451*^9, 
  3.5327079035718412`*^9}}],

Cell[TextData[{
 StyleBox["Logit Model",
  FontWeight->"Bold"],
 ": This is a different model that helps with binary dependent variables \
(doesn\[CloseCurlyQuote]t have the 3 problems listed above). The cool thing \
is that it the values are bounded between 0 and 1.  It is defined as Pr \
(Y=1|x) = ",
 Cell[BoxData[
  RowBox[{
   RowBox[{
    SubsuperscriptBox["\[Integral]", 
     RowBox[{"-", "\[Infinity]"}], 
     RowBox[{
      SubscriptBox["X", "t"], "\[Beta]"}]], 
    RowBox[{"f", 
     RowBox[{"(", "s", ")"}], 
     RowBox[{"\[DifferentialD]", "s"}]}]}], " ", "=", " ", 
   RowBox[{"F", 
    RowBox[{"(", 
     RowBox[{
      SubscriptBox["X", "t"], "\[Beta]"}], ")"}]}]}]]],
 " where f(s) is the log-logistic pdf. The marginal effect are given by ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    FractionBox[
     RowBox[{
      RowBox[{"\[PartialD]", "Pr"}], " ", 
      RowBox[{"(", 
       RowBox[{"Y", "=", 
        RowBox[{"1", "|", "x"}]}], ")"}]}], 
     RowBox[{"\[PartialD]", 
      SubscriptBox["X", "i"]}]], " ", "=", " ", 
    RowBox[{
     SubscriptBox["\[Beta]", "i"], 
     RowBox[{"f", "(", 
      RowBox[{
       SubscriptBox["X", "t"], "\[Beta]"}], ")"}]}]}], TraditionalForm]],
  FormatType->"TraditionalForm"],
 " (STATA only gives you ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    SubscriptBox["\[Beta]", "i"], " ", "normally"}], TraditionalForm]],
  FormatType->"TraditionalForm"],
 ")."
}], "Item1",
 CellChangeTimes->{{3.5327079040716248`*^9, 3.532707930263109*^9}, {
  3.532707987629807*^9, 3.532707998925414*^9}, {3.532708346494524*^9, 
  3.53270834941296*^9}, {3.532708529465061*^9, 3.532708534648479*^9}, {
  3.532708580375894*^9, 3.532708735517089*^9}}],

Cell[TextData[{
 StyleBox["Multicolinearity",
  FontWeight->"Bold"],
 ": Multicolinearity reers to non-zero correlations between the explanatory \
variables in a regression model. Increased multicolinearity reduces accuracy \
of parameter estimates. If you see a large F stat and small t stats you \
usually have multicolinearity. "
}], "Item1",
 CellChangeTimes->{{3.532708736739946*^9, 3.5327088095660067`*^9}}],

Cell[TextData[{
 StyleBox["Normal Equations",
  FontWeight->"Bold"],
 ": The normal equations are the necessary conditions associated with \
minimizing hte SSE in a linear ergression model. X\[CloseCurlyQuote]X\[Beta] \
= X\[CloseCurlyQuote]Y and can also be written as X\[CloseCurlyQuote]e =0 \
where e represents the estimated arrors. X\[CloseCurlyQuote]e=0 implies that \
teh y\[CloseCurlyQuote]s and e\[CloseCurlyQuote]s are orthogonal. "
}], "Item1",
 CellChangeTimes->{{3.53270881013092*^9, 3.5327088124262238`*^9}, {
  3.5327090961075077`*^9, 3.532709170712221*^9}, {3.532709652453706*^9, 
  3.5327096524557467`*^9}}],

Cell[TextData[{
 StyleBox["Panel Data",
  FontWeight->"Bold"],
 ": Panel data is a data set made from cross-sections over time. This means \
it is both time-series and cross-sectional. The panel is said to be balanced \
if there is the same number of observations for each point in time. "
}], "Item1",
 CellChangeTimes->{{3.532709653085767*^9, 3.532709735149519*^9}}],

Cell[TextData[{
 StyleBox["Polynomial Distributive Lag (PDL) models",
  FontWeight->"Bold"],
 ": When you have time-series data and want to include lagged independent \
variables you can model their collective effect using a polynomial. This \
specification can be tested (to see if it is a good idea) by doing a Chow or \
LR test on the mdoel including the PDL and the normal OLS model before that. \
"
}], "Item1",
 CellChangeTimes->{{3.532709171097316*^9, 3.532709179681341*^9}, {
  3.53270923604808*^9, 3.532709262679955*^9}, {3.532709603312665*^9, 
  3.532709645119441*^9}, {3.532709752205814*^9, 3.532709752208897*^9}}],

Cell[TextData[{
 StyleBox["Probit Model",
  FontWeight->"Bold"],
 ": This is a the same as the logit model with one difference (the function \
f(s)). The cool thing is that it the values are bounded between 0 and 1.  It \
is defined as Pr (Y=1|x) = ",
 Cell[BoxData[
  RowBox[{
   RowBox[{
    SubsuperscriptBox["\[Integral]", 
     RowBox[{"-", "\[Infinity]"}], 
     RowBox[{
      SubscriptBox["X", "t"], "\[Beta]"}]], 
    RowBox[{"f", 
     RowBox[{"(", "s", ")"}], 
     RowBox[{"\[DifferentialD]", "s"}]}]}], " ", "=", " ", 
   RowBox[{"F", 
    RowBox[{"(", 
     RowBox[{
      SubscriptBox["X", "t"], "\[Beta]"}], ")"}]}]}]]],
 " where f(s) is the standard normal pdf. The marginal effect are given by ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    FractionBox[
     RowBox[{
      RowBox[{"\[PartialD]", "Pr"}], " ", 
      RowBox[{"(", 
       RowBox[{"Y", "=", 
        RowBox[{"1", "|", "x"}]}], ")"}]}], 
     RowBox[{"\[PartialD]", 
      SubscriptBox["X", "i"]}]], " ", "=", " ", 
    RowBox[{
     SubscriptBox["\[Beta]", "i"], 
     RowBox[{"f", "(", 
      RowBox[{
       SubscriptBox["X", "t"], "\[Beta]"}], ")"}]}]}], TraditionalForm]],
  FormatType->"TraditionalForm"],
 " (STATA only gives you ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    SubscriptBox["\[Beta]", "i"], " ", "normally"}], TraditionalForm]],
  FormatType->"TraditionalForm"],
 ")."
}], "Item1",
 CellChangeTimes->{{3.532709752531551*^9, 3.532709812576994*^9}}],

Cell[TextData[{
 StyleBox["P-value",
  FontWeight->"Bold"],
 ": When you preform a hypothesis test there will be a certain probability \
associated with the chances of being greater than the test-statistic \
(according to a certain distribution). "
}], "Item1",
 CellChangeTimes->{{3.532709813161998*^9, 3.5327098849841633`*^9}, {
  3.532709937519487*^9, 3.532709967728297*^9}, {3.5327100062054167`*^9, 
  3.532710006208248*^9}}],

Cell[TextData[{
 StyleBox["Qualitative Response Model",
  FontWeight->"Bold"],
 ": A model for binary dependent variables, where the predictied \
probabilities are constrained from (0,1). The Logit and Probit models are \
example. More genearally, you can construct a QRM using any valid pdf as the \
function f(s).  See the distributions and marginal effects described under \
Logit Model or Probit Model"
}], "Item1",
 CellChangeTimes->{{3.5327100065271273`*^9, 3.532710104951569*^9}}],

Cell[TextData[{
 Cell[BoxData[
  FormBox[
   SuperscriptBox["R", "2"], TraditionalForm]],
  FormatType->"TraditionalForm",
  FontWeight->"Bold"],
 StyleBox[" (coefficient of determination)",
  FontWeight->"Bold"],
 ": ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    SuperscriptBox["R", "2"], " ", "=", " ", 
    RowBox[{
     FractionBox["SSR", "SST"], " ", "=", " ", 
     RowBox[{"1", " ", "-", " ", 
      FractionBox["SSE", "SST"]}]}]}], TraditionalForm]],
  FormatType->"TraditionalForm"],
 ". The coefficient of determination for an OLS regression is a value between \
0 and 1 that gives a general idea of the \[OpenCurlyDoubleQuote]goodness of \
fit\[CloseCurlyDoubleQuote] in the model. "
}], "Item1",
 CellChangeTimes->{{3.532710106787919*^9, 3.53271020559483*^9}}],

Cell[TextData[{
 StyleBox["Reduced Form",
  FontWeight->"Bold"],
 ": The reduced form representation of a structural model expresses each \
dependent variable in terms of explanatory variables endogenous, current \
exogenous, and lagged exogenous variables). "
}], "Item1",
 CellChangeTimes->{{3.532710207009572*^9, 3.5327102607400303`*^9}}],

Cell[TextData[{
 StyleBox["Skewness",
  FontWeight->"Bold"],
 ": Definition: E ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    SuperscriptBox[
     RowBox[{"(", 
      RowBox[{"Y", "-", "\[Mu]"}], ")"}], "3"], "/", 
    RowBox[{
     SuperscriptBox["\[Sigma]", "3"], "."}]}], TraditionalForm]],
  FormatType->"TraditionalForm"],
 " The skewness is a measure of symmetry (if it equals 0 it is perfectly \
symetric). Positive skewness is associated with a long thick tail to the \
right . If the skewness is negative the long thick tail will be on the left. \
"
}], "Item1",
 CellChangeTimes->{{3.53271027893596*^9, 3.532710357513854*^9}, {
  3.532710411941197*^9, 3.5327104275971117`*^9}, {3.5327105807866983`*^9, 
  3.5327105820864983`*^9}}],

Cell[TextData[{
 StyleBox["Structural Representation of an Econometric Model",
  FontWeight->"Bold"],
 ": This is a mathematical representatio of the relationship between economic \
variables imlied by economic theory and may include endovenoug regressors \
along with exogenous variables on the right hand side of the equations. "
}], "Item1",
 CellChangeTimes->{{3.532710595096633*^9, 3.53271067906609*^9}}],

Cell[TextData[{
 StyleBox["Time-Series Data",
  FontWeight->"Bold"],
 ":  Data collected regularly over a period of time."
}], "Item1",
 CellChangeTimes->{{3.532710683558066*^9, 3.532710699601763*^9}}],

Cell[TextData[{
 StyleBox["Unbiased Estimator",
  FontWeight->"Bold"],
 ": ",
 Cell[BoxData[
  FormBox[
   OverscriptBox["\[Theta]", "^"], TraditionalForm]],
  FormatType->"TraditionalForm"],
 " is an unbiased estimator of \[Theta] if E ",
 Cell[BoxData[
  FormBox[
   RowBox[{"(", 
    OverscriptBox["\[Theta]", "^"], ")"}], TraditionalForm]],
  FormatType->"TraditionalForm"],
 "= \[Theta]."
}], "Item1",
 CellChangeTimes->{{3.532710703390081*^9, 3.532710764931466*^9}}],

Cell[TextData[{
 StyleBox["Useful Theorem",
  FontWeight->"Bold"],
 ":  If ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{
     RowBox[{"y", "~", 
      RowBox[{"N", "[", 
       RowBox[{
        SubscriptBox["\[Mu]", "y"], ",", 
        SubscriptBox["\[CapitalSigma]", "y"]}], "]"}]}], " ", "then", " ", 
     "Z"}], " ", "=", " ", 
    RowBox[{"Ay", "~", 
     RowBox[{"N", "[", 
      RowBox[{
       RowBox[{
        SubscriptBox["\[Mu]", "z"], " ", "=", " ", 
        SubscriptBox["A\[Mu]", "y"]}], ",", " ", 
       RowBox[{
        SubscriptBox["\[CapitalSigma]", "Z"], " ", "=", " ", 
        RowBox[{
         SubscriptBox["A\[CapitalSigma]", "y"], 
         SuperscriptBox["A", "T"]}]}]}], "]"}]}]}], TraditionalForm]]],
 " where A is a matrix of constant. Proof: "
}], "Item1",
 CellChangeTimes->{{3.5327107655325203`*^9, 3.5327108168927917`*^9}}]
}, Open  ]],

Cell[BoxData[{
 FormBox[
  RowBox[{
   RowBox[{"E", "(", "z", ")"}], " ", "=", " ", 
   RowBox[{
    RowBox[{"E", "(", "Ay", ")"}], " ", "=", " ", 
    RowBox[{
     RowBox[{"A", " ", 
      RowBox[{"E", "(", "y", ")"}]}], " ", "=", " ", 
     SubscriptBox["A\[Mu]", "y"]}]}]}], 
  TraditionalForm], "\[IndentingNewLine]", 
 FormBox[
  RowBox[{
   RowBox[{"Var", " ", 
    RowBox[{"(", "Z", ")"}]}], " ", "=", " ", 
   RowBox[{"E", "(", 
    RowBox[{
     RowBox[{
      RowBox[{"(", 
       RowBox[{"z", "-", 
        RowBox[{"E", "(", "z", ")"}]}], ")"}], 
      RowBox[{"(", 
       RowBox[{"z", " ", "-", " ", 
        RowBox[{"E", "(", "z", ")"}]}], ")"}]}], "\[IndentingNewLine]", "=", 
     " ", 
     RowBox[{
      RowBox[{"E", "[", 
       RowBox[{
        RowBox[{"(", 
         RowBox[{"Ay", " ", "-", " ", 
          SubscriptBox["A\[Mu]", "y"]}], ")"}], " ", 
        SuperscriptBox[
         RowBox[{"(", 
          RowBox[{"Ay", " ", "-", 
           SubscriptBox["A\[Mu]", "y"]}], ")"}], "T"]}], "]"}], 
      "\[IndentingNewLine]", "=", " ", 
      RowBox[{
       RowBox[{"A", " ", 
        RowBox[{"E", "[", 
         RowBox[{
          RowBox[{"(", 
           RowBox[{"y", " ", "-", " ", 
            SubscriptBox["\[Mu]", "y"]}], ")"}], 
          RowBox[{"(", 
           RowBox[{"y", "-", " ", 
            SubscriptBox["\[Mu]", "y"]}], ")"}]}], "]"}], 
        SuperscriptBox["A", "T"]}], "\[IndentingNewLine]", "=", " ", 
       RowBox[{"A", " ", 
        SubscriptBox["\[CapitalSigma]", "y"], 
        SuperscriptBox["A", "T"]}]}]}]}]}]}], TraditionalForm]}], "Text",
 CellChangeTimes->{3.532710817314476*^9},
 TextAlignment->Center,
 TextJustification->0.],

Cell[TextData[{
 StyleBox["Variance of the Prediction (or of the forecast error)",
  FontWeight->"Bold"],
 ": "
}], "Item1",
 CellChangeTimes->{{3.532710829684402*^9, 3.5327108734371147`*^9}}],

Cell[BoxData[
 GraphicsBox[
  TagBox[RasterBox[CompressedData["
1:eJzs/VlsFMcXx4+W/vc+/F9+rzzx8ueBBx54QEJCQkhcJIQQQog/CkIIBH8i
ECDgslxCgiAQIGEJARIMBEwwwQETJzbBgMEYGwM2i42NbbzhHe/bePfYnvHM
3K7umZ7unqruntXD+Pt5APdMd9WpU6dOna5t/q9N/9//e8v/QQjZ938K//zf
/8+B/8/evf/Pd6v+38LFou/+f5s3/b+EP5YK398Q/qB/uwAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAATjFutE+HOw2612sKdh5eJ0cGhMUeYEjelrnCUN9g0jbUyMTZm
Z18EgSB2SNIxwRivagIqSwBWpC6rMtcIaoGFX7YTIVkj4XfMoZAkUvVkbFyh
cSEGRdOKEVbPGQnkAvArMsJ2N8kt302ovDmYSjgtb88sIRLLjib/dzG1zDnZ
Mpmir/zONwsImZNYHb48rJ9zflknKOZ6efjyUGZXfn3bloPbl08nZPbP+UMh
TduUusJR3qDTNNSKrePD3cOL3DmoLoJkIPcoIafejgSfki49xX/smUvI+rQW
zReBlSUwK/KWVZtrhLTAwm/biYCskfA7AUkSkXoyNK7QuBCjomnFCKfnjAjK
Ahy/9h2jIifB7iax5bsJpTcHUwlb0W+EfJvVQ18UnUMVNzcQcvXj5L32jnz6
1OrH7dWJcwJt6aZz6s35LkINy/bhIjmTb6V5Pv+WLE2uD3UGOuryqsPf8vIV
GXiaSsxpxZp/xpuD6iIoeov/TS3tD0FCRuZWHs+KbF0BlCVgK1KWVZ2rRgvG
TcfPZqybgp+2E7Ia0yMIv+MleCVpJQl/2fWMKzTN3YtO0bRifAq35wxNZfFR
F2hJwkN2RYbE7vzBnEWFVzmh8+ZgClF+nZB4hdWMFvwyeZGtoz55lV8m3Jmx
I7CW7kdO9uK4CDUsWhdhzYirLqU6/CsvX5GBp6nGpFZUt4Vdk35ibG71fy9h
R7Z+lyU0ZeenYlwWv5uxbgqRa3/mCdjveAleSaGSxB/MmUVoqkynaFoxwt3e
Q1RZfEwWIMK1bY5oUQ4ACqjVkCW/FQ16Phgveq9YjWBtfpd2OzHlZe2Ad3HP
xGDdu4oeIQjuKMl+mlvbLw73Dje/z3r6un5QGRTbLeVPb/9xM62wY5yV9Wjz
y4Sz5xNzqso+1gwLd7en7xFkOZlRX/+5paWxQaCljz5o7RYv2gdlEZzWlsKM
lJTM8vKHu5Qt3TdDe1/V6wqLyznSlJ/x+M1naVpFmZNllCGKCnvJJbFhOYeb
CjIz85ut8jeOwbqc5OtXb6S+bpISHuuurZCo66ES2Cz19KK2e8xIH87hroaG
zFOEnMqkRR2wM7Xv1gRTLcyS6qvLU0C1Ovwor68i/U4zAK0wjdIgstU+Mtpd
/0mkuc8+2l0n/f2p0SKIMG5poH+3DFBTnhiofV3W5TLSsN1Sln7zytW7Lxq0
1sPUko8ihcg2eakY2QqCpj/IrrB4l5VpyqLXqBj6YmQlSjBQk50UH5+c2+St
CmVZ1bl6v/EpiymbYMis0+KCsx1VKey9FS8/9riG6nIe5bcp1n2GuCEx/I42
Y3V5TZmE/5KEwlplFWkbGacxhqDK1BgUTSuGjSmWiRoJortQw2pLbCfFTJ6l
V5URB93f6YhpVBuGFmWuuSuV39Cm00ky3ZXKF+l11QDIOKoTF4lLbKdtTqwc
Ui2wHcz9gcw7lPqhsuDPbcINB7J7Bbv6/PzMWuEiLu3ZsY3r1y2dIfz988vS
5K8XLF+zbBYh0+OK3R1I55MdZMv13ILMX9cI9xzM6VPnO1FymWxKKGyse31l
rTh9NFz54MK+pYSsO3L16u286up7BzxrtUa7y+7uJmRreof45HjVnyum70ku
+1yTdUa4X27pPhmO1D76YYXw57nE2+umz5w5U/jzq9Qmlzqn992+oqgR3fT5
pJTtS5YsmSuksSFNnHlx1t5ZTDbcKKivenhkNiEXPwjlHm9/IYq0IaGkl6rB
3l92a9PMo5m0hevrY6Ix++rVI+skoa4+qBxma9/CVguvpHrqktGqw3x5tU/6
nab/WmGqRYQf2bLtOGUXtfofcnonxjrfXFot/L0jscwi1Jqt59lRsvDUa8tI
Y9bJ1W5t62mYLkabfTqvb7Q9/Rv3evW4Ym+/r9UFy3CkyHb1iRNb3QmQub8V
WX3LYtSoNPoaYmblsmTtJ8tOpX8ofnhiASE7M4Sea1RRVnWuqm80ZTFlEwyZ
dVtcELajlrX63kG6f+D0uXO0ulTLBUPZkHzE8M14UFNeEybhtySjobFWboth
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
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AABgakIAAAAAAEBkmewAMGaBbmWgChC1wDjBVAM2D2IbWHj4gG5loAoQtcA4
wVQDNg9iG1h4+IBuZaAKELX4Y5zWztpP1e3DYZTmy5IDfJmEzCE7h1obesY9
VxOjI2MToUk4yrD1fm4ddE62FMA0CDnCB0+3jr6ylNM7128+cutt+zjzDj2s
706T71/2h+SuiOG/mdmGujs7B8bCIk0UMNr8prRjsoUAIuaNs//l9+ICri3p
7WGV6EuRA3yp8GzeWpORcMNNQnqV8OpkrXv+d5KHv9+1OVT3jxb8Qk68HqJ/
jrw9KRrlqpTP4Zc/4oy8PUV+eoNXyS8GRLbhg63bwbxjhExbvvvYN6tnka8f
ttHPqFO4Xs5PSfn90OsT5JtsS8B3TQr+mpnHS25Nj8Xwz24pTdiiW+Eggpg1
TtqLr0tp7Hy2j0zqW2O0yAG+XHg2X36dkBlzFogsPPrCIn2yeON+iW9Sq+3K
2wdyj5Lfimz0T3vJJbLraVcEZFdh1HWGDHtxXDT1qMAARLbhg61bwVPMvvVJ
8YFzqKPg1iby05Pa2vpuK/3EZqnKy3iYWdA84mR8P9xS0TzoftbaWpT1JOdj
55juXS57f11+zovCpiH1C3fk8M/MbEW/kWWJVS1PdhFyODa7bsEKENlGCSaN
c/zD01d97r97s//JG9S9O3xEixzgC0YvslU7Jt9PvNCw8peCUdpHtb9P3EKO
plVWN/dLsa/T2laal/OqsL7PEwsPt1a3W21dJc9z6ySbdQw2vMt4lFXa6Z25
1PZU6q5QxNvnMbpOLz6Jq7P3EcZQ3vHCC3iR/HJAZBs+2LqtuT2fkN33W+TW
PJR3XD6n4upHh2emUWRPZrf2+4mSy+Ro7oDwoCVrv/fzft5drt6c7+Rv9mX1
RKr0Kvwys/HCNKHYEj3PEnN6g8p6vOnpjReRnLRtzYrParMb3ITINnqADwRT
jdBEtsJ3K/5tFP4YfvOTp4vZRKchR96fm+3txaShTtolLVu2jH5w8u2IazD3
B+8d2590unx7Kp+uUNPnOTRdo1cwRuLq7DXCmJDX5Wq+t4bEl2Gt7ZcBvHr4
4Oh2vDrxK7EBLfv5TY/UGmmT9ngP5+CAe6U6/fTXonHN996YVfArqukf7l2e
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
OOnx8StXrvSsl5OO26Rx4LJl4glGdG3aYO4P3hV125+IcaXqM/ckLH1M+jVN
aWZWYl9WY95x+erqR4eLlSArPQWtaRvI/qwuevj6xQ/KAVvxdB/PdnR66tJv
RT3SJLiEe3+0HNnSOfkL7i3p9EgiKSOGQNJwo1dmGXXZeoQo9P252d6npWFR
tQYN9anNjFkr3IxWrFjh+fB84Zhh7TAfsZVcnqF4QrFcdEhbeywx+Ei/REXI
jkdBH9LvP2TKOGRaqSH74diQJha2JNmp1yUtjsnjvThMHQuPPNCtDFQBoha2
cYo/jLRPmiOmE9dzE6vdJxStSa6XuofqxDmeHd90CG4aPcqo+d4a9xiooyfr
W23sVH6dkBOvxfMrJ7qaWsekcFDu2BgJMtNTMvb+HJkzZw7ZmdGl/kIcFZRC
27q7i2mf5hwcGJSGaWiu0u9w6ke2rBIKZdj1VJMXxadsNNdDL6RpUvF37WmS
ag0a6lObGbNW+BntyaCDoeLefLE8+rXDfESQwP07qMJf2r3sqtpjiqGDtNXH
s5okskwdhyzUWujCuZAmFrYkWanT5k3W/tccroyijqlj4ZEHupWBKkDUwo9s
j+e5D1GnC1rpsJx38NXl2VesHgGkTx3Idm/jkldyeh6jOzg0B+woYyNGguz0
1LQ+2MgcjBGjwPgyp6s2aSGRfvNpsCL526XTpcSlCE83smWV0DPsuejwowbl
Ln6fstE1qLKuxFCP5qPSoLE+tZmxaoWf0Q+5g7IoVAH6tcN8RAzY6Xiyoztz
P9mm/mksVe2xxeAxXpe0buvWrbRwl0uC2SsVGFPHIdP6W33ufUDLqMObWNiS
ZKRuLY5fvfZmWUh+6uzLYOpYeOSBbmWgChC1mIhs65OXisOfqkiMHtyz/Gpe
vYf2QSl2kkdPfWInOn8tR1YSytiIkSA7PQ3eYUU14gbsa2Wf/pon/OuUjq6c
d+B2bnF5+f2j2sh2tOAs+aVAWlzqiWxZJaTYLSW3984nZMW/jXJmPmWjkZ73
5Ey6rIAmrxPZcnJTZcaqFX5GnjCVRu00ftSvHeYjrurEeZ5Ie/nNKk1ooI1s
fcVgYqv/e/3XqU12MTYnCn1EjCnkkCfGx0P35hDSxMKWZMRSj2KmkIVHHOhW
BqoAUYvOaoSVf1RYhdiqOnE52fusRxOJiZHVlrQWqeeY6O+jARed796d0SnE
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
0JZCxlIoU6NyesQuBFf0zekhKNa6XVpTWgAPTasQ5+Qbp48hsg1O33zo0v59
thE7ALuhdGP/p90Bhz6qnY8D6BQpK9GBgiHzYxQ2GBFZrlal83Z1Xi/OM8rU
0Bdtzv/k+zFfdfnyD5EuPVx4EC2ZsD/98xKyTf1ZaHr5poX5oZJ47jQnmcZJ
2lIUAncC/Lx8ucJattp4R6/tg42Ea3w/wqULaEshXykMjcm7fG7Z6WjxUbQs
RWlpTKfLLyL6fQzEPCfv+Juz9cGHLgJD24sw4kuxpGQ1DH45EHKzcoru6OHC
A2h5WpPl1UTpGYSuVcx66ep8X5xXGJ5sPI35+b7SuNcNQiWr0g41fog/evDg
oSMnLtx//avXWeKArzExuQJdngntQP3L4ysRik2pHqC8rW6oPvPUaoQC127a
unVrVDjxdxZpIOfqEkIPZRS+OBpytULw1Dq527aJIZd4yLZVlwCgLYV8pTA0
JPmcs+3N3Y7WZKrML3TK1FVo46t2D+9SQpyTf/zK2frkQ5cZnI8V4QxKhoH8
/aF3qhmekLrfbUJrM9vNLxbqH6xAUW893JWK/dUFuDiPCOZsZ7p+PNyFBF1t
P1iwF8VVarQjFffXOU1M2JmVxbarcaC0VCrd6IvRTo3NcJ4t7E59lI8fN7k+
SkbItVWXAqAthXyl8EFn252zGYW9atdU3kAoMDAQxb7t8jgHqBDnFAD/cra+
F5oUxub0leRI6Zr7NYz9WZ1Z66jACwoKQrHZXZ6vXWR7dUEuzh8C9tnic7N3
tguj7cp/k9jx67XzOlbj7rj727wyV1t91zJgrhkbn18YGxgjNWbpbI0jRcfQ
5bLxBfeesrVd2TFijtYvub679QFnC/AGaEshXyl02VGBl32qzejK3mieC6ib
HhmdVTwJROted3g4y0uIcwrB971oR/7iN+UanL4XmvaMFh0hvpiDhcOMR7W/
CkPrsjqJys6Mjs02pC1Hm991e+vqQl2cL4r3op2fnf/Ja87W0J2zDS2Puf/k
0obLv2oz16K71VbzP9uSl+xIUQfVf0k5W5yHAMXkq9pe7EFo/datwWgruZ8W
O2c7rUjZTHxs74UPrRw7mOdUL7fjh5sdWR2iPK04v77b9QFnC/AGaEshXykM
JSc2PpXS7cwVnW/Wo/VvOqnXyhTk8JoC743jnCV9GKzPKTbND1Zf/LX4TbkG
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
VEdTLU9i0IlvI9w2tuHjnEyF5l8lbzvbhc4sIjLDT70u+Z5CiFEyNv/nNkLr
cXZ/d3AITcv6pkeK6bbcM+twaCYn405cFJNvtkzuhmZJ4rENxFPGmaTk5M+t
dB3C3NCoXu4ip67HZKrc/honf5xFYYe//NMTgffm9O1SYUY7hLw4owz8Cy9r
Z9ucfrNiSSsnKhOlZ0JOZn5N3YOkN29X3/DQN5wCb/h+hEsXGm1xRoOrTn6U
2r7uQfJRD99IcRjaHaj5fR07Nvy/xuQwq7OlO5P0ENDZGntzdyC0KbvLPOpt
VDy6HR8fiFY8UjhYKm3NPeScxb940j5su/WhuLTw5RlsZldbdo4nTxHySKE1
aUf7xyx9Km4P+eLu+g10+Yw4MtvylNyvJujQB0luausUVoXmUyWTl52tOTK3
Wx6BcKTcvXsXoVXpzY73PY6huT0ulwjN56ci8PhOfO0MdYrQFOUCL6GJc+ov
6T53k5mWp9G4KiuPfOz2ODR1CwvirdLy6OLsZOBTeJPMne1sxTWJeTWc4+xs
6Zixt7ZW3NWmTujMOivQvDep4vsRLl3otLXm8Vu07gtn8LMQlFivdTzQbnUZ
sqVNpDmT9HDL2bLaQGik6DBCgWTSRDPkXER0v8a98V6TxT7cL+tTKWpr6v/2
2gaWyIkJi1tTOvvgqvBT5Rd4SSczXnISnzT07Lc+hhoXFBS8EBvOheZRJSs8
OVt2kfntEEJrMlXUG+QmTCihzv2RSvvQbGjtm6ae3XgNTdw9yWNorjlf3E9f
ZbVaLXZg8s+vX784ymDiU3grsna2xM9JYr065NdHsCOvz2Sabs6+H5/+4umD
h6X9U4r0wwcu3r596eCTelF26sVPvhJ7DBAcGUS4ZGHQdmFmbFyzdJjWOD/e
3z82Z3B6oHFubGB4hmgcDXq90dkBEsYtZ8tmEyxyVwC7+7exPTMCoVtOVtUY
dPNO0eoWPRU4Tma0w6l90L3bEnStZcmxLguPp5fwsWGRtit7dwAhb8DurHb6
cd6zZ8/+X7HhXGgeVbLy+/jypQspuDtbNltb4Q+hQ9+o3htDy9NQhO5UO+mx
k0poWkqPRb/Gg2nQdr3bgxcGrNj3toP2W66urhY7MPknOTmZowwmPoW38uvo
8p2fnf9JBvd9o+IR/RR/79P5/n2ryTTf8DAEPajXYeO9PbfXZBorL2/Fz7T4
x2lUNHBeo8sLuroETx6ofRIZRLhkAW0p3HK2LMC7aNsZW33b83CaRAYch3w5
2IeowEvcH4fbX4WhVRmtzAcNfPtmSQU/3V6SV6Kaom0W57s/HlmJKxP9tMVn
Uti4LjTPKplM5YeXLU1+w93ZsoCcUHuYSoKrb04Pdf7EJcnQDH3RxnzQQFGR
+QjjlIplaDqb/e0/sJCBk/AudSf4cdBJtJuRw72JCHrragfxwQMh6y5nvbu5
yfwoPvB5d9TJy7H38IPKaNGRTUdvHd4oVh/zeMnJxHrJ937xjBwiXKqAthQs
pGjPXEutfWHNQm287VZvzXmC7/CD3wqUbv6WyUFjZ31rZDrRlEVP3e7ZB9LM
JDUY9OqObtrx+J73KeV4gu9sxTWL0zn+fYzprLr+orPk8rYtKY2TUksbTwdD
oflXyT1n605okkP+1pRnlgFpHJnGvoIvze7OHfJmaOrUnT203Tw9OWnkXdom
+pnSCaazLvR9M3/L29KappkOlDdMMnARnp3uMne2ZJYK7gldhMGg081PdDW1
DZt/nIaGpNt/5k0DA3hyqzLlNPEtGTs72vUizBqcKjt/WORtZsRAHhEuTUBb
ChdSzPz7nXsrijho+738ml4uq4LJ/SpW7Lz5+ObOYOLjWR2TVbdwg7/drYd5
3UB9ftLeQHyCjZeyyjrsbj5z6l8PyHXNW259abPbu9AD+0AQnqokW8KFvl+v
XlcNG0yT/9pHLbe1f9mp5mf83m5yowi7vEOM6IfLr4c7TPD0AZwWerFKzmTi
phJ3ZzvdVWEOzR3xnzmFJjlFeMWO6ylXthEBFf2mc7ziKq7Mzjy6ZBKM2IVm
5OU3zkMz6maBym67U/dC0zoLd+Ozv+ScwIW+ny8zq4aNpokulXWr0663j83j
wBxDUzf442o42pgtsS0gvI1zGbgIz0532TtbchF14J1q6cxJMDPXl3fcuinz
nDr3CNp09PbNQxtWPmnxdn/DfNPj8HNlNHsHyxq5RLgUAW0phJRCN95R8+tX
Tce4ufU3TnbUdzIO0vGK4b/Tkc/dcNHGuYkxDfkEb1S9XItiM2tK40+eO7ch
6KllZmTH60eOs8gmf5x1PpotY2wq0cjEUaW/KWtvVC1+U7DgJCKzury8pnPC
EpkT7d6MTE9Cc9wSmm0v1qDYl9Ul90+cPh0R+MQSmu2ZKX8c+o0J0Z1OIAY4
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
2d9LGxofcBZfV5+Hk49dSk98MDVNv7tIlhxM+eef3PSjXERuNWk/cg+pwtj+
33ePrLEVqjfftc62P9q6muK8MoUkyvuqPTuyDYP2biCynYewbGsZKflxgXMd
kDCBy7uQLXJry1yxVDy2TvJjlKPEzeRvFdDX3VxGVqR8trcQU3VFH+yTgvzJ
fn7vIGvNWEqWL19ONv7+uDD32s6lZO3lSucw8Vhru+KND3bsO4M2ZrbZmyvj
cPW/+fUaq2Wit9t+XrFwfCbZeik37+qOBdLdK2p1f0951rXfrpTID42ydYPL
lbQMfmvFjmzd1fJJK6u6/3N5VsrFK/mdXg5Ti67I1jjw/MdFewr6JV3DxH/H
eEOdqhD3znW+dcx/uh4orC75kZA16c3y4Rav/mzHk1/PtD/7bZPQrCTesU9B
mgarMo6sFpuZNYfzvkzpWu5vIKcK+gVBv/yxhPDLVDf+/nfB48sJS2Q+4xPC
QxDHettr7TkrDX3KE12lp2fcNjwtrMf+buvFxzmXt38n7oDRjnR2dFRXVw/P
WKcGv/Z87ejo6NbobY5PHV2aas07wi/KJOtO5LXYHtwM/R+SE2yt6cZTz9t5
cwemKbNWuGsamKpuGURYZCssnnPaQldZ6WYWXW3yMl/ORphpf35mM3/aJdmZ
andU40BVxuFYsQTXHs1vm9E1p8e7Fd+G09kFjy/9sJisu1oVmKN+/8h+HgFf
ev/UyUtPqLULd1zNzftfwkLnVgV+5YBgiampycnJKfH0PtE04+P9k5PCHT35
Lue8/xxdK7jPqX/szjvb997hvJt+K+7gnFemvM/asyPb0GvvDiLbeYhn25q0
Y6OaGYc/GHU6+2eL2Wxx+zG6UeBmfGC7cuVKEn8yKy+Tf8fT93ebHIsTLZMt
JVXOiSqLQaf39LIhDw1ry/0YYc7LNNXXXN/cPS6dZZuqu7nevyNOZqcm9fbp
ZUt7VhzZlVVddu33M2diYx3bIox6vcmgaa99X9mqlubKR5BHX4/xY/kuq9mM
I82NxTeXKJAoNFpJ1QqeVm5ES2Q70158bafwcq/40wVt9hMgxltfXE+wPaiu
OpicdXYt2fm/YrHfEtYCxMbGko2nH/2bfXXXcrL0YEG3+8SuN3+249uWc3eM
Q88PkYPpZS38M2Jz+iKbz/Q21Tf1eDub1TMWvcRVVFmreVd5deX077+vkow2
ia5SI3GV2a6cREJOlAjf+c21m1LrJkyC4xclxwRw2lB4NA2Cqq5ETmRrHKwr
TN0v+Pum83kfe2bUrw4vIDuvfOyXP6kKZyPE/RXA2QiUvJnF1xxw8U1KHPVh
LF96JZdOnz69bN3fnfbcbaX34ZOsTeMVXbh4acwC+24G/ofl67dvWbNE0r4G
2XejTHs3ENnOQ2BbB95NwdeTvUXDVuN4V31NY8+ErAJPVl1ZtdmHvUnMhlU4
I5/9TkJOiFS/FkBK6PlnM0lttN3N9skTmrJfhJfXDxftdXvQt4yW/Og4Wp5N
lGnlSrREtkrQVl1bnJTTPCQMYQjHbvGTLsaxzvqahg61p1cDKSHQgIHfG20b
WRYG4/x8O6dnevK+d7rKovRmL5fz/sRvhtF+OPd9nt3VLaMvDwnn1/lNODQN
iqouRE5k64p5+t15cr6kR+16DsjsYFOr/2cj0HEWn3Auc+gddaHX0uvMXssv
97JoSsvE5o9/bhViOn1VheThPZi+G33au4LIdh4C2zrwZgrhgC8PbaHHU1fd
MeZuXnqJcoSMMNHC3mgy9fa0Y4WRv0y/+00UtTt3o/R96Cy4BuLYf40FP8XF
uUWA0/UZV0sUnEYeXVq5U7yTbC8ITL6ACGY95c8esntqW+ZKQlI++/tiOwos
v1ZMY6pNOi8+EwAOV+nKiVekPb936MDZs+ud0kzX3b+sxPE9EQZNg6GqG4U7
yI7CYApJxx+f5yypdBV2kB1V0VkUvsKvIBby4N/u5X1Hp6HmuksfxMloHzEw
qRpbxPHNoPpu1GnvDufPCUWBi+s7iL5CB2zrwIsphDernGMfCD1eflTJCwgd
GHO+X3Lui9vPuqac325WsI6lmGhOTyC/lKgDi0T4h+ydyQ9OxJHt27cTEp/j
+c3Aoy8PiL3FYOFOD0dHeSLqtXqeMH8iW+4RzNZNCOf5BPb+DzcYfq2YsddH
yMoDz3tMnM+cSmb6TECIrnL/+GqSkJBA+FfieU1Rm6zsOF8fCIemIVE1giNb
H4YXguGoqw4W9Zj0zbmn/vdfUCuRHT5Y23n93tFVYul5HGbV9ZZd2kjIwX96
bEGmvu/N1S3CbPz2bfErFshOPwkUh/LWeaB9mPzZHURfoQO2deDZFPq61HWJ
+cxuYbzpLheclWqUT6iby45seuj1jWAhwjLT39I2zLUB5vERtZfDckaKk8ST
Tfl3Ld6uN0+/u5Y5J3M3XglEK6tntaoukAtVwZXWJ4JYT/kjgBduvVU7ZtXW
3tnwfUZzcJfJB+7XRoMhwHUp3uFcpbmVdxXT2IhGgQFUD1cGNntLJRyahkDV
MFUGP3yeH6FevvdJlxKXjhJHne7jSk+vuPTCRnh8Nyzaz1njjugrdMC2DsJs
CnP97WAPAoUEflP86lN5r3OOxy69UcfPUBoMAR5rGwG4a+VZLR+XmgSdoDqn
aXZWyV4w/4gWv/aBCVXWwe8ku+TnMYpUDVNl8MvnjbOzCgOueeiowC/mrHFH
9BU6YFsHYTaFpSHVv5eKh5f+gh2n305MD3aPaIUegz/0f05jvKDgqpVXteZV
ZBtSOL9GwDC/ieTIVjmco/LbgcE3DyLbeQhs6yDcpmhMC8H8pne+fv36/9zY
t28f9WJ+z7b8QCxD9f8iM7BNTk5216u4uJhyqbtWXtVCZKuYOfJrHzhz5oy7
q5SWls61XMGnsLDQXVOupgR21/kR2XJqKDjTZU5JSUlxL76cnJy5litM/N//
/Z+7+l1dnvdP+EFj2pI/Alhw7T9R1KpHHbCtg/BHtnMSLI2Pj//lxtOnTxUl
NqtLDi9Nbw7iVvqg8f79e3e9VCqVkrRe1TLWJs/tAHsU1dO5fgjwTnl5ubur
dHR4PSAj+mhtbXXXlKspAd10tupqWEblQx/ZRrqjVlZWuhdfUxPjvbTzjvz8
fHf1x8b8ewEGG86fJa8VDSdR1KpHHbCtg3CbYuK/Y9JXmoIIpjVjqffzcUNJ
FNVT+PU8p+nud2GpDKH2+fHyo3BUYG26t2COnnCiqFWPOmBbB2E3xRyPGWj7
qt9U9wXvIJgIIRRqaT+cO1QSimP0FRNN9TTyx8JsaHur5mMNoBBMTafeng5P
ZQi5z0eVo9b0h+DE2KggxNpz/ny0fDxUd/dINLXq0QZs6yDspuBf/TBXLSu/
Y0rkxJvJuREhFIRGLWPdjaUZrUG7nT9EUz2dS79WjtNVTr+d8n55FBNcTY21
ycvD88amkPu8qe6m95eyzTnO4vPpvPR5Qsi15/zZ5bXL4SOaWvVoA7Z1EH5T
8CdRz9Ekd193N3/wE3+2aeQHIcoJiVqG6v/NeQcYVfV0Dv1aOTZXMX9OmVc1
gEJQNZ2turosTE95ofd5Thk4amQTau31VVdWPlS0GSMERFWrHmXAtg7mwBT8
6NaZ9zPhztbJZMXJ+bjULKhqjZYcTHg6EKSb+Ut01dM592vljJcfvebhlfLz
iKBoOlK8f/fz0LwtzY0w+Lyp/hY5H8RXc4WQb8dRaYRK++EX++bw6LfoatWj
C9jWwZyYQvPqZ3K9Zo7efDBVcerYf8pesh5NBFWtmfdnXU8ImwuirZ7OqV8r
h3sEEl+xPO8JiqZ8ZUiuDdebsMLi8+qSQwtv1UfSy72ocMUnvjLxmyRU2vOv
rAufP7sTba16NAHbOpgjU4yWHJyT8S19U8bxwl6L1arVRsWYhUKCqxbX7wX1
det+E331dPTlAXI2osdt9Y1/HH3aw7mKTjfPN+cER1OuMiy4WhW+GZ4w+fxI
cVKEj9s6im9+NdUKCZn2I8UHwurP7kRfqx49wLYO5swUhpb7a1bfaQhn76qr
urrQtjCfzPGu/2ASXLXG3xxfsLOgP/RvR1dANNbT2aZ7q9fcbYrMxS5SV5mj
0yzDRHA05SvD7sKBcFaGsPk876hr70WBox4uC/ZZrpFOyLQfL//1uzD7szvR
2KpHC7Ctg7k0hanvye4lh573Rfys2LeCru2vhLjf32oiIqy1Rm09Nfbm71r6
S/GAaa4FAQGgU2UnrjnzLtyVIZw+zzvq8qOlg3DUb4A58md3orRVjwpgWwdz
bgp9f+/onFc2wDM73DcaUU8Zc+6cAaDr75vPY6LznrmqDGH3eV1/Pxx1/mMY
7huJjMY9mlv1SAe2dQBTgIgFzgm+NeDzYH4DDw8dsK0DmAJELHBO8K0Bnwfz
G3h46IBtHcAUIGKBc4JvDfg8mN/Aw0MHAQAAAAAA4WWuA0AAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEAkMtv1PLm4R+nVfS9v
PeueDaU8AAAAAAAA+IGxI3vryYoJX5KoS3/a+nenMVQSAQBAdGPUag1zLYMc
TqK5abNntVrTnGQ8rzDpJqf0ZquncgyvoefMn2SY9HofpXAYMnAir5L7RvCK
UFoMQXYMs9mfwpqtv730YqXO12Qz788suVGn9yPD4GDR9te8yE5PTc+r6Jq2
2H/1zwSKCHGbEWmdToDyhKPC+96i+Zs0XIUTxBYXzCHar2WXthBC0hrnWhIp
E2+OE3L2/UxYMx1rfPjjSkKWZrSGNdv5hrYxbVfi4d3rFhKy5NSdXyjlGH5D
z4k/yTAM1jw6GutTPZMa8sLHqQAyj8xK7hvBKULXYgiqY0zVZ55Prxp1/Xmy
oyL/8lbO/GTxyrU21qxassBZIN25m1ZlqaRpZntendlARDadzf3Qo7X9Y6w5
m5efkPiT2VWDRlVW7LrsDotrlj4x3pR/YUeMLbP4k48q+4V4aLL9VXIi/1Ps
obTSjmnXVNqW+5sI2XajrLmrvezSGkJOvJkU/zNaeeu3zEa3BIERhjYj0jqd
AOQJR4X3o0ULIGlYCid4LS6IBDRlv0Rcp6epfZxbPx72bFszljIaz5kvX/rC
Lk6AzIXMhprr5PxHvh/WvPqZxKUX0MuRbejQoNCfQmox7cfzPtQzuSHXZHf4
kaNEnUis5L4RrCZBXgxBa2im359dfr2GNezamMbFGQdeyqLe7rxzRcPcX2Nt
MrVoZt6f5QPLcx+00l/Nndkb1yTX2KJIa8uDxeRqVeDrbcfLj/KZbcztdvyk
a06PX3OtapwWN4+X/0rIr+V2wwnqSVTg4pAllz8FOQwJeZsRaZ2O7/KEucL7
1qL5nFTWGoe+cILR4oJIgtWyfoMMFe2hNjLmjuwN0WahuZGZ7+MU5Moy9JwS
aosptI0fF1ORqYNK7iBwy7oz8d8xcvkTc12ApvQn9xE0Y3s7H0YKJZNcS5tp
7crhx233vRh2/DL5/szKs+8nnZeY628TcqUqCCsSxl4f4WNbmyTTdTfXbM/u
pM9mW5ruLSIrM9vs33vyvifkZIVELCEsP1UR1GGviGwzgkDQ9Ap/hQ+gKnlN
Gvb+KxTtAggRupGOLwI9Y0bdSLv4+UuXmnvGn1V38p97J8zGuhtCkVqmuyuL
iz/2SIcIjOrGF5l37+dXDdqHBYyapvLPo9ap9rKnH8VpK8pFbMbr05PiY9ft
vZGVVqJiX2aaUL1tsDfoup7y9ItXMspaGj63ySe5tCNdnRy9Y7POLwOTJg/J
qLJatL1VRTk5xY2NBfvcGxnjQOF+rsk/U9TR8VVtG5TR9nzIz8zIKVdNMNd9
mSfaSrNSU7PfdMvGXGgpTZPtH5pGOYkH60pfvFGN86t8LNM9n0pevO2YtC/5
MWqaazu11tnBmmd5z6oH9B71p8jsvZToEtMENo61vG1SWy0z3R+Lnr37Kg7O
WKaHOzuLzxJytpgXY4LvIWXlyDY0xc1oOXgQ04t2Mjmo91ZkManzd/armkTa
R/n/G9Qd/BfVCF8y5sn2suy0lHu5b7udosubTrZX0wzJKgj32milquNbJZei
tMIb1Q2F92+lPHrdOe1jWoolKD+5uJJyv3RFVgzeHUOBjYTw8nY9c3GeYHxy
o84Zvc40NHRJxFnhjBJlTL09zSVcmNog3Frfcn99UtGQfAy1KyeekDsNgS1I
EDB/+WMFl9vBktHx9+eW787vYy1rNNXdJOT7PPsxDsMvkoRU7hctud9CkYtW
NzxY3nPj7Mp0698/b4iN3fJb1t1/Kn1cERFJnY6rPF49O3gV3kptYhW0aK7J
PBpKltTt5u6tcdCqPy0to8UFEYvua84+/kH8RJnGpB96d2MT93lPRoOa62QM
oy+Pk1Vn36rFyPZKVs7uuLi4ZdwF2/JtcwBDz/eQxLQ3lcXXuEdycrhsbLo1
73AcP0F2+bKwLotf9+J2kQdxJitOLjr135jZqq2/teqHgn6G0F0lZzY5hjj4
FnJHelVX+9tbm92mCHTq1jzHaIhupOER18buLBxkJaPKOtvyYP3C/dkNX9tK
zq8h7kueppufXD3I/WPLsZSUzE8jnBZvTpDlR3Jrmisf7OKu/6lU466DuuQQ
WXu2sKa24PRKQvYWiVWSllL39dX5zfxYSf7Lk9u3blmziPt8obw++4eV675f
u5jr1pJrDVbN5/T9SwmJv3XrFLHz27tppv5uMnsvJarENIFnVE9PrOe+XM7I
3LIwJibGMYdp6ipNSTm2Rcw15UnzqKwc2YZ2k42ZA0tMz9rJ/Il1b+8Wc3X+
0wVFghrb0us0fNBmHG/4Y0fM8eLBWYvq4Wqy7V5lR0vBsSWEXK+xhZySxtyj
V7sacppeELTayHRa5ZVc5vtKKzy/DG7JuYox3UDhjzb/vJSfoyQtxRLuP+lc
XMknv3TFUQyKHMO7f4mB7RkPawCb7i0g5MdSta14tQOvzhwtHhG/Db/YJ53X
d8HcdG8x72tvp0x9+Ts3P2p3G0QVpnW3/Nsr+WX0K4MejedNarxZBQ4UDbP3
0AijgQlPBywNdyRNkRvCyshU15CbUjc8Wd5b4yxHV3mR/Ph8yGg19v67m6T6
Mv4WYZ2OTB4lnh2kCs9DaWIVtGiUZGxDyZJSbu6iTTCrP7X3prS4INLRfjjn
aHosDamErPu7U/jHePlRcZhBqAN78nuFB5XGVHsbzIWhjsZBaKUWP2ix3W5t
RqvRMjPQqzHSL2KgLv3RUZNaMzI8NDySqRS+BthGO7Qf77gvfhkpTnK6fMv9
GFvdoSSjyioof6te8iBJaTz1ny478hA+229jac+Ko/RL/MTeUduPvf9usWXA
TDlbfY2Qg88GBWn5NT5kd16P0HaMlR22Z9z+aDVXV9ObtTZNCFn9qJ2tv0xm
76VElZgp8FQFF2DvzO0WZOQ9ZtczW3vl8hQvKUeWoemyMXKgiqnAB2VTcyzp
vVvMxfnFJXLkZp2oFPdfcUK6v2AHWZvdyf/Wmb2WLLM7lMQ23rxabkhmQbgJ
JEGqjo+VXIqiCt/253KyKU/sR/ryt9nzVZKWYgmqcSRF6I9fMiyrxDG82qg5
fZHHeUy+3XNsH1sTu3ShpJMWl6hKh3OpibnwZMW1amqH67rGVVCJgbfJVnFw
2RmE0xBaK+cKCSG+XZTa4D53xQvmsjGOVTcYllfUODuZeX+G7MjvE2JpQ3Xx
fz6doRZxnY7MN5V4dnAqPLWJ9d6i0bs8Zu8kTUq/uVybYFV/T703ViNEGYJP
/PyKfzQRytVWsoPPdtmK0T5vIcD9TNY/7rINRKzYkCCyYYWtDsiX7zAuYiA2
0oTsyGj1trnA6WW2REsO5HZozUaj21DCSPF+Wt1xT0aV1VR/S9LGCAMoniNb
QX9JR8TXRdu6cwf80MGCe00uN/GQUlan5F9S7V+6czeS+Bz7FCZfTOT4mwmm
/lKZvZcSVWK2wPqqK3KPEYNsN+klX1mGZshGz4EqpiIflMWJDOm9W8x97Zpg
fXG4bvTlgZTPonsa1P2js8aR6gcHY2Mk8YRECG9eLbuYXRCeFtNROjqllVyK
ogovDWKEUEeM9pWkpViCbhyHQfzyS7pllTiGdxvx94i5z2z33NcidOdlOdbV
ugambvAbW7hQ0nUVgiz3oPTIxp5/dq4+fHgnd7uFdyiRqoiu8pI89BVKK+4v
94czfnObu2DUukG3vLLG2Ym4doOQDderNP4c2xRZnY7MN5V4dlAqPL3v8tqi
MZIxeyeZcnSXkEe2wan+HntvRLbRhvlzijgLwBV26pMnPwj9TvujRNvYrbwO
DBftFedR+D0RzkjKgbyzYlzEwjJcfGiBOHpgn6BnIPWyiY/nV9jGHMQAXQaz
7rgmo8o6UJhIJNNW3iPbwcKdskhWMJ6LMvxDqHsd8ZDSQ2Tr+CKPbIV/7Odn
NBVEtt5LiSoxW+DZqqvOy4ee7yaxWd4iW5ahGbLRc6CKqcgHpWKxpPduMUog
yTfpwthA+6PNjsWSxu7cBLIg8Y/G8T5ebUpk682rZRezC8LPyNZbJWfrzCou
fhxvbZbKbFuE+UuZRnFamiVoxnEYxC+/lMCsbfTk3m3E38PDE70QesrWoc5O
Tupl/7U/EtEYeJpA6IpIbiD1Ab9WI+hVD7fE323S2od8jzLWRwiLH6STVMI8
IPU8pvYs2sFO1LpBt7yyxlmK5s3JpaLbLElt9HmxZGR1OjJ5lHh2UCo8ve/y
2qIxkimLbKk3Z0a2gVR/j703Itvogy+zdY8epewpGhKPdzl//rxzPoleB4Sn
u9WZbY4mV11a2kgdhnG/iMrsly9CjdKpHm4jjs5PvKN8X61V6mXDLS18Mzrd
nL6FOp82WnJQXncSCweoyaiyChMYzoVUfCOz5I8vrqJLapk4guKUQhjCcNnA
IdQwaW+lel7U4yml0shWeOwWEAbGhMQM/d1GID2WElVitsB+RLYsQzNko+dA
FVORD/oY2SpyfhHhuZHcuXNnv33lpPCL7aymAUZk682r5WMazIIINLJVYDuF
FV6IeJbv+PV4Yvyhwh6D8rQUS9CN4zCIX35Jt6wSx/BuI8+jpvz6Q8q/1W9L
G/mdNcJSBpdJHynCQJSnLWJBWI0w8zll3ZYslW07Eb9Xn5Cl6c2UaHv63W9E
duaBsOCEXKK9ZYJmFkbdoFteWeNsx9TUJESHxv6CfQ5dtb3v/n2YaedVh17X
/z73Xqqd9HcDLgJHTqcTksjWqzPTm1ivLRq9y2P3TpKkjJszI9tAqr/H3huR
bRTSkc0vUxcPhxFGmZznatuK2+EQXLMmziuKbRbZcLW8c2Sko+RsnJDcpS+l
X0SlMc2xWp33IYk/rVq1yqXpFgYCxFwa0xzbI6iuJwwXiT3DZN3NePvwBiUZ
VVZhAwfZXzTMZ29uy1xNfWLlW4mbdSZzX1fPtNDT/G7bM8H/Z9HdJpduh38y
5kjK7Zw2TKmy94jtlp6Z0rnmwFVL+WoEx4O+MJ8lzqow9JfJPOG1lKgSMwUW
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
JOeXlvsxtsCSZRrmPJHfFmYI4F1jprE9SGnH3PWYb+737du39Z8ef5YFCpHt
lmM3r574getjyIqDjyURAVV2alkosA9bG1k5sjyHnoM8KYPu3E1xydWTFqt5
9OXP5Ld3Pi8E0I5+ZdCjoQ8QWhrukKTCQc6LtM3pm3yakPQY2SpXxdRf/qCo
kzL05VPNDHKzSMfcmrFq070mrkc39ubvJncC3l4321t0dIUw6Lr5Tv2457v5
kTnD2Rm2YvVDMoLSdoa+T42cTlVJnxrqTtV7nxp4pwqiDF3lRbLgXpP8R8Fz
ba7CwzuUOOygr7ri9JDBZ7vI6kfttotcekvHV1P9LUkdtA6/sE2cCHtmVmxI
ENmwwubu9ByoYjLuIEfm0gzpJbWQcU/3FVcjxfsJOSM8142+PJDyWTxKxKDu
H501jlQ/OBgbI3nAlgihLv1RmKw7kNuhNRuNlBNIJBezC8LTEjD31lmq8/rH
XcpMR9GFWgxuke1+WmDJMg07ZvTXwnQBvGvMNrYnKR2YVQ/5MQe7nL4iRLY3
q2bU5b9xd9lVOCDp2KmyM8rCu33Y2lAiWzfPYeSgJLLlcz3xZtL2JfOhzxve
hRJiwMib77C3ZncabQIEK7INWBWrjzUz2M0iU6sztqEq7cfCoK0PMfbl7+XL
yNkLBClzurPTbcXqh+QEo+0MfZ8aQZ2qgj415J2q9z418E4VRBn8A5FbYQ4W
7pRNoAk1XJiqmK266rx86PluEpvlrRYOFCY6n5AklXDiv2MkPqfLVSB6DlQx
GXeQIxWLJb2kFjLuSfF5vl0QHlDbH23OtE9yGrtzE8iCxD8ax/t4talxxcTH
8yts3TH1VHfJxeyC8C+yHS7aK87WKDEdRRdqMSiMbBmm8RAz+mlhugDeNWYb
26OUDvgDEcjW/F6PFzFxrkbQ199eTsjmx12OMIAqO6MslHigH5Gtw3MYOSiN
bHk2XPs4Gq6zEPiJSoH1F8oHvK44FU+ooLJMFgUFQxWfamawm0Uqdq22pjVM
BOc4AkN/yclY/paLdj9qmwl65nRnp9uK1Q/JCUbbGfo+NYI6VQV9ahg6VW99
auCdKogyBMeUDjSpnhf18EdkSItY2KktTA/5UQuF6Qrn4he+Ei7544utF1md
2ebIWV1a2sjKgSom4w5yfIxsGfek+bz5cwon0507d/YXj0h+OfdBqDMDjEo4
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
yo6WgmNLCLleY7BOt+YdjuOSnrt8OYZf1cAvERx6vockpr2pLL72PffL4bIx
txtJ+nKF9+TXHy45VzGmGyj8kYgk1xrds6KltTPd/OTqwTWEbDmWkpL5acQW
N17JytkdFxe3jLt4W34fQ6QZ1dMT67krLmdkblkYE8PfemNut4tWpq7SlJRj
W8QMUp40cyHQ5JsTZPmR3Jrmyge7uDQ/lWqsVPV8lNDq2caaz+n7lxISf+vW
KWLnt3diREaTiHW9Tt2a95N9qYpupOFREiE7Cwddy5BWhHJFdF0lZzZJ1rzQ
hFBiYsXeRnOXd02KEpvqbpId6VVd7W9vbRZXk7j/4qqP3wrJLSm9rafU3isY
AAAA8I1j7nrM96n79u3b+k+PhXFRf8EOsja7k//Ymb2WLMto5T9qP5wjZG1G
q9EyM9CrMU5WnCSp0v0wix+0uN5IEtkquqe17c/lZFOe2LH35W+zpaZn5ZpW
iv7TZUk8IsSNe/J7hWsaUwkR12DQRZqq4MK+nbndBvvFu54NUmwkHYATcrML
aGnP4uKqX8vHKer5KqF3G7c/Ws2FQunNWtvVhKx+1O5BIsb11pHiJKc4Lfdj
aJEt3V5yRaTrKphCKDGxIm+ju4uyxLxeN+oEg2s/3uHjWPdf5PoEppDcZaS3
ZaRWUsEAAACAbx6z6uEaLqBJ+ezhrCqDun901jhS/eBgbIxjyEq+FtRcf5uQ
FRsSRDas8BbZKrmnmGBVlkr4bGm4Q8jNOhMrK09rUylxo/3b4LNdZP3jLqZI
+qor8ovF0M+DaoIgtpCIhw/7xN1lHkRUIqECG3fnbiTxOV1WZ0py/M0EWyL6
9Xxku99rZMuwlzyydV7PFkKJiRV5G9VdFCZWlwqjvEsO5HZozUYjVxvcf5Hr
H5hCLqsRJF/oqRVVMAAAAADwByKQrfm9Hi4xducmkAWJfzSO9xUm0qPQif+O
SUIkBrJRKu/3tMm2NktlFueGxf1ujKz8jGyHi/bajzKgijRbddV58dDz3SQ2
y0tkO1i40xbhSLLbWzTsb2TrkFCBjeWRqiDV/uIRtkT06xVGtlR7MSNbthBK
TKzI26juojSxdeLj+RW2JQw/v9LQf5HqH5hC7MiWnlpRBQMAAACA18jW/DmF
kHMfhB58gBWFCkNKqzPbHCO/6tJStxDO2X0ruiePcDbS8h2/Hk+MP1TYY/CQ
VaCRLUMk3yNb/gAwqSS6ykuE3GmwBBzZKrAxH6naRqCttnFLLme2RPTrrdbR
koPyyDaxcMBFUYa9mJEtWwjfI1umJSjuojDxcEsLv5Bgujl9i+04PPdfZPoE
qJCvka2iCgYAAACAmfdniccDWPltMuJ+FePQ80NCZ67pH9C7hGnCWkZCNlwt
7xwZ6Sg5G3elSu96J37RoJhC2T2Fm/70T9vAiGZ8Smswe8zKU2QrRIo360zm
vq4eoxiSOEKHoj3iDDZDJF3lRfnc8PI/29wzEGJC+ypIYTqZ/G7bu8Xnvehu
E7+I2YOISiRUYGM+UnXIYaq/ZZsuZ0rEuF583BHHIyfrbsYTZ2zmKENWEcoU
4QzjKHOmEEpMrMjb6O6iLHFj2pZ/bU93tijT/RerTJ/AFJLWBvltGakZhW9S
Za3nlxC73x8AAAD45pjurPj79w18h7nq5wfFLRr6VcK0K8/CQ39lneA/HCis
r7i+g/+09UpZl20+dqLi5ALHHvvTb13ewmXWqArOxBKy7uKzllGDwnsKm2lk
xN5vMVKy0vW4yyOl78l24doTb9SDVan8Pva4k4/rh9Sdr28n8Kmuv+qaooj0
rKk6dbdw8d/cxR2lN/g8Nl950T4hvbm6Of+S8N6L7dcLK1TCVrH6W6u47/GH
b15JWkW2ZHcard5EVCKhNxvbIlWyNOneyzdFydvJpsw22+lQNIk8XS/ErQI/
5OanxBCyLOn+51FZGVLs9XJUqsikcbg+PYn7GHMoo2HERBfCMOjdxDTT0SxB
dZcpZYn54JUs23sz5+GpeLL6zzYz5RdXffxWSF4btJLb9vexU1MLvzVjGSEL
7jW5+zwAAAAAWOjVPX3jwuTu7Lh6ysS8zqDpqK9rHXEbrfXznsMv9h15NTQ5
0tvR2lRf8/F1/sWtzi1oPmTFYdFNjOs87JJTKpJiTJO9TbX1qlGlAiqT0OpZ
cXHdbPtUf2tT64CrAhSJPF2vHWpt7uFP59UN944arDTo9vKoiM9m8YCrJTy5
i7fERp3OqB9tq37/SWU7tcL9l5Ar5B33wjeOtDQPY8gWAAAAiHj4d8za53pF
DI1pPxXSDt0CIi47woJ+fSQDdwEAAABABDP97nfb1OuCxcuXxXzHfdj7fIh1
6i6w7eoit+sVjPz6dX1EA3cBAAAAQGRjnlSV3DudlJB48Hzmm27KAlrgwDRU
98+DG8nJyTcz8htGvEd0vl4fBcBdAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAADwLfD/AaJN30Y=
    "], {{0, 585}, {926, 0}}, {0, 255},
    ColorFunction->RGBColor],
   BoxForm`ImageTag["Byte", ColorSpace -> "RGB", Interleaving -> True],
   Selectable->False],
  BaseStyle->"ImageGraphics",
  ImageSizeRaw->{926, 585},
  PlotRange->{{0, 926}, {0, 585}}]], "Text",
 CellChangeTimes->{3.532711005260221*^9},
 ImageCache->GraphicsData["CompressedBitmap", "\<\
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
kaLcVf807UTV5Cir16tyccS111ictsT8+vpr4cC80sTX5ezQdV7ZYtLn5ekJ
ed/X1xcZm5hA1Y9EztzQ1qaVfqp+0vprxcfXtGnAr9W3V4Wjqu99nRVrUlM1
Yk0WEopWKmobmVjgDyCyNOUzpOxIvytHeB7YKs9jefVV8PT6rAIX02vUzrzG
XFemCLQ0JLNj+X8C3TVSo44S2zGrhe5AYzoG9iUszbZw64oOSa3Tr1pySAkv
S0vS4l/rD7HC1KTsnpHOrH4HCz6S36VWyWuMN5fhdvUZd81M8CvtkcTnDzVf
S9JxooPalmamlCOUVnSytPyH2ERNnr+yxIt9+3di/TSU2HB/7K2CpFbPmuD5
kTIfdHcFvtar+Xv016Zw+doVvAvaVQiwOkNuhCsnjp3ALCiH2VUN9P9UPvus
y/Dj1BUTYuvUFXQWRolzfybuP4NHZqP2iCPU8gm3nUvVbojvMdiQzrVrl7FJ
qlGTxCyFMZ6cFM954JfBzMpruLC2QGNOBEbnThKQVSfsft74+BtgrFm25CqV
espLmRtpGaFY5XZLJKNa9p/L2szc3CKvvAdCoi2tsCTAPNFeTcDJECSDrtT3
CoddI5kaH6G3b5C55XWtM1cqR2eTlItiUVNi/jvMKwowPX0a45vXuG5iT9f0
+hubvwE9PlYjulQ0ozgthOfO0ZLA/ZF2DWI6Uwqinh1j68bd+GQq/hBOAU2x
SpYVnNloIPSbHoHEY+Q7PcDAxIHJpVeBA0Nd9URGRkr/xDXp/TtECpnYOK5y
GJb7HmWH/cs3NMmqUqPFsqRIHASeDc6ozlrznAz4x/9zhzBOJ+UCqKp7/0xe
3uz4EBmBPrg6JqBKO14k5NomfvxTQ5rH57RsstH7IZduukns9k+0jxqnMi0G
mzve9E6pplPieZ7/8Rdfk9qilB+lxRu5clQb+z/4KfcTm+SIof8Mb8Y6iji7
8V32nPYj/2Uoz2xTpb4SKt1FgvIqLTmhnNyyFcuIChXmrIwTcXU7P/jBj7Fw
DebFYxPK+gViKUvY8u7HPHzhSVKUF7duXSWpTanmsdtZne0hJdIX/7Ashuak
kIFawv39CY8W6pLY5QVlPUPT84ILTtFb1Sr7oSc6h5kZ7eOk6wvsPf0Jichm
clFy+M0wUCe54VZoqYjHx9uH0KJ6NHWMVmZ76RvpV+/qEs3lqnvCS5voy07k
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
GOqjf3T6Vblfwdj7enqZmFtUX/uBnLwyKAA1Mb2sBruGma7KY0g7JjFfFQOV
8EO9w1KFVDH+4NiM+ncCQIsSvsgMRNDRGD0SP1Hv0e/yA2nJK8wI23VVql0/
NSZz2UltTu53Vcx7UeYdrCzMMdzXw6ByUgWGv1AtcUQsUZC2KlZqXWyrhoWs
ySxEfqSMvqvyMFI59r6sXLJrBlTDfP/VzCUyXFFxnjUZcpK4UDHv5YUJenr6
WVjToPKKjJLyJ2E7jgwMMr0gUHlmTsW1pKkNDzA0PsXM9KxadEk9AoblXdFG
MAgrvr9/QHChGeZm5yWU1yx+fm5GUIdsOTI/MUJv/4hA8fVP5a/Vzuc/lb/t
LAxkw5dbCSjtZn1Jga3BHi7ccsbN6ippBT0s9maj99UXvEhpeu3MRfx2XsHl
L3fw0DeOtjQPNusbUtI3Trr7WXTP+QmWOIzN4a289ckWthubUjU2r9alf0p7
/F3e22FAZn4ODpdfUDogNmuomjP7DmDs7Mnza/a8bJxnrSeeDZ99hFtKAWF3
7fBLkU5aZ3nx7Aib9l7kod1tvt59hSYhrrxMjbnlXExviRe7v9qAsdkTznyy
CfvwRlrSQ9j26S7SWgYpDb/O13seMShEQIGXEYcOPMTH9TYvXF8KNBvF+tJu
TOzyBblUcmzbdgKLFKol/4SprjR5K1xTm+X978xz5Rdv/YwtO3fiGFgo4NSH
6dtb2Xf4MPqHDqJv4khbZyVHNn3BvVjVaeBotg/v/uDnfL1Dh5sRWfQ3JLHz
/G2iQv2wfupAWnoAh+7YEuftiJVPAnPTCi7s3IhlUoNY+Sgulw04Ku5zuWmF
V5pg6QNFnNm1FbfSQXqKnNm605j60QU1mD5kfrCIAzuukdwwQmu6J1u3H6am
t5cnx7ZxyyOZse4SLupuw6tqlL5iL3711pvyehz8ctQdUiQsWSLA5hhf6Bnw
5Jkxm/ftJKexhWfHt3D3ZQNjHS/R23aMxIYJqsKe8ubHmzlx8ip6mzfwJKBE
W/5iUVHAkXe+4qSRJddP72WXZRJDtSl88JN32K6ny/PQBCHqVoUlfJANB10Y
nBzhmY6474ARz+9cQ+ecBTVFERzZ/BmGDx5zeeNmTJ7lMtGVzulLe0lsnVKR
5X+n/KU9F9SxDavjtVz6bDMHzj/h7iV9vjQOoLczhz3bTYQyM8NIWSJ6H2zH
+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
PKQSijdHsU+SwPkADF8IBj6yxHB1rDgQt7EOyaW3r43ARxd4eOMlpTWNxHla
4+7fJHdtUAisDowOxcPGGNfcVjnk4amlMx1LaygHa3GLSyTE5Sk2Lln0NOfL
O+/pbc3lc2fwKmxmqj0H/b3C8wnIYHJiEN+UFNkMm3mnM62F23XB8jMDeegR
w+zaKn3VnkL5kwkNMCOtbUa93E/leK2uMn/8YmMIef0UZ/8y4a4PE2hryGt3
b55cOc0j0whxliQXX8BtmBtDvU3cvn8L54Ju1oXDVR3vSEq5OgdILl9dmyEv
p3l6RpxhWx689sDJSLigwoXuVQpKM9eDe2iksOSemDwPZmJ5TYZbM59Olhc6
sDZ/Rs2QVAIjAx87wUQ3N5hoK+CN1K88StCQkwcpnFhnvjefxMQg/O0sMIss
kx8nlOVGE56Zi+dzfb42U/fykP7WV2aJMr/MwWPXKWqeYELxFnvfWGJDXDFx
8mFmne8+NP6+MJtt+J8+guQiLCkXkcqFLc1NS2RYw8v/mJ3NBdYWOom2jpff
QzGaylGvl4ysy7Fb2gqiizMzuk5b39f9e/N3erhvCbIphz6+o22UoOVQ6+ua
NzBy1N+W9pli/OsgzPw1LWo3l5kYn9YMtSk81iTSUlt1ITcSD9PeTsqymlve
1OUJ7GhZoO08o1vg6hLT8yrtQuYnx1C3Ctc+MJPaNWgu3RCXzqm0D0Ulyzsu
hdRpA6WXppmYXtiRYfP7rO1ouSCJeEUn4u/tFPF2OXiGOS8IeO2E9mnR5nYG
hzqF4Dt/a/LktU8tVxenmVJHuWom/4fszBdQ/60IOj6IuakpsY2aKKL/h6nx
iR1PdNSXTU7Na+4yS3RUJMV987q4VGkmG9q4UmmvV5kcn9rejIV6HnnvRMM/
k2MG1TGBm3LksxTrpx1tZmIclXbJKz0CDYPoUq7r9m1zQ9ewTLrVzMyCRsDq
oZWz05qQQ3lqvA2L4Jmd9FB4XchnUhfaWuZyg/cMTOXKB9Kq0uPi6JxWqTX2
P8jSHh/qlPoqwVwhBz55Rd+GJOVZBkbGCA47glunUi4JqpvOygKzSvkG2zu7
rmRKXXNas/o/ZklMcVvA6/ib+eKaOMTm1oZu2kLztX7x1nbb4u2P/z2dUZ+z
nG/2k1IzKmXPMbYg5CZmNbO4+u8eZ+n6jhLBS6s6kODZxf8wAf1yX3HdolTi
/Kg2dyzqT2SNmJlVbo8iDs745IwcUbo8002iYxz9qm213dB1Hvm973SF0qnz
H7MlhpiY0jSRFG5uZU4ifm8HNOkpUgH3GSmZUTurmakJciwtCU9q1szq+/JJ
n1nYLnQnqfu82hjpijBLny3Mag2UGHZxmEf6fnJpkQ3VEGVeTwn1S5TvOjW3
zPpOS6KaE4Jc161kS/OsT+prMzOn0pbG18p3fXWerORYsjrU2W5bmyrZaK3p
Ui7U/cLlQyn+tTgzwawAR3GadJ1bJIVSd1fWlUTVGTBBQue61c9k59a1M1mX
KxZL4bTr65vbYdtSfXO+87e1Q2u2ttaFQGfkha6vSamYkbzy6pC0UJcfoY3c
1UlD0uuJNtxsT5M1qDlUwgTNzKt0U5VirfsqvQU8bz+KlU77ZHchURmpYtqa
ITcldVr8RP6ZBpp+X27hUZNtQVJ0OGcu3SC6dVGXPLaxpJS3cCjLnl9/+0yK
D3jn77ViWpvB6Z4JZgE9uhY+kpxVK8vqbW0vwdGzXFLEH+kku0z+a0eqB5fe
0bb1UY2W8PXH1jQIsrE6XE+Mi6/0mlRby355tIgzhw8Q36rS1auXkhNW1aXH
dN1SFtsTOG5ykppFdNctCAf2i0+cUSxrk+r+hMXuduKcEgRZvsVVa1f5Uf5Q
TRSf/Pfvcd05QWPS1ij0OsGlpy6MLq5p0PWP6CpNwvKFG0HeL9nz0XlxikOE
J2uOZ14FT7/ZjUvrvKZKuGSjRnhx8QluSaOahhC/x0SLN5HRUdg9ucoFr0pd
hp6wrsrlDVYm6rlisAe/nhXNML/PptgAue/S6hRBwr2q7ddK7ntyBNSSckU3
irZa8sq0glcX9aUnP3+umbn0UqclIIXIkChe3D2Ii/CiUuO8CXM15acH7/A6
om2736MUUz7fS0TCG1rn0BYnl0qhryyvffduQtuXR6twSxZMZZU/03wsVVZv
z7bkazc3Frd2ZGKJgRf6iUzwoHl2S7tzq4sT+LwQvoJXh0bSvyfH4020pHP5
yCFyRte1I0jBBaVvHnLC2HVnGp/8qEdOa+Kdz9TKrS3xLKXIDLY3Ut+qkML9
tZqhnBiivU+dtaPTZ3E6RvoHmJhd0dW0X1mYoqN7Wj7F20osTlZnOzNL6zol
XlfN0NM1KmvPpjBfw50K6dxolXhd+N3dHQoWVjbf+RvdsqdQDEqJGduNGFaV
U/R0j0ugpdGA/8j87ChNtXX0j6txYGFSTL2jm8GxaalMvjyd6eF+Ojv7Ua5u
anV1c3mB/s4O2ju7GRjopbOjnc6eAWHm5ukTs5ta3tjWVWFYh8R30wvrugYo
M4MK6uobmVCubveJUM2KZfQwu7qpS5fc3FylVzEiG+y/0n62ushAT5eU/aM5
d38ot+gb7O2ksakTpZi3cnKUtsZ6mrt66e1f0NKprQ2lgP1u5ta0R1atNxvL
03SNDEp7qNUy2ZZPD9MjbL0Q+/d/d4TVbeMgvSGQwrTGZ5a3VUyTpKJQ9LG4
uqVVMclGTw/3oRielvJAvlSrE7q//8MyLP//+EB+tSIT4U0meuvxdzDDXLgx
hU0Dkibaa76W4FdRl4OTpSkuPtE09cvpmVW/M4iqB70rZzl35Q7Pn0nFrCxJ
65y2k7/+vvzGdL47hm/Of8yV2w95LrzoVzZ2tI/PvqMZSd3K9q/lM9VSWUlJ
xVuKCoto7dbWRVuhraaIkvJq2kbUh2JqpI/m3iFUq6uMKbroHpgUCLFAX1cz
QxPqh7cTrTWkJqcJjZvTIOf/QDU2QGVpGVW1VcJzlAztBkNdVZSLsyxlNTW9
zSOjrIm+vhbaeidkXBtoryQ1NYfamlrqO9TVA6ZHO8gSDnFhx5gYYYOxDjGH
wSlWl+fEKWxhdEoll+KrL6+if0zJxGAdZaXllDdLpwltBZuVhUmaOjqZFlZ9
YWyItq4hloTpbq8pJr+6haHBBtp6hjXMZItJ5aRU/Vn9899jfqqXbDGL/Lbh
7Ud4/1lqCEm/lGarEAIS3tHWygzlxYW8rWhmWtNLUsrhK8rJoKy1T1igRmFt
ZhhXKOjqHWdlZVEOmRwcU8oCaq8tJC2jmLq6Glp6huRmHdsRKQu0V5bSOzZJ
T08nilHhgCnnULR0CZK8Ipc8yM8vpVtsWGtznfD7Npnqr6dU3FdX4eE/iinO
0yaG6dMM0zMmDSOsjxhmdHFVjjJsr8wlOTWbUeWKejt/gGp2iI62GoY0iV9L
k70UFBWLrepGbp60tSpMvGQ75+QI8r5uMdyc+j397EAreUUlNNT17ljRD8QY
A2pSsL7A3OK4jlcvjg7S0dzPvErJUGsnA0LNVsR+dLe1MzUzR0ZkACkFpRTk
ZhPnZYlBRIlmzL+QT9qIooa3nSOsrc1RU5JPVUs3Qw2tctTbmtCDqvK3wgC3
CKmpd0g1M0ZXdy8yTV2dpKYok7TsImbXNtXL/59ys6g6cfu+yQXWBKpWFOZT
3z5Ea3sLnZOClW3MUpqfTkZxDXK7A+Fcd3S1oxgX4hCkvrerm0khXdWcWFpH
m4ArKaBvnobat7RPLjLTVUdevtDg4WEqmjuE97hBX0s9tU3qeJaFoXoyUqRa
OurWRIrmt5SVVVDVPSE96FBP8z8x0ddOVXUf05M9ArUUgvsIB2pIQefgqCzd
xf52+TCV143qDndDz6A43AKgWzvobB+RdEVb9WZLCP1tdiZV9Qqx+W3ifE0z
MdROd+8IK8LbUXS3ic2Zkw9Mb1UhqVk5QrANNHQPq7OQuxqEXUgVkpuWq9EM
dFeLszsmT2VhrIXykjLe1rczrtqS31801AhpiPOsmu6kIC+fnoFhoYvtjE6O
o+hslbMgF2ZGaBPHR7ku0bERCrPSKK6soq6hjZHZRcYFwjT3j6BcnBU70MWI
cK6VU2MC2HsZn+oiNiRMKGMxOZlp+EuVUAvKdA+ftzblgM2ioiJq2vqYl06D
AOHRvkYB8N1i07TOxJ+oEzMHu6ms7GZ6eoguscGzi8tMjvXR2S+dXAGhQvJ5
6akUV/XvyMD7R/k+84Nd5GSkUVZTQ11jJxPziwwP9NA2NCGsgkQaGugWlEm1
usHc5KBcTGVUSgIVbsBUVxPpqRnUtkzK0DHYU4diYETmLBLITiqkYkjptI9M
Cba3TLeig/7JWaF8giu1KYRtWxV8aIzq2hpGlOva2i9ybmePpCCpVGha0G+u
L9FaXkxpRRV907OafNQOoQHDwhtR0t/XKQzaNKoFwdLETg4MzbAqbjnS1kVP
/5ScUTk12EJmmtCi6noaxRkSlIDFuQHyxA7k1nahEtfMDPSJMcdQqRYY7hFa
NTqvbsrbWk6q+G33lErWsmVhJopy0sl+2yj5Xt8R6cz4II2Ca80rFwT16PzO
kgXXYm1Js+SlDTlXt7Ewh/TscuHvbYjrhHlrb2B8R+Ly1vIs8/NyfyD1usXh
KSx6K/hLL+1tTcJkibn2KsS2LDE12kNpWRk11W3Mz629uxNvDzNXkcm9j4VX
k5RDYUYo1+8aUSrwtSziGfsNbpGZl4uJ80PKp5ap9XnC5auvmBCjR1rt4YBH
NovzPTw8eRGn5AFmWt356B//GoN7Rjw2DaJ1Uvu4YJOGwACcPbMoT7LjvHE2
y8ud2Hzxc14k1jPRE8cnF05i6xfCvQvvc8WpkInqWN798Cue2r3m5Y1jfHjY
UeBtPYf/xz/z5YVHPLB8QdngBDHPPudr9yxx9lq5fVoP19xJJmrNePfcdXJL
FSR4XiEst5Ioi8f4RlXoHOyFnjwu/eZjCocETCW8Yt+9V7Q1RPGRvh52/gFc
3/dTLkvBcPLVk7y4fArnfLXmrY83cu0nP2H3mQfcN39Kfs+kDnVX5wg3PMlZ
Qy+mlhYIvHWGY+YBQnFjuf1tNFIf6Nq0+/zy4iN8wj04+tV7eBYoyLI9xKfW
4WJTBzC+fASz2C56M9z5yS49bOy8uHNiL6cfx+1oJP5nDJXGs/vdq+QKQu18
/FNeemcLG9HA3ROfEFbThpXJF1wwdcf9hQE/179K79QA3nrv8tAvi8n1Ta25
6CuKYfevrpHfVI/D0V2Y+eczP1rLreOfENUxT2not/zgJ7/hobEhrq/TdrwT
+5/Ciiax69fHiWsYYXOkkfsHD2AckUaamztGryvld3EOdx9h5FHHsnIQq88+
JrJ+ijVFKcf3HsUqMZM4B1de+DWqd2ZjClODfbg0zrPVHMPlB08Y1GBvX7oZ
H1x5TM/UOPY3P+RRWjsLo/l8+eUFkttVtCac5NSVW7wys8DOyYvanln1NP9S
OGc9OOz9Bc8SKqmONEX/sAH+ge4c+OkvCMjsIdXPED0TP4oLs/F66EXvzAYj
RYHc+1yfIbFjnsb7+Kt392H0+AEBQW/lkkRaEUhv7w3ef5+IumHy3ljxtd5j
gvxs+dXPD+BT2UXotaP8w09P8dLMkOiCCkHLJjH76jfYJDSyPFnDlfu7iWhX
MtUUzm8+fETX/CbThV5cO3yMyPISLu06zWMrP6xvH+JnBxwZmaziyM39mPvV
MC3E+N4v/zsHv3nEK2NbGhtrcLV7SM7bGmwNrpDdOKElNFIL+SfPdnPHPo/6
TCc+/MSUwdkFEs3vcNMkgvnpt+j/rx+Is/WAx0auVIwqqfU34cylF8JCzRNi
+ClfmsbL7VfVGLyb8iB3DukZEurvzxfv7cIzv4NU1/t8fjKUhYVxTL7+Cof4
BhTZVuz+8QFsnJwxPrGbcy/DGO9L48sf/QWnbz3m8XM/mob6sbyixy37HDlH
uDz8JvYReWQH2OLonsZIWRDXDh0lslkhRPoJBobW+FjfYvdHl6msL+HghwZE
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
NKqE7u//sLTMf/PBO//X/wYqNWPT\
\>"]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Statistical Inference", "Section",
 CellChangeTimes->{{3.532540818682336*^9, 3.53254082203297*^9}}],

Cell[CellGroupData[{

Cell["Basic Properties", "Subsection",
 CellChangeTimes->{{3.5325412799019136`*^9, 3.532541281600986*^9}}],

Cell[CellGroupData[{

Cell["\<\
Biased/Unbiaed: An estimator is unbiased if its expected value is equal to \
the true value.\
\>", "Item1",
 CellChangeTimes->{{3.532541286493935*^9, 3.532541306704048*^9}}],

Cell["\<\
Consistent: an estimator is consistent if its bias and varize approach zero \
as the sample size increases.\
\>", "Item1",
 CellChangeTimes->{{3.532541307780223*^9, 3.532541335391629*^9}}],

Cell["Efficient/Minimum Variance", "Item1",
 CellChangeTimes->{{3.532541344315868*^9, 3.532541347679212*^9}}],

Cell["\<\
BLUE (best linear unbiased estimator)\
\>", "Item1",
 CellChangeTimes->{{3.532541347923695*^9, 3.532541354627651*^9}}]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell["Tests", "Subsection",
 CellChangeTimes->{{3.532541481283309*^9, 3.53254148175532*^9}}],

Cell[CellGroupData[{

Cell["T Tests", "Subsubsection",
 CellChangeTimes->{{3.532541485879978*^9, 3.5325414871223507`*^9}}],

Cell["\<\
A t-test is used when you want to check hypothesis about a single parameter \
or a linear combination of parameters (sometimes useful when you have a \
Cobb-Douglas production function and you want ot check for constant returns \
to scale, for example). \
\>", "Text",
 CellChangeTimes->{{3.532541493749714*^9, 3.532541551553384*^9}, {
  3.532541745472211*^9, 3.532541745476542*^9}}],

Cell[TextData[{
 "There is always a null hypothesis ",
 Cell[BoxData[
  FormBox[
   RowBox[{"(", 
    SubscriptBox["H", "0"], ")"}], TraditionalForm]],
  FormatType->"TraditionalForm"],
 " associated with a t-statistic. STATA will report the t-statistic and a \
p-value. That p-value is the probability of getting a t-stat greater than the \
one you did. If you are testing at an \[Alpha] = 5% level and this p-value is \
greater than 0.05 you are not in the rejection region and you cannot reject \
",
 Cell[BoxData[
  FormBox[
   SubscriptBox["H", "0"], TraditionalForm]],
  FormatType->"TraditionalForm"],
 ". If the p-value is less than 0.05 you are in the rejection region and ",
 Cell[BoxData[
  FormBox[
   SubscriptBox["H", "0"], TraditionalForm]],
  FormatType->"TraditionalForm"],
 " will be rejected. "
}], "Text",
 CellChangeTimes->{{3.5325417474546967`*^9, 3.532541875245174*^9}}],

Cell[TextData[{
 "To preform a t-test in STATA type the command ",
 StyleBox["test",
  FontSize->16,
  FontWeight->"Bold",
  FontSlant->"Italic"],
 StyleBox[". ",
  FontSize->16]
}], "Text",
 CellChangeTimes->{{3.5325418759891977`*^9, 3.5325418854941893`*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell["F-tests", "Subsubsection",
 CellChangeTimes->{{3.532541972685926*^9, 3.532541974283681*^9}}],

Cell["\<\
An F-test is used when you want to test a hypothesis that puts multiple \
constraints on parameters. \
\>", "Text",
 CellChangeTimes->{{3.532542002601451*^9, 3.532542033734619*^9}}],

Cell[TextData[{
 "The standard F-test reported with any STATA regression is the test for ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{
     SubscriptBox["H", "0"], ":", " ", 
     RowBox[{"all", " ", "slope", " ", "coefficients"}]}], " ", "=", "0"}], 
   TraditionalForm]],
  FormatType->"TraditionalForm"],
 ". There will be a F-value and a p-value given. You usually want to reject \
this hypothesis so you are going for a p-value < 0.05."
}], "Text",
 CellChangeTimes->{{3.532542034027115*^9, 3.5325421070942717`*^9}}],

Cell[TextData[{
 "This can also be done using the STATA command ",
 StyleBox["test. ",
  FontSize->16,
  FontWeight->"Bold",
  FontSlant->"Italic"],
 "But instead of giving a single parameter or a linear combination of \
parameters you give more than one equal sign in the command. (this means you \
are imposing more than one constraint one the parameters)."
}], "Text",
 CellChangeTimes->{{3.5325421076820374`*^9, 3.532542170817484*^9}}],

Cell[CellGroupData[{

Cell["Chow Test", "Subsubsubsection",
 CellChangeTimes->{{3.532542098631291*^9, 3.532542100922002*^9}}],

Cell[TextData[{
 "In this case we will look at the ",
 Cell[BoxData[
  FormBox[
   SuperscriptBox["R", "2"], TraditionalForm]]],
 "values and compare them in a ratio using an F statistic. Note that R, SSE \
without a * are before the restrictions and if they have a * are after the \
restrictions."
}], "Text",
 CellChangeTimes->{{3.5279655578132133`*^9, 3.527965588032005*^9}, 
   3.5279714865761576`*^9}],

Cell[TextData[Cell[BoxData[
 FormBox[
  RowBox[{"F", "=", " ", 
   RowBox[{
    FractionBox[
     RowBox[{
      RowBox[{"(", 
       RowBox[{"SSE", "*", 
        RowBox[{"-", "SSE"}]}], ")"}], "/", "r"}], 
     RowBox[{
      RowBox[{"(", "SSE", ")"}], "/", 
      RowBox[{"(", 
       RowBox[{"n", "-", "k"}], ")"}]}]], "=", " ", 
    RowBox[{
     RowBox[{
      FractionBox[
       RowBox[{
        SuperscriptBox["R", "2"], "-", 
        SuperscriptBox["R", 
         RowBox[{"2", "*"}]]}], 
       RowBox[{"1", "-", 
        SuperscriptBox["R", "2"]}]], 
      RowBox[{
       FractionBox[
        RowBox[{"n", "-", "k"}], "r"], "~", 
       RowBox[{"F", "(", 
        RowBox[{"r", ",", 
         RowBox[{"(", 
          RowBox[{"n", "-", "k"}], ")"}]}], ")"}]}], " ", "where", " ", "r"}],
      " ", "=", " ", 
     RowBox[{
     "#", " ", "of", " ", "restrictions", " ", "imposed", " ", "on", " ", 
      RowBox[{"model", ".", " "}]}]}]}]}], TraditionalForm]]]], "Text",
 CellChangeTimes->{{3.5279655909318886`*^9, 3.527965690167919*^9}}]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell["LR Tests", "Subsubsection",
 CellChangeTimes->{{3.532542176090131*^9, 3.532542177689043*^9}}],

Cell[TextData[{
 "The theory or idea behind this is about he same, but instead of focusing on \
the ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    SuperscriptBox["R", "2"], " ", "or", " ", "SSE"}], TraditionalForm]]],
 " it focuses on the log likelihood value l. "
}], "Text",
 CellChangeTimes->{{3.527965732526225*^9, 3.527965770714697*^9}, 
   3.527971487695441*^9}],

Cell["\<\
If your hypothesis wasn't very good you should see a rather large drop in l. \
On the other hand if your hypothesis is really good you should see very \
little change. \
\>", "Text",
 CellChangeTimes->{{3.527965771064683*^9, 3.5279658205027056`*^9}, 
   3.527971489264436*^9}],

Cell[TextData[{
 "LR = 2 (l-l*)  = ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    FractionBox[
     RowBox[{
      SuperscriptBox["SSE", "*"], "-", " ", "SSE"}], 
     SuperscriptBox["\[Sigma]", "2"]], " ", "=", " ", 
    RowBox[{
     RowBox[{"n", " ", 
      RowBox[{"ln", "(", 
       FractionBox["1", 
        RowBox[{"1", "-", 
         SuperscriptBox["R", "2"]}]], ")"}]}], " ", "=", " ", 
     RowBox[{"-", 
      RowBox[{"nln", "(", 
       RowBox[{"1", "-", 
        SuperscriptBox["R", "2"]}], ")"}]}]}]}], TraditionalForm]]],
 "~ ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    SuperscriptBox["\[Chi]", "2"], "(", "r", ")"}], TraditionalForm]]],
 ", again r is the number of restrictions."
}], "Text",
 CellChangeTimes->{{3.5279658211126814`*^9, 3.527965925318513*^9}}]
}, Closed]]
}, Open  ]]
}, Open  ]]
}, Open  ]]
},
WindowToolbars->{"RulerBar", "EditBar"},
WindowSize->{720, 796},
WindowMargins->{{Automatic, 0}, {Automatic, 0}},
FrontEndVersion->"8.0 for Mac OS X x86 (32-bit, 64-bit Kernel) (February 23, \
2011)",
StyleDefinitions->FrontEnd`FileName[{"Book"}, "Textbook.nb", 
  CharacterEncoding -> "UTF-8"]
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{}
*)
(*CellTagsIndex
CellTagsIndex->{}
*)
(*NotebookFileOutline
Notebook[{
Cell[CellGroupData[{
Cell[579, 22, 72, 1, 146, "BookChapterNumber"],
Cell[654, 25, 119, 1, 125, "BookChapterTitle"],
Cell[CellGroupData[{
Cell[798, 30, 96, 1, 54, "Section"],
Cell[CellGroupData[{
Cell[919, 35, 228, 5, 31, "Subsection"],
Cell[CellGroupData[{
Cell[1172, 44, 469, 15, 22, "Item1"],
Cell[1644, 61, 308, 10, 18, "Item1"],
Cell[1955, 73, 567, 17, 21, "Item1"]
}, Open  ]],
Cell[2537, 93, 2750, 55, 216, "Input"],
Cell[5290, 150, 357, 12, 16, "Item1"],
Cell[5650, 164, 3109, 62, 242, "Input"],
Cell[8762, 228, 260, 5, 16, "Item1"]
}, Closed]],
Cell[CellGroupData[{
Cell[9059, 238, 160, 3, 25, "Subsection"],
Cell[CellGroupData[{
Cell[9244, 245, 185, 2, 18, "Subsubsection"],
Cell[CellGroupData[{
Cell[9454, 251, 106, 1, 18, "Subsubsubsection"],
Cell[CellGroupData[{
Cell[9585, 256, 447, 16, 22, "Item2"],
Cell[10035, 274, 496, 18, 22, "Item2"],
Cell[10534, 294, 270, 8, 15, "Item2"],
Cell[10807, 304, 102, 1, 15, "Item2"],
Cell[10912, 307, 167, 3, 15, "Item2"]
}, Open  ]]
}, Open  ]]
}, Closed]],
Cell[CellGroupData[{
Cell[11140, 317, 142, 1, 18, "Subsubsection"],
Cell[CellGroupData[{
Cell[11307, 322, 108, 1, 18, "Subsubsubsection"],
Cell[CellGroupData[{
Cell[11440, 327, 447, 16, 22, "Item2"],
Cell[11890, 345, 496, 18, 22, "Item2"],
Cell[12389, 365, 253, 5, 15, "Item2"],
Cell[12645, 372, 141, 2, 15, "Item2"],
Cell[12789, 376, 264, 5, 15, "Item2"]
}, Open  ]]
}, Open  ]]
}, Closed]]
}, Closed]]
}, Open  ]],
Cell[CellGroupData[{
Cell[13138, 390, 133, 2, 54, "Section"],
Cell[13274, 394, 397, 7, 35, "Text"],
Cell[CellGroupData[{
Cell[13696, 405, 142, 2, 31, "Subsection"],
Cell[CellGroupData[{
Cell[13863, 411, 103, 1, 18, "Subsubsection"],
Cell[13969, 414, 232, 7, 22, "Text"],
Cell[14204, 423, 1068, 34, 25, "Text"],
Cell[15275, 459, 734, 24, 35, "Text"],
Cell[16012, 485, 360, 11, 25, "Text"]
}, Open  ]],
Cell[CellGroupData[{
Cell[16409, 501, 101, 1, 18, "Subsubsection"],
Cell[CellGroupData[{
Cell[16535, 506, 96, 1, 16, "Item1"],
Cell[16634, 509, 128, 3, 16, "Item1"],
Cell[16765, 514, 869, 30, 22, "Item1"],
Cell[17637, 546, 108, 1, 16, "Item1"],
Cell[17748, 549, 110, 1, 16, "Item1"]
}, Open  ]]
}, Open  ]]
}, Closed]],
Cell[CellGroupData[{
Cell[17919, 557, 169, 2, 25, "Subsection"],
Cell[CellGroupData[{
Cell[18113, 563, 105, 1, 18, "Subsubsection"],
Cell[18221, 566, 234, 7, 23, "Text"],
Cell[18458, 575, 2029, 66, 55, "Text"],
Cell[20490, 643, 1161, 38, 35, "Text"],
Cell[21654, 683, 965, 34, 42, "Text"],
Cell[22622, 719, 1156, 39, 65, "Text"]
}, Open  ]],
Cell[CellGroupData[{
Cell[23815, 763, 103, 1, 18, "Subsubsection"],
Cell[CellGroupData[{
Cell[23943, 768, 127, 3, 16, "Item1"],
Cell[24073, 773, 109, 1, 16, "Item1"]
}, Open  ]]
}, Open  ]]
}, Closed]],
Cell[CellGroupData[{
Cell[24243, 781, 438, 11, 36, "Subsection"],
Cell[24684, 794, 1055, 28, 46, "Text"],
Cell[CellGroupData[{
Cell[25764, 826, 275, 7, 22, "Subsubsection"],
Cell[26042, 835, 1134, 36, 25, "Text"]
}, Closed]],
Cell[CellGroupData[{
Cell[27213, 876, 192, 4, 18, "Subsubsection"],
Cell[27408, 882, 2190, 78, 104, "Text"]
}, Closed]],
Cell[CellGroupData[{
Cell[29635, 965, 101, 1, 18, "Subsubsection"],
Cell[CellGroupData[{
Cell[29761, 970, 104, 1, 16, "Item1"],
Cell[29868, 973, 137, 3, 16, "Item1"],
Cell[30008, 978, 91, 1, 16, "Item1"],
Cell[30102, 981, 112, 1, 16, "Item1"]
}, Open  ]]
}, Open  ]]
}, Closed]],
Cell[30253, 987, 112, 1, 25, "Subsection"]
}, Open  ]],
Cell[CellGroupData[{
Cell[30402, 993, 101, 1, 54, "Section"],
Cell[CellGroupData[{
Cell[30528, 998, 86, 1, 31, "Subsection"],
Cell[CellGroupData[{
Cell[30639, 1003, 119, 1, 18, "Subsubsection"],
Cell[30761, 1006, 5442, 110, 179, "Input"],
Cell[36206, 1118, 728, 23, 77, "Text"],
Cell[36937, 1143, 304, 7, 20, "Text"]
}, Closed]],
Cell[CellGroupData[{
Cell[37278, 1155, 108, 1, 18, "Subsubsection"],
Cell[37389, 1158, 3744, 76, 190, "Input"],
Cell[41136, 1236, 757, 23, 64, "Text"],
Cell[41896, 1261, 225, 6, 20, "Text"]
}, Closed]],
Cell[CellGroupData[{
Cell[42158, 1272, 144, 2, 18, "Subsubsection"],
Cell[42305, 1276, 4626, 91, 227, "Input"],
Cell[46934, 1369, 980, 30, 93, "Text"]
}, Closed]],
Cell[CellGroupData[{
Cell[47951, 1404, 133, 1, 18, "Subsubsection"],
Cell[48087, 1407, 2704, 47, 164, "Input"],
Cell[50794, 1456, 678, 20, 67, "Text"],
Cell[51475, 1478, 260, 6, 20, "Text"]
}, Closed]],
Cell[CellGroupData[{
Cell[51772, 1489, 104, 1, 18, "Subsubsection"],
Cell[51879, 1492, 4988, 102, 176, "Input"],
Cell[56870, 1596, 432, 15, 23, "Text"]
}, Closed]]
}, Open  ]]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[57375, 1619, 72, 1, 146, "BookChapterNumber"],
Cell[57450, 1622, 122, 1, 125, "BookChapterTitle"],
Cell[CellGroupData[{
Cell[57597, 1627, 128, 2, 54, "Section"],
Cell[CellGroupData[{
Cell[57750, 1633, 432, 8, 35, "Definition"],
Cell[58185, 1643, 470, 9, 35, "Definition"]
}, Closed]],
Cell[CellGroupData[{
Cell[58692, 1657, 197, 2, 25, "Subsection"],
Cell[58892, 1661, 672, 17, 35, "Text"],
Cell[59567, 1680, 881, 30, 20, "Text"],
Cell[60451, 1712, 262, 5, 20, "Text"],
Cell[CellGroupData[{
Cell[60738, 1721, 506, 10, 35, "Definition"],
Cell[61247, 1733, 450, 9, 35, "Definition"]
}, Closed]],
Cell[61712, 1745, 462, 8, 34, "Text"],
Cell[62177, 1755, 501, 8, 35, "Text"]
}, Closed]],
Cell[CellGroupData[{
Cell[62715, 1768, 169, 3, 25, "Subsection"],
Cell[62887, 1773, 344, 6, 35, "Text"],
Cell[CellGroupData[{
Cell[63256, 1783, 182, 2, 18, "Subsubsection"],
Cell[63441, 1787, 435, 12, 22, "Text"],
Cell[63879, 1801, 253, 5, 20, "Text"],
Cell[64135, 1808, 416, 7, 35, "Text"],
Cell[64554, 1817, 589, 16, 66, "Proposition"]
}, Closed]],
Cell[CellGroupData[{
Cell[65180, 1838, 173, 2, 18, "Subsubsection"],
Cell[65356, 1842, 273, 5, 20, "Text"],
Cell[65632, 1849, 1743, 57, 111, "Text"],
Cell[67378, 1908, 804, 22, 49, "Definition"]
}, Closed]]
}, Closed]]
}, Open  ]],
Cell[CellGroupData[{
Cell[68243, 1937, 138, 1, 54, "Section"],
Cell[68384, 1940, 310, 7, 20, "Definition"],
Cell[68697, 1949, 312, 5, 35, "Text"],
Cell[69012, 1956, 212, 4, 20, "Text"],
Cell[CellGroupData[{
Cell[69249, 1964, 158, 2, 16, "Item1"],
Cell[69410, 1968, 133, 3, 16, "Item1"],
Cell[69546, 1973, 141, 3, 16, "Item1"]
}, Closed]],
Cell[CellGroupData[{
Cell[69724, 1981, 123, 1, 25, "Subsection"],
Cell[CellGroupData[{
Cell[69872, 1986, 106, 1, 18, "Subsubsection"],
Cell[69981, 1989, 699, 20, 23, "Text"],
Cell[70683, 2011, 208, 4, 20, "Text"],
Cell[70894, 2017, 714, 22, 28, "Equation"],
Cell[71611, 2041, 289, 9, 22, "Text"],
Cell[71903, 2052, 83, 1, 20, "Text"]
}, Open  ]],
Cell[CellGroupData[{
Cell[72023, 2058, 118, 1, 18, "Subsubsection"],
Cell[72144, 2061, 413, 11, 20, "Text"],
Cell[72560, 2074, 202, 4, 20, "Text"],
Cell[72765, 2080, 648, 22, 34, "Equation"],
Cell[73416, 2104, 112, 3, 20, "Text"],
Cell[73531, 2109, 211, 4, 20, "Text"]
}, Closed]]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[73803, 2120, 143, 3, 54, "Section"],
Cell[73949, 2125, 176, 4, 20, "Text"],
Cell[74128, 2131, 139, 3, 20, "Text"],
Cell[74270, 2136, 460, 14, 30, "Equation"],
Cell[CellGroupData[{
Cell[74755, 2154, 114, 1, 31, "Subsection"],
Cell[74872, 2157, 297, 6, 20, "Text"],
Cell[75172, 2165, 250, 5, 20, "Text"]
}, Closed]],
Cell[CellGroupData[{
Cell[75459, 2175, 122, 1, 25, "Subsection"],
Cell[75584, 2178, 648, 20, 33, "Text"],
Cell[76235, 2200, 2316, 71, 45, "Text"],
Cell[78554, 2273, 716, 19, 54, "Text"]
}, Closed]],
Cell[CellGroupData[{
Cell[79307, 2297, 127, 3, 25, "Subsection"],
Cell[79437, 2302, 246, 4, 35, "Text"],
Cell[CellGroupData[{
Cell[79708, 2310, 106, 1, 18, "Subsubsection"],
Cell[79817, 2313, 123, 3, 20, "Text"],
Cell[79943, 2318, 515, 14, 49, "Equation"],
Cell[80461, 2334, 147, 3, 20, "Text"],
Cell[80611, 2339, 137, 3, 20, "Text"],
Cell[CellGroupData[{
Cell[80773, 2346, 309, 10, 16, "Item1Numbered"],
Cell[81085, 2358, 200, 4, 16, "Item1Numbered"]
}, Open  ]]
}, Closed]],
Cell[CellGroupData[{
Cell[81334, 2368, 111, 1, 18, "Subsubsection"],
Cell[81448, 2371, 545, 16, 35, "Text"]
}, Open  ]]
}, Open  ]]
}, Open  ]],
Cell[82032, 2392, 109, 1, 54, "Section"]
}, Open  ]],
Cell[CellGroupData[{
Cell[82178, 2398, 72, 1, 146, "BookChapterNumber"],
Cell[82253, 2401, 133, 3, 125, "BookChapterTitle"],
Cell[CellGroupData[{
Cell[82411, 2408, 133, 3, 54, "Section"],
Cell[CellGroupData[{
Cell[82569, 2415, 96, 1, 31, "Subsection"],
Cell[82668, 2418, 557, 9, 50, "Text"]
}, Open  ]],
Cell[CellGroupData[{
Cell[83262, 2432, 93, 1, 31, "Subsection"],
Cell[CellGroupData[{
Cell[83380, 2437, 101, 1, 18, "Subsubsection"],
Cell[83484, 2440, 662, 17, 50, "Text"],
Cell[84149, 2459, 1000, 31, 57, "Equation"]
}, Open  ]],
Cell[CellGroupData[{
Cell[85186, 2495, 148, 2, 18, "Subsubsection"],
Cell[85337, 2499, 365, 6, 35, "Text"],
Cell[85705, 2507, 962, 31, 57, "Equation"],
Cell[86670, 2540, 282, 5, 20, "Text"]
}, Open  ]],
Cell[CellGroupData[{
Cell[86989, 2550, 100, 1, 18, "Subsubsection"],
Cell[87092, 2553, 242, 4, 35, "Text"],
Cell[87337, 2559, 571, 17, 49, "Equation"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[87957, 2582, 100, 1, 31, "Subsection"],
Cell[CellGroupData[{
Cell[88082, 2587, 179, 4, 16, "Item1"],
Cell[88264, 2593, 104, 1, 16, "Item1"],
Cell[88371, 2596, 112, 1, 16, "Item1"],
Cell[88486, 2599, 154, 3, 16, "Item1"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[88689, 2608, 93, 1, 31, "Subsection"],
Cell[88785, 2611, 469, 10, 35, "Text"],
Cell[89257, 2623, 170, 4, 20, "Text"],
Cell[89430, 2629, 218, 4, 20, "Text"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[89697, 2639, 137, 3, 54, "Section"],
Cell[89837, 2644, 96, 1, 31, "Subsection"],
Cell[89936, 2647, 93, 1, 25, "Subsection"],
Cell[CellGroupData[{
Cell[90054, 2652, 100, 1, 25, "Subsection"],
Cell[90157, 2655, 474, 11, 40, "Text"]
}, Open  ]],
Cell[90646, 2669, 93, 1, 31, "Subsection"]
}, Open  ]],
Cell[CellGroupData[{
Cell[90776, 2675, 137, 3, 54, "Section"],
Cell[90916, 2680, 2750, 55, 216, "Input"],
Cell[CellGroupData[{
Cell[93691, 2739, 101, 1, 31, "Subsection"],
Cell[93795, 2742, 210, 4, 20, "Text"]
}, Open  ]],
Cell[CellGroupData[{
Cell[94042, 2751, 96, 1, 31, "Subsection"],
Cell[94141, 2754, 132, 3, 20, "Text"]
}, Open  ]],
Cell[CellGroupData[{
Cell[94310, 2762, 93, 1, 31, "Subsection"],
Cell[94406, 2765, 229, 4, 20, "Text"],
Cell[CellGroupData[{
Cell[94660, 2773, 114, 1, 18, "Subsubsection"],
Cell[94777, 2776, 597, 19, 23, "Text"],
Cell[95377, 2797, 155, 3, 20, "Text"],
Cell[95535, 2802, 518, 16, 23, "Text"],
Cell[96056, 2820, 565, 20, 39, "Text"],
Cell[96624, 2842, 340, 8, 20, "Text"]
}, Open  ]],
Cell[96979, 2853, 110, 1, 18, "Subsubsection"]
}, Open  ]],
Cell[CellGroupData[{
Cell[97126, 2859, 100, 1, 31, "Subsection"],
Cell[97229, 2862, 149, 4, 20, "Text"],
Cell[97381, 2868, 159, 2, 20, "Text"],
Cell[97543, 2872, 116, 1, 20, "Text"],
Cell[97662, 2875, 100, 1, 20, "Text"],
Cell[97765, 2878, 229, 5, 20, "Text"]
}, Open  ]],
Cell[CellGroupData[{
Cell[98031, 2888, 93, 1, 31, "Subsection"],
Cell[98127, 2891, 1040, 33, 55, "Text"],
Cell[99170, 2926, 208, 5, 20, "Text"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[99427, 2937, 133, 3, 54, "Section"],
Cell[99563, 2942, 227, 5, 20, "Text"],
Cell[99793, 2949, 3109, 62, 242, "Input"],
Cell[CellGroupData[{
Cell[102927, 3015, 96, 1, 31, "Subsection"],
Cell[103026, 3018, 133, 3, 20, "Text"]
}, Open  ]],
Cell[CellGroupData[{
Cell[103196, 3026, 93, 1, 31, "Subsection"],
Cell[103292, 3029, 294, 5, 35, "Text"],
Cell[CellGroupData[{
Cell[103611, 3038, 103, 1, 18, "Subsubsection"],
Cell[103717, 3041, 376, 11, 20, "Text"],
Cell[104096, 3054, 131, 3, 20, "Text"],
Cell[104230, 3059, 934, 27, 52, "Equation"],
Cell[105167, 3088, 264, 5, 20, "Text"],
Cell[105434, 3095, 259, 5, 35, "Text"]
}, Open  ]],
Cell[CellGroupData[{
Cell[105730, 3105, 105, 1, 18, "Subsubsection"],
Cell[105838, 3108, 197, 4, 20, "Text"],
Cell[106038, 3114, 280, 5, 35, "Text"]
}, Open  ]],
Cell[CellGroupData[{
Cell[106355, 3124, 137, 3, 18, "Subsubsection"],
Cell[CellGroupData[{
Cell[106517, 3131, 109, 1, 18, "Subsubsubsection"],
Cell[106629, 3134, 125, 3, 20, "Text"],
Cell[106757, 3139, 553, 17, 65, "Equation"]
}, Open  ]],
Cell[CellGroupData[{
Cell[107347, 3161, 117, 1, 18, "Subsubsubsection"],
Cell[107467, 3164, 232, 4, 20, "Text"],
Cell[107702, 3170, 233, 4, 35, "Text"]
}, Open  ]]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[107996, 3181, 100, 1, 31, "Subsection"],
Cell[108099, 3184, 110, 1, 20, "Text"],
Cell[108212, 3187, 107, 1, 20, "Text"],
Cell[108322, 3190, 580, 18, 27, "Text"],
Cell[108905, 3210, 101, 1, 20, "Text"],
Cell[109009, 3213, 577, 20, 23, "Text"]
}, Open  ]],
Cell[CellGroupData[{
Cell[109623, 3238, 93, 1, 31, "Subsection"],
Cell[CellGroupData[{
Cell[109741, 3243, 115, 1, 18, "Subsubsection"],
Cell[109859, 3246, 249, 5, 20, "Text"],
Cell[110111, 3253, 1136, 36, 81, "Text"],
Cell[111250, 3291, 560, 20, 20, "Text"],
Cell[111813, 3313, 655, 21, 20, "Text"]
}, Open  ]],
Cell[CellGroupData[{
Cell[112505, 3339, 98, 1, 18, "Subsubsection"],
Cell[112606, 3342, 583, 15, 56, "Text"]
}, Open  ]]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[113250, 3364, 125, 1, 54, "Section"],
Cell[113378, 3367, 245, 5, 20, "Text"],
Cell[113626, 3374, 181, 4, 20, "Text"],
Cell[113810, 3380, 143, 3, 20, "Text"],
Cell[CellGroupData[{
Cell[113978, 3387, 96, 1, 31, "Subsection"],
Cell[114077, 3390, 103, 1, 20, "Text"]
}, Open  ]],
Cell[CellGroupData[{
Cell[114217, 3396, 93, 1, 31, "Subsection"],
Cell[CellGroupData[{
Cell[114335, 3401, 104, 1, 18, "Subsubsection"],
Cell[114442, 3404, 224, 6, 20, "Text"],
Cell[114669, 3412, 260, 8, 20, "Text"],
Cell[114932, 3422, 188, 5, 20, "Text"],
Cell[115123, 3429, 299, 5, 35, "Text"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[115471, 3440, 100, 1, 31, "Subsection"],
Cell[115574, 3443, 97, 1, 20, "Text"],
Cell[115674, 3446, 103, 1, 20, "Text"],
Cell[115780, 3449, 101, 1, 20, "Text"],
Cell[115884, 3452, 123, 3, 20, "Text"]
}, Open  ]],
Cell[116022, 3458, 93, 1, 31, "Subsection"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[116164, 3465, 98, 1, 146, "BookChapterNumber"],
Cell[116265, 3468, 110, 1, 125, "BookChapterTitle"],
Cell[CellGroupData[{
Cell[116400, 3473, 96, 1, 54, "Section"],
Cell[CellGroupData[{
Cell[116521, 3478, 1158, 35, 58, "Item1"],
Cell[117682, 3515, 1197, 32, 46, "Item1"],
Cell[118882, 3549, 348, 7, 29, "Item1"],
Cell[119233, 3558, 229, 5, 16, "Item1"],
Cell[119465, 3565, 232, 6, 16, "Item1"]
}, Open  ]],
Cell[119712, 3574, 858, 25, 71, "Text"],
Cell[CellGroupData[{
Cell[120595, 3603, 547, 10, 55, "Item1"],
Cell[121145, 3615, 573, 10, 55, "Item1"],
Cell[121721, 3627, 836, 28, 20, "Item1"],
Cell[122560, 3657, 217, 5, 16, "Item1"],
Cell[122780, 3664, 353, 7, 29, "Item1"],
Cell[123136, 3673, 297, 6, 29, "Item1"],
Cell[123436, 3681, 459, 8, 42, "Item1"],
Cell[123898, 3691, 563, 10, 42, "Item1"],
Cell[124464, 3703, 985, 28, 66, "Item1"],
Cell[125452, 3733, 815, 20, 54, "Item1"],
Cell[126270, 3755, 290, 6, 29, "Item1"],
Cell[126563, 3763, 409, 8, 42, "Item1"],
Cell[126975, 3773, 326, 7, 29, "Item1"],
Cell[127304, 3782, 626, 11, 55, "Item1"],
Cell[127933, 3795, 219, 6, 16, "Item1"],
Cell[128155, 3803, 367, 7, 29, "Item1"],
Cell[128525, 3812, 412, 8, 29, "Item1"],
Cell[128940, 3822, 355, 8, 29, "Item1"],
Cell[129298, 3832, 697, 17, 48, "Item1"],
Cell[129998, 3851, 578, 11, 42, "Item1"],
Cell[130579, 3864, 1691, 50, 64, "Item1"],
Cell[132273, 3916, 413, 8, 42, "Item1"],
Cell[132689, 3926, 624, 11, 42, "Item1"],
Cell[133316, 3939, 368, 7, 29, "Item1"],
Cell[133687, 3948, 625, 11, 42, "Item1"],
Cell[134315, 3961, 1448, 46, 64, "Item1"],
Cell[135766, 4009, 429, 9, 29, "Item1"],
Cell[136198, 4020, 487, 9, 42, "Item1"],
Cell[136688, 4031, 771, 22, 40, "Item1"],
Cell[137462, 4055, 341, 7, 29, "Item1"],
Cell[137806, 4064, 738, 20, 35, "Item1"],
Cell[138547, 4086, 409, 7, 42, "Item1"],
Cell[138959, 4095, 201, 5, 16, "Item1"],
Cell[139163, 4102, 472, 16, 20, "Item1"],
Cell[139638, 4120, 864, 27, 23, "Item1"]
}, Open  ]],
Cell[140517, 4150, 1685, 52, 105, "Text"],
Cell[142205, 4204, 192, 5, 16, "Item1"],
Cell[142400, 4211, 236065, 3876, 384, 89841, 1477, "CachedBoxData", \
"BoxData", "Text"]
}, Open  ]],
Cell[CellGroupData[{
Cell[378502, 8092, 105, 1, 54, "Section"],
Cell[CellGroupData[{
Cell[378632, 8097, 106, 1, 31, "Subsection"],
Cell[CellGroupData[{
Cell[378763, 8102, 183, 4, 16, "Item1"],
Cell[378949, 8108, 198, 4, 16, "Item1"],
Cell[379150, 8114, 109, 1, 16, "Item1"],
Cell[379262, 8117, 128, 3, 16, "Item1"]
}, Open  ]]
}, Closed]],
Cell[CellGroupData[{
Cell[379439, 8126, 92, 1, 25, "Subsection"],
Cell[CellGroupData[{
Cell[379556, 8131, 100, 1, 18, "Subsubsection"],
Cell[379659, 8134, 393, 7, 35, "Text"],
Cell[380055, 8143, 893, 23, 65, "Text"],
Cell[380951, 8168, 260, 9, 24, "Text"]
}, Open  ]],
Cell[CellGroupData[{
Cell[381248, 8182, 98, 1, 18, "Subsubsection"],
Cell[381349, 8185, 191, 4, 20, "Text"],
Cell[381543, 8191, 529, 13, 35, "Text"],
Cell[382075, 8206, 439, 10, 39, "Text"],
Cell[CellGroupData[{
Cell[382539, 8220, 103, 1, 18, "Subsubsubsection"],
Cell[382645, 8223, 406, 10, 38, "Text"],
Cell[383054, 8235, 1046, 33, 36, "Text"]
}, Open  ]]
}, Closed]],
Cell[CellGroupData[{
Cell[384149, 8274, 99, 1, 18, "Subsubsection"],
Cell[384251, 8277, 366, 10, 23, "Text"],
Cell[384620, 8289, 286, 6, 20, "Text"],
Cell[384909, 8297, 775, 26, 34, "Text"]
}, Closed]]
}, Open  ]]
}, Open  ]]
}, Open  ]]
}
]
*)

(* End of internal cache information *)
