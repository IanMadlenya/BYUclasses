(* Content-type: application/vnd.wolfram.mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='Mathematica 8.0' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       157,          7]
NotebookDataLength[    568057,      11594]
NotebookOptionsPosition[    558031,      11243]
NotebookOutlinePosition[    558375,      11258]
CellTagsIndexPosition[    558332,      11255]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{

Cell[CellGroupData[{
Cell["Math 334 Homework", "Title",
 CellChangeTimes->{{3.523702890543723*^9, 3.523702892964733*^9}}],

Cell[CellGroupData[{

Cell["Assignment 1: 1.1-1.3", "Section",
 CellChangeTimes->{{3.52422744215357*^9, 3.524227447455699*^9}}],

Cell[CellGroupData[{

Cell["1.2", "Subsection",
 CellChangeTimes->{{3.524227452328568*^9, 3.5242274532881927`*^9}}],

Cell[CellGroupData[{

Cell["9", "Subsubsection",
 CellChangeTimes->{3.5242274589041243`*^9}],

Cell[TextData[{
 Cell[BoxData[
  FormBox[
   RowBox[{
    FractionBox["dv", 
     RowBox[{"dt", " "}]], " ", "=", " ", 
    RowBox[{"9.8", " ", "-", " ", 
     RowBox[{"(", 
      RowBox[{"v", "/", "5"}], ")"}]}]}], TraditionalForm]],
  FormatType->"TraditionalForm"],
 "\nv = ",
 Cell[BoxData[
  FormBox[
   RowBox[{"49", "-", 
    RowBox[{"49", 
     SuperscriptBox["e", 
      RowBox[{
       RowBox[{"-", "t"}], "/", "5"}]]}]}], TraditionalForm]],
  FormatType->"TraditionalForm"],
 "\nFind time it takes to get to .98 of terminal velocity (49 /sec)"
}], "Text",
 CellChangeTimes->{{3.524227477631196*^9, 3.524227545284638*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"DSolve", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{
      RowBox[{
       RowBox[{"y", "'"}], "[", "x", "]"}], "\[Equal]", 
      RowBox[{"9.8", "-", 
       FractionBox[
        RowBox[{"y", "[", "x", "]"}], "5"]}]}], ",", 
     RowBox[{
      RowBox[{"y", "[", "0", "]"}], "\[Equal]", "0"}]}], "}"}], ",", 
   RowBox[{"y", "[", "x", "]"}], ",", "x"}], "]"}]], "Input",
 CellChangeTimes->{{3.524227683438724*^9, 3.524227778055496*^9}, {
  3.5242278355278*^9, 3.524227901660585*^9}, {3.524227966745039*^9, 
  3.524228071031537*^9}}],

Cell[BoxData[
 FormBox[
  RowBox[{"{", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"y", "(", "x", ")"}], "\[Rule]", 
     RowBox[{
      SuperscriptBox["\[ExponentialE]", 
       RowBox[{
        RowBox[{"-", "0.2`"}], " ", "x"}]], " ", 
      RowBox[{"(", 
       RowBox[{
        RowBox[{"49.`", " ", 
         SuperscriptBox["\[ExponentialE]", 
          RowBox[{"0.2`", " ", "x"}]]}], "-", "49.`"}], ")"}]}]}], "}"}], 
   "}"}], TraditionalForm]], "Output",
 CellChangeTimes->{{3.5242277151098022`*^9, 3.524227778466423*^9}, {
   3.524227838339855*^9, 3.524227857915086*^9}, 3.524227902054528*^9, {
   3.524227975612262*^9, 3.524227978185976*^9}, {3.5242280112613897`*^9, 
   3.524228073401908*^9}}]
}, Closed]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{".98", "*", "49"}]], "Input",
 CellChangeTimes->{{3.524227554059359*^9, 3.524227557237466*^9}}],

Cell[BoxData[
 FormBox["48.019999999999996`", TraditionalForm]], "Output",
 CellChangeTimes->{3.524227558134371*^9}]
}, Closed]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{".98", "/", "49"}]], "Input",
 CellChangeTimes->{{3.524227598681954*^9, 3.52422760075616*^9}}],

Cell[BoxData[
 FormBox["0.019999999999999997`", TraditionalForm]], "Output",
 CellChangeTimes->{3.5242276012760773`*^9, 3.524228195817458*^9}]
}, Closed]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Log", "[", "%", "]"}]], "Input",
 CellChangeTimes->{{3.5242276161768627`*^9, 3.524227620180106*^9}}],

Cell[BoxData[
 FormBox[
  RowBox[{"-", "3.9120230054281464`"}], TraditionalForm]], "Output",
 CellChangeTimes->{3.524227620672188*^9, 3.524228196766966*^9}]
}, Closed]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"%", "*", "5"}]], "Input",
 CellChangeTimes->{{3.5242276289173937`*^9, 3.524227629786665*^9}}],

Cell[BoxData[
 FormBox[
  RowBox[{"-", "19.560115027140732`"}], TraditionalForm]], "Output",
 CellChangeTimes->{3.524227633089006*^9, 3.524228197502001*^9}]
}, Closed]],

Cell[CellGroupData[{

Cell[BoxData[
 NamespaceBox["WolframAlphaQueryResults",
  DynamicModuleBox[{Typeset`q$$ = 
   "Integrate[49 - 49*Exp[-x/5], {x, 0, 19.56}]", Typeset`opts$$ = {
   AppearanceElements -> {"Extrusion", "Warnings", "Assumptions", "Pods"}, 
    Asynchronous -> All, PodStates -> {"IndefiniteIntegral__Show steps"}, 
    Method -> {
     "ExtrusionChosen" -> {
       "Input", "Definite integral", 1, 1, "Input", 
        "Integrate[49 - 49/E^(x/5), {x, 0, 19.56}]"}, "ExtrusionOpen" -> 
      False, "Formats" -> {
       "cell", "minput", "moutput", "msound", "dataformats"}}}, 
   Typeset`elements$$ = {"Extrusion", "Warnings", "Assumptions", "Pods"}, 
   Typeset`pod1$$ = XMLElement[
   "pod", {"title" -> "Definite integral", "scanner" -> "Integral", "id" -> 
     "Input", "position" -> "100", "error" -> "false", "numsubpods" -> "1", 
     "primary" -> "true"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {"Integrate[49 - 49/E^(x/5), {x, 0, 19.56}]"}], 
       XMLElement["moutput", {}, {"718.34"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            RowBox[{
              TagBox[
               RowBox[{
                 SubsuperscriptBox["\[Integral]", "0", "19.56`"], 
                 RowBox[{
                   RowBox[{"(", 
                    RowBox[{"49", "-", 
                    RowBox[{"49", " ", 
                    SuperscriptBox["\[ExponentialE]", 
                    RowBox[{
                    RowBox[{"-", "x"}], "/", "5"}]]}]}], ")"}], 
                   RowBox[{"\[DifferentialD]", "x"}]}]}], HoldForm], 
              "\[LongEqual]", "718.3401127278952`"}], TraditionalForm]], 
          "Output"]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata,formuladata"}]}\
]}], Typeset`pod2$$, Typeset`pod3$$, Typeset`pod4$$, Typeset`pod5$$, 
   Typeset`pod6$$, Typeset`pod7$$, Typeset`pod8$$, Typeset`pod9$$, 
   Typeset`pod10$$, Typeset`pod11$$, Typeset`pod12$$, Typeset`pod13$$, 
   Typeset`pod14$$, Typeset`pod15$$, Typeset`pod16$$, Typeset`pod17$$, 
   Typeset`pod18$$, Typeset`pod19$$, Typeset`pod20$$, Typeset`pod21$$, 
   Typeset`pod22$$, Typeset`pod23$$, Typeset`pod24$$, Typeset`pod25$$, 
   Typeset`pod26$$, Typeset`pod27$$, Typeset`pod28$$, Typeset`pod29$$, 
   Typeset`pod30$$, Typeset`pod31$$, Typeset`aux1$$ = {
   True, False, {False}, True}, Typeset`aux2$$ = {True, False, {False}, True},
    Typeset`aux3$$ = {True, False, {False}, True}, Typeset`aux4$$ = {
   True, False, {False}, True}, Typeset`aux5$$ = {True, False, {False}, True},
    Typeset`aux6$$ = {True, False, {False}, True}, Typeset`aux7$$ = {
   True, False, {False}, True}, Typeset`aux8$$ = {True, False, {False}, True},
    Typeset`aux9$$ = {True, False, {False}, True}, Typeset`aux10$$ = {
   True, False, {False}, True}, Typeset`aux11$$ = {
   True, False, {False}, True}, Typeset`aux12$$ = {
   True, False, {False}, True}, Typeset`aux13$$ = {
   True, False, {False}, True}, Typeset`aux14$$ = {
   True, False, {False}, True}, Typeset`aux15$$ = {
   True, False, {False}, True}, Typeset`aux16$$ = {
   True, False, {False}, True}, Typeset`aux17$$ = {
   True, False, {False}, True}, Typeset`aux18$$ = {
   True, False, {False}, True}, Typeset`aux19$$ = {
   True, False, {False}, True}, Typeset`aux20$$ = {
   True, False, {False}, True}, Typeset`aux21$$ = {
   True, False, {False}, True}, Typeset`aux22$$ = {
   True, False, {False}, True}, Typeset`aux23$$ = {
   True, False, {False}, True}, Typeset`aux24$$ = {
   True, False, {False}, True}, Typeset`aux25$$ = {
   True, False, {False}, True}, Typeset`aux26$$ = {
   True, False, {False}, True}, Typeset`aux27$$ = {
   True, False, {False}, True}, Typeset`aux28$$ = {
   True, False, {False}, True}, Typeset`aux29$$ = {
   True, False, {False}, True}, Typeset`aux30$$ = {
   True, False, {False}, True}, Typeset`aux31$$ = {
   True, False, {False}, True}, Typeset`asyncpods$$ = {}, 
   Typeset`nonpods$$ = {}, Typeset`initdone$$ = True, 
   Typeset`queryinfo$$ = {{
    "success" -> "true", "error" -> "false", "numpods" -> "1", "datatypes" -> 
     "", "timedout" -> 
     "Integral,MultiDimensionalIntegration,Series,Simplification", "timing" -> 
     "3.679", "parsetiming" -> "0.377", "parsetimedout" -> "false", 
     "recalculate" -> 
     "http://www4d.wolframalpha.com/api/v2/recalc.jsp?id=\
MSP38819h42dbgd9cibdad000037hg7d8738ib4c52&s=44", "id" -> 
     "MSP38919h42dbgd9cibdad00005fdhe56742a49c0c&s=44", "related" -> 
     "http://www4d.wolframalpha.com/api/v2/relatedQueries.jsp?id=\
MSP39019h42dbgd9cibdad00004d10hi103256c2ig&s=44", "version" -> "2.1"}, {
    "success" -> "true", "error" -> "false", "numpods" -> "0", "datatypes" -> 
     "", "timedout" -> "MultiDimensionalIntegration,Series,Simplification", 
     "timing" -> "5.167", "parsetiming" -> "0.", "parsetimedout" -> "false", 
     "recalculate" -> "", "id" -> "", "related" -> "", "version" -> "2.1"}}, 
   Typeset`sessioninfo$$ = {
   "TimeZone" -> -6., 
    "Date" -> {2011, 9, 5, 10, 19, 7.459835`7.625304208908069}, "Line" -> 33, 
    "SessionID" -> 23094492889738470703}, Typeset`showpods$$ = {1}, 
   Typeset`failedpods$$ = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16,
    17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31}, 
   Typeset`chosen$$ = {
   "Input", "Definite integral", 1, 1, "Input", 
    "Integrate[49 - 49/E^(x/5), {x, 0, 19.56}]"}, Typeset`open$$ = False, 
   Typeset`newq$$ = "Integrate[49 - 49*Exp[-x/5], {x, 0, 19.56}]"}, 
   DynamicBox[ToBoxes[
     AlphaIntegration`FormatAlphaResults[
      Dynamic[{
       2, {Typeset`pod1$$, Typeset`pod2$$, Typeset`pod3$$, Typeset`pod4$$, 
         Typeset`pod5$$, Typeset`pod6$$, Typeset`pod7$$, Typeset`pod8$$, 
         Typeset`pod9$$, Typeset`pod10$$, Typeset`pod11$$, Typeset`pod12$$, 
         Typeset`pod13$$, Typeset`pod14$$, Typeset`pod15$$, Typeset`pod16$$, 
         Typeset`pod17$$, Typeset`pod18$$, Typeset`pod19$$, Typeset`pod20$$, 
         Typeset`pod21$$, Typeset`pod22$$, Typeset`pod23$$, Typeset`pod24$$, 
         Typeset`pod25$$, Typeset`pod26$$, Typeset`pod27$$, Typeset`pod28$$, 
         Typeset`pod29$$, Typeset`pod30$$, Typeset`pod31$$}, {
        Typeset`aux1$$, Typeset`aux2$$, Typeset`aux3$$, Typeset`aux4$$, 
         Typeset`aux5$$, Typeset`aux6$$, Typeset`aux7$$, Typeset`aux8$$, 
         Typeset`aux9$$, Typeset`aux10$$, Typeset`aux11$$, Typeset`aux12$$, 
         Typeset`aux13$$, Typeset`aux14$$, Typeset`aux15$$, Typeset`aux16$$, 
         Typeset`aux17$$, Typeset`aux18$$, Typeset`aux19$$, Typeset`aux20$$, 
         Typeset`aux21$$, Typeset`aux22$$, Typeset`aux23$$, Typeset`aux24$$, 
         Typeset`aux25$$, Typeset`aux26$$, Typeset`aux27$$, Typeset`aux28$$, 
         Typeset`aux29$$, Typeset`aux30$$, Typeset`aux31$$}, Typeset`chosen$$,
         Typeset`open$$, Typeset`elements$$, Typeset`q$$, Typeset`opts$$, 
        Typeset`nonpods$$, Typeset`queryinfo$$, Typeset`sessioninfo$$, 
        Typeset`showpods$$, Typeset`failedpods$$, Typeset`newq$$}]], 
     StandardForm],
    ImageSizeCache->{330., {48., 18.}},
    TrackedSymbols:>{Typeset`showpods$$, Typeset`failedpods$$}],
   DynamicModuleValues:>{},
   Initialization:>If[
     Not[Typeset`initdone$$], AlphaIntegration`DoAsyncInitialization[
       Hold[{
        2, {Typeset`pod1$$, Typeset`pod2$$, Typeset`pod3$$, Typeset`pod4$$, 
          Typeset`pod5$$, Typeset`pod6$$, Typeset`pod7$$, Typeset`pod8$$, 
          Typeset`pod9$$, Typeset`pod10$$, Typeset`pod11$$, Typeset`pod12$$, 
          Typeset`pod13$$, Typeset`pod14$$, Typeset`pod15$$, Typeset`pod16$$, 
          Typeset`pod17$$, Typeset`pod18$$, Typeset`pod19$$, Typeset`pod20$$, 
          Typeset`pod21$$, Typeset`pod22$$, Typeset`pod23$$, Typeset`pod24$$, 
          Typeset`pod25$$, Typeset`pod26$$, Typeset`pod27$$, Typeset`pod28$$, 
          Typeset`pod29$$, Typeset`pod30$$, Typeset`pod31$$}, {
         Typeset`aux1$$, Typeset`aux2$$, Typeset`aux3$$, Typeset`aux4$$, 
          Typeset`aux5$$, Typeset`aux6$$, Typeset`aux7$$, Typeset`aux8$$, 
          Typeset`aux9$$, Typeset`aux10$$, Typeset`aux11$$, Typeset`aux12$$, 
          Typeset`aux13$$, Typeset`aux14$$, Typeset`aux15$$, Typeset`aux16$$, 
          Typeset`aux17$$, Typeset`aux18$$, Typeset`aux19$$, Typeset`aux20$$, 
          Typeset`aux21$$, Typeset`aux22$$, Typeset`aux23$$, Typeset`aux24$$, 
          Typeset`aux25$$, Typeset`aux26$$, Typeset`aux27$$, Typeset`aux28$$, 
          Typeset`aux29$$, Typeset`aux30$$, Typeset`aux31$$}, 
         Typeset`chosen$$, Typeset`open$$, Typeset`elements$$, Typeset`q$$, 
         Typeset`opts$$, Typeset`nonpods$$, Typeset`queryinfo$$, 
         Typeset`sessioninfo$$, Typeset`showpods$$, Typeset`failedpods$$, 
         Typeset`newq$$, 
         "http://www4d.wolframalpha.com/api/v2/recalc.jsp?id=\
MSP38819h42dbgd9cibdad000037hg7d8738ib4c52&s=44", Typeset`asyncpods$$}]]; 
     Typeset`asyncpods$$ = {}; Typeset`initdone$$ = True],
   SynchronousInitialization->False],
  BaseStyle->{Deployed -> True},
  DeleteWithContents->True,
  Editable->False,
  SelectWithContents->True]], "WolframAlphaShortInput"],

Cell[BoxData[
 FormBox["718.3401127278945`", TraditionalForm]], "Output",
 CellChangeTimes->{{3.524228201593831*^9, 3.524228245022724*^9}, 
   3.524228282367902*^9, 3.524228347796829*^9}]
}, Closed]]
}, Closed]]
}, Closed]],

Cell[CellGroupData[{

Cell["1.3", "Subsection",
 CellChangeTimes->{{3.524228846500822*^9, 3.524228846684111*^9}}],

Cell[CellGroupData[{

Cell["14", "Subsubsection",
 CellChangeTimes->{{3.524228851083425*^9, 3.5242288511319113`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"func", " ", "=", " ", 
  RowBox[{
   RowBox[{
    RowBox[{"Exp", "[", 
     SuperscriptBox["t", "2"], "]"}], "*", 
    RowBox[{"Integrate", "[", 
     RowBox[{
      RowBox[{"Exp", "[", 
       RowBox[{"-", 
        SuperscriptBox["s", "2"]}], "]"}], ",", 
      RowBox[{"{", 
       RowBox[{"s", ",", "0", ",", "t"}], "}"}]}], "]"}]}], "+", 
   RowBox[{"Exp", "[", 
    SuperscriptBox["t", "2"], "]"}]}]}]], "Input",
 CellChangeTimes->{{3.5243181713329887`*^9, 3.5243182237199593`*^9}, {
  3.524318506115552*^9, 3.5243185198726273`*^9}}],

Cell[BoxData[
 FormBox[
  RowBox[{
   RowBox[{
    FractionBox["1", "2"], " ", 
    SqrtBox["\[Pi]"], " ", 
    SuperscriptBox["\[ExponentialE]", 
     SuperscriptBox["t", "2"]], " ", 
    RowBox[{"erf", "(", "t", ")"}]}], "+", 
   SuperscriptBox["\[ExponentialE]", 
    SuperscriptBox["t", "2"]]}], TraditionalForm]], "Output",
 CellChangeTimes->{{3.5243185092208357`*^9, 3.524318521057376*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"D", "[", 
  RowBox[{"func", ",", "t"}], "]"}]], "Input",
 CellChangeTimes->{{3.5243186779817057`*^9, 3.524318683729719*^9}}],

Cell[BoxData[
 FormBox[
  RowBox[{
   RowBox[{
    SqrtBox["\[Pi]"], " ", 
    SuperscriptBox["\[ExponentialE]", 
     SuperscriptBox["t", "2"]], " ", "t", " ", 
    RowBox[{"erf", "(", "t", ")"}]}], "+", 
   RowBox[{"2", " ", 
    SuperscriptBox["\[ExponentialE]", 
     SuperscriptBox["t", "2"]], " ", "t"}], "+", "1"}], 
  TraditionalForm]], "Output",
 CellChangeTimes->{3.524318684405427*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"2", "*", "t", "*", "func"}]], "Input",
 CellChangeTimes->{{3.524318716926414*^9, 3.524318719328467*^9}}],

Cell[BoxData[
 FormBox[
  RowBox[{"2", " ", "t", " ", 
   RowBox[{"(", 
    RowBox[{
     RowBox[{
      FractionBox["1", "2"], " ", 
      SqrtBox["\[Pi]"], " ", 
      SuperscriptBox["\[ExponentialE]", 
       SuperscriptBox["t", "2"]], " ", 
      RowBox[{"erf", "(", "t", ")"}]}], "+", 
     SuperscriptBox["\[ExponentialE]", 
      SuperscriptBox["t", "2"]]}], ")"}]}], TraditionalForm]], "Output",
 CellChangeTimes->{3.524318720079288*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"D", "[", 
   RowBox[{"func", ",", "t"}], "]"}], " ", "-", " ", 
  RowBox[{"2", "*", "t", "*", "func"}]}]], "Input",
 CellChangeTimes->{3.524318829279009*^9}],

Cell[BoxData[
 FormBox[
  RowBox[{
   RowBox[{
    SqrtBox["\[Pi]"], " ", 
    SuperscriptBox["\[ExponentialE]", 
     SuperscriptBox["t", "2"]], " ", "t", " ", 
    RowBox[{"erf", "(", "t", ")"}]}], "-", 
   RowBox[{"2", " ", "t", " ", 
    RowBox[{"(", 
     RowBox[{
      RowBox[{
       FractionBox["1", "2"], " ", 
       SqrtBox["\[Pi]"], " ", 
       SuperscriptBox["\[ExponentialE]", 
        SuperscriptBox["t", "2"]], " ", 
       RowBox[{"erf", "(", "t", ")"}]}], "+", 
      SuperscriptBox["\[ExponentialE]", 
       SuperscriptBox["t", "2"]]}], ")"}]}], "+", 
   RowBox[{"2", " ", 
    SuperscriptBox["\[ExponentialE]", 
     SuperscriptBox["t", "2"]], " ", "t"}], "+", "1"}], 
  TraditionalForm]], "Output",
 CellChangeTimes->{3.524318829623981*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Simplify", "[", 
  RowBox[{
   RowBox[{"D", "[", 
    RowBox[{"func", ",", "t"}], "]"}], " ", "-", " ", 
   RowBox[{"2", "*", "t", "*", "func"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.524318233224098*^9, 3.524318285101767*^9}, {
  3.5243188106559258`*^9, 3.524318815943486*^9}}],

Cell[BoxData[
 FormBox["1", TraditionalForm]], "Output",
 CellChangeTimes->{{3.524318257981*^9, 3.524318285278125*^9}, 
   3.524318816334861*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"DSolve", "[", 
  RowBox[{
   RowBox[{
    RowBox[{
     RowBox[{
      RowBox[{"y", "'"}], "[", "t", "]"}], "-", 
     RowBox[{"2", "*", "t", "*", 
      RowBox[{"y", "[", "t", "]"}]}]}], " ", "==", " ", "1"}], ",", 
   RowBox[{"y", "[", "t", "]"}], ",", "t"}], "]"}]], "Input",
 CellChangeTimes->{{3.524318296947228*^9, 3.52431834674199*^9}, {
  3.524318379039159*^9, 3.5243183991549883`*^9}}],

Cell[BoxData[
 FormBox[
  RowBox[{"{", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"y", "(", "t", ")"}], "\[Rule]", 
     RowBox[{
      RowBox[{
       SubscriptBox[
        TagBox["c",
         C], "1"], " ", 
       SuperscriptBox["\[ExponentialE]", 
        SuperscriptBox["t", "2"]]}], "+", 
      RowBox[{
       FractionBox["1", "2"], " ", 
       SqrtBox["\[Pi]"], " ", 
       SuperscriptBox["\[ExponentialE]", 
        SuperscriptBox["t", "2"]], " ", 
       RowBox[{"erf", "(", "t", ")"}]}]}]}], "}"}], "}"}], 
  TraditionalForm]], "Output",
 CellChangeTimes->{{3.524318317683066*^9, 3.524318347002578*^9}, {
  3.524318384853953*^9, 3.524318399343402*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[Cell[BoxData[
 RowBox[{"Integrate", "[", 
  RowBox[{
   RowBox[{"Exp", "[", 
    RowBox[{"-", 
     SuperscriptBox["s", "2"]}], "]"}], ",", 
   RowBox[{"{", 
    RowBox[{"s", ",", "0", ",", "t"}], "}"}]}], "]"}]],
 CellChangeTimes->{{3.524229112380336*^9, 
  3.524229150699975*^9}}]], "WolframAlphaLong",
 CellChangeTimes->{{3.5242291587932777`*^9, 3.524229164407773*^9}, {
  3.5242294930438757`*^9, 3.52422949631949*^9}}],

Cell[BoxData[
 NamespaceBox["WolframAlphaQueryResults",
  DynamicModuleBox[{Typeset`q$$ = "Integrate[Exp[-s^2], {s, 0, t}]", 
   Typeset`opts$$ = {
   AppearanceElements -> {
     "Warnings", "Assumptions", "Brand", "Pods", "PodMenus", "Unsuccessful", 
      "Sources"}, Asynchronous -> All, 
    TimeConstraint -> {30, Automatic, Automatic, Automatic}, 
    Method -> {
     "Formats" -> {"cell", "minput", "msound", "dataformats"}, "Server" -> 
      "http://api.wolframalpha.com/v1/"}}, Typeset`elements$$ = {
   "Warnings", "Assumptions", "Brand", "Pods", "PodMenus", "Unsuccessful", 
    "Sources"}, Typeset`pod1$$ = XMLElement[
   "pod", {"title" -> "Definite integral", "scanner" -> "Integral", "id" -> 
     "Input", "position" -> "100", "error" -> "false", "numsubpods" -> "1", 
     "primary" -> "true"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["minput", {}, {"Integrate[E^(-s^2), {s, 0, t}]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            RowBox[{
              TagBox[
               RowBox[{
                 SubsuperscriptBox["\[Integral]", "0", "t"], 
                 RowBox[{
                   SuperscriptBox["\[ExponentialE]", 
                    RowBox[{"-", 
                    SuperscriptBox["s", "2"]}]], 
                   RowBox[{"\[DifferentialD]", "s"}]}]}], HoldForm], 
              "\[LongEqual]", 
              RowBox[{
                FractionBox["1", "2"], " ", 
                SqrtBox["\[Pi]"], " ", 
                RowBox[{"erf", "(", "t", ")"}]}]}], TraditionalForm]], 
          "Output"]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata,formuladata"}]}\
], 
     XMLElement["infos", {"count" -> "1"}, {
       XMLElement["info", {"text" -> "erf(x) is the error function"}, {
         XMLElement[
         "link", {
          "url" -> "http://reference.wolfram.com/mathematica/ref/Erf.html", 
           "text" -> "Documentation", "title" -> "Mathematica"}, {}], 
         XMLElement[
         "link", {
          "url" -> "http://functions.wolfram.com/GammaBetaErf/Erf", "text" -> 
           "Properties", "title" -> "Wolfram Functions Site"}, {}], 
         XMLElement[
         "link", {
          "url" -> "http://mathworld.wolfram.com/Erf.html", "text" -> 
           "Definition", "title" -> "MathWorld"}, {}], 
         XMLElement["cell", {"compressed" -> False, "string" -> True}, {
           Cell[
            BoxData[
             StyleBox[
              FormBox[
               StyleBox[
                TemplateBox[{
                  StyleBox[
                   RowBox[{"erf", "(", "x", ")"}], FontFamily -> 
                   "Bitstream Charter", Bold, 14, StripOnInput -> False], 
                  "\"is the error function\""}, "Row", 
                 DisplayFunction -> (RowBox[{#, " ", #2}]& ), 
                 InterpretationFunction -> (RowBox[{
                    StyleBox[
                    "Row", FontFamily -> "Bitstream Vera Sans", 
                    FontSize -> -1 + Inherited], "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{#, ",", #2}], "}"}], ",", "\" \""}], "]"}]& )], 
                GrayLevel[0.3], StripOnInput -> False], TraditionalForm], 
              FontFamily -> "Verdana", FontSize -> 12]], "Output", 
            LinebreakAdjustments -> {1, 10, 0, 0, 10}]}]}]}]}], 
   Typeset`pod2$$ = XMLElement[
   "pod", {"title" -> "Series expansion of the integral at t=0", "scanner" -> 
     "Series", "id" -> "SeriesExpansionOfTheIntegralAtX=0", "position" -> 
     "200", "error" -> "false", "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["minput", {}, {"Series[(Sqrt[Pi] Erf[t])/2, {t, 0, 11}]"}], 
       
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            InterpretationBox[
             RowBox[{"t", "-", 
               FractionBox[
                SuperscriptBox["t", "3"], "3"], "+", 
               FractionBox[
                SuperscriptBox["t", "5"], "10"], "-", 
               FractionBox[
                SuperscriptBox["t", "7"], "42"], "+", 
               FractionBox[
                SuperscriptBox["t", "9"], "216"], "-", 
               FractionBox[
                SuperscriptBox["t", "11"], "1320"], "+", 
               InterpretationBox[
                RowBox[{"O", "(", 
                  SuperscriptBox["t", "12"], ")"}], 
                SeriesData[$CellContext`t, 0, {}, 1, 12, 1], Editable -> 
                False]}], 
             SeriesData[$CellContext`t, 0, {1, 0, 
               Rational[-1, 3], 0, 
               Rational[1, 10], 0, 
               Rational[-1, 42], 0, 
               Rational[1, 216], 0, 
               Rational[-1, 1320]}, 1, 12, 1], Editable -> False], 
            TraditionalForm]], "Output"]}], 
       XMLElement["dataformats", {}, {"plaintext,minput,moutput"}]}], 
     XMLElement["states", {"count" -> "1"}, {
       XMLElement[
       "state", {
        "name" -> "More terms", "input" -> 
         "SeriesExpansionOfTheIntegralAtX=0__More terms"}, {}]}]}], 
   Typeset`pod3$$ = XMLElement[
   "pod", {"title" -> "Series expansion of the integral at t=\[Infinity]", 
     "scanner" -> "Series", "id" -> 
     "SeriesExpansionOfTheIntegralAtX=Infinity", "position" -> "300", "error" -> 
     "false", "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {"Series[(Sqrt[Pi] Erf[t])/2, {t, Infinity, 11}]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            RowBox[{
              FractionBox["1", "2"], " ", 
              RowBox[{"(", 
                RowBox[{
                  RowBox[{
                    SuperscriptBox["\[ExponentialE]", 
                    RowBox[{"-", 
                    SuperscriptBox["t", "2"]}]], " ", 
                    RowBox[{"(", 
                    InterpretationBox[
                    RowBox[{
                    RowBox[{"-", 
                    FractionBox["1", "t"]}], "+", 
                    FractionBox["1", 
                    RowBox[{"2", " ", 
                    SuperscriptBox["t", "3"]}]], "-", 
                    FractionBox["3", 
                    RowBox[{"4", " ", 
                    SuperscriptBox["t", "5"]}]], "+", 
                    FractionBox["15", 
                    RowBox[{"8", " ", 
                    SuperscriptBox["t", "7"]}]], "-", 
                    FractionBox["105", 
                    RowBox[{"16", " ", 
                    SuperscriptBox["t", "9"]}]], "+", 
                    FractionBox["945", 
                    RowBox[{"32", " ", 
                    SuperscriptBox["t", "11"]}]], "+", 
                    InterpretationBox[
                    RowBox[{"O", "(", 
                    SuperscriptBox[
                    RowBox[{"(", 
                    FractionBox["1", "t"], ")"}], "12"], ")"}], 
                    SeriesData[$CellContext`t, 
                    DirectedInfinity[1], {}, 1, 12, 1], Editable -> False]}], 
                    
                    SeriesData[$CellContext`t, 
                    DirectedInfinity[1], {-1, 0, 
                    Rational[1, 2], 0, 
                    Rational[-3, 4], 0, 
                    Rational[15, 8], 0, 
                    Rational[-105, 16], 0, 
                    Rational[945, 32]}, 1, 12, 1], Editable -> False], 
                    ")"}]}], "+", 
                  SqrtBox["\[Pi]"]}], ")"}]}], TraditionalForm]], "Output"]}], 
       XMLElement["dataformats", {}, {"plaintext,minput,moutput"}]}], 
     XMLElement["states", {"count" -> "1"}, {
       XMLElement[
       "state", {
        "name" -> "More terms", "input" -> 
         "SeriesExpansionOfTheIntegralAtX=Infinity__More terms"}, {}]}]}], 
   Typeset`aux1$$ = {True, False, {False}, True}, Typeset`aux2$$ = {
   True, False, {False}, True}, Typeset`aux3$$ = {True, False, {False}, True},
    Typeset`asyncpods$$ = {}, Typeset`nonpods$$ = {}, Typeset`initdone$$ = 
   True, Typeset`queryinfo$$ = {
   "success" -> "true", "error" -> "false", "numpods" -> "3", "datatypes" -> 
    "", "timedout" -> "", "timing" -> "1.091", "parsetiming" -> "0.454", 
    "parsetimedout" -> "false", "recalculate" -> "", "id" -> 
    "MSP161919h42c26005be03400002577id954ed74bba&s=45", "related" -> 
    "http://www4d.wolframalpha.com/api/v2/relatedQueries.jsp?id=\
MSP162019h42c26005be034000064b14fg2040g243e&s=45", "version" -> "2.1"}, 
   Typeset`sessioninfo$$ = {
   "TimeZone" -> -6., 
    "Date" -> {2011, 9, 5, 10, 38, 18.343763`8.016063414957394}, "Line" -> 43,
     "SessionID" -> 23094492889738470703}, Typeset`showpods$$ = {1, 2, 3}, 
   Typeset`failedpods$$ = {}, Typeset`chosen$$ = {}, Typeset`open$$ = False, 
   Typeset`newq$$ = "Integrate[Exp[-s^2], {s, 0, t}]"}, 
   DynamicBox[ToBoxes[
     AlphaIntegration`FormatAlphaResults[
      Dynamic[{
       1, {Typeset`pod1$$, Typeset`pod2$$, Typeset`pod3$$}, {
        Typeset`aux1$$, Typeset`aux2$$, Typeset`aux3$$}, Typeset`chosen$$, 
        Typeset`open$$, Typeset`elements$$, Typeset`q$$, Typeset`opts$$, 
        Typeset`nonpods$$, Typeset`queryinfo$$, Typeset`sessioninfo$$, 
        Typeset`showpods$$, Typeset`failedpods$$, Typeset`newq$$}]], 
     StandardForm],
    ImageSizeCache->{645., {139., 145.}},
    TrackedSymbols:>{Typeset`showpods$$, Typeset`failedpods$$}],
   DynamicModuleValues:>{},
   Initialization:>If[
     Not[Typeset`initdone$$], WolframAlphaClient`Private`doAsyncUpdates[
       Hold[{Typeset`pod1$$, Typeset`pod2$$, Typeset`pod3$$}], 
       Typeset`asyncpods$$, 
       Dynamic[Typeset`failedpods$$]]; Typeset`asyncpods$$ = {}; 
     Typeset`initdone$$ = True],
   SynchronousInitialization->False],
  BaseStyle->{Deployed -> True},
  DeleteWithContents->True,
  Editable->False,
  SelectWithContents->True]], "Print",
 CellMargins->{{20, 10}, {Inherited, Inherited}},
 CellChangeTimes->{3.524229498365096*^9}]
}, Closed]]
}, Closed]],

Cell[CellGroupData[{

Cell["25", "Subsubsection",
 CellChangeTimes->{{3.524231262899333*^9, 3.524231262930986*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"D", "[", 
  RowBox[{
   RowBox[{"D", "[", 
    RowBox[{
     RowBox[{
      RowBox[{"Cos", "[", "x", "]"}], "*", 
      RowBox[{"Cosh", "[", "y", "]"}]}], ",", "x"}], "]"}], ",", "x"}], 
  "]"}]], "Input",
 CellChangeTimes->{{3.524229842246751*^9, 3.5242298436462803`*^9}, {
  3.5242299210039473`*^9, 3.5242299361801558`*^9}, {3.524230339408599*^9, 
  3.524230340343965*^9}}],

Cell[BoxData[
 FormBox[
  RowBox[{
   RowBox[{"-", 
    RowBox[{"cos", "(", "x", ")"}]}], " ", 
   RowBox[{"cosh", "(", "y", ")"}]}], TraditionalForm]], "Output",
 CellChangeTimes->{{3.524229929773587*^9, 3.524229936912942*^9}, 
   3.5242303405513897`*^9}]
}, Closed]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"D", "[", 
   RowBox[{
    RowBox[{"D", "[", 
     RowBox[{
      RowBox[{"Log", "[", 
       RowBox[{
        SuperscriptBox["x", "2"], "+", 
        SuperscriptBox["y", "2"]}], "]"}], ",", "x"}], "]"}], ",", "x"}], 
   "]"}], "+", 
  RowBox[{"D", "[", 
   RowBox[{
    RowBox[{"D", "[", 
     RowBox[{
      RowBox[{"Log", "[", 
       RowBox[{
        SuperscriptBox["x", "2"], "+", 
        SuperscriptBox["y", "2"]}], "]"}], ",", "y"}], "]"}], ",", "y"}], 
   "]"}]}]], "Input",
 CellChangeTimes->{{3.524230125639175*^9, 3.524230137749992*^9}, {
  3.524230347633593*^9, 3.524230374015787*^9}, {3.524230441933271*^9, 
  3.524230449557428*^9}, {3.524230841868257*^9, 3.5242308783294773`*^9}}],

Cell[BoxData[
 FormBox[
  RowBox[{
   RowBox[{"-", 
    FractionBox[
     RowBox[{"4", " ", 
      SuperscriptBox["x", "2"]}], 
     SuperscriptBox[
      RowBox[{"(", 
       RowBox[{
        SuperscriptBox["x", "2"], "+", 
        SuperscriptBox["y", "2"]}], ")"}], "2"]]}], "+", 
   FractionBox["4", 
    RowBox[{
     SuperscriptBox["x", "2"], "+", 
     SuperscriptBox["y", "2"]}]], "-", 
   FractionBox[
    RowBox[{"4", " ", 
     SuperscriptBox["y", "2"]}], 
    SuperscriptBox[
     RowBox[{"(", 
      RowBox[{
       SuperscriptBox["x", "2"], "+", 
       SuperscriptBox["y", "2"]}], ")"}], "2"]]}], TraditionalForm]], "Output",\

 CellChangeTimes->{
  3.524230138256968*^9, {3.524230352287159*^9, 3.524230374489479*^9}, 
   3.524230449815049*^9, {3.524230842180601*^9, 3.524230879374526*^9}}]
}, Closed]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"D", "[", 
   RowBox[{
    RowBox[{"D", "[", 
     RowBox[{
      RowBox[{
       RowBox[{"Cos", "[", "x", "]"}], "*", 
       RowBox[{"Cosh", "[", "y", "]"}]}], ",", "x"}], "]"}], ",", "x"}], 
   "]"}], "+", 
  RowBox[{"D", "[", 
   RowBox[{
    RowBox[{"D", "[", 
     RowBox[{
      RowBox[{
       RowBox[{"Cos", "[", "x", "]"}], "*", 
       RowBox[{"Cosh", "[", "y", "]"}]}], ",", "y"}], "]"}], ",", "y"}], 
   "]"}]}]], "Input",
 CellChangeTimes->{{3.524230642877619*^9, 3.5242306791089993`*^9}, 
   3.5242307498314466`*^9}],

Cell[BoxData[
 FormBox["0", TraditionalForm]], "Output",
 CellChangeTimes->{{3.524230668900098*^9, 3.5242306792835283`*^9}, 
   3.5242307502654743`*^9}]
}, Closed]]
}, Closed]]
}, Closed]]
}, Closed]],

Cell[CellGroupData[{

Cell["Online Assignment 1: 1.1-2.1", "Section",
 CellChangeTimes->{{3.52442373496317*^9, 3.524423740657099*^9}, {
  3.524426738641127*^9, 3.5244267406065063`*^9}}],

Cell[CellGroupData[{

Cell["2", "Subsection",
 CellChangeTimes->{3.524423745361219*^9}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"DSolve", "[", 
  RowBox[{
   RowBox[{
    RowBox[{
     RowBox[{"x", "*", 
      RowBox[{
       RowBox[{"y", "'"}], "[", "x", "]"}]}], "-", 
     RowBox[{"3", "*", 
      RowBox[{"y", "[", "x", "]"}]}]}], " ", "==", "0"}], " ", ",", 
   RowBox[{"y", "[", "x", "]"}], ",", "x"}], "]"}]], "Input",
 CellChangeTimes->{{3.5244237813522787`*^9, 3.524423825298723*^9}}],

Cell[BoxData[
 FormBox[
  RowBox[{"{", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"y", "(", "x", ")"}], "\[Rule]", 
     RowBox[{
      SubscriptBox[
       TagBox["c",
        C], "1"], " ", 
      SuperscriptBox["x", "3"]}]}], "}"}], "}"}], TraditionalForm]], "Output",\

 CellChangeTimes->{{3.5244238067317266`*^9, 3.524423825985725*^9}}]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell["4", "Subsection",
 CellChangeTimes->{3.5244248325856657`*^9}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"DSolve", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{
      RowBox[{
       RowBox[{
        RowBox[{"y", "'"}], "[", "t", "]"}], "-", 
       RowBox[{"4", "*", 
        RowBox[{"y", "[", "t", "]"}]}]}], "\[Equal]", 
      RowBox[{"4", "*", 
       RowBox[{"Exp", "[", 
        RowBox[{"6", "*", "t"}], "]"}]}]}], ",", 
     RowBox[{
      RowBox[{"y", "[", "0", "]"}], "\[Equal]", 
      RowBox[{"-", "3"}]}]}], "}"}], ",", 
   RowBox[{"y", "[", "t", "]"}], ",", "t"}], "]"}]], "Input",
 CellChangeTimes->{{3.5244248342258472`*^9, 3.52442486271329*^9}, {
   3.524425031652927*^9, 3.524425057436056*^9}, {3.524425104462411*^9, 
   3.524425105634246*^9}, 3.5244251947713947`*^9}],

Cell[BoxData[
 FormBox[
  RowBox[{"{", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"y", "(", "t", ")"}], "\[Rule]", 
     RowBox[{
      SuperscriptBox["\[ExponentialE]", 
       RowBox[{"4", " ", "t"}]], " ", 
      RowBox[{"(", 
       RowBox[{
        RowBox[{"2", " ", 
         SuperscriptBox["\[ExponentialE]", 
          RowBox[{"2", " ", "t"}]]}], "-", "5"}], ")"}]}]}], "}"}], "}"}], 
  TraditionalForm]], "Output",
 CellChangeTimes->{
  3.5244248635095787`*^9, {3.524425036201586*^9, 3.524425058220573*^9}, 
   3.524425106255486*^9, 3.524425195033256*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Exp", "[", 
  RowBox[{"Integrate", "[", 
   RowBox[{"4", ",", "t"}], "]"}], "]"}]], "Input",
 CellChangeTimes->{{3.524424908352882*^9, 3.5244249151364393`*^9}}],

Cell[BoxData[
 FormBox[
  SuperscriptBox["\[ExponentialE]", 
   RowBox[{"4", " ", "t"}]], TraditionalForm]], "Output",
 CellChangeTimes->{3.524424915554613*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Integrate", "[", 
  RowBox[{
   RowBox[{
    RowBox[{"Exp", "[", 
     RowBox[{"4", "t"}], "]"}], "*", "4", "*", 
    RowBox[{"Exp", "[", 
     RowBox[{"6", "t"}], "]"}]}], ",", "t"}], "]"}]], "Input",
 CellChangeTimes->{{3.5244249665236473`*^9, 3.524424982334259*^9}}],

Cell[BoxData[
 FormBox[
  FractionBox[
   RowBox[{"2", " ", 
    SuperscriptBox["\[ExponentialE]", 
     RowBox[{"10", " ", "t"}]]}], "5"], TraditionalForm]], "Output",
 CellChangeTimes->{3.524424982946773*^9}]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell["5", "Subsection",
 CellChangeTimes->{{3.524425800252692*^9, 3.524425802547264*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Integrate", "[", 
  RowBox[{
   RowBox[{
    SuperscriptBox[
     RowBox[{"(", 
      RowBox[{"x", "+", "1"}], ")"}], 
     RowBox[{"9", "/", "11"}]], "*", 
    FractionBox[
     RowBox[{"(", 
      RowBox[{"18", "*", "x"}], ")"}], 
     RowBox[{
      RowBox[{"11", "*", "x"}], "+", "11"}]]}], ",", "x"}], "]"}]], "Input",
 CellChangeTimes->{{3.524425803413761*^9, 3.524425843236*^9}, {
  3.524426187474264*^9, 3.524426194273686*^9}}],

Cell[BoxData[
 FormBox[
  RowBox[{
   FractionBox["1", "10"], " ", 
   SuperscriptBox[
    RowBox[{"(", 
     RowBox[{"x", "+", "1"}], ")"}], 
    RowBox[{"9", "/", "11"}]], " ", 
   RowBox[{"(", 
    RowBox[{
     RowBox[{"9", " ", "x"}], "-", "11"}], ")"}]}], 
  TraditionalForm]], "Output",
 CellChangeTimes->{3.524426194996797*^9}]
}, Closed]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"DSolve", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{
      RowBox[{"11", 
       RowBox[{"(", 
        RowBox[{"t", "+", "1"}], ")"}], 
       RowBox[{
        RowBox[{"y", "'"}], "[", "t", "]"}]}], "-", 
      RowBox[{"9", "*", 
       RowBox[{"y", "[", "t", "]"}]}]}], "\[Equal]", 
     RowBox[{"18", "*", "t"}]}], "}"}], ",", 
   RowBox[{"y", "[", "t", "]"}], ",", "t"}], "]"}]], "Input",
 CellChangeTimes->{{3.524425890255003*^9, 3.524425949881289*^9}, 
   3.524426207418944*^9, 3.5244266073669653`*^9, 3.524434088422247*^9}],

Cell[BoxData[
 FormBox[
  RowBox[{"{", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"y", "(", "t", ")"}], "\[Rule]", 
     RowBox[{
      RowBox[{
       SubscriptBox[
        TagBox["c",
         C], "1"], " ", 
       SuperscriptBox[
        RowBox[{"(", 
         RowBox[{"t", "+", "1"}], ")"}], 
        RowBox[{"9", "/", "11"}]]}], "+", 
      RowBox[{"9", " ", "t"}], "+", "11"}]}], "}"}], "}"}], 
  TraditionalForm]], "Output",
 CellChangeTimes->{{3.524425930267516*^9, 3.524425950117873*^9}, 
   3.524426207665064*^9, 3.524426607985511*^9, 3.5244340894664803`*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell["Integrate[x/((x+1)^(20/11)),x]", "WolframAlphaLong",
 CellChangeTimes->{{3.524433508486486*^9, 3.524433529471826*^9}}],

Cell[BoxData[
 NamespaceBox["WolframAlphaQueryResults",
  DynamicModuleBox[{Typeset`q$$ = "Integrate[x/((x+1)^(20/11)),x]", 
   Typeset`opts$$ = {
   AppearanceElements -> {
     "Warnings", "Assumptions", "Brand", "Pods", "PodMenus", "Unsuccessful", 
      "Sources"}, Asynchronous -> All, 
    TimeConstraint -> {30, Automatic, Automatic, Automatic}, 
    Method -> {
     "Formats" -> {"cell", "minput", "msound", "dataformats"}, "Server" -> 
      "http://api.wolframalpha.com/v1/"}, 
    PodStates -> {"IndefiniteIntegral__Show steps"}}, Typeset`elements$$ = {
   "Warnings", "Assumptions", "Brand", "Pods", "PodMenus", "Unsuccessful", 
    "Sources"}, Typeset`pod1$$ = XMLElement[
   "pod", {"title" -> "Indefinite integrals", "scanner" -> "Integral", "id" -> 
     "IndefiniteIntegral", "position" -> "100", "error" -> "false", 
     "numsubpods" -> "2", "primary" -> "true"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["minput", {}, {"Integrate[x/(x + 1)^(20/11), x]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            RowBox[{
              TagBox[
               TagBox[
                RowBox[{"\[Integral]", 
                  RowBox[{
                    FractionBox["x", 
                    SuperscriptBox[
                    RowBox[{"(", 
                    RowBox[{"x", "+", "1"}], ")"}], 
                    RowBox[{"20", "/", "11"}]]], 
                    RowBox[{"\[DifferentialD]", "x"}]}]}], HoldForm], 
               PolynomialForm[#, TraditionalOrder -> False]& ], 
              "\[LongEqual]", 
              StyleBox[
               RowBox[{
                 StyleBox[
                  FractionBox[
                   RowBox[{"11", " ", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"9", " ", "x"}], "+", "11"}], ")"}]}], 
                   RowBox[{"18", " ", 
                    SuperscriptBox[
                    RowBox[{"(", 
                    RowBox[{"x", "+", "1"}], ")"}], 
                    RowBox[{"9", "/", "11"}]]}]], 
                  GrayLevel[0]], "+", 
                 StyleBox[
                 "constant", FontFamily -> "Helvetica", Magnification -> 
                  0.9 Inherited]}], 
               GrayLevel[0.6]]}], TraditionalForm]], "Output"]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata,formuladata"}]}\
], 
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["cell", {"compressed" -> True, "string" -> False}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             GridBox[{{
                StyleBox[
                 StyleBox[
                 "\"Possible intermediate steps:\"", 
                  LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                  0, StripOnInput -> False], FontColor -> GrayLevel[0.5], 
                 FontSize -> Smaller, StripOnInput -> False]}, {
                InterpretationBox[
                 Cell[
                  BoxData[
                   FormBox[
                    TagBox[
                    RowBox[{"\[Integral]", 
                    RowBox[{
                    FractionBox["x", 
                    SuperscriptBox[
                    RowBox[{"(", 
                    RowBox[{"1", "+", "x"}], ")"}], 
                    RowBox[{"20", "/", "11"}]]], 
                    RowBox[{"\[DifferentialD]", "x"}]}]}], HoldForm], 
                    TraditionalForm]]], 
                 ExpressionCell[
                  HoldForm[
                   Integrate[
                   Global`x (1 + Global`x)^Rational[-20, 11], Global`x]]]]}, {
               
                StyleBox[
                 StyleBox[
                  TemplateBox[{"\"For the integrand \"", 
                    InterpretationBox[
                    Cell[
                    BoxData[
                    FormBox[
                    FractionBox["x", 
                    SuperscriptBox[
                    RowBox[{"(", 
                    RowBox[{"x", "+", "1"}], ")"}], 
                    RowBox[{"20", "/", "11"}]]], TraditionalForm]]], 
                    ExpressionCell[
                    Global`x (1 + Global`x)^Rational[-20, 11]]], 
                    "\", substitute \"", 
                    InterpretationBox[
                    Cell[
                    BoxData[
                    FormBox[
                    RowBox[{"u", "\[LongEqual]", 
                    RowBox[{"x", "+", "1"}]}], TraditionalForm]]], 
                    ExpressionCell[Global`u == 1 + Global`x]], "\" and \"", 
                    InterpretationBox[
                    Cell[
                    BoxData[
                    FormBox[
                    RowBox[{
                    
                    RowBox[{
                    "\[DifferentialD]", "\[NegativeVeryThinSpace]", "u"}], 
                    "\[LongEqual]", "\"\""}], TraditionalForm]]], 
                    ExpressionCell[
                    CalculateScan`StepByStepIntegrate`CommonFunctions`dd[
                    Global`u] == ""]], 
                    InterpretationBox[
                    Cell[
                    BoxData[
                    FormBox[
                    
                    RowBox[{
                    "\[DifferentialD]", "\[NegativeVeryThinSpace]", "x"}], 
                    TraditionalForm]]], 
                    ExpressionCell[
                    CalculateScan`StepByStepIntegrate`CommonFunctions`dd[
                    Global`x]]], "\":\""}, "Row", 
                   DisplayFunction -> (
                    RowBox[{#, "\[InvisibleSpace]", #2, 
                    "\[InvisibleSpace]", #3, "\[InvisibleSpace]", #4, 
                    "\[InvisibleSpace]", #5, "\[InvisibleSpace]", #6, 
                    "\[InvisibleSpace]", #7, "\[InvisibleSpace]", #8}]& ), 
                   InterpretationFunction -> (RowBox[{
                    StyleBox[
                    "Row", FontFamily -> "Bitstream Vera Sans", 
                    FontSize -> -1 + Inherited], "[", 
                    RowBox[{"{", 
                    
                    RowBox[{#, ",", #2, ",", #3, ",", #4, ",", #5, ",", #6, 
                    ",", #7, ",", #8}], "}"}], "]"}]& )], 
                  LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                  0, StripOnInput -> False], FontColor -> GrayLevel[0.5], 
                 FontSize -> Smaller, StripOnInput -> False]}, {
                InterpretationBox[
                 Cell[
                  BoxData[
                   FormBox[
                    RowBox[{
                    TagBox["\"\"", HoldForm], "\[LongEqual]", 
                    RowBox[{"\[Integral]", 
                    RowBox[{
                    FractionBox[
                    RowBox[{"u", "-", "1"}], 
                    SuperscriptBox["u", 
                    RowBox[{"20", "/", "11"}]]], 
                    RowBox[{"\[DifferentialD]", "u"}]}]}]}], 
                    TraditionalForm]]], 
                 ExpressionCell[
                 HoldForm[""] == 
                  CalculateScan`StepByStepIntegrate`CommonFunctions`IntRun[(-\
1 + Global`u) Global`u^Rational[-20, 11], Global`u]]]}, {
                StyleBox[
                 StyleBox[
                  TemplateBox[{"\"Expanding the integrand \"", 
                    InterpretationBox[
                    Cell[
                    BoxData[
                    FormBox[
                    FractionBox[
                    RowBox[{"u", "-", "1"}], 
                    SuperscriptBox["u", 
                    RowBox[{"20", "/", "11"}]]], TraditionalForm]]], 
                    
                    ExpressionCell[(-1 + Global`u) 
                    Global`u^Rational[-20, 11]]], "\" gives \"", 
                    InterpretationBox[
                    Cell[
                    BoxData[
                    FormBox[
                    RowBox[{
                    FractionBox["1", 
                    SuperscriptBox["u", 
                    RowBox[{"9", "/", "11"}]]], "-", 
                    FractionBox["1", 
                    SuperscriptBox["u", 
                    RowBox[{"20", "/", "11"}]]]}], TraditionalForm]]], 
                    
                    ExpressionCell[-Global`u^Rational[-20, 11] + 
                    Global`u^Rational[-9, 11]]], "\":\""}, "Row", 
                   DisplayFunction -> (
                    RowBox[{#, "\[InvisibleSpace]", #2, 
                    "\[InvisibleSpace]", #3, "\[InvisibleSpace]", #4, 
                    "\[InvisibleSpace]", #5}]& ), 
                   InterpretationFunction -> (RowBox[{
                    StyleBox[
                    "Row", FontFamily -> "Bitstream Vera Sans", 
                    FontSize -> -1 + Inherited], "[", 
                    RowBox[{"{", 
                    RowBox[{#, ",", #2, ",", #3, ",", #4, ",", #5}], "}"}], 
                    "]"}]& )], LinebreakAdjustments -> {1, 100, 1, 0, 100}, 
                  LineIndent -> 0, StripOnInput -> False], FontColor -> 
                 GrayLevel[0.5], FontSize -> Smaller, StripOnInput -> 
                 False]}, {
                InterpretationBox[
                 Cell[
                  BoxData[
                   FormBox[
                    RowBox[{
                    TagBox["\"\"", HoldForm], "\[LongEqual]", 
                    RowBox[{"\[Integral]", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    FractionBox["1", 
                    SuperscriptBox["u", 
                    RowBox[{"9", "/", "11"}]]], "-", 
                    FractionBox["1", 
                    SuperscriptBox["u", 
                    RowBox[{"20", "/", "11"}]]]}], ")"}], 
                    RowBox[{"\[DifferentialD]", "u"}]}]}]}], 
                    TraditionalForm]]], 
                 ExpressionCell[
                 HoldForm[""] == 
                  CalculateScan`StepByStepIntegrate`CommonFunctions`IntRun[-
                    Global`u^Rational[-20, 11] + Global`u^Rational[-9, 11], 
                    Global`u]]]}, {
                StyleBox[
                 StyleBox[
                  
                  TemplateBox[{
                   "\"Integrate the sum term by term and factor out \
constants:\""}, "Row", DisplayFunction -> (#& ), 
                   InterpretationFunction -> (RowBox[{
                    StyleBox[
                    "Row", FontFamily -> "Bitstream Vera Sans", 
                    FontSize -> -1 + Inherited], "[", 
                    RowBox[{"{", #, "}"}], "]"}]& )], 
                  LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                  0, StripOnInput -> False], FontColor -> GrayLevel[0.5], 
                 FontSize -> Smaller, StripOnInput -> False]}, {
                InterpretationBox[
                 Cell[
                  BoxData[
                   FormBox[
                    RowBox[{
                    TagBox["\"\"", HoldForm], "\[LongEqual]", 
                    RowBox[{
                    RowBox[{"\[Integral]", 
                    RowBox[{
                    FractionBox["1", 
                    SuperscriptBox["u", 
                    RowBox[{"9", "/", "11"}]]], 
                    RowBox[{"\[DifferentialD]", "u"}]}]}], "-", 
                    RowBox[{"\[Integral]", 
                    RowBox[{
                    FractionBox["1", 
                    SuperscriptBox["u", 
                    RowBox[{"20", "/", "11"}]]], 
                    RowBox[{"\[DifferentialD]", "u"}]}]}]}]}], 
                    TraditionalForm]]], 
                 ExpressionCell[
                 HoldForm[
                   ""] == -
                    CalculateScan`StepByStepIntegrate`CommonFunctions`IntRun[
                    Global`u^Rational[-20, 11], Global`u] + 
                   CalculateScan`StepByStepIntegrate`CommonFunctions`IntRun[
                    Global`u^Rational[-9, 11], Global`u]]]}, {
                StyleBox[
                 StyleBox[
                  TemplateBox[{"\"The integral of \"", 
                    InterpretationBox[
                    Cell[
                    BoxData[
                    FormBox[
                    FractionBox["1", 
                    SuperscriptBox["u", 
                    RowBox[{"20", "/", "11"}]]], TraditionalForm]]], 
                    ExpressionCell[Global`u^Rational[-20, 11]]], "\" is \"", 
                    InterpretationBox[
                    Cell[
                    BoxData[
                    FormBox[
                    RowBox[{"-", 
                    FractionBox["11", 
                    RowBox[{"9", " ", 
                    SuperscriptBox["u", 
                    RowBox[{"9", "/", "11"}]]}]]}], TraditionalForm]]], 
                    ExpressionCell[
                    Rational[-11, 9] Global`u^Rational[-9, 11]]], "\":\""}, 
                   "Row", DisplayFunction -> (
                    RowBox[{#, "\[InvisibleSpace]", #2, 
                    "\[InvisibleSpace]", #3, "\[InvisibleSpace]", #4, 
                    "\[InvisibleSpace]", #5}]& ), 
                   InterpretationFunction -> (RowBox[{
                    StyleBox[
                    "Row", FontFamily -> "Bitstream Vera Sans", 
                    FontSize -> -1 + Inherited], "[", 
                    RowBox[{"{", 
                    RowBox[{#, ",", #2, ",", #3, ",", #4, ",", #5}], "}"}], 
                    "]"}]& )], LinebreakAdjustments -> {1, 100, 1, 0, 100}, 
                  LineIndent -> 0, StripOnInput -> False], FontColor -> 
                 GrayLevel[0.5], FontSize -> Smaller, StripOnInput -> 
                 False]}, {
                InterpretationBox[
                 Cell[
                  BoxData[
                   FormBox[
                    RowBox[{
                    TagBox["\"\"", HoldForm], "\[LongEqual]", 
                    RowBox[{
                    FractionBox["11", 
                    RowBox[{"9", " ", 
                    SuperscriptBox["u", 
                    RowBox[{"9", "/", "11"}]]}]], "+", 
                    RowBox[{"\[Integral]", 
                    RowBox[{
                    FractionBox["1", 
                    SuperscriptBox["u", 
                    RowBox[{"9", "/", "11"}]]], 
                    RowBox[{"\[DifferentialD]", "u"}]}]}]}]}], 
                    TraditionalForm]]], 
                 ExpressionCell[
                 HoldForm[""] == 
                  Rational[11, 9] Global`u^Rational[-9, 11] + 
                   CalculateScan`StepByStepIntegrate`CommonFunctions`IntRun[
                    Global`u^Rational[-9, 11], Global`u]]]}, {
                StyleBox[
                 StyleBox[
                  TemplateBox[{"\"The integral of \"", 
                    InterpretationBox[
                    Cell[
                    BoxData[
                    FormBox[
                    FractionBox["1", 
                    SuperscriptBox["u", 
                    RowBox[{"9", "/", "11"}]]], TraditionalForm]]], 
                    ExpressionCell[Global`u^Rational[-9, 11]]], "\" is \"", 
                    InterpretationBox[
                    Cell[
                    BoxData[
                    FormBox[
                    FractionBox[
                    RowBox[{"11", " ", 
                    SuperscriptBox["u", 
                    RowBox[{"2", "/", "11"}]]}], "2"], TraditionalForm]]], 
                    ExpressionCell[Rational[11, 2] Global`u^Rational[2, 11]]],
                     "\":\""}, "Row", 
                   DisplayFunction -> (
                    RowBox[{#, "\[InvisibleSpace]", #2, 
                    "\[InvisibleSpace]", #3, "\[InvisibleSpace]", #4, 
                    "\[InvisibleSpace]", #5}]& ), 
                   InterpretationFunction -> (RowBox[{
                    StyleBox[
                    "Row", FontFamily -> "Bitstream Vera Sans", 
                    FontSize -> -1 + Inherited], "[", 
                    RowBox[{"{", 
                    RowBox[{#, ",", #2, ",", #3, ",", #4, ",", #5}], "}"}], 
                    "]"}]& )], LinebreakAdjustments -> {1, 100, 1, 0, 100}, 
                  LineIndent -> 0, StripOnInput -> False], FontColor -> 
                 GrayLevel[0.5], FontSize -> Smaller, StripOnInput -> 
                 False]}, {
                InterpretationBox[
                 Cell[
                  BoxData[
                   FormBox[
                    RowBox[{
                    TagBox["\"\"", HoldForm], "\[LongEqual]", 
                    StyleBox[
                    RowBox[{
                    StyleBox[
                    RowBox[{
                    FractionBox[
                    RowBox[{"11", " ", 
                    SuperscriptBox["u", 
                    RowBox[{"2", "/", "11"}]]}], "2"], "+", 
                    FractionBox["11", 
                    RowBox[{"9", " ", 
                    SuperscriptBox["u", 
                    RowBox[{"9", "/", "11"}]]}]]}], 
                    GrayLevel[0]], "+", 
                    StyleBox[
                    "constant", FontFamily -> "Helvetica", Magnification -> 
                    0.9 Inherited]}], 
                    GrayLevel[0.6]]}], TraditionalForm]]], 
                 ExpressionCell[
                 HoldForm[""] == 
                  CalculateScan`StepByStepIntegrate`integralPlusC[
                   Rational[11, 9] Global`u^Rational[-9, 11] + 
                    Rational[11, 2] Global`u^Rational[2, 11]]]]}, {
                StyleBox[
                 StyleBox[
                  TemplateBox[{"\"Substitute back for \"", 
                    InterpretationBox[
                    Cell[
                    BoxData[
                    FormBox[
                    RowBox[{"u", "\[LongEqual]", 
                    RowBox[{"x", "+", "1"}]}], TraditionalForm]]], 
                    ExpressionCell[Global`u == 1 + Global`x]], "\":\""}, 
                   "Row", DisplayFunction -> (
                    RowBox[{#, "\[InvisibleSpace]", #2, 
                    "\[InvisibleSpace]", #3}]& ), 
                   InterpretationFunction -> (RowBox[{
                    StyleBox[
                    "Row", FontFamily -> "Bitstream Vera Sans", 
                    FontSize -> -1 + Inherited], "[", 
                    RowBox[{"{", 
                    RowBox[{#, ",", #2, ",", #3}], "}"}], "]"}]& )], 
                  LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                  0, StripOnInput -> False], FontColor -> GrayLevel[0.5], 
                 FontSize -> Smaller, StripOnInput -> False]}, {
                InterpretationBox[
                 Cell[
                  BoxData[
                   FormBox[
                    RowBox[{
                    TagBox["\"\"", HoldForm], "\[LongEqual]", 
                    StyleBox[
                    RowBox[{
                    StyleBox[
                    RowBox[{
                    RowBox[{
                    FractionBox["11", "2"], " ", 
                    SuperscriptBox[
                    RowBox[{"(", 
                    RowBox[{"x", "+", "1"}], ")"}], 
                    RowBox[{"2", "/", "11"}]]}], "+", 
                    FractionBox["11", 
                    RowBox[{"9", " ", 
                    SuperscriptBox[
                    RowBox[{"(", 
                    RowBox[{"x", "+", "1"}], ")"}], 
                    RowBox[{"9", "/", "11"}]]}]]}], 
                    GrayLevel[0]], "+", 
                    StyleBox[
                    "constant", FontFamily -> "Helvetica", Magnification -> 
                    0.9 Inherited]}], 
                    GrayLevel[0.6]]}], TraditionalForm]]], 
                 ExpressionCell[
                 HoldForm[""] == 
                  CalculateScan`StepByStepIntegrate`integralPlusC[
                   Rational[11, 9] (1 + Global`x)^Rational[-9, 11] + 
                    Rational[11, 2] (1 + Global`x)^Rational[2, 11]]]]}, {
                StyleBox[
                 StyleBox[
                 "\"Which is equal to:\"", 
                  LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                  0, StripOnInput -> False], FontColor -> GrayLevel[0.5], 
                 FontSize -> Smaller, StripOnInput -> False]}, {
                InterpretationBox[
                 Cell[
                  BoxData[
                   FormBox[
                    RowBox[{
                    TagBox["\"\"", HoldForm], "\[LongEqual]", 
                    StyleBox[
                    RowBox[{
                    StyleBox[
                    FractionBox[
                    RowBox[{"11", " ", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"9", " ", "x"}], "+", "11"}], ")"}]}], 
                    RowBox[{"18", " ", 
                    SuperscriptBox[
                    RowBox[{"(", 
                    RowBox[{"x", "+", "1"}], ")"}], 
                    RowBox[{"9", "/", "11"}]]}]], 
                    GrayLevel[0]], "+", 
                    StyleBox[
                    "constant", FontFamily -> "Helvetica", Magnification -> 
                    0.9 Inherited]}], 
                    GrayLevel[0.6]]}], TraditionalForm]]], 
                 ExpressionCell[
                 HoldForm[""] == 
                  CalculateScan`StepByStepIntegrate`integralPlusC[
                   Rational[11, 18] (1 + Global`x)^Rational[-9, 11] (11 + 
                    9 Global`x)]]]}}, 
              GridBoxAlignment -> {"Columns" -> {{Left}}}, 
              GridBoxItemSize -> {
               "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
              GridBoxSpacings -> {
               "Columns" -> {{None}}, "Rows" -> {None, {Plain, 1}}}], 
             "Column"], TraditionalForm]], "Output"]}], 
       XMLElement[
       "dataformats", {}, {"plaintext,computabledata,formatteddata"}]}], 
     XMLElement["states", {"count" -> "1"}, {
       XMLElement[
       "state", {
        "name" -> "Hide steps", "input" -> 
         "IndefiniteIntegral__Hide steps"}, {}]}]}], Typeset`pod2$$ = 
   XMLElement[
   "pod", {"title" -> "Plots of the integral", "scanner" -> "Integral", "id" -> 
     "Plot of the integral", "position" -> "200", "error" -> "false", 
     "numsubpods" -> "3"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {
        "Plot[(11 (11 + 9 x))/(18 (1 + x)^(9/11)), {x, -5.7, 3.7}]"}], 
       XMLElement["cell", {"compressed" -> True, "string" -> False}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             FormBox[
              StyleBox[
               
               DynamicModuleBox[{
                Global`max147$$ = 0.5, Global`min146$$ = -0.5, 
                 CalculateUtilities`GraphicsUtilities`Private`more$$ = False, 
                 Typeset`show$$ = True, Typeset`bookmarkList$$ = {}, 
                 Typeset`bookmarkMode$$ = "Menu", Typeset`animator$$, 
                 Typeset`animvar$$ = 1, Typeset`name$$ = "\"untitled\"", 
                 Typeset`specs$$ = {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`more$$], {
                    False, True}}, {{
                    Hold[Global`min146$$], -0.5, "min"}, -1, 1}, {{
                    Hold[Global`max147$$], 0.5, "max"}, -1, 1}, {
                    Hold[
                    Style[
                    Overlay[{
                    RawBoxes[
                    PaneBox[
                    GraphicsBox[
                    
                    RasterBox[{{{0, 0, 0, 24}}, {{0, 0, 0, 9}}, {{0, 0, 0, 
                    10}}, {{0, 0, 0, 10}}, {{0, 0, 0, 9}}, {{0, 0, 0, 9}}, {{
                    0, 0, 0, 8}}, {{0, 0, 0, 8}}, {{0, 0, 0, 9}}, {{0, 0, 0, 
                    8}}, {{0, 0, 0, 7}}, {{0, 0, 0, 7}}, {{0, 0, 0, 8}}, {{0, 
                    0, 0, 6}}, {{0, 0, 0, 6}}, {{0, 0, 0, 6}}, {{0, 0, 0, 
                    6}}, {{0, 0, 0, 5}}, {{0, 0, 0, 6}}, {{0, 0, 0, 5}}, {{0, 
                    0, 0, 4}}, {{0, 0, 0, 4}}, {{0, 0, 0, 5}}, {{0, 0, 0, 
                    5}}, {{0, 0, 0, 3}}, {{0, 0, 0, 4}}, {{0, 0, 0, 3}}, {{0, 
                    0, 0, 3}}, {{0, 0, 0, 3}}, {{0, 0, 0, 3}}, {{0, 0, 0, 
                    2}}, {{0, 0, 0, 2}}, {{0, 0, 0, 2}}, {{0, 0, 0, 2}}, {{0, 
                    0, 0, 1}}, {{0, 0, 0, 2}}, {{0, 0, 0, 2}}, {{0, 0, 0, 
                    0}}, {{0, 0, 0, 1}}, {{255, 255, 255, 0}}, {{255, 255, 
                    255, 0}}, {{255, 255, 255, 0}}, {{255, 255, 255, 0}}, {{
                    255, 255, 255, 0}}, {{255, 255, 255, 0}}}, {{0, 45}, {
                    2500, 0}}, {0, 255}, ColorFunction -> RGBColor], 
                    ImageSize -> {2500, 45}, 
                    PlotRange -> {{0, 2500}, {0, 45}}], ImageSize -> 
                    Scaled[1], ScrollPosition -> {0., 0.}]], 
                    Pane[
                    Column[{
                    Grid[{{
                    Manipulate`Place[1], 
                    Manipulate`Place[2]}}]}], 
                    ImageMargins -> {{20, 30}, {10, 10}}]}, {1, 2}, 2, 
                    Alignment -> {Left, Top}]]], 
                    Manipulate`Dump`ThisIsNotAControl}}, Typeset`size$$ = 
                 Automatic, Typeset`update$$ = 0, Typeset`initDone$$ = False, 
                 Typeset`skipInitDone$$ = False, 
                 CalculateUtilities`GraphicsUtilities`Private`more$451630$$ = 
                 False, Global`min146$451631$$ = 0, Global`max147$451632$$ = 
                 0}, 
                DynamicBox[
                 Manipulate`ManipulateBoxes[
                 2, TraditionalForm, 
                  "Variables" :> {
                   Global`max147$$ = 0.5, Global`min146$$ = -0.5, 
                    CalculateUtilities`GraphicsUtilities`Private`more$$ = 
                    False}, "ControllerVariables" :> {
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`more$$, 
                    CalculateUtilities`GraphicsUtilities`Private`more$451630$$\
, False], 
                    Hold[Global`min146$$, Global`min146$451631$$, 0], 
                    Hold[Global`max147$$, Global`max147$451632$$, 0]}, 
                  "OtherVariables" :> {
                   Typeset`show$$, Typeset`bookmarkList$$, 
                    Typeset`bookmarkMode$$, Typeset`animator$$, 
                    Typeset`animvar$$, Typeset`name$$, Typeset`specs$$, 
                    Typeset`size$$, Typeset`update$$, Typeset`initDone$$, 
                    Typeset`skipInitDone$$}, "Body" :> Function[Null, 
                    Labeled[
                    CalculateUtilities`GraphicsUtilities`Private`post$451622[
                    Plot[{
                    Re[
                    Rational[11, 18] (1 + Global`x)^Rational[-9, 11] (11 + 
                    9 Global`x)], 
                    Im[
                    Rational[11, 18] (1 + Global`x)^Rational[-9, 11] (11 + 
                    9 Global`x)]}, 
                    SlotSequence[2]]], 
                    Column[{
                    Row[{
                    Graphics[{
                    Directive[
                    RGBColor[0.24720000000000014`, 0.24, 0.6], 
                    AbsoluteThickness[1]], 
                    Line[{{0, 0}, {1, 0}}]}, AspectRatio -> Rational[1, 5], 
                    ImageSize -> 20], 
                    Style[" real part", Smaller, 
                    GrayLevel[0.3]]}], 
                    Row[{
                    Graphics[{
                    Directive[
                    RGBColor[1, 0.3, 0], 
                    AbsoluteThickness[1]], 
                    Line[{{0, 0}, {1, 0}}]}, AspectRatio -> Rational[1, 5], 
                    ImageSize -> 20], 
                    Style[" imaginary part", Smaller, 
                    GrayLevel[0.3]]}]}, Spacings -> 0], {{Right, Bottom}}], 
                    HoldAll][
                   Rational[11, 18] (1 + Global`x)^Rational[-9, 11] (11 + 
                    9 Global`x), {
                    Global`x, -1.0000000000000002` + 
                    4.987407928672322 
                    Tan[1.5040801783846716` 
                    Global`min146$$], -1.0000000000000002` + 
                    4.987407928672322 
                    Tan[1.5040801783846716` 
                    If[Global`min146$$ == Global`max147$$, 
                    Global`min146$$ + (
                    3.6652929292929293` - -5.66529292929293)/1000, 
                    Global`max147$$]]}, 
                    LabelStyle -> {FontFamily -> "Bitstream Charter"}, 
                    WorkingPrecision -> MachinePrecision, 
                    PlotRange -> {Automatic, Automatic}, Ticks -> Automatic, 
                    ImageSize -> 200, AxesLabel -> {
                    RawBoxes[
                    FormBox["x", TraditionalForm]], None}], 
                  "Specifications" :> {{
                    CalculateUtilities`GraphicsUtilities`Private`more$$, {
                    False, True}, ControlType -> None}, {{
                    Global`min146$$, -0.5, "min"}, -1, 1, ImageSize -> Tiny, 
                    ControlPlacement -> 1}, {{
                    Global`max147$$, 0.5, "max"}, -1, 1, ImageSize -> Tiny, 
                    ControlPlacement -> 2}, 
                    Style[
                    Overlay[{
                    RawBoxes[
                    PaneBox[
                    GraphicsBox[
                    
                    RasterBox[{{{0, 0, 0, 24}}, {{0, 0, 0, 9}}, {{0, 0, 0, 
                    10}}, {{0, 0, 0, 10}}, {{0, 0, 0, 9}}, {{0, 0, 0, 9}}, {{
                    0, 0, 0, 8}}, {{0, 0, 0, 8}}, {{0, 0, 0, 9}}, {{0, 0, 0, 
                    8}}, {{0, 0, 0, 7}}, {{0, 0, 0, 7}}, {{0, 0, 0, 8}}, {{0, 
                    0, 0, 6}}, {{0, 0, 0, 6}}, {{0, 0, 0, 6}}, {{0, 0, 0, 
                    6}}, {{0, 0, 0, 5}}, {{0, 0, 0, 6}}, {{0, 0, 0, 5}}, {{0, 
                    0, 0, 4}}, {{0, 0, 0, 4}}, {{0, 0, 0, 5}}, {{0, 0, 0, 
                    5}}, {{0, 0, 0, 3}}, {{0, 0, 0, 4}}, {{0, 0, 0, 3}}, {{0, 
                    0, 0, 3}}, {{0, 0, 0, 3}}, {{0, 0, 0, 3}}, {{0, 0, 0, 
                    2}}, {{0, 0, 0, 2}}, {{0, 0, 0, 2}}, {{0, 0, 0, 2}}, {{0, 
                    0, 0, 1}}, {{0, 0, 0, 2}}, {{0, 0, 0, 2}}, {{0, 0, 0, 
                    0}}, {{0, 0, 0, 1}}, {{255, 255, 255, 0}}, {{255, 255, 
                    255, 0}}, {{255, 255, 255, 0}}, {{255, 255, 255, 0}}, {{
                    255, 255, 255, 0}}, {{255, 255, 255, 0}}}, {{0, 45}, {
                    2500, 0}}, {0, 255}, ColorFunction -> RGBColor], 
                    ImageSize -> {2500, 45}, 
                    PlotRange -> {{0, 2500}, {0, 45}}], ImageSize -> 
                    Scaled[1], ScrollPosition -> {0., 0.}]], 
                    Pane[
                    Column[{
                    Grid[{{
                    Manipulate`Place[1], 
                    Manipulate`Place[2]}}]}], 
                    ImageMargins -> {{20, 30}, {10, 10}}]}, {1, 2}, 2, 
                    Alignment -> {Left, Top}]]}, 
                  "Options" :> {
                   TrackedSymbols -> True, ControlPlacement -> Bottom, 
                    FrameMargins -> {{0, 0}, {0, 10}}, Paneled -> False, 
                    AppearanceElements -> {}, 
                    LabelStyle -> {
                    "DialogStyle", FontColor -> GrayLevel[0.25]}}, 
                  "DefaultOptions" :> {}], SingleEvaluation -> True], 
                Initialization :> (ReleaseHold[
                   Hold[
                   CalculateUtilities`GraphicsUtilities`Private`WACleanTicks[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Blank[]]] := 
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`res, 
                    CalculateUtilities`GraphicsUtilities`Private`unitformat}, 
                    CalculateUtilities`GraphicsUtilities`Private`res = 
                    ReplaceAll[
                    ReplaceAll[
                    Part[
                    DeleteCases[
                    ReplaceAll[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Alternatives[
                    Style, Global`UnitNumberForm, NumberForm] -> (#& )], {
                    Blank[], "", 
                    BlankNullSequence[]}], All, 
                    Span[1, 2]], Superscript[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[Integer]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`p, 
                    Blank[Integer]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`b^
                    CalculateUtilities`GraphicsUtilities`Private`p], Row[{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    BlankSequence[]]}, "\[Times]"] :> 
                    Times[CalculateUtilities`GraphicsUtilities`Private`a]]; If[
                    MatchQ[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, All, 2],
                     
                    Condition[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`quants, {
                    Alternatives[
                    BlankSequence[Global`ShortQuantity], 
                    BlankSequence[Global`Quantity]]}], Length[
                    Union[
                    Map[
                    Global`UnitObjectPart, 
                    CalculateUtilities`GraphicsUtilities`Private`quants]]] == 
                    1]], CalculateUtilities`GraphicsUtilities`Private`\
unitformat = Global`ToCDFQuantityFunction[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, 1, 2]]; 
                    CalculateUtilities`GraphicsUtilities`Private`unitformat -> 
                    Thread[{
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, All, 1], 
                    Global`QuantityPart[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, All, 2], 
                    Global`UnitObjectPart[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, 1, 
                    2]]]}], 
                    CalculateUtilities`GraphicsUtilities`Private`res]]; 
                    Options[
                    CalculateUtilities`GraphicsUtilities`Private`post$451622] = \
{"ReturnInteractiveTypes" -> False, "Nearest" -> Automatic}; 
                    CalculateUtilities`GraphicsUtilities`Private`post$451622[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Blank[Graphics]], 
                    OptionsPattern[]] := 
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`lines, 
                    CalculateUtilities`GraphicsUtilities`Private`pts, 
                    CalculateUtilities`GraphicsUtilities`Private`gg, 
                    CalculateUtilities`GraphicsUtilities`Private`type, 
                    CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r, 
                    CalculateUtilities`GraphicsUtilities`Private`oldepilog, 
                    CalculateUtilities`GraphicsUtilities`Private`range, 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines, 
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines,
                     CalculateUtilities`GraphicsUtilities`Private`\
neareststyle = OptionValue["Nearest"]}, 
                    CalculateUtilities`GraphicsUtilities`Private`oldepilog = 
                    Replace[
                    ReplaceAll[Epilog, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]], 
                    Epilog -> Sequence[]]; Switch[
                    ReplaceAll[{Frame, Axes}, 
                    Options[
                    CalculateUtilities`GraphicsUtilities`Private`g]], {True, 
                    Blank[]}, 
                    CalculateUtilities`GraphicsUtilities`Private`type = 
                    Frame; {
                    CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r} = 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, 
                    ReplaceAll[FrameTicks, 
                    Options[
                    CalculateUtilities`GraphicsUtilities`Private`g]]], {
                    Blank[], True}, 
                    CalculateUtilities`GraphicsUtilities`Private`type = 
                    Axes; {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l} = 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, 
                    ReplaceAll[Ticks, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]]], 
                    Blank[], 
                    CalculateUtilities`GraphicsUtilities`Private`type = None]; 
                    If[
                    And[
                    CalculateUtilities`GraphicsUtilities`Private`type === 
                    Frame, 
                    Or[
                    Not[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`t === None, 
                    CalculateUtilities`GraphicsUtilities`Private`b === 
                    CalculateUtilities`GraphicsUtilities`Private`t]], 
                    Not[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`r === None, 
                    CalculateUtilities`GraphicsUtilities`Private`l === 
                    CalculateUtilities`GraphicsUtilities`Private`r]]]], 
                    CalculateUtilities`GraphicsUtilities`Private`type = None]; 
                    If[
                    TrueQ[
                    OptionValue["ReturnInteractiveTypes"]], 
                    Which[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`type === 
                    None, CalculateUtilities`GraphicsUtilities`Private`b === 
                    None, CalculateUtilities`GraphicsUtilities`Private`l === 
                    None], {}, 
                    FreeQ[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Alternatives[Line, Point]], {}, True, {
                    "Tooltips", "Coordinates"}], If[
                    FreeQ[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Alternatives[Line, Point]], 
                    Return[CalculateUtilities`GraphicsUtilities`Private`g]]; 
                    CalculateUtilities`GraphicsUtilities`Private`gg = 
                    Normal[CalculateUtilities`GraphicsUtilities`Private`g]; 
                    CalculateUtilities`GraphicsUtilities`Private`pts = 
                    Partition[
                    Flatten[
                    Cases[
                    Part[CalculateUtilities`GraphicsUtilities`Private`gg, 1], 
                    Point[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Blank[]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`a, 
                    Infinity]], 2]; 
                    If[Length[
                    CalculateUtilities`GraphicsUtilities`Private`pts] < 2, 
                    CalculateUtilities`GraphicsUtilities`Private`lines = Cases[
                    Part[CalculateUtilities`GraphicsUtilities`Private`gg, 1], 
                    
                    Blank[Line], Infinity]; 
                    If[CalculateUtilities`GraphicsUtilities`Private`lines === \
{}, 
                    Return[CalculateUtilities`GraphicsUtilities`Private`g]]; 
                    CalculateUtilities`GraphicsUtilities`Private`pts = Flatten[
                    Cases[CalculateUtilities`GraphicsUtilities`Private`lines, 
                    Line[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Blank[]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`a, Infinity],
                     1]; If[
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle === 
                    Automatic, If[
                    CalculateUtilities`GraphicsUtilities`Private`orderedLines[
                    CalculateUtilities`GraphicsUtilities`Private`lines], 
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle = 
                    "1D", CalculateUtilities`GraphicsUtilities`Private`\
neareststyle = "2D"]; Null], 
                    If[
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle === 
                    Automatic, 
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle = 
                    "2D"]]; 
                    CalculateUtilities`GraphicsUtilities`Private`range = 
                    Replace[
                    ReplaceAll[PlotRange, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]], 
                    Except[{{
                    PatternTest[
                    Blank[], NumberQ], 
                    PatternTest[
                    Blank[], NumberQ]}, {
                    PatternTest[
                    Blank[], NumberQ], 
                    PatternTest[
                    Blank[], NumberQ]}}] :> {
                    Through[
                    {Min, Max}[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    1]]], 
                    Through[
                    {Min, Max}[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    2]]]}]; CalculateUtilities`GraphicsUtilities`Private`b = 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[CalculateUtilities`GraphicsUtilities`Private`b, 
                    First[CalculateUtilities`GraphicsUtilities`Private`range], 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    1]]; CalculateUtilities`GraphicsUtilities`Private`l = 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[CalculateUtilities`GraphicsUtilities`Private`l, 
                    Last[CalculateUtilities`GraphicsUtilities`Private`range], 
                    
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    2]]; CalculateUtilities`GraphicsUtilities`Private`\
oldgridlines = ReplaceAll[GridLines, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]]; 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines = 
                    With[{CalculateUtilities`GraphicsUtilities`Private`gray = 
                    GrayLevel[0.7]}, 
                    Replace[
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines,\
 {Pattern[CalculateUtilities`GraphicsUtilities`Private`a, {
                    Blank[List], 
                    Blank[List]}] :> Dynamic[
                    Join[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Replace[
                    MousePosition[{"Graphics", Graphics}, None], {
                    None -> {{}, {}}, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`x, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`y, 
                    Blank[]]} :> {{{
                    CalculateUtilities`GraphicsUtilities`Private`x, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}, {{
                    CalculateUtilities`GraphicsUtilities`Private`y, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}}}], 
                    2]], {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Blank[List]], Automatic} :> 
                    With[{CalculateUtilities`GraphicsUtilities`Private`\
divisions = {CalculateUtilities`GraphicsUtilities`Private`a, 
                    FindDivisions[
                    Last[CalculateUtilities`GraphicsUtilities`Private`range], 
                    7]}}, 
                    Dynamic[
                    Join[
                    CalculateUtilities`GraphicsUtilities`Private`divisions, 
                    Replace[
                    MousePosition[{"Graphics", Graphics}, None], {
                    None -> {{}, {}}, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`x, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`y, 
                    Blank[]]} :> {{{
                    CalculateUtilities`GraphicsUtilities`Private`x, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}, {{
                    CalculateUtilities`GraphicsUtilities`Private`y, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}}}], 
                    2]]], Blank[] -> Dynamic[
                    
                    Map[{{#, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}& , 
                    MousePosition[{"Graphics", Graphics}, None]]]}]]; If[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`type === 
                    None, CalculateUtilities`GraphicsUtilities`Private`b === 
                    None, CalculateUtilities`GraphicsUtilities`Private`l === 
                    None], 
                    Show[
                    CalculateUtilities`GraphicsUtilities`Private`g, GridLines -> 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines, 
                    If[
                    MatchQ[
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines, 
                    Alternatives[None, GridLines]], 
                    Method -> {"GridLinesInFront" -> True}, 
                    Apply[Sequence, {}]]], 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`nf = 
                    If[CalculateUtilities`GraphicsUtilities`Private`\
neareststyle === "1D", 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`n = 
                    Nearest[Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 1] -> 
                    CalculateUtilities`GraphicsUtilities`Private`pts]}, 
                    CalculateUtilities`GraphicsUtilities`Private`n[
                    Part[#, 1]]& ], 
                    With[{CalculateUtilities`GraphicsUtilities`Private`n = 
                    Nearest[Transpose[
                    Transpose[
                    CalculateUtilities`GraphicsUtilities`Private`pts]/Abs[
                    Apply[
                    Subtract, 
                    CalculateUtilities`GraphicsUtilities`Private`range, {
                    1}]]] -> 
                    CalculateUtilities`GraphicsUtilities`Private`pts], 
                    CalculateUtilities`GraphicsUtilities`Private`scale = Abs[
                    Apply[
                    Subtract, 
                    CalculateUtilities`GraphicsUtilities`Private`range, {
                    1}]]}, CalculateUtilities`GraphicsUtilities`Private`n[#/
                    CalculateUtilities`GraphicsUtilities`Private`scale]& ]], 
                    CalculateUtilities`GraphicsUtilities`Private`left = 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`bottom = 
                    CalculateUtilities`GraphicsUtilities`Private`b}, 
                    Show[
                    CalculateUtilities`GraphicsUtilities`Private`g, GridLines -> 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines, 
                    If[
                    MatchQ[
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines, 
                    Alternatives[None, GridLines]], 
                    Method -> {"GridLinesInFront" -> True}, 
                    Apply[Sequence, {}]], 
                    Epilog -> {
                    CalculateUtilities`GraphicsUtilities`Private`oldepilog, 
                    Dynamic[
                    
                    DynamicModule[{
                    CalculateUtilities`GraphicsUtilities`Private`pt = 
                    CalculateUtilities`GraphicsUtilities`Private`nf[
                    MousePosition[{"Graphics", Graphics}, {0, 0}]], 
                    CalculateUtilities`GraphicsUtilities`Private`scaled = 
                    MousePosition[{"GraphicsScaled", Graphics}, None]}, 
                    If[
                    CalculateUtilities`GraphicsUtilities`Private`scaled === 
                    None, {}, {
                    Text[
                    Style[
                    Row[{
                    CalculateUtilities`GraphicsUtilities`Private`bottom[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pt, 1, 1]], 
                    CalculateUtilities`GraphicsUtilities`Private`left[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pt, 1, 2]]}, 
                    ","], 12], 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pt, 1], {
                    1.5 Sign[Part[
                    CalculateUtilities`GraphicsUtilities`Private`scaled, 1] - 
                    0.5], 0}, Background -> White], 
                    AbsolutePointSize[7], 
                    Point[CalculateUtilities`GraphicsUtilities`Private`pt], 
                    White, 
                    AbsolutePointSize[5], 
                    Point[
                    CalculateUtilities`GraphicsUtilities`Private`pt]}]]]}]]]]]\
; CalculateUtilities`GraphicsUtilities`Private`post$451622[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Blank[]], 
                    BlankNullSequence[]] := 
                    CalculateUtilities`GraphicsUtilities`Private`g; 
                    CalculateUtilities`GraphicsUtilities`Private`orderedLines[{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`l, 
                    BlankSequence[Line]]}] := 
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`ordered, 
                    CalculateUtilities`GraphicsUtilities`Private`intervals}, 
                    CalculateUtilities`GraphicsUtilities`Private`ordered = 
                    Apply[And, 
                    Map[OrderedQ[
                    Part[#, 1, All, 1]]& , 
                    Hold[CalculateUtilities`GraphicsUtilities`Private`l]]]; If[
                    Not[
                    TrueQ[
                    CalculateUtilities`GraphicsUtilities`Private`ordered]], 
                    Return[False]]; 
                    CalculateUtilities`GraphicsUtilities`Private`intervals = 
                    Part[{CalculateUtilities`GraphicsUtilities`Private`l}, 
                    All, 1, {1, -1}, 1]; Length[
                    Apply[
                    Interval, 
                    CalculateUtilities`GraphicsUtilities`Private`intervals]] === 
                    Length[CalculateUtilities`GraphicsUtilities`Private`\
intervals]]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, 
                    Alternatives[Automatic, FrameTicks]] = {
                    Identity, Identity, Identity, Identity}; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`l, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`t, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`r, 
                    Blank[]]}] := 
                    Map[CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction, {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r}]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, {{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`l, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`r, 
                    Blank[]]}, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`t, 
                    Blank[]]}}] := 
                    Map[CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction, {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r}]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, 
                    Blank[]] = {None, None, None, None}; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, 
                    Alternatives[Automatic, Ticks]] = {Identity, Identity}; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`h, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`v, 
                    Blank[]]}] := 
                    Map[CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction, {CalculateUtilities`GraphicsUtilities`Private`h, 
                    CalculateUtilities`GraphicsUtilities`Private`v}]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, 
                    Blank[]] = {None, None}; 
                    CalculateUtilities`GraphicsUtilities`Private`CDFCleanTicks[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Blank[]]] := ReplaceAll[
                    ReplaceAll[
                    Part[
                    DeleteCases[
                    ReplaceAll[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Alternatives[Style, NumberForm] -> (#& )], {
                    Blank[], "", 
                    BlankNullSequence[]}], All, 
                    Span[1, 2]], Superscript[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[Integer]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`p, 
                    Blank[Integer]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`b^
                    CalculateUtilities`GraphicsUtilities`Private`p], Row[{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    BlankSequence[]]}, "\[Times]"] :> 
                    Times[CalculateUtilities`GraphicsUtilities`Private`a]]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks$, 
                    Blank[]]] := 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    CalculateUtilities`GraphicsUtilities`Private`WACleanTicks[
                    CalculateUtilities`GraphicsUtilities`Private`ticks$]]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[None] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[True] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[Automatic] = Identity; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[All] = Identity; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[Pattern[CalculateUtilities`GraphicsUtilities`Private`func, 
                    Blank[]] -> 
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Blank[]]] := Replace[
                    
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[CalculateUtilities`GraphicsUtilities`Private`ticks], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`f, 
                    Except[None]] :> 
                    Composition[
                    CalculateUtilities`GraphicsUtilities`Private`func, 
                    CalculateUtilities`GraphicsUtilities`Private`f]]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[{}] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {
                    Repeated[{
                    Blank[Integer], 
                    Blank[String]}]}]] := Which[
                    Quiet[
                    MatchQ[
                    Apply[SameQ, 
                    Map[Part[
                    DateList[#], 
                    Span[2, All]]& , 
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {
                    2}], {1}], {
                    Repeated[True]}]], DateString, 
                    Apply[And, 
                    StringMatchQ[
                    Part[CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    All, 2], NumberString]], 
                    
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Transpose[{
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, All, 
                    1], 
                    ToExpression[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, All, 
                    2]]}]], True, None]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {
                    Repeated[{
                    PatternTest[
                    Blank[], NumericQ], 
                    PatternTest[
                    Blank[], NumericQ]}]}]] := Which[
                    MatchQ[
                    Apply[
                    Equal, CalculateUtilities`GraphicsUtilities`Private`ticks,\
 {1}], {
                    Repeated[True]}], Identity, 
                    MatchQ[
                    
                    Apply[# == Log[#2]& , 
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {1}], {
                    Repeated[True]}], Exp, 
                    TrueQ[
                    Quiet[
                    Apply[Equal, 
                    Apply[Divide, Transpose[
                    Rest[CalculateUtilities`GraphicsUtilities`Private`ticks]] - 
                    Part[CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    1]]]]], 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`slope = 
                    Apply[Divide, 
                    Apply[Subtract, 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {-1, 
                    1}]]]}, 
                    SetPrecision[(# - Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 1, 
                    1])/CalculateUtilities`GraphicsUtilities`Private`slope + 
                    Part[CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    1, 2], 3]& ], True, None]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Blank[]] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`type, 
                    Blank[]], 
                    BlankNullSequence[]] := 
                    CalculateUtilities`GraphicsUtilities`Private`type; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[Identity, {
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`min, 
                    Blank[]], 
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`max, 
                    Blank[]]}, 
                    Blank[]] := 
                    With[{CalculateUtilities`GraphicsUtilities`Private`nf = 
                    CalculateUtilities`GraphicsUtilities`Private`numberForm, 
                    CalculateUtilities`GraphicsUtilities`Private`acc = 
                    Floor[Max[
                    Ceiling[Log[10, 
                    Max[
                    
                    Abs[{CalculateUtilities`GraphicsUtilities`Private`min, 
                    CalculateUtilities`GraphicsUtilities`Private`max}]]] - 
                    Log[10, (CalculateUtilities`GraphicsUtilities`Private`max - 
                    CalculateUtilities`GraphicsUtilities`Private`min)/100]], 
                    3] - RealExponent[
                    Max[
                    
                    Abs[{CalculateUtilities`GraphicsUtilities`Private`min, 
                    CalculateUtilities`GraphicsUtilities`Private`max}]]]]}, 
                    CalculateUtilities`GraphicsUtilities`Private`nf[#, 
                    CalculateUtilities`GraphicsUtilities`Private`acc]& ]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[Exp, {
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`min, 
                    Blank[]], 
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`max, 
                    Blank[]]}, 
                    Blank[]] := 
                    With[{CalculateUtilities`GraphicsUtilities`Private`prec = 
                    Max[
                    Ceiling[Log[10, 
                    Max[
                    
                    Abs[{CalculateUtilities`GraphicsUtilities`Private`min, 
                    CalculateUtilities`GraphicsUtilities`Private`max}]]] - 
                    Log[10, (CalculateUtilities`GraphicsUtilities`Private`max - 
                    CalculateUtilities`GraphicsUtilities`Private`min)/100]], 
                    3]}, Quiet[
                    RawBoxes[
                    ToBoxes[
                    NumberForm[
                    Exp[#], 
                    CalculateUtilities`GraphicsUtilities`Private`prec]]]]& ]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[DateString, {
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`min, 
                    Blank[]], 
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`max, 
                    Blank[]]}, 
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`pts, 
                    Blank[]]] := 
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`dates, 
                    CalculateUtilities`GraphicsUtilities`Private`spec}, 
                    CalculateUtilities`GraphicsUtilities`Private`dates = 
                    Map[DateList, 
                    CalculateUtilities`GraphicsUtilities`Private`pts]; 
                    CalculateUtilities`GraphicsUtilities`Private`spec = Switch[
                    Map[Length, 
                    Map[Union, 
                    Transpose[
                    CalculateUtilities`GraphicsUtilities`Private`dates]]], {
                    Blank[], 1, 1, 
                    BlankSequence[]}, {"Year"}, {
                    Blank[], 
                    Blank[], 1, 
                    BlankSequence[]}, {"MonthNameShort", " ", "Year"}, 
                    Blank[], {
                    "DayShort", " ", "MonthNameShort", " ", "Year"}]; 
                    If[(CalculateUtilities`GraphicsUtilities`Private`max - 
                    CalculateUtilities`GraphicsUtilities`Private`min)/
                    31536000 > 25, 
                    CalculateUtilities`GraphicsUtilities`Private`spec = {
                    "Year"}]; 
                    With[{CalculateUtilities`GraphicsUtilities`Private`s = 
                    CalculateUtilities`GraphicsUtilities`Private`spec}, 
                    DateString[#, 
                    CalculateUtilities`GraphicsUtilities`Private`s]& ]]; 
                    CalculateUtilities`GraphicsUtilities`Private`numberForm = 
                    Function[{
                    CalculateUtilities`GraphicsUtilities`Private`a, 
                    CalculateUtilities`GraphicsUtilities`Private`acc}, 
                    Quiet[
                    RawBoxes[
                    ToBoxes[
                    NumberForm[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Max[1, 
                    Ceiling[
                    RealExponent[
                    CalculateUtilities`GraphicsUtilities`Private`a] + 
                    CalculateUtilities`GraphicsUtilities`Private`acc]], 
                    ExponentFunction -> (Null& ), 
                    NumberFormat -> (StringReplace[#, StringExpression[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`s, 
                    BlankSequence[]], ".", EndOfString] -> 
                    CalculateUtilities`GraphicsUtilities`Private`s]& )]]]]]]]; 
                 Typeset`initDone$$ = True), DynamicModuleValues :> {}, 
                Deinitialization :> None, 
                UntrackedVariables :> {Typeset`size$$}, 
                SynchronousInitialization -> True, 
                UnsavedVariables :> {Typeset`initDone$$}], "Manipulate", 
               Deployed -> True, StripOnInput -> False], TraditionalForm], 
             Manipulate`InterpretManipulate[1]], TraditionalForm]], 
          "Output"]}], 
       XMLElement["dataformats", {}, {"minput"}]}], 
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {
        "Plot[(11 (11 + 9 x))/(18 (1 + x)^(9/11)), {x, -34, 32}]"}], 
       XMLElement["cell", {"compressed" -> True, "string" -> False}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             FormBox[
              StyleBox[
               
               DynamicModuleBox[{
                Global`max149$$ = 0.5, Global`min148$$ = -0.5, 
                 CalculateUtilities`GraphicsUtilities`Private`more$$ = False, 
                 Typeset`show$$ = True, Typeset`bookmarkList$$ = {}, 
                 Typeset`bookmarkMode$$ = "Menu", Typeset`animator$$, 
                 Typeset`animvar$$ = 1, Typeset`name$$ = "\"untitled\"", 
                 Typeset`specs$$ = {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`more$$], {
                    False, True}}, {{
                    Hold[Global`min148$$], -0.5, "min"}, -1, 1}, {{
                    Hold[Global`max149$$], 0.5, "max"}, -1, 1}, {
                    Hold[
                    Style[
                    Overlay[{
                    RawBoxes[
                    PaneBox[
                    GraphicsBox[
                    
                    RasterBox[{{{0, 0, 0, 24}}, {{0, 0, 0, 9}}, {{0, 0, 0, 
                    10}}, {{0, 0, 0, 10}}, {{0, 0, 0, 9}}, {{0, 0, 0, 9}}, {{
                    0, 0, 0, 8}}, {{0, 0, 0, 8}}, {{0, 0, 0, 9}}, {{0, 0, 0, 
                    8}}, {{0, 0, 0, 7}}, {{0, 0, 0, 7}}, {{0, 0, 0, 8}}, {{0, 
                    0, 0, 6}}, {{0, 0, 0, 6}}, {{0, 0, 0, 6}}, {{0, 0, 0, 
                    6}}, {{0, 0, 0, 5}}, {{0, 0, 0, 6}}, {{0, 0, 0, 5}}, {{0, 
                    0, 0, 4}}, {{0, 0, 0, 4}}, {{0, 0, 0, 5}}, {{0, 0, 0, 
                    5}}, {{0, 0, 0, 3}}, {{0, 0, 0, 4}}, {{0, 0, 0, 3}}, {{0, 
                    0, 0, 3}}, {{0, 0, 0, 3}}, {{0, 0, 0, 3}}, {{0, 0, 0, 
                    2}}, {{0, 0, 0, 2}}, {{0, 0, 0, 2}}, {{0, 0, 0, 2}}, {{0, 
                    0, 0, 1}}, {{0, 0, 0, 2}}, {{0, 0, 0, 2}}, {{0, 0, 0, 
                    0}}, {{0, 0, 0, 1}}, {{255, 255, 255, 0}}, {{255, 255, 
                    255, 0}}, {{255, 255, 255, 0}}, {{255, 255, 255, 0}}, {{
                    255, 255, 255, 0}}, {{255, 255, 255, 0}}}, {{0, 45}, {
                    2500, 0}}, {0, 255}, ColorFunction -> RGBColor], 
                    ImageSize -> {2500, 45}, 
                    PlotRange -> {{0, 2500}, {0, 45}}], ImageSize -> 
                    Scaled[1], ScrollPosition -> {0., 0.}]], 
                    Pane[
                    Column[{
                    Grid[{{
                    Manipulate`Place[1], 
                    Manipulate`Place[2]}}]}], 
                    ImageMargins -> {{20, 30}, {10, 10}}]}, {1, 2}, 2, 
                    Alignment -> {Left, Top}]]], 
                    Manipulate`Dump`ThisIsNotAControl}}, Typeset`size$$ = 
                 Automatic, Typeset`update$$ = 0, Typeset`initDone$$ = False, 
                 Typeset`skipInitDone$$ = False, 
                 CalculateUtilities`GraphicsUtilities`Private`more$451688$$ = 
                 False, Global`min148$451689$$ = 0, Global`max149$451690$$ = 
                 0}, 
                DynamicBox[
                 Manipulate`ManipulateBoxes[
                 2, TraditionalForm, 
                  "Variables" :> {
                   Global`max149$$ = 0.5, Global`min148$$ = -0.5, 
                    CalculateUtilities`GraphicsUtilities`Private`more$$ = 
                    False}, "ControllerVariables" :> {
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`more$$, 
                    CalculateUtilities`GraphicsUtilities`Private`more$451688$$\
, False], 
                    Hold[Global`min148$$, Global`min148$451689$$, 0], 
                    Hold[Global`max149$$, Global`max149$451690$$, 0]}, 
                  "OtherVariables" :> {
                   Typeset`show$$, Typeset`bookmarkList$$, 
                    Typeset`bookmarkMode$$, Typeset`animator$$, 
                    Typeset`animvar$$, Typeset`name$$, Typeset`specs$$, 
                    Typeset`size$$, Typeset`update$$, Typeset`initDone$$, 
                    Typeset`skipInitDone$$}, "Body" :> Function[Null, 
                    Labeled[
                    CalculateUtilities`GraphicsUtilities`Private`post$451680[
                    Plot[{
                    Re[
                    Rational[11, 18] (1 + Global`x)^Rational[-9, 11] (11 + 
                    9 Global`x)], 
                    Im[
                    Rational[11, 18] (1 + Global`x)^Rational[-9, 11] (11 + 
                    9 Global`x)]}, 
                    SlotSequence[2]]], 
                    Column[{
                    Row[{
                    Graphics[{
                    Directive[
                    RGBColor[0.24720000000000014`, 0.24, 0.6], 
                    AbsoluteThickness[1]], 
                    Line[{{0, 0}, {1, 0}}]}, AspectRatio -> Rational[1, 5], 
                    ImageSize -> 20], 
                    Style[" real part", Smaller, 
                    GrayLevel[0.3]]}], 
                    Row[{
                    Graphics[{
                    Directive[
                    RGBColor[1, 0.3, 0], 
                    AbsoluteThickness[1]], 
                    Line[{{0, 0}, {1, 0}}]}, AspectRatio -> Rational[1, 5], 
                    ImageSize -> 20], 
                    Style[" imaginary part", Smaller, 
                    GrayLevel[0.3]]}]}, Spacings -> 0], {{Right, Bottom}}], 
                    HoldAll][
                   Rational[11, 18] (1 + Global`x)^Rational[-9, 11] (11 + 
                    9 Global`x), {
                    Global`x, -1. + 
                    34.91185550070625 
                    Tan[1.5040801783846716` Global`min148$$], -1. + 
                    34.91185550070625 
                    Tan[1.5040801783846716` 
                    If[Global`min148$$ == Global`max149$$, 
                    Global`min148$$ + (
                    31.657050505050506` - -33.657050505050506`)/1000, 
                    Global`max149$$]]}, 
                    LabelStyle -> {FontFamily -> "Bitstream Charter"}, 
                    WorkingPrecision -> MachinePrecision, 
                    PlotRange -> {Automatic, Automatic}, Ticks -> Automatic, 
                    ImageSize -> 200, AxesLabel -> {
                    RawBoxes[
                    FormBox["x", TraditionalForm]], None}], 
                  "Specifications" :> {{
                    CalculateUtilities`GraphicsUtilities`Private`more$$, {
                    False, True}, ControlType -> None}, {{
                    Global`min148$$, -0.5, "min"}, -1, 1, ImageSize -> Tiny, 
                    ControlPlacement -> 1}, {{
                    Global`max149$$, 0.5, "max"}, -1, 1, ImageSize -> Tiny, 
                    ControlPlacement -> 2}, 
                    Style[
                    Overlay[{
                    RawBoxes[
                    PaneBox[
                    GraphicsBox[
                    
                    RasterBox[{{{0, 0, 0, 24}}, {{0, 0, 0, 9}}, {{0, 0, 0, 
                    10}}, {{0, 0, 0, 10}}, {{0, 0, 0, 9}}, {{0, 0, 0, 9}}, {{
                    0, 0, 0, 8}}, {{0, 0, 0, 8}}, {{0, 0, 0, 9}}, {{0, 0, 0, 
                    8}}, {{0, 0, 0, 7}}, {{0, 0, 0, 7}}, {{0, 0, 0, 8}}, {{0, 
                    0, 0, 6}}, {{0, 0, 0, 6}}, {{0, 0, 0, 6}}, {{0, 0, 0, 
                    6}}, {{0, 0, 0, 5}}, {{0, 0, 0, 6}}, {{0, 0, 0, 5}}, {{0, 
                    0, 0, 4}}, {{0, 0, 0, 4}}, {{0, 0, 0, 5}}, {{0, 0, 0, 
                    5}}, {{0, 0, 0, 3}}, {{0, 0, 0, 4}}, {{0, 0, 0, 3}}, {{0, 
                    0, 0, 3}}, {{0, 0, 0, 3}}, {{0, 0, 0, 3}}, {{0, 0, 0, 
                    2}}, {{0, 0, 0, 2}}, {{0, 0, 0, 2}}, {{0, 0, 0, 2}}, {{0, 
                    0, 0, 1}}, {{0, 0, 0, 2}}, {{0, 0, 0, 2}}, {{0, 0, 0, 
                    0}}, {{0, 0, 0, 1}}, {{255, 255, 255, 0}}, {{255, 255, 
                    255, 0}}, {{255, 255, 255, 0}}, {{255, 255, 255, 0}}, {{
                    255, 255, 255, 0}}, {{255, 255, 255, 0}}}, {{0, 45}, {
                    2500, 0}}, {0, 255}, ColorFunction -> RGBColor], 
                    ImageSize -> {2500, 45}, 
                    PlotRange -> {{0, 2500}, {0, 45}}], ImageSize -> 
                    Scaled[1], ScrollPosition -> {0., 0.}]], 
                    Pane[
                    Column[{
                    Grid[{{
                    Manipulate`Place[1], 
                    Manipulate`Place[2]}}]}], 
                    ImageMargins -> {{20, 30}, {10, 10}}]}, {1, 2}, 2, 
                    Alignment -> {Left, Top}]]}, 
                  "Options" :> {
                   TrackedSymbols -> True, ControlPlacement -> Bottom, 
                    FrameMargins -> {{0, 0}, {0, 10}}, Paneled -> False, 
                    AppearanceElements -> {}, 
                    LabelStyle -> {
                    "DialogStyle", FontColor -> GrayLevel[0.25]}}, 
                  "DefaultOptions" :> {}], SingleEvaluation -> True], 
                Initialization :> (ReleaseHold[
                   Hold[
                   CalculateUtilities`GraphicsUtilities`Private`WACleanTicks[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Blank[]]] := 
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`res, 
                    CalculateUtilities`GraphicsUtilities`Private`unitformat}, 
                    CalculateUtilities`GraphicsUtilities`Private`res = 
                    ReplaceAll[
                    ReplaceAll[
                    Part[
                    DeleteCases[
                    ReplaceAll[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Alternatives[
                    Style, Global`UnitNumberForm, NumberForm] -> (#& )], {
                    Blank[], "", 
                    BlankNullSequence[]}], All, 
                    Span[1, 2]], Superscript[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[Integer]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`p, 
                    Blank[Integer]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`b^
                    CalculateUtilities`GraphicsUtilities`Private`p], Row[{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    BlankSequence[]]}, "\[Times]"] :> 
                    Times[CalculateUtilities`GraphicsUtilities`Private`a]]; If[
                    MatchQ[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, All, 2], 
                    Condition[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`quants, {
                    Alternatives[
                    BlankSequence[Global`ShortQuantity], 
                    BlankSequence[Global`Quantity]]}], Length[
                    Union[
                    Map[
                    Global`UnitObjectPart, 
                    CalculateUtilities`GraphicsUtilities`Private`quants]]] == 
                    1]], CalculateUtilities`GraphicsUtilities`Private`\
unitformat = Global`ToCDFQuantityFunction[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, 1, 2]]; 
                    CalculateUtilities`GraphicsUtilities`Private`unitformat -> 
                    Thread[{
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, All, 1], 
                    Global`QuantityPart[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, All, 2], 
                    Global`UnitObjectPart[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, 1, 
                    2]]]}], 
                    CalculateUtilities`GraphicsUtilities`Private`res]]; 
                    Options[
                    CalculateUtilities`GraphicsUtilities`Private`post$451680] = \
{"ReturnInteractiveTypes" -> False, "Nearest" -> Automatic}; 
                    CalculateUtilities`GraphicsUtilities`Private`post$451680[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Blank[Graphics]], 
                    OptionsPattern[]] := 
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`lines, 
                    CalculateUtilities`GraphicsUtilities`Private`pts, 
                    CalculateUtilities`GraphicsUtilities`Private`gg, 
                    CalculateUtilities`GraphicsUtilities`Private`type, 
                    CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r, 
                    CalculateUtilities`GraphicsUtilities`Private`oldepilog, 
                    CalculateUtilities`GraphicsUtilities`Private`range, 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines, 
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines,
                     CalculateUtilities`GraphicsUtilities`Private`\
neareststyle = OptionValue["Nearest"]}, 
                    CalculateUtilities`GraphicsUtilities`Private`oldepilog = 
                    Replace[
                    ReplaceAll[Epilog, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]], 
                    Epilog -> Sequence[]]; Switch[
                    ReplaceAll[{Frame, Axes}, 
                    Options[
                    CalculateUtilities`GraphicsUtilities`Private`g]], {True, 
                    Blank[]}, 
                    CalculateUtilities`GraphicsUtilities`Private`type = 
                    Frame; {
                    CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r} = 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, 
                    ReplaceAll[FrameTicks, 
                    Options[
                    CalculateUtilities`GraphicsUtilities`Private`g]]], {
                    Blank[], True}, 
                    CalculateUtilities`GraphicsUtilities`Private`type = 
                    Axes; {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l} = 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, 
                    ReplaceAll[Ticks, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]]], 
                    Blank[], 
                    CalculateUtilities`GraphicsUtilities`Private`type = None]; 
                    If[
                    And[
                    CalculateUtilities`GraphicsUtilities`Private`type === 
                    Frame, 
                    Or[
                    Not[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`t === None, 
                    CalculateUtilities`GraphicsUtilities`Private`b === 
                    CalculateUtilities`GraphicsUtilities`Private`t]], 
                    Not[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`r === None, 
                    CalculateUtilities`GraphicsUtilities`Private`l === 
                    CalculateUtilities`GraphicsUtilities`Private`r]]]], 
                    CalculateUtilities`GraphicsUtilities`Private`type = None]; 
                    If[
                    TrueQ[
                    OptionValue["ReturnInteractiveTypes"]], 
                    Which[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`type === 
                    None, CalculateUtilities`GraphicsUtilities`Private`b === 
                    None, CalculateUtilities`GraphicsUtilities`Private`l === 
                    None], {}, 
                    FreeQ[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Alternatives[Line, Point]], {}, True, {
                    "Tooltips", "Coordinates"}], If[
                    FreeQ[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Alternatives[Line, Point]], 
                    Return[CalculateUtilities`GraphicsUtilities`Private`g]]; 
                    CalculateUtilities`GraphicsUtilities`Private`gg = 
                    Normal[CalculateUtilities`GraphicsUtilities`Private`g]; 
                    CalculateUtilities`GraphicsUtilities`Private`pts = 
                    Partition[
                    Flatten[
                    Cases[
                    Part[CalculateUtilities`GraphicsUtilities`Private`gg, 1], 
                    Point[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Blank[]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`a, 
                    Infinity]], 2]; 
                    If[Length[
                    CalculateUtilities`GraphicsUtilities`Private`pts] < 2, 
                    CalculateUtilities`GraphicsUtilities`Private`lines = Cases[
                    Part[CalculateUtilities`GraphicsUtilities`Private`gg, 1], 
                    
                    Blank[Line], Infinity]; 
                    If[CalculateUtilities`GraphicsUtilities`Private`lines === \
{}, 
                    Return[CalculateUtilities`GraphicsUtilities`Private`g]]; 
                    CalculateUtilities`GraphicsUtilities`Private`pts = Flatten[
                    Cases[
                    CalculateUtilities`GraphicsUtilities`Private`lines, Line[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Blank[]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`a, Infinity],
                     1]; If[
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle === 
                    Automatic, If[
                    CalculateUtilities`GraphicsUtilities`Private`orderedLines[
                    CalculateUtilities`GraphicsUtilities`Private`lines], 
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle = 
                    "1D", CalculateUtilities`GraphicsUtilities`Private`\
neareststyle = "2D"]; Null], 
                    If[
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle === 
                    Automatic, 
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle = 
                    "2D"]]; 
                    CalculateUtilities`GraphicsUtilities`Private`range = 
                    Replace[
                    ReplaceAll[PlotRange, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]], 
                    Except[{{
                    PatternTest[
                    Blank[], NumberQ], 
                    PatternTest[
                    Blank[], NumberQ]}, {
                    PatternTest[
                    Blank[], NumberQ], 
                    PatternTest[
                    Blank[], NumberQ]}}] :> {
                    Through[
                    {Min, Max}[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    1]]], 
                    Through[
                    {Min, Max}[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    2]]]}]; CalculateUtilities`GraphicsUtilities`Private`b = 
                    
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[CalculateUtilities`GraphicsUtilities`Private`b, 
                    First[CalculateUtilities`GraphicsUtilities`Private`range], 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    1]]; CalculateUtilities`GraphicsUtilities`Private`l = 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[CalculateUtilities`GraphicsUtilities`Private`l, 
                    Last[CalculateUtilities`GraphicsUtilities`Private`range], 
                    
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    2]]; CalculateUtilities`GraphicsUtilities`Private`\
oldgridlines = ReplaceAll[GridLines, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]]; 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines = 
                    With[{CalculateUtilities`GraphicsUtilities`Private`gray = 
                    GrayLevel[0.7]}, 
                    Replace[
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines,\
 {Pattern[CalculateUtilities`GraphicsUtilities`Private`a, {
                    Blank[List], 
                    Blank[List]}] :> Dynamic[
                    Join[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Replace[
                    MousePosition[{"Graphics", Graphics}, None], {
                    None -> {{}, {}}, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`x, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`y, 
                    Blank[]]} :> {{{
                    CalculateUtilities`GraphicsUtilities`Private`x, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}, {{
                    CalculateUtilities`GraphicsUtilities`Private`y, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}}}], 
                    2]], {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Blank[List]], Automatic} :> 
                    With[{CalculateUtilities`GraphicsUtilities`Private`\
divisions = {CalculateUtilities`GraphicsUtilities`Private`a, 
                    FindDivisions[
                    Last[CalculateUtilities`GraphicsUtilities`Private`range], 
                    7]}}, 
                    Dynamic[
                    Join[
                    CalculateUtilities`GraphicsUtilities`Private`divisions, 
                    Replace[
                    MousePosition[{"Graphics", Graphics}, None], {
                    None -> {{}, {}}, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`x, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`y, 
                    Blank[]]} :> {{{
                    CalculateUtilities`GraphicsUtilities`Private`x, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}, {{
                    CalculateUtilities`GraphicsUtilities`Private`y, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}}}], 
                    2]]], Blank[] -> Dynamic[
                    
                    Map[{{#, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}& , 
                    MousePosition[{"Graphics", Graphics}, None]]]}]]; If[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`type === 
                    None, CalculateUtilities`GraphicsUtilities`Private`b === 
                    None, CalculateUtilities`GraphicsUtilities`Private`l === 
                    None], 
                    Show[
                    CalculateUtilities`GraphicsUtilities`Private`g, GridLines -> 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines, 
                    If[
                    MatchQ[
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines, 
                    Alternatives[None, GridLines]], 
                    Method -> {"GridLinesInFront" -> True}, 
                    Apply[Sequence, {}]]], 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`nf = 
                    If[CalculateUtilities`GraphicsUtilities`Private`\
neareststyle === "1D", 
                    With[{CalculateUtilities`GraphicsUtilities`Private`n = 
                    Nearest[Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 1] -> 
                    CalculateUtilities`GraphicsUtilities`Private`pts]}, 
                    CalculateUtilities`GraphicsUtilities`Private`n[
                    Part[#, 1]]& ], 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`n = 
                    Nearest[Transpose[
                    Transpose[
                    CalculateUtilities`GraphicsUtilities`Private`pts]/Abs[
                    Apply[
                    Subtract, 
                    CalculateUtilities`GraphicsUtilities`Private`range, {
                    1}]]] -> 
                    CalculateUtilities`GraphicsUtilities`Private`pts], 
                    CalculateUtilities`GraphicsUtilities`Private`scale = Abs[
                    Apply[
                    Subtract, 
                    CalculateUtilities`GraphicsUtilities`Private`range, {
                    1}]]}, CalculateUtilities`GraphicsUtilities`Private`n[#/
                    CalculateUtilities`GraphicsUtilities`Private`scale]& ]], 
                    CalculateUtilities`GraphicsUtilities`Private`left = 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`bottom = 
                    CalculateUtilities`GraphicsUtilities`Private`b}, 
                    Show[
                    CalculateUtilities`GraphicsUtilities`Private`g, GridLines -> 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines, 
                    If[
                    MatchQ[
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines, 
                    Alternatives[None, GridLines]], 
                    Method -> {"GridLinesInFront" -> True}, 
                    Apply[Sequence, {}]], 
                    Epilog -> {
                    CalculateUtilities`GraphicsUtilities`Private`oldepilog, 
                    Dynamic[
                    
                    DynamicModule[{
                    CalculateUtilities`GraphicsUtilities`Private`pt = 
                    CalculateUtilities`GraphicsUtilities`Private`nf[
                    MousePosition[{"Graphics", Graphics}, {0, 0}]], 
                    CalculateUtilities`GraphicsUtilities`Private`scaled = 
                    MousePosition[{"GraphicsScaled", Graphics}, None]}, 
                    If[CalculateUtilities`GraphicsUtilities`Private`scaled === 
                    None, {}, {
                    Text[
                    Style[
                    Row[{
                    CalculateUtilities`GraphicsUtilities`Private`bottom[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pt, 1, 1]], 
                    CalculateUtilities`GraphicsUtilities`Private`left[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pt, 1, 2]]}, 
                    ","], 12], 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pt, 1], {
                    1.5 Sign[Part[
                    CalculateUtilities`GraphicsUtilities`Private`scaled, 1] - 
                    0.5], 0}, Background -> White], 
                    AbsolutePointSize[7], 
                    Point[CalculateUtilities`GraphicsUtilities`Private`pt], 
                    White, 
                    AbsolutePointSize[5], 
                    Point[
                    CalculateUtilities`GraphicsUtilities`Private`pt]}]]]}]]]]]\
; CalculateUtilities`GraphicsUtilities`Private`post$451680[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Blank[]], 
                    BlankNullSequence[]] := 
                    CalculateUtilities`GraphicsUtilities`Private`g; 
                    CalculateUtilities`GraphicsUtilities`Private`orderedLines[{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`l, 
                    BlankSequence[Line]]}] := 
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`ordered, 
                    CalculateUtilities`GraphicsUtilities`Private`intervals}, 
                    CalculateUtilities`GraphicsUtilities`Private`ordered = 
                    Apply[And, 
                    Map[OrderedQ[
                    Part[#, 1, All, 1]]& , 
                    Hold[CalculateUtilities`GraphicsUtilities`Private`l]]]; If[
                    Not[
                    TrueQ[
                    CalculateUtilities`GraphicsUtilities`Private`ordered]], 
                    Return[False]]; 
                    CalculateUtilities`GraphicsUtilities`Private`intervals = 
                    Part[{CalculateUtilities`GraphicsUtilities`Private`l}, 
                    All, 1, {1, -1}, 1]; Length[
                    Apply[
                    Interval, 
                    CalculateUtilities`GraphicsUtilities`Private`intervals]] === 
                    Length[CalculateUtilities`GraphicsUtilities`Private`\
intervals]]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, 
                    Alternatives[Automatic, FrameTicks]] = {
                    Identity, Identity, Identity, Identity}; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`l, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`t, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`r, 
                    Blank[]]}] := 
                    Map[CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction, {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r}]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, {{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`l, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`r, 
                    Blank[]]}, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`t, 
                    Blank[]]}}] := 
                    Map[CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction, {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r}]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, 
                    Blank[]] = {None, None, None, None}; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, 
                    Alternatives[Automatic, Ticks]] = {Identity, Identity}; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`h, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`v, 
                    Blank[]]}] := 
                    Map[CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction, {CalculateUtilities`GraphicsUtilities`Private`h, 
                    CalculateUtilities`GraphicsUtilities`Private`v}]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, 
                    Blank[]] = {None, None}; 
                    CalculateUtilities`GraphicsUtilities`Private`CDFCleanTicks[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Blank[]]] := ReplaceAll[
                    ReplaceAll[
                    Part[
                    DeleteCases[
                    ReplaceAll[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Alternatives[Style, NumberForm] -> (#& )], {
                    Blank[], "", 
                    BlankNullSequence[]}], All, 
                    Span[1, 2]], Superscript[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[Integer]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`p, 
                    Blank[Integer]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`b^
                    CalculateUtilities`GraphicsUtilities`Private`p], Row[{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    BlankSequence[]]}, "\[Times]"] :> 
                    Times[CalculateUtilities`GraphicsUtilities`Private`a]]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks$, 
                    Blank[]]] := 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    CalculateUtilities`GraphicsUtilities`Private`WACleanTicks[
                    CalculateUtilities`GraphicsUtilities`Private`ticks$]]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[None] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[True] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[Automatic] = Identity; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[All] = Identity; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[Pattern[CalculateUtilities`GraphicsUtilities`Private`func, 
                    Blank[]] -> 
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Blank[]]] := Replace[
                    
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[CalculateUtilities`GraphicsUtilities`Private`ticks], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`f, 
                    Except[None]] :> 
                    Composition[
                    CalculateUtilities`GraphicsUtilities`Private`func, 
                    CalculateUtilities`GraphicsUtilities`Private`f]]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[{}] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {
                    Repeated[{
                    Blank[Integer], 
                    Blank[String]}]}]] := Which[
                    Quiet[
                    MatchQ[
                    Apply[SameQ, 
                    Map[Part[
                    DateList[#], 
                    Span[2, All]]& , 
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {
                    2}], {1}], {
                    Repeated[True]}]], DateString, 
                    Apply[And, 
                    StringMatchQ[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, All, 
                    2], NumberString]], 
                    
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Transpose[{
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, All, 
                    1], 
                    ToExpression[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, All, 
                    2]]}]], True, None]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {
                    Repeated[{
                    PatternTest[
                    Blank[], NumericQ], 
                    PatternTest[
                    Blank[], NumericQ]}]}]] := Which[
                    MatchQ[
                    Apply[
                    Equal, CalculateUtilities`GraphicsUtilities`Private`ticks,\
 {1}], {
                    Repeated[True]}], Identity, 
                    MatchQ[
                    
                    Apply[# == Log[#2]& , 
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {1}], {
                    Repeated[True]}], Exp, 
                    TrueQ[
                    Quiet[
                    Apply[Equal, 
                    Apply[Divide, Transpose[
                    Rest[CalculateUtilities`GraphicsUtilities`Private`ticks]] - 
                    Part[CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    1]]]]], 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`slope = 
                    Apply[Divide, 
                    Apply[Subtract, 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {-1, 
                    1}]]]}, 
                    SetPrecision[(# - Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 1, 
                    1])/CalculateUtilities`GraphicsUtilities`Private`slope + 
                    Part[CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    1, 2], 3]& ], True, None]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Blank[]] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`type, 
                    Blank[]], 
                    BlankNullSequence[]] := 
                    CalculateUtilities`GraphicsUtilities`Private`type; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[Identity, {
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`min, 
                    Blank[]], 
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`max, 
                    Blank[]]}, 
                    Blank[]] := 
                    With[{CalculateUtilities`GraphicsUtilities`Private`nf = 
                    CalculateUtilities`GraphicsUtilities`Private`numberForm, 
                    CalculateUtilities`GraphicsUtilities`Private`acc = 
                    Floor[Max[
                    Ceiling[Log[10, 
                    Max[
                    
                    Abs[{CalculateUtilities`GraphicsUtilities`Private`min, 
                    CalculateUtilities`GraphicsUtilities`Private`max}]]] - 
                    Log[10, (CalculateUtilities`GraphicsUtilities`Private`max - 
                    CalculateUtilities`GraphicsUtilities`Private`min)/100]], 
                    3] - RealExponent[
                    Max[
                    
                    Abs[{CalculateUtilities`GraphicsUtilities`Private`min, 
                    CalculateUtilities`GraphicsUtilities`Private`max}]]]]}, 
                    CalculateUtilities`GraphicsUtilities`Private`nf[#, 
                    CalculateUtilities`GraphicsUtilities`Private`acc]& ]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[Exp, {
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`min, 
                    Blank[]], 
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`max, 
                    Blank[]]}, 
                    Blank[]] := 
                    With[{CalculateUtilities`GraphicsUtilities`Private`prec = 
                    Max[
                    Ceiling[Log[10, 
                    Max[
                    
                    Abs[{CalculateUtilities`GraphicsUtilities`Private`min, 
                    CalculateUtilities`GraphicsUtilities`Private`max}]]] - 
                    Log[10, (CalculateUtilities`GraphicsUtilities`Private`max - 
                    CalculateUtilities`GraphicsUtilities`Private`min)/100]], 
                    3]}, Quiet[
                    RawBoxes[
                    ToBoxes[
                    NumberForm[
                    Exp[#], 
                    CalculateUtilities`GraphicsUtilities`Private`prec]]]]& ]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[DateString, {
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`min, 
                    Blank[]], 
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`max, 
                    Blank[]]}, 
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`pts, 
                    Blank[]]] := 
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`dates, 
                    CalculateUtilities`GraphicsUtilities`Private`spec}, 
                    CalculateUtilities`GraphicsUtilities`Private`dates = 
                    Map[DateList, 
                    CalculateUtilities`GraphicsUtilities`Private`pts]; 
                    CalculateUtilities`GraphicsUtilities`Private`spec = Switch[
                    Map[Length, 
                    Map[Union, 
                    Transpose[
                    CalculateUtilities`GraphicsUtilities`Private`dates]]], {
                    Blank[], 1, 1, 
                    BlankSequence[]}, {"Year"}, {
                    Blank[], 
                    Blank[], 1, 
                    BlankSequence[]}, {"MonthNameShort", " ", "Year"}, 
                    Blank[], {
                    "DayShort", " ", "MonthNameShort", " ", "Year"}]; 
                    If[(CalculateUtilities`GraphicsUtilities`Private`max - 
                    CalculateUtilities`GraphicsUtilities`Private`min)/
                    31536000 > 25, 
                    CalculateUtilities`GraphicsUtilities`Private`spec = {
                    "Year"}]; 
                    With[{CalculateUtilities`GraphicsUtilities`Private`s = 
                    CalculateUtilities`GraphicsUtilities`Private`spec}, 
                    DateString[#, 
                    CalculateUtilities`GraphicsUtilities`Private`s]& ]]; 
                    CalculateUtilities`GraphicsUtilities`Private`numberForm = 
                    Function[{
                    CalculateUtilities`GraphicsUtilities`Private`a, 
                    CalculateUtilities`GraphicsUtilities`Private`acc}, 
                    Quiet[
                    RawBoxes[
                    ToBoxes[
                    NumberForm[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Max[1, 
                    Ceiling[
                    RealExponent[
                    CalculateUtilities`GraphicsUtilities`Private`a] + 
                    CalculateUtilities`GraphicsUtilities`Private`acc]], 
                    ExponentFunction -> (Null& ), 
                    NumberFormat -> (StringReplace[#, StringExpression[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`s, 
                    BlankSequence[]], ".", EndOfString] -> 
                    CalculateUtilities`GraphicsUtilities`Private`s]& )]]]]]]]; 
                 Typeset`initDone$$ = True), DynamicModuleValues :> {}, 
                Deinitialization :> None, 
                UntrackedVariables :> {Typeset`size$$}, 
                SynchronousInitialization -> True, 
                UnsavedVariables :> {Typeset`initDone$$}], "Manipulate", 
               Deployed -> True, StripOnInput -> False], TraditionalForm], 
             Manipulate`InterpretManipulate[1]], TraditionalForm]], 
          "Output"]}], 
       XMLElement["dataformats", {}, {"minput"}]}], 
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["cell", {"compressed" -> True, "string" -> False}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             FormBox[
              StyleBox[
               
               DynamicModuleBox[{
                CalculateScan`PlotterScanner`Private`ar$$ = 1, 
                 CalculateScan`PlotterScanner`Private`contraPedalCurveColor$$ = 
                 RGBColor[0.7464574, 0.2952580000000001, 0.2454606], 
                 CalculateScan`PlotterScanner`Private`\
contraPedalCurveCountFactor$$ = 0.3, 
                 CalculateScan`PlotterScanner`Private`\
contraPedalCurveLastParamaters$$ = {}, 
                 CalculateScan`PlotterScanner`Private`contraPedalCurveOpacity$\
$ = 0.8, CalculateScan`PlotterScanner`Private`contraPedalCurvePlotCurves$$ = \
{}, CalculateScan`PlotterScanner`Private`contraPedalCurvePoints$$ = "curve", 
                 CalculateScan`PlotterScanner`Private`contraPedalCurveTF$$ = 
                 False, CalculateScan`PlotterScanner`Private`\
contraPedalCurveThickness$$ = -3., 
                 CalculateScan`PlotterScanner`Private`dualCurveColor$$ = 
                 RGBColor[0.2860602, 0.4663408, 0.29410879999999995`], 
                 CalculateScan`PlotterScanner`Private`dualCurveCountFactor$$ = 
                 0.3, CalculateScan`PlotterScanner`Private`\
dualCurveLastParamaters$$ = {}, 
                 CalculateScan`PlotterScanner`Private`dualCurveOpacity$$ = 
                 0.8, CalculateScan`PlotterScanner`Private`\
dualCurvePlotCurves$$ = {}, 
                 CalculateScan`PlotterScanner`Private`dualCurveTF$$ = False, 
                 CalculateScan`PlotterScanner`Private`dualCurveThickness$$ = \
-3., CalculateScan`PlotterScanner`Private`dualPedalCurvePoints$$ = "curve", 
                 CalculateScan`PlotterScanner`Private`evoluteColor$$ = 
                 RGBColor[0.813033, 0.766292, 0.303458], 
                 CalculateScan`PlotterScanner`Private`evoluteOpacity$$ = 0.8, 
                 CalculateScan`PlotterScanner`Private`evoluteTF$$ = False, 
                 CalculateScan`PlotterScanner`Private`evoluteThickness$$ = \
-3., CalculateScan`PlotterScanner`Private`fy1$$ = 0.982793723247329, 
                 CalculateScan`PlotterScanner`Private`fy2$$ = 
                 0.982793723247329, 
                 CalculateScan`PlotterScanner`Private`\
inverseCurveCircleRadiusFactor$$ = 0.4636476090008061, 
                 CalculateScan`PlotterScanner`Private`inverseCurveColor$$ = 
                 RGBColor[0.2860602, 0.4663408, 0.29410879999999995`], 
                 CalculateScan`PlotterScanner`Private`inverseCurveCountFactor$\
$ = 0.3, CalculateScan`PlotterScanner`Private`inverseCurveOpacity$$ = 0.8, 
                 CalculateScan`PlotterScanner`Private`inverseCurvePlotCurves$$\
 = {}, CalculateScan`PlotterScanner`Private`inverseCurvePoints$$ = "grid", 
                 CalculateScan`PlotterScanner`Private`inverseCurveTF$$ = 
                 False, CalculateScan`PlotterScanner`Private`\
inverseCurveThickness$$ = -3., 
                 CalculateScan`PlotterScanner`Private`inverseLastParamaters$$ = \
{}, CalculateScan`PlotterScanner`Private`involuteColor$$ = 
                 RGBColor[0.49978279999999997`, 0.6025278, 0.2508104], 
                 CalculateScan`PlotterScanner`Private`involuteCount$$ = 60, 
                 CalculateScan`PlotterScanner`Private`involuteOpacity$$ = 0.8,
                  CalculateScan`PlotterScanner`Private`involutesLeftTF$$ = 
                 False, CalculateScan`PlotterScanner`Private`involutesRightTF$\
$ = True, CalculateScan`PlotterScanner`Private`involuteTF$$ = False, 
                 CalculateScan`PlotterScanner`Private`involuteThickness$$ = \
-3., CalculateScan`PlotterScanner`Private`isopticCurveAngle$$ = 
                 Rational[1, 3] Pi, 
                 CalculateScan`PlotterScanner`Private`isopticCurveColor$$ = 
                 RGBColor[
                  0.8519382, 0.7451437999999999, 0.31752080000000005`], 
                 CalculateScan`PlotterScanner`Private`isopticCurveOpacity$$ = 
                 0.8, CalculateScan`PlotterScanner`Private`\
isopticCurvePlotCurves$$ = {}, 
                 CalculateScan`PlotterScanner`Private`isopticCurveTF$$ = 
                 False, CalculateScan`PlotterScanner`Private`\
isopticCurveThickness$$ = -3., 
                 CalculateScan`PlotterScanner`Private`isopticLastParamaters$$ = \
{}, CalculateUtilities`GraphicsUtilities`Private`more$$ = False, 
                 CalculateScan`PlotterScanner`Private`negativePedalCurveColor$\
$ = RGBColor[0.7464574, 0.2952580000000001, 0.2454606], 
                 CalculateScan`PlotterScanner`Private`\
negativePedalCurveCountFactor$$ = 0.3, 
                 CalculateScan`PlotterScanner`Private`\
negativePedalCurveLastParamaters$$ = {}, 
                 CalculateScan`PlotterScanner`Private`\
negativePedalCurveOpacity$$ = 0.8, 
                 CalculateScan`PlotterScanner`Private`\
negativePedalCurvePlotCurves$$ = {}, 
                 CalculateScan`PlotterScanner`Private`\
negativePedalCurvePoints$$ = "curve", 
                 CalculateScan`PlotterScanner`Private`negativePedalCurveTF$$ = 
                 False, CalculateScan`PlotterScanner`Private`\
negativePedalCurveThickness$$ = -3., 
                 CalculateScan`PlotterScanner`Private`normalColor$$ = 
                 RGBColor[0.237, 0.34, 0.575], 
                 CalculateScan`PlotterScanner`Private`normalCount$$ = 120, 
                 CalculateScan`PlotterScanner`Private`normalLength$$ = 
                 0.06421622794870045, 
                 CalculateScan`PlotterScanner`Private`normalOpacity$$ = 0.8, 
                 CalculateScan`PlotterScanner`Private`normalTF$$ = True, 
                 CalculateScan`PlotterScanner`Private`normalThickness$$ = -3.,
                  CalculateScan`PlotterScanner`Private`offsetCurveColor$$ = 
                 RGBColor[0.877875, 0.731045, 0.326896], 
                 CalculateScan`PlotterScanner`Private`offsetCurveCount$$ = 12,
                  CalculateScan`PlotterScanner`Private`offsetCurveDistance$$ = 
                 0.06421622794870045, 
                 CalculateScan`PlotterScanner`Private`\
offsetCurveLastParamaters$$ = {}, 
                 CalculateScan`PlotterScanner`Private`offsetCurveOpacity$$ = 
                 0.8, CalculateScan`PlotterScanner`Private`\
offsetCurvePlotCurves$$ = {}, 
                 CalculateScan`PlotterScanner`Private`offsetCurveTF$$ = False,
                  CalculateScan`PlotterScanner`Private`offsetCurveThickness$$ = \
-3., CalculateScan`PlotterScanner`Private`orthotomicCurveAngle$$ = 
                 Rational[1, 3] Pi, 
                 CalculateScan`PlotterScanner`Private`orthotomicCurveColor$$ = 
                 RGBColor[
                  0.8519382, 0.7451437999999999, 0.31752080000000005`], 
                 CalculateScan`PlotterScanner`Private`\
orthotomicCurveCountFactor$$ = 0.3, 
                 CalculateScan`PlotterScanner`Private`orthotomicCurveOpacity$$\
 = 0.8, CalculateScan`PlotterScanner`Private`orthotomicCurvePlotCurves$$ = {},
                  CalculateScan`PlotterScanner`Private`orthotomicCurvePoints$$\
 = "curve", CalculateScan`PlotterScanner`Private`orthotomicCurveTF$$ = False, 
                 CalculateScan`PlotterScanner`Private`\
orthotomicCurveThickness$$ = -3., 
                 CalculateScan`PlotterScanner`Private`\
orthotomicLastParamaters$$ = {}, 
                 CalculateScan`PlotterScanner`Private`osculatingCircleColor$$ = 
                 RGBColor[0.2752426, 0.4446824, 0.33950440000000004`], 
                 CalculateScan`PlotterScanner`Private`osculatingCircleCount$$ = 
                 60, CalculateScan`PlotterScanner`Private`\
osculatingCircleLastParamaters$$ = {}, 
                 CalculateScan`PlotterScanner`Private`osculatingCircleOpacity$\
$ = 0.8, CalculateScan`PlotterScanner`Private`osculatingCircleRadiiTF$$ = 
                 False, CalculateScan`PlotterScanner`Private`\
osculatingCircles$$ = {}, 
                 CalculateScan`PlotterScanner`Private`osculatingCircleTF$$ = 
                 False, CalculateScan`PlotterScanner`Private`\
osculatingCircleThickness$$ = -3., 
                 CalculateScan`PlotterScanner`Private`pedalCurveColor$$ = 
                 RGBColor[0.32894650000000003`, 0.5006225, 0.2625337], 
                 CalculateScan`PlotterScanner`Private`pedalCurveCountFactor$$ = 
                 0.3, CalculateScan`PlotterScanner`Private`\
pedalCurveLastParamaters$$ = {}, 
                 CalculateScan`PlotterScanner`Private`pedalCurveOpacity$$ = 
                 0.8, CalculateScan`PlotterScanner`Private`\
pedalCurvePlotCurves$$ = {}, 
                 CalculateScan`PlotterScanner`Private`pedalCurvePoints$$ = 
                 "curve", CalculateScan`PlotterScanner`Private`pedalCurveTF$$ = 
                 False, CalculateScan`PlotterScanner`Private`\
pedalCurveThickness$$ = -3., CalculateScan`PlotterScanner`Private`sa$$ = 
                 False, CalculateScan`PlotterScanner`Private`sqPRQ$$ = False, 
                 CalculateScan`PlotterScanner`Private`st$$ = False, 
                 CalculateScan`PlotterScanner`Private`symmxQ$$ = False, 
                 CalculateScan`PlotterScanner`Private`symmyQ$$ = True, 
                 CalculateScan`PlotterScanner`Private`tangentColor$$ = 
                 RGBColor[0.237736, 0.340215, 0.575113], 
                 CalculateScan`PlotterScanner`Private`tangentCount$$ = 60, 
                 CalculateScan`PlotterScanner`Private`tangentLength$$ = 
                 0.06421622794870045, 
                 CalculateScan`PlotterScanner`Private`tangentOpacity$$ = 0.8, 
                 CalculateScan`PlotterScanner`Private`tangentTF$$ = False, 
                 CalculateScan`PlotterScanner`Private`tangentThickness$$ = \
-3., CalculateScan`PlotterScanner`Private`taylorParabolaColor$$ = 
                 RGBColor[0.7189495000000001, 0.719797, 0.283877], 
                 CalculateScan`PlotterScanner`Private`taylorParabolaCount$$ = 
                 36, CalculateScan`PlotterScanner`Private`\
taylorParabolaLastParamaters$$ = {}, 
                 CalculateScan`PlotterScanner`Private`taylorParabolaOpacity$$ = 
                 0.8, CalculateScan`PlotterScanner`Private`taylorParabolas$$ = \
{}, CalculateScan`PlotterScanner`Private`taylorParabolaTF$$ = False, 
                 CalculateScan`PlotterScanner`Private`taylorParabolaThickness$\
$ = -3., CalculateScan`PlotterScanner`Private`tiltedOffsetCurveAngle$$ = 
                 Rational[1, 4] Pi, 
                 CalculateScan`PlotterScanner`Private`tiltedOffsetCurveColor$$\
 = RGBColor[0.49978279999999997`, 0.6025278, 0.2508104], 
                 CalculateScan`PlotterScanner`Private`tiltedOffsetCurveCount$$\
 = 12, CalculateScan`PlotterScanner`Private`tiltedOffsetCurveDistance$$ = 
                 0.06421622794870045, 
                 CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveLastParamaters$$ = {}, 
                 CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveOpacity$$ = 0.8, 
                 CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurvePlotCurves$$ = {}, 
                 CalculateScan`PlotterScanner`Private`tiltedOffsetCurveTF$$ = 
                 False, CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveThickness$$ = -3., 
                 CalculateScan`PlotterScanner`Private`tiltedTangentAngle$$ = 
                 Rational[1, 4] Pi, 
                 CalculateScan`PlotterScanner`Private`tiltedTangentColor$$ = 
                 RGBColor[
                  0.2622702, 0.40739780000000003`, 0.41955020000000004`], 
                 CalculateScan`PlotterScanner`Private`tiltedTangentCount$$ = 
                 60, CalculateScan`PlotterScanner`Private`tiltedTangentLength$\
$ = 0.06421622794870045, 
                 CalculateScan`PlotterScanner`Private`tiltedTangentOpacity$$ = 
                 0.8, CalculateScan`PlotterScanner`Private`tiltedTangentTF$$ = 
                 False, CalculateScan`PlotterScanner`Private`\
tiltedTangentThickness$$ = -3., 
                 CalculateScan`PlotterScanner`Private`x1$$ = \
-0.8264825260281834, CalculateScan`PlotterScanner`Private`x2$$ = 
                 0.7406381842411932, Typeset`show$$ = True, 
                 Typeset`bookmarkList$$ = {}, Typeset`bookmarkMode$$ = "Menu",
                  Typeset`animator$$, Typeset`animvar$$ = 1, Typeset`name$$ = 
                 "\"untitled\"", Typeset`specs$$ = {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`more$$], {
                    False, True}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`x1$$], \
-0.8264825260281834, 
                    Subscript[
                    Style["x", Italic], "min"]}, -1.5393804002589986`, 
                    1.5393804002589986`}, {{
                    Hold[CalculateScan`PlotterScanner`Private`x2$$], 
                    0.7406381842411932, 
                    Subscript[
                    Style["x", Italic], "max"]}, -1.5393804002589986`, 
                    1.5393804002589986`}, {{
                    Hold[CalculateScan`PlotterScanner`Private`symmxQ$$], 
                    False, "symmetric"}, {True, False}}, {{
                    Hold[CalculateScan`PlotterScanner`Private`fy1$$], 
                    0.982793723247329, 
                    Subscript["y", "min"]}, 0, 1.5393804002589986`}, {{
                    Hold[CalculateScan`PlotterScanner`Private`fy2$$], 
                    0.982793723247329, 
                    Subscript["y", "max"]}, 0, 1.5393804002589986`}, {{
                    Hold[CalculateScan`PlotterScanner`Private`symmyQ$$], True,
                     "symmetric"}, {True, False}}, {{
                    Hold[CalculateScan`PlotterScanner`Private`sqPRQ$$], False, 
                    Dynamic[
                    Style["same as horizontal-range", 
                    If[
                    CalculateScan`PlotterScanner`Private`symmxQ$$, Black, 
                    Gray]]]}, {True, False}}, {{
                    Hold[CalculateScan`PlotterScanner`Private`sa$$], False, 
                    "show axes"}, {True, False}}, {{
                    Hold[CalculateScan`PlotterScanner`Private`st$$], False, 
                    Dynamic[
                    Style["show ticks", 
                    If[
                    CalculateScan`PlotterScanner`Private`sa$$ === True, Black,
                     Gray]]]}, {True, False}}, {{
                    Hold[CalculateScan`PlotterScanner`Private`ar$$], 1, 
                    "aspect ratio"}, 
                    Rational[1, 4], 4}, {{
                    Hold[CalculateScan`PlotterScanner`Private`tangentTF$$], 
                    False, ""}, {True, False}}, {{
                    Hold[CalculateScan`PlotterScanner`Private`tangentCount$$],
                     60, ""}, 2, 360, 1}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`tangentLength$$], 
                    0.06421622794870045, ""}, 0, 1.5393804002589986`}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`tangentThickness$$], \
-3., ""}, -4, -0.5}, {{
                    Hold[CalculateScan`PlotterScanner`Private`tangentColor$$], 
                    RGBColor[0.237736, 0.340215, 0.575113], ""}, 
                    RGBColor[1, 0, 0]}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`tangentOpacity$$], 
                    0.8, ""}, 0, 1}, {{
                    Hold[CalculateScan`PlotterScanner`Private`normalTF$$], 
                    True, ""}, {True, False}}, {{
                    Hold[CalculateScan`PlotterScanner`Private`normalCount$$], 
                    120, ""}, 2, 360, 1}, {{
                    Hold[CalculateScan`PlotterScanner`Private`normalLength$$],
                     0.06421622794870045, ""}, 0, 1.5393804002589986`}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`normalThickness$$], \
-3., ""}, -4, -0.5}, {{
                    Hold[CalculateScan`PlotterScanner`Private`normalColor$$], 
                    
                    RGBColor[0.237, 0.34, 0.575], ""}, 
                    RGBColor[1, 0, 0]}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`normalOpacity$$], 
                    0.8, ""}, 0, 1}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`tiltedTangentTF$$], 
                    False, ""}, {True, False}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`tiltedTangentAngle$$]\
, Rational[1, 4] Pi, ""}, -Pi, Pi}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`tiltedTangentCount$$]\
, 60, ""}, 2, 360, 1}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`tiltedTangentLength$$\
], 0.06421622794870045, ""}, 0, 1.5393804002589986`}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
tiltedTangentThickness$$], -3., ""}, -4, -0.5}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`tiltedTangentColor$$]\
, 
                    RGBColor[
                    0.2622702, 0.40739780000000003`, 0.41955020000000004`], 
                    ""}, 
                    RGBColor[1, 0, 0]}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`tiltedTangentOpacity$\
$], 0.8, ""}, 0, 1}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`osculatingCircleTF$$]\
, False, ""}, {True, False}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleCount$$], 60, ""}, 2, 360, 1}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleThickness$$], -3., ""}, -4, -0.5}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleColor$$], 
                    RGBColor[0.2752426, 0.4446824, 0.33950440000000004`], ""}, 
                    RGBColor[1, 0, 0]}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleOpacity$$], 0.8, ""}, 0, 1}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleRadiiTF$$], False, ""}, {True, False}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`taylorParabolaTF$$], 
                    False, ""}, {True, False}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`taylorParabolaCount$$\
], 36, ""}, 2, 120, 1}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
taylorParabolaThickness$$], -3., ""}, -4, -0.5}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`taylorParabolaColor$$\
], 
                    RGBColor[0.7189495000000001, 0.719797, 0.283877], ""}, 
                    RGBColor[1, 0, 0]}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
taylorParabolaOpacity$$], 0.8, ""}, 0, 1}, {{
                    Hold[CalculateScan`PlotterScanner`Private`involuteTF$$], 
                    False, ""}, {True, False}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`involuteCount$$], 60,
                     ""}, 1, 120, 1}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`involuteThickness$$],\
 -3., ""}, -4, -0.5}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`involuteColor$$], 
                    RGBColor[0.49978279999999997`, 0.6025278, 0.2508104], ""}, 
                    RGBColor[1, 0, 0]}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`involuteOpacity$$], 
                    0.8, ""}, 0, 1}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`involutesLeftTF$$], 
                    False, ""}, {True, False}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`involutesRightTF$$], 
                    True, ""}, {True, False}}, {{
                    Hold[CalculateScan`PlotterScanner`Private`evoluteTF$$], 
                    False, ""}, {True, False}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`evoluteThickness$$], \
-3., ""}, -4, -0.5}, {{
                    Hold[CalculateScan`PlotterScanner`Private`evoluteColor$$], 
                    RGBColor[0.813033, 0.766292, 0.303458], ""}, 
                    RGBColor[1, 0, 0]}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`evoluteOpacity$$], 
                    0.8, ""}, 0, 1}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`offsetCurveTF$$], 
                    False, ""}, {True, False}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`offsetCurveDistance$$\
], 0.06421622794870045, ""}, 0, 1.5393804002589986`}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`offsetCurveCount$$], 
                    12, ""}, 1, 60, 1}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`offsetCurveThickness$\
$], -3., ""}, -4, -0.5}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`offsetCurveColor$$], 
                    
                    RGBColor[0.877875, 0.731045, 0.326896], ""}, 
                    RGBColor[1, 0, 0]}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`offsetCurveOpacity$$]\
, 0.8, ""}, 0, 1}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`tiltedOffsetCurveTF$$\
], False, ""}, {True, False}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveAngle$$], Rational[1, 4] Pi, ""}, -Pi, Pi}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveDistance$$], 0.06421622794870045, ""}, 0, 
                    1.5393804002589986`}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveCount$$], 12, ""}, 1, 60, 1}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveThickness$$], -3., ""}, -4, -0.5}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveColor$$], 
                    RGBColor[0.49978279999999997`, 0.6025278, 0.2508104], ""}, 
                    RGBColor[1, 0, 0]}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveOpacity$$], 0.8, ""}, 0, 1}, {{
                    Hold[CalculateScan`PlotterScanner`Private`pedalCurveTF$$],
                     False, ""}, {True, False}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
pedalCurveCountFactor$$], 0.3, ""}, 0, 1}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`pedalCurveThickness$$\
], -3., ""}, -4, -0.5}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`pedalCurveColor$$], 
                    RGBColor[0.32894650000000003`, 0.5006225, 0.2625337], ""}, 
                    RGBColor[1, 0, 0]}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`pedalCurveOpacity$$],
                     0.8, ""}, 0, 1}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`pedalCurvePoints$$], 
                    "curve", ""}, {"grid", "curve"}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`negativePedalCurveTF$\
$], False, ""}, {True, False}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurveCountFactor$$], 0.3, ""}, 0, 1}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurveThickness$$], -3., ""}, -4, -0.5}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurveColor$$], 
                    RGBColor[0.7464574, 0.2952580000000001, 0.2454606], ""}, 
                    RGBColor[1, 0, 0]}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurveOpacity$$], 0.8, ""}, 0, 1}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurvePoints$$], "curve", ""}, {"curve", "grid"}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`contraPedalCurveTF$$]\
, False, ""}, {True, False}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurveCountFactor$$], 0.3, ""}, 0, 1}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurveThickness$$], -3., ""}, -4, -0.5}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurveColor$$], 
                    RGBColor[0.7464574, 0.2952580000000001, 0.2454606], ""}, 
                    RGBColor[1, 0, 0]}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurveOpacity$$], 0.8, ""}, 0, 1}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurvePoints$$], "curve", ""}, {"curve", "grid"}}, {{
                    Hold[CalculateScan`PlotterScanner`Private`dualCurveTF$$], 
                    False, ""}, {True, False}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`dualCurveCountFactor$\
$], 0.3, ""}, 0, 1}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`dualCurveThickness$$]\
, -3., ""}, -4, -0.5}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`dualCurveColor$$], 
                    RGBColor[0.2860602, 0.4663408, 0.29410879999999995`], ""}, 
                    RGBColor[1, 0, 0]}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`dualCurveOpacity$$], 
                    0.8, ""}, 0, 1}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`dualPedalCurvePoints$\
$], "curve", ""}, {"curve", "grid"}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`inverseCurveTF$$], 
                    False, ""}, {True, False}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
inverseCurveCountFactor$$], 0.3, ""}, 0, 1}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
inverseCurveThickness$$], -3., ""}, -4, -0.5}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`inverseCurveColor$$], 
                    RGBColor[0.2860602, 0.4663408, 0.29410879999999995`], ""}, 
                    RGBColor[1, 0, 0]}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`inverseCurveOpacity$$\
], 0.8, ""}, 0, 1}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`inverseCurvePoints$$]\
, "grid", ""}, {"curve", "grid"}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
inverseCurveCircleRadiusFactor$$], 0.4636476090008061, ""}, 0, 1}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`isopticCurveTF$$], 
                    False, ""}, {True, False}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`isopticCurveAngle$$],
                     Rational[1, 3] Pi, ""}, 0, Pi}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
isopticCurveThickness$$], -3., ""}, -4, -0.5}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`isopticCurveColor$$], 
                    RGBColor[
                    0.8519382, 0.7451437999999999, 0.31752080000000005`], ""}, 
                    RGBColor[1, 0, 0]}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`isopticCurveOpacity$$\
], 0.8, ""}, 0, 1}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`orthotomicCurveTF$$],
                     False, ""}, {True, False}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`orthotomicCurveAngle$\
$], Rational[1, 3] Pi, ""}, 0, Pi}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
orthotomicCurveCountFactor$$], 0.3, ""}, 0, 1}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
orthotomicCurveThickness$$], -3., ""}, -4, -0.5}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`orthotomicCurveColor$\
$], 
                    RGBColor[
                    0.8519382, 0.7451437999999999, 0.31752080000000005`], ""}, 
                    RGBColor[1, 0, 0]}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
orthotomicCurveOpacity$$], 0.8, ""}, 0, 1}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
orthotomicCurvePoints$$], "curve", ""}, {"curve", "grid"}}, {
                    Hold[
                    Style[
                    Overlay[{
                    RawBoxes[
                    PaneBox[
                    GraphicsBox[
                    
                    RasterBox[{{{0, 0, 0, 24}}, {{0, 0, 0, 9}}, {{0, 0, 0, 
                    10}}, {{0, 0, 0, 10}}, {{0, 0, 0, 9}}, {{0, 0, 0, 9}}, {{
                    0, 0, 0, 8}}, {{0, 0, 0, 8}}, {{0, 0, 0, 9}}, {{0, 0, 0, 
                    8}}, {{0, 0, 0, 7}}, {{0, 0, 0, 7}}, {{0, 0, 0, 8}}, {{0, 
                    0, 0, 6}}, {{0, 0, 0, 6}}, {{0, 0, 0, 6}}, {{0, 0, 0, 
                    6}}, {{0, 0, 0, 5}}, {{0, 0, 0, 6}}, {{0, 0, 0, 5}}, {{0, 
                    0, 0, 4}}, {{0, 0, 0, 4}}, {{0, 0, 0, 5}}, {{0, 0, 0, 
                    5}}, {{0, 0, 0, 3}}, {{0, 0, 0, 4}}, {{0, 0, 0, 3}}, {{0, 
                    0, 0, 3}}, {{0, 0, 0, 3}}, {{0, 0, 0, 3}}, {{0, 0, 0, 
                    2}}, {{0, 0, 0, 2}}, {{0, 0, 0, 2}}, {{0, 0, 0, 2}}, {{0, 
                    0, 0, 1}}, {{0, 0, 0, 2}}, {{0, 0, 0, 2}}, {{0, 0, 0, 
                    0}}, {{0, 0, 0, 1}}, {{255, 255, 255, 0}}, {{255, 255, 
                    255, 0}}, {{255, 255, 255, 0}}, {{255, 255, 255, 0}}, {{
                    255, 255, 255, 0}}, {{255, 255, 255, 0}}}, {{0, 45}, {
                    2500, 0}}, {0, 255}, ColorFunction -> RGBColor], 
                    ImageSize -> {2500, 45}, 
                    PlotRange -> {{0, 2500}, {0, 45}}], ImageSize -> 
                    Scaled[1], ScrollPosition -> {0., 0.}]], 
                    Pane[
                    Column[{
                    Row[{
                    Invisible[
                    RawBoxes[
                    GraphicsBox[
                    TagBox[
                    
                    RasterBox[{{{255, 132, 0}, {255, 132, 0}, {255, 132, 0}, {
                    255, 132, 0}, {255, 132, 0}, {255, 132, 0}}, {{255, 132, 
                    0}, {255, 132, 0}, {255, 132, 0}, {255, 132, 0}, {255, 
                    132, 0}, {255, 132, 0}}}, {{0, 2}, {6, 0}}, {0, 255}, 
                    ColorFunction -> RGBColor], 
                    BoxForm`ImageTag[
                    "Byte", ColorSpace -> "RGB", Interleaving -> True], 
                    Selectable -> False], BaseStyle -> "ImageGraphics", 
                    ImageSize -> Magnification[1], ImageSizeRaw -> {6, 2}, 
                    BaselinePosition -> (Scaled[0] -> Center), 
                    PlotRange -> {{0, 6}, {0, 2}}]]], " ", 
                    Column[{"Horizontal plot range:", 
                    Row[{
                    Manipulate`Place[1], "  ", 
                    Manipulate`Place[2], "  ", 
                    Manipulate`Place[3]}]}]}], 
                    PaneSelector[{True -> Grid[{{
                    Button[
                    Row[{
                    RawBoxes[
                    GraphicsBox[
                    TagBox[
                    
                    RasterBox[{{{255, 132, 0}, {255, 132, 0}, {255, 132, 0}, {
                    255, 132, 0}, {255, 132, 0}, {255, 132, 0}}, {{255, 132, 
                    0}, {255, 132, 0}, {255, 132, 0}, {255, 132, 0}, {255, 
                    132, 0}, {255, 132, 0}}}, {{0, 2}, {6, 0}}, {0, 255}, 
                    ColorFunction -> RGBColor], 
                    BoxForm`ImageTag[
                    "Byte", ColorSpace -> "RGB", Interleaving -> True], 
                    Selectable -> False], BaseStyle -> "ImageGraphics", 
                    ImageSize -> Magnification[1], ImageSizeRaw -> {6, 2}, 
                    BaselinePosition -> (Scaled[0] -> Center), 
                    PlotRange -> {{0, 6}, {0, 2}}]], " "}], 
                    CalculateUtilities`GraphicsUtilities`Private`more$$ = 
                    False, Appearance -> None, BaseStyle -> {}], 
                    Button[
                    "Fewer controls", 
                    CalculateUtilities`GraphicsUtilities`Private`more$$ = 
                    False, Appearance -> None, BaseStyle -> {}]}, {"", 
                    Item[
                    Column[{
                    Column[{"Vertical plot range:", 
                    Row[{
                    Manipulate`Place[4], "  ", 
                    Manipulate`Place[5], "  ", 
                    Manipulate`Place[6]}], 
                    Manipulate`Place[7]}], 
                    Column[{
                    Row[{
                    Manipulate`Place[8], "  ", 
                    Manipulate`Place[9]}], 
                    Row[{
                    Manipulate`Place[10], "   settings: ", 
                    Button[
                    "1", CalculateScan`PlotterScanner`Private`ar$$ = 1, 
                    ImageSize -> Small, Appearance -> "Palette", 
                    BaseStyle -> {}], "  ", 
                    Button["unscaled axes", 
                    (If[
                    1/4 <= # <= 4, 
                    CalculateScan`PlotterScanner`Private`ar$$ = #]& )[Abs[
                    Apply[
                    Subtract, CalculateScan`PlotterScanner`Private`pRY]]/Abs[
                    Apply[
                    Subtract, CalculateScan`PlotterScanner`Private`pRX]]], 
                    ImageSize -> Small, Appearance -> "Palette", 
                    BaseStyle -> {}]}]}], 
                    TabView[{Row[{" ", 
                    Dynamic[
                    If[CalculateScan`PlotterScanner`Private`tangentTF$$, 
                    Style[
                    "\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`tangentColor$$, 
                    Bold], " "]], 
                    Tooltip[" tangents             ", 
                    Style[" family of tangents at points along the curve ", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> 
                    Grid[{{"show tangents", 
                    Manipulate`Place[11]}, {"tangent count", 
                    Manipulate`Place[12]}, {"tangent length", 
                    Manipulate`Place[13]}, {"tangent thickness", 
                    Manipulate`Place[14]}, {"tangent color", 
                    Manipulate`Place[15]}, {"tangent opacity", 
                    Manipulate`Place[16]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    False}}], Row[{" ", 
                    Dynamic[
                    If[CalculateScan`PlotterScanner`Private`normalTF$$, 
                    Style[
                    "\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`normalColor$$, Bold],
                     " "]], 
                    Tooltip[" normals              ", 
                    Style[" family of normals at points along the curve ", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> 
                    Grid[{{"show normals", 
                    Manipulate`Place[17]}, {"normal count", 
                    Manipulate`Place[18]}, {"normal length", 
                    Manipulate`Place[19]}, {"normal thickness", 
                    Manipulate`Place[20]}, {"normal color", 
                    Manipulate`Place[21]}, {"normal opacity", 
                    Manipulate`Place[22]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    False}}], Row[{" ", 
                    Dynamic[
                    If[CalculateScan`PlotterScanner`Private`tiltedTangentTF$$, 
                    Style["\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`tiltedTangentColor$$,
                     Bold], " "]], 
                    Tooltip[" tilted tangents      ", 
                    Style[
                    " family of tilted tangents at points along the curve ", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> 
                    Grid[{{"show tilted tangents", 
                    Manipulate`Place[23]}, {"tilted tangent angle", 
                    Manipulate`Place[24]}, {"tilted tangent count", 
                    Manipulate`Place[25]}, {"tilted tangent length", 
                    Manipulate`Place[26]}, {"tilted tangent thickness", 
                    Manipulate`Place[27]}, {"tilted tangent color", 
                    Manipulate`Place[28]}, {"tilted tangent opacity", 
                    Manipulate`Place[29]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    False}}], Row[{" ", 
                    Dynamic[
                    If[
                    CalculateScan`PlotterScanner`Private`osculatingCircleTF$$, 
                    Style[
                    "\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleColor$$, Bold], " "]], 
                    Tooltip[" osculating circles   ", 
                    Style[
                    " family of osculating circles (circles that are tangent \
to the curve) at points along the curve", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> Column[{
                    Grid[{{"show osculating circles", 
                    Manipulate`Place[30]}, {"osculating circle count", 
                    Manipulate`Place[31]}, {"osculating circle thickness", 
                    Manipulate`Place[32]}, {"osculating circle color", 
                    Manipulate`Place[33]}, {"osculating circle opacity", 
                    Manipulate`Place[34]}, {"show circle radii", 
                    Manipulate`Place[35]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    True}}], 
                    Dynamic[
                    Style[
                    If[
                    And[
                    CalculateScan`PlotterScanner`Private`osculatingCircleTF$$, 
                    Not[
                    0.98 < CalculateScan`PlotterScanner`Private`ar$$ < 1.02]],
                     "(note than circles appear as ellipses for unequally\n\
scaled horizontal and vertical axes)", ""]], 
                    RGBColor[
                    0.6666666666666666, 0.6666666666666666, 
                    0.6666666666666666]]}, Alignment -> Left], Row[{" ", 
                    Dynamic[
                    If[
                    CalculateScan`PlotterScanner`Private`taylorParabolaTF$$, 
                    Style[
                    "\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`taylorParabolaColor$$\
, Bold], " "]], 
                    Tooltip[" Taylor parabolas     ", 
                    Style[" family of second order Taylor approximations", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> Column[{
                    Grid[{{"show Taylor parabolas", 
                    Manipulate`Place[36]}, {"Taylor parabola count", 
                    Manipulate`Place[37]}, {"Taylor parabola thickness", 
                    Manipulate`Place[38]}, {"Taylor parabola color", 
                    Manipulate`Place[39]}, {"Taylor parabola opacity", 
                    Manipulate`Place[40]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    True}}]}, Alignment -> Left], Row[{" ", 
                    Dynamic[
                    If[CalculateScan`PlotterScanner`Private`involuteTF$$, 
                    Style[
                    "\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`involuteColor$$, 
                    Bold], " "]], 
                    Tooltip[" involutes            ", 
                    Style[
                    " family of involutes (curves traced out by strings \
unwound from the curve) of the curve", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> 
                    Grid[{{"show involutes", 
                    Manipulate`Place[41]}, {"involute count", 
                    Manipulate`Place[42]}, {"involute thickness", 
                    Manipulate`Place[43]}, {"involute color", 
                    Manipulate`Place[44]}, {"involute opacity", 
                    Manipulate`Place[45]}, {"directions", 
                    Row[{"\[DoubleLongLeftArrow]", 
                    Manipulate`Place[46], "  \[DoubleLongRightArrow]", 
                    Manipulate`Place[47]}]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    True}}], Row[{" ", 
                    Dynamic[
                    If[CalculateScan`PlotterScanner`Private`evoluteTF$$, 
                    Style[
                    "\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`evoluteColor$$, 
                    Bold], " "]], 
                    Tooltip[" evolute              ", 
                    Style[
                    " the evolute of a given curve (curve of the centers of \
the osculating circles))", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> 
                    Grid[{{"show evolute", 
                    Manipulate`Place[48]}, {"evolute thickness", 
                    Manipulate`Place[49]}, {"evolute color", 
                    Manipulate`Place[50]}, {"evolute opacity", 
                    Manipulate`Place[51]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    False}}], Row[{" ", 
                    Dynamic[
                    If[CalculateScan`PlotterScanner`Private`offsetCurveTF$$, 
                    Style[
                    "\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`offsetCurveColor$$, 
                    Bold], " "]], 
                    Tooltip[" offset curves        ", 
                    Style[
                    " family of offset curves (curves shifted a fixed \
distance perpendicular to each point of the original curve) ", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> 
                    Grid[{{"show offset curves", 
                    Manipulate`Place[52]}, {"offset curve distance", 
                    Manipulate`Place[53]}, {"offset curve count", 
                    Manipulate`Place[54]}, {"offset curve thickness", 
                    Manipulate`Place[55]}, {"offset curve color", 
                    Manipulate`Place[56]}, {"offset curve opacity", 
                    Manipulate`Place[57]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    False}}], Row[{" ", 
                    Dynamic[
                    If[
                    CalculateScan`PlotterScanner`Private`tiltedOffsetCurveTF$$\
, 
                    Style["\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveColor$$, Bold], " "]], 
                    Tooltip[" tilted offset curves ", 
                    Style[
                    " family of tilted offset curves (curves shifted a fixed \
distance in a direction with a fixed angle \n                                 \
     to the local normal to each point of the original curve) ", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> 
                    Grid[{{"show tilted offset curves", 
                    Manipulate`Place[58]}, {"tilted offset curve angle", 
                    Manipulate`Place[59]}, {"tilted offset curve distance", 
                    Manipulate`Place[60]}, {"tilted offset curve count", 
                    Manipulate`Place[61]}, {"tilted offset curve thickness", 
                    Manipulate`Place[62]}, {"tilted offset curve color", 
                    Manipulate`Place[63]}, {"tilted offset curve opacity", 
                    Manipulate`Place[64]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    False}}], Row[{" ", 
                    Dynamic[
                    If[CalculateScan`PlotterScanner`Private`pedalCurveTF$$, 
                    Style["\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`pedalCurveColor$$, 
                    Bold], " "]], 
                    Tooltip[" pedal curves         ", 
                    Style[
                    " family of pedal curves (curves on the tangents of the \
given curve perpendicular to a given point) ", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> 
                    Grid[{{"show pedal curves", 
                    Manipulate`Place[65]}, {"pedal curve count", 
                    Manipulate`Place[66]}, {"pedal curve thickness", 
                    Manipulate`Place[67]}, {"pedal curve color", 
                    Manipulate`Place[68]}, {"pedal curve opacity", 
                    Manipulate`Place[69]}, {"pedal points", 
                    Manipulate`Place[70]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    True}}], Row[{" ", 
                    Dynamic[
                    If[
                    CalculateScan`PlotterScanner`Private`negativePedalCurveTF$\
$, 
                    Style["\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurveColor$$, Bold], " "]], 
                    Tooltip[" negative pedal curves", 
                    Style[
                    " family of negative pedal curves (envelope curves of \
lines perpendicular to the given curve and a given point) ", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> 
                    Grid[{{"show negative pedal curves", 
                    Manipulate`Place[71]}, {"negative pedal curve count", 
                    Manipulate`Place[72]}, {
                    "negative pedal curve thickness", 
                    Manipulate`Place[73]}, {"negative pedal curve color", 
                    Manipulate`Place[74]}, {"negative pedal curve opacity", 
                    Manipulate`Place[75]}, {"negative pedal points", 
                    Manipulate`Place[76]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    False}}], Row[{" ", 
                    Dynamic[
                    If[
                    CalculateScan`PlotterScanner`Private`contraPedalCurveTF$$, 
                    Style[
                    "\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurveColor$$, Bold], " "]], 
                    Tooltip[" contrapedal curves   ", 
                    Style[
                    " family of contrapedal curves (curves on the normals of \
the given curve perpendicular to a given point) ", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> 
                    Grid[{{"show contrapedal curves", 
                    Manipulate`Place[77]}, {"contrapedal curve count", 
                    Manipulate`Place[78]}, {"contrapedal curve thickness", 
                    Manipulate`Place[79]}, {"contrapedal curve color", 
                    Manipulate`Place[80]}, {"contrapedal curve opacity", 
                    Manipulate`Place[81]}, {"contrapedal pedal points", 
                    Manipulate`Place[82]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    False}}], Row[{" ", 
                    Dynamic[
                    If[CalculateScan`PlotterScanner`Private`dualCurveTF$$, 
                    Style[
                    "\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`dualCurveColor$$, 
                    Bold], " "]], 
                    Tooltip[" dual curves          ", 
                    Style[
                    " dual curve of the given curve (the dual curbe maps \
inflection points to cusps) ", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> 
                    Grid[{{"show dual curves", 
                    Manipulate`Place[83]}, {"dual curve count", 
                    Manipulate`Place[84]}, {"dual curve thickness", 
                    Manipulate`Place[85]}, {"dual curve color", 
                    Manipulate`Place[86]}, {"dual curve opacity", 
                    Manipulate`Place[87]}, {"dual curve points", 
                    Manipulate`Place[88]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    False}}], Row[{" ", 
                    Dynamic[
                    If[
                    CalculateScan`PlotterScanner`Private`inverseCurveTF$$, 
                    Style[
                    "\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`inverseCurveColor$$, 
                    Bold], " "]], 
                    Tooltip[" inverse curves       ", 
                    Style[
                    " inverse curves (curves resulting from carrying of an \
inversion on circles) ", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> 
                    Grid[{{"show inverse curves", 
                    Manipulate`Place[89]}, {"inverse curve count", 
                    Manipulate`Place[90]}, {"inverse curve thickness", 
                    Manipulate`Place[91]}, {"inverse curve color", 
                    Manipulate`Place[92]}, {"inverse curve opacity", 
                    Manipulate`Place[93]}, {"inversion curve points", 
                    Manipulate`Place[94]}, {"inversion circle radius", 
                    Manipulate`Place[95]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    False}}], Row[{" ", 
                    Dynamic[
                    If[
                    CalculateScan`PlotterScanner`Private`isopticCurveTF$$, 
                    Style[
                    "\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`isopticCurveColor$$, 
                    Bold], " "]], 
                    Tooltip[" isoptic curves       ", 
                    Style[
                    " inverse curves (points on isoptic curves have two \
tangents with the given curve and the two tangents meet with the specified \
angle)) ", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> Column[{
                    Grid[{{"show isoptic curves", 
                    Manipulate`Place[96]}, {"isoptic curve angle", 
                    Manipulate`Place[97]}, {"isoptic curve thickness", 
                    Manipulate`Place[98]}, {"isoptic curve color", 
                    Manipulate`Place[99]}, {"isoptic curve opacity", 
                    Manipulate`Place[100]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    False}}], 
                    Dynamic[
                    Style[
                    If[
                    TrueQ[
                    And[
                    CalculateScan`PlotterScanner`Private`isopticCurveTF$$, 
                    CalculateScan`PlotterScanner`Private`x1x2SCPCurves === \
{}]], "(note than the set of isoptic curves for a given angle can be empty)", 
                    ""]], 
                    RGBColor[
                    0.6666666666666666, 0.6666666666666666, 
                    0.6666666666666666]]}, Alignment -> Left], Row[{" ", 
                    Dynamic[
                    If[
                    CalculateScan`PlotterScanner`Private`orthotomicCurveTF$$, 
                    
                    Style[
                    "\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`orthotomicCurveColor$\
$, Bold], " "]], 
                    Tooltip[" orthotomic curves    ", 
                    Style[
                    " orthotomic curves (points of reflections of a given \
point on curve tangents)) ", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> 
                    Grid[{{"show orthotomic curves", 
                    Manipulate`Place[101]}, {"orthotomic curve angle", 
                    Manipulate`Place[102]}, {"orthotomic curve count", 
                    Manipulate`Place[103]}, {"orthotomic curve thickness", 
                    Manipulate`Place[104]}, {"orthotomic curve color", 
                    Manipulate`Place[105]}, {"orthotomic curve opacity", 
                    Manipulate`Place[106]}, {"orthotomic curve points", 
                    Manipulate`Place[107]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    False}}]}, 2, ImageSize -> {All, Automatic}, 
                    ControlPlacement -> Left]}, 
                    Dividers -> {None, {False, True, True, True}}, Spacings -> 
                    1], ItemSize -> Scaled[1], 
                    Frame -> {None, None, True, None}]}}, FrameStyle -> 
                    GrayLevel[0.9], Alignment -> Left, Spacings -> {0, 0.8}], 
                    False -> Button[
                    Row[{
                    RawBoxes[
                    GraphicsBox[
                    TagBox[
                    
                    RasterBox[{{{255, 255, 255}, {255, 255, 255}, {255, 132, 
                    0}, {255, 132, 0}, {255, 255, 255}, {255, 255, 255}}, {{
                    255, 255, 255}, {255, 255, 255}, {255, 132, 0}, {255, 132,
                     0}, {255, 255, 255}, {255, 255, 255}}, {{255, 132, 0}, {
                    255, 132, 0}, {255, 132, 0}, {255, 132, 0}, {255, 132, 
                    0}, {255, 132, 0}}, {{255, 132, 0}, {255, 132, 0}, {255, 
                    132, 0}, {255, 132, 0}, {255, 132, 0}, {255, 132, 0}}, {{
                    255, 255, 255}, {255, 255, 255}, {255, 132, 0}, {255, 132,
                     0}, {255, 255, 255}, {255, 255, 255}}, {{255, 255, 
                    255}, {255, 255, 255}, {255, 132, 0}, {255, 132, 0}, {255,
                     255, 255}, {255, 255, 255}}}, {{0, 6}, {6, 0}}, {0, 255},
                     ColorFunction -> RGBColor], 
                    BoxForm`ImageTag[
                    "Byte", ColorSpace -> "RGB", Interleaving -> True], 
                    Selectable -> False], BaseStyle -> "ImageGraphics", 
                    ImageSize -> Magnification[1], ImageSizeRaw -> {6, 6}, 
                    BaselinePosition -> (Scaled[0.3] -> Center), 
                    PlotRange -> {{0, 6}, {0, 6}}]], " More controls"}], 
                    CalculateUtilities`GraphicsUtilities`Private`more$$ = 
                    True, Appearance -> None, BaseStyle -> {}]}, 
                    Dynamic[
                    CalculateUtilities`GraphicsUtilities`Private`more$$], 
                    ImageSize -> Automatic]}], 
                    ImageMargins -> {{20, 30}, {10, 10}}]}, {1, 2}, 2, 
                    Alignment -> {Left, Top}]]], 
                    Manipulate`Dump`ThisIsNotAControl}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleLastParamaters$$], {}}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`osculatingCircles$$],\
 {}}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
taylorParabolaLastParamaters$$], {}}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`taylorParabolas$$], \
{}}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
offsetCurveLastParamaters$$], {}}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
offsetCurvePlotCurves$$], {}}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveLastParamaters$$], {}}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurvePlotCurves$$], {}}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
pedalCurveLastParamaters$$], {}}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`pedalCurvePlotCurves$\
$], {}}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurveLastParamaters$$], {}}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurvePlotCurves$$], {}}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurveLastParamaters$$], {}}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurvePlotCurves$$], {}}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
dualCurveLastParamaters$$], {}}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`dualCurvePlotCurves$$\
], {}}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
inverseLastParamaters$$], {}}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
inverseCurvePlotCurves$$], {}}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
orthotomicLastParamaters$$], {}}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
orthotomicCurvePlotCurves$$], {}}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
isopticLastParamaters$$], {}}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
isopticCurvePlotCurves$$], {}}}}, Typeset`size$$ = Automatic, 
                 Typeset`update$$ = 0, Typeset`initDone$$ = False, 
                 Typeset`skipInitDone$$ = False, 
                 CalculateUtilities`GraphicsUtilities`Private`more$451723$$ = 
                 False, CalculateScan`PlotterScanner`Private`x1$451724$$ = 0, 
                 CalculateScan`PlotterScanner`Private`x2$451725$$ = 0, 
                 CalculateScan`PlotterScanner`Private`symmxQ$451726$$ = False,
                  CalculateScan`PlotterScanner`Private`fy1$451727$$ = 0, 
                 CalculateScan`PlotterScanner`Private`fy2$451728$$ = 0, 
                 CalculateScan`PlotterScanner`Private`symmyQ$451729$$ = False,
                  CalculateScan`PlotterScanner`Private`sqPRQ$451730$$ = False,
                  CalculateScan`PlotterScanner`Private`ar$451731$$ = 0, 
                 CalculateScan`PlotterScanner`Private`tangentCount$451732$$ = 
                 0, CalculateScan`PlotterScanner`Private`tangentLength$451733$\
$ = 0, CalculateScan`PlotterScanner`Private`tangentThickness$451734$$ = 0, 
                 CalculateScan`PlotterScanner`Private`tangentOpacity$451735$$ = 
                 0, CalculateScan`PlotterScanner`Private`normalCount$451736$$ = 
                 0}, 
                DynamicBox[
                 Manipulate`ManipulateBoxes[
                 2, TraditionalForm, 
                  "Variables" :> {
                   CalculateScan`PlotterScanner`Private`ar$$ = 1, 
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurveColor$$ = RGBColor[0.7464574, 0.2952580000000001, 0.2454606], 
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurveCountFactor$$ = 0.3, 
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurveLastParamaters$$ = {}, 
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurveOpacity$$ = 0.8, 
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurvePlotCurves$$ = {}, 
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurvePoints$$ = "curve", 
                    CalculateScan`PlotterScanner`Private`contraPedalCurveTF$$ = 
                    False, CalculateScan`PlotterScanner`Private`\
contraPedalCurveThickness$$ = -3., 
                    CalculateScan`PlotterScanner`Private`dualCurveColor$$ = 
                    RGBColor[0.2860602, 0.4663408, 0.29410879999999995`], 
                    
                    CalculateScan`PlotterScanner`Private`dualCurveCountFactor$\
$ = 0.3, CalculateScan`PlotterScanner`Private`dualCurveLastParamaters$$ = {}, 
                    CalculateScan`PlotterScanner`Private`dualCurveOpacity$$ = 
                    0.8, CalculateScan`PlotterScanner`Private`\
dualCurvePlotCurves$$ = {}, 
                    CalculateScan`PlotterScanner`Private`dualCurveTF$$ = 
                    False, CalculateScan`PlotterScanner`Private`\
dualCurveThickness$$ = -3., 
                    CalculateScan`PlotterScanner`Private`dualPedalCurvePoints$\
$ = "curve", CalculateScan`PlotterScanner`Private`evoluteColor$$ = 
                    RGBColor[0.813033, 0.766292, 0.303458], 
                    CalculateScan`PlotterScanner`Private`evoluteOpacity$$ = 
                    0.8, CalculateScan`PlotterScanner`Private`evoluteTF$$ = 
                    False, CalculateScan`PlotterScanner`Private`\
evoluteThickness$$ = -3., CalculateScan`PlotterScanner`Private`fy1$$ = 
                    0.982793723247329, 
                    CalculateScan`PlotterScanner`Private`fy2$$ = 
                    0.982793723247329, 
                    CalculateScan`PlotterScanner`Private`\
inverseCurveCircleRadiusFactor$$ = 0.4636476090008061, 
                    CalculateScan`PlotterScanner`Private`inverseCurveColor$$ = 
                    RGBColor[0.2860602, 0.4663408, 0.29410879999999995`], 
                    CalculateScan`PlotterScanner`Private`\
inverseCurveCountFactor$$ = 0.3, 
                    CalculateScan`PlotterScanner`Private`inverseCurveOpacity$$\
 = 0.8, CalculateScan`PlotterScanner`Private`inverseCurvePlotCurves$$ = {}, 
                    CalculateScan`PlotterScanner`Private`inverseCurvePoints$$ = 
                    "grid", 
                    CalculateScan`PlotterScanner`Private`inverseCurveTF$$ = 
                    False, CalculateScan`PlotterScanner`Private`\
inverseCurveThickness$$ = -3., 
                    CalculateScan`PlotterScanner`Private`\
inverseLastParamaters$$ = {}, 
                    CalculateScan`PlotterScanner`Private`involuteColor$$ = 
                    RGBColor[0.49978279999999997`, 0.6025278, 0.2508104], 
                    CalculateScan`PlotterScanner`Private`involuteCount$$ = 60,
                     CalculateScan`PlotterScanner`Private`involuteOpacity$$ = 
                    0.8, CalculateScan`PlotterScanner`Private`involutesLeftTF$\
$ = False, CalculateScan`PlotterScanner`Private`involutesRightTF$$ = True, 
                    CalculateScan`PlotterScanner`Private`involuteTF$$ = False,
                     CalculateScan`PlotterScanner`Private`involuteThickness$$ = \
-3., CalculateScan`PlotterScanner`Private`isopticCurveAngle$$ = 
                    Rational[1, 3] Pi, 
                    CalculateScan`PlotterScanner`Private`isopticCurveColor$$ = 
                    RGBColor[
                    0.8519382, 0.7451437999999999, 0.31752080000000005`], 
                    CalculateScan`PlotterScanner`Private`isopticCurveOpacity$$\
 = 0.8, CalculateScan`PlotterScanner`Private`isopticCurvePlotCurves$$ = {}, 
                    CalculateScan`PlotterScanner`Private`isopticCurveTF$$ = 
                    False, CalculateScan`PlotterScanner`Private`\
isopticCurveThickness$$ = -3., 
                    CalculateScan`PlotterScanner`Private`\
isopticLastParamaters$$ = {}, 
                    CalculateUtilities`GraphicsUtilities`Private`more$$ = 
                    False, CalculateScan`PlotterScanner`Private`\
negativePedalCurveColor$$ = 
                    RGBColor[0.7464574, 0.2952580000000001, 0.2454606], 
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurveCountFactor$$ = 0.3, 
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurveLastParamaters$$ = {}, 
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurveOpacity$$ = 0.8, 
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurvePlotCurves$$ = {}, 
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurvePoints$$ = "curve", 
                    CalculateScan`PlotterScanner`Private`negativePedalCurveTF$\
$ = False, 
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurveThickness$$ = -3., 
                    CalculateScan`PlotterScanner`Private`normalColor$$ = 
                    RGBColor[0.237, 0.34, 0.575], 
                    CalculateScan`PlotterScanner`Private`normalCount$$ = 120, 
                    CalculateScan`PlotterScanner`Private`normalLength$$ = 
                    0.06421622794870045, 
                    CalculateScan`PlotterScanner`Private`normalOpacity$$ = 
                    0.8, CalculateScan`PlotterScanner`Private`normalTF$$ = 
                    True, CalculateScan`PlotterScanner`Private`\
normalThickness$$ = -3., 
                    CalculateScan`PlotterScanner`Private`offsetCurveColor$$ = 
                    RGBColor[0.877875, 0.731045, 0.326896], 
                    CalculateScan`PlotterScanner`Private`offsetCurveCount$$ = 
                    12, 
                    CalculateScan`PlotterScanner`Private`offsetCurveDistance$$\
 = 0.06421622794870045, 
                    CalculateScan`PlotterScanner`Private`\
offsetCurveLastParamaters$$ = {}, 
                    CalculateScan`PlotterScanner`Private`offsetCurveOpacity$$ = 
                    0.8, CalculateScan`PlotterScanner`Private`\
offsetCurvePlotCurves$$ = {}, 
                    CalculateScan`PlotterScanner`Private`offsetCurveTF$$ = 
                    False, CalculateScan`PlotterScanner`Private`\
offsetCurveThickness$$ = -3., 
                    CalculateScan`PlotterScanner`Private`orthotomicCurveAngle$\
$ = Rational[1, 3] Pi, 
                    CalculateScan`PlotterScanner`Private`orthotomicCurveColor$\
$ = RGBColor[0.8519382, 0.7451437999999999, 0.31752080000000005`], 
                    CalculateScan`PlotterScanner`Private`\
orthotomicCurveCountFactor$$ = 0.3, 
                    CalculateScan`PlotterScanner`Private`\
orthotomicCurveOpacity$$ = 0.8, 
                    CalculateScan`PlotterScanner`Private`\
orthotomicCurvePlotCurves$$ = {}, 
                    CalculateScan`PlotterScanner`Private`\
orthotomicCurvePoints$$ = "curve", 
                    CalculateScan`PlotterScanner`Private`orthotomicCurveTF$$ = 
                    False, CalculateScan`PlotterScanner`Private`\
orthotomicCurveThickness$$ = -3., 
                    CalculateScan`PlotterScanner`Private`\
orthotomicLastParamaters$$ = {}, 
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleColor$$ = 
                    RGBColor[0.2752426, 0.4446824, 0.33950440000000004`], 
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleCount$$ = 60, 
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleLastParamaters$$ = {}, 
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleOpacity$$ = 0.8, 
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleRadiiTF$$ = False, 
                    CalculateScan`PlotterScanner`Private`osculatingCircles$$ = \
{}, CalculateScan`PlotterScanner`Private`osculatingCircleTF$$ = False, 
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleThickness$$ = -3., 
                    CalculateScan`PlotterScanner`Private`pedalCurveColor$$ = 
                    RGBColor[0.32894650000000003`, 0.5006225, 0.2625337], 
                    CalculateScan`PlotterScanner`Private`\
pedalCurveCountFactor$$ = 0.3, 
                    CalculateScan`PlotterScanner`Private`\
pedalCurveLastParamaters$$ = {}, 
                    CalculateScan`PlotterScanner`Private`pedalCurveOpacity$$ = 
                    0.8, CalculateScan`PlotterScanner`Private`\
pedalCurvePlotCurves$$ = {}, 
                    CalculateScan`PlotterScanner`Private`pedalCurvePoints$$ = 
                    "curve", 
                    CalculateScan`PlotterScanner`Private`pedalCurveTF$$ = 
                    False, CalculateScan`PlotterScanner`Private`\
pedalCurveThickness$$ = -3., CalculateScan`PlotterScanner`Private`sa$$ = 
                    False, CalculateScan`PlotterScanner`Private`sqPRQ$$ = 
                    False, CalculateScan`PlotterScanner`Private`st$$ = False, 
                    CalculateScan`PlotterScanner`Private`symmxQ$$ = False, 
                    CalculateScan`PlotterScanner`Private`symmyQ$$ = True, 
                    CalculateScan`PlotterScanner`Private`tangentColor$$ = 
                    RGBColor[0.237736, 0.340215, 0.575113], 
                    CalculateScan`PlotterScanner`Private`tangentCount$$ = 60, 
                    CalculateScan`PlotterScanner`Private`tangentLength$$ = 
                    0.06421622794870045, 
                    CalculateScan`PlotterScanner`Private`tangentOpacity$$ = 
                    0.8, CalculateScan`PlotterScanner`Private`tangentTF$$ = 
                    False, CalculateScan`PlotterScanner`Private`\
tangentThickness$$ = -3., 
                    CalculateScan`PlotterScanner`Private`taylorParabolaColor$$\
 = RGBColor[0.7189495000000001, 0.719797, 0.283877], 
                    CalculateScan`PlotterScanner`Private`taylorParabolaCount$$\
 = 36, CalculateScan`PlotterScanner`Private`taylorParabolaLastParamaters$$ = \
{}, CalculateScan`PlotterScanner`Private`taylorParabolaOpacity$$ = 0.8, 
                    CalculateScan`PlotterScanner`Private`taylorParabolas$$ = \
{}, CalculateScan`PlotterScanner`Private`taylorParabolaTF$$ = False, 
                    CalculateScan`PlotterScanner`Private`\
taylorParabolaThickness$$ = -3., 
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveAngle$$ = Rational[1, 4] Pi, 
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveColor$$ = 
                    RGBColor[0.49978279999999997`, 0.6025278, 0.2508104], 
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveCount$$ = 12, 
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveDistance$$ = 0.06421622794870045, 
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveLastParamaters$$ = {}, 
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveOpacity$$ = 0.8, 
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurvePlotCurves$$ = {}, 
                    CalculateScan`PlotterScanner`Private`tiltedOffsetCurveTF$$\
 = False, 
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveThickness$$ = -3., 
                    CalculateScan`PlotterScanner`Private`tiltedTangentAngle$$ = 
                    Rational[1, 4] Pi, 
                    CalculateScan`PlotterScanner`Private`tiltedTangentColor$$ = 
                    RGBColor[
                    0.2622702, 0.40739780000000003`, 0.41955020000000004`], 
                    CalculateScan`PlotterScanner`Private`tiltedTangentCount$$ = 
                    60, CalculateScan`PlotterScanner`Private`\
tiltedTangentLength$$ = 0.06421622794870045, 
                    CalculateScan`PlotterScanner`Private`tiltedTangentOpacity$\
$ = 0.8, CalculateScan`PlotterScanner`Private`tiltedTangentTF$$ = False, 
                    CalculateScan`PlotterScanner`Private`\
tiltedTangentThickness$$ = -3., 
                    CalculateScan`PlotterScanner`Private`x1$$ = \
-0.8264825260281834, CalculateScan`PlotterScanner`Private`x2$$ = 
                    0.7406381842411932}, "ControllerVariables" :> {
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`more$$, 
                    CalculateUtilities`GraphicsUtilities`Private`more$451723$$\
, False], 
                    Hold[
                    CalculateScan`PlotterScanner`Private`x1$$, 
                    CalculateScan`PlotterScanner`Private`x1$451724$$, 0], 
                    Hold[
                    CalculateScan`PlotterScanner`Private`x2$$, 
                    CalculateScan`PlotterScanner`Private`x2$451725$$, 0], 
                    Hold[
                    CalculateScan`PlotterScanner`Private`symmxQ$$, 
                    CalculateScan`PlotterScanner`Private`symmxQ$451726$$, 
                    False], 
                    Hold[
                    CalculateScan`PlotterScanner`Private`fy1$$, 
                    CalculateScan`PlotterScanner`Private`fy1$451727$$, 0], 
                    Hold[
                    CalculateScan`PlotterScanner`Private`fy2$$, 
                    CalculateScan`PlotterScanner`Private`fy2$451728$$, 0], 
                    Hold[
                    CalculateScan`PlotterScanner`Private`symmyQ$$, 
                    CalculateScan`PlotterScanner`Private`symmyQ$451729$$, 
                    False], 
                    Hold[
                    CalculateScan`PlotterScanner`Private`sqPRQ$$, 
                    CalculateScan`PlotterScanner`Private`sqPRQ$451730$$, 
                    False], 
                    Hold[
                    CalculateScan`PlotterScanner`Private`ar$$, 
                    CalculateScan`PlotterScanner`Private`ar$451731$$, 0], 
                    Hold[
                    CalculateScan`PlotterScanner`Private`tangentCount$$, 
                    CalculateScan`PlotterScanner`Private`tangentCount$451732$$\
, 0], 
                    Hold[
                    CalculateScan`PlotterScanner`Private`tangentLength$$, 
                    CalculateScan`PlotterScanner`Private`tangentLength$451733$\
$, 0], 
                    Hold[
                    CalculateScan`PlotterScanner`Private`tangentThickness$$, 
                    CalculateScan`PlotterScanner`Private`tangentThickness$\
451734$$, 0], 
                    Hold[
                    CalculateScan`PlotterScanner`Private`tangentOpacity$$, 
                    CalculateScan`PlotterScanner`Private`tangentOpacity$\
451735$$, 0], 
                    Hold[
                    CalculateScan`PlotterScanner`Private`normalCount$$, 
                    CalculateScan`PlotterScanner`Private`normalCount$451736$$,
                     0]}, "OtherVariables" :> {
                   Typeset`show$$, Typeset`bookmarkList$$, 
                    Typeset`bookmarkMode$$, Typeset`animator$$, 
                    Typeset`animvar$$, Typeset`name$$, Typeset`specs$$, 
                    Typeset`size$$, Typeset`update$$, Typeset`initDone$$, 
                    Typeset`skipInitDone$$}, "Body" :> Quiet[
                    
                    Module[{
                    CalculateScan`PlotterScanner`Private`x1Old$, 
                    CalculateScan`PlotterScanner`Private`x2Old$, 
                    CalculateScan`PlotterScanner`Private`fy1Old$, 
                    CalculateScan`PlotterScanner`Private`fy2Old$, 
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$, 
                    CalculateScan`PlotterScanner`Private`singularities$, 
                    CalculateScan`PlotterScanner`Private`ts$, 
                    CalculateScan`PlotterScanner`Private`xL$, 
                    CalculateScan`PlotterScanner`Private`xU$, 
                    CalculateScan`PlotterScanner`Private`yL$, 
                    CalculateScan`PlotterScanner`Private`yU$, 
                    CalculateScan`PlotterScanner`Private`pRX$, 
                    CalculateScan`PlotterScanner`Private`\[CapitalDelta]X$, 
                    CalculateScan`PlotterScanner`Private`\[CapitalDelta]y$, 
                    CalculateScan`PlotterScanner`Private`Y1$, 
                    CalculateScan`PlotterScanner`Private`Y2$, 
                    CalculateScan`PlotterScanner`Private`pRY$, 
                    CalculateScan`PlotterScanner`Private`originalCurvePlot0$, 
                    CalculateScan`PlotterScanner`Private`originalCurvePlot$, 
                    CalculateScan`PlotterScanner`Private`tangentsLines$, 
                    CalculateScan`PlotterScanner`Private`tangentLinePlot$, 
                    CalculateScan`PlotterScanner`Private`normalLines$, 
                    CalculateScan`PlotterScanner`Private`normalLinePlot$, 
                    CalculateScan`PlotterScanner`Private`tiltedTangentLines$, 
                    CalculateScan`PlotterScanner`Private`\
tiltedTangentLinePlot$, 
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleRadii$, 
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleLastParamaters$, 
                    CalculateScan`PlotterScanner`Private`osculatingCirclePlot$\
, CalculateScan`PlotterScanner`Private`taylorParabolaPlot$, 
                    CalculateScan`PlotterScanner`Private`evolutePlot$, 
                    CalculateScan`PlotterScanner`Private`involutePlotCurves$, 
                    CalculateScan`PlotterScanner`Private`\
involutePlotCurveLastParamaters$, 
                    CalculateScan`PlotterScanner`Private`involutePlot$, 
                    CalculateScan`PlotterScanner`Private`iTab$, 
                    CalculateScan`PlotterScanner`Private`xLi$, 
                    CalculateScan`PlotterScanner`Private`xUi$, 
                    CalculateScan`PlotterScanner`Private`arcLength$, 
                    CalculateScan`PlotterScanner`Private`arcL$, 
                    CalculateScan`PlotterScanner`Private`xi1$, 
                    CalculateScan`PlotterScanner`Private`xi2$, 
                    CalculateScan`PlotterScanner`Private`lineSegments$, 
                    CalculateScan`PlotterScanner`Private`baseSegments$, 
                    CalculateScan`PlotterScanner`Private`oSegments$, 
                    CalculateScan`PlotterScanner`Private`arcFactors$, 
                    CalculateScan`PlotterScanner`Private`iTabRight$, 
                    CalculateScan`PlotterScanner`Private`iTabLeft$, 
                    CalculateScan`PlotterScanner`Private`signedArcFactors$, 
                    CalculateScan`PlotterScanner`Private`curvePoints$}, If[
                    And[
                    CalculateScan`PlotterScanner`Private`sa$$ === False, 
                    CalculateScan`PlotterScanner`Private`st$$ == True], 
                    CalculateScan`PlotterScanner`Private`st$$ = False]; 
                    If[CalculateScan`PlotterScanner`Private`symmxQ$$, 
                    If[
                    And[
                    CalculateScan`PlotterScanner`Private`x1$$ == 
                    CalculateScan`PlotterScanner`Private`x1Old$, 
                    CalculateScan`PlotterScanner`Private`x2$$ != 
                    CalculateScan`PlotterScanner`Private`x2Old$], 
                    CalculateScan`PlotterScanner`Private`x1$$ = -
                    CalculateScan`PlotterScanner`Private`x2$$, 
                    CalculateScan`PlotterScanner`Private`x2$$ = -
                    CalculateScan`PlotterScanner`Private`x1$$]]; 
                    CalculateScan`PlotterScanner`Private`x1Old$ = 
                    CalculateScan`PlotterScanner`Private`x1$$; 
                    CalculateScan`PlotterScanner`Private`x2Old$ = 
                    CalculateScan`PlotterScanner`Private`x2$$; 
                    If[CalculateScan`PlotterScanner`Private`symmyQ$$, 
                    If[
                    And[
                    CalculateScan`PlotterScanner`Private`fy1$$ == 
                    CalculateScan`PlotterScanner`Private`fy1Old$, 
                    CalculateScan`PlotterScanner`Private`fy2$$ != 
                    CalculateScan`PlotterScanner`Private`fy2Old$], 
                    CalculateScan`PlotterScanner`Private`fy1$$ = 
                    CalculateScan`PlotterScanner`Private`fy2$$, 
                    CalculateScan`PlotterScanner`Private`fy2$$ = 
                    CalculateScan`PlotterScanner`Private`fy1$$]]; 
                    CalculateScan`PlotterScanner`Private`fy1Old$ = 
                    CalculateScan`PlotterScanner`Private`fy1$$; 
                    CalculateScan`PlotterScanner`Private`fy2Old$ = 
                    CalculateScan`PlotterScanner`Private`fy2$$; 
                    If[CalculateScan`PlotterScanner`Private`x1$$ == 
                    CalculateScan`PlotterScanner`Private`x2$$, 
                    CalculateScan`PlotterScanner`Private`x2$$ = 
                    CalculateScan`PlotterScanner`Private`x1$$ + 
                    31.10195286195286/100]; {
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$} = Sort[
                    N[{
                    
                    Function[{
                    CalculateScan`PlotterScanner`Private`y, 
                    CalculateScan`PlotterScanner`Private`L}, 
                    Sign[CalculateScan`PlotterScanner`Private`y] 
                    CalculateScan`PlotterScanner`Private`L Tan[
                    Abs[CalculateScan`PlotterScanner`Private`y]]^1][
                    CalculateScan`PlotterScanner`Private`x1$$, 
                    15.55097643097643], 
                    
                    Function[{
                    CalculateScan`PlotterScanner`Private`y, 
                    CalculateScan`PlotterScanner`Private`L}, 
                    Sign[CalculateScan`PlotterScanner`Private`y] 
                    CalculateScan`PlotterScanner`Private`L Tan[
                    Abs[CalculateScan`PlotterScanner`Private`y]]^1][
                    CalculateScan`PlotterScanner`Private`x2$$, 
                    15.55097643097643]}]]; 
                    CalculateScan`PlotterScanner`Private`singularities$ = (
                    CalculateScan`PlotterScanner`Private`ts$ = 
                    TimeConstrained[
                    CalculateScan`PlotterScanner`Private`red = Reduce[
                    And[
                    1/((11 (11 + 9 Global`x))/(18 (1 + Global`x)^(9/11))) == 
                    0, CalculateScan`PlotterScanner`Private`X1$ < Global`x < 
                    CalculateScan`PlotterScanner`Private`X2$], Global`x, 
                    Reals], 0.2, False]; 
                    If[CalculateScan`PlotterScanner`Private`ts$ === False, {}, 
                    Cases[
                    ReplaceAll[Global`x, {
                    ToRules[CalculateScan`PlotterScanner`Private`ts$]}], 
                    Blank[Real]]]); 
                    CalculateScan`PlotterScanner`Private`originalCurvePlot0$ = 
                    Plot[
                    CompiledFunction[{8, 8., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    4}}, {{11, {2, 0, 1}}, {0.6111111111111112, {3, 0, 1}}, {
                    9, {2, 0, 2}}, {1, {2, 0, 0}}, {
                    0.8181818181818182, {3, 0, 3}}}, {0, 3, 6, 0, 
                    0}, {{10, 0, 2}, {13, 2, 0, 2}, {41, 263, 3, 0, 2, 3, 0, 
                    3, 3, 0, 4}, {40, 58, 3, 0, 4, 3, 0, 2}, {10, 2, 4}, {16, 
                    4, 0, 4}, {10, 1, 5}, {13, 5, 4, 5}, {16, 1, 2, 5, 4}, {
                    1}}, 
                    
                    Function[{Global`x}, (11 (11 + 9 Global`x))/(
                    18 (1 + Global`x)^(9/11))], Evaluate][Global`x], {
                    Global`x, CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$}, PlotStyle -> 
                    Directive[Black, Thick], Evaluated -> False, Exclusions -> 
                    CalculateScan`PlotterScanner`Private`singularities$]; {{
                    CalculateScan`PlotterScanner`Private`xL$, 
                    CalculateScan`PlotterScanner`Private`xU$}, {
                    CalculateScan`PlotterScanner`Private`yL$, 
                    CalculateScan`PlotterScanner`Private`yU$}} = 
                    FullOptions[
                    CalculateScan`PlotterScanner`Private`originalCurvePlot0$, 
                    PlotRange]; CalculateScan`PlotterScanner`Private`pRX$ = {
                    Min[
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$], 
                    Max[
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$]}; 
                    CalculateScan`PlotterScanner`Private`\[CapitalDelta]X$ = 
                    Abs[CalculateScan`PlotterScanner`Private`X2$ - 
                    CalculateScan`PlotterScanner`Private`X1$]; 
                    CalculateScan`PlotterScanner`Private`\[CapitalDelta]y$ = 
                    CalculateScan`PlotterScanner`Private`yU$ - 
                    CalculateScan`PlotterScanner`Private`yL$; If[
                    And[
                    CalculateScan`PlotterScanner`Private`sqPRQ$$, 
                    CalculateScan`PlotterScanner`Private`symmyQ$$, 
                    Sign[CalculateScan`PlotterScanner`Private`X1$] === -
                    Sign[CalculateScan`PlotterScanner`Private`X2$], 
                    Abs[1 - CalculateScan`PlotterScanner`Private`fy1$$/
                    CalculateScan`PlotterScanner`Private`fy2$$] < 10^(-3)], 
                    CalculateScan`PlotterScanner`Private`fy1$$ = 
                    ArcTan[((-100) CalculateScan`PlotterScanner`Private`xL$ - 
                    100 CalculateScan`PlotterScanner`Private`yL$ + 
                    CalculateScan`PlotterScanner`Private`\[CapitalDelta]y$)/(
                    100 CalculateScan`PlotterScanner`Private`\[CapitalDelta]y$\
)]; CalculateScan`PlotterScanner`Private`fy2$$ = 
                    CalculateScan`PlotterScanner`Private`fy1$$; Null]; {
                    CalculateScan`PlotterScanner`Private`Y1$, 
                    CalculateScan`PlotterScanner`Private`Y2$} = {
                    CalculateScan`PlotterScanner`Private`yL$ - 
                    CalculateScan`PlotterScanner`Private`\[CapitalDelta]y$/
                    100 - Function[{
                    CalculateScan`PlotterScanner`Private`y, 
                    CalculateScan`PlotterScanner`Private`L}, 
                    Sign[CalculateScan`PlotterScanner`Private`y] 
                    CalculateScan`PlotterScanner`Private`L Tan[
                    Abs[CalculateScan`PlotterScanner`Private`y]]^1][
                    CalculateScan`PlotterScanner`Private`fy1$$, 1] 
                    CalculateScan`PlotterScanner`Private`\[CapitalDelta]y$, 
                    CalculateScan`PlotterScanner`Private`yU$ + 
                    CalculateScan`PlotterScanner`Private`\[CapitalDelta]y$/
                    100 + Function[{
                    CalculateScan`PlotterScanner`Private`y, 
                    CalculateScan`PlotterScanner`Private`L}, 
                    Sign[CalculateScan`PlotterScanner`Private`y] 
                    CalculateScan`PlotterScanner`Private`L Tan[
                    Abs[CalculateScan`PlotterScanner`Private`y]]^1][
                    CalculateScan`PlotterScanner`Private`fy2$$, 1] 
                    CalculateScan`PlotterScanner`Private`\[CapitalDelta]y$}; 
                    CalculateScan`PlotterScanner`Private`pRY$ = {
                    CalculateScan`PlotterScanner`Private`Y1$, 
                    CalculateScan`PlotterScanner`Private`Y2$}; 
                    CalculateScan`PlotterScanner`Private`originalCurvePlot$ = 
                    Plot[
                    CompiledFunction[{8, 8., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    4}}, {{11, {2, 0, 1}}, {0.6111111111111112, {3, 0, 1}}, {
                    9, {2, 0, 2}}, {1, {2, 0, 0}}, {
                    0.8181818181818182, {3, 0, 3}}}, {0, 3, 6, 0, 
                    0}, {{10, 0, 2}, {13, 2, 0, 2}, {41, 263, 3, 0, 2, 3, 0, 
                    3, 3, 0, 4}, {40, 58, 3, 0, 4, 3, 0, 2}, {10, 2, 4}, {16, 
                    4, 0, 4}, {10, 1, 5}, {13, 5, 4, 5}, {16, 1, 2, 5, 4}, {
                    1}}, 
                    
                    Function[{Global`x}, (11 (11 + 9 Global`x))/(
                    18 (1 + Global`x)^(9/11))], Evaluate][Global`x], {
                    Global`x, CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$}, PlotStyle -> 
                    Directive[Black, Thick], PlotRange -> 
                    CalculateScan`PlotterScanner`Private`pRY$, Evaluated -> 
                    False, Exclusions -> 
                    CalculateScan`PlotterScanner`Private`singularities$]; 
                    CalculateScan`PlotterScanner`Private`tangentsLines$ = 
                    If[CalculateScan`PlotterScanner`Private`tangentTF$$, 
                    CalculateScan`PlotterScanner`Private`addTangents[{
                    CompiledFunction[{8, 8., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    4}}, {{11, {2, 0, 1}}, {0.6111111111111112, {3, 0, 1}}, {
                    9, {2, 0, 2}}, {1, {2, 0, 0}}, {
                    0.8181818181818182, {3, 0, 3}}}, {0, 3, 6, 0, 
                    0}, {{10, 0, 2}, {13, 2, 0, 2}, {41, 263, 3, 0, 2, 3, 0, 
                    3, 3, 0, 4}, {40, 58, 3, 0, 4, 3, 0, 2}, {10, 2, 4}, {16, 
                    4, 0, 4}, {10, 1, 5}, {13, 5, 4, 5}, {16, 1, 2, 5, 4}, {
                    1}}, 
                    
                    Function[{Global`x}, (11 (11 + 9 Global`x))/(
                    18 (1 + Global`x)^(9/11))], Evaluate], 
                    CompiledFunction[{8, 8., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    4}}, {{11, {2, 0, 1}}, {9, {2, 0, 2}}, {1, {2, 0, 0}}, {
                    1.8181818181818181`, {3, 0, 7}}, {
                    0.8181818181818182, {3, 0, 3}}, {
                    5.5, {3, 0, 2}}, {-0.5, {3, 0, 6}}}, {0, 3, 10, 0, 
                    0}, {{10, 0, 1}, {13, 1, 0, 1}, {41, 263, 3, 0, 1, 3, 0, 
                    3, 3, 0, 4}, {40, 58, 3, 0, 4, 3, 0, 5}, {16, 2, 5, 4}, {
                    41, 263, 3, 0, 1, 3, 0, 7, 3, 0, 5}, {40, 58, 3, 0, 5, 3, 
                    0, 8}, {10, 2, 5}, {16, 5, 0, 5}, {10, 1, 9}, {13, 9, 5, 
                    9}, {16, 6, 8, 9, 5}, {13, 4, 5, 4}, {1}}, 
                    Function[{Global`x}, 
                    
                    Block[{Compile`$111}, Compile`$111 = 1 + Global`x; 
                    11/(2 Compile`$111^(9/11)) - (11 + 9 Global`x)/(2 
                    Compile`$111^(20/11))]], Evaluate]}, {
                    Global`x, CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$}, 
                    CalculateScan`PlotterScanner`Private`tangentCount$$, 
                    "LengthFactor" -> 
                    Function[{
                    CalculateScan`PlotterScanner`Private`y, 
                    CalculateScan`PlotterScanner`Private`L}, 
                    Sign[CalculateScan`PlotterScanner`Private`y] 
                    CalculateScan`PlotterScanner`Private`L Tan[
                    Abs[CalculateScan`PlotterScanner`Private`y]]^1][
                    CalculateScan`PlotterScanner`Private`tangentLength$$, 
                    15.55097643097643]], {}]; 
                    CalculateScan`PlotterScanner`Private`tangentLinePlot$ = 
                    Graphics[{
                    Directive[
                    CalculateScan`PlotterScanner`Private`tangentColor$$, 
                    Opacity[
                    CalculateScan`PlotterScanner`Private`tangentOpacity$$], 
                    Thickness[
                    10^CalculateScan`PlotterScanner`Private`tangentThickness$$\
]], CalculateScan`PlotterScanner`Private`tangentsLines$}]; 
                    CalculateScan`PlotterScanner`Private`normalLines$ = 
                    If[CalculateScan`PlotterScanner`Private`normalTF$$, 
                    CalculateScan`PlotterScanner`Private`addTangents[{
                    CompiledFunction[{8, 8., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    4}}, {{11, {2, 0, 1}}, {0.6111111111111112, {3, 0, 1}}, {
                    9, {2, 0, 2}}, {1, {2, 0, 0}}, {
                    0.8181818181818182, {3, 0, 3}}}, {0, 3, 6, 0, 
                    0}, {{10, 0, 2}, {13, 2, 0, 2}, {41, 263, 3, 0, 2, 3, 0, 
                    3, 3, 0, 4}, {40, 58, 3, 0, 4, 3, 0, 2}, {10, 2, 4}, {16, 
                    4, 0, 4}, {10, 1, 5}, {13, 5, 4, 5}, {16, 1, 2, 5, 4}, {
                    1}}, 
                    
                    Function[{Global`x}, (11 (11 + 9 Global`x))/(
                    18 (1 + Global`x)^(9/11))], Evaluate], 
                    CompiledFunction[{8, 8., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    4}}, {{11, {2, 0, 1}}, {9, {2, 0, 2}}, {1, {2, 0, 0}}, {
                    1.8181818181818181`, {3, 0, 7}}, {
                    0.8181818181818182, {3, 0, 3}}, {
                    5.5, {3, 0, 2}}, {-0.5, {3, 0, 6}}}, {0, 3, 10, 0, 
                    0}, {{10, 0, 1}, {13, 1, 0, 1}, {41, 263, 3, 0, 1, 3, 0, 
                    3, 3, 0, 4}, {40, 58, 3, 0, 4, 3, 0, 5}, {16, 2, 5, 4}, {
                    41, 263, 3, 0, 1, 3, 0, 7, 3, 0, 5}, {40, 58, 3, 0, 5, 3, 
                    0, 8}, {10, 2, 5}, {16, 5, 0, 5}, {10, 1, 9}, {13, 9, 5, 
                    9}, {16, 6, 8, 9, 5}, {13, 4, 5, 4}, {1}}, 
                    Function[{Global`x}, 
                    
                    Block[{Compile`$111}, Compile`$111 = 1 + Global`x; 
                    11/(2 Compile`$111^(9/11)) - (11 + 9 Global`x)/(2 
                    Compile`$111^(20/11))]], Evaluate]}, {Global`x, 
                    Min[
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$], 
                    Max[
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$]}, 
                    CalculateScan`PlotterScanner`Private`normalCount$$, 
                    "LengthFactor" -> 
                    Function[{
                    CalculateScan`PlotterScanner`Private`y, 
                    CalculateScan`PlotterScanner`Private`L}, 
                    Sign[CalculateScan`PlotterScanner`Private`y] 
                    CalculateScan`PlotterScanner`Private`L Tan[
                    Abs[CalculateScan`PlotterScanner`Private`y]]^1][
                    CalculateScan`PlotterScanner`Private`normalLength$$, 
                    15.55097643097643], "TiltAngle" -> Pi/2], {}]; 
                    CalculateScan`PlotterScanner`Private`normalLinePlot$ = 
                    Graphics[{
                    Directive[
                    CalculateScan`PlotterScanner`Private`normalColor$$, 
                    Opacity[
                    CalculateScan`PlotterScanner`Private`normalOpacity$$], 
                    Thickness[
                    10^CalculateScan`PlotterScanner`Private`normalThickness$$]\
], CalculateScan`PlotterScanner`Private`normalLines$}]; 
                    CalculateScan`PlotterScanner`Private`tiltedTangentLines$ = 
                    If[CalculateScan`PlotterScanner`Private`tiltedTangentTF$$, 
                    CalculateScan`PlotterScanner`Private`addTangents[{
                    CompiledFunction[{8, 8., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    4}}, {{11, {2, 0, 1}}, {0.6111111111111112, {3, 0, 1}}, {
                    9, {2, 0, 2}}, {1, {2, 0, 0}}, {
                    0.8181818181818182, {3, 0, 3}}}, {0, 3, 6, 0, 
                    0}, {{10, 0, 2}, {13, 2, 0, 2}, {41, 263, 3, 0, 2, 3, 0, 
                    3, 3, 0, 4}, {40, 58, 3, 0, 4, 3, 0, 2}, {10, 2, 4}, {16, 
                    4, 0, 4}, {10, 1, 5}, {13, 5, 4, 5}, {16, 1, 2, 5, 4}, {
                    1}}, 
                    
                    Function[{Global`x}, (11 (11 + 9 Global`x))/(
                    18 (1 + Global`x)^(9/11))], Evaluate], 
                    CompiledFunction[{8, 8., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    4}}, {{11, {2, 0, 1}}, {9, {2, 0, 2}}, {1, {2, 0, 0}}, {
                    1.8181818181818181`, {3, 0, 7}}, {
                    0.8181818181818182, {3, 0, 3}}, {
                    5.5, {3, 0, 2}}, {-0.5, {3, 0, 6}}}, {0, 3, 10, 0, 
                    0}, {{10, 0, 1}, {13, 1, 0, 1}, {41, 263, 3, 0, 1, 3, 0, 
                    3, 3, 0, 4}, {40, 58, 3, 0, 4, 3, 0, 5}, {16, 2, 5, 4}, {
                    41, 263, 3, 0, 1, 3, 0, 7, 3, 0, 5}, {40, 58, 3, 0, 5, 3, 
                    0, 8}, {10, 2, 5}, {16, 5, 0, 5}, {10, 1, 9}, {13, 9, 5, 
                    9}, {16, 6, 8, 9, 5}, {13, 4, 5, 4}, {1}}, 
                    Function[{Global`x}, 
                    
                    Block[{Compile`$111}, Compile`$111 = 1 + Global`x; 
                    11/(2 Compile`$111^(9/11)) - (11 + 9 Global`x)/(2 
                    Compile`$111^(20/11))]], Evaluate]}, {Global`x, 
                    Min[
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$], 
                    Max[
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$]}, 
                    CalculateScan`PlotterScanner`Private`tiltedTangentCount$$,
                     "LengthFactor" -> 
                    Function[{
                    CalculateScan`PlotterScanner`Private`y, 
                    CalculateScan`PlotterScanner`Private`L}, 
                    Sign[CalculateScan`PlotterScanner`Private`y] 
                    CalculateScan`PlotterScanner`Private`L Tan[
                    Abs[CalculateScan`PlotterScanner`Private`y]]^1][
                    CalculateScan`PlotterScanner`Private`tiltedTangentLength$$\
, 15.55097643097643], "TiltAngle" -> 
                    CalculateScan`PlotterScanner`Private`tiltedTangentAngle$$]\
, {}]; CalculateScan`PlotterScanner`Private`tiltedTangentLinePlot$ = Graphics[{
                    Directive[
                    CalculateScan`PlotterScanner`Private`tiltedTangentColor$$, 
                    Opacity[
                    CalculateScan`PlotterScanner`Private`tiltedTangentOpacity$\
$], 
                    Thickness[
                    10^CalculateScan`PlotterScanner`Private`\
tiltedTangentThickness$$]], 
                    CalculateScan`PlotterScanner`Private`tiltedTangentLines$}]\
; If[
                    And[
                    CalculateScan`PlotterScanner`Private`osculatingCircleTF$$,
                     CalculateScan`PlotterScanner`Private`\
osculatingCircleLastParamaters$ =!= {{
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$}, 
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleCount$$}], 
                    CalculateScan`PlotterScanner`Private`osculatingCircles$$ = 
                    If[CalculateScan`PlotterScanner`Private`\
osculatingCircleTF$$, 
                    CalculateScan`PlotterScanner`Private`addOsculatingCircles[{
                    CompiledFunction[{8, 8., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    4}}, {{11, {2, 0, 1}}, {0.6111111111111112, {3, 0, 1}}, {
                    9, {2, 0, 2}}, {1, {2, 0, 0}}, {
                    0.8181818181818182, {3, 0, 3}}}, {0, 3, 6, 0, 
                    0}, {{10, 0, 2}, {13, 2, 0, 2}, {41, 263, 3, 0, 2, 3, 0, 
                    3, 3, 0, 4}, {40, 58, 3, 0, 4, 3, 0, 2}, {10, 2, 4}, {16, 
                    4, 0, 4}, {10, 1, 5}, {13, 5, 4, 5}, {16, 1, 2, 5, 4}, {
                    1}}, 
                    
                    Function[{Global`x}, (11 (11 + 9 Global`x))/(
                    18 (1 + Global`x)^(9/11))], Evaluate], 
                    CompiledFunction[{8, 8., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    4}}, {{11, {2, 0, 1}}, {9, {2, 0, 2}}, {1, {2, 0, 0}}, {
                    1.8181818181818181`, {3, 0, 7}}, {
                    0.8181818181818182, {3, 0, 3}}, {
                    5.5, {3, 0, 2}}, {-0.5, {3, 0, 6}}}, {0, 3, 10, 0, 
                    0}, {{10, 0, 1}, {13, 1, 0, 1}, {41, 263, 3, 0, 1, 3, 0, 
                    3, 3, 0, 4}, {40, 58, 3, 0, 4, 3, 0, 5}, {16, 2, 5, 4}, {
                    41, 263, 3, 0, 1, 3, 0, 7, 3, 0, 5}, {40, 58, 3, 0, 5, 3, 
                    0, 8}, {10, 2, 5}, {16, 5, 0, 5}, {10, 1, 9}, {13, 9, 5, 
                    9}, {16, 6, 8, 9, 5}, {13, 4, 5, 4}, {1}}, 
                    Function[{Global`x}, 
                    
                    Block[{Compile`$111}, Compile`$111 = 1 + Global`x; 
                    11/(2 Compile`$111^(9/11)) - (11 + 9 Global`x)/(2 
                    Compile`$111^(20/11))]], Evaluate], 
                    CompiledFunction[{8, 8., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    3}}, {{-9, {2, 0, 1}}, {11, {2, 0, 2}}, {
                    0.9090909090909091, {3, 0, 5}}, {9, {2, 0, 3}}, {
                    1, {2, 0, 0}}, {1.8181818181818181`, {3, 0, 2}}, {
                    2.8181818181818183`, {3, 0, 6}}}, {0, 4, 9, 0, 
                    0}, {{10, 0, 1}, {13, 1, 0, 1}, {41, 263, 3, 0, 1, 3, 0, 
                    2, 3, 0, 3}, {40, 58, 3, 0, 3, 3, 0, 4}, {10, 1, 3}, {16, 
                    3, 4, 3}, {41, 263, 3, 0, 1, 3, 0, 6, 3, 0, 4}, {40, 58, 
                    3, 0, 4, 3, 0, 7}, {10, 3, 4}, {16, 4, 0, 4}, {10, 2, 
                    8}, {13, 8, 4, 8}, {16, 5, 7, 8, 4}, {13, 3, 4, 3}, {1}}, 
                    
                    Function[{Global`x}, 
                    
                    Block[{Compile`$167}, 
                    Compile`$167 = 
                    1 + Global`x; (-9)/
                    Compile`$167^(20/11) + (10 (11 + 9 Global`x))/(11 
                    Compile`$167^(31/11))]], Evaluate]}, {Global`x, 
                    Min[
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$], 
                    Max[
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$]}, 
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleCount$$], {}]; 
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleRadii$ = If[
                    And[
                    CalculateScan`PlotterScanner`Private`osculatingCircleTF$$,
                     CalculateScan`PlotterScanner`Private`\
osculatingCircleRadiiTF$$], 
                    
                    CalculateScan`PlotterScanner`Private`\
addOsculatingCircleRadii[{
                    CompiledFunction[{8, 8., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    4}}, {{11, {2, 0, 1}}, {0.6111111111111112, {3, 0, 1}}, {
                    9, {2, 0, 2}}, {1, {2, 0, 0}}, {
                    0.8181818181818182, {3, 0, 3}}}, {0, 3, 6, 0, 
                    0}, {{10, 0, 2}, {13, 2, 0, 2}, {41, 263, 3, 0, 2, 3, 0, 
                    3, 3, 0, 4}, {40, 58, 3, 0, 4, 3, 0, 2}, {10, 2, 4}, {16, 
                    4, 0, 4}, {10, 1, 5}, {13, 5, 4, 5}, {16, 1, 2, 5, 4}, {
                    1}}, 
                    
                    Function[{Global`x}, (11 (11 + 9 Global`x))/(
                    18 (1 + Global`x)^(9/11))], Evaluate], 
                    CompiledFunction[{8, 8., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    4}}, {{11, {2, 0, 1}}, {9, {2, 0, 2}}, {1, {2, 0, 0}}, {
                    1.8181818181818181`, {3, 0, 7}}, {
                    0.8181818181818182, {3, 0, 3}}, {
                    5.5, {3, 0, 2}}, {-0.5, {3, 0, 6}}}, {0, 3, 10, 0, 
                    0}, {{10, 0, 1}, {13, 1, 0, 1}, {41, 263, 3, 0, 1, 3, 0, 
                    3, 3, 0, 4}, {40, 58, 3, 0, 4, 3, 0, 5}, {16, 2, 5, 4}, {
                    41, 263, 3, 0, 1, 3, 0, 7, 3, 0, 5}, {40, 58, 3, 0, 5, 3, 
                    0, 8}, {10, 2, 5}, {16, 5, 0, 5}, {10, 1, 9}, {13, 9, 5, 
                    9}, {16, 6, 8, 9, 5}, {13, 4, 5, 4}, {1}}, 
                    Function[{Global`x}, 
                    
                    Block[{Compile`$111}, Compile`$111 = 1 + Global`x; 
                    11/(2 Compile`$111^(9/11)) - (11 + 9 Global`x)/(2 
                    Compile`$111^(20/11))]], Evaluate], 
                    CompiledFunction[{8, 8., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    3}}, {{-9, {2, 0, 1}}, {11, {2, 0, 2}}, {
                    0.9090909090909091, {3, 0, 5}}, {9, {2, 0, 3}}, {
                    1, {2, 0, 0}}, {1.8181818181818181`, {3, 0, 2}}, {
                    2.8181818181818183`, {3, 0, 6}}}, {0, 4, 9, 0, 
                    0}, {{10, 0, 1}, {13, 1, 0, 1}, {41, 263, 3, 0, 1, 3, 0, 
                    2, 3, 0, 3}, {40, 58, 3, 0, 3, 3, 0, 4}, {10, 1, 3}, {16, 
                    3, 4, 3}, {41, 263, 3, 0, 1, 3, 0, 6, 3, 0, 4}, {40, 58, 
                    3, 0, 4, 3, 0, 7}, {10, 3, 4}, {16, 4, 0, 4}, {10, 2, 
                    8}, {13, 8, 4, 8}, {16, 5, 7, 8, 4}, {13, 3, 4, 3}, {1}}, 
                    
                    Function[{Global`x}, 
                    
                    Block[{Compile`$167}, 
                    Compile`$167 = 
                    1 + Global`x; (-9)/
                    Compile`$167^(20/11) + (10 (11 + 9 Global`x))/(11 
                    Compile`$167^(31/11))]], Evaluate]}, {Global`x, 
                    Min[
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$], 
                    Max[
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$]}, 
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleCount$$], {}]; 
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleLastParamaters$ = {{
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$}, 
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleCount$$}]; 
                    CalculateScan`PlotterScanner`Private`osculatingCirclePlot$\
 = Graphics[{
                    Directive[
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleColor$$, 
                    Opacity[
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleOpacity$$], 
                    Thickness[
                    10^CalculateScan`PlotterScanner`Private`\
osculatingCircleThickness$$]], 
                    If[
                    CalculateScan`PlotterScanner`Private`osculatingCircleTF$$,
                     CalculateScan`PlotterScanner`Private`osculatingCircles$$,\
 {}], 
                    If[
                    And[
                    CalculateScan`PlotterScanner`Private`osculatingCircleTF$$,
                     CalculateScan`PlotterScanner`Private`\
osculatingCircleRadiiTF$$], 
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleRadii$, {}]}]; If[
                    And[
                    CalculateScan`PlotterScanner`Private`taylorParabolaTF$$, 
                    CalculateScan`PlotterScanner`Private`\
taylorParabolaLastParamaters$$ =!= {{
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$}, 
                    CalculateScan`PlotterScanner`Private`taylorParabolaCount$$\
}], CalculateScan`PlotterScanner`Private`taylorParabolas$$ = 
                    If[CalculateScan`PlotterScanner`Private`taylorParabolaTF$$\
, 
                    CalculateScan`PlotterScanner`Private`addTaylorParabolas[{
                    CompiledFunction[{8, 8., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    4}}, {{11, {2, 0, 1}}, {0.6111111111111112, {3, 0, 1}}, {
                    9, {2, 0, 2}}, {1, {2, 0, 0}}, {
                    0.8181818181818182, {3, 0, 3}}}, {0, 3, 6, 0, 
                    0}, {{10, 0, 2}, {13, 2, 0, 2}, {41, 263, 3, 0, 2, 3, 0, 
                    3, 3, 0, 4}, {40, 58, 3, 0, 4, 3, 0, 2}, {10, 2, 4}, {16, 
                    4, 0, 4}, {10, 1, 5}, {13, 5, 4, 5}, {16, 1, 2, 5, 4}, {
                    1}}, 
                    Function[{Global`x}, (11 (11 + 9 Global`x))/(
                    18 (1 + Global`x)^(9/11))], Evaluate], 
                    CompiledFunction[{8, 8., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    4}}, {{11, {2, 0, 1}}, {9, {2, 0, 2}}, {1, {2, 0, 0}}, {
                    1.8181818181818181`, {3, 0, 7}}, {
                    0.8181818181818182, {3, 0, 3}}, {
                    5.5, {3, 0, 2}}, {-0.5, {3, 0, 6}}}, {0, 3, 10, 0, 
                    0}, {{10, 0, 1}, {13, 1, 0, 1}, {41, 263, 3, 0, 1, 3, 0, 
                    3, 3, 0, 4}, {40, 58, 3, 0, 4, 3, 0, 5}, {16, 2, 5, 4}, {
                    41, 263, 3, 0, 1, 3, 0, 7, 3, 0, 5}, {40, 58, 3, 0, 5, 3, 
                    0, 8}, {10, 2, 5}, {16, 5, 0, 5}, {10, 1, 9}, {13, 9, 5, 
                    9}, {16, 6, 8, 9, 5}, {13, 4, 5, 4}, {1}}, 
                    Function[{Global`x}, 
                    
                    Block[{Compile`$111}, Compile`$111 = 1 + Global`x; 
                    11/(2 Compile`$111^(9/11)) - (11 + 9 Global`x)/(2 
                    Compile`$111^(20/11))]], Evaluate], 
                    CompiledFunction[{8, 8., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    3}}, {{-9, {2, 0, 1}}, {11, {2, 0, 2}}, {
                    0.9090909090909091, {3, 0, 5}}, {9, {2, 0, 3}}, {
                    1, {2, 0, 0}}, {1.8181818181818181`, {3, 0, 2}}, {
                    2.8181818181818183`, {3, 0, 6}}}, {0, 4, 9, 0, 
                    0}, {{10, 0, 1}, {13, 1, 0, 1}, {41, 263, 3, 0, 1, 3, 0, 
                    2, 3, 0, 3}, {40, 58, 3, 0, 3, 3, 0, 4}, {10, 1, 3}, {16, 
                    3, 4, 3}, {41, 263, 3, 0, 1, 3, 0, 6, 3, 0, 4}, {40, 58, 
                    3, 0, 4, 3, 0, 7}, {10, 3, 4}, {16, 4, 0, 4}, {10, 2, 
                    8}, {13, 8, 4, 8}, {16, 5, 7, 8, 4}, {13, 3, 4, 3}, {1}}, 
                    
                    Function[{Global`x}, 
                    
                    Block[{Compile`$167}, 
                    Compile`$167 = 
                    1 + Global`x; (-9)/
                    Compile`$167^(20/11) + (10 (11 + 9 Global`x))/(11 
                    Compile`$167^(31/11))]], Evaluate]}, {Global`x, 
                    Min[
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$], 
                    Max[
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$]}, 
                    
                    CalculateScan`PlotterScanner`Private`taylorParabolaCount$$\
], {}]; CalculateScan`PlotterScanner`Private`taylorParabolaLastParamaters$$ = \
{{CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$}, 
                    CalculateScan`PlotterScanner`Private`taylorParabolaCount$$\
}]; CalculateScan`PlotterScanner`Private`taylorParabolaPlot$ = Graphics[{
                    Directive[
                    CalculateScan`PlotterScanner`Private`taylorParabolaColor$$\
, 
                    Opacity[
                    CalculateScan`PlotterScanner`Private`\
taylorParabolaOpacity$$], 
                    Thickness[
                    10^CalculateScan`PlotterScanner`Private`\
taylorParabolaThickness$$]], 
                    If[
                    CalculateScan`PlotterScanner`Private`taylorParabolaTF$$, 
                    CalculateScan`PlotterScanner`Private`taylorParabolas$$, \
{}]}]; CalculateScan`PlotterScanner`Private`evolutePlot$ = 
                    If[CalculateScan`PlotterScanner`Private`evoluteTF$$, 
                    ParametricPlot[{Global`x, 
                    CompiledFunction[{8, 8., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    4}}, {{11, {2, 0, 1}}, {0.6111111111111112, {3, 0, 1}}, {
                    9, {2, 0, 2}}, {1, {2, 0, 0}}, {
                    0.8181818181818182, {3, 0, 3}}}, {0, 3, 6, 0, 
                    0}, {{10, 0, 2}, {13, 2, 0, 2}, {41, 263, 3, 0, 2, 3, 0, 
                    3, 3, 0, 4}, {40, 58, 3, 0, 4, 3, 0, 2}, {10, 2, 4}, {16, 
                    4, 0, 4}, {10, 1, 5}, {13, 5, 4, 5}, {16, 1, 2, 5, 4}, {
                    1}}, 
                    
                    Function[{Global`x}, (11 (11 + 9 Global`x))/(
                    18 (1 + Global`x)^(9/11))], Evaluate][
                    Global`x]} + ({-CompiledFunction[{8, 8., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    4}}, {{11, {2, 0, 1}}, {9, {2, 0, 2}}, {1, {2, 0, 0}}, {
                    1.8181818181818181`, {3, 0, 7}}, {
                    0.8181818181818182, {3, 0, 3}}, {
                    5.5, {3, 0, 2}}, {-0.5, {3, 0, 6}}}, {0, 3, 10, 0, 
                    0}, {{10, 0, 1}, {13, 1, 0, 1}, {41, 263, 3, 0, 1, 3, 0, 
                    3, 3, 0, 4}, {40, 58, 3, 0, 4, 3, 0, 5}, {16, 2, 5, 4}, {
                    41, 263, 3, 0, 1, 3, 0, 7, 3, 0, 5}, {40, 58, 3, 0, 5, 3, 
                    0, 8}, {10, 2, 5}, {16, 5, 0, 5}, {10, 1, 9}, {13, 9, 5, 
                    9}, {16, 6, 8, 9, 5}, {13, 4, 5, 4}, {1}}, 
                    Function[{Global`x}, 
                    
                    Block[{Compile`$111}, Compile`$111 = 1 + Global`x; 
                    11/(2 Compile`$111^(9/11)) - (11 + 9 Global`x)/(2 
                    Compile`$111^(20/11))]], Evaluate][Global`x], 1} (1 + 
                    CompiledFunction[{8, 8., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    4}}, {{11, {2, 0, 1}}, {9, {2, 0, 2}}, {1, {2, 0, 0}}, {
                    1.8181818181818181`, {3, 0, 7}}, {
                    0.8181818181818182, {3, 0, 3}}, {
                    5.5, {3, 0, 2}}, {-0.5, {3, 0, 6}}}, {0, 3, 10, 0, 
                    0}, {{10, 0, 1}, {13, 1, 0, 1}, {41, 263, 3, 0, 1, 3, 0, 
                    3, 3, 0, 4}, {40, 58, 3, 0, 4, 3, 0, 5}, {16, 2, 5, 4}, {
                    41, 263, 3, 0, 1, 3, 0, 7, 3, 0, 5}, {40, 58, 3, 0, 5, 3, 
                    0, 8}, {10, 2, 5}, {16, 5, 0, 5}, {10, 1, 9}, {13, 9, 5, 
                    9}, {16, 6, 8, 9, 5}, {13, 4, 5, 4}, {1}}, 
                    Function[{Global`x}, 
                    
                    Block[{Compile`$111}, Compile`$111 = 1 + Global`x; 
                    11/(2 Compile`$111^(9/11)) - (11 + 9 Global`x)/(2 
                    Compile`$111^(20/11))]], Evaluate][Global`x]^2))/
                    CompiledFunction[{8, 8., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    3}}, {{-9, {2, 0, 1}}, {11, {2, 0, 2}}, {
                    0.9090909090909091, {3, 0, 5}}, {9, {2, 0, 3}}, {
                    1, {2, 0, 0}}, {1.8181818181818181`, {3, 0, 2}}, {
                    2.8181818181818183`, {3, 0, 6}}}, {0, 4, 9, 0, 
                    0}, {{10, 0, 1}, {13, 1, 0, 1}, {41, 263, 3, 0, 1, 3, 0, 
                    2, 3, 0, 3}, {40, 58, 3, 0, 3, 3, 0, 4}, {10, 1, 3}, {16, 
                    3, 4, 3}, {41, 263, 3, 0, 1, 3, 0, 6, 3, 0, 4}, {40, 58, 
                    3, 0, 4, 3, 0, 7}, {10, 3, 4}, {16, 4, 0, 4}, {10, 2, 
                    8}, {13, 8, 4, 8}, {16, 5, 7, 8, 4}, {13, 3, 4, 3}, {1}}, 
                    
                    Function[{Global`x}, 
                    
                    Block[{Compile`$167}, 
                    Compile`$167 = 
                    1 + Global`x; (-9)/
                    Compile`$167^(20/11) + (10 (11 + 9 Global`x))/(11 
                    Compile`$167^(31/11))]], Evaluate][Global`x], {
                    Global`x, 
                    Min[CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$] - 
                    CalculateScan`PlotterScanner`Private`\[CapitalDelta]X$/2, 
                    Max[CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$] + 
                    CalculateScan`PlotterScanner`Private`\[CapitalDelta]X$/2},
                     PlotStyle -> Directive[
                    Opacity[
                    CalculateScan`PlotterScanner`Private`evoluteOpacity$$], 
                    CalculateScan`PlotterScanner`Private`evoluteColor$$, 
                    Thickness[
                    10^CalculateScan`PlotterScanner`Private`evoluteThickness$$\
]], PlotRange -> CalculateScan`PlotterScanner`Private`pRY$, Evaluated -> 
                    False, Exclusions -> {
                    CalculateScan`PlotterScanner`Private`functionD[Global`x] == 
                    0}], {}]; If[
                    And[
                    CalculateScan`PlotterScanner`Private`involuteTF$$, 
                    CalculateScan`PlotterScanner`Private`\
involutePlotCurveLastParamaters$ =!= {{
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$}, 
                    CalculateScan`PlotterScanner`Private`involuteCount$$}], 
                    CalculateScan`PlotterScanner`Private`involutePlotCurves$ = 
                    If[CalculateScan`PlotterScanner`Private`involuteTF$$, 
                    CalculateScan`PlotterScanner`Private`singularities$ = 
                    TimeConstrained[
                    Reduce[
                    1/((11 (11 + 9 Global`x))/(18 (1 + Global`x)^(9/11))) == 
                    0, Global`x, Reals], 1, False]; 
                    CalculateScan`PlotterScanner`Private`domainsAndCounts = If[
                    Or[
                    CalculateScan`PlotterScanner`Private`singularities$ === 
                    False, Head[
                    CalculateScan`PlotterScanner`Private`singularities$] === 
                    Reduce], {{{
                    CalculateScan`PlotterScanner`Private`xL$, 
                    CalculateScan`PlotterScanner`Private`xU$}, 
                    CalculateScan`PlotterScanner`Private`involuteCount$$}}, 
                    CalculateScan`PlotterScanner`Private`singularityPoints = 
                    Cases[
                    Chop[
                    N[
                    ReplaceAll[Global`x, {
                    ToRules[
                    CalculateScan`PlotterScanner`Private`singularities$]}]]], 
                    
                    Blank[Real]]; 
                    CalculateScan`PlotterScanner`Private`\
singularityPointsRelevant = Sort[
                    Select[
                    CalculateScan`PlotterScanner`Private`singularityPoints, 
                    CalculateScan`PlotterScanner`Private`xL$ < # < 
                    CalculateScan`PlotterScanner`Private`xU$& ], Less]; 
                    CalculateScan`PlotterScanner`Private`pureDomains = 
                    Partition[{CalculateScan`PlotterScanner`Private`xL$, 
                    Apply[
                    Sequence, 
                    CalculateScan`PlotterScanner`Private`\
singularityPointsRelevant], CalculateScan`PlotterScanner`Private`xU$}, 2, 1]; 
                    Table[CalculateScan`PlotterScanner`Private`iLength = Abs[
                    Apply[Subtract, 
                    Part[
                    CalculateScan`PlotterScanner`Private`pureDomains, 
                    CalculateScan`PlotterScanner`Private`i]]]; 
                    CalculateScan`PlotterScanner`Private`involuteCounti = 
                    Ceiling[(CalculateScan`PlotterScanner`Private`iLength 
                    CalculateScan`PlotterScanner`Private`involuteCount$$)/(
                    CalculateScan`PlotterScanner`Private`xU$ - 
                    CalculateScan`PlotterScanner`Private`xL$)]; 
                    CalculateScan`PlotterScanner`Private`iScale = 
                    CalculateScan`PlotterScanner`Private`iLength/
                    CalculateScan`PlotterScanner`Private`involuteCounti; {{
                    Part[CalculateScan`PlotterScanner`Private`pureDomains, 
                    CalculateScan`PlotterScanner`Private`i, 1] + 
                    CalculateScan`PlotterScanner`Private`iScale/4, 
                    Part[CalculateScan`PlotterScanner`Private`pureDomains, 
                    CalculateScan`PlotterScanner`Private`i, 2] - 
                    CalculateScan`PlotterScanner`Private`iScale/4}, 
                    CalculateScan`PlotterScanner`Private`involuteCounti}, {
                    CalculateScan`PlotterScanner`Private`i, 
                    Length[
                    CalculateScan`PlotterScanner`Private`pureDomains]}]]; 
                    CalculateScan`PlotterScanner`Private`iTab$ = Transpose[
                    
                    Table[{{CalculateScan`PlotterScanner`Private`xLi$, 
                    CalculateScan`PlotterScanner`Private`xUi$}, 
                    CalculateScan`PlotterScanner`Private`involuteCounti} = 
                    Part[CalculateScan`PlotterScanner`Private`\
domainsAndCounts, CalculateScan`PlotterScanner`Private`i]; 
                    CalculateScan`PlotterScanner`Private`arcLength$ = Part[
                    
                    NDSolve[{Derivative[1][
                    CalculateScan`PlotterScanner`Private`arcL$][Global`x] == 
                    Sqrt[1 + D[(11 (11 + 9 Global`x))/(
                    18 (1 + Global`x)^(9/11)), Global`x]^2], 
                    CalculateScan`PlotterScanner`Private`arcL$[
                    CalculateScan`PlotterScanner`Private`xLi$] == 0}, 
                    CalculateScan`PlotterScanner`Private`arcL$, {
                    Global`x, CalculateScan`PlotterScanner`Private`xLi$, 
                    CalculateScan`PlotterScanner`Private`xUi$}], 1, 1, 2]; {
                    CalculateScan`PlotterScanner`Private`xi1$, 
                    CalculateScan`PlotterScanner`Private`xi2$} = 
                    Part[CalculateScan`PlotterScanner`Private`arcLength$, 1, 
                    1]; CalculateScan`PlotterScanner`Private`oCurve = 
                    ParametricPlot3D[
                    Prepend[
                    Normalize[{1, 
                    CompiledFunction[{8, 8., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    4}}, {{11, {2, 0, 1}}, {9, {2, 0, 2}}, {1, {2, 0, 0}}, {
                    1.8181818181818181`, {3, 0, 7}}, {
                    0.8181818181818182, {3, 0, 3}}, {
                    5.5, {3, 0, 2}}, {-0.5, {3, 0, 6}}}, {0, 3, 10, 0, 
                    0}, {{10, 0, 1}, {13, 1, 0, 1}, {41, 263, 3, 0, 1, 3, 0, 
                    3, 3, 0, 4}, {40, 58, 3, 0, 4, 3, 0, 5}, {16, 2, 5, 4}, {
                    41, 263, 3, 0, 1, 3, 0, 7, 3, 0, 5}, {40, 58, 3, 0, 5, 3, 
                    0, 8}, {10, 2, 5}, {16, 5, 0, 5}, {10, 1, 9}, {13, 9, 5, 
                    9}, {16, 6, 8, 9, 5}, {13, 4, 5, 4}, {1}}, 
                    Function[{Global`x}, 
                    
                    Block[{Compile`$111}, Compile`$111 = 1 + Global`x; 
                    11/(2 Compile`$111^(9/11)) - (11 + 9 Global`x)/(2 
                    Compile`$111^(20/11))]], Evaluate][Global`x]}], 
                    Global`x], {Global`x, 
                    CalculateScan`PlotterScanner`Private`xLi$, 
                    CalculateScan`PlotterScanner`Private`xUi$}, PlotRange -> 
                    All, Evaluated -> False, MaxRecursion -> 4]; 
                    CalculateScan`PlotterScanner`Private`lineSegments$ = 
                    Select[
                    Map[First, 
                    Cases[
                    Normal[CalculateScan`PlotterScanner`Private`oCurve], 
                    Blank[Line], Infinity]], Length[#] > 3& ]; 
                    CalculateScan`PlotterScanner`Private`baseSegments$ = 
                    Map[{
                    Part[#, 1], 
                    CompiledFunction[{8, 8., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    4}}, {{11, {2, 0, 1}}, {0.6111111111111112, {3, 0, 1}}, {
                    9, {2, 0, 2}}, {1, {2, 0, 0}}, {
                    0.8181818181818182, {3, 0, 3}}}, {0, 3, 6, 0, 
                    0}, {{10, 0, 2}, {13, 2, 0, 2}, {41, 263, 3, 0, 2, 3, 0, 
                    3, 3, 0, 4}, {40, 58, 3, 0, 4, 3, 0, 2}, {10, 2, 4}, {16, 
                    4, 0, 4}, {10, 1, 5}, {13, 5, 4, 5}, {16, 1, 2, 5, 4}, {
                    1}}, 
                    
                    Function[{Global`x}, (11 (11 + 9 Global`x))/(
                    18 (1 + Global`x)^(9/11))], Evaluate][
                    Part[#, 1]]}& , 
                    CalculateScan`PlotterScanner`Private`lineSegments$, {-2}]; 
                    CalculateScan`PlotterScanner`Private`oSegments$ = 
                    Map[Rest, 
                    CalculateScan`PlotterScanner`Private`lineSegments$, {-2}]; 
                    CalculateScan`PlotterScanner`Private`arcFactors$ = 
                    Map[CalculateScan`PlotterScanner`Private`arcLength$[
                    Part[#, 1]]& , 
                    CalculateScan`PlotterScanner`Private`lineSegments$, {-2}]; 
                    CalculateScan`PlotterScanner`Private`iTabRight$ = If[True, 
                    Table[
                    CalculateScan`PlotterScanner`Private`x0 = 
                    CalculateScan`PlotterScanner`Private`xi1$ + (
                    CalculateScan`PlotterScanner`Private`jk (
                    CalculateScan`PlotterScanner`Private`xi2$ - 
                    CalculateScan`PlotterScanner`Private`xi1$))/(
                    CalculateScan`PlotterScanner`Private`involuteCounti + 1); 
                    CalculateScan`PlotterScanner`Private`signedArcFactors$ = 
                    Map[Map[Max[#, 0]& , #]& , 
                    CalculateScan`PlotterScanner`Private`arcFactors$ - 
                    CalculateScan`PlotterScanner`Private`arcLength$[
                    CalculateScan`PlotterScanner`Private`x0]]; 
                    CalculateScan`PlotterScanner`Private`curvePoints$ = 
                    CalculateScan`PlotterScanner`Private`baseSegments$ + 
                    CalculateScan`PlotterScanner`Private`signedArcFactors$ 
                    CalculateScan`PlotterScanner`Private`oSegments$; If[
                    MemberQ[CalculateScan`PlotterScanner`Private`curvePoints$, 
                    Blank[Complex], {0, Infinity}], {}, 
                    Map[
                    BSplineCurve, 
                    CalculateScan`PlotterScanner`Private`curvePoints$]], {
                    CalculateScan`PlotterScanner`Private`jk, 1, 
                    CalculateScan`PlotterScanner`Private`involuteCounti}], \
{}]; CalculateScan`PlotterScanner`Private`iTabLeft$ = If[True, 
                    Table[
                    CalculateScan`PlotterScanner`Private`x0 = 
                    CalculateScan`PlotterScanner`Private`xi2$ + (
                    CalculateScan`PlotterScanner`Private`jk (
                    CalculateScan`PlotterScanner`Private`xi1$ - 
                    CalculateScan`PlotterScanner`Private`xi2$))/(
                    CalculateScan`PlotterScanner`Private`involuteCounti + 1); 
                    CalculateScan`PlotterScanner`Private`signedArcFactors$ = 
                    Map[Map[Min[#, 0]& , #]& , 
                    CalculateScan`PlotterScanner`Private`arcFactors$ - (
                    CalculateScan`PlotterScanner`Private`arcLength$[
                    CalculateScan`PlotterScanner`Private`xi2$] - 
                    CalculateScan`PlotterScanner`Private`arcLength$[
                    CalculateScan`PlotterScanner`Private`x0])]; 
                    CalculateScan`PlotterScanner`Private`curvePoints$ = 
                    CalculateScan`PlotterScanner`Private`baseSegments$ + 
                    CalculateScan`PlotterScanner`Private`signedArcFactors$ 
                    CalculateScan`PlotterScanner`Private`oSegments$; If[
                    MemberQ[CalculateScan`PlotterScanner`Private`curvePoints$, 
                    Blank[Complex], {0, Infinity}], {}, 
                    Map[
                    BSplineCurve, 
                    CalculateScan`PlotterScanner`Private`curvePoints$]], {
                    CalculateScan`PlotterScanner`Private`jk, 1, 
                    CalculateScan`PlotterScanner`Private`involuteCounti}], \
{}]; {CalculateScan`PlotterScanner`Private`iTabRight$, 
                    CalculateScan`PlotterScanner`Private`iTabLeft$}, {
                    CalculateScan`PlotterScanner`Private`i, 
                    Length[
                    CalculateScan`PlotterScanner`Private`domainsAndCounts]}]]; 
                    CalculateScan`PlotterScanner`Private`iTab$, {}]; 
                    CalculateScan`PlotterScanner`Private`\
involutePlotCurveLastParamaters$ = {{
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$}, 
                    CalculateScan`PlotterScanner`Private`involuteCount$$}; 
                    Null]; CalculateScan`PlotterScanner`Private`involutePlot$ = 
                    Graphics[{
                    Directive[
                    CalculateScan`PlotterScanner`Private`involuteColor$$, 
                    Opacity[
                    CalculateScan`PlotterScanner`Private`involuteOpacity$$], 
                    Thickness[
                    10^CalculateScan`PlotterScanner`Private`involuteThickness$\
$]], 
                    If[
                    And[
                    CalculateScan`PlotterScanner`Private`involuteTF$$, 
                    CalculateScan`PlotterScanner`Private`involutesRightTF$$], 
                    
                    Part[
                    CalculateScan`PlotterScanner`Private`involutePlotCurves$, 
                    1], {}], 
                    If[
                    And[
                    CalculateScan`PlotterScanner`Private`involuteTF$$, 
                    CalculateScan`PlotterScanner`Private`involutesLeftTF$$], 
                    Part[
                    CalculateScan`PlotterScanner`Private`involutePlotCurves$, 
                    2], {}]}]; If[
                    And[
                    CalculateScan`PlotterScanner`Private`offsetCurveTF$$, 
                    CalculateScan`PlotterScanner`Private`\
offsetCurveLastParamaters$$ =!= {{
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$}, 
                    CalculateScan`PlotterScanner`Private`offsetCurveCount$$}],
                     CalculateScan`PlotterScanner`Private`\
offsetCurvePlotCurves$$ = 
                    If[CalculateScan`PlotterScanner`Private`offsetCurveTF$$, 
                    
                    With[{CalculateScan`PlotterScanner`Private`maxDist$ = 
                    Function[{CalculateScan`PlotterScanner`Private`y, 
                    CalculateScan`PlotterScanner`Private`L}, 
                    Sign[CalculateScan`PlotterScanner`Private`y] 
                    CalculateScan`PlotterScanner`Private`L Tan[
                    Abs[CalculateScan`PlotterScanner`Private`y]]^1][
                    CalculateScan`PlotterScanner`Private`offsetCurveDistance$$\
, 15.55097643097643]}, CalculateScan`PlotterScanner`Private`oCurve = 
                    ParametricPlot3D[
                    Prepend[
                    Normalize[{-CompiledFunction[{8, 8., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    4}}, {{11, {2, 0, 1}}, {9, {2, 0, 2}}, {1, {2, 0, 0}}, {
                    1.8181818181818181`, {3, 0, 7}}, {
                    0.8181818181818182, {3, 0, 3}}, {
                    5.5, {3, 0, 2}}, {-0.5, {3, 0, 6}}}, {0, 3, 10, 0, 
                    0}, {{10, 0, 1}, {13, 1, 0, 1}, {41, 263, 3, 0, 1, 3, 0, 
                    3, 3, 0, 4}, {40, 58, 3, 0, 4, 3, 0, 5}, {16, 2, 5, 4}, {
                    41, 263, 3, 0, 1, 3, 0, 7, 3, 0, 5}, {40, 58, 3, 0, 5, 3, 
                    0, 8}, {10, 2, 5}, {16, 5, 0, 5}, {10, 1, 9}, {13, 9, 5, 
                    9}, {16, 6, 8, 9, 5}, {13, 4, 5, 4}, {1}}, 
                    Function[{Global`x}, 
                    
                    Block[{Compile`$111}, Compile`$111 = 1 + Global`x; 
                    11/(2 Compile`$111^(9/11)) - (11 + 9 Global`x)/(2 
                    Compile`$111^(20/11))]], Evaluate][Global`x], 1}], 
                    Global`x], {
                    Global`x, Min[
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$] - 
                    CalculateScan`PlotterScanner`Private`\[CapitalDelta]X$/2, 
                    Max[CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$] + 
                    CalculateScan`PlotterScanner`Private`\[CapitalDelta]X$/2},
                     PlotRange -> All, Evaluated -> False, MaxRecursion -> 5]; 
                    CalculateScan`PlotterScanner`Private`lineSegments$ = 
                    Select[
                    Map[First, 
                    Cases[
                    Normal[CalculateScan`PlotterScanner`Private`oCurve], 
                    Blank[Line], Infinity]], Length[#] > 3& ]; 
                    CalculateScan`PlotterScanner`Private`baseSegments$ = 
                    Map[{
                    Part[#, 1], 
                    CompiledFunction[{8, 8., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    4}}, {{11, {2, 0, 1}}, {0.6111111111111112, {3, 0, 1}}, {
                    9, {2, 0, 2}}, {1, {2, 0, 0}}, {
                    0.8181818181818182, {3, 0, 3}}}, {0, 3, 6, 0, 
                    0}, {{10, 0, 2}, {13, 2, 0, 2}, {41, 263, 3, 0, 2, 3, 0, 
                    3, 3, 0, 4}, {40, 58, 3, 0, 4, 3, 0, 2}, {10, 2, 4}, {16, 
                    4, 0, 4}, {10, 1, 5}, {13, 5, 4, 5}, {16, 1, 2, 5, 4}, {
                    1}}, 
                    
                    Function[{Global`x}, (11 (11 + 9 Global`x))/(
                    18 (1 + Global`x)^(9/11))], Evaluate][
                    Part[#, 1]]}& , 
                    CalculateScan`PlotterScanner`Private`lineSegments$, {-2}]; 
                    CalculateScan`PlotterScanner`Private`oSegments$ = 
                    Map[Rest, 
                    CalculateScan`PlotterScanner`Private`lineSegments$, {-2}]; 
                    Table[{
                    Map[
                    BSplineCurve, 
                    CalculateScan`PlotterScanner`Private`baseSegments$ + (
                    CalculateScan`PlotterScanner`Private`j 
                    CalculateScan`PlotterScanner`Private`maxDist$ 
                    CalculateScan`PlotterScanner`Private`oSegments$)/
                    CalculateScan`PlotterScanner`Private`offsetCurveCount$$], 
                    
                    Map[
                    BSplineCurve, 
                    CalculateScan`PlotterScanner`Private`baseSegments$ - (
                    CalculateScan`PlotterScanner`Private`j 
                    CalculateScan`PlotterScanner`Private`maxDist$ 
                    CalculateScan`PlotterScanner`Private`oSegments$)/
                    CalculateScan`PlotterScanner`Private`offsetCurveCount$$]},\
 {CalculateScan`PlotterScanner`Private`j, 
                    CalculateScan`PlotterScanner`Private`offsetCurveCount$$}]]\
, {}]; CalculateScan`PlotterScanner`Private`offsetCurveLastParamaters$$ =!= {{
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$}, 
                    CalculateScan`PlotterScanner`Private`offsetCurveCount$$}]; 
                    CalculateScan`PlotterScanner`Private`offsetCurvePlot = 
                    Graphics[{
                    Directive[
                    CalculateScan`PlotterScanner`Private`offsetCurveColor$$, 
                    Opacity[
                    CalculateScan`PlotterScanner`Private`offsetCurveOpacity$$]\
, 
                    Thickness[
                    10^CalculateScan`PlotterScanner`Private`\
offsetCurveThickness$$]], 
                    If[
                    CalculateScan`PlotterScanner`Private`offsetCurveTF$$, 
                    
                    CalculateScan`PlotterScanner`Private`\
offsetCurvePlotCurves$$, {}]}]; If[
                    And[
                    CalculateScan`PlotterScanner`Private`tiltedOffsetCurveTF$$\
, CalculateScan`PlotterScanner`Private`tiltedOffsetCurveLastParamaters$$ =!= \
{{CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$}, 
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveCount$$, 
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveAngle$$}], 
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurvePlotCurves$$ = 
                    If[CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveTF$$, 
                    
                    With[{CalculateScan`PlotterScanner`Private`maxDist$ = 
                    Function[{CalculateScan`PlotterScanner`Private`y, 
                    CalculateScan`PlotterScanner`Private`L}, 
                    Sign[CalculateScan`PlotterScanner`Private`y] 
                    CalculateScan`PlotterScanner`Private`L Tan[
                    Abs[CalculateScan`PlotterScanner`Private`y]]^1][
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveDistance$$, 15.55097643097643], 
                    CalculateScan`PlotterScanner`Private`M$ = {{
                    Cos[
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveAngle$$], 
                    Sin[
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveAngle$$]}, {-Sin[
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveAngle$$], 
                    Cos[
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveAngle$$]}}}, 
                    CalculateScan`PlotterScanner`Private`oCurve = 
                    ParametricPlot3D[
                    Prepend[
                    Dot[CalculateScan`PlotterScanner`Private`M$, 
                    Normalize[{-CompiledFunction[{8, 8., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    4}}, {{11, {2, 0, 1}}, {9, {2, 0, 2}}, {1, {2, 0, 0}}, {
                    1.8181818181818181`, {3, 0, 7}}, {
                    0.8181818181818182, {3, 0, 3}}, {
                    5.5, {3, 0, 2}}, {-0.5, {3, 0, 6}}}, {0, 3, 10, 0, 
                    0}, {{10, 0, 1}, {13, 1, 0, 1}, {41, 263, 3, 0, 1, 3, 0, 
                    3, 3, 0, 4}, {40, 58, 3, 0, 4, 3, 0, 5}, {16, 2, 5, 4}, {
                    41, 263, 3, 0, 1, 3, 0, 7, 3, 0, 5}, {40, 58, 3, 0, 5, 3, 
                    0, 8}, {10, 2, 5}, {16, 5, 0, 5}, {10, 1, 9}, {13, 9, 5, 
                    9}, {16, 6, 8, 9, 5}, {13, 4, 5, 4}, {1}}, 
                    Function[{Global`x}, 
                    
                    Block[{Compile`$111}, Compile`$111 = 1 + Global`x; 
                    11/(2 Compile`$111^(9/11)) - (11 + 9 Global`x)/(2 
                    Compile`$111^(20/11))]], Evaluate][Global`x], 1}]], 
                    Global`x], {
                    Global`x, Min[
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$] - 
                    CalculateScan`PlotterScanner`Private`\[CapitalDelta]X$/2, 
                    Max[CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$] + 
                    CalculateScan`PlotterScanner`Private`\[CapitalDelta]X$/2},
                     PlotRange -> All, Evaluated -> False, MaxRecursion -> 5]; 
                    CalculateScan`PlotterScanner`Private`lineSegments$ = 
                    Select[
                    Map[First, 
                    Cases[
                    Normal[CalculateScan`PlotterScanner`Private`oCurve], 
                    Blank[Line], Infinity]], Length[#] > 3& ]; 
                    CalculateScan`PlotterScanner`Private`baseSegments$ = 
                    Map[{
                    Part[#, 1], 
                    CompiledFunction[{8, 8., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    4}}, {{11, {2, 0, 1}}, {0.6111111111111112, {3, 0, 1}}, {
                    9, {2, 0, 2}}, {1, {2, 0, 0}}, {
                    0.8181818181818182, {3, 0, 3}}}, {0, 3, 6, 0, 
                    0}, {{10, 0, 2}, {13, 2, 0, 2}, {41, 263, 3, 0, 2, 3, 0, 
                    3, 3, 0, 4}, {40, 58, 3, 0, 4, 3, 0, 2}, {10, 2, 4}, {16, 
                    4, 0, 4}, {10, 1, 5}, {13, 5, 4, 5}, {16, 1, 2, 5, 4}, {
                    1}}, 
                    
                    Function[{Global`x}, (11 (11 + 9 Global`x))/(
                    18 (1 + Global`x)^(9/11))], Evaluate][
                    Part[#, 1]]}& , 
                    CalculateScan`PlotterScanner`Private`lineSegments$, {-2}]; 
                    CalculateScan`PlotterScanner`Private`oSegments$ = 
                    Map[Rest, 
                    CalculateScan`PlotterScanner`Private`lineSegments$, {-2}]; 
                    Table[{
                    Map[
                    BSplineCurve, 
                    CalculateScan`PlotterScanner`Private`baseSegments$ + (
                    CalculateScan`PlotterScanner`Private`j 
                    CalculateScan`PlotterScanner`Private`maxDist$ 
                    CalculateScan`PlotterScanner`Private`oSegments$)/
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveCount$$], 
                    Map[
                    BSplineCurve, 
                    CalculateScan`PlotterScanner`Private`baseSegments$ - (
                    CalculateScan`PlotterScanner`Private`j 
                    CalculateScan`PlotterScanner`Private`maxDist$ 
                    CalculateScan`PlotterScanner`Private`oSegments$)/
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveCount$$]}, {
                    CalculateScan`PlotterScanner`Private`j, 
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveCount$$}]], {}]; 
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveLastParamaters$$ =!= {{
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$}, 
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveCount$$, 
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveAngle$$}]; 
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurvePlot = Graphics[{
                    Directive[
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveColor$$, 
                    Opacity[
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveOpacity$$], 
                    Thickness[
                    10^CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveThickness$$]], 
                    If[
                    CalculateScan`PlotterScanner`Private`tiltedOffsetCurveTF$$\
, CalculateScan`PlotterScanner`Private`tiltedOffsetCurvePlotCurves$$, {}]}]; 
                    If[
                    And[
                    CalculateScan`PlotterScanner`Private`pedalCurveTF$$, 
                    CalculateScan`PlotterScanner`Private`\
pedalCurveLastParamaters$$ =!= {{
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$}, 
                    CalculateScan`PlotterScanner`Private`\
pedalCurveCountFactor$$, 
                    CalculateScan`PlotterScanner`Private`\
pedalCurveCountFactor$$}], 
                    CalculateScan`PlotterScanner`Private`pedalCurvePlotCurves$\
$ = If[CalculateScan`PlotterScanner`Private`pedalCurveTF$$, 
                    
                    With[{CalculateScan`PlotterScanner`Private`\
pedalCurveCount$ = If[CalculateScan`PlotterScanner`Private`pedalCurvePoints$$ === 
                    "grid", 
                    Max[1, 
                    Round[
                    16 CalculateScan`PlotterScanner`Private`\
pedalCurveCountFactor$$]], 
                    Max[1, 
                    Round[
                    120 CalculateScan`PlotterScanner`Private`\
pedalCurveCountFactor$$]]]}, 
                    (Cases[
                    Normal[#], 
                    Blank[Line], {0, Infinity}]& )[
                    If[
                    CalculateScan`PlotterScanner`Private`pedalCurvePoints$$ === 
                    "grid", 
                    Table[
                    
                    With[{CalculateScan`PlotterScanner`Private`px$ = 
                    CalculateScan`PlotterScanner`Private`px, 
                    CalculateScan`PlotterScanner`Private`py$ = 
                    CalculateScan`PlotterScanner`Private`py}, 
                    ParametricPlot[{Global`x, 
                    CompiledFunction[{8, 8., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    4}}, {{11, {2, 0, 1}}, {0.6111111111111112, {3, 0, 1}}, {
                    9, {2, 0, 2}}, {1, {2, 0, 0}}, {
                    0.8181818181818182, {3, 0, 3}}}, {0, 3, 6, 0, 
                    0}, {{10, 0, 2}, {13, 2, 0, 2}, {41, 263, 3, 0, 2, 3, 0, 
                    3, 3, 0, 4}, {40, 58, 3, 0, 4, 3, 0, 2}, {10, 2, 4}, {16, 
                    4, 0, 4}, {10, 1, 5}, {13, 5, 4, 5}, {16, 1, 2, 5, 4}, {
                    1}}, 
                    
                    Function[{Global`x}, (11 (11 + 9 Global`x))/(
                    18 (1 + Global`x)^(9/11))], Evaluate][
                    Global`x]} + ((1 (
                    CalculateScan`PlotterScanner`Private`px$ - Global`x) + 
                    CompiledFunction[{8, 8., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    4}}, {{11, {2, 0, 1}}, {9, {2, 0, 2}}, {1, {2, 0, 0}}, {
                    1.8181818181818181`, {3, 0, 7}}, {
                    0.8181818181818182, {3, 0, 3}}, {
                    5.5, {3, 0, 2}}, {-0.5, {3, 0, 6}}}, {0, 3, 10, 0, 
                    0}, {{10, 0, 1}, {13, 1, 0, 1}, {41, 263, 3, 0, 1, 3, 0, 
                    3, 3, 0, 4}, {40, 58, 3, 0, 4, 3, 0, 5}, {16, 2, 5, 4}, {
                    41, 263, 3, 0, 1, 3, 0, 7, 3, 0, 5}, {40, 58, 3, 0, 5, 3, 
                    0, 8}, {10, 2, 5}, {16, 5, 0, 5}, {10, 1, 9}, {13, 9, 5, 
                    9}, {16, 6, 8, 9, 5}, {13, 4, 5, 4}, {1}}, 
                    Function[{Global`x}, 
                    
                    Block[{Compile`$111}, Compile`$111 = 1 + Global`x; 
                    11/(2 Compile`$111^(9/11)) - (11 + 9 Global`x)/(2 
                    Compile`$111^(20/11))]], Evaluate][Global`x] (
                    CalculateScan`PlotterScanner`Private`py$ - 
                    CompiledFunction[{8, 8., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    4}}, {{11, {2, 0, 1}}, {0.6111111111111112, {3, 0, 1}}, {
                    9, {2, 0, 2}}, {1, {2, 0, 0}}, {
                    0.8181818181818182, {3, 0, 3}}}, {0, 3, 6, 0, 
                    0}, {{10, 0, 2}, {13, 2, 0, 2}, {41, 263, 3, 0, 2, 3, 0, 
                    3, 3, 0, 4}, {40, 58, 3, 0, 4, 3, 0, 2}, {10, 2, 4}, {16, 
                    4, 0, 4}, {10, 1, 5}, {13, 5, 4, 5}, {16, 1, 2, 5, 4}, {
                    1}}, 
                    
                    Function[{Global`x}, (11 (11 + 9 Global`x))/(
                    18 (1 + Global`x)^(9/11))], Evaluate][Global`x])) {1, 
                    CompiledFunction[{8, 8., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    4}}, {{11, {2, 0, 1}}, {0.6111111111111112, {3, 0, 1}}, {
                    9, {2, 0, 2}}, {1, {2, 0, 0}}, {
                    0.8181818181818182, {3, 0, 3}}}, {0, 3, 6, 0, 
                    0}, {{10, 0, 2}, {13, 2, 0, 2}, {41, 263, 3, 0, 2, 3, 0, 
                    3, 3, 0, 4}, {40, 58, 3, 0, 4, 3, 0, 2}, {10, 2, 4}, {16, 
                    4, 0, 4}, {10, 1, 5}, {13, 5, 4, 5}, {16, 1, 2, 5, 4}, {
                    1}}, 
                    
                    Function[{Global`x}, (11 (11 + 9 Global`x))/(
                    18 (1 + Global`x)^(9/11))], Evaluate][Global`x]})/(1 + 
                    CompiledFunction[{8, 8., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    4}}, {{11, {2, 0, 1}}, {9, {2, 0, 2}}, {1, {2, 0, 0}}, {
                    1.8181818181818181`, {3, 0, 7}}, {
                    0.8181818181818182, {3, 0, 3}}, {
                    5.5, {3, 0, 2}}, {-0.5, {3, 0, 6}}}, {0, 3, 10, 0, 
                    0}, {{10, 0, 1}, {13, 1, 0, 1}, {41, 263, 3, 0, 1, 3, 0, 
                    3, 3, 0, 4}, {40, 58, 3, 0, 4, 3, 0, 5}, {16, 2, 5, 4}, {
                    41, 263, 3, 0, 1, 3, 0, 7, 3, 0, 5}, {40, 58, 3, 0, 5, 3, 
                    0, 8}, {10, 2, 5}, {16, 5, 0, 5}, {10, 1, 9}, {13, 9, 5, 
                    9}, {16, 6, 8, 9, 5}, {13, 4, 5, 4}, {1}}, 
                    Function[{Global`x}, 
                    
                    Block[{Compile`$111}, Compile`$111 = 1 + Global`x; 
                    11/(2 Compile`$111^(9/11)) - (11 + 9 Global`x)/(2 
                    Compile`$111^(20/11))]], Evaluate][Global`x]^2), {
                    Global`x, CalculateScan`PlotterScanner`Private`xL$, 
                    CalculateScan`PlotterScanner`Private`xU$}, 
                    PlotRange -> {
                    CalculateScan`PlotterScanner`Private`pRX$, 
                    CalculateScan`PlotterScanner`Private`pRY$}, Evaluated -> 
                    False]], {CalculateScan`PlotterScanner`Private`px, 
                    CalculateScan`PlotterScanner`Private`xL$, 
                    CalculateScan`PlotterScanner`Private`xU$, (
                    CalculateScan`PlotterScanner`Private`xU$ - 
                    CalculateScan`PlotterScanner`Private`xL$)/
                    CalculateScan`PlotterScanner`Private`pedalCurveCount$}, {
                    CalculateScan`PlotterScanner`Private`py, 
                    CalculateScan`PlotterScanner`Private`yL$, 
                    CalculateScan`PlotterScanner`Private`yU$, (
                    CalculateScan`PlotterScanner`Private`yU$ - 
                    CalculateScan`PlotterScanner`Private`yL$)/
                    CalculateScan`PlotterScanner`Private`pedalCurveCount$}], 
                    Table[
                    
                    With[{CalculateScan`PlotterScanner`Private`px$ = 
                    CalculateScan`PlotterScanner`Private`px, 
                    CalculateScan`PlotterScanner`Private`py$ = 
                    CompiledFunction[{8, 8., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    4}}, {{11, {2, 0, 1}}, {0.6111111111111112, {3, 0, 1}}, {
                    9, {2, 0, 2}}, {1, {2, 0, 0}}, {
                    0.8181818181818182, {3, 0, 3}}}, {0, 3, 6, 0, 
                    0}, {{10, 0, 2}, {13, 2, 0, 2}, {41, 263, 3, 0, 2, 3, 0, 
                    3, 3, 0, 4}, {40, 58, 3, 0, 4, 3, 0, 2}, {10, 2, 4}, {16, 
                    4, 0, 4}, {10, 1, 5}, {13, 5, 4, 5}, {16, 1, 2, 5, 4}, {
                    1}}, 
                    
                    Function[{Global`x}, (11 (11 + 9 Global`x))/(
                    18 (1 + Global`x)^(9/11))], Evaluate][
                    CalculateScan`PlotterScanner`Private`px]}, 
                    ParametricPlot[{Global`x, 
                    CompiledFunction[{8, 8., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    4}}, {{11, {2, 0, 1}}, {0.6111111111111112, {3, 0, 1}}, {
                    9, {2, 0, 2}}, {1, {2, 0, 0}}, {
                    0.8181818181818182, {3, 0, 3}}}, {0, 3, 6, 0, 
                    0}, {{10, 0, 2}, {13, 2, 0, 2}, {41, 263, 3, 0, 2, 3, 0, 
                    3, 3, 0, 4}, {40, 58, 3, 0, 4, 3, 0, 2}, {10, 2, 4}, {16, 
                    4, 0, 4}, {10, 1, 5}, {13, 5, 4, 5}, {16, 1, 2, 5, 4}, {
                    1}}, 
                    
                    Function[{Global`x}, (11 (11 + 9 Global`x))/(
                    18 (1 + Global`x)^(9/11))], Evaluate][
                    Global`x]} + ((1 (
                    CalculateScan`PlotterScanner`Private`px$ - Global`x) + 
                    CompiledFunction[{8, 8., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    4}}, {{11, {2, 0, 1}}, {9, {2, 0, 2}}, {1, {2, 0, 0}}, {
                    1.8181818181818181`, {3, 0, 7}}, {
                    0.8181818181818182, {3, 0, 3}}, {
                    5.5, {3, 0, 2}}, {-0.5, {3, 0, 6}}}, {0, 3, 10, 0, 
                    0}, {{10, 0, 1}, {13, 1, 0, 1}, {41, 263, 3, 0, 1, 3, 0, 
                    3, 3, 0, 4}, {40, 58, 3, 0, 4, 3, 0, 5}, {16, 2, 5, 4}, {
                    41, 263, 3, 0, 1, 3, 0, 7, 3, 0, 5}, {40, 58, 3, 0, 5, 3, 
                    0, 8}, {10, 2, 5}, {16, 5, 0, 5}, {10, 1, 9}, {13, 9, 5, 
                    9}, {16, 6, 8, 9, 5}, {13, 4, 5, 4}, {1}}, 
                    Function[{Global`x}, 
                    
                    Block[{Compile`$111}, Compile`$111 = 1 + Global`x; 
                    11/(2 Compile`$111^(9/11)) - (11 + 9 Global`x)/(2 
                    Compile`$111^(20/11))]], Evaluate][Global`x] (
                    CalculateScan`PlotterScanner`Private`py$ - 
                    CompiledFunction[{8, 8., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    4}}, {{11, {2, 0, 1}}, {0.6111111111111112, {3, 0, 1}}, {
                    9, {2, 0, 2}}, {1, {2, 0, 0}}, {
                    0.8181818181818182, {3, 0, 3}}}, {0, 3, 6, 0, 
                    0}, {{10, 0, 2}, {13, 2, 0, 2}, {41, 263, 3, 0, 2, 3, 0, 
                    3, 3, 0, 4}, {40, 58, 3, 0, 4, 3, 0, 2}, {10, 2, 4}, {16, 
                    4, 0, 4}, {10, 1, 5}, {13, 5, 4, 5}, {16, 1, 2, 5, 4}, {
                    1}}, 
                    
                    Function[{Global`x}, (11 (11 + 9 Global`x))/(
                    18 (1 + Global`x)^(9/11))], Evaluate][Global`x])) {1, 
                    CompiledFunction[{8, 8., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    4}}, {{11, {2, 0, 1}}, {0.6111111111111112, {3, 0, 1}}, {
                    9, {2, 0, 2}}, {1, {2, 0, 0}}, {
                    0.8181818181818182, {3, 0, 3}}}, {0, 3, 6, 0, 
                    0}, {{10, 0, 2}, {13, 2, 0, 2}, {41, 263, 3, 0, 2, 3, 0, 
                    3, 3, 0, 4}, {40, 58, 3, 0, 4, 3, 0, 2}, {10, 2, 4}, {16, 
                    4, 0, 4}, {10, 1, 5}, {13, 5, 4, 5}, {16, 1, 2, 5, 4}, {
                    1}}, 
                    
                    Function[{Global`x}, (11 (11 + 9 Global`x))/(
                    18 (1 + Global`x)^(9/11))], Evaluate][Global`x]})/(1 + 
                    CompiledFunction[{8, 8., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    4}}, {{11, {2, 0, 1}}, {9, {2, 0, 2}}, {1, {2, 0, 0}}, {
                    1.8181818181818181`, {3, 0, 7}}, {
                    0.8181818181818182, {3, 0, 3}}, {
                    5.5, {3, 0, 2}}, {-0.5, {3, 0, 6}}}, {0, 3, 10, 0, 
                    0}, {{10, 0, 1}, {13, 1, 0, 1}, {41, 263, 3, 0, 1, 3, 0, 
                    3, 3, 0, 4}, {40, 58, 3, 0, 4, 3, 0, 5}, {16, 2, 5, 4}, {
                    41, 263, 3, 0, 1, 3, 0, 7, 3, 0, 5}, {40, 58, 3, 0, 5, 3, 
                    0, 8}, {10, 2, 5}, {16, 5, 0, 5}, {10, 1, 9}, {13, 9, 5, 
                    9}, {16, 6, 8, 9, 5}, {13, 4, 5, 4}, {1}}, 
                    Function[{Global`x}, 
                    
                    Block[{Compile`$111}, Compile`$111 = 1 + Global`x; 
                    11/(2 Compile`$111^(9/11)) - (11 + 9 Global`x)/(2 
                    Compile`$111^(20/11))]], Evaluate][Global`x]^2), {
                    Global`x, CalculateScan`PlotterScanner`Private`xL$, 
                    CalculateScan`PlotterScanner`Private`xU$}, 
                    PlotRange -> {
                    CalculateScan`PlotterScanner`Private`pRX$, 
                    CalculateScan`PlotterScanner`Private`pRY$}, Evaluated -> 
                    False]], {CalculateScan`PlotterScanner`Private`px, 
                    CalculateScan`PlotterScanner`Private`xL$, 
                    CalculateScan`PlotterScanner`Private`xU$, (
                    CalculateScan`PlotterScanner`Private`xU$ - 
                    CalculateScan`PlotterScanner`Private`xL$)/
                    CalculateScan`PlotterScanner`Private`pedalCurveCount$}]]]]\
, {}]; CalculateScan`PlotterScanner`Private`pedalCurveLastParamaters$$ =!= {{
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$}, 
                    CalculateScan`PlotterScanner`Private`\
pedalCurveCountFactor$$, 
                    CalculateScan`PlotterScanner`Private`pedalCurvePoints$$}]; 
                    CalculateScan`PlotterScanner`Private`pedalCurvePlot = 
                    Graphics[{
                    Directive[
                    CalculateScan`PlotterScanner`Private`pedalCurveColor$$, 
                    Opacity[
                    CalculateScan`PlotterScanner`Private`pedalCurveOpacity$$], 
                    Thickness[
                    10^CalculateScan`PlotterScanner`Private`\
pedalCurveThickness$$]], 
                    If[
                    CalculateScan`PlotterScanner`Private`pedalCurveTF$$, 
                    CalculateScan`PlotterScanner`Private`pedalCurvePlotCurves$\
$, {}]}]; If[
                    And[
                    CalculateScan`PlotterScanner`Private`negativePedalCurveTF$\
$, CalculateScan`PlotterScanner`Private`negativePedalCurveLastParamaters$$ =!= \
{{CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$}, 
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurveCountFactor$$, 
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurvePoints$$}], 
                    If[CalculateScan`PlotterScanner`Private`\
negativePedalCurveTF$$, 
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurvePlotCurves$$ = 
                    With[{CalculateScan`PlotterScanner`Private`\
negativePedalCurveCount$ = If[
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurvePoints$$ === "grid", 
                    Max[1, 
                    Round[
                    16 CalculateScan`PlotterScanner`Private`\
negativePedalCurveCountFactor$$]], 
                    Max[1, 
                    Round[
                    120 CalculateScan`PlotterScanner`Private`\
negativePedalCurveCountFactor$$]]]}, 
                    (Cases[
                    Normal[#], 
                    Blank[Line], {0, Infinity}]& )[
                    If[
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurvePoints$$ === "grid", 
                    Table[
                    
                    With[{CalculateScan`PlotterScanner`Private`px$ = 
                    CalculateScan`PlotterScanner`Private`px, 
                    CalculateScan`PlotterScanner`Private`py$ = 
                    CalculateScan`PlotterScanner`Private`py}, 
                    
                    ParametricPlot[{-((
                    CalculateScan`PlotterScanner`Private`px$ - 2 Global`x) (
                    CalculateScan`PlotterScanner`Private`py$ - 
                    CompiledFunction[{8, 8., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    4}}, {{11, {2, 0, 1}}, {0.6111111111111112, {3, 0, 1}}, {
                    9, {2, 0, 2}}, {1, {2, 0, 0}}, {
                    0.8181818181818182, {3, 0, 3}}}, {0, 3, 6, 0, 
                    0}, {{10, 0, 2}, {13, 2, 0, 2}, {41, 263, 3, 0, 2, 3, 0, 
                    3, 3, 0, 4}, {40, 58, 3, 0, 4, 3, 0, 2}, {10, 2, 4}, {16, 
                    4, 0, 4}, {10, 1, 5}, {13, 5, 4, 5}, {16, 1, 2, 5, 4}, {
                    1}}, 
                    
                    Function[{Global`x}, (11 (11 + 9 Global`x))/(
                    18 (1 + Global`x)^(9/11))], Evaluate][Global`x])) - ((
                    CalculateScan`PlotterScanner`Private`px$ - Global`x) 
                    Global`x + (CalculateScan`PlotterScanner`Private`py$ - 
                    CompiledFunction[{8, 8., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    4}}, {{11, {2, 0, 1}}, {0.6111111111111112, {3, 0, 1}}, {
                    9, {2, 0, 2}}, {1, {2, 0, 0}}, {
                    0.8181818181818182, {3, 0, 3}}}, {0, 3, 6, 0, 
                    0}, {{10, 0, 2}, {13, 2, 0, 2}, {41, 263, 3, 0, 2, 3, 0, 
                    3, 3, 0, 4}, {40, 58, 3, 0, 4, 3, 0, 2}, {10, 2, 4}, {16, 
                    4, 0, 4}, {10, 1, 5}, {13, 5, 4, 5}, {16, 1, 2, 5, 4}, {
                    1}}, 
                    
                    Function[{Global`x}, (11 (11 + 9 Global`x))/(
                    18 (1 + Global`x)^(9/11))], Evaluate][Global`x])^2) 
                    CompiledFunction[{8, 8., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    4}}, {{11, {2, 0, 1}}, {9, {2, 0, 2}}, {1, {2, 0, 0}}, {
                    1.8181818181818181`, {3, 0, 7}}, {
                    0.8181818181818182, {3, 0, 3}}, {
                    5.5, {3, 0, 2}}, {-0.5, {3, 0, 6}}}, {0, 3, 10, 0, 
                    0}, {{10, 0, 1}, {13, 1, 0, 1}, {41, 263, 3, 0, 1, 3, 0, 
                    3, 3, 0, 4}, {40, 58, 3, 0, 4, 3, 0, 5}, {16, 2, 5, 4}, {
                    41, 263, 3, 0, 1, 3, 0, 7, 3, 0, 5}, {40, 58, 3, 0, 5, 3, 
                    0, 8}, {10, 2, 5}, {16, 5, 0, 5}, {10, 1, 9}, {13, 9, 5, 
                    9}, {16, 6, 8, 9, 5}, {13, 4, 5, 4}, {1}}, 
                    Function[{Global`x}, 
                    
                    Block[{Compile`$111}, Compile`$111 = 1 + Global`x; 
                    11/(2 Compile`$111^(9/11)) - (11 + 9 Global`x)/(2 
                    Compile`$111^(20/11))]], Evaluate][
                    Global`x], (CalculateScan`PlotterScanner`Private`px$ - 
                    Global`x)^2 + CalculateScan`PlotterScanner`Private`py$ 
                    CompiledFunction[{8, 8., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    4}}, {{11, {2, 0, 1}}, {0.6111111111111112, {3, 0, 1}}, {
                    9, {2, 0, 2}}, {1, {2, 0, 0}}, {
                    0.8181818181818182, {3, 0, 3}}}, {0, 3, 6, 0, 
                    0}, {{10, 0, 2}, {13, 2, 0, 2}, {41, 263, 3, 0, 2, 3, 0, 
                    3, 3, 0, 4}, {40, 58, 3, 0, 4, 3, 0, 2}, {10, 2, 4}, {16, 
                    4, 0, 4}, {10, 1, 5}, {13, 5, 4, 5}, {16, 1, 2, 5, 4}, {
                    1}}, 
                    
                    Function[{Global`x}, (11 (11 + 9 Global`x))/(
                    18 (1 + Global`x)^(9/11))], Evaluate][Global`x] - 
                    CompiledFunction[{8, 8., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    4}}, {{11, {2, 0, 1}}, {0.6111111111111112, {3, 0, 1}}, {
                    9, {2, 0, 2}}, {1, {2, 0, 0}}, {
                    0.8181818181818182, {3, 0, 3}}}, {0, 3, 6, 0, 
                    0}, {{10, 0, 2}, {13, 2, 0, 2}, {41, 263, 3, 0, 2, 3, 0, 
                    3, 3, 0, 4}, {40, 58, 3, 0, 4, 3, 0, 2}, {10, 2, 4}, {16, 
                    4, 0, 4}, {10, 1, 5}, {13, 5, 4, 5}, {16, 1, 2, 5, 4}, {
                    1}}, 
                    
                    Function[{Global`x}, (11 (11 + 9 Global`x))/(
                    18 (1 + Global`x)^(9/11))], Evaluate][
                    Global`x]^2 + (CalculateScan`PlotterScanner`Private`px$ - 
                    Global`x) (CalculateScan`PlotterScanner`Private`py$ - 2 
                    CompiledFunction[{8, 8., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    4}}, {{11, {2, 0, 1}}, {0.6111111111111112, {3, 0, 1}}, {
                    9, {2, 0, 2}}, {1, {2, 0, 0}}, {
                    0.8181818181818182, {3, 0, 3}}}, {0, 3, 6, 0, 
                    0}, {{10, 0, 2}, {13, 2, 0, 2}, {41, 263, 3, 0, 2, 3, 0, 
                    3, 3, 0, 4}, {40, 58, 3, 0, 4, 3, 0, 2}, {10, 2, 4}, {16, 
                    4, 0, 4}, {10, 1, 5}, {13, 5, 4, 5}, {16, 1, 2, 5, 4}, {
                    1}}, 
                    
                    Function[{Global`x}, (11 (11 + 9 Global`x))/(
                    18 (1 + Global`x)^(9/11))], Evaluate][Global`x]) 
                    CompiledFunction[{8, 8., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    4}}, {{11, {2, 0, 1}}, {9, {2, 0, 2}}, {1, {2, 0, 0}}, {
                    1.8181818181818181`, {3, 0, 7}}, {
                    0.8181818181818182, {3, 0, 3}}, {
                    5.5, {3, 0, 2}}, {-0.5, {3, 0, 6}}}, {0, 3, 10, 0, 
                    0}, {{10, 0, 1}, {13, 1, 0, 1}, {41, 263, 3, 0, 1, 3, 0, 
                    3, 3, 0, 4}, {40, 58, 3, 0, 4, 3, 0, 5}, {16, 2, 5, 4}, {
                    41, 263, 3, 0, 1, 3, 0, 7, 3, 0, 5}, {40, 58, 3, 0, 5, 3, 
                    0, 8}, {10, 2, 5}, {16, 5, 0, 5}, {10, 1, 9}, {13, 9, 5, 
                    9}, {16, 6, 8, 9, 5}, {13, 4, 5, 4}, {1}}, 
                    Function[{Global`x}, 
                    
                    Block[{Compile`$111}, Compile`$111 = 1 + Global`x; 
                    11/(2 Compile`$111^(9/11)) - (11 + 9 Global`x)/(2 
                    Compile`$111^(20/11))]], Evaluate][Global`x]}/(
                    CalculateScan`PlotterScanner`Private`py$ - 
                    CompiledFunction[{8, 8., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    4}}, {{11, {2, 0, 1}}, {0.6111111111111112, {3, 0, 1}}, {
                    9, {2, 0, 2}}, {1, {2, 0, 0}}, {
                    0.8181818181818182, {3, 0, 3}}}, {0, 3, 6, 0, 
                    0}, {{10, 0, 2}, {13, 2, 0, 2}, {41, 263, 3, 0, 2, 3, 0, 
                    3, 3, 0, 4}, {40, 58, 3, 0, 4, 3, 0, 2}, {10, 2, 4}, {16, 
                    4, 0, 4}, {10, 1, 5}, {13, 5, 4, 5}, {16, 1, 2, 5, 4}, {
                    1}}, 
                    
                    Function[{Global`x}, (11 (11 + 9 Global`x))/(
                    18 (1 + Global`x)^(9/11))], Evaluate][
                    Global`x] + (-CalculateScan`PlotterScanner`Private`px$ + 
                    Global`x) CompiledFunction[{8, 8., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    4}}, {{11, {2, 0, 1}}, {9, {2, 0, 2}}, {1, {2, 0, 0}}, {
                    1.8181818181818181`, {3, 0, 7}}, {
                    0.8181818181818182, {3, 0, 3}}, {
                    5.5, {3, 0, 2}}, {-0.5, {3, 0, 6}}}, {0, 3, 10, 0, 
                    0}, {{10, 0, 1}, {13, 1, 0, 1}, {41, 263, 3, 0, 1, 3, 0, 
                    3, 3, 0, 4}, {40, 58, 3, 0, 4, 3, 0, 5}, {16, 2, 5, 4}, {
                    41, 263, 3, 0, 1, 3, 0, 7, 3, 0, 5}, {40, 58, 3, 0, 5, 3, 
                    0, 8}, {10, 2, 5}, {16, 5, 0, 5}, {10, 1, 9}, {13, 9, 5, 
                    9}, {16, 6, 8, 9, 5}, {13, 4, 5, 4}, {1}}, 
                    Function[{Global`x}, 
                    
                    Block[{Compile`$111}, Compile`$111 = 1 + Global`x; 
                    11/(2 Compile`$111^(9/11)) - (11 + 9 Global`x)/(2 
                    Compile`$111^(20/11))]], Evaluate][Global`x]), {
                    Global`x, CalculateScan`PlotterScanner`Private`xL$, 
                    CalculateScan`PlotterScanner`Private`xU$}, 
                    PlotRange -> {
                    CalculateScan`PlotterScanner`Private`pRX$, 
                    CalculateScan`PlotterScanner`Private`pRY$}, Evaluated -> 
                    False]], {CalculateScan`PlotterScanner`Private`px, 
                    CalculateScan`PlotterScanner`Private`xL$, 
                    CalculateScan`PlotterScanner`Private`xU$, (
                    CalculateScan`PlotterScanner`Private`xU$ - 
                    CalculateScan`PlotterScanner`Private`xL$)/
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurveCount$}, {CalculateScan`PlotterScanner`Private`py, 
                    CalculateScan`PlotterScanner`Private`yL$, 
                    CalculateScan`PlotterScanner`Private`yU$, (
                    CalculateScan`PlotterScanner`Private`yU$ - 
                    CalculateScan`PlotterScanner`Private`yL$)/
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurveCount$}], 
                    Table[
                    
                    With[{CalculateScan`PlotterScanner`Private`px$ = 
                    CalculateScan`PlotterScanner`Private`px, 
                    CalculateScan`PlotterScanner`Private`py$ = 
                    CompiledFunction[{8, 8., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    4}}, {{11, {2, 0, 1}}, {0.6111111111111112, {3, 0, 1}}, {
                    9, {2, 0, 2}}, {1, {2, 0, 0}}, {
                    0.8181818181818182, {3, 0, 3}}}, {0, 3, 6, 0, 
                    0}, {{10, 0, 2}, {13, 2, 0, 2}, {41, 263, 3, 0, 2, 3, 0, 
                    3, 3, 0, 4}, {40, 58, 3, 0, 4, 3, 0, 2}, {10, 2, 4}, {16, 
                    4, 0, 4}, {10, 1, 5}, {13, 5, 4, 5}, {16, 1, 2, 5, 4}, {
                    1}}, 
                    Function[{Global`x}, (11 (11 + 9 Global`x))/(
                    18 (1 + Global`x)^(9/11))], Evaluate][
                    CalculateScan`PlotterScanner`Private`px]}, 
                    
                    ParametricPlot[{-((
                    CalculateScan`PlotterScanner`Private`px$ - 2 Global`x) (
                    CalculateScan`PlotterScanner`Private`py$ - 
                    CompiledFunction[{8, 8., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    4}}, {{11, {2, 0, 1}}, {0.6111111111111112, {3, 0, 1}}, {
                    9, {2, 0, 2}}, {1, {2, 0, 0}}, {
                    0.8181818181818182, {3, 0, 3}}}, {0, 3, 6, 0, 
                    0}, {{10, 0, 2}, {13, 2, 0, 2}, {41, 263, 3, 0, 2, 3, 0, 
                    3, 3, 0, 4}, {40, 58, 3, 0, 4, 3, 0, 2}, {10, 2, 4}, {16, 
                    4, 0, 4}, {10, 1, 5}, {13, 5, 4, 5}, {16, 1, 2, 5, 4}, {
                    1}}, 
                    
                    Function[{Global`x}, (11 (11 + 9 Global`x))/(
                    18 (1 + Global`x)^(9/11))], Evaluate][Global`x])) - ((
                    CalculateScan`PlotterScanner`Private`px$ - Global`x) 
                    Global`x + (CalculateScan`PlotterScanner`Private`py$ - 
                    CompiledFunction[{8, 8., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    4}}, {{11, {2, 0, 1}}, {0.6111111111111112, {3, 0, 1}}, {
                    9, {2, 0, 2}}, {1, {2, 0, 0}}, {
                    0.8181818181818182, {3, 0, 3}}}, {0, 3, 6, 0, 
                    0}, {{10, 0, 2}, {13, 2, 0, 2}, {41, 263, 3, 0, 2, 3, 0, 
                    3, 3, 0, 4}, {40, 58, 3, 0, 4, 3, 0, 2}, {10, 2, 4}, {16, 
                    4, 0, 4}, {10, 1, 5}, {13, 5, 4, 5}, {16, 1, 2, 5, 4}, {
                    1}}, 
                    
                    Function[{Global`x}, (11 (11 + 9 Global`x))/(
                    18 (1 + Global`x)^(9/11))], Evaluate][Global`x])^2) 
                    CompiledFunction[{8, 8., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    4}}, {{11, {2, 0, 1}}, {9, {2, 0, 2}}, {1, {2, 0, 0}}, {
                    1.8181818181818181`, {3, 0, 7}}, {
                    0.8181818181818182, {3, 0, 3}}, {
                    5.5, {3, 0, 2}}, {-0.5, {3, 0, 6}}}, {0, 3, 10, 0, 
                    0}, {{10, 0, 1}, {13, 1, 0, 1}, {41, 263, 3, 0, 1, 3, 0, 
                    3, 3, 0, 4}, {40, 58, 3, 0, 4, 3, 0, 5}, {16, 2, 5, 4}, {
                    41, 263, 3, 0, 1, 3, 0, 7, 3, 0, 5}, {40, 58, 3, 0, 5, 3, 
                    0, 8}, {10, 2, 5}, {16, 5, 0, 5}, {10, 1, 9}, {13, 9, 5, 
                    9}, {16, 6, 8, 9, 5}, {13, 4, 5, 4}, {1}}, 
                    Function[{Global`x}, 
                    
                    Block[{Compile`$111}, Compile`$111 = 1 + Global`x; 
                    11/(2 Compile`$111^(9/11)) - (11 + 9 Global`x)/(2 
                    Compile`$111^(20/11))]], Evaluate][
                    Global`x], (CalculateScan`PlotterScanner`Private`px$ - 
                    Global`x)^2 + CalculateScan`PlotterScanner`Private`py$ 
                    CompiledFunction[{8, 8., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    4}}, {{11, {2, 0, 1}}, {0.6111111111111112, {3, 0, 1}}, {
                    9, {2, 0, 2}}, {1, {2, 0, 0}}, {
                    0.8181818181818182, {3, 0, 3}}}, {0, 3, 6, 0, 
                    0}, {{10, 0, 2}, {13, 2, 0, 2}, {41, 263, 3, 0, 2, 3, 0, 
                    3, 3, 0, 4}, {40, 58, 3, 0, 4, 3, 0, 2}, {10, 2, 4}, {16, 
                    4, 0, 4}, {10, 1, 5}, {13, 5, 4, 5}, {16, 1, 2, 5, 4}, {
                    1}}, 
                    
                    Function[{Global`x}, (11 (11 + 9 Global`x))/(
                    18 (1 + Global`x)^(9/11))], Evaluate][Global`x] - 
                    CompiledFunction[{8, 8., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    4}}, {{11, {2, 0, 1}}, {0.6111111111111112, {3, 0, 1}}, {
                    9, {2, 0, 2}}, {1, {2, 0, 0}}, {
                    0.8181818181818182, {3, 0, 3}}}, {0, 3, 6, 0, 
                    0}, {{10, 0, 2}, {13, 2, 0, 2}, {41, 263, 3, 0, 2, 3, 0, 
                    3, 3, 0, 4}, {40, 58, 3, 0, 4, 3, 0, 2}, {10, 2, 4}, {16, 
                    4, 0, 4}, {10, 1, 5}, {13, 5, 4, 5}, {16, 1, 2, 5, 4}, {
                    1}}, 
                    
                    Function[{Global`x}, (11 (11 + 9 Global`x))/(
                    18 (1 + Global`x)^(9/11))], Evaluate][
                    Global`x]^2 + (CalculateScan`PlotterScanner`Private`px$ - 
                    Global`x) (CalculateScan`PlotterScanner`Private`py$ - 2 
                    CompiledFunction[{8, 8., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    4}}, {{11, {2, 0, 1}}, {0.6111111111111112, {3, 0, 1}}, {
                    9, {2, 0, 2}}, {1, {2, 0, 0}}, {
                    0.8181818181818182, {3, 0, 3}}}, {0, 3, 6, 0, 
                    0}, {{10, 0, 2}, {13, 2, 0, 2}, {41, 263, 3, 0, 2, 3, 0, 
                    3, 3, 0, 4}, {40, 58, 3, 0, 4, 3, 0, 2}, {10, 2, 4}, {16, 
                    4, 0, 4}, {10, 1, 5}, {13, 5, 4, 5}, {16, 1, 2, 5, 4}, {
                    1}}, 
                    
                    Function[{Global`x}, (11 (11 + 9 Global`x))/(
                    18 (1 + Global`x)^(9/11))], Evaluate][Global`x]) 
                    CompiledFunction[{8, 8., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    4}}, {{11, {2, 0, 1}}, {9, {2, 0, 2}}, {1, {2, 0, 0}}, {
                    1.8181818181818181`, {3, 0, 7}}, {
                    0.8181818181818182, {3, 0, 3}}, {
                    5.5, {3, 0, 2}}, {-0.5, {3, 0, 6}}}, {0, 3, 10, 0, 
                    0}, {{10, 0, 1}, {13, 1, 0, 1}, {41, 263, 3, 0, 1, 3, 0, 
                    3, 3, 0, 4}, {40, 58, 3, 0, 4, 3, 0, 5}, {16, 2, 5, 4}, {
                    41, 263, 3, 0, 1, 3, 0, 7, 3, 0, 5}, {40, 58, 3, 0, 5, 3, 
                    0, 8}, {10, 2, 5}, {16, 5, 0, 5}, {10, 1, 9}, {13, 9, 5, 
                    9}, {16, 6, 8, 9, 5}, {13, 4, 5, 4}, {1}}, 
                    Function[{Global`x}, 
                    
                    Block[{Compile`$111}, Compile`$111 = 1 + Global`x; 
                    11/(2 Compile`$111^(9/11)) - (11 + 9 Global`x)/(2 
                    Compile`$111^(20/11))]], Evaluate][Global`x]}/(
                    CalculateScan`PlotterScanner`Private`py$ - 
                    CompiledFunction[{8, 8., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    4}}, {{11, {2, 0, 1}}, {0.6111111111111112, {3, 0, 1}}, {
                    9, {2, 0, 2}}, {1, {2, 0, 0}}, {
                    0.8181818181818182, {3, 0, 3}}}, {0, 3, 6, 0, 
                    0}, {{10, 0, 2}, {13, 2, 0, 2}, {41, 263, 3, 0, 2, 3, 0, 
                    3, 3, 0, 4}, {40, 58, 3, 0, 4, 3, 0, 2}, {10, 2, 4}, {16, 
                    4, 0, 4}, {10, 1, 5}, {13, 5, 4, 5}, {16, 1, 2, 5, 4}, {
                    1}}, 
                    
                    Function[{Global`x}, (11 (11 + 9 Global`x))/(
                    18 (1 + Global`x)^(9/11))], Evaluate][
                    Global`x] + (-CalculateScan`PlotterScanner`Private`px$ + 
                    Global`x) CompiledFunction[{8, 8., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    4}}, {{11, {2, 0, 1}}, {9, {2, 0, 2}}, {1, {2, 0, 0}}, {
                    1.8181818181818181`, {3, 0, 7}}, {
                    0.8181818181818182, {3, 0, 3}}, {
                    5.5, {3, 0, 2}}, {-0.5, {3, 0, 6}}}, {0, 3, 10, 0, 
                    0}, {{10, 0, 1}, {13, 1, 0, 1}, {41, 263, 3, 0, 1, 3, 0, 
                    3, 3, 0, 4}, {40, 58, 3, 0, 4, 3, 0, 5}, {16, 2, 5, 4}, {
                    41, 263, 3, 0, 1, 3, 0, 7, 3, 0, 5}, {40, 58, 3, 0, 5, 3, 
                    0, 8}, {10, 2, 5}, {16, 5, 0, 5}, {10, 1, 9}, {13, 9, 5, 
                    9}, {16, 6, 8, 9, 5}, {13, 4, 5, 4}, {1}}, 
                    Function[{Global`x}, 
                    
                    Block[{Compile`$111}, Compile`$111 = 1 + Global`x; 
                    11/(2 Compile`$111^(9/11)) - (11 + 9 Global`x)/(2 
                    Compile`$111^(20/11))]], Evaluate][Global`x]), {
                    Global`x, CalculateScan`PlotterScanner`Private`xL$, 
                    CalculateScan`PlotterScanner`Private`xU$}, 
                    PlotRange -> {
                    CalculateScan`PlotterScanner`Private`pRX$, 
                    CalculateScan`PlotterScanner`Private`pRY$}, Evaluated -> 
                    False]], {CalculateScan`PlotterScanner`Private`px, 
                    CalculateScan`PlotterScanner`Private`xL$, 
                    CalculateScan`PlotterScanner`Private`xU$, (
                    CalculateScan`PlotterScanner`Private`xU$ - 
                    CalculateScan`PlotterScanner`Private`xL$)/
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurveCount$}]]]], {}]; 
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurveLastParamaters$$ = {{
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$}, 
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurveCountFactor$$, 
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurvePoints$$}]; 
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurvePlot = Graphics[{
                    Directive[
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurveColor$$, 
                    Opacity[
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurveOpacity$$], 
                    Thickness[
                    10^CalculateScan`PlotterScanner`Private`\
negativePedalCurveThickness$$]], 
                    If[
                    CalculateScan`PlotterScanner`Private`negativePedalCurveTF$\
$, CalculateScan`PlotterScanner`Private`negativePedalCurvePlotCurves$$, {}]}]; 
                    If[
                    And[
                    CalculateScan`PlotterScanner`Private`contraPedalCurveTF$$,
                     CalculateScan`PlotterScanner`Private`\
contraPedalCurveLastParamaters$$ =!= {{
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$}, 
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurveCountFactor$$, 
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurvePoints$$}], 
                    If[CalculateScan`PlotterScanner`Private`\
contraPedalCurveTF$$, 
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurvePlotCurves$$ = 
                    With[{CalculateScan`PlotterScanner`Private`\
contraPedalCurveCount$ = 
                    If[CalculateScan`PlotterScanner`Private`\
contraPedalCurvePoints$$ === "grid", 
                    Max[1, 
                    Round[
                    16 CalculateScan`PlotterScanner`Private`\
contraPedalCurveCountFactor$$]], 
                    Max[1, 
                    Round[
                    120 CalculateScan`PlotterScanner`Private`\
contraPedalCurveCountFactor$$]]]}, 
                    (Cases[
                    Normal[#], 
                    Blank[Line], {0, Infinity}]& )[
                    If[
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurvePoints$$ === "grid", 
                    Table[
                    
                    With[{CalculateScan`PlotterScanner`Private`px$ = 
                    CalculateScan`PlotterScanner`Private`px, 
                    CalculateScan`PlotterScanner`Private`py$ = 
                    CalculateScan`PlotterScanner`Private`py}, 
                    ParametricPlot[{Global`x, 
                    CompiledFunction[{8, 8., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    4}}, {{11, {2, 0, 1}}, {0.6111111111111112, {3, 0, 1}}, {
                    9, {2, 0, 2}}, {1, {2, 0, 0}}, {
                    0.8181818181818182, {3, 0, 3}}}, {0, 3, 6, 0, 
                    0}, {{10, 0, 2}, {13, 2, 0, 2}, {41, 263, 3, 0, 2, 3, 0, 
                    3, 3, 0, 4}, {40, 58, 3, 0, 4, 3, 0, 2}, {10, 2, 4}, {16, 
                    4, 0, 4}, {10, 1, 5}, {13, 5, 4, 5}, {16, 1, 2, 5, 4}, {
                    1}}, 
                    
                    Function[{Global`x}, (11 (11 + 9 Global`x))/(
                    18 (1 + Global`x)^(9/11))], Evaluate][
                    Global`x]} + ((1 (
                    CalculateScan`PlotterScanner`Private`py$ - 
                    CompiledFunction[{8, 8., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    4}}, {{11, {2, 0, 1}}, {0.6111111111111112, {3, 0, 1}}, {
                    9, {2, 0, 2}}, {1, {2, 0, 0}}, {
                    0.8181818181818182, {3, 0, 3}}}, {0, 3, 6, 0, 
                    0}, {{10, 0, 2}, {13, 2, 0, 2}, {41, 263, 3, 0, 2, 3, 0, 
                    3, 3, 0, 4}, {40, 58, 3, 0, 4, 3, 0, 2}, {10, 2, 4}, {16, 
                    4, 0, 4}, {10, 1, 5}, {13, 5, 4, 5}, {16, 1, 2, 5, 4}, {
                    1}}, 
                    
                    Function[{Global`x}, (11 (11 + 9 Global`x))/(
                    18 (1 + Global`x)^(9/11))], Evaluate][Global`x]) + 
                    CompiledFunction[{8, 8., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    4}}, {{11, {2, 0, 1}}, {9, {2, 0, 2}}, {1, {2, 0, 0}}, {
                    1.8181818181818181`, {3, 0, 7}}, {
                    0.8181818181818182, {3, 0, 3}}, {
                    5.5, {3, 0, 2}}, {-0.5, {3, 0, 6}}}, {0, 3, 10, 0, 
                    0}, {{10, 0, 1}, {13, 1, 0, 1}, {41, 263, 3, 0, 1, 3, 0, 
                    3, 3, 0, 4}, {40, 58, 3, 0, 4, 3, 0, 5}, {16, 2, 5, 4}, {
                    41, 263, 3, 0, 1, 3, 0, 7, 3, 0, 5}, {40, 58, 3, 0, 5, 3, 
                    0, 8}, {10, 2, 5}, {16, 5, 0, 5}, {10, 1, 9}, {13, 9, 5, 
                    9}, {16, 6, 8, 9, 5}, {13, 4, 5, 4}, {1}}, 
                    Function[{Global`x}, 
                    
                    Block[{Compile`$111}, Compile`$111 = 1 + Global`x; 
                    11/(2 Compile`$111^(9/11)) - (11 + 9 Global`x)/(2 
                    Compile`$111^(20/11))]], Evaluate][
                    Global`x] (-CalculateScan`PlotterScanner`Private`px$ + 
                    Global`x)) {-CompiledFunction[{8, 8., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    4}}, {{11, {2, 0, 1}}, {0.6111111111111112, {3, 0, 1}}, {
                    9, {2, 0, 2}}, {1, {2, 0, 0}}, {
                    0.8181818181818182, {3, 0, 3}}}, {0, 3, 6, 0, 
                    0}, {{10, 0, 2}, {13, 2, 0, 2}, {41, 263, 3, 0, 2, 3, 0, 
                    3, 3, 0, 4}, {40, 58, 3, 0, 4, 3, 0, 2}, {10, 2, 4}, {16, 
                    4, 0, 4}, {10, 1, 5}, {13, 5, 4, 5}, {16, 1, 2, 5, 4}, {
                    1}}, 
                    
                    Function[{Global`x}, (11 (11 + 9 Global`x))/(
                    18 (1 + Global`x)^(9/11))], Evaluate][Global`x], 1})/(1 + 
                    CompiledFunction[{8, 8., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    4}}, {{11, {2, 0, 1}}, {9, {2, 0, 2}}, {1, {2, 0, 0}}, {
                    1.8181818181818181`, {3, 0, 7}}, {
                    0.8181818181818182, {3, 0, 3}}, {
                    5.5, {3, 0, 2}}, {-0.5, {3, 0, 6}}}, {0, 3, 10, 0, 
                    0}, {{10, 0, 1}, {13, 1, 0, 1}, {41, 263, 3, 0, 1, 3, 0, 
                    3, 3, 0, 4}, {40, 58, 3, 0, 4, 3, 0, 5}, {16, 2, 5, 4}, {
                    41, 263, 3, 0, 1, 3, 0, 7, 3, 0, 5}, {40, 58, 3, 0, 5, 3, 
                    0, 8}, {10, 2, 5}, {16, 5, 0, 5}, {10, 1, 9}, {13, 9, 5, 
                    9}, {16, 6, 8, 9, 5}, {13, 4, 5, 4}, {1}}, 
                    Function[{Global`x}, 
                    
                    Block[{Compile`$111}, Compile`$111 = 1 + Global`x; 
                    11/(2 Compile`$111^(9/11)) - (11 + 9 Global`x)/(2 
                    Compile`$111^(20/11))]], Evaluate][Global`x]^2), {
                    Global`x, CalculateScan`PlotterScanner`Private`xL$, 
                    CalculateScan`PlotterScanner`Private`xU$}, 
                    PlotRange -> {
                    CalculateScan`PlotterScanner`Private`pRX$, 
                    CalculateScan`PlotterScanner`Private`pRY$}, Evaluated -> 
                    False]], {CalculateScan`PlotterScanner`Private`px, 
                    CalculateScan`PlotterScanner`Private`xL$, 
                    CalculateScan`PlotterScanner`Private`xU$, (
                    CalculateScan`PlotterScanner`Private`xU$ - 
                    CalculateScan`PlotterScanner`Private`xL$)/
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurveCount$}, {CalculateScan`PlotterScanner`Private`py, 
                    CalculateScan`PlotterScanner`Private`yL$, 
                    CalculateScan`PlotterScanner`Private`yU$, (
                    CalculateScan`PlotterScanner`Private`yU$ - 
                    CalculateScan`PlotterScanner`Private`yL$)/
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurveCount$}], 
                    Table[
                    
                    With[{CalculateScan`PlotterScanner`Private`px$ = 
                    CalculateScan`PlotterScanner`Private`px, 
                    CalculateScan`PlotterScanner`Private`py$ = 
                    CompiledFunction[{8, 8., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    4}}, {{11, {2, 0, 1}}, {0.6111111111111112, {3, 0, 1}}, {
                    9, {2, 0, 2}}, {1, {2, 0, 0}}, {
                    0.8181818181818182, {3, 0, 3}}}, {0, 3, 6, 0, 
                    0}, {{10, 0, 2}, {13, 2, 0, 2}, {41, 263, 3, 0, 2, 3, 0, 
                    3, 3, 0, 4}, {40, 58, 3, 0, 4, 3, 0, 2}, {10, 2, 4}, {16, 
                    4, 0, 4}, {10, 1, 5}, {13, 5, 4, 5}, {16, 1, 2, 5, 4}, {
                    1}}, 
                    
                    Function[{Global`x}, (11 (11 + 9 Global`x))/(
                    18 (1 + Global`x)^(9/11))], Evaluate][
                    CalculateScan`PlotterScanner`Private`px]}, 
                    ParametricPlot[{Global`x, 
                    CompiledFunction[{8, 8., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    4}}, {{11, {2, 0, 1}}, {0.6111111111111112, {3, 0, 1}}, {
                    9, {2, 0, 2}}, {1, {2, 0, 0}}, {
                    0.8181818181818182, {3, 0, 3}}}, {0, 3, 6, 0, 
                    0}, {{10, 0, 2}, {13, 2, 0, 2}, {41, 263, 3, 0, 2, 3, 0, 
                    3, 3, 0, 4}, {40, 58, 3, 0, 4, 3, 0, 2}, {10, 2, 4}, {16, 
                    4, 0, 4}, {10, 1, 5}, {13, 5, 4, 5}, {16, 1, 2, 5, 4}, {
                    1}}, 
                    
                    Function[{Global`x}, (11 (11 + 9 Global`x))/(
                    18 (1 + Global`x)^(9/11))], Evaluate][
                    Global`x]} + ((1 (
                    CalculateScan`PlotterScanner`Private`py$ - 
                    CompiledFunction[{8, 8., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    4}}, {{11, {2, 0, 1}}, {0.6111111111111112, {3, 0, 1}}, {
                    9, {2, 0, 2}}, {1, {2, 0, 0}}, {
                    0.8181818181818182, {3, 0, 3}}}, {0, 3, 6, 0, 
                    0}, {{10, 0, 2}, {13, 2, 0, 2}, {41, 263, 3, 0, 2, 3, 0, 
                    3, 3, 0, 4}, {40, 58, 3, 0, 4, 3, 0, 2}, {10, 2, 4}, {16, 
                    4, 0, 4}, {10, 1, 5}, {13, 5, 4, 5}, {16, 1, 2, 5, 4}, {
                    1}}, 
                    
                    Function[{Global`x}, (11 (11 + 9 Global`x))/(
                    18 (1 + Global`x)^(9/11))], Evaluate][Global`x]) + 
                    CompiledFunction[{8, 8., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    4}}, {{11, {2, 0, 1}}, {9, {2, 0, 2}}, {1, {2, 0, 0}}, {
                    1.8181818181818181`, {3, 0, 7}}, {
                    0.8181818181818182, {3, 0, 3}}, {
                    5.5, {3, 0, 2}}, {-0.5, {3, 0, 6}}}, {0, 3, 10, 0, 
                    0}, {{10, 0, 1}, {13, 1, 0, 1}, {41, 263, 3, 0, 1, 3, 0, 
                    3, 3, 0, 4}, {40, 58, 3, 0, 4, 3, 0, 5}, {16, 2, 5, 4}, {
                    41, 263, 3, 0, 1, 3, 0, 7, 3, 0, 5}, {40, 58, 3, 0, 5, 3, 
                    0, 8}, {10, 2, 5}, {16, 5, 0, 5}, {10, 1, 9}, {13, 9, 5, 
                    9}, {16, 6, 8, 9, 5}, {13, 4, 5, 4}, {1}}, 
                    Function[{Global`x}, 
                    
                    Block[{Compile`$111}, Compile`$111 = 1 + Global`x; 
                    11/(2 Compile`$111^(9/11)) - (11 + 9 Global`x)/(2 
                    Compile`$111^(20/11))]], Evaluate][
                    Global`x] (-CalculateScan`PlotterScanner`Private`px$ + 
                    Global`x)) {-CompiledFunction[{8, 8., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    4}}, {{11, {2, 0, 1}}, {0.6111111111111112, {3, 0, 1}}, {
                    9, {2, 0, 2}}, {1, {2, 0, 0}}, {
                    0.8181818181818182, {3, 0, 3}}}, {0, 3, 6, 0, 
                    0}, {{10, 0, 2}, {13, 2, 0, 2}, {41, 263, 3, 0, 2, 3, 0, 
                    3, 3, 0, 4}, {40, 58, 3, 0, 4, 3, 0, 2}, {10, 2, 4}, {16, 
                    4, 0, 4}, {10, 1, 5}, {13, 5, 4, 5}, {16, 1, 2, 5, 4}, {
                    1}}, 
                    
                    Function[{Global`x}, (11 (11 + 9 Global`x))/(
                    18 (1 + Global`x)^(9/11))], Evaluate][Global`x], 1})/(1 + 
                    CompiledFunction[{8, 8., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    4}}, {{11, {2, 0, 1}}, {9, {2, 0, 2}}, {1, {2, 0, 0}}, {
                    1.8181818181818181`, {3, 0, 7}}, {
                    0.8181818181818182, {3, 0, 3}}, {
                    5.5, {3, 0, 2}}, {-0.5, {3, 0, 6}}}, {0, 3, 10, 0, 
                    0}, {{10, 0, 1}, {13, 1, 0, 1}, {41, 263, 3, 0, 1, 3, 0, 
                    3, 3, 0, 4}, {40, 58, 3, 0, 4, 3, 0, 5}, {16, 2, 5, 4}, {
                    41, 263, 3, 0, 1, 3, 0, 7, 3, 0, 5}, {40, 58, 3, 0, 5, 3, 
                    0, 8}, {10, 2, 5}, {16, 5, 0, 5}, {10, 1, 9}, {13, 9, 5, 
                    9}, {16, 6, 8, 9, 5}, {13, 4, 5, 4}, {1}}, 
                    Function[{Global`x}, 
                    
                    Block[{Compile`$111}, Compile`$111 = 1 + Global`x; 
                    11/(2 Compile`$111^(9/11)) - (11 + 9 Global`x)/(2 
                    Compile`$111^(20/11))]], Evaluate][Global`x]^2), {
                    Global`x, CalculateScan`PlotterScanner`Private`xL$, 
                    CalculateScan`PlotterScanner`Private`xU$}, 
                    PlotRange -> {
                    CalculateScan`PlotterScanner`Private`pRX$, 
                    CalculateScan`PlotterScanner`Private`pRY$}, Evaluated -> 
                    False]], {CalculateScan`PlotterScanner`Private`px, 
                    CalculateScan`PlotterScanner`Private`xL$, 
                    CalculateScan`PlotterScanner`Private`xU$, (
                    CalculateScan`PlotterScanner`Private`xU$ - 
                    CalculateScan`PlotterScanner`Private`xL$)/
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurveCount$}]]]], {}]; 
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurveLastParamaters$$ = {{
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$}, 
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurveCountFactor$$, 
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurvePoints$$}]; 
                    CalculateScan`PlotterScanner`Private`contraPedalCurvePlot = 
                    Graphics[{
                    Directive[
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurveColor$$, 
                    Opacity[
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurveOpacity$$], 
                    Thickness[
                    10^CalculateScan`PlotterScanner`Private`\
contraPedalCurveThickness$$]], 
                    If[
                    CalculateScan`PlotterScanner`Private`contraPedalCurveTF$$,
                     CalculateScan`PlotterScanner`Private`\
contraPedalCurvePlotCurves$$, {}]}]; If[
                    And[
                    CalculateScan`PlotterScanner`Private`dualCurveTF$$, 
                    CalculateScan`PlotterScanner`Private`\
dualCurveLastParamaters$$ =!= {{
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$}, 
                    CalculateScan`PlotterScanner`Private`dualCurveCountFactor$\
$, CalculateScan`PlotterScanner`Private`dualCurvePoints}], 
                    If[CalculateScan`PlotterScanner`Private`dualCurveTF$$, 
                    CalculateScan`PlotterScanner`Private`dualCurvePlotCurves$$\
 = With[{CalculateScan`PlotterScanner`Private`dualCurveCount$ = 
                    If[CalculateScan`PlotterScanner`Private`dualCurvePoints === 
                    "grid", 
                    Max[1, 
                    Round[
                    16 CalculateScan`PlotterScanner`Private`\
dualCurveCountFactor$$]], 
                    Max[1, 
                    Round[
                    120 CalculateScan`PlotterScanner`Private`\
dualCurveCountFactor$$]]]}, 
                    (Cases[
                    Normal[#], 
                    Blank[Line], {0, Infinity}]& )[
                    If[
                    CalculateScan`PlotterScanner`Private`dualCurvePoints === 
                    "grid", 
                    Table[
                    
                    With[{CalculateScan`PlotterScanner`Private`px$ = 
                    CalculateScan`PlotterScanner`Private`px, 
                    CalculateScan`PlotterScanner`Private`py$ = 
                    CalculateScan`PlotterScanner`Private`py}, 
                    ParametricPlot[{-CompiledFunction[{8, 8., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    4}}, {{11, {2, 0, 1}}, {9, {2, 0, 2}}, {1, {2, 0, 0}}, {
                    1.8181818181818181`, {3, 0, 7}}, {
                    0.8181818181818182, {3, 0, 3}}, {
                    5.5, {3, 0, 2}}, {-0.5, {3, 0, 6}}}, {0, 3, 10, 0, 
                    0}, {{10, 0, 1}, {13, 1, 0, 1}, {41, 263, 3, 0, 1, 3, 0, 
                    3, 3, 0, 4}, {40, 58, 3, 0, 4, 3, 0, 5}, {16, 2, 5, 4}, {
                    41, 263, 3, 0, 1, 3, 0, 7, 3, 0, 5}, {40, 58, 3, 0, 5, 3, 
                    0, 8}, {10, 2, 5}, {16, 5, 0, 5}, {10, 1, 9}, {13, 9, 5, 
                    9}, {16, 6, 8, 9, 5}, {13, 4, 5, 4}, {1}}, 
                    Function[{Global`x}, 
                    
                    Block[{Compile`$111}, Compile`$111 = 1 + Global`x; 
                    11/(2 Compile`$111^(9/11)) - (11 + 9 Global`x)/(2 
                    Compile`$111^(20/11))]], Evaluate][Global`x], 1}/((
                    Global`x + CalculateScan`PlotterScanner`Private`px$) 
                    CompiledFunction[{8, 8., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    4}}, {{11, {2, 0, 1}}, {9, {2, 0, 2}}, {1, {2, 0, 0}}, {
                    1.8181818181818181`, {3, 0, 7}}, {
                    0.8181818181818182, {3, 0, 3}}, {
                    5.5, {3, 0, 2}}, {-0.5, {3, 0, 6}}}, {0, 3, 10, 0, 
                    0}, {{10, 0, 1}, {13, 1, 0, 1}, {41, 263, 3, 0, 1, 3, 0, 
                    3, 3, 0, 4}, {40, 58, 3, 0, 4, 3, 0, 5}, {16, 2, 5, 4}, {
                    41, 263, 3, 0, 1, 3, 0, 7, 3, 0, 5}, {40, 58, 3, 0, 5, 3, 
                    0, 8}, {10, 2, 5}, {16, 5, 0, 5}, {10, 1, 9}, {13, 9, 5, 
                    9}, {16, 6, 8, 9, 5}, {13, 4, 5, 4}, {1}}, 
                    Function[{Global`x}, 
                    
                    Block[{Compile`$111}, Compile`$111 = 1 + Global`x; 
                    11/(2 Compile`$111^(9/11)) - (11 + 9 Global`x)/(2 
                    Compile`$111^(20/11))]], Evaluate][Global`x] - 
                    1 (CompiledFunction[{8, 8., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    4}}, {{11, {2, 0, 1}}, {0.6111111111111112, {3, 0, 1}}, {
                    9, {2, 0, 2}}, {1, {2, 0, 0}}, {
                    0.8181818181818182, {3, 0, 3}}}, {0, 3, 6, 0, 
                    0}, {{10, 0, 2}, {13, 2, 0, 2}, {41, 263, 3, 0, 2, 3, 0, 
                    3, 3, 0, 4}, {40, 58, 3, 0, 4, 3, 0, 2}, {10, 2, 4}, {16, 
                    4, 0, 4}, {10, 1, 5}, {13, 5, 4, 5}, {16, 1, 2, 5, 4}, {
                    1}}, 
                    
                    Function[{Global`x}, (11 (11 + 9 Global`x))/(
                    18 (1 + Global`x)^(9/11))], Evaluate][Global`x] + 
                    CalculateScan`PlotterScanner`Private`py$)), {
                    Global`x, Min[CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$] - 
                    CalculateScan`PlotterScanner`Private`\[CapitalDelta]X$/2, 
                    Max[CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$] + 
                    CalculateScan`PlotterScanner`Private`\[CapitalDelta]X$/2},
                     PlotStyle -> Directive[
                    Opacity[
                    CalculateScan`PlotterScanner`Private`dualCurveOpacity$$], 
                    CalculateScan`PlotterScanner`Private`dualCurveColor$$, 
                    Thickness[
                    10^CalculateScan`PlotterScanner`Private`\
dualCurveThickness$$]], PlotRange -> 
                    CalculateScan`PlotterScanner`Private`pRY$, Evaluated -> 
                    False, Exclusions -> {(Global`x + 
                    CalculateScan`PlotterScanner`Private`px$) 
                    CompiledFunction[{8, 8., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    4}}, {{11, {2, 0, 1}}, {9, {2, 0, 2}}, {1, {2, 0, 0}}, {
                    1.8181818181818181`, {3, 0, 7}}, {
                    0.8181818181818182, {3, 0, 3}}, {
                    5.5, {3, 0, 2}}, {-0.5, {3, 0, 6}}}, {0, 3, 10, 0, 
                    0}, {{10, 0, 1}, {13, 1, 0, 1}, {41, 263, 3, 0, 1, 3, 0, 
                    3, 3, 0, 4}, {40, 58, 3, 0, 4, 3, 0, 5}, {16, 2, 5, 4}, {
                    41, 263, 3, 0, 1, 3, 0, 7, 3, 0, 5}, {40, 58, 3, 0, 5, 3, 
                    0, 8}, {10, 2, 5}, {16, 5, 0, 5}, {10, 1, 9}, {13, 9, 5, 
                    9}, {16, 6, 8, 9, 5}, {13, 4, 5, 4}, {1}}, 
                    Function[{Global`x}, 
                    
                    Block[{Compile`$111}, Compile`$111 = 1 + Global`x; 
                    11/(2 Compile`$111^(9/11)) - (11 + 9 Global`x)/(2 
                    Compile`$111^(20/11))]], Evaluate][Global`x] - 
                    1 (CompiledFunction[{8, 8., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    4}}, {{11, {2, 0, 1}}, {0.6111111111111112, {3, 0, 1}}, {
                    9, {2, 0, 2}}, {1, {2, 0, 0}}, {
                    0.8181818181818182, {3, 0, 3}}}, {0, 3, 6, 0, 
                    0}, {{10, 0, 2}, {13, 2, 0, 2}, {41, 263, 3, 0, 2, 3, 0, 
                    3, 3, 0, 4}, {40, 58, 3, 0, 4, 3, 0, 2}, {10, 2, 4}, {16, 
                    4, 0, 4}, {10, 1, 5}, {13, 5, 4, 5}, {16, 1, 2, 5, 4}, {
                    1}}, 
                    
                    Function[{Global`x}, (11 (11 + 9 Global`x))/(
                    18 (1 + Global`x)^(9/11))], Evaluate][Global`x] + 
                    CalculateScan`PlotterScanner`Private`py$) == 0}]], {
                    CalculateScan`PlotterScanner`Private`px, 
                    CalculateScan`PlotterScanner`Private`xL$, 
                    CalculateScan`PlotterScanner`Private`xU$, (
                    CalculateScan`PlotterScanner`Private`xU$ - 
                    CalculateScan`PlotterScanner`Private`xL$)/
                    CalculateScan`PlotterScanner`Private`dualCurveCount$}, {
                    CalculateScan`PlotterScanner`Private`py, 
                    CalculateScan`PlotterScanner`Private`yL$, 
                    CalculateScan`PlotterScanner`Private`yU$, (
                    CalculateScan`PlotterScanner`Private`yU$ - 
                    CalculateScan`PlotterScanner`Private`yL$)/
                    CalculateScan`PlotterScanner`Private`dualCurveCount$}], 
                    Table[
                    
                    With[{CalculateScan`PlotterScanner`Private`px$ = 
                    CalculateScan`PlotterScanner`Private`px, 
                    CalculateScan`PlotterScanner`Private`py$ = 
                    CompiledFunction[{8, 8., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    4}}, {{11, {2, 0, 1}}, {0.6111111111111112, {3, 0, 1}}, {
                    9, {2, 0, 2}}, {1, {2, 0, 0}}, {
                    0.8181818181818182, {3, 0, 3}}}, {0, 3, 6, 0, 
                    0}, {{10, 0, 2}, {13, 2, 0, 2}, {41, 263, 3, 0, 2, 3, 0, 
                    3, 3, 0, 4}, {40, 58, 3, 0, 4, 3, 0, 2}, {10, 2, 4}, {16, 
                    4, 0, 4}, {10, 1, 5}, {13, 5, 4, 5}, {16, 1, 2, 5, 4}, {
                    1}}, 
                    
                    Function[{Global`x}, (11 (11 + 9 Global`x))/(
                    18 (1 + Global`x)^(9/11))], Evaluate][
                    CalculateScan`PlotterScanner`Private`px]}, 
                    ParametricPlot[{-CompiledFunction[{8, 8., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    4}}, {{11, {2, 0, 1}}, {9, {2, 0, 2}}, {1, {2, 0, 0}}, {
                    1.8181818181818181`, {3, 0, 7}}, {
                    0.8181818181818182, {3, 0, 3}}, {
                    5.5, {3, 0, 2}}, {-0.5, {3, 0, 6}}}, {0, 3, 10, 0, 
                    0}, {{10, 0, 1}, {13, 1, 0, 1}, {41, 263, 3, 0, 1, 3, 0, 
                    3, 3, 0, 4}, {40, 58, 3, 0, 4, 3, 0, 5}, {16, 2, 5, 4}, {
                    41, 263, 3, 0, 1, 3, 0, 7, 3, 0, 5}, {40, 58, 3, 0, 5, 3, 
                    0, 8}, {10, 2, 5}, {16, 5, 0, 5}, {10, 1, 9}, {13, 9, 5, 
                    9}, {16, 6, 8, 9, 5}, {13, 4, 5, 4}, {1}}, 
                    Function[{Global`x}, 
                    
                    Block[{Compile`$111}, Compile`$111 = 1 + Global`x; 
                    11/(2 Compile`$111^(9/11)) - (11 + 9 Global`x)/(2 
                    Compile`$111^(20/11))]], Evaluate][Global`x], 1}/((
                    Global`x + CalculateScan`PlotterScanner`Private`px$) 
                    CompiledFunction[{8, 8., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    4}}, {{11, {2, 0, 1}}, {9, {2, 0, 2}}, {1, {2, 0, 0}}, {
                    1.8181818181818181`, {3, 0, 7}}, {
                    0.8181818181818182, {3, 0, 3}}, {
                    5.5, {3, 0, 2}}, {-0.5, {3, 0, 6}}}, {0, 3, 10, 0, 
                    0}, {{10, 0, 1}, {13, 1, 0, 1}, {41, 263, 3, 0, 1, 3, 0, 
                    3, 3, 0, 4}, {40, 58, 3, 0, 4, 3, 0, 5}, {16, 2, 5, 4}, {
                    41, 263, 3, 0, 1, 3, 0, 7, 3, 0, 5}, {40, 58, 3, 0, 5, 3, 
                    0, 8}, {10, 2, 5}, {16, 5, 0, 5}, {10, 1, 9}, {13, 9, 5, 
                    9}, {16, 6, 8, 9, 5}, {13, 4, 5, 4}, {1}}, 
                    Function[{Global`x}, 
                    
                    Block[{Compile`$111}, Compile`$111 = 1 + Global`x; 
                    11/(2 Compile`$111^(9/11)) - (11 + 9 Global`x)/(2 
                    Compile`$111^(20/11))]], Evaluate][Global`x] - 
                    1 (CompiledFunction[{8, 8., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    4}}, {{11, {2, 0, 1}}, {0.6111111111111112, {3, 0, 1}}, {
                    9, {2, 0, 2}}, {1, {2, 0, 0}}, {
                    0.8181818181818182, {3, 0, 3}}}, {0, 3, 6, 0, 
                    0}, {{10, 0, 2}, {13, 2, 0, 2}, {41, 263, 3, 0, 2, 3, 0, 
                    3, 3, 0, 4}, {40, 58, 3, 0, 4, 3, 0, 2}, {10, 2, 4}, {16, 
                    4, 0, 4}, {10, 1, 5}, {13, 5, 4, 5}, {16, 1, 2, 5, 4}, {
                    1}}, 
                    
                    Function[{Global`x}, (11 (11 + 9 Global`x))/(
                    18 (1 + Global`x)^(9/11))], Evaluate][Global`x] + 
                    CalculateScan`PlotterScanner`Private`py$)), {
                    Global`x, Min[CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$] - 
                    CalculateScan`PlotterScanner`Private`\[CapitalDelta]X$/2, 
                    Max[CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$] + 
                    CalculateScan`PlotterScanner`Private`\[CapitalDelta]X$/2},
                     PlotStyle -> Directive[
                    Opacity[
                    CalculateScan`PlotterScanner`Private`dualCurveOpacity$$], 
                    CalculateScan`PlotterScanner`Private`dualCurveColor$$, 
                    Thickness[
                    10^CalculateScan`PlotterScanner`Private`\
dualCurveThickness$$]], PlotRange -> 
                    CalculateScan`PlotterScanner`Private`pRY$, Evaluated -> 
                    False, Exclusions -> {(Global`x + 
                    CalculateScan`PlotterScanner`Private`px$) 
                    CompiledFunction[{8, 8., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    4}}, {{11, {2, 0, 1}}, {9, {2, 0, 2}}, {1, {2, 0, 0}}, {
                    1.8181818181818181`, {3, 0, 7}}, {
                    0.8181818181818182, {3, 0, 3}}, {
                    5.5, {3, 0, 2}}, {-0.5, {3, 0, 6}}}, {0, 3, 10, 0, 
                    0}, {{10, 0, 1}, {13, 1, 0, 1}, {41, 263, 3, 0, 1, 3, 0, 
                    3, 3, 0, 4}, {40, 58, 3, 0, 4, 3, 0, 5}, {16, 2, 5, 4}, {
                    41, 263, 3, 0, 1, 3, 0, 7, 3, 0, 5}, {40, 58, 3, 0, 5, 3, 
                    0, 8}, {10, 2, 5}, {16, 5, 0, 5}, {10, 1, 9}, {13, 9, 5, 
                    9}, {16, 6, 8, 9, 5}, {13, 4, 5, 4}, {1}}, 
                    Function[{Global`x}, 
                    
                    Block[{Compile`$111}, Compile`$111 = 1 + Global`x; 
                    11/(2 Compile`$111^(9/11)) - (11 + 9 Global`x)/(2 
                    Compile`$111^(20/11))]], Evaluate][Global`x] - 
                    1 (CompiledFunction[{8, 8., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    4}}, {{11, {2, 0, 1}}, {0.6111111111111112, {3, 0, 1}}, {
                    9, {2, 0, 2}}, {1, {2, 0, 0}}, {
                    0.8181818181818182, {3, 0, 3}}}, {0, 3, 6, 0, 
                    0}, {{10, 0, 2}, {13, 2, 0, 2}, {41, 263, 3, 0, 2, 3, 0, 
                    3, 3, 0, 4}, {40, 58, 3, 0, 4, 3, 0, 2}, {10, 2, 4}, {16, 
                    4, 0, 4}, {10, 1, 5}, {13, 5, 4, 5}, {16, 1, 2, 5, 4}, {
                    1}}, 
                    
                    Function[{Global`x}, (11 (11 + 9 Global`x))/(
                    18 (1 + Global`x)^(9/11))], Evaluate][Global`x] + 
                    CalculateScan`PlotterScanner`Private`py$) == 0}]], {
                    CalculateScan`PlotterScanner`Private`px, 
                    CalculateScan`PlotterScanner`Private`xL$, 
                    CalculateScan`PlotterScanner`Private`xU$, (
                    CalculateScan`PlotterScanner`Private`xU$ - 
                    CalculateScan`PlotterScanner`Private`xL$)/
                    CalculateScan`PlotterScanner`Private`dualCurveCount$}]]]],\
 {}]; CalculateScan`PlotterScanner`Private`dualCurveLastParamaters$$ = {{
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$}, 
                    CalculateScan`PlotterScanner`Private`dualCurveCountFactor$\
$, CalculateScan`PlotterScanner`Private`dualCurvePoints}]; 
                    CalculateScan`PlotterScanner`Private`dualCurvePlot = 
                    Graphics[{
                    Directive[
                    Opacity[
                    CalculateScan`PlotterScanner`Private`dualCurveOpacity$$], 
                    CalculateScan`PlotterScanner`Private`dualCurveColor$$, 
                    Thickness[
                    10^CalculateScan`PlotterScanner`Private`\
dualCurveThickness$$]], 
                    If[
                    CalculateScan`PlotterScanner`Private`dualCurveTF$$, 
                    CalculateScan`PlotterScanner`Private`dualCurvePlotCurves$$\
, {}]}]; If[
                    And[
                    CalculateScan`PlotterScanner`Private`inverseCurveTF$$, 
                    CalculateScan`PlotterScanner`Private`\
inverseLastParamaters$$ =!= {{
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$}, 
                    CalculateScan`PlotterScanner`Private`\
inverseCurveCountFactor$$, 
                    CalculateScan`PlotterScanner`Private`inverseCurvePoints$$,
                     CalculateScan`PlotterScanner`Private`\
inverseCurveCountFactor$$, 
                    CalculateScan`PlotterScanner`Private`\
inverseCurveCircleRadiusFactor$$}], 
                    If[CalculateScan`PlotterScanner`Private`inverseCurveTF$$, 
                    CalculateScan`PlotterScanner`Private`\
inverseCurvePlotCurves$$ = (Cases[
                    Normal[#], 
                    Blank[Line], {0, Infinity}]& )[
                    
                    With[{CalculateScan`PlotterScanner`Private`\
inverseCurveCount$ = 
                    If[CalculateScan`PlotterScanner`Private`\
inverseCurvePoints$$ === "grid", 
                    Max[1, 
                    Round[
                    16 CalculateScan`PlotterScanner`Private`\
inverseCurveCountFactor$$]], 
                    Max[1, 
                    Round[
                    120 CalculateScan`PlotterScanner`Private`\
inverseCurveCountFactor$$]]], CalculateScan`PlotterScanner`Private`R$ = 
                    Function[{CalculateScan`PlotterScanner`Private`y, 
                    CalculateScan`PlotterScanner`Private`L}, 
                    Sign[CalculateScan`PlotterScanner`Private`y] 
                    CalculateScan`PlotterScanner`Private`L Tan[
                    Abs[CalculateScan`PlotterScanner`Private`y]]^1][
                    CalculateScan`PlotterScanner`Private`\
inverseCurveCircleRadiusFactor$$, 1] 
                    Abs[CalculateScan`PlotterScanner`Private`X2$ - 
                    CalculateScan`PlotterScanner`Private`X1$]}, 
                    If[
                    CalculateScan`PlotterScanner`Private`inverseCurvePoints$$ === 
                    "grid", 
                    Table[
                    
                    With[{CalculateScan`PlotterScanner`Private`px$ = 
                    CalculateScan`PlotterScanner`Private`px, 
                    CalculateScan`PlotterScanner`Private`py$ = 
                    CalculateScan`PlotterScanner`Private`py}, 
                    
                    ParametricPlot[{
                    CalculateScan`PlotterScanner`Private`px$, 
                    CalculateScan`PlotterScanner`Private`py$} + (
                    CalculateScan`PlotterScanner`Private`R$^2 {
                    Global`x - CalculateScan`PlotterScanner`Private`px$, 
                    CompiledFunction[{8, 8., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    4}}, {{11, {2, 0, 1}}, {0.6111111111111112, {3, 0, 1}}, {
                    9, {2, 0, 2}}, {1, {2, 0, 0}}, {
                    0.8181818181818182, {3, 0, 3}}}, {0, 3, 6, 0, 
                    0}, {{10, 0, 2}, {13, 2, 0, 2}, {41, 263, 3, 0, 2, 3, 0, 
                    3, 3, 0, 4}, {40, 58, 3, 0, 4, 3, 0, 2}, {10, 2, 4}, {16, 
                    4, 0, 4}, {10, 1, 5}, {13, 5, 4, 5}, {16, 1, 2, 5, 4}, {
                    1}}, 
                    
                    Function[{Global`x}, (11 (11 + 9 Global`x))/(
                    18 (1 + Global`x)^(9/11))], Evaluate][Global`x] - 
                    CalculateScan`PlotterScanner`Private`py$})/((Global`x - 
                    CalculateScan`PlotterScanner`Private`px$)^2 + (
                    CompiledFunction[{8, 8., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    4}}, {{11, {2, 0, 1}}, {0.6111111111111112, {3, 0, 1}}, {
                    9, {2, 0, 2}}, {1, {2, 0, 0}}, {
                    0.8181818181818182, {3, 0, 3}}}, {0, 3, 6, 0, 
                    0}, {{10, 0, 2}, {13, 2, 0, 2}, {41, 263, 3, 0, 2, 3, 0, 
                    3, 3, 0, 4}, {40, 58, 3, 0, 4, 3, 0, 2}, {10, 2, 4}, {16, 
                    4, 0, 4}, {10, 1, 5}, {13, 5, 4, 5}, {16, 1, 2, 5, 4}, {
                    1}}, 
                    
                    Function[{Global`x}, (11 (11 + 9 Global`x))/(
                    18 (1 + Global`x)^(9/11))], Evaluate][Global`x] - 
                    CalculateScan`PlotterScanner`Private`py$)^2), {
                    Global`x, Min[CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$] - 
                    CalculateScan`PlotterScanner`Private`\[CapitalDelta]X$/2, 
                    Max[CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$] + 
                    CalculateScan`PlotterScanner`Private`\[CapitalDelta]X$/2},
                     PlotRange -> CalculateScan`PlotterScanner`Private`pRY$, 
                    Evaluated -> False]], {
                    CalculateScan`PlotterScanner`Private`px, 
                    CalculateScan`PlotterScanner`Private`xL$, 
                    CalculateScan`PlotterScanner`Private`xU$, (
                    CalculateScan`PlotterScanner`Private`xU$ - 
                    CalculateScan`PlotterScanner`Private`xL$)/
                    CalculateScan`PlotterScanner`Private`inverseCurveCount$}, \
{CalculateScan`PlotterScanner`Private`py, 
                    CalculateScan`PlotterScanner`Private`yL$, 
                    CalculateScan`PlotterScanner`Private`yU$, (
                    CalculateScan`PlotterScanner`Private`yU$ - 
                    CalculateScan`PlotterScanner`Private`yL$)/
                    CalculateScan`PlotterScanner`Private`inverseCurveCount$}], 
                    Table[
                    
                    With[{CalculateScan`PlotterScanner`Private`px$ = 
                    CalculateScan`PlotterScanner`Private`px, 
                    CalculateScan`PlotterScanner`Private`py$ = 
                    CompiledFunction[{8, 8., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    4}}, {{11, {2, 0, 1}}, {0.6111111111111112, {3, 0, 1}}, {
                    9, {2, 0, 2}}, {1, {2, 0, 0}}, {
                    0.8181818181818182, {3, 0, 3}}}, {0, 3, 6, 0, 
                    0}, {{10, 0, 2}, {13, 2, 0, 2}, {41, 263, 3, 0, 2, 3, 0, 
                    3, 3, 0, 4}, {40, 58, 3, 0, 4, 3, 0, 2}, {10, 2, 4}, {16, 
                    4, 0, 4}, {10, 1, 5}, {13, 5, 4, 5}, {16, 1, 2, 5, 4}, {
                    1}}, 
                    
                    Function[{Global`x}, (11 (11 + 9 Global`x))/(
                    18 (1 + Global`x)^(9/11))], Evaluate][
                    CalculateScan`PlotterScanner`Private`px]}, 
                    
                    ParametricPlot[{
                    CalculateScan`PlotterScanner`Private`px$, 
                    CalculateScan`PlotterScanner`Private`py$} + (
                    CalculateScan`PlotterScanner`Private`R$^2 {
                    Global`x - CalculateScan`PlotterScanner`Private`px$, 
                    CompiledFunction[{8, 8., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    4}}, {{11, {2, 0, 1}}, {0.6111111111111112, {3, 0, 1}}, {
                    9, {2, 0, 2}}, {1, {2, 0, 0}}, {
                    0.8181818181818182, {3, 0, 3}}}, {0, 3, 6, 0, 
                    0}, {{10, 0, 2}, {13, 2, 0, 2}, {41, 263, 3, 0, 2, 3, 0, 
                    3, 3, 0, 4}, {40, 58, 3, 0, 4, 3, 0, 2}, {10, 2, 4}, {16, 
                    4, 0, 4}, {10, 1, 5}, {13, 5, 4, 5}, {16, 1, 2, 5, 4}, {
                    1}}, 
                    
                    Function[{Global`x}, (11 (11 + 9 Global`x))/(
                    18 (1 + Global`x)^(9/11))], Evaluate][Global`x] - 
                    CalculateScan`PlotterScanner`Private`py$})/((Global`x - 
                    CalculateScan`PlotterScanner`Private`px$)^2 + (
                    CompiledFunction[{8, 8., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    4}}, {{11, {2, 0, 1}}, {0.6111111111111112, {3, 0, 1}}, {
                    9, {2, 0, 2}}, {1, {2, 0, 0}}, {
                    0.8181818181818182, {3, 0, 3}}}, {0, 3, 6, 0, 
                    0}, {{10, 0, 2}, {13, 2, 0, 2}, {41, 263, 3, 0, 2, 3, 0, 
                    3, 3, 0, 4}, {40, 58, 3, 0, 4, 3, 0, 2}, {10, 2, 4}, {16, 
                    4, 0, 4}, {10, 1, 5}, {13, 5, 4, 5}, {16, 1, 2, 5, 4}, {
                    1}}, 
                    
                    Function[{Global`x}, (11 (11 + 9 Global`x))/(
                    18 (1 + Global`x)^(9/11))], Evaluate][Global`x] - 
                    CalculateScan`PlotterScanner`Private`py$)^2), {
                    Global`x, Min[CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$] - 
                    CalculateScan`PlotterScanner`Private`\[CapitalDelta]X$/2, 
                    Max[CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$] + 
                    CalculateScan`PlotterScanner`Private`\[CapitalDelta]X$/2},
                     PlotRange -> CalculateScan`PlotterScanner`Private`pRY$, 
                    Evaluated -> False]], {
                    CalculateScan`PlotterScanner`Private`px, 
                    CalculateScan`PlotterScanner`Private`xL$, 
                    CalculateScan`PlotterScanner`Private`xU$, (
                    CalculateScan`PlotterScanner`Private`xU$ - 
                    CalculateScan`PlotterScanner`Private`xL$)/
                    CalculateScan`PlotterScanner`Private`inverseCurveCount$}]]\
]], {}]; CalculateScan`PlotterScanner`Private`inverseLastParamaters$$ = {{
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$}, 
                    CalculateScan`PlotterScanner`Private`\
inverseCurveCountFactor$$, 
                    CalculateScan`PlotterScanner`Private`inverseCurvePoints$$,
                     CalculateScan`PlotterScanner`Private`\
inverseCurveCountFactor$$, 
                    CalculateScan`PlotterScanner`Private`\
inverseCurveCircleRadiusFactor$$}]; 
                    CalculateScan`PlotterScanner`Private`inverseCurvePlot = 
                    Graphics[{
                    Directive[
                    Opacity[
                    CalculateScan`PlotterScanner`Private`inverseCurveOpacity$$\
], CalculateScan`PlotterScanner`Private`inverseCurveColor$$, 
                    Thickness[
                    10^CalculateScan`PlotterScanner`Private`\
inverseCurveThickness$$]], 
                    If[CalculateScan`PlotterScanner`Private`inverseCurveTF$$, 
                    CalculateScan`PlotterScanner`Private`\
inverseCurvePlotCurves$$, {}]}]; If[
                    And[
                    CalculateScan`PlotterScanner`Private`orthotomicCurveTF$$, 
                    CalculateScan`PlotterScanner`Private`\
orthotomicLastParamaters$$ =!= {{
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$}, 
                    CalculateScan`PlotterScanner`Private`\
orthotomicCurveCountFactor$$, 
                    CalculateScan`PlotterScanner`Private`\
orthotomicCurvePoints$$}], 
                    If[CalculateScan`PlotterScanner`Private`orthotomicCurveTF$\
$, CalculateScan`PlotterScanner`Private`orthotomicCurvePlotCurves$$ = (Cases[
                    Normal[#], 
                    Blank[Line], {0, Infinity}]& )[
                    
                    With[{CalculateScan`PlotterScanner`Private`\
orthotomicCurveCount$ = 
                    If[CalculateScan`PlotterScanner`Private`\
orthotomicCurvePoints$$ === "grid", 
                    Max[1, 
                    Round[
                    16 CalculateScan`PlotterScanner`Private`\
orthotomicCurveCountFactor$$]], 
                    Max[1, 
                    Round[
                    120 CalculateScan`PlotterScanner`Private`\
orthotomicCurveCountFactor$$]]]}, 
                    If[
                    CalculateScan`PlotterScanner`Private`\
orthotomicCurvePoints$$ === "grid", 
                    Table[
                    
                    With[{CalculateScan`PlotterScanner`Private`px$ = 
                    CalculateScan`PlotterScanner`Private`px, 
                    CalculateScan`PlotterScanner`Private`py$ = 
                    CalculateScan`PlotterScanner`Private`py}, 
                    ParametricPlot[{Global`x, 
                    CompiledFunction[{8, 8., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    4}}, {{11, {2, 0, 1}}, {0.6111111111111112, {3, 0, 1}}, {
                    9, {2, 0, 2}}, {1, {2, 0, 0}}, {
                    0.8181818181818182, {3, 0, 3}}}, {0, 3, 6, 0, 
                    0}, {{10, 0, 2}, {13, 2, 0, 2}, {41, 263, 3, 0, 2, 3, 0, 
                    3, 3, 0, 4}, {40, 58, 3, 0, 4, 3, 0, 2}, {10, 2, 4}, {16, 
                    4, 0, 4}, {10, 1, 5}, {13, 5, 4, 5}, {16, 1, 2, 5, 4}, {
                    1}}, 
                    
                    Function[{Global`x}, (11 (11 + 9 Global`x))/(
                    18 (1 + Global`x)^(9/11))], Evaluate][
                    Global`x]} + {(-2) CompiledFunction[{8, 8., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    4}}, {{11, {2, 0, 1}}, {9, {2, 0, 2}}, {1, {2, 0, 0}}, {
                    1.8181818181818181`, {3, 0, 7}}, {
                    0.8181818181818182, {3, 0, 3}}, {
                    5.5, {3, 0, 2}}, {-0.5, {3, 0, 6}}}, {0, 3, 10, 0, 
                    0}, {{10, 0, 1}, {13, 1, 0, 1}, {41, 263, 3, 0, 1, 3, 0, 
                    3, 3, 0, 4}, {40, 58, 3, 0, 4, 3, 0, 5}, {16, 2, 5, 4}, {
                    41, 263, 3, 0, 1, 3, 0, 7, 3, 0, 5}, {40, 58, 3, 0, 5, 3, 
                    0, 8}, {10, 2, 5}, {16, 5, 0, 5}, {10, 1, 9}, {13, 9, 5, 
                    9}, {16, 6, 8, 9, 5}, {13, 4, 5, 4}, {1}}, 
                    Function[{Global`x}, 
                    
                    Block[{Compile`$111}, Compile`$111 = 1 + Global`x; 
                    11/(2 Compile`$111^(9/11)) - (11 + 9 Global`x)/(2 
                    Compile`$111^(20/11))]], Evaluate][Global`x] (
                    1 (CompiledFunction[{8, 8., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    4}}, {{11, {2, 0, 1}}, {0.6111111111111112, {3, 0, 1}}, {
                    9, {2, 0, 2}}, {1, {2, 0, 0}}, {
                    0.8181818181818182, {3, 0, 3}}}, {0, 3, 6, 0, 
                    0}, {{10, 0, 2}, {13, 2, 0, 2}, {41, 263, 3, 0, 2, 3, 0, 
                    3, 3, 0, 4}, {40, 58, 3, 0, 4, 3, 0, 2}, {10, 2, 4}, {16, 
                    4, 0, 4}, {10, 1, 5}, {13, 5, 4, 5}, {16, 1, 2, 5, 4}, {
                    1}}, 
                    
                    Function[{Global`x}, (11 (11 + 9 Global`x))/(
                    18 (1 + Global`x)^(9/11))], Evaluate][Global`x] - 
                    CalculateScan`PlotterScanner`Private`py$) - 
                    CompiledFunction[{8, 8., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    4}}, {{11, {2, 0, 1}}, {9, {2, 0, 2}}, {1, {2, 0, 0}}, {
                    1.8181818181818181`, {3, 0, 7}}, {
                    0.8181818181818182, {3, 0, 3}}, {
                    5.5, {3, 0, 2}}, {-0.5, {3, 0, 6}}}, {0, 3, 10, 0, 
                    0}, {{10, 0, 1}, {13, 1, 0, 1}, {41, 263, 3, 0, 1, 3, 0, 
                    3, 3, 0, 4}, {40, 58, 3, 0, 4, 3, 0, 5}, {16, 2, 5, 4}, {
                    41, 263, 3, 0, 1, 3, 0, 7, 3, 0, 5}, {40, 58, 3, 0, 5, 3, 
                    0, 8}, {10, 2, 5}, {16, 5, 0, 5}, {10, 1, 9}, {13, 9, 5, 
                    9}, {16, 6, 8, 9, 5}, {13, 4, 5, 4}, {1}}, 
                    Function[{Global`x}, 
                    
                    Block[{Compile`$111}, Compile`$111 = 1 + Global`x; 
                    11/(2 Compile`$111^(9/11)) - (11 + 9 Global`x)/(2 
                    Compile`$111^(20/11))]], Evaluate][Global`x] (Global`x - 
                    CalculateScan`PlotterScanner`Private`px$)), 2 
                    1 (1 (CompiledFunction[{8, 8., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    4}}, {{11, {2, 0, 1}}, {0.6111111111111112, {3, 0, 1}}, {
                    9, {2, 0, 2}}, {1, {2, 0, 0}}, {
                    0.8181818181818182, {3, 0, 3}}}, {0, 3, 6, 0, 
                    0}, {{10, 0, 2}, {13, 2, 0, 2}, {41, 263, 3, 0, 2, 3, 0, 
                    3, 3, 0, 4}, {40, 58, 3, 0, 4, 3, 0, 2}, {10, 2, 4}, {16, 
                    4, 0, 4}, {10, 1, 5}, {13, 5, 4, 5}, {16, 1, 2, 5, 4}, {
                    1}}, 
                    
                    Function[{Global`x}, (11 (11 + 9 Global`x))/(
                    18 (1 + Global`x)^(9/11))], Evaluate][Global`x] - 
                    CalculateScan`PlotterScanner`Private`py$) - 
                    CompiledFunction[{8, 8., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    4}}, {{11, {2, 0, 1}}, {9, {2, 0, 2}}, {1, {2, 0, 0}}, {
                    1.8181818181818181`, {3, 0, 7}}, {
                    0.8181818181818182, {3, 0, 3}}, {
                    5.5, {3, 0, 2}}, {-0.5, {3, 0, 6}}}, {0, 3, 10, 0, 
                    0}, {{10, 0, 1}, {13, 1, 0, 1}, {41, 263, 3, 0, 1, 3, 0, 
                    3, 3, 0, 4}, {40, 58, 3, 0, 4, 3, 0, 5}, {16, 2, 5, 4}, {
                    41, 263, 3, 0, 1, 3, 0, 7, 3, 0, 5}, {40, 58, 3, 0, 5, 3, 
                    0, 8}, {10, 2, 5}, {16, 5, 0, 5}, {10, 1, 9}, {13, 9, 5, 
                    9}, {16, 6, 8, 9, 5}, {13, 4, 5, 4}, {1}}, 
                    Function[{Global`x}, 
                    
                    Block[{Compile`$111}, Compile`$111 = 1 + Global`x; 
                    11/(2 Compile`$111^(9/11)) - (11 + 9 Global`x)/(2 
                    Compile`$111^(20/11))]], Evaluate][Global`x] (Global`x - 
                    CalculateScan`PlotterScanner`Private`px$))}/(1 + 
                    CompiledFunction[{8, 8., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    4}}, {{11, {2, 0, 1}}, {9, {2, 0, 2}}, {1, {2, 0, 0}}, {
                    1.8181818181818181`, {3, 0, 7}}, {
                    0.8181818181818182, {3, 0, 3}}, {
                    5.5, {3, 0, 2}}, {-0.5, {3, 0, 6}}}, {0, 3, 10, 0, 
                    0}, {{10, 0, 1}, {13, 1, 0, 1}, {41, 263, 3, 0, 1, 3, 0, 
                    3, 3, 0, 4}, {40, 58, 3, 0, 4, 3, 0, 5}, {16, 2, 5, 4}, {
                    41, 263, 3, 0, 1, 3, 0, 7, 3, 0, 5}, {40, 58, 3, 0, 5, 3, 
                    0, 8}, {10, 2, 5}, {16, 5, 0, 5}, {10, 1, 9}, {13, 9, 5, 
                    9}, {16, 6, 8, 9, 5}, {13, 4, 5, 4}, {1}}, 
                    Function[{Global`x}, 
                    
                    Block[{Compile`$111}, Compile`$111 = 1 + Global`x; 
                    11/(2 Compile`$111^(9/11)) - (11 + 9 Global`x)/(2 
                    Compile`$111^(20/11))]], Evaluate][Global`x]^2), {
                    Global`x, CalculateScan`PlotterScanner`Private`xL$, 
                    CalculateScan`PlotterScanner`Private`xU$}, 
                    PlotRange -> {
                    CalculateScan`PlotterScanner`Private`pRX$, 
                    CalculateScan`PlotterScanner`Private`pRY$}, Evaluated -> 
                    False]], {CalculateScan`PlotterScanner`Private`px, 
                    CalculateScan`PlotterScanner`Private`xL$, 
                    CalculateScan`PlotterScanner`Private`xU$, (
                    CalculateScan`PlotterScanner`Private`xU$ - 
                    CalculateScan`PlotterScanner`Private`xL$)/
                    CalculateScan`PlotterScanner`Private`orthotomicCurveCount$\
}, {CalculateScan`PlotterScanner`Private`py, 
                    CalculateScan`PlotterScanner`Private`yL$, 
                    CalculateScan`PlotterScanner`Private`yU$, (
                    CalculateScan`PlotterScanner`Private`yU$ - 
                    CalculateScan`PlotterScanner`Private`yL$)/
                    CalculateScan`PlotterScanner`Private`orthotomicCurveCount$\
}], 
                    Table[
                    
                    With[{CalculateScan`PlotterScanner`Private`px$ = 
                    CalculateScan`PlotterScanner`Private`px, 
                    CalculateScan`PlotterScanner`Private`py$ = 
                    CompiledFunction[{8, 8., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    4}}, {{11, {2, 0, 1}}, {0.6111111111111112, {3, 0, 1}}, {
                    9, {2, 0, 2}}, {1, {2, 0, 0}}, {
                    0.8181818181818182, {3, 0, 3}}}, {0, 3, 6, 0, 
                    0}, {{10, 0, 2}, {13, 2, 0, 2}, {41, 263, 3, 0, 2, 3, 0, 
                    3, 3, 0, 4}, {40, 58, 3, 0, 4, 3, 0, 2}, {10, 2, 4}, {16, 
                    4, 0, 4}, {10, 1, 5}, {13, 5, 4, 5}, {16, 1, 2, 5, 4}, {
                    1}}, 
                    
                    Function[{Global`x}, (11 (11 + 9 Global`x))/(
                    18 (1 + Global`x)^(9/11))], Evaluate][Global`x]}, 
                    ParametricPlot[{Global`x, 
                    CompiledFunction[{8, 8., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    4}}, {{11, {2, 0, 1}}, {0.6111111111111112, {3, 0, 1}}, {
                    9, {2, 0, 2}}, {1, {2, 0, 0}}, {
                    0.8181818181818182, {3, 0, 3}}}, {0, 3, 6, 0, 
                    0}, {{10, 0, 2}, {13, 2, 0, 2}, {41, 263, 3, 0, 2, 3, 0, 
                    3, 3, 0, 4}, {40, 58, 3, 0, 4, 3, 0, 2}, {10, 2, 4}, {16, 
                    4, 0, 4}, {10, 1, 5}, {13, 5, 4, 5}, {16, 1, 2, 5, 4}, {
                    1}}, 
                    
                    Function[{Global`x}, (11 (11 + 9 Global`x))/(
                    18 (1 + Global`x)^(9/11))], Evaluate][
                    Global`x]} + {(-2) CompiledFunction[{8, 8., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    4}}, {{11, {2, 0, 1}}, {9, {2, 0, 2}}, {1, {2, 0, 0}}, {
                    1.8181818181818181`, {3, 0, 7}}, {
                    0.8181818181818182, {3, 0, 3}}, {
                    5.5, {3, 0, 2}}, {-0.5, {3, 0, 6}}}, {0, 3, 10, 0, 
                    0}, {{10, 0, 1}, {13, 1, 0, 1}, {41, 263, 3, 0, 1, 3, 0, 
                    3, 3, 0, 4}, {40, 58, 3, 0, 4, 3, 0, 5}, {16, 2, 5, 4}, {
                    41, 263, 3, 0, 1, 3, 0, 7, 3, 0, 5}, {40, 58, 3, 0, 5, 3, 
                    0, 8}, {10, 2, 5}, {16, 5, 0, 5}, {10, 1, 9}, {13, 9, 5, 
                    9}, {16, 6, 8, 9, 5}, {13, 4, 5, 4}, {1}}, 
                    Function[{Global`x}, 
                    
                    Block[{Compile`$111}, Compile`$111 = 1 + Global`x; 
                    11/(2 Compile`$111^(9/11)) - (11 + 9 Global`x)/(2 
                    Compile`$111^(20/11))]], Evaluate][Global`x] (
                    1 (CompiledFunction[{8, 8., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    4}}, {{11, {2, 0, 1}}, {0.6111111111111112, {3, 0, 1}}, {
                    9, {2, 0, 2}}, {1, {2, 0, 0}}, {
                    0.8181818181818182, {3, 0, 3}}}, {0, 3, 6, 0, 
                    0}, {{10, 0, 2}, {13, 2, 0, 2}, {41, 263, 3, 0, 2, 3, 0, 
                    3, 3, 0, 4}, {40, 58, 3, 0, 4, 3, 0, 2}, {10, 2, 4}, {16, 
                    4, 0, 4}, {10, 1, 5}, {13, 5, 4, 5}, {16, 1, 2, 5, 4}, {
                    1}}, 
                    
                    Function[{Global`x}, (11 (11 + 9 Global`x))/(
                    18 (1 + Global`x)^(9/11))], Evaluate][Global`x] - 
                    CalculateScan`PlotterScanner`Private`py$) - 
                    CompiledFunction[{8, 8., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    4}}, {{11, {2, 0, 1}}, {9, {2, 0, 2}}, {1, {2, 0, 0}}, {
                    1.8181818181818181`, {3, 0, 7}}, {
                    0.8181818181818182, {3, 0, 3}}, {
                    5.5, {3, 0, 2}}, {-0.5, {3, 0, 6}}}, {0, 3, 10, 0, 
                    0}, {{10, 0, 1}, {13, 1, 0, 1}, {41, 263, 3, 0, 1, 3, 0, 
                    3, 3, 0, 4}, {40, 58, 3, 0, 4, 3, 0, 5}, {16, 2, 5, 4}, {
                    41, 263, 3, 0, 1, 3, 0, 7, 3, 0, 5}, {40, 58, 3, 0, 5, 3, 
                    0, 8}, {10, 2, 5}, {16, 5, 0, 5}, {10, 1, 9}, {13, 9, 5, 
                    9}, {16, 6, 8, 9, 5}, {13, 4, 5, 4}, {1}}, 
                    Function[{Global`x}, 
                    
                    Block[{Compile`$111}, Compile`$111 = 1 + Global`x; 
                    11/(2 Compile`$111^(9/11)) - (11 + 9 Global`x)/(2 
                    Compile`$111^(20/11))]], Evaluate][Global`x] (Global`x - 
                    CalculateScan`PlotterScanner`Private`px$)), 2 
                    1 (1 (CompiledFunction[{8, 8., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    4}}, {{11, {2, 0, 1}}, {0.6111111111111112, {3, 0, 1}}, {
                    9, {2, 0, 2}}, {1, {2, 0, 0}}, {
                    0.8181818181818182, {3, 0, 3}}}, {0, 3, 6, 0, 
                    0}, {{10, 0, 2}, {13, 2, 0, 2}, {41, 263, 3, 0, 2, 3, 0, 
                    3, 3, 0, 4}, {40, 58, 3, 0, 4, 3, 0, 2}, {10, 2, 4}, {16, 
                    4, 0, 4}, {10, 1, 5}, {13, 5, 4, 5}, {16, 1, 2, 5, 4}, {
                    1}}, 
                    
                    Function[{Global`x}, (11 (11 + 9 Global`x))/(
                    18 (1 + Global`x)^(9/11))], Evaluate][Global`x] - 
                    CalculateScan`PlotterScanner`Private`py$) - 
                    CompiledFunction[{8, 8., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    4}}, {{11, {2, 0, 1}}, {9, {2, 0, 2}}, {1, {2, 0, 0}}, {
                    1.8181818181818181`, {3, 0, 7}}, {
                    0.8181818181818182, {3, 0, 3}}, {
                    5.5, {3, 0, 2}}, {-0.5, {3, 0, 6}}}, {0, 3, 10, 0, 
                    0}, {{10, 0, 1}, {13, 1, 0, 1}, {41, 263, 3, 0, 1, 3, 0, 
                    3, 3, 0, 4}, {40, 58, 3, 0, 4, 3, 0, 5}, {16, 2, 5, 4}, {
                    41, 263, 3, 0, 1, 3, 0, 7, 3, 0, 5}, {40, 58, 3, 0, 5, 3, 
                    0, 8}, {10, 2, 5}, {16, 5, 0, 5}, {10, 1, 9}, {13, 9, 5, 
                    9}, {16, 6, 8, 9, 5}, {13, 4, 5, 4}, {1}}, 
                    Function[{Global`x}, 
                    
                    Block[{Compile`$111}, Compile`$111 = 1 + Global`x; 
                    11/(2 Compile`$111^(9/11)) - (11 + 9 Global`x)/(2 
                    Compile`$111^(20/11))]], Evaluate][Global`x] (Global`x - 
                    CalculateScan`PlotterScanner`Private`px$))}/(1 + 
                    CompiledFunction[{8, 8., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    4}}, {{11, {2, 0, 1}}, {9, {2, 0, 2}}, {1, {2, 0, 0}}, {
                    1.8181818181818181`, {3, 0, 7}}, {
                    0.8181818181818182, {3, 0, 3}}, {
                    5.5, {3, 0, 2}}, {-0.5, {3, 0, 6}}}, {0, 3, 10, 0, 
                    0}, {{10, 0, 1}, {13, 1, 0, 1}, {41, 263, 3, 0, 1, 3, 0, 
                    3, 3, 0, 4}, {40, 58, 3, 0, 4, 3, 0, 5}, {16, 2, 5, 4}, {
                    41, 263, 3, 0, 1, 3, 0, 7, 3, 0, 5}, {40, 58, 3, 0, 5, 3, 
                    0, 8}, {10, 2, 5}, {16, 5, 0, 5}, {10, 1, 9}, {13, 9, 5, 
                    9}, {16, 6, 8, 9, 5}, {13, 4, 5, 4}, {1}}, 
                    Function[{Global`x}, 
                    
                    Block[{Compile`$111}, Compile`$111 = 1 + Global`x; 
                    11/(2 Compile`$111^(9/11)) - (11 + 9 Global`x)/(2 
                    Compile`$111^(20/11))]], Evaluate][Global`x]^2), {
                    Global`x, CalculateScan`PlotterScanner`Private`xL$, 
                    CalculateScan`PlotterScanner`Private`xU$}, 
                    PlotRange -> {
                    CalculateScan`PlotterScanner`Private`pRX$, 
                    CalculateScan`PlotterScanner`Private`pRY$}, Evaluated -> 
                    False]], {CalculateScan`PlotterScanner`Private`px, 
                    CalculateScan`PlotterScanner`Private`xL$, 
                    CalculateScan`PlotterScanner`Private`xU$, (
                    CalculateScan`PlotterScanner`Private`xU$ - 
                    CalculateScan`PlotterScanner`Private`xL$)/
                    CalculateScan`PlotterScanner`Private`orthotomicCurveCount$\
}]]]], {}]; 
                    CalculateScan`PlotterScanner`Private`\
orthotomicLastParamaters$$ = {{
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$}, 
                    CalculateScan`PlotterScanner`Private`\
orthotomicCurveCountFactor$$, 
                    CalculateScan`PlotterScanner`Private`\
orthotomicCurvePoints$$}]; 
                    CalculateScan`PlotterScanner`Private`orthotomicCurvePlot = 
                    Graphics[{
                    Directive[
                    CalculateScan`PlotterScanner`Private`orthotomicCurveColor$\
$, 
                    Opacity[
                    CalculateScan`PlotterScanner`Private`\
orthotomicCurveOpacity$$], 
                    Thickness[
                    10^CalculateScan`PlotterScanner`Private`\
orthotomicCurveThickness$$]], 
                    If[
                    CalculateScan`PlotterScanner`Private`orthotomicCurveTF$$, 
                    CalculateScan`PlotterScanner`Private`\
orthotomicCurvePlotCurves$$, {}]}]; 
                    CalculateScan`PlotterScanner`Private`getSplineSegments[
                    Line[
                    Pattern[CalculateScan`PlotterScanner`Private`l, 
                    Blank[]]]] := 
                    Module[{}, 
                    CalculateScan`PlotterScanner`Private`posis = 
                    Position[CalculateScan`PlotterScanner`Private`l, 
                    Except[{
                    Blank[Real], 
                    Blank[Real]}], {1}, Heads -> False]; 
                    If[CalculateScan`PlotterScanner`Private`posis === {}, 
                    BSplineCurve[CalculateScan`PlotterScanner`Private`l], 
                    Map[BSplineCurve, 
                    Select[
                    Map[DeleteCases[
                    Take[CalculateScan`PlotterScanner`Private`l, #], 
                    Except[{
                    Blank[Real], 
                    Blank[Real]}]]& , 
                    Partition[
                    Flatten[{1, 
                    
                    Map[{# - 1, # + 1}& , 
                    CalculateScan`PlotterScanner`Private`posis], 
                    Length[CalculateScan`PlotterScanner`Private`l]}], 2]], 
                    Length[#] >= 3& ]]]]; If[
                    And[CalculateScan`PlotterScanner`Private`isopticCurveTF$$,
                     CalculateScan`PlotterScanner`Private`\
isopticLastParamaters$$ =!= {{
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$}, 
                    CalculateScan`PlotterScanner`Private`isopticCurveAngle$$}]\
, CalculateScan`PlotterScanner`Private`isopticCurvePlotCurves$$ = Quiet[
                    If[
                    CalculateScan`PlotterScanner`Private`isopticCurveTF$$, 
                    
                    With[{CalculateScan`PlotterScanner`Private`\[Alpha]$ = 
                    CalculateScan`PlotterScanner`Private`isopticCurveAngle$$},
                     CalculateScan`PlotterScanner`Private`cpIsoptic = 
                    ContourPlot[(1 + CompiledFunction[{8, 8., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    4}}, {{11, {2, 0, 1}}, {9, {2, 0, 2}}, {1, {2, 0, 0}}, {
                    1.8181818181818181`, {3, 0, 7}}, {
                    0.8181818181818182, {3, 0, 3}}, {
                    5.5, {3, 0, 2}}, {-0.5, {3, 0, 6}}}, {0, 3, 10, 0, 
                    0}, {{10, 0, 1}, {13, 1, 0, 1}, {41, 263, 3, 0, 1, 3, 0, 
                    3, 3, 0, 4}, {40, 58, 3, 0, 4, 3, 0, 5}, {16, 2, 5, 4}, {
                    41, 263, 3, 0, 1, 3, 0, 7, 3, 0, 5}, {40, 58, 3, 0, 5, 3, 
                    0, 8}, {10, 2, 5}, {16, 5, 0, 5}, {10, 1, 9}, {13, 9, 5, 
                    9}, {16, 6, 8, 9, 5}, {13, 4, 5, 4}, {1}}, 
                    Function[{Global`x}, 
                    
                    Block[{Compile`$111}, Compile`$111 = 1 + Global`x; 
                    11/(2 Compile`$111^(9/11)) - (11 + 9 Global`x)/(2 
                    Compile`$111^(20/11))]], Evaluate][
                    CalculateScan`PlotterScanner`Private`x1$$] 
                    CompiledFunction[{8, 8., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    4}}, {{11, {2, 0, 1}}, {9, {2, 0, 2}}, {1, {2, 0, 0}}, {
                    1.8181818181818181`, {3, 0, 7}}, {
                    0.8181818181818182, {3, 0, 3}}, {
                    5.5, {3, 0, 2}}, {-0.5, {3, 0, 6}}}, {0, 3, 10, 0, 
                    0}, {{10, 0, 1}, {13, 1, 0, 1}, {41, 263, 3, 0, 1, 3, 0, 
                    3, 3, 0, 4}, {40, 58, 3, 0, 4, 3, 0, 5}, {16, 2, 5, 4}, {
                    41, 263, 3, 0, 1, 3, 0, 7, 3, 0, 5}, {40, 58, 3, 0, 5, 3, 
                    0, 8}, {10, 2, 5}, {16, 5, 0, 5}, {10, 1, 9}, {13, 9, 5, 
                    9}, {16, 6, 8, 9, 5}, {13, 4, 5, 4}, {1}}, 
                    Function[{Global`x}, 
                    
                    Block[{Compile`$111}, Compile`$111 = 1 + Global`x; 
                    11/(2 Compile`$111^(9/11)) - (11 + 9 Global`x)/(2 
                    Compile`$111^(20/11))]], Evaluate][
                    CalculateScan`PlotterScanner`Private`x2$$])/
                    Sqrt[(1 + CompiledFunction[{8, 8., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    4}}, {{11, {2, 0, 1}}, {9, {2, 0, 2}}, {1, {2, 0, 0}}, {
                    1.8181818181818181`, {3, 0, 7}}, {
                    0.8181818181818182, {3, 0, 3}}, {
                    5.5, {3, 0, 2}}, {-0.5, {3, 0, 6}}}, {0, 3, 10, 0, 
                    0}, {{10, 0, 1}, {13, 1, 0, 1}, {41, 263, 3, 0, 1, 3, 0, 
                    3, 3, 0, 4}, {40, 58, 3, 0, 4, 3, 0, 5}, {16, 2, 5, 4}, {
                    41, 263, 3, 0, 1, 3, 0, 7, 3, 0, 5}, {40, 58, 3, 0, 5, 3, 
                    0, 8}, {10, 2, 5}, {16, 5, 0, 5}, {10, 1, 9}, {13, 9, 5, 
                    9}, {16, 6, 8, 9, 5}, {13, 4, 5, 4}, {1}}, 
                    Function[{Global`x}, 
                    
                    Block[{Compile`$111}, Compile`$111 = 1 + Global`x; 
                    11/(2 Compile`$111^(9/11)) - (11 + 9 Global`x)/(2 
                    Compile`$111^(20/11))]], Evaluate][
                    CalculateScan`PlotterScanner`Private`x1$$]^2) (1 + 
                    CompiledFunction[{8, 8., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    4}}, {{11, {2, 0, 1}}, {9, {2, 0, 2}}, {1, {2, 0, 0}}, {
                    1.8181818181818181`, {3, 0, 7}}, {
                    0.8181818181818182, {3, 0, 3}}, {
                    5.5, {3, 0, 2}}, {-0.5, {3, 0, 6}}}, {0, 3, 10, 0, 
                    0}, {{10, 0, 1}, {13, 1, 0, 1}, {41, 263, 3, 0, 1, 3, 0, 
                    3, 3, 0, 4}, {40, 58, 3, 0, 4, 3, 0, 5}, {16, 2, 5, 4}, {
                    41, 263, 3, 0, 1, 3, 0, 7, 3, 0, 5}, {40, 58, 3, 0, 5, 3, 
                    0, 8}, {10, 2, 5}, {16, 5, 0, 5}, {10, 1, 9}, {13, 9, 5, 
                    9}, {16, 6, 8, 9, 5}, {13, 4, 5, 4}, {1}}, 
                    Function[{Global`x}, 
                    
                    Block[{Compile`$111}, Compile`$111 = 1 + Global`x; 
                    11/(2 Compile`$111^(9/11)) - (11 + 9 Global`x)/(2 
                    Compile`$111^(20/11))]], Evaluate][
                    CalculateScan`PlotterScanner`Private`x2$$]^2)] == 
                    Cos[CalculateScan`PlotterScanner`Private`\[Alpha]$], {
                    CalculateScan`PlotterScanner`Private`x1$$, (-2) Pi, 2 
                    Pi}, {CalculateScan`PlotterScanner`Private`x2$$, (-2) Pi, 
                    2 Pi}, Exclusions -> {
                    Function[{Global`x}, 
                    11/(2 (1 + Global`x)^(9/11)) - (11 + 9 Global`x)/(
                    2 (1 + Global`x)^(20/11))][
                    CalculateScan`PlotterScanner`Private`x1$$] - 
                    Function[{Global`x}, 
                    11/(2 (1 + Global`x)^(9/11)) - (11 + 9 Global`x)/(
                    2 (1 + Global`x)^(20/11))][
                    CalculateScan`PlotterScanner`Private`x2$$] == 0}, 
                    Evaluated -> False]; 
                    CalculateScan`PlotterScanner`Private`x1x2SCPCurves = Cases[
                    Normal[CalculateScan`PlotterScanner`Private`cpIsoptic], 
                    Blank[Line], Infinity]; 
                    If[CalculateScan`PlotterScanner`Private`x1x2SCPCurves === \
{}, {}, 
                    Map[
                    CalculateScan`PlotterScanner`Private`getSplineSegments, 
                    Map[
                    CalculateScan`PlotterScanner`Private`\
tangentIntersectionPoint[#, {
                    CompiledFunction[{8, 8., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    4}}, {{11, {2, 0, 1}}, {0.6111111111111112, {3, 0, 1}}, {
                    9, {2, 0, 2}}, {1, {2, 0, 0}}, {
                    0.8181818181818182, {3, 0, 3}}}, {0, 3, 6, 0, 
                    0}, {{10, 0, 2}, {13, 2, 0, 2}, {41, 263, 3, 0, 2, 3, 0, 
                    3, 3, 0, 4}, {40, 58, 3, 0, 4, 3, 0, 2}, {10, 2, 4}, {16, 
                    4, 0, 4}, {10, 1, 5}, {13, 5, 4, 5}, {16, 1, 2, 5, 4}, {
                    1}}, 
                    
                    Function[{Global`x}, (11 (11 + 9 Global`x))/(
                    18 (1 + Global`x)^(9/11))], Evaluate], 
                    CompiledFunction[{8, 8., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    4}}, {{11, {2, 0, 1}}, {9, {2, 0, 2}}, {1, {2, 0, 0}}, {
                    1.8181818181818181`, {3, 0, 7}}, {
                    0.8181818181818182, {3, 0, 3}}, {
                    5.5, {3, 0, 2}}, {-0.5, {3, 0, 6}}}, {0, 3, 10, 0, 
                    0}, {{10, 0, 1}, {13, 1, 0, 1}, {41, 263, 3, 0, 1, 3, 0, 
                    3, 3, 0, 4}, {40, 58, 3, 0, 4, 3, 0, 5}, {16, 2, 5, 4}, {
                    41, 263, 3, 0, 1, 3, 0, 7, 3, 0, 5}, {40, 58, 3, 0, 5, 3, 
                    0, 8}, {10, 2, 5}, {16, 5, 0, 5}, {10, 1, 9}, {13, 9, 5, 
                    9}, {16, 6, 8, 9, 5}, {13, 4, 5, 4}, {1}}, 
                    Function[{Global`x}, 
                    
                    Block[{Compile`$111}, Compile`$111 = 1 + Global`x; 
                    11/(2 Compile`$111^(9/11)) - (11 + 9 Global`x)/(2 
                    Compile`$111^(20/11))]], Evaluate]}]& , 
                    CalculateScan`PlotterScanner`Private`x1x2SCPCurves, \
{-2}]]]], {}]]; 
                    CalculateScan`PlotterScanner`Private`\
isopticLastParamaters$$ =!= {{
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$}, 
                    CalculateScan`PlotterScanner`Private`isopticCurveAngle$$}]\
; CalculateScan`PlotterScanner`Private`isopticCurvePlot = Graphics[{
                    Directive[
                    CalculateScan`PlotterScanner`Private`isopticCurveColor$$, 
                    
                    Opacity[
                    CalculateScan`PlotterScanner`Private`isopticCurveOpacity$$\
], 
                    Thickness[
                    10^CalculateScan`PlotterScanner`Private`\
isopticCurveThickness$$]], 
                    If[
                    CalculateScan`PlotterScanner`Private`isopticCurveTF$$, 
                    CalculateScan`PlotterScanner`Private`\
isopticCurvePlotCurves$$, {}]}]; 
                    CalculateScan`PlotterScanner`Private`annotatedPlotList = {
                    "tangentLinePlot" -> 
                    CalculateScan`PlotterScanner`Private`tangentLinePlot$, 
                    "normalLinePlot" -> 
                    CalculateScan`PlotterScanner`Private`normalLinePlot$, 
                    "tiltedTangentLinePlot" -> 
                    CalculateScan`PlotterScanner`Private`\
tiltedTangentLinePlot$, "osculatingCirclePlot" -> 
                    CalculateScan`PlotterScanner`Private`osculatingCirclePlot$\
, "taylorParabolaPlot" -> 
                    CalculateScan`PlotterScanner`Private`taylorParabolaPlot$, 
                    "involutePlot" -> 
                    CalculateScan`PlotterScanner`Private`involutePlot$, 
                    "evolutePlot" -> 
                    CalculateScan`PlotterScanner`Private`evolutePlot$, 
                    "dualCurvePlot" -> 
                    CalculateScan`PlotterScanner`Private`dualCurvePlot, 
                    "offsetCurvePlot" -> 
                    CalculateScan`PlotterScanner`Private`offsetCurvePlot, 
                    "tiltedOffsetCurvePlot" -> 
                    
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurvePlot, "pedalCurvePlot" -> 
                    CalculateScan`PlotterScanner`Private`pedalCurvePlot, 
                    "negativePedalCurvePlot" -> 
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurvePlot, "contraPedalCurvePlot" -> 
                    CalculateScan`PlotterScanner`Private`contraPedalCurvePlot,
                     "inverseCurvePlot" -> 
                    CalculateScan`PlotterScanner`Private`inverseCurvePlot, 
                    "isopticCurvePlot" -> 
                    CalculateScan`PlotterScanner`Private`isopticCurvePlot, 
                    "orthotomicCurvePlot" -> 
                    CalculateScan`PlotterScanner`Private`orthotomicCurvePlot, 
                    "originalCurvePlot" -> 
                    CalculateScan`PlotterScanner`Private`originalCurvePlot$}; 
                    CalculateScan`PlotterScanner`Private`labelGrid = (
                    DeleteCases[#, {}]& )[{
                    If[
                    TrueQ[True], {
                    RawBoxes[
                    FormBox[
                    FractionBox[
                    RowBox[{"11", " ", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"9", " ", "x"}], "+", "11"}], ")"}]}], 
                    RowBox[{"18", " ", 
                    SuperscriptBox[
                    RowBox[{"(", 
                    RowBox[{"x", "+", "1"}], ")"}], 
                    RowBox[{"9", "/", "11"}]]}]], TraditionalForm]], 
                    Style["\[LongDash]", Bold, Black]}, {}], 
                    If[
                    TrueQ[CalculateScan`PlotterScanner`Private`tangentTF$$], {
                    "tangents", 
                    Style[
                    "\[LongDash]", Bold, 
                    CalculateScan`PlotterScanner`Private`tangentColor$$]}, \
{}], 
                    If[
                    TrueQ[CalculateScan`PlotterScanner`Private`normalTF$$], {
                    "normals", 
                    Style[
                    "\[LongDash]", Bold, 
                    CalculateScan`PlotterScanner`Private`normalColor$$]}, {}], 
                    If[
                    TrueQ[
                    CalculateScan`PlotterScanner`Private`tiltedTangentTF$$], {
                    "tilted tangents", 
                    Style[
                    "\[LongDash]", Bold, 
                    CalculateScan`PlotterScanner`Private`tiltedTangentColor$$]\
}, {}], 
                    If[
                    TrueQ[
                    CalculateScan`PlotterScanner`Private`osculatingCircleTF$$]\
, {"osculating circles", 
                    Style[
                    "\[LongDash]", Bold, 
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleColor$$]}, {}], 
                    If[
                    TrueQ[
                    CalculateScan`PlotterScanner`Private`taylorParabolaTF$$], \
{"Taylor parabolas", 
                    Style[
                    "\[LongDash]", Bold, 
                    CalculateScan`PlotterScanner`Private`taylorParabolaColor$$\
]}, {}], 
                    If[
                    TrueQ[
                    CalculateScan`PlotterScanner`Private`involuteTF$$], {
                    "involutes", 
                    Style[
                    "\[LongDash]", Bold, 
                    CalculateScan`PlotterScanner`Private`involuteColor$$]}, \
{}], 
                    If[
                    TrueQ[CalculateScan`PlotterScanner`Private`evoluteTF$$], {
                    "evolute", 
                    Style[
                    "\[LongDash]", Bold, 
                    CalculateScan`PlotterScanner`Private`evoluteColor$$]}, \
{}], 
                    If[
                    TrueQ[
                    CalculateScan`PlotterScanner`Private`offsetCurveTF$$], {
                    "offset curves", 
                    Style[
                    "\[LongDash]", Bold, 
                    CalculateScan`PlotterScanner`Private`offsetCurveColor$$]},\
 {}], 
                    If[
                    TrueQ[
                    CalculateScan`PlotterScanner`Private`tiltedOffsetCurveTF$$\
], {"tilted offset curves", 
                    Style[
                    "\[LongDash]", Bold, 
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveColor$$]}, {}], 
                    If[
                    TrueQ[
                    CalculateScan`PlotterScanner`Private`negativePedalCurveTF$\
$], {"contrapedal curves", 
                    Style[
                    "\[LongDash]", Bold, 
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurveColor$$]}, {}], 
                    If[
                    TrueQ[
                    CalculateScan`PlotterScanner`Private`contraPedalCurveTF$$]\
, {"normals", 
                    Style[
                    "\[LongDash]", Bold, 
                    CalculateScan`PlotterScanner`Private`tiltedTangentColor$$]\
}, {}], 
                    If[
                    TrueQ[
                    CalculateScan`PlotterScanner`Private`dualCurveTF$$], {
                    "dual curves", 
                    Style[
                    "\[LongDash]", Bold, 
                    CalculateScan`PlotterScanner`Private`dualCurveColor$$]}, \
{}], 
                    If[
                    TrueQ[
                    CalculateScan`PlotterScanner`Private`inverseCurveTF$$], {
                    "inverse curves", 
                    Style[
                    "\[LongDash]", Bold, 
                    CalculateScan`PlotterScanner`Private`inverseCurveColor$$]}\
, {}], 
                    If[
                    TrueQ[
                    CalculateScan`PlotterScanner`Private`isopticCurveTF$$], {
                    "isoptic curves", 
                    Style[
                    "\[LongDash]", Bold, 
                    CalculateScan`PlotterScanner`Private`isopticCurveColor$$]}\
, {}], 
                    If[
                    TrueQ[
                    CalculateScan`PlotterScanner`Private`orthotomicCurveTF$$],\
 {"orthotomic curves", 
                    Style[
                    "\[LongDash]", Bold, 
                    CalculateScan`PlotterScanner`Private`orthotomicCurveColor$\
$]}, {}]}]; Column[{
                    Show[
                    Map[
                    Last, CalculateScan`PlotterScanner`Private`\
annotatedPlotList], PlotRange -> {
                    CalculateScan`PlotterScanner`Private`pRX$, 
                    CalculateScan`PlotterScanner`Private`pRY$}, ImageSize -> 
                    300, ImagePadding -> 5, AspectRatio -> 
                    CalculateScan`PlotterScanner`Private`ar$$, 
                    If[CalculateScan`PlotterScanner`Private`sa$$, 
                    Apply[
                    Sequence, {
                    Axes -> True, AxesOrigin -> {0, 0}, AxesStyle -> 
                    Lighter[Gray]}], 
                    Apply[Sequence, {}]], 
                    If[CalculateScan`PlotterScanner`Private`st$$, 
                    Apply[Sequence, {Ticks -> Automatic}], 
                    Apply[Sequence, {Ticks -> None}]]], 
                    Grid[{
                    Map[Grid[
                    Map[Reverse, #], Alignment -> Left]& , 
                    
                    With[{CalculateScan`PlotterScanner`Private`\[Lambda]T = 
                    Max[
                    Floor[
                    Length[CalculateScan`PlotterScanner`Private`labelGrid]/2],
                     1]}, 
                    Partition[
                    CalculateScan`PlotterScanner`Private`labelGrid, 
                    CalculateScan`PlotterScanner`Private`\[Lambda]T, 
                    CalculateScan`PlotterScanner`Private`\[Lambda]T, 
                    1, {}]]]}, Dividers -> {False, False}, 
                    Spacings -> {4, Automatic}]}]]], 
                  "Specifications" :> {{
                    CalculateUtilities`GraphicsUtilities`Private`more$$, {
                    False, True}, ControlType -> None}, {{
                    CalculateScan`PlotterScanner`Private`x1$$, \
-0.8264825260281834, 
                    Subscript[
                    Style["x", Italic], "min"]}, -1.5393804002589986`, 
                    1.5393804002589986`, ImageSize -> Small, ControlPlacement -> 
                    1}, {{CalculateScan`PlotterScanner`Private`x2$$, 
                    0.7406381842411932, 
                    Subscript[
                    Style["x", Italic], "max"]}, -1.5393804002589986`, 
                    1.5393804002589986`, ImageSize -> Small, ControlPlacement -> 
                    2}, {{CalculateScan`PlotterScanner`Private`symmxQ$$, 
                    False, "symmetric"}, {True, False}, ControlPlacement -> 
                    3}, {{CalculateScan`PlotterScanner`Private`fy1$$, 
                    0.982793723247329, 
                    Subscript["y", "min"]}, 0, 1.5393804002589986`, ImageSize -> 
                    Small, ControlPlacement -> 4}, {{
                    CalculateScan`PlotterScanner`Private`fy2$$, 
                    0.982793723247329, 
                    Subscript["y", "max"]}, 0, 1.5393804002589986`, ImageSize -> 
                    Small, ControlPlacement -> 5}, {{
                    CalculateScan`PlotterScanner`Private`symmyQ$$, True, 
                    "symmetric"}, {True, False}, ControlPlacement -> 6}, {{
                    CalculateScan`PlotterScanner`Private`sqPRQ$$, False, 
                    Dynamic[
                    Style["same as horizontal-range", 
                    If[
                    CalculateScan`PlotterScanner`Private`symmxQ$$, Black, 
                    Gray]]]}, {True, False}, ImageSize -> Small, 
                    ControlPlacement -> 7}, {{
                    CalculateScan`PlotterScanner`Private`sa$$, False, 
                    "show axes"}, {True, False}, ImageSize -> Small, 
                    ControlPlacement -> 8}, {{
                    CalculateScan`PlotterScanner`Private`st$$, False, 
                    Dynamic[
                    Style["show ticks", 
                    If[
                    CalculateScan`PlotterScanner`Private`sa$$ === True, Black,
                     Gray]]]}, {True, False}, ImageSize -> Small, 
                    ControlPlacement -> 9}, {{
                    CalculateScan`PlotterScanner`Private`ar$$, 1, 
                    "aspect ratio"}, 
                    Rational[1, 4], 4, ImageSize -> Small, ControlPlacement -> 
                    10}, {{CalculateScan`PlotterScanner`Private`tangentTF$$, 
                    False, ""}, {True, False}, ControlPlacement -> 11}, {{
                    CalculateScan`PlotterScanner`Private`tangentCount$$, 60, 
                    ""}, 2, 360, 1, ImageSize -> Small, ControlPlacement -> 
                    12}, {{CalculateScan`PlotterScanner`Private`tangentLength$\
$, 0.06421622794870045, ""}, 0, 1.5393804002589986`, ImageSize -> Small, 
                    ControlPlacement -> 13}, {{
                    CalculateScan`PlotterScanner`Private`tangentThickness$$, \
-3., ""}, -4, -0.5, ImageSize -> Small, ControlPlacement -> 14}, {{
                    CalculateScan`PlotterScanner`Private`tangentColor$$, 
                    RGBColor[0.237736, 0.340215, 0.575113], ""}, 
                    RGBColor[1, 0, 0], ImageSize -> Tiny, AppearanceElements -> 
                    "Spectrum", ControlPlacement -> 15}, {{
                    CalculateScan`PlotterScanner`Private`tangentOpacity$$, 
                    0.8, ""}, 0, 1, ImageSize -> Small, ControlPlacement -> 
                    16}, {{CalculateScan`PlotterScanner`Private`normalTF$$, 
                    True, ""}, {True, False}, ControlPlacement -> 17}, {{
                    CalculateScan`PlotterScanner`Private`normalCount$$, 120, 
                    ""}, 2, 360, 1, ImageSize -> Small, ControlPlacement -> 
                    18}, {{CalculateScan`PlotterScanner`Private`normalLength$$\
, 0.06421622794870045, ""}, 0, 1.5393804002589986`, ImageSize -> Small, 
                    ControlPlacement -> 19}, {{
                    
                    CalculateScan`PlotterScanner`Private`normalThickness$$, \
-3., ""}, -4, -0.5, ImageSize -> Small, ControlPlacement -> 20}, {{
                    CalculateScan`PlotterScanner`Private`normalColor$$, 
                    RGBColor[0.237, 0.34, 0.575], ""}, 
                    RGBColor[1, 0, 0], ImageSize -> Tiny, AppearanceElements -> 
                    "Spectrum", ControlPlacement -> 21}, {{
                    CalculateScan`PlotterScanner`Private`normalOpacity$$, 0.8,
                     ""}, 0, 1, ImageSize -> Small, ControlPlacement -> 
                    22}, {{CalculateScan`PlotterScanner`Private`\
tiltedTangentTF$$, False, ""}, {True, False}, ControlPlacement -> 23}, {{
                    CalculateScan`PlotterScanner`Private`tiltedTangentAngle$$,
                     Rational[1, 4] Pi, ""}, -Pi, Pi, ImageSize -> Small, 
                    ControlPlacement -> 24}, {{
                    CalculateScan`PlotterScanner`Private`tiltedTangentCount$$,
                     60, ""}, 2, 360, 1, ImageSize -> Small, ControlPlacement -> 
                    25}, {{CalculateScan`PlotterScanner`Private`\
tiltedTangentLength$$, 0.06421622794870045, ""}, 0, 1.5393804002589986`, 
                    ImageSize -> Small, ControlPlacement -> 26}, {{
                    CalculateScan`PlotterScanner`Private`\
tiltedTangentThickness$$, -3., ""}, -4, -0.5, ImageSize -> Small, 
                    ControlPlacement -> 27}, {{
                    CalculateScan`PlotterScanner`Private`tiltedTangentColor$$, 
                    RGBColor[
                    0.2622702, 0.40739780000000003`, 0.41955020000000004`], 
                    ""}, 
                    RGBColor[1, 0, 0], ImageSize -> Tiny, AppearanceElements -> 
                    "Spectrum", ControlPlacement -> 28}, {{
                    CalculateScan`PlotterScanner`Private`tiltedTangentOpacity$\
$, 0.8, ""}, 0, 1, ImageSize -> Small, ControlPlacement -> 29}, {{
                    CalculateScan`PlotterScanner`Private`osculatingCircleTF$$,
                     False, ""}, {True, False}, ControlPlacement -> 30}, {{
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleCount$$, 60, ""}, 2, 360, 1, ImageSize -> Small, 
                    ControlPlacement -> 31}, {{
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleThickness$$, -3., ""}, -4, -0.5, ImageSize -> Small, 
                    ControlPlacement -> 32}, {{
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleColor$$, 
                    RGBColor[0.2752426, 0.4446824, 0.33950440000000004`], ""}, 
                    RGBColor[1, 0, 0], ImageSize -> Tiny, AppearanceElements -> 
                    "Spectrum", ControlPlacement -> 33}, {{
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleOpacity$$, 0.8, ""}, 0, 1, ImageSize -> Small, 
                    ControlPlacement -> 34}, {{
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleRadiiTF$$, False, ""}, {True, False}, ImageSize -> Small, 
                    ControlPlacement -> 35}, {{
                    CalculateScan`PlotterScanner`Private`taylorParabolaTF$$, 
                    False, ""}, {True, False}, ControlPlacement -> 36}, {{
                    CalculateScan`PlotterScanner`Private`taylorParabolaCount$$\
, 36, ""}, 2, 120, 1, ImageSize -> Small, ControlPlacement -> 37}, {{
                    CalculateScan`PlotterScanner`Private`\
taylorParabolaThickness$$, -3., ""}, -4, -0.5, ImageSize -> Small, 
                    ControlPlacement -> 38}, {{
                    CalculateScan`PlotterScanner`Private`taylorParabolaColor$$\
, 
                    RGBColor[0.7189495000000001, 0.719797, 0.283877], ""}, 
                    RGBColor[1, 0, 0], ImageSize -> Tiny, AppearanceElements -> 
                    "Spectrum", ControlPlacement -> 39}, {{
                    CalculateScan`PlotterScanner`Private`\
taylorParabolaOpacity$$, 0.8, ""}, 0, 1, ImageSize -> Small, ControlPlacement -> 
                    40}, {{CalculateScan`PlotterScanner`Private`involuteTF$$, 
                    False, ""}, {True, False}, ControlPlacement -> 41}, {{
                    CalculateScan`PlotterScanner`Private`involuteCount$$, 60, 
                    ""}, 1, 120, 1, ImageSize -> Small, ControlPlacement -> 
                    42}, {{CalculateScan`PlotterScanner`Private`\
involuteThickness$$, -3., ""}, -4, -0.5, ImageSize -> Small, ControlPlacement -> 
                    43}, {{CalculateScan`PlotterScanner`Private`involuteColor$\
$, 
                    RGBColor[0.49978279999999997`, 0.6025278, 0.2508104], ""}, 
                    RGBColor[1, 0, 0], ImageSize -> Tiny, AppearanceElements -> 
                    "Spectrum", ControlPlacement -> 44}, {{
                    CalculateScan`PlotterScanner`Private`involuteOpacity$$, 
                    0.8, ""}, 0, 1, ImageSize -> Small, ControlPlacement -> 
                    45}, {{CalculateScan`PlotterScanner`Private`\
involutesLeftTF$$, False, ""}, {True, False}, ControlPlacement -> 46}, {{
                    CalculateScan`PlotterScanner`Private`involutesRightTF$$, 
                    True, ""}, {True, False}, ControlPlacement -> 47}, {{
                    CalculateScan`PlotterScanner`Private`evoluteTF$$, False, 
                    ""}, {True, False}, ControlPlacement -> 48}, {{
                    CalculateScan`PlotterScanner`Private`evoluteThickness$$, \
-3., ""}, -4, -0.5, ImageSize -> Small, ControlPlacement -> 49}, {{
                    CalculateScan`PlotterScanner`Private`evoluteColor$$, 
                    RGBColor[0.813033, 0.766292, 0.303458], ""}, 
                    RGBColor[1, 0, 0], ImageSize -> Tiny, AppearanceElements -> 
                    "Spectrum", ControlPlacement -> 50}, {{
                    CalculateScan`PlotterScanner`Private`evoluteOpacity$$, 
                    0.8, ""}, 0, 1, ImageSize -> Small, ControlPlacement -> 
                    51}, {{CalculateScan`PlotterScanner`Private`offsetCurveTF$\
$, False, ""}, {True, False}, ControlPlacement -> 52}, {{
                    CalculateScan`PlotterScanner`Private`offsetCurveDistance$$\
, 0.06421622794870045, ""}, 0, 1.5393804002589986`, ImageSize -> Small, 
                    ControlPlacement -> 53}, {{
                    CalculateScan`PlotterScanner`Private`offsetCurveCount$$, 
                    12, ""}, 1, 60, 1, ImageSize -> Small, ControlPlacement -> 
                    54}, {{CalculateScan`PlotterScanner`Private`\
offsetCurveThickness$$, -3., ""}, -4, -0.5, ImageSize -> Small, 
                    ControlPlacement -> 55}, {{
                    CalculateScan`PlotterScanner`Private`offsetCurveColor$$, 
                    RGBColor[0.877875, 0.731045, 0.326896], ""}, 
                    RGBColor[1, 0, 0], ImageSize -> Tiny, AppearanceElements -> 
                    "Spectrum", ControlPlacement -> 56}, {{
                    CalculateScan`PlotterScanner`Private`offsetCurveOpacity$$,
                     0.8, ""}, 0, 1, ImageSize -> Small, ControlPlacement -> 
                    57}, {{CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveTF$$, False, ""}, {True, False}, ControlPlacement -> 58}, {{
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveAngle$$, Rational[1, 4] Pi, ""}, -Pi, Pi, ImageSize -> Small,
                     ControlPlacement -> 59}, {{
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveDistance$$, 0.06421622794870045, ""}, 0, 1.5393804002589986`,
                     ImageSize -> Small, ControlPlacement -> 60}, {{
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveCount$$, 12, ""}, 1, 60, 1, ImageSize -> Small, 
                    ControlPlacement -> 61}, {{
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveThickness$$, -3., ""}, -4, -0.5, ImageSize -> Small, 
                    ControlPlacement -> 62}, {{
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveColor$$, 
                    RGBColor[0.49978279999999997`, 0.6025278, 0.2508104], ""}, 
                    RGBColor[1, 0, 0], ImageSize -> Tiny, AppearanceElements -> 
                    "Spectrum", ControlPlacement -> 63}, {{
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveOpacity$$, 0.8, ""}, 0, 1, ImageSize -> Small, 
                    ControlPlacement -> 64}, {{
                    CalculateScan`PlotterScanner`Private`pedalCurveTF$$, 
                    False, ""}, {True, False}, ControlPlacement -> 65}, {{
                    CalculateScan`PlotterScanner`Private`\
pedalCurveCountFactor$$, 0.3, ""}, 0, 1, ImageSize -> Small, ControlPlacement -> 
                    66}, {{CalculateScan`PlotterScanner`Private`\
pedalCurveThickness$$, -3., ""}, -4, -0.5, ImageSize -> Small, 
                    ControlPlacement -> 67}, {{
                    CalculateScan`PlotterScanner`Private`pedalCurveColor$$, 
                    RGBColor[0.32894650000000003`, 0.5006225, 0.2625337], ""}, 
                    RGBColor[1, 0, 0], ImageSize -> Tiny, AppearanceElements -> 
                    "Spectrum", ControlPlacement -> 68}, {{
                    CalculateScan`PlotterScanner`Private`pedalCurveOpacity$$, 
                    0.8, ""}, 0, 1, ImageSize -> Small, ControlPlacement -> 
                    69}, {{CalculateScan`PlotterScanner`Private`\
pedalCurvePoints$$, "curve", ""}, {"grid", "curve"}, ImageSize -> Small, 
                    ControlPlacement -> 70}, {{
                    CalculateScan`PlotterScanner`Private`negativePedalCurveTF$\
$, False, ""}, {True, False}, ControlPlacement -> 71}, {{
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurveCountFactor$$, 0.3, ""}, 0, 1, ImageSize -> Small, 
                    ControlPlacement -> 72}, {{
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurveThickness$$, -3., ""}, -4, -0.5, ImageSize -> Small, 
                    ControlPlacement -> 73}, {{
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurveColor$$, 
                    RGBColor[0.7464574, 0.2952580000000001, 0.2454606], ""}, 
                    RGBColor[1, 0, 0], ImageSize -> Tiny, AppearanceElements -> 
                    "Spectrum", ControlPlacement -> 74}, {{
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurveOpacity$$, 0.8, ""}, 0, 1, ImageSize -> Small, 
                    ControlPlacement -> 75}, {{
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurvePoints$$, "curve", ""}, {"curve", "grid"}, ImageSize -> 
                    Small, ControlPlacement -> 76}, {{
                    CalculateScan`PlotterScanner`Private`contraPedalCurveTF$$,
                     False, ""}, {True, False}, ControlPlacement -> 77}, {{
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurveCountFactor$$, 0.3, ""}, 0, 1, ImageSize -> Small, 
                    ControlPlacement -> 78}, {{
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurveThickness$$, -3., ""}, -4, -0.5, ImageSize -> Small, 
                    ControlPlacement -> 79}, {{
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurveColor$$, 
                    RGBColor[0.7464574, 0.2952580000000001, 0.2454606], ""}, 
                    RGBColor[1, 0, 0], ImageSize -> Tiny, AppearanceElements -> 
                    "Spectrum", ControlPlacement -> 80}, {{
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurveOpacity$$, 0.8, ""}, 0, 1, ImageSize -> Small, 
                    ControlPlacement -> 81}, {{
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurvePoints$$, "curve", ""}, {"curve", "grid"}, ImageSize -> Small,
                     ControlPlacement -> 82}, {{
                    CalculateScan`PlotterScanner`Private`dualCurveTF$$, False,
                     ""}, {True, False}, ControlPlacement -> 83}, {{
                    CalculateScan`PlotterScanner`Private`dualCurveCountFactor$\
$, 0.3, ""}, 0, 1, ImageSize -> Small, ControlPlacement -> 84}, {{
                    CalculateScan`PlotterScanner`Private`dualCurveThickness$$,\
 -3., ""}, -4, -0.5, ImageSize -> Small, ControlPlacement -> 85}, {{
                    CalculateScan`PlotterScanner`Private`dualCurveColor$$, 
                    RGBColor[0.2860602, 0.4663408, 0.29410879999999995`], ""}, 
                    RGBColor[1, 0, 0], ImageSize -> Tiny, AppearanceElements -> 
                    "Spectrum", ControlPlacement -> 86}, {{
                    CalculateScan`PlotterScanner`Private`dualCurveOpacity$$, 
                    0.8, ""}, 0, 1, ImageSize -> Small, ControlPlacement -> 
                    87}, {{CalculateScan`PlotterScanner`Private`\
dualPedalCurvePoints$$, "curve", ""}, {"curve", "grid"}, ImageSize -> Small, 
                    ControlPlacement -> 88}, {{
                    CalculateScan`PlotterScanner`Private`inverseCurveTF$$, 
                    False, ""}, {True, False}, ControlPlacement -> 89}, {{
                    CalculateScan`PlotterScanner`Private`\
inverseCurveCountFactor$$, 0.3, ""}, 0, 1, ImageSize -> Small, 
                    ControlPlacement -> 90}, {{
                    CalculateScan`PlotterScanner`Private`\
inverseCurveThickness$$, -3., ""}, -4, -0.5, ImageSize -> Small, 
                    ControlPlacement -> 91}, {{
                    CalculateScan`PlotterScanner`Private`inverseCurveColor$$, 
                    
                    RGBColor[0.2860602, 0.4663408, 0.29410879999999995`], ""}, 
                    RGBColor[1, 0, 0], ImageSize -> Tiny, AppearanceElements -> 
                    "Spectrum", ControlPlacement -> 92}, {{
                    CalculateScan`PlotterScanner`Private`inverseCurveOpacity$$\
, 0.8, ""}, 0, 1, ImageSize -> Small, ControlPlacement -> 93}, {{
                    CalculateScan`PlotterScanner`Private`inverseCurvePoints$$,
                     "grid", ""}, {"curve", "grid"}, ImageSize -> Small, 
                    ControlPlacement -> 94}, {{
                    CalculateScan`PlotterScanner`Private`\
inverseCurveCircleRadiusFactor$$, 0.4636476090008061, ""}, 0, 1, ImageSize -> 
                    Small, ControlPlacement -> 95}, {{
                    CalculateScan`PlotterScanner`Private`isopticCurveTF$$, 
                    False, ""}, {True, False}, ControlPlacement -> 96}, {{
                    CalculateScan`PlotterScanner`Private`isopticCurveAngle$$, 
                    Rational[1, 3] Pi, ""}, 0, Pi, ImageSize -> Small, 
                    ControlPlacement -> 97}, {{
                    CalculateScan`PlotterScanner`Private`\
isopticCurveThickness$$, -3., ""}, -4, -0.5, ImageSize -> Small, 
                    ControlPlacement -> 98}, {{
                    CalculateScan`PlotterScanner`Private`isopticCurveColor$$, 
                    
                    RGBColor[
                    0.8519382, 0.7451437999999999, 0.31752080000000005`], ""}, 
                    RGBColor[1, 0, 0], ImageSize -> Tiny, AppearanceElements -> 
                    "Spectrum", ControlPlacement -> 99}, {{
                    CalculateScan`PlotterScanner`Private`isopticCurveOpacity$$\
, 0.8, ""}, 0, 1, ImageSize -> Small, ControlPlacement -> 100}, {{
                    CalculateScan`PlotterScanner`Private`orthotomicCurveTF$$, 
                    False, ""}, {True, False}, ControlPlacement -> 101}, {{
                    CalculateScan`PlotterScanner`Private`orthotomicCurveAngle$\
$, Rational[1, 3] Pi, ""}, 0, Pi, ImageSize -> Small, ControlPlacement -> 
                    102}, {{
                    CalculateScan`PlotterScanner`Private`\
orthotomicCurveCountFactor$$, 0.3, ""}, 0, 1, ImageSize -> Small, 
                    ControlPlacement -> 103}, {{
                    CalculateScan`PlotterScanner`Private`\
orthotomicCurveThickness$$, -3., ""}, -4, -0.5, ImageSize -> Small, 
                    ControlPlacement -> 104}, {{
                    CalculateScan`PlotterScanner`Private`orthotomicCurveColor$\
$, 
                    RGBColor[
                    0.8519382, 0.7451437999999999, 0.31752080000000005`], ""}, 
                    RGBColor[1, 0, 0], ImageSize -> Tiny, AppearanceElements -> 
                    "Spectrum", ControlPlacement -> 105}, {{
                    CalculateScan`PlotterScanner`Private`\
orthotomicCurveOpacity$$, 0.8, ""}, 0, 1, ImageSize -> Small, 
                    ControlPlacement -> 106}, {{
                    CalculateScan`PlotterScanner`Private`\
orthotomicCurvePoints$$, "curve", ""}, {"curve", "grid"}, ImageSize -> Small, 
                    ControlPlacement -> 107}, 
                    Style[
                    Overlay[{
                    RawBoxes[
                    PaneBox[
                    GraphicsBox[
                    
                    RasterBox[{{{0, 0, 0, 24}}, {{0, 0, 0, 9}}, {{0, 0, 0, 
                    10}}, {{0, 0, 0, 10}}, {{0, 0, 0, 9}}, {{0, 0, 0, 9}}, {{
                    0, 0, 0, 8}}, {{0, 0, 0, 8}}, {{0, 0, 0, 9}}, {{0, 0, 0, 
                    8}}, {{0, 0, 0, 7}}, {{0, 0, 0, 7}}, {{0, 0, 0, 8}}, {{0, 
                    0, 0, 6}}, {{0, 0, 0, 6}}, {{0, 0, 0, 6}}, {{0, 0, 0, 
                    6}}, {{0, 0, 0, 5}}, {{0, 0, 0, 6}}, {{0, 0, 0, 5}}, {{0, 
                    0, 0, 4}}, {{0, 0, 0, 4}}, {{0, 0, 0, 5}}, {{0, 0, 0, 
                    5}}, {{0, 0, 0, 3}}, {{0, 0, 0, 4}}, {{0, 0, 0, 3}}, {{0, 
                    0, 0, 3}}, {{0, 0, 0, 3}}, {{0, 0, 0, 3}}, {{0, 0, 0, 
                    2}}, {{0, 0, 0, 2}}, {{0, 0, 0, 2}}, {{0, 0, 0, 2}}, {{0, 
                    0, 0, 1}}, {{0, 0, 0, 2}}, {{0, 0, 0, 2}}, {{0, 0, 0, 
                    0}}, {{0, 0, 0, 1}}, {{255, 255, 255, 0}}, {{255, 255, 
                    255, 0}}, {{255, 255, 255, 0}}, {{255, 255, 255, 0}}, {{
                    255, 255, 255, 0}}, {{255, 255, 255, 0}}}, {{0, 45}, {
                    2500, 0}}, {0, 255}, ColorFunction -> RGBColor], 
                    ImageSize -> {2500, 45}, 
                    PlotRange -> {{0, 2500}, {0, 45}}], ImageSize -> 
                    Scaled[1], ScrollPosition -> {0., 0.}]], 
                    Pane[
                    Column[{
                    Row[{
                    Invisible[
                    RawBoxes[
                    GraphicsBox[
                    TagBox[
                    
                    RasterBox[{{{255, 132, 0}, {255, 132, 0}, {255, 132, 0}, {
                    255, 132, 0}, {255, 132, 0}, {255, 132, 0}}, {{255, 132, 
                    0}, {255, 132, 0}, {255, 132, 0}, {255, 132, 0}, {255, 
                    132, 0}, {255, 132, 0}}}, {{0, 2}, {6, 0}}, {0, 255}, 
                    ColorFunction -> RGBColor], 
                    BoxForm`ImageTag[
                    "Byte", ColorSpace -> "RGB", Interleaving -> True], 
                    Selectable -> False], BaseStyle -> "ImageGraphics", 
                    ImageSize -> Magnification[1], ImageSizeRaw -> {6, 2}, 
                    BaselinePosition -> (Scaled[0] -> Center), 
                    PlotRange -> {{0, 6}, {0, 2}}]]], " ", 
                    Column[{"Horizontal plot range:", 
                    Row[{
                    Manipulate`Place[1], "  ", 
                    Manipulate`Place[2], "  ", 
                    Manipulate`Place[3]}]}]}], 
                    PaneSelector[{True -> Grid[{{
                    Button[
                    Row[{
                    RawBoxes[
                    GraphicsBox[
                    TagBox[
                    
                    RasterBox[{{{255, 132, 0}, {255, 132, 0}, {255, 132, 0}, {
                    255, 132, 0}, {255, 132, 0}, {255, 132, 0}}, {{255, 132, 
                    0}, {255, 132, 0}, {255, 132, 0}, {255, 132, 0}, {255, 
                    132, 0}, {255, 132, 0}}}, {{0, 2}, {6, 0}}, {0, 255}, 
                    ColorFunction -> RGBColor], 
                    BoxForm`ImageTag[
                    "Byte", ColorSpace -> "RGB", Interleaving -> True], 
                    Selectable -> False], BaseStyle -> "ImageGraphics", 
                    ImageSize -> Magnification[1], ImageSizeRaw -> {6, 2}, 
                    BaselinePosition -> (Scaled[0] -> Center), 
                    PlotRange -> {{0, 6}, {0, 2}}]], " "}], 
                    CalculateUtilities`GraphicsUtilities`Private`more$$ = 
                    False, Appearance -> None, BaseStyle -> {}], 
                    Button[
                    "Fewer controls", 
                    CalculateUtilities`GraphicsUtilities`Private`more$$ = 
                    False, Appearance -> None, BaseStyle -> {}]}, {"", 
                    Item[
                    Column[{
                    Column[{"Vertical plot range:", 
                    Row[{
                    Manipulate`Place[4], "  ", 
                    Manipulate`Place[5], "  ", 
                    Manipulate`Place[6]}], 
                    Manipulate`Place[7]}], 
                    Column[{
                    Row[{
                    Manipulate`Place[8], "  ", 
                    Manipulate`Place[9]}], 
                    Row[{
                    Manipulate`Place[10], "   settings: ", 
                    Button[
                    "1", CalculateScan`PlotterScanner`Private`ar$$ = 1, 
                    ImageSize -> Small, Appearance -> "Palette", 
                    BaseStyle -> {}], "  ", 
                    Button["unscaled axes", 
                    (If[
                    1/4 <= # <= 4, 
                    CalculateScan`PlotterScanner`Private`ar$$ = #]& )[Abs[
                    Apply[
                    Subtract, CalculateScan`PlotterScanner`Private`pRY]]/Abs[
                    Apply[
                    Subtract, CalculateScan`PlotterScanner`Private`pRX]]], 
                    ImageSize -> Small, Appearance -> "Palette", 
                    BaseStyle -> {}]}]}], 
                    TabView[{Row[{" ", 
                    Dynamic[
                    If[CalculateScan`PlotterScanner`Private`tangentTF$$, 
                    Style[
                    "\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`tangentColor$$, 
                    Bold], " "]], 
                    Tooltip[" tangents             ", 
                    Style[" family of tangents at points along the curve ", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> 
                    Grid[{{"show tangents", 
                    Manipulate`Place[11]}, {"tangent count", 
                    Manipulate`Place[12]}, {"tangent length", 
                    Manipulate`Place[13]}, {"tangent thickness", 
                    Manipulate`Place[14]}, {"tangent color", 
                    Manipulate`Place[15]}, {"tangent opacity", 
                    Manipulate`Place[16]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    False}}], Row[{" ", 
                    Dynamic[
                    If[CalculateScan`PlotterScanner`Private`normalTF$$, 
                    Style[
                    "\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`normalColor$$, Bold],
                     " "]], 
                    Tooltip[" normals              ", 
                    Style[" family of normals at points along the curve ", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> 
                    Grid[{{"show normals", 
                    Manipulate`Place[17]}, {"normal count", 
                    Manipulate`Place[18]}, {"normal length", 
                    Manipulate`Place[19]}, {"normal thickness", 
                    Manipulate`Place[20]}, {"normal color", 
                    Manipulate`Place[21]}, {"normal opacity", 
                    Manipulate`Place[22]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    False}}], Row[{" ", 
                    Dynamic[
                    If[CalculateScan`PlotterScanner`Private`tiltedTangentTF$$, 
                    Style[
                    "\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`tiltedTangentColor$$,
                     Bold], " "]], 
                    Tooltip[" tilted tangents      ", 
                    Style[
                    " family of tilted tangents at points along the curve ", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> 
                    Grid[{{"show tilted tangents", 
                    Manipulate`Place[23]}, {"tilted tangent angle", 
                    Manipulate`Place[24]}, {"tilted tangent count", 
                    Manipulate`Place[25]}, {"tilted tangent length", 
                    Manipulate`Place[26]}, {"tilted tangent thickness", 
                    Manipulate`Place[27]}, {"tilted tangent color", 
                    Manipulate`Place[28]}, {"tilted tangent opacity", 
                    Manipulate`Place[29]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    False}}], Row[{" ", 
                    Dynamic[
                    If[
                    CalculateScan`PlotterScanner`Private`osculatingCircleTF$$, 
                    Style[
                    "\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleColor$$, Bold], " "]], 
                    Tooltip[" osculating circles   ", 
                    Style[
                    " family of osculating circles (circles that are tangent \
to the curve) at points along the curve", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> Column[{
                    Grid[{{"show osculating circles", 
                    Manipulate`Place[30]}, {"osculating circle count", 
                    Manipulate`Place[31]}, {"osculating circle thickness", 
                    Manipulate`Place[32]}, {"osculating circle color", 
                    Manipulate`Place[33]}, {"osculating circle opacity", 
                    Manipulate`Place[34]}, {"show circle radii", 
                    Manipulate`Place[35]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    True}}], 
                    Dynamic[
                    Style[
                    If[
                    And[
                    CalculateScan`PlotterScanner`Private`osculatingCircleTF$$, 
                    Not[
                    0.98 < CalculateScan`PlotterScanner`Private`ar$$ < 1.02]],
                     "(note than circles appear as ellipses for unequally\n\
scaled horizontal and vertical axes)", ""]], 
                    RGBColor[
                    0.6666666666666666, 0.6666666666666666, 
                    0.6666666666666666]]}, Alignment -> Left], Row[{" ", 
                    Dynamic[
                    If[
                    CalculateScan`PlotterScanner`Private`taylorParabolaTF$$, 
                    Style[
                    "\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`taylorParabolaColor$$\
, Bold], " "]], 
                    Tooltip[" Taylor parabolas     ", 
                    Style[" family of second order Taylor approximations", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> Column[{
                    Grid[{{"show Taylor parabolas", 
                    Manipulate`Place[36]}, {"Taylor parabola count", 
                    Manipulate`Place[37]}, {"Taylor parabola thickness", 
                    Manipulate`Place[38]}, {"Taylor parabola color", 
                    Manipulate`Place[39]}, {"Taylor parabola opacity", 
                    Manipulate`Place[40]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    True}}]}, Alignment -> Left], Row[{" ", 
                    Dynamic[
                    If[CalculateScan`PlotterScanner`Private`involuteTF$$, 
                    Style[
                    "\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`involuteColor$$, 
                    Bold], " "]], 
                    Tooltip[" involutes            ", 
                    Style[
                    " family of involutes (curves traced out by strings \
unwound from the curve) of the curve", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> 
                    Grid[{{"show involutes", 
                    Manipulate`Place[41]}, {"involute count", 
                    Manipulate`Place[42]}, {"involute thickness", 
                    Manipulate`Place[43]}, {"involute color", 
                    Manipulate`Place[44]}, {"involute opacity", 
                    Manipulate`Place[45]}, {"directions", 
                    Row[{"\[DoubleLongLeftArrow]", 
                    Manipulate`Place[46], "  \[DoubleLongRightArrow]", 
                    Manipulate`Place[47]}]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    True}}], Row[{" ", 
                    Dynamic[
                    If[CalculateScan`PlotterScanner`Private`evoluteTF$$, 
                    Style[
                    "\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`evoluteColor$$, 
                    Bold], " "]], 
                    Tooltip[" evolute              ", 
                    Style[
                    " the evolute of a given curve (curve of the centers of \
the osculating circles))", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> 
                    Grid[{{"show evolute", 
                    Manipulate`Place[48]}, {"evolute thickness", 
                    Manipulate`Place[49]}, {"evolute color", 
                    Manipulate`Place[50]}, {"evolute opacity", 
                    Manipulate`Place[51]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    False}}], Row[{" ", 
                    Dynamic[
                    If[CalculateScan`PlotterScanner`Private`offsetCurveTF$$, 
                    Style[
                    "\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`offsetCurveColor$$, 
                    Bold], " "]], 
                    Tooltip[" offset curves        ", 
                    Style[
                    " family of offset curves (curves shifted a fixed \
distance perpendicular to each point of the original curve) ", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> 
                    Grid[{{"show offset curves", 
                    Manipulate`Place[52]}, {"offset curve distance", 
                    Manipulate`Place[53]}, {"offset curve count", 
                    Manipulate`Place[54]}, {"offset curve thickness", 
                    Manipulate`Place[55]}, {"offset curve color", 
                    Manipulate`Place[56]}, {"offset curve opacity", 
                    Manipulate`Place[57]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    False}}], Row[{" ", 
                    Dynamic[
                    If[
                    CalculateScan`PlotterScanner`Private`tiltedOffsetCurveTF$$\
, 
                    Style["\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveColor$$, Bold], " "]], 
                    Tooltip[" tilted offset curves ", 
                    Style[
                    " family of tilted offset curves (curves shifted a fixed \
distance in a direction with a fixed angle \n                                 \
     to the local normal to each point of the original curve) ", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> 
                    Grid[{{"show tilted offset curves", 
                    Manipulate`Place[58]}, {"tilted offset curve angle", 
                    Manipulate`Place[59]}, {"tilted offset curve distance", 
                    Manipulate`Place[60]}, {"tilted offset curve count", 
                    Manipulate`Place[61]}, {"tilted offset curve thickness", 
                    Manipulate`Place[62]}, {"tilted offset curve color", 
                    Manipulate`Place[63]}, {"tilted offset curve opacity", 
                    Manipulate`Place[64]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    False}}], Row[{" ", 
                    Dynamic[
                    If[CalculateScan`PlotterScanner`Private`pedalCurveTF$$, 
                    Style[
                    "\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`pedalCurveColor$$, 
                    Bold], " "]], 
                    Tooltip[" pedal curves         ", 
                    Style[
                    " family of pedal curves (curves on the tangents of the \
given curve perpendicular to a given point) ", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> 
                    Grid[{{"show pedal curves", 
                    Manipulate`Place[65]}, {"pedal curve count", 
                    Manipulate`Place[66]}, {"pedal curve thickness", 
                    Manipulate`Place[67]}, {"pedal curve color", 
                    Manipulate`Place[68]}, {"pedal curve opacity", 
                    Manipulate`Place[69]}, {"pedal points", 
                    Manipulate`Place[70]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    True}}], Row[{" ", 
                    Dynamic[
                    If[
                    CalculateScan`PlotterScanner`Private`negativePedalCurveTF$\
$, 
                    Style["\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurveColor$$, Bold], " "]], 
                    Tooltip[" negative pedal curves", 
                    Style[
                    " family of negative pedal curves (envelope curves of \
lines perpendicular to the given curve and a given point) ", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> 
                    Grid[{{"show negative pedal curves", 
                    Manipulate`Place[71]}, {"negative pedal curve count", 
                    Manipulate`Place[72]}, {
                    "negative pedal curve thickness", 
                    Manipulate`Place[73]}, {"negative pedal curve color", 
                    Manipulate`Place[74]}, {"negative pedal curve opacity", 
                    Manipulate`Place[75]}, {"negative pedal points", 
                    Manipulate`Place[76]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    False}}], Row[{" ", 
                    Dynamic[
                    If[
                    CalculateScan`PlotterScanner`Private`contraPedalCurveTF$$, 
                    Style[
                    "\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurveColor$$, Bold], " "]], 
                    Tooltip[" contrapedal curves   ", 
                    Style[
                    " family of contrapedal curves (curves on the normals of \
the given curve perpendicular to a given point) ", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> 
                    Grid[{{"show contrapedal curves", 
                    Manipulate`Place[77]}, {"contrapedal curve count", 
                    Manipulate`Place[78]}, {"contrapedal curve thickness", 
                    Manipulate`Place[79]}, {"contrapedal curve color", 
                    Manipulate`Place[80]}, {"contrapedal curve opacity", 
                    Manipulate`Place[81]}, {"contrapedal pedal points", 
                    Manipulate`Place[82]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    False}}], Row[{" ", 
                    Dynamic[
                    If[CalculateScan`PlotterScanner`Private`dualCurveTF$$, 
                    Style[
                    "\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`dualCurveColor$$, 
                    Bold], " "]], 
                    Tooltip[" dual curves          ", 
                    Style[
                    " dual curve of the given curve (the dual curbe maps \
inflection points to cusps) ", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> 
                    Grid[{{"show dual curves", 
                    Manipulate`Place[83]}, {"dual curve count", 
                    Manipulate`Place[84]}, {"dual curve thickness", 
                    Manipulate`Place[85]}, {"dual curve color", 
                    Manipulate`Place[86]}, {"dual curve opacity", 
                    Manipulate`Place[87]}, {"dual curve points", 
                    Manipulate`Place[88]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    False}}], Row[{" ", 
                    Dynamic[
                    If[
                    CalculateScan`PlotterScanner`Private`inverseCurveTF$$, 
                    Style[
                    "\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`inverseCurveColor$$, 
                    Bold], " "]], 
                    Tooltip[" inverse curves       ", 
                    Style[
                    " inverse curves (curves resulting from carrying of an \
inversion on circles) ", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> 
                    Grid[{{"show inverse curves", 
                    Manipulate`Place[89]}, {"inverse curve count", 
                    Manipulate`Place[90]}, {"inverse curve thickness", 
                    Manipulate`Place[91]}, {"inverse curve color", 
                    Manipulate`Place[92]}, {"inverse curve opacity", 
                    Manipulate`Place[93]}, {"inversion curve points", 
                    Manipulate`Place[94]}, {"inversion circle radius", 
                    Manipulate`Place[95]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    False}}], Row[{" ", 
                    Dynamic[
                    If[
                    CalculateScan`PlotterScanner`Private`isopticCurveTF$$, 
                    Style[
                    "\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`isopticCurveColor$$, 
                    Bold], " "]], 
                    Tooltip[" isoptic curves       ", 
                    Style[
                    " inverse curves (points on isoptic curves have two \
tangents with the given curve and the two tangents meet with the specified \
angle)) ", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> Column[{
                    Grid[{{"show isoptic curves", 
                    Manipulate`Place[96]}, {"isoptic curve angle", 
                    Manipulate`Place[97]}, {"isoptic curve thickness", 
                    Manipulate`Place[98]}, {"isoptic curve color", 
                    Manipulate`Place[99]}, {"isoptic curve opacity", 
                    Manipulate`Place[100]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    False}}], 
                    Dynamic[
                    Style[
                    If[
                    TrueQ[
                    And[
                    CalculateScan`PlotterScanner`Private`isopticCurveTF$$, 
                    CalculateScan`PlotterScanner`Private`x1x2SCPCurves === \
{}]], "(note than the set of isoptic curves for a given angle can be empty)", 
                    ""]], 
                    RGBColor[
                    0.6666666666666666, 0.6666666666666666, 
                    0.6666666666666666]]}, Alignment -> Left], Row[{" ", 
                    Dynamic[
                    If[
                    CalculateScan`PlotterScanner`Private`orthotomicCurveTF$$, 
                    
                    Style[
                    "\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`orthotomicCurveColor$\
$, Bold], " "]], 
                    Tooltip[" orthotomic curves    ", 
                    Style[
                    " orthotomic curves (points of reflections of a given \
point on curve tangents)) ", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> 
                    Grid[{{"show orthotomic curves", 
                    Manipulate`Place[101]}, {"orthotomic curve angle", 
                    Manipulate`Place[102]}, {"orthotomic curve count", 
                    Manipulate`Place[103]}, {"orthotomic curve thickness", 
                    Manipulate`Place[104]}, {"orthotomic curve color", 
                    Manipulate`Place[105]}, {"orthotomic curve opacity", 
                    Manipulate`Place[106]}, {"orthotomic curve points", 
                    Manipulate`Place[107]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    False}}]}, 2, ImageSize -> {All, Automatic}, 
                    ControlPlacement -> Left]}, 
                    Dividers -> {None, {False, True, True, True}}, Spacings -> 
                    1], ItemSize -> Scaled[1], 
                    Frame -> {None, None, True, None}]}}, FrameStyle -> 
                    GrayLevel[0.9], Alignment -> Left, Spacings -> {0, 0.8}], 
                    False -> Button[
                    Row[{
                    RawBoxes[
                    GraphicsBox[
                    TagBox[
                    
                    RasterBox[{{{255, 255, 255}, {255, 255, 255}, {255, 132, 
                    0}, {255, 132, 0}, {255, 255, 255}, {255, 255, 255}}, {{
                    255, 255, 255}, {255, 255, 255}, {255, 132, 0}, {255, 132,
                     0}, {255, 255, 255}, {255, 255, 255}}, {{255, 132, 0}, {
                    255, 132, 0}, {255, 132, 0}, {255, 132, 0}, {255, 132, 
                    0}, {255, 132, 0}}, {{255, 132, 0}, {255, 132, 0}, {255, 
                    132, 0}, {255, 132, 0}, {255, 132, 0}, {255, 132, 0}}, {{
                    255, 255, 255}, {255, 255, 255}, {255, 132, 0}, {255, 132,
                     0}, {255, 255, 255}, {255, 255, 255}}, {{255, 255, 
                    255}, {255, 255, 255}, {255, 132, 0}, {255, 132, 0}, {255,
                     255, 255}, {255, 255, 255}}}, {{0, 6}, {6, 0}}, {0, 255},
                     ColorFunction -> RGBColor], 
                    BoxForm`ImageTag[
                    "Byte", ColorSpace -> "RGB", Interleaving -> True], 
                    Selectable -> False], BaseStyle -> "ImageGraphics", 
                    ImageSize -> Magnification[1], ImageSizeRaw -> {6, 6}, 
                    BaselinePosition -> (Scaled[0.3] -> Center), 
                    PlotRange -> {{0, 6}, {0, 6}}]], " More controls"}], 
                    CalculateUtilities`GraphicsUtilities`Private`more$$ = 
                    True, Appearance -> None, BaseStyle -> {}]}, 
                    Dynamic[
                    CalculateUtilities`GraphicsUtilities`Private`more$$], 
                    ImageSize -> Automatic]}], 
                    ImageMargins -> {{20, 30}, {10, 10}}]}, {1, 2}, 2, 
                    Alignment -> {Left, Top}]], {{
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleLastParamaters$$, {}}, ControlType -> None}, {{
                    CalculateScan`PlotterScanner`Private`osculatingCircles$$, \
{}}, ControlType -> None}, {{
                    CalculateScan`PlotterScanner`Private`\
taylorParabolaLastParamaters$$, {}}, ControlType -> None}, {{
                    CalculateScan`PlotterScanner`Private`taylorParabolas$$, \
{}}, ControlType -> None}, {{
                    CalculateScan`PlotterScanner`Private`\
offsetCurveLastParamaters$$, {}}, ControlType -> None}, {{
                    CalculateScan`PlotterScanner`Private`\
offsetCurvePlotCurves$$, {}}, ControlType -> None}, {{
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveLastParamaters$$, {}}, ControlType -> None}, {{
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurvePlotCurves$$, {}}, ControlType -> None}, {{
                    CalculateScan`PlotterScanner`Private`\
pedalCurveLastParamaters$$, {}}, ControlType -> None}, {{
                    CalculateScan`PlotterScanner`Private`pedalCurvePlotCurves$\
$, {}}, ControlType -> None}, {{
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurveLastParamaters$$, {}}, ControlType -> None}, {{
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurvePlotCurves$$, {}}, ControlType -> None}, {{
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurveLastParamaters$$, {}}, ControlType -> None}, {{
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurvePlotCurves$$, {}}, ControlType -> None}, {{
                    CalculateScan`PlotterScanner`Private`\
dualCurveLastParamaters$$, {}}, ControlType -> None}, {{
                    CalculateScan`PlotterScanner`Private`dualCurvePlotCurves$$\
, {}}, ControlType -> None}, {{
                    CalculateScan`PlotterScanner`Private`\
inverseLastParamaters$$, {}}, ControlType -> None}, {{
                    CalculateScan`PlotterScanner`Private`\
inverseCurvePlotCurves$$, {}}, ControlType -> None}, {{
                    CalculateScan`PlotterScanner`Private`\
orthotomicLastParamaters$$, {}}, ControlType -> None}, {{
                    CalculateScan`PlotterScanner`Private`\
orthotomicCurvePlotCurves$$, {}}, ControlType -> None}, {{
                    CalculateScan`PlotterScanner`Private`\
isopticLastParamaters$$, {}}, ControlType -> None}, {{
                    CalculateScan`PlotterScanner`Private`\
isopticCurvePlotCurves$$, {}}, ControlType -> None}}, 
                  "Options" :> {
                   ControlPlacement -> {
                    Bottom, Bottom, Bottom, Bottom, Bottom, Bottom, Bottom, 
                    Bottom, Bottom, Bottom, Bottom, Bottom, Bottom, Bottom, 
                    Bottom, Bottom, Bottom, Bottom, Bottom, Bottom}, 
                    TrackedSymbols :> Manipulate, Paneled -> False, 
                    ControlPlacement -> Bottom, 
                    FrameMargins -> {{0, 0}, {0, 10}}, Paneled -> False, 
                    AppearanceElements -> {}, 
                    LabelStyle -> {
                    "DialogStyle", FontColor -> GrayLevel[0.25]}}, 
                  "DefaultOptions" :> {}], SingleEvaluation -> True], 
                Initialization :> ({
                  Attributes[CalculateScan`PlotterScanner`Private`x1Old$] = {
                    Temporary}, 
                   Attributes[CalculateScan`PlotterScanner`Private`x2Old$] = {
                    Temporary}, 
                   Attributes[
                    CalculateScan`PlotterScanner`Private`fy1Old$] = {
                    Temporary}, 
                   Attributes[
                    CalculateScan`PlotterScanner`Private`fy2Old$] = {
                    Temporary}, 
                   Attributes[CalculateScan`PlotterScanner`Private`X1$] = {
                    Temporary}, 
                   Attributes[CalculateScan`PlotterScanner`Private`X2$] = {
                    Temporary}, 
                   Attributes[
                    CalculateScan`PlotterScanner`Private`singularities$] = {
                    Temporary}, 
                   Attributes[CalculateScan`PlotterScanner`Private`ts$] = {
                    Temporary}, 
                   Attributes[CalculateScan`PlotterScanner`Private`xL$] = {
                    Temporary}, 
                   Attributes[CalculateScan`PlotterScanner`Private`xU$] = {
                    Temporary}, 
                   Attributes[CalculateScan`PlotterScanner`Private`yL$] = {
                    Temporary}, 
                   Attributes[CalculateScan`PlotterScanner`Private`yU$] = {
                    Temporary}, 
                   Attributes[CalculateScan`PlotterScanner`Private`pRX$] = {
                    Temporary}, 
                   Attributes[
                    CalculateScan`PlotterScanner`Private`\[CapitalDelta]X$] = \
{Temporary}, Attributes[
                    CalculateScan`PlotterScanner`Private`\[CapitalDelta]y$] = \
{Temporary}, Attributes[CalculateScan`PlotterScanner`Private`Y1$] = {
                    Temporary}, 
                   Attributes[CalculateScan`PlotterScanner`Private`Y2$] = {
                    Temporary}, 
                   Attributes[CalculateScan`PlotterScanner`Private`pRY$] = {
                    Temporary}, 
                   Attributes[
                    CalculateScan`PlotterScanner`Private`originalCurvePlot0$] = \
{Temporary}, Attributes[
                    CalculateScan`PlotterScanner`Private`originalCurvePlot$] = \
{Temporary}, Attributes[
                    CalculateScan`PlotterScanner`Private`tangentsLines$] = {
                    Temporary}, 
                   Attributes[
                    CalculateScan`PlotterScanner`Private`tangentLinePlot$] = {
                    Temporary}, 
                   Attributes[
                    CalculateScan`PlotterScanner`Private`normalLines$] = {
                    Temporary}, 
                   Attributes[
                    CalculateScan`PlotterScanner`Private`normalLinePlot$] = {
                    Temporary}, 
                   Attributes[
                    CalculateScan`PlotterScanner`Private`tiltedTangentLines$] = \
{Temporary}, Attributes[
                    CalculateScan`PlotterScanner`Private`\
tiltedTangentLinePlot$] = {Temporary}, 
                   Attributes[
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleRadii$] = {Temporary}, 
                   Attributes[
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleLastParamaters$] = {Temporary}, 
                   Attributes[
                    CalculateScan`PlotterScanner`Private`osculatingCirclePlot$\
] = {Temporary}, Attributes[
                    CalculateScan`PlotterScanner`Private`taylorParabolaPlot$] = \
{Temporary}, Attributes[CalculateScan`PlotterScanner`Private`evolutePlot$] = {
                    Temporary}, 
                   Attributes[
                    CalculateScan`PlotterScanner`Private`involutePlotCurves$] = \
{Temporary}, Attributes[
                    CalculateScan`PlotterScanner`Private`\
involutePlotCurveLastParamaters$] = {Temporary}, 
                   Attributes[
                    CalculateScan`PlotterScanner`Private`involutePlot$] = {
                    Temporary}, 
                   Attributes[CalculateScan`PlotterScanner`Private`iTab$] = {
                    Temporary}, 
                   Attributes[CalculateScan`PlotterScanner`Private`xLi$] = {
                    Temporary}, 
                   Attributes[CalculateScan`PlotterScanner`Private`xUi$] = {
                    Temporary}, 
                   Attributes[
                    CalculateScan`PlotterScanner`Private`arcLength$] = {
                    Temporary}, 
                   Attributes[CalculateScan`PlotterScanner`Private`arcL$] = {
                    Temporary}, 
                   Attributes[CalculateScan`PlotterScanner`Private`xi1$] = {
                    Temporary}, 
                   Attributes[CalculateScan`PlotterScanner`Private`xi2$] = {
                    Temporary}, 
                   Attributes[
                    CalculateScan`PlotterScanner`Private`lineSegments$] = {
                    Temporary}, 
                   Attributes[
                    CalculateScan`PlotterScanner`Private`baseSegments$] = {
                    Temporary}, 
                   Attributes[
                    CalculateScan`PlotterScanner`Private`oSegments$] = {
                    Temporary}, 
                   Attributes[
                    CalculateScan`PlotterScanner`Private`arcFactors$] = {
                    Temporary}, 
                   Attributes[
                    CalculateScan`PlotterScanner`Private`iTabRight$] = {
                    Temporary}, 
                   Attributes[
                    CalculateScan`PlotterScanner`Private`iTabLeft$] = {
                    Temporary}, 
                   Attributes[
                    CalculateScan`PlotterScanner`Private`signedArcFactors$] = \
{Temporary}, Attributes[CalculateScan`PlotterScanner`Private`curvePoints$] = {
                    Temporary}, CalculateScan`PlotterScanner`Private`red = 
                   Or[
                    And[
                    Element[
                    C[1], Integers], 
                    CalculateScan`PlotterScanner`Private`y$ == -1, -Pi/2 + 
                    2 Pi C[1] == Removed["x"]], 
                    And[
                    Element[
                    C[1], Integers], 
                    CalculateScan`PlotterScanner`Private`y$ == -1, 
                    Pi + 2 Pi C[1] == Removed["x"]], 
                    And[
                    Element[
                    C[1], Integers], 
                    CalculateScan`PlotterScanner`Private`y$ == -1, 2 ArcTan[
                    Root[1 - 6 #^2 + 8 #^3 + #^4& , 1, 0]] + 2 Pi C[1] == 
                    Removed["x"]], 
                    And[
                    Element[
                    C[1], Integers], 
                    CalculateScan`PlotterScanner`Private`y$ == -1, 2 ArcTan[
                    Root[1 - 6 #^2 + 8 #^3 + #^4& , 2, 0]] + 2 Pi C[1] == 
                    Removed["x"]], 
                    And[
                    Element[
                    C[1], Integers], 
                    CalculateScan`PlotterScanner`Private`y$ == -1, 2 ArcTan[
                    Root[1 - 6 #^2 + 8 #^3 + #^4& , 3, 0]] + 2 Pi C[1] == 
                    Removed["x"]], 
                    And[
                    Element[
                    C[1], Integers], 
                    CalculateScan`PlotterScanner`Private`y$ == -1, 2 ArcTan[
                    Root[1 - 6 #^2 + 8 #^3 + #^4& , 4, 0]] + 2 Pi C[1] == 
                    Removed["x"]], 
                    And[
                    Element[
                    C[1], Integers], 2 ArcTan[
                    
                    Root[-1 + CalculateScan`PlotterScanner`Private`y$ - 
                    2 # + (15 + 
                    3 CalculateScan`PlotterScanner`Private`y$) #^2 - 
                    4 #^3 + (-15 + 
                    3 CalculateScan`PlotterScanner`Private`y$) #^4 - 
                    2 #^5 + (1 + 
                    CalculateScan`PlotterScanner`Private`y$) #^6& , 1]] + 
                    2 Pi C[1] == Removed["x"], 
                    1 + CalculateScan`PlotterScanner`Private`y$ != 0], 
                    And[
                    Element[
                    C[1], Integers], 2 ArcTan[
                    
                    Root[-1 + CalculateScan`PlotterScanner`Private`y$ - 
                    2 # + (15 + 
                    3 CalculateScan`PlotterScanner`Private`y$) #^2 - 
                    4 #^3 + (-15 + 
                    3 CalculateScan`PlotterScanner`Private`y$) #^4 - 
                    2 #^5 + (1 + 
                    CalculateScan`PlotterScanner`Private`y$) #^6& , 2]] + 
                    2 Pi C[1] == Removed["x"], 
                    1 + CalculateScan`PlotterScanner`Private`y$ != 0], 
                    And[
                    Element[
                    C[1], Integers], 2 ArcTan[
                    
                    Root[-1 + CalculateScan`PlotterScanner`Private`y$ - 
                    2 # + (15 + 
                    3 CalculateScan`PlotterScanner`Private`y$) #^2 - 
                    4 #^3 + (-15 + 
                    3 CalculateScan`PlotterScanner`Private`y$) #^4 - 
                    2 #^5 + (1 + 
                    CalculateScan`PlotterScanner`Private`y$) #^6& , 3]] + 
                    2 Pi C[1] == Removed["x"], 
                    1 + CalculateScan`PlotterScanner`Private`y$ != 0], 
                    And[
                    Element[
                    C[1], Integers], 2 ArcTan[
                    
                    Root[-1 + CalculateScan`PlotterScanner`Private`y$ - 
                    2 # + (15 + 
                    3 CalculateScan`PlotterScanner`Private`y$) #^2 - 
                    4 #^3 + (-15 + 
                    3 CalculateScan`PlotterScanner`Private`y$) #^4 - 
                    2 #^5 + (1 + 
                    CalculateScan`PlotterScanner`Private`y$) #^6& , 4]] + 
                    2 Pi C[1] == Removed["x"], 
                    1 + CalculateScan`PlotterScanner`Private`y$ != 0], 
                    And[
                    Element[
                    C[1], Integers], 2 ArcTan[
                    
                    Root[-1 + CalculateScan`PlotterScanner`Private`y$ - 
                    2 # + (15 + 
                    3 CalculateScan`PlotterScanner`Private`y$) #^2 - 
                    4 #^3 + (-15 + 
                    3 CalculateScan`PlotterScanner`Private`y$) #^4 - 
                    2 #^5 + (1 + 
                    CalculateScan`PlotterScanner`Private`y$) #^6& , 5]] + 
                    2 Pi C[1] == Removed["x"], 
                    1 + CalculateScan`PlotterScanner`Private`y$ != 0], 
                    And[
                    Element[
                    C[1], Integers], 2 ArcTan[
                    
                    Root[-1 + CalculateScan`PlotterScanner`Private`y$ - 
                    2 # + (15 + 
                    3 CalculateScan`PlotterScanner`Private`y$) #^2 - 
                    4 #^3 + (-15 + 
                    3 CalculateScan`PlotterScanner`Private`y$) #^4 - 
                    2 #^5 + (1 + 
                    CalculateScan`PlotterScanner`Private`y$) #^6& , 6]] + 
                    2 Pi C[1] == Removed["x"], 
                    1 + CalculateScan`PlotterScanner`Private`y$ != 0]], 
                   Attributes[CalculateScan`PlotterScanner`Private`y$] = {
                    Temporary}, 
                   CalculateScan`PlotterScanner`Private`addTangents[{
                    Pattern[CalculateScan`PlotterScanner`Private`fD0, 
                    Blank[]], 
                    Pattern[CalculateScan`PlotterScanner`Private`fD1, 
                    Blank[]]}, {
                    Pattern[CalculateScan`PlotterScanner`Private`x, 
                    Blank[]], 
                    Pattern[CalculateScan`PlotterScanner`Private`xMin, 
                    Blank[]], 
                    Pattern[CalculateScan`PlotterScanner`Private`xMax, 
                    Blank[]]}, 
                    Pattern[CalculateScan`PlotterScanner`Private`n, 
                    Blank[]], 
                    Pattern[CalculateScan`PlotterScanner`Private`opts, 
                    OptionsPattern[]]] := Quiet[
                    
                    Module[{}, 
                    CalculateScan`PlotterScanner`Private`\[Alpha] = 
                    OptionValue["TiltAngle"]; 
                    CalculateScan`PlotterScanner`Private`f = 
                    OptionValue["LengthFactor"]; 
                    CalculateScan`PlotterScanner`Private`bdq = 
                    OptionValue["Bidirectional"]; 
                    CalculateScan`PlotterScanner`Private`L = 
                    CalculateScan`PlotterScanner`Private`xMax - 
                    CalculateScan`PlotterScanner`Private`xMin; 
                    CalculateScan`PlotterScanner`Private`M = {{
                    Cos[CalculateScan`PlotterScanner`Private`\[Alpha]], 
                    Sin[CalculateScan`PlotterScanner`Private`\[Alpha]]}, {-
                    Sin[CalculateScan`PlotterScanner`Private`\[Alpha]], 
                    Cos[CalculateScan`PlotterScanner`Private`\[Alpha]]}}; 
                    CalculateScan`PlotterScanner`Private`pointsAndDirections = 
                    Cases[
                    Chop[
                    N[
                    Table[{{CalculateScan`PlotterScanner`Private`x, 
                    CalculateScan`PlotterScanner`Private`fD0[
                    CalculateScan`PlotterScanner`Private`x]}, 
                    CalculateScan`PlotterScanner`Private`f 
                    CalculateScan`PlotterScanner`Private`L 
                    Dot[CalculateScan`PlotterScanner`Private`M, 
                    Normalize[{1, 
                    CalculateScan`PlotterScanner`Private`fD1[
                    CalculateScan`PlotterScanner`Private`x]}]]}, {
                    CalculateScan`PlotterScanner`Private`x, 
                    CalculateScan`PlotterScanner`Private`xMin, 
                    CalculateScan`PlotterScanner`Private`xMax, (
                    CalculateScan`PlotterScanner`Private`xMax - 
                    CalculateScan`PlotterScanner`Private`xMin)/
                    CalculateScan`PlotterScanner`Private`n}]]], {{
                    Blank[Real], 
                    Blank[Real]}, {
                    Blank[Real], 
                    Blank[Real]}}]; 
                    If[CalculateScan`PlotterScanner`Private`bdq === False, 
                    Line[
                    
                    Apply[{#, # + #2}& , 
                    CalculateScan`PlotterScanner`Private`pointsAndDirections, \
{1}]], 
                    Line[
                    
                    Apply[{# - #2, # + #2}& , 
                    CalculateScan`PlotterScanner`Private`pointsAndDirections, \
{1}]]]]], Options[CalculateScan`PlotterScanner`Private`addTangents] = {
                    "TiltAngle" -> 0, "LengthFactor" -> 1, "Bidirectional" -> 
                    True}, CalculateScan`PlotterScanner`Private`fD0 = 
                   CompiledFunction[{8, 8., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    4}}, {{11, {2, 0, 1}}, {0.6111111111111112, {3, 0, 1}}, {
                    9, {2, 0, 2}}, {1, {2, 0, 0}}, {
                    0.8181818181818182, {3, 0, 3}}}, {0, 3, 6, 0, 
                    0}, {{10, 0, 2}, {13, 2, 0, 2}, {41, 263, 3, 0, 2, 3, 0, 
                    3, 3, 0, 4}, {40, 58, 3, 0, 4, 3, 0, 2}, {10, 2, 4}, {16, 
                    4, 0, 4}, {10, 1, 5}, {13, 5, 4, 5}, {16, 1, 2, 5, 4}, {
                    1}}, 
                    Function[{
                    Removed["x"]}, (11 (11 + 9 Removed["x"]))/(
                    18 (1 + Removed["x"])^(9/11))], Evaluate], 
                   CalculateScan`PlotterScanner`Private`fD1 = 
                   CompiledFunction[{8, 8., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    4}}, {{11, {2, 0, 1}}, {9, {2, 0, 2}}, {1, {2, 0, 0}}, {
                    1.8181818181818181`, {3, 0, 7}}, {
                    0.8181818181818182, {3, 0, 3}}, {
                    5.5, {3, 0, 2}}, {-0.5, {3, 0, 6}}}, {0, 3, 10, 0, 
                    0}, {{10, 0, 1}, {13, 1, 0, 1}, {41, 263, 3, 0, 1, 3, 0, 
                    3, 3, 0, 4}, {40, 58, 3, 0, 4, 3, 0, 5}, {16, 2, 5, 4}, {
                    41, 263, 3, 0, 1, 3, 0, 7, 3, 0, 5}, {40, 58, 3, 0, 5, 3, 
                    0, 8}, {10, 2, 5}, {16, 5, 0, 5}, {10, 1, 9}, {13, 9, 5, 
                    9}, {16, 6, 8, 9, 5}, {13, 4, 5, 4}, {1}}, 
                    Function[{
                    Removed["x"]}, 
                    
                    Block[{Compile`$167}, Compile`$167 = 1 + Removed["x"]; 
                    11/(2 Compile`$167^(9/11)) - (11 + 9 Removed["x"])/(2 
                    Compile`$167^(20/11))]], Evaluate], 
                   Attributes[Compile`$167] = {Temporary}, 
                   CalculateScan`PlotterScanner`Private`xMin = \
-16.884309764309762`, CalculateScan`PlotterScanner`Private`xMax = 
                   14.217643097643098`, 
                   Attributes[Compile`$111] = {Temporary}, 
                   CalculateScan`PlotterScanner`Private`addOsculatingCircles[{
                    
                    Pattern[CalculateScan`PlotterScanner`Private`fD0, 
                    Blank[]], 
                    Pattern[CalculateScan`PlotterScanner`Private`fD1, 
                    Blank[]], 
                    Pattern[CalculateScan`PlotterScanner`Private`fD2, 
                    Blank[]]}, {
                    Pattern[CalculateScan`PlotterScanner`Private`x, 
                    Blank[]], 
                    Pattern[CalculateScan`PlotterScanner`Private`xMin, 
                    Blank[]], 
                    Pattern[CalculateScan`PlotterScanner`Private`xMax, 
                    Blank[]]}, 
                    Pattern[CalculateScan`PlotterScanner`Private`n, 
                    Blank[]]] := Quiet[
                    
                    Module[{}, 
                    CalculateScan`PlotterScanner`Private`centersAndRadii = 
                    Cases[
                    N[
                    Chop[
                    N[
                    Table[{{CalculateScan`PlotterScanner`Private`x, 
                    CalculateScan`PlotterScanner`Private`fD0[
                    CalculateScan`PlotterScanner`Private`x]} + ({-
                    CalculateScan`PlotterScanner`Private`fD1[
                    CalculateScan`PlotterScanner`Private`x], 1} (1 + 
                    CalculateScan`PlotterScanner`Private`fD1[
                    CalculateScan`PlotterScanner`Private`x]^2))/
                    CalculateScan`PlotterScanner`Private`fD2[
                    CalculateScan`PlotterScanner`Private`x], 
                    Abs[
                    1/(CalculateScan`PlotterScanner`Private`fD2[
                    CalculateScan`PlotterScanner`Private`x]/(1 + 
                    CalculateScan`PlotterScanner`Private`fD1[
                    CalculateScan`PlotterScanner`Private`x]^2)^(3/2))]}, {
                    CalculateScan`PlotterScanner`Private`x, 
                    CalculateScan`PlotterScanner`Private`xMin, 
                    CalculateScan`PlotterScanner`Private`xMax, (
                    CalculateScan`PlotterScanner`Private`xMax - 
                    CalculateScan`PlotterScanner`Private`xMin)/
                    CalculateScan`PlotterScanner`Private`n}]]]], {{
                    Blank[Real], 
                    Blank[Real]}, 
                    Blank[Real]}]; 
                    Apply[Circle, 
                    CalculateScan`PlotterScanner`Private`centersAndRadii, {
                    1}]]], CalculateScan`PlotterScanner`Private`fD2 = 
                   CompiledFunction[{8, 8., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    3}}, {{-9, {2, 0, 1}}, {11, {2, 0, 2}}, {
                    0.9090909090909091, {3, 0, 5}}, {9, {2, 0, 3}}, {
                    1, {2, 0, 0}}, {1.8181818181818181`, {3, 0, 2}}, {
                    2.8181818181818183`, {3, 0, 6}}}, {0, 4, 9, 0, 
                    0}, {{10, 0, 1}, {13, 1, 0, 1}, {41, 263, 3, 0, 1, 3, 0, 
                    2, 3, 0, 3}, {40, 58, 3, 0, 3, 3, 0, 4}, {10, 1, 3}, {16, 
                    3, 4, 3}, {41, 263, 3, 0, 1, 3, 0, 6, 3, 0, 4}, {40, 58, 
                    3, 0, 4, 3, 0, 7}, {10, 3, 4}, {16, 4, 0, 4}, {10, 2, 
                    8}, {13, 8, 4, 8}, {16, 5, 7, 8, 4}, {13, 3, 4, 3}, {1}}, 
                    
                    Function[{
                    Removed["x"]}, 
                    
                    Block[{Compile`$199}, 
                    Compile`$199 = 
                    1 + Removed["x"]; (-9)/
                    Compile`$199^(20/11) + (10 (11 + 9 Removed["x"]))/(11 
                    Compile`$199^(31/11))]], Evaluate], 
                   Attributes[Compile`$199] = {Temporary}, 
                   CalculateScan`PlotterScanner`Private`\
addOsculatingCircleRadii[{
                    Pattern[CalculateScan`PlotterScanner`Private`fD0, 
                    Blank[]], 
                    Pattern[CalculateScan`PlotterScanner`Private`fD1, 
                    Blank[]], 
                    Pattern[CalculateScan`PlotterScanner`Private`fD2, 
                    Blank[]]}, {
                    Pattern[CalculateScan`PlotterScanner`Private`x, 
                    Blank[]], 
                    Pattern[CalculateScan`PlotterScanner`Private`xMin, 
                    Blank[]], 
                    Pattern[CalculateScan`PlotterScanner`Private`xMax, 
                    Blank[]]}, 
                    Pattern[CalculateScan`PlotterScanner`Private`n, 
                    Blank[]]] := Quiet[
                    
                    Module[{}, 
                    CalculateScan`PlotterScanner`Private`\
touchPointsAndCenters = Cases[
                    Chop[
                    N[
                    Table[{{CalculateScan`PlotterScanner`Private`x, 
                    CalculateScan`PlotterScanner`Private`fD0[
                    CalculateScan`PlotterScanner`Private`x]}, {
                    CalculateScan`PlotterScanner`Private`x, 
                    CalculateScan`PlotterScanner`Private`fD0[
                    CalculateScan`PlotterScanner`Private`x]} + ({-
                    CalculateScan`PlotterScanner`Private`fD1[
                    CalculateScan`PlotterScanner`Private`x], 1} (1 + 
                    CalculateScan`PlotterScanner`Private`fD1[
                    CalculateScan`PlotterScanner`Private`x]^2))/
                    CalculateScan`PlotterScanner`Private`fD2[
                    CalculateScan`PlotterScanner`Private`x]}, {
                    CalculateScan`PlotterScanner`Private`x, 
                    CalculateScan`PlotterScanner`Private`xMin, 
                    CalculateScan`PlotterScanner`Private`xMax, (
                    CalculateScan`PlotterScanner`Private`xMax - 
                    CalculateScan`PlotterScanner`Private`xMin)/
                    CalculateScan`PlotterScanner`Private`n}]]], {{
                    Blank[Real], 
                    Blank[Real]}, {
                    Blank[Real], 
                    Blank[Real]}}]; 
                    Line[CalculateScan`PlotterScanner`Private`\
touchPointsAndCenters]]], 
                   CalculateScan`PlotterScanner`Private`addTaylorParabolas[{
                    Pattern[CalculateScan`PlotterScanner`Private`fD0, 
                    Blank[]], 
                    Pattern[CalculateScan`PlotterScanner`Private`fD1, 
                    Blank[]], 
                    Pattern[CalculateScan`PlotterScanner`Private`fD2, 
                    Blank[]]}, {
                    Pattern[CalculateScan`PlotterScanner`Private`x, 
                    Blank[]], 
                    Pattern[CalculateScan`PlotterScanner`Private`xMin, 
                    Blank[]], 
                    Pattern[CalculateScan`PlotterScanner`Private`xMax, 
                    Blank[]]}, 
                    Pattern[CalculateScan`PlotterScanner`Private`n, 
                    Blank[]]] := Quiet[
                    
                    Module[{}, 
                    CalculateScan`PlotterScanner`Private`parabolas = 
                    Table[CalculateScan`PlotterScanner`Private`fD0[
                    CalculateScan`PlotterScanner`Private`y] + 
                    CalculateScan`PlotterScanner`Private`fD1[
                    CalculateScan`PlotterScanner`Private`y] (
                    CalculateScan`PlotterScanner`Private`x - 
                    CalculateScan`PlotterScanner`Private`y) + (
                    CalculateScan`PlotterScanner`Private`fD2[
                    CalculateScan`PlotterScanner`Private`y] (
                    CalculateScan`PlotterScanner`Private`x - 
                    CalculateScan`PlotterScanner`Private`y)^2)/2, {
                    CalculateScan`PlotterScanner`Private`y, 
                    CalculateScan`PlotterScanner`Private`xMin, 
                    CalculateScan`PlotterScanner`Private`xMax, (
                    CalculateScan`PlotterScanner`Private`xMax - 
                    CalculateScan`PlotterScanner`Private`xMin)/
                    CalculateScan`PlotterScanner`Private`n}]; Cases[
                    Plot[
                    Evaluate[
                    CalculateScan`PlotterScanner`Private`parabolas], {
                    CalculateScan`PlotterScanner`Private`x, 
                    CalculateScan`PlotterScanner`Private`xMin, 
                    CalculateScan`PlotterScanner`Private`xMax}], 
                    Blank[Line], Infinity]]], 
                   Attributes[Derivative] = {NHoldAll, ReadProtected}, 
                   CalculateScan`PlotterScanner`Private`x0 = 0, 
                   Attributes[
                    CalculateScan`PlotterScanner`Private`maxDist$] = {
                    Temporary}, 
                   Attributes[CalculateScan`PlotterScanner`Private`M$] = {
                    Temporary}, 
                   Attributes[
                    CalculateScan`PlotterScanner`Private`pedalCurveCount$] = {
                    Temporary}, 
                   Attributes[CalculateScan`PlotterScanner`Private`px$] = {
                    Temporary}, 
                   Attributes[CalculateScan`PlotterScanner`Private`py$] = {
                    Temporary}, 
                   Attributes[
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurveCount$] = {Temporary}, 
                   Attributes[
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurveCount$] = {Temporary}, 
                   Attributes[
                    CalculateScan`PlotterScanner`Private`dualCurveCount$] = {
                    Temporary}, 
                   Attributes[
                    CalculateScan`PlotterScanner`Private`inverseCurveCount$] = \
{Temporary}, Attributes[CalculateScan`PlotterScanner`Private`R$] = {
                    Temporary}, 
                   Attributes[
                    CalculateScan`PlotterScanner`Private`orthotomicCurveCount$\
] = {Temporary}, Attributes[
                    CalculateScan`PlotterScanner`Private`\[Alpha]$] = {
                    Temporary}, 
                   CalculateScan`PlotterScanner`Private`\
tangentIntersectionPoint[{
                    Pattern[CalculateScan`PlotterScanner`Private`x1, 
                    Blank[]], 
                    Pattern[CalculateScan`PlotterScanner`Private`x2, 
                    Blank[]]}, {
                    Pattern[CalculateScan`PlotterScanner`Private`fD0, 
                    Blank[]], 
                    Pattern[CalculateScan`PlotterScanner`Private`fD1, 
                    Blank[]]}] := {(-
                    CalculateScan`PlotterScanner`Private`fD0[
                    CalculateScan`PlotterScanner`Private`x1] + 
                    CalculateScan`PlotterScanner`Private`fD0[
                    CalculateScan`PlotterScanner`Private`x2] + 
                    CalculateScan`PlotterScanner`Private`x1 
                    CalculateScan`PlotterScanner`Private`fD1[
                    CalculateScan`PlotterScanner`Private`x1] - 
                    CalculateScan`PlotterScanner`Private`x2 
                    CalculateScan`PlotterScanner`Private`fD1[
                    CalculateScan`PlotterScanner`Private`x2])/(
                    CalculateScan`PlotterScanner`Private`fD1[
                    CalculateScan`PlotterScanner`Private`x1] - 
                    CalculateScan`PlotterScanner`Private`fD1[
                    CalculateScan`PlotterScanner`Private`x2]), 
                    CalculateScan`PlotterScanner`Private`fD0[
                    CalculateScan`PlotterScanner`Private`x1] + (
                    CalculateScan`PlotterScanner`Private`fD1[
                    CalculateScan`PlotterScanner`Private`x1] (-
                    CalculateScan`PlotterScanner`Private`fD0[
                    CalculateScan`PlotterScanner`Private`x1] + 
                    CalculateScan`PlotterScanner`Private`fD0[
                    CalculateScan`PlotterScanner`Private`x2] + (
                    CalculateScan`PlotterScanner`Private`x1 - 
                    CalculateScan`PlotterScanner`Private`x2) 
                    CalculateScan`PlotterScanner`Private`fD1[
                    CalculateScan`PlotterScanner`Private`x2]))/(
                    CalculateScan`PlotterScanner`Private`fD1[
                    CalculateScan`PlotterScanner`Private`x1] - 
                    CalculateScan`PlotterScanner`Private`fD1[
                    CalculateScan`PlotterScanner`Private`x2])}, 
                   Attributes[RawBoxes] = {ReadProtected}, 
                   Attributes[Subscript] = {NHoldRest}}; 
                 Typeset`initDone$$ = True), DynamicModuleValues :> {}, 
                Deinitialization :> None, 
                UntrackedVariables :> {Typeset`size$$}, 
                SynchronousInitialization -> True, 
                UnsavedVariables :> {Typeset`initDone$$}], "Manipulate", 
               Deployed -> True, StripOnInput -> False], TraditionalForm], 
             Manipulate`InterpretManipulate[1]], TraditionalForm]], 
          "Output"]}], 
       XMLElement["dataformats", {}, {}]}]}], Typeset`pod3$$ = XMLElement[
   "pod", {"title" -> "Alternate form of the integral", "scanner" -> 
     "Integral", "id" -> "AlternateForm", "position" -> "300", "error" -> 
     "false", "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {
        "PowerExpand[(11 (11 + 9 x))/(18 (1 + x)^(9/11)), Assumptions -> \
{}]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            StyleBox[
             RowBox[{
               StyleBox[
                RowBox[{
                  FractionBox[
                   RowBox[{"11", " ", "x"}], 
                   RowBox[{"2", " ", 
                    SuperscriptBox[
                    RowBox[{"(", 
                    RowBox[{"x", "+", "1"}], ")"}], 
                    RowBox[{"9", "/", "11"}]]}]], "+", 
                  FractionBox["121", 
                   RowBox[{"18", " ", 
                    SuperscriptBox[
                    RowBox[{"(", 
                    RowBox[{"x", "+", "1"}], ")"}], 
                    RowBox[{"9", "/", "11"}]]}]]}], 
                GrayLevel[0]], "+", 
               StyleBox[
               "constant", FontFamily -> "Helvetica", Magnification -> 
                0.9 Inherited]}], 
             GrayLevel[0.6]], TraditionalForm]], "Output"]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata,formuladata"}]}\
]}], Typeset`pod4$$, Typeset`pod5$$, Typeset`pod6$$, Typeset`pod7$$, 
   Typeset`pod8$$, Typeset`pod9$$, Typeset`pod10$$, Typeset`pod11$$, 
   Typeset`pod12$$, Typeset`pod13$$, Typeset`pod14$$, Typeset`pod15$$, 
   Typeset`pod16$$, Typeset`pod17$$, Typeset`pod18$$, Typeset`pod19$$, 
   Typeset`pod20$$, Typeset`pod21$$, Typeset`pod22$$, Typeset`pod23$$, 
   Typeset`pod24$$, Typeset`pod25$$, Typeset`pod26$$, Typeset`pod27$$, 
   Typeset`pod28$$, Typeset`pod29$$, Typeset`pod30$$, Typeset`pod31$$, 
   Typeset`pod32$$, Typeset`aux1$$ = {True, False, {False, False}, True}, 
   Typeset`aux2$$ = {True, False, {False, False, False}, True}, 
   Typeset`aux3$$ = {True, False, {False}, True}, Typeset`aux4$$ = {
   True, False, {False}, True}, Typeset`aux5$$ = {True, False, {False}, True},
    Typeset`aux6$$ = {True, False, {False}, True}, Typeset`aux7$$ = {
   True, False, {False}, True}, Typeset`aux8$$ = {True, False, {False}, True},
    Typeset`aux9$$ = {True, False, {False}, True}, Typeset`aux10$$ = {
   True, False, {False}, True}, Typeset`aux11$$ = {
   True, False, {False}, True}, Typeset`aux12$$ = {
   True, False, {False}, True}, Typeset`aux13$$ = {
   True, False, {False}, True}, Typeset`aux14$$ = {
   True, False, {False}, True}, Typeset`aux15$$ = {
   True, False, {False}, True}, Typeset`aux16$$ = {
   True, False, {False}, True}, Typeset`aux17$$ = {
   True, False, {False}, True}, Typeset`aux18$$ = {
   True, False, {False}, True}, Typeset`aux19$$ = {
   True, False, {False}, True}, Typeset`aux20$$ = {
   True, False, {False}, True}, Typeset`aux21$$ = {
   True, False, {False}, True}, Typeset`aux22$$ = {
   True, False, {False}, True}, Typeset`aux23$$ = {
   True, False, {False}, True}, Typeset`aux24$$ = {
   True, False, {False}, True}, Typeset`aux25$$ = {
   True, False, {False}, True}, Typeset`aux26$$ = {
   True, False, {False}, True}, Typeset`aux27$$ = {
   True, False, {False}, True}, Typeset`aux28$$ = {
   True, False, {False}, True}, Typeset`aux29$$ = {
   True, False, {False}, True}, Typeset`aux30$$ = {
   True, False, {False}, True}, Typeset`aux31$$ = {
   True, False, {False}, True}, Typeset`aux32$$ = {
   True, False, {False}, True}, Typeset`asyncpods$$ = {}, 
   Typeset`nonpods$$ = {}, Typeset`initdone$$ = True, 
   Typeset`queryinfo$$ = {{
    "success" -> "true", "error" -> "false", "numpods" -> "2", "datatypes" -> 
     "", "timedout" -> 
     "Integral,MultiDimensionalIntegration,Series,Plot,Plotter,Simplification,\
Sequence", "timing" -> "3.643", "parsetiming" -> "0.29", "parsetimedout" -> 
     "false", "recalculate" -> 
     "http://www3.wolframalpha.com/api/v2/recalc.jsp?id=\
MSP182519h4e481g463h27400001gi3ig28h5f19ebi&s=18", "id" -> 
     "MSP182619h4e481g463h27400001f6a6904e0947fa8&s=18", "related" -> 
     "http://www3.wolframalpha.com/api/v2/relatedQueries.jsp?id=\
MSP182719h4e481g463h274000011c75gh89ig4f1ei&s=18", "version" -> "2.1"}, {
    "success" -> "true", "error" -> "false", "numpods" -> "2", "datatypes" -> 
     "", "timedout" -> 
     "Integral,MultiDimensionalIntegration,Series,Plot,Plotter,Simplification,\
Sequence", "timing" -> "5.724", "parsetiming" -> "0.", "parsetimedout" -> 
     "false", "recalculate" -> "", "id" -> "", "related" -> "", "version" -> 
     "2.1"}}, Typeset`sessioninfo$$ = {
   "TimeZone" -> -6., 
    "Date" -> {2011, 9, 7, 19, 18, 56.025317`8.500959296405892}, "Line" -> 2, 
    "SessionID" -> 23097569216521971746}, Typeset`showpods$$ = {1, 2, 3}, 
   Typeset`failedpods$$ = {4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 
   18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32}, 
   Typeset`chosen$$ = {}, Typeset`open$$ = False, Typeset`newq$$ = 
   "Integrate[x/((x+1)^(20/11)),x]"}, 
   DynamicBox[ToBoxes[
     AlphaIntegration`FormatAlphaResults[
      Dynamic[{
       2, {Typeset`pod1$$, Typeset`pod2$$, Typeset`pod3$$, Typeset`pod4$$, 
         Typeset`pod5$$, Typeset`pod6$$, Typeset`pod7$$, Typeset`pod8$$, 
         Typeset`pod9$$, Typeset`pod10$$, Typeset`pod11$$, Typeset`pod12$$, 
         Typeset`pod13$$, Typeset`pod14$$, Typeset`pod15$$, Typeset`pod16$$, 
         Typeset`pod17$$, Typeset`pod18$$, Typeset`pod19$$, Typeset`pod20$$, 
         Typeset`pod21$$, Typeset`pod22$$, Typeset`pod23$$, Typeset`pod24$$, 
         Typeset`pod25$$, Typeset`pod26$$, Typeset`pod27$$, Typeset`pod28$$, 
         Typeset`pod29$$, Typeset`pod30$$, Typeset`pod31$$, 
         Typeset`pod32$$}, {
        Typeset`aux1$$, Typeset`aux2$$, Typeset`aux3$$, Typeset`aux4$$, 
         Typeset`aux5$$, Typeset`aux6$$, Typeset`aux7$$, Typeset`aux8$$, 
         Typeset`aux9$$, Typeset`aux10$$, Typeset`aux11$$, Typeset`aux12$$, 
         Typeset`aux13$$, Typeset`aux14$$, Typeset`aux15$$, Typeset`aux16$$, 
         Typeset`aux17$$, Typeset`aux18$$, Typeset`aux19$$, Typeset`aux20$$, 
         Typeset`aux21$$, Typeset`aux22$$, Typeset`aux23$$, Typeset`aux24$$, 
         Typeset`aux25$$, Typeset`aux26$$, Typeset`aux27$$, Typeset`aux28$$, 
         Typeset`aux29$$, Typeset`aux30$$, Typeset`aux31$$, Typeset`aux32$$}, 
        Typeset`chosen$$, Typeset`open$$, Typeset`elements$$, Typeset`q$$, 
        Typeset`opts$$, Typeset`nonpods$$, Typeset`queryinfo$$, 
        Typeset`sessioninfo$$, Typeset`showpods$$, Typeset`failedpods$$, 
        Typeset`newq$$}]], StandardForm],
    ImageSizeCache->{652., {785., 790.}},
    TrackedSymbols:>{Typeset`showpods$$, Typeset`failedpods$$}],
   DynamicModuleValues:>{},
   Initialization:>If[
     Not[Typeset`initdone$$], AlphaIntegration`DoAsyncInitialization[
       Hold[{
        2, {Typeset`pod1$$, Typeset`pod2$$, Typeset`pod3$$, Typeset`pod4$$, 
          Typeset`pod5$$, Typeset`pod6$$, Typeset`pod7$$, Typeset`pod8$$, 
          Typeset`pod9$$, Typeset`pod10$$, Typeset`pod11$$, Typeset`pod12$$, 
          Typeset`pod13$$, Typeset`pod14$$, Typeset`pod15$$, Typeset`pod16$$, 
          Typeset`pod17$$, Typeset`pod18$$, Typeset`pod19$$, Typeset`pod20$$, 
          Typeset`pod21$$, Typeset`pod22$$, Typeset`pod23$$, Typeset`pod24$$, 
          Typeset`pod25$$, Typeset`pod26$$, Typeset`pod27$$, Typeset`pod28$$, 
          Typeset`pod29$$, Typeset`pod30$$, Typeset`pod31$$, 
          Typeset`pod32$$}, {
         Typeset`aux1$$, Typeset`aux2$$, Typeset`aux3$$, Typeset`aux4$$, 
          Typeset`aux5$$, Typeset`aux6$$, Typeset`aux7$$, Typeset`aux8$$, 
          Typeset`aux9$$, Typeset`aux10$$, Typeset`aux11$$, Typeset`aux12$$, 
          Typeset`aux13$$, Typeset`aux14$$, Typeset`aux15$$, Typeset`aux16$$, 
          Typeset`aux17$$, Typeset`aux18$$, Typeset`aux19$$, Typeset`aux20$$, 
          Typeset`aux21$$, Typeset`aux22$$, Typeset`aux23$$, Typeset`aux24$$, 
          Typeset`aux25$$, Typeset`aux26$$, Typeset`aux27$$, Typeset`aux28$$, 
          Typeset`aux29$$, Typeset`aux30$$, Typeset`aux31$$, Typeset`aux32$$},
          Typeset`chosen$$, Typeset`open$$, Typeset`elements$$, Typeset`q$$, 
         Typeset`opts$$, Typeset`nonpods$$, Typeset`queryinfo$$, 
         Typeset`sessioninfo$$, Typeset`showpods$$, Typeset`failedpods$$, 
         Typeset`newq$$, 
         "http://www3.wolframalpha.com/api/v2/recalc.jsp?id=\
MSP182519h4e481g463h27400001gi3ig28h5f19ebi&s=18", Typeset`asyncpods$$}]]; 
     Typeset`asyncpods$$ = {}; Typeset`initdone$$ = True],
   SynchronousInitialization->False],
  BaseStyle->{Deployed -> True},
  DeleteWithContents->True,
  Editable->False,
  SelectWithContents->True]], "Print",
 CellMargins->{{20, 10}, {Inherited, Inherited}},
 CellChangeTimes->{3.524433536718237*^9}]
}, Closed]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"DSolve", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{
      RowBox[{
       RowBox[{
        RowBox[{"y", "'"}], "[", "t", "]"}], "-", 
       RowBox[{"3", "*", 
        RowBox[{"y", "[", "t", "]"}]}]}], " ", "==", " ", 
      RowBox[{"4", 
       RowBox[{"Exp", "[", 
        RowBox[{"5", "t"}], "]"}]}]}], ",", 
     RowBox[{
      RowBox[{"y", "[", "0", "]"}], "\[Equal]", 
      RowBox[{"-", "2"}]}]}], "}"}], ",", 
   RowBox[{"y", "[", "t", "]"}], ",", "t"}], "]"}]], "Input",
 CellChangeTimes->{{3.524433665702422*^9, 3.5244337081974363`*^9}}],

Cell[BoxData[
 FormBox[
  RowBox[{"{", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"y", "(", "t", ")"}], "\[Rule]", 
     RowBox[{"2", " ", 
      SuperscriptBox["\[ExponentialE]", 
       RowBox[{"3", " ", "t"}]], " ", 
      RowBox[{"(", 
       RowBox[{
        SuperscriptBox["\[ExponentialE]", 
         RowBox[{"2", " ", "t"}]], "-", "2"}], ")"}]}]}], "}"}], "}"}], 
  TraditionalForm]], "Output",
 CellChangeTimes->{3.5244337089570637`*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"DSolve", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{
      RowBox[{
       RowBox[{"9", 
        RowBox[{"(", 
         RowBox[{"x", "+", "1"}], ")"}], 
        RowBox[{
         RowBox[{"y", "'"}], "[", "x", "]"}]}], "-", 
       RowBox[{"8", "*", 
        RowBox[{"y", "[", "x", "]"}]}]}], "==", 
      RowBox[{"8", "*", "x"}]}], ",", 
     RowBox[{
      RowBox[{"y", "[", "0", "]"}], "\[Equal]", "4"}]}], "}"}], ",", 
   RowBox[{"y", "[", "x", "]"}], ",", "x"}], "]"}]], "Input",
 CellChangeTimes->{{3.524436027736189*^9, 3.524436080382144*^9}}],

Cell[BoxData[
 FormBox[
  RowBox[{"{", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"y", "(", "x", ")"}], "\[Rule]", 
     RowBox[{
      RowBox[{"8", " ", "x"}], "-", 
      RowBox[{"5", " ", 
       SuperscriptBox[
        RowBox[{"(", 
         RowBox[{"x", "+", "1"}], ")"}], 
        RowBox[{"8", "/", "9"}]]}], "+", "9"}]}], "}"}], "}"}], 
  TraditionalForm]], "Output",
 CellChangeTimes->{3.5244360811204977`*^9}]
}, Open  ]]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell["Assignment 3: 2.1-2.3", "Section",
 CellChangeTimes->{{3.524852733986824*^9, 3.524852738743697*^9}, {
  3.5248530046747026`*^9, 3.5248530053531713`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"DSolve", "[", 
  RowBox[{
   RowBox[{
    RowBox[{
     RowBox[{
      RowBox[{"y", "'"}], "[", "t", "]"}], "+", " ", 
     FractionBox[
      RowBox[{"(", 
       RowBox[{"4", "*", "t", "*", 
        RowBox[{"y", "[", "t", "]"}]}], ")"}], 
      RowBox[{"(", 
       RowBox[{"1", "+", 
        SuperscriptBox["t", "2"]}], ")"}]]}], "==", 
    FractionBox["1", 
     SuperscriptBox[
      RowBox[{"(", 
       RowBox[{"1", "+", 
        SuperscriptBox["t", "2"]}], ")"}], "3"]]}], ",", 
   RowBox[{"y", "[", "t", "]"}], ",", "t"}], "]"}]], "Input",
 CellChangeTimes->{{3.5248542923462*^9, 3.524854295315568*^9}, {
  3.524854326785864*^9, 3.52485437988758*^9}}],

Cell[BoxData[
 FormBox[
  RowBox[{"{", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"y", "(", "t", ")"}], "\[Rule]", 
     RowBox[{
      FractionBox[
       SubscriptBox[
        TagBox["c",
         C], "1"], 
       SuperscriptBox[
        RowBox[{"(", 
         RowBox[{
          SuperscriptBox["t", "2"], "+", "1"}], ")"}], "2"]], "+", 
      FractionBox[
       RowBox[{
        SuperscriptBox["tan", 
         RowBox[{"-", "1"}]], "(", "t", ")"}], 
       SuperscriptBox[
        RowBox[{"(", 
         RowBox[{
          SuperscriptBox["t", "2"], "+", "1"}], ")"}], "2"]]}]}], "}"}], 
   "}"}], TraditionalForm]], "Output",
 CellChangeTimes->{{3.524854368202261*^9, 3.524854381864174*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Integrate", "[", 
  RowBox[{
   FractionBox["1", 
    RowBox[{"1", "+", 
     SuperscriptBox["t", "2"]}]], ",", "t"}], "]"}]], "Input",
 CellChangeTimes->{{3.524854398952613*^9, 3.5248544071684847`*^9}}],

Cell[BoxData[
 FormBox[
  RowBox[{
   SuperscriptBox["tan", 
    RowBox[{"-", "1"}]], "(", "t", ")"}], TraditionalForm]], "Output",
 CellChangeTimes->{3.5248544076000566`*^9}]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Assignment 4: 2.9-3.2", "Section",
 CellChangeTimes->{{3.526214470986057*^9, 3.526214484265791*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Exp", "[", 
  RowBox[{"Integrate", "[", 
   RowBox[{
    RowBox[{"1", "/", "t"}], ",", "t"}], "]"}], "]"}]], "Input",
 CellChangeTimes->{{3.52621449083566*^9, 3.5262145001954727`*^9}}],

Cell[BoxData["t"], "Output",
 CellChangeTimes->{3.5262145004954667`*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"1", "/", "t"}], "*", 
  RowBox[{"Integrate", "[", 
   RowBox[{"t", ",", "t"}], "]"}]}]], "Input",
 CellChangeTimes->{{3.5262145062053523`*^9, 3.526214516585145*^9}}],

Cell[BoxData[
 FractionBox["t", "2"]], "Output",
 CellChangeTimes->{3.5262145169651375`*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Integrate", "[", 
  RowBox[{
   RowBox[{
    RowBox[{"t", "/", "2"}], "+", 
    RowBox[{"c", "/", "t"}]}], ",", "t"}], "]"}]], "Input",
 CellChangeTimes->{{3.5262145396346836`*^9, 3.526214550634464*^9}}],

Cell[BoxData[
 RowBox[{
  FractionBox[
   SuperscriptBox["t", "2"], "4"], "+", 
  RowBox[{"c", " ", 
   RowBox[{"Log", "[", "t", "]"}]}]}]], "Output",
 CellChangeTimes->{{3.5262145443445897`*^9, 3.5262145507944603`*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Integrate", "[", 
  RowBox[{
   RowBox[{
    RowBox[{"-", "1"}], "/", 
    SuperscriptBox["v", "2"]}], ",", "v"}], "]"}]], "Input",
 CellChangeTimes->{{3.526214867858119*^9, 3.526214880907858*^9}}],

Cell[BoxData[
 FractionBox["1", "v"]], "Output",
 CellChangeTimes->{3.526214881667843*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Integrate", "[", 
  RowBox[{
   RowBox[{
    RowBox[{"(", 
     RowBox[{
      RowBox[{"6", "*", "y"}], "+", 
      RowBox[{"3", "c"}]}], ")"}], "^", 
    RowBox[{"(", 
     RowBox[{"1", "/", "3"}], ")"}]}], ",", "t"}], "]"}]], "Input",
 CellChangeTimes->{{3.5262152431306133`*^9, 3.52621525631035*^9}}],

Cell[BoxData[
 RowBox[{"t", " ", 
  SuperscriptBox[
   RowBox[{"(", 
    RowBox[{
     RowBox[{"3", " ", "c"}], "+", 
     RowBox[{"6", " ", "y"}]}], ")"}], 
   RowBox[{"1", "/", "3"}]]}]], "Output",
 CellChangeTimes->{3.5262152570903344`*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"DSolve", "[", 
  RowBox[{
   RowBox[{
    RowBox[{
     RowBox[{
      RowBox[{"y", "'"}], "[", "t", "]"}], 
     RowBox[{"(", 
      RowBox[{
       RowBox[{"y", "''"}], "[", "t", "]"}], ")"}]}], "\[Equal]", "2"}], ",", 
   
   RowBox[{"y", "[", "t", "]"}], ",", "t"}], "]"}]], "Input",
 CellChangeTimes->{{3.5262153482885103`*^9, 3.526215370548065*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"y", "[", "t", "]"}], "\[Rule]", 
     RowBox[{
      RowBox[{
       RowBox[{"-", 
        FractionBox["1", "3"]}], " ", 
       SqrtBox["2"], " ", 
       SuperscriptBox[
        RowBox[{"(", 
         RowBox[{
          RowBox[{"2", " ", "t"}], "+", 
          RowBox[{"C", "[", "1", "]"}]}], ")"}], 
        RowBox[{"3", "/", "2"}]]}], "+", 
      RowBox[{"C", "[", "2", "]"}]}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"y", "[", "t", "]"}], "\[Rule]", 
     RowBox[{
      RowBox[{
       FractionBox["1", "3"], " ", 
       SqrtBox["2"], " ", 
       SuperscriptBox[
        RowBox[{"(", 
         RowBox[{
          RowBox[{"2", " ", "t"}], "+", 
          RowBox[{"C", "[", "1", "]"}]}], ")"}], 
        RowBox[{"3", "/", "2"}]]}], "+", 
      RowBox[{"C", "[", "2", "]"}]}]}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{{3.52621536732813*^9, 3.526215371268051*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Solve", "[", 
  RowBox[{
   RowBox[{
    RowBox[{
     SuperscriptBox["y", "3"], "-", 
     RowBox[{"6", "*", "y", "*", 
      SuperscriptBox["t", "3"]}]}], " ", "==", " ", 
    RowBox[{
     RowBox[{
      SuperscriptBox["t", "3"], "*", "3", 
      RowBox[{"c", "[", "1", "]"}]}], "+", 
     RowBox[{"c", "[", "2", "]"}]}]}], ",", "y"}], "]"}]], "Input",
 CellChangeTimes->{{3.5262153964275475`*^9, 3.5262154401166735`*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"y", "\[Rule]", 
     RowBox[{
      FractionBox[
       RowBox[{"6", " ", 
        SuperscriptBox["2", 
         RowBox[{"1", "/", "3"}]], " ", 
        SuperscriptBox["t", "3"]}], 
       SuperscriptBox[
        RowBox[{"(", 
         RowBox[{
          RowBox[{"81", " ", 
           SuperscriptBox["t", "3"], " ", 
           RowBox[{"c", "[", "1", "]"}]}], "+", 
          RowBox[{"27", " ", 
           RowBox[{"c", "[", "2", "]"}]}], "+", 
          SqrtBox[
           RowBox[{
            RowBox[{
             RowBox[{"-", "23328"}], " ", 
             SuperscriptBox["t", "9"]}], "+", 
            SuperscriptBox[
             RowBox[{"(", 
              RowBox[{
               RowBox[{"81", " ", 
                SuperscriptBox["t", "3"], " ", 
                RowBox[{"c", "[", "1", "]"}]}], "+", 
               RowBox[{"27", " ", 
                RowBox[{"c", "[", "2", "]"}]}]}], ")"}], "2"]}]]}], ")"}], 
        RowBox[{"1", "/", "3"}]]], "+", 
      FractionBox[
       SuperscriptBox[
        RowBox[{"(", 
         RowBox[{
          RowBox[{"81", " ", 
           SuperscriptBox["t", "3"], " ", 
           RowBox[{"c", "[", "1", "]"}]}], "+", 
          RowBox[{"27", " ", 
           RowBox[{"c", "[", "2", "]"}]}], "+", 
          SqrtBox[
           RowBox[{
            RowBox[{
             RowBox[{"-", "23328"}], " ", 
             SuperscriptBox["t", "9"]}], "+", 
            SuperscriptBox[
             RowBox[{"(", 
              RowBox[{
               RowBox[{"81", " ", 
                SuperscriptBox["t", "3"], " ", 
                RowBox[{"c", "[", "1", "]"}]}], "+", 
               RowBox[{"27", " ", 
                RowBox[{"c", "[", "2", "]"}]}]}], ")"}], "2"]}]]}], ")"}], 
        RowBox[{"1", "/", "3"}]], 
       RowBox[{"3", " ", 
        SuperscriptBox["2", 
         RowBox[{"1", "/", "3"}]]}]]}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"y", "\[Rule]", 
     RowBox[{
      RowBox[{"-", 
       FractionBox[
        RowBox[{"3", " ", 
         SuperscriptBox["2", 
          RowBox[{"1", "/", "3"}]], " ", 
         RowBox[{"(", 
          RowBox[{"1", "+", 
           RowBox[{"\[ImaginaryI]", " ", 
            SqrtBox["3"]}]}], ")"}], " ", 
         SuperscriptBox["t", "3"]}], 
        SuperscriptBox[
         RowBox[{"(", 
          RowBox[{
           RowBox[{"81", " ", 
            SuperscriptBox["t", "3"], " ", 
            RowBox[{"c", "[", "1", "]"}]}], "+", 
           RowBox[{"27", " ", 
            RowBox[{"c", "[", "2", "]"}]}], "+", 
           SqrtBox[
            RowBox[{
             RowBox[{
              RowBox[{"-", "23328"}], " ", 
              SuperscriptBox["t", "9"]}], "+", 
             SuperscriptBox[
              RowBox[{"(", 
               RowBox[{
                RowBox[{"81", " ", 
                 SuperscriptBox["t", "3"], " ", 
                 RowBox[{"c", "[", "1", "]"}]}], "+", 
                RowBox[{"27", " ", 
                 RowBox[{"c", "[", "2", "]"}]}]}], ")"}], "2"]}]]}], ")"}], 
         RowBox[{"1", "/", "3"}]]]}], "-", 
      FractionBox[
       RowBox[{
        RowBox[{"(", 
         RowBox[{"1", "-", 
          RowBox[{"\[ImaginaryI]", " ", 
           SqrtBox["3"]}]}], ")"}], " ", 
        SuperscriptBox[
         RowBox[{"(", 
          RowBox[{
           RowBox[{"81", " ", 
            SuperscriptBox["t", "3"], " ", 
            RowBox[{"c", "[", "1", "]"}]}], "+", 
           RowBox[{"27", " ", 
            RowBox[{"c", "[", "2", "]"}]}], "+", 
           SqrtBox[
            RowBox[{
             RowBox[{
              RowBox[{"-", "23328"}], " ", 
              SuperscriptBox["t", "9"]}], "+", 
             SuperscriptBox[
              RowBox[{"(", 
               RowBox[{
                RowBox[{"81", " ", 
                 SuperscriptBox["t", "3"], " ", 
                 RowBox[{"c", "[", "1", "]"}]}], "+", 
                RowBox[{"27", " ", 
                 RowBox[{"c", "[", "2", "]"}]}]}], ")"}], "2"]}]]}], ")"}], 
         RowBox[{"1", "/", "3"}]]}], 
       RowBox[{"6", " ", 
        SuperscriptBox["2", 
         RowBox[{"1", "/", "3"}]]}]]}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"y", "\[Rule]", 
     RowBox[{
      RowBox[{"-", 
       FractionBox[
        RowBox[{"3", " ", 
         SuperscriptBox["2", 
          RowBox[{"1", "/", "3"}]], " ", 
         RowBox[{"(", 
          RowBox[{"1", "-", 
           RowBox[{"\[ImaginaryI]", " ", 
            SqrtBox["3"]}]}], ")"}], " ", 
         SuperscriptBox["t", "3"]}], 
        SuperscriptBox[
         RowBox[{"(", 
          RowBox[{
           RowBox[{"81", " ", 
            SuperscriptBox["t", "3"], " ", 
            RowBox[{"c", "[", "1", "]"}]}], "+", 
           RowBox[{"27", " ", 
            RowBox[{"c", "[", "2", "]"}]}], "+", 
           SqrtBox[
            RowBox[{
             RowBox[{
              RowBox[{"-", "23328"}], " ", 
              SuperscriptBox["t", "9"]}], "+", 
             SuperscriptBox[
              RowBox[{"(", 
               RowBox[{
                RowBox[{"81", " ", 
                 SuperscriptBox["t", "3"], " ", 
                 RowBox[{"c", "[", "1", "]"}]}], "+", 
                RowBox[{"27", " ", 
                 RowBox[{"c", "[", "2", "]"}]}]}], ")"}], "2"]}]]}], ")"}], 
         RowBox[{"1", "/", "3"}]]]}], "-", 
      FractionBox[
       RowBox[{
        RowBox[{"(", 
         RowBox[{"1", "+", 
          RowBox[{"\[ImaginaryI]", " ", 
           SqrtBox["3"]}]}], ")"}], " ", 
        SuperscriptBox[
         RowBox[{"(", 
          RowBox[{
           RowBox[{"81", " ", 
            SuperscriptBox["t", "3"], " ", 
            RowBox[{"c", "[", "1", "]"}]}], "+", 
           RowBox[{"27", " ", 
            RowBox[{"c", "[", "2", "]"}]}], "+", 
           SqrtBox[
            RowBox[{
             RowBox[{
              RowBox[{"-", "23328"}], " ", 
              SuperscriptBox["t", "9"]}], "+", 
             SuperscriptBox[
              RowBox[{"(", 
               RowBox[{
                RowBox[{"81", " ", 
                 SuperscriptBox["t", "3"], " ", 
                 RowBox[{"c", "[", "1", "]"}]}], "+", 
                RowBox[{"27", " ", 
                 RowBox[{"c", "[", "2", "]"}]}]}], ")"}], "2"]}]]}], ")"}], 
         RowBox[{"1", "/", "3"}]]}], 
       RowBox[{"6", " ", 
        SuperscriptBox["2", 
         RowBox[{"1", "/", "3"}]]}]]}]}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{{3.5262154271369333`*^9, 3.5262154411166534`*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"RowReduce", "[", 
   RowBox[{"(", GridBox[{
      {"1", "1", "2"},
      {
       RowBox[{"-", "1"}], 
       RowBox[{
        RowBox[{"-", "1"}], "/", "3"}], 
       RowBox[{"-", "1"}]}
     }], ")"}], "]"}], "//", "MatrixForm"}]], "Input",
 CellChangeTimes->{{3.526215849708482*^9, 3.5262158938175993`*^9}}],

Cell[BoxData[
 TagBox[
  RowBox[{"(", "\[NoBreak]", GridBox[{
     {"1", "0", 
      FractionBox["1", "2"]},
     {"0", "1", 
      FractionBox["3", "2"]}
    },
    GridBoxAlignment->{
     "Columns" -> {{Center}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
      "RowsIndexed" -> {}},
    GridBoxSpacings->{"Columns" -> {
        Offset[0.27999999999999997`], {
         Offset[0.7]}, 
        Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
        Offset[0.2], {
         Offset[0.4]}, 
        Offset[0.2]}, "RowsIndexed" -> {}}], "\[NoBreak]", ")"}],
  Function[BoxForm`e$, 
   MatrixForm[BoxForm`e$]]]], "Output",
 CellChangeTimes->{{3.526215888837699*^9, 3.5262158947275815`*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"plot10", " ", "=", " ", 
  RowBox[{
   RowBox[{"y", "[", "x", "]"}], "/.", 
   RowBox[{"DSolve", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{
        RowBox[{
         RowBox[{
          RowBox[{"y", "''"}], "[", "x", "]"}], "+", 
         RowBox[{"4", "*", 
          RowBox[{
           RowBox[{"y", "'"}], "[", "x", "]"}]}], "+", 
         RowBox[{"3", "*", 
          RowBox[{"y", "[", "x", "]"}]}]}], "\[Equal]", "0"}], ",", 
       RowBox[{
        RowBox[{
         RowBox[{"y", "'"}], "[", "0", "]"}], "\[Equal]", 
        RowBox[{"-", "1"}]}], ",", 
       RowBox[{
        RowBox[{"y", "[", "0", "]"}], "\[Equal]", "2"}]}], "}"}], ",", 
     RowBox[{"y", "[", "x", "]"}], ",", "x"}], "]"}]}]}]], "Input",
 CellChangeTimes->{{3.526215894887578*^9, 3.5262159961355534`*^9}, {
  3.526216031154853*^9, 3.526216106483346*^9}, {3.52621719526157*^9, 
  3.526217222011035*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   FractionBox["1", "2"], " ", 
   SuperscriptBox["\[ExponentialE]", 
    RowBox[{
     RowBox[{"-", "3"}], " ", "x"}]], " ", 
   RowBox[{"(", 
    RowBox[{
     RowBox[{"-", "1"}], "+", 
     RowBox[{"5", " ", 
      SuperscriptBox["\[ExponentialE]", 
       RowBox[{"2", " ", "x"}]]}]}], ")"}]}], "}"}]], "Output",
 CellChangeTimes->{{3.526216074043995*^9, 3.5262161068133397`*^9}, {
  3.5262172073013296`*^9, 3.5262172226810217`*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Plot", "[", 
  RowBox[{"plot10", ",", 
   RowBox[{"{", 
    RowBox[{"x", ",", 
     RowBox[{"-", "1"}], ",", "10"}], "}"}], ",", 
   RowBox[{"PlotRange", "\[Rule]", "All"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.5262172254409666`*^9, 3.5262172589402966`*^9}}],

Cell[BoxData[
 GraphicsBox[{{}, {}, 
   {Hue[0.67, 0.6, 0.6], LineBox[CompressedData["
1:eJwVlnc8F973x99vssne683bygohK+cmOyXCtySljEgiUoqyJZVVKlnRByGU
jFSuFbJHdvYIyQ6ZP7+/7uP5eNzHuef1epx7zhG5dN3cgYJAIDQSCYT/P++d
uxO2uzuPnzFRj/37R1c+3v/N1WZ8Hncy/zL6cpau/LgNq/mnunn8MJLrkOtn
2nKe85kCntHzmC1hIO1+ME35e9uu95Oi81hXyjRxQpaqfNxO6WeT3hye8PLj
tW0nlBuP+lVIS8/hzdgroyknCeX5l76nh+2fw/QBmSvUL3ex3+WLHke7/+D4
l3UlsvHbmMvhCXXhlT9Y7adX1lLFP2x0ZUYhIWIWV49uX+RJWcL5Uypc/67P
4vrwlfKkukXM5RywaWkxi695um4PLy/gUWeeGmbBWfzsLfPG3zdz2Peq/rmg
3N+4mLn+7zXbKZzrlhri0jaD+20r2z0CezHH/B+X2sIZfCTGWZW+pgvfva5+
Six+Bod9uHexg+0HNnRv5Ru8NINPyzucFItswiMeO3lmK9O4hjBUz+/6AXPc
tO5T457GKu9jqh2sGuEh8/7XOv+msPify6+FIluBkFXhZNI/hWtGdRi2ptth
dlDq74XkKfzM3iD9X3A3VBuuMYdJTmGVj25Ztw4Mg8ZYVlcU3RRmO8y9naM2
Avl+tonxv3/hTrnXxG/HRiHhwzfp3Lxf+JiCh0HLiXHwEniq13n4F65+ZEX9
RmkKZooMGId4f2GOsEppA9FpuGi22T61OYnnNCo/ye2fAZPQSxe38CTOJ29O
LfX9BrEFhbtkw0nMJqIi/NxoHn5UNeV7nJnAQ4/Hly0rl8DYNuDWXY0JfEFx
RqpNaBnK15W1QwQmMBIoiq/0WYYcuYSGF8PjmHKMYMYvswLBz10m8ZVxLDLE
3yrh+xc2FIXefTcex9T6bFzdjX/BvbHNs0N2HE892PIQFVgFG6I68dfCGGZH
w4OvilZB+SqNwH6fMax6O+pvVP8aZFF9HuU+N4brj17LjRZZB1KK21uRI2OY
Im9JxNRxHRg7O1VViGNYmFdEkmV2Hca135jZhI9i9n2C2dzT/yCW7WhY1ssR
zOtw3cw/ZxMaMyde5PuN4DXisW/5PzdhHzzMKrIbwcXz3g4bDFvgdbWjqfLA
CD5NUbo55rQFVtUOHP2fhnGZkM0ra85teGJNLzGSOIy7PqZWJmlvQ81C7uFf
AcOYxDq1yeK0DYcF162XjYYxwbQ8OrxwGxRmOY5xfxzCIjaipsxGO5DCY+tI
9h3CsyGOmrSuO8CqlxF+UHcIn37g6aTzZAeWEtVbDX4MYgZYiw9q3YFCU9vz
t1cGsJmyc+8tk12Q8M3wD/4ygN+EXrb+5LwLcZkLaVHBAzhpU+PjidBduE0M
msnkGMBoi+rkra+7oFGQcatX+Sc2YB98R8lGQFlDC/ETW/34v3jlMEYhAuJn
1ChbrO7HhysshmoOENCWfeM+est+3BApMnIaERDmWozWuNmHtU2CXaedCUjh
mEah/pE+LM+WEfXCk4BSrgf1mFP14bTytHiCHwEF1nEKX33WixOvDI7tPCEg
3TsaOa8KezAr+bhtYx4BfUwPasnw68EppKed1sUEJN7RuFSg14PjlA9tZZYR
ELXsBfXGzm78n6hSVFgjAd06k2nTk9iNzWLPP+XtIKCp4MX74w7deJgceNOt
l4C+DwTVbP3twq/uHxu/PEFAGvRN07RlXdg38MQa1e89vapcTJyhXfi0t+rS
tQUCehSZeVqOqws/tvWIjdnY0/t50Vt9sBObmzzIPbVLQNemNOL10jtxER37
q25KIjp5tGn4vGonTgpe/KzDSESNzQY7gbs/cEbkmi4nCxEZ21TyZ9b9wB68
PW6F7ERUN62l3hT9A+fnyg+QuYnI4Fax1ZL1D6z0pEvRjo+IavYpeXGL/cCW
R+YZ3QSJSDcmJ1rrTweOZBlhPE4iIvTudWPo/Q6cd+n27C1xIirTEJjJNuzA
r8sDCd8liUirLo6mjbUDq1Wopc4eIKJSS1bx1b52nKrw3mlMhojUxiJ0+N+0
Y49Zh4l3ckRU5E59EV1rx0MCarkmB4lIecffz0G1HfNd9jpdrkBEHyI24x/u
tuHurS57OiUiUuT1Lsmra8NHBiLdpQ4RUX76QueP6DYs/1mfUkiZiOSVry7/
s27DBziFM2f2OKdigkVYrA23SH+ZeqJCRNKmF+V1/7RiiVndEwyqRJT5s++4
c1Erzht0srm4xxIuls5P7rfi4HXbV0/2+M1aS2iBYSu+7rH8OG6PRUOM3/Sw
tmL5hwFFt/cYiT8M2ixswfTGW89U9vgIul+mZ9iC3yotZjftvadxzutfZF8z
dp+J8D66x6rezsp9rs3YfODljei9/JSiba+L7TZh5x+P+cv29MjnnM5yi27C
IsFBv2v39ErXGk6UkJuwBeuxc3mKRCQ5eoREWdSIdR/rjnrt+SO2rXTuhGEj
fnmlYJVnzz8Sj1Tc874G7D3gwZSw56/AIcG2EdcGXHNKIH5nz3+ek2yMsrv1
uDaLkfmoNBFxONMYeEfX45X08wOXpYiINXgroJxcjy/xz3k5SRARfenkmoXh
d+z+WeETmygRUXf2KyX31eGnYjHwWZiIKBZar0271uGjnc919PfqZVP885hf
dC32KVqxp+IhotnoyJb0vm94MtjV6dBefU7lBNMvun7D1TfzJTdpiWii1kdP
c7cay1iOxWZSEdHg9uXPLeRqvGFbvVS4Q0AtzmoZ666VuEeaUfS/eQJqDJYb
1dmtwDQbuylv9v5PXbKo4OPoCqwtxVv06BcBlXcyxooUlePCxof7eIYIyD6o
cvvpzlccKpGUKdZEQH3hf+5FsXzF6tJVtxnqCOhUFA/hkegXfLzA9FdvJQFp
JbpRBOmX4jW2ec2DJQTEXsxH4/GkCAfRHamueU1AwZ0TpHitXLz6hO36tjsB
uY9qkqMv5uDW73b/IlwIyGY+WvxBcBa+QfWbjtaegA7RaUt7N6bjFstnLPVW
BFTlI+v0piQJyxpOl93T3MuX+W10NIUpnq/My58nEpDlH2Xv37sOMHytM2h9
ZRdOMLtkHhn2AVPJYvvViV0wSgmucGyNAPIYz+PU2l2onWI9ebcuAf5H8jFo
CN8F6sdnnobovgO6UzQuLXS7ID50t/hh4Fd4bBNm37u5DQkbdYM5F8tg4S2v
RervbeDg4qJu0cZw2TGb7mL/NgRKnMkK9yuH//nFL5WWboPH+aX1JvVKsBu/
+3n19jaYNkjEWX34BrT4h0HV8hYwZES2OqU1wnwDlnMb3wSdvHzRbzqdwHnD
sDzx6z/wyiv10JQchYsCd3WOqf+FuIkFhr/h09CTPZTPYrAIOZVXMoL+mwa2
M+5NN9UXoTJ5WIetYhqiWGIdx2QWYf5sq8/B9WnQ1DRm62FZBMPmvF/OjjOw
PDpoL9m/ABtFblWDOr+hO1DxvK3HApx/MHunbnMWNvJmPp81nIcYzpWVJtUF
2L4b4iuiPwuca5ttZXoLsM/bkVJJbhZe9FDm5VksQBPjhR+WHLOQ/IrdOfrG
AuwPf63WPfobckQODVjkLoBBRcDRcv/fUCN341u/+CLIQWaVWPkMbOotPJvm
WAKhQe/RHZNpsPeeVaVaXob/4lh4dhImgbrv7twaYQWux/7Pdz18EjKPMKTP
7F+BK9mWJcRbkzC7T5qzVXoF2A1fPENmk3Az1mk5/tIKhHWpr7lRT0Jo/mie
QvsKPDw51xfqOQGZMz1SNu//gv5qyVvHM+Mwa/uNr+D6GggRfx3cNh6F4y51
sRf81mBW5lBCseYoZN1sYGSMWINTpjQq92RHwelR2459+hpYGN5uOLh/FEY/
DYxyDazBy+vi6eT2EejhWM26Y7wO1o6mf/RtRqC6XkJTR/wfhH7K2NLxGYZX
qg/OtfVtwA/PQy//yxyAJeXuyxnTG+BkOCX89PEAGB6ScPVb34D+w8tv4m8M
wOrBat8DXJvwh2/LZl5rAMwPEJICzDbhgHnM1cL2n0AvcHtYsW4TSOWyZ9Mo
fu7tB1ccYgq3wFd2AAV59oFlo8H101E7UPRO18fmWTfUmwiZyyTtwIz8V2eZ
gG5ATSvKlDk7UPNtw4LhWjfINr/e+FC7A/ceTU5s63YDRetmCNvuDngXGN3J
+dsF+R15CW3XdsH0VmYL2boLQv8wTGSI781tTSoK0sFOGF3xZJPYm6uG0rLy
0dQd8FI+pCGdnojO/9II619ph1NX4oIl2YgoxYxGVnWsHcr6S1alRPb6qiWd
sEB5O8RXbvfJwN5cuOfL8/ZOO5hHhaUp3iWi5re2s6VLbVAh80r5yDIRrdYW
b9jMtULKpUorizEKlOksvuUi0gwq7o8X3s9QIByWzt9B1Qz1fmceMi9RoM5e
cXOLmSb4+2Luaz2BEumZzGa9LmgC4xY+8aNClMhmUivZwaAJVjQ9l+XOUiLR
k2yu9z0bwZBTLIqmhRIV0MixOgzUw2JtyPfS0n1oVKIpIWS5FuLinp56WbEP
zQk/NKcbqgUNh7TuW3X70LFjaT5J9bUQTFExody1D93PPDey9boWuI5sEfMW
96Fz92PuPzCrBa0PNzTSpKjQt7nyS80FNRCWcCE7Io4KEdR+3fkQ/A0EPdQf
29ygRgQPmu0/FlWgrT7X3+JDjbQVKfm3dKrAlpgmfSyAGlEmzvzgU6yClGjG
ugNR1KjHJG4onKkKxD4MUay9o0bG5kxvZWsrQXo55Hb0NDXq/fBr+9aRSlC9
2X655iINmlKI/4NVKsDU56qGgikt8iJkZ5LelIE/hb23mBUt+iIdMx4ZXgb5
ETYfeM7Totq7M4Jc18uAJemENPEqLSKk96o7aZRBa+VBvvZQWqQZVLPA2/4V
zBlX/nmW0aLLgSV2+VRfwSrZ91OxHB1iYB/tFfD7DDbfHqsBIz36jOdfUL4t
AVpDWa06dnpUvHqloTu6BD7W14MZPz26dX/uS8WdEmBqpTG4LE2PZo71RHSZ
lEBZX4BlmCE9OtNs8Ya4VAykhZs3WoLpUUSahpUJKoYJPtucC9v0iOwbKSU7
Wwhu7vIk/zkGxJLaNMzqVwDrNaH7Jv8yoNPen4DragEECQ5NHd9mQB8e+R2S
OVsAL+oj33MzMiKt9riEUJUCqBJb1Mk7wIgsWM2biPMfgKe3wGHQnhF9bBd9
sWX/ASqOqmdr9TMiTfaK/Uk274GDXVf1Xy0T8l7dp8Y7nwu50sM0w81MKKyC
5O39IxcMdXx7azqZUAhLR8rMp1zw9fjo+3SMCU22aF3jDsmF8RaxqoO7TCiJ
lFjmL5ALHx9RnXJU3Y/Y9CfOB5i+AwvqWueON/vRVmRmSdG3bHj2zyjxXQAz
khKhD6aez4Qc+keqB8KZ0ePupgXcnQmV/M0tb6KYEb0icEWWZ8LcEXOKhGRm
FDWqoeEWkwn6gdZOD78yI7v/RD7KHc6EVfqrik7/mNG1gAmelOAMkN1fcylK
jQXJ33fLbJBPhyfCv1aN8lkQz3bQsPaXNHhNK61RV8CCVtM6s+iz0+Djoquf
fjELomz95DnxMg16q5Yoj5WxoO/G1E21t9JA7MoOi1YjCzr7pUJJWzkNSvM5
ZeSnWNDhhywvJvNSYfKo7gU2Eiu6sK7u1fz+NWjbv67ti2RFzH4fI6tLkwEd
PnrXIJYV6WbsP5aenAw69CPyH+NYkdY0Gzk5OBn080lxjxNZkULYBm/XyWQ4
sZVsj7JZkXkr31er8SSweZpETK9hRao35wai2ZPgbvUrTY9tVrSSJcV0NTAB
SsTi8miusqFeronUksSXcHuFtrbMjQ2Jy2Tx/gt5CWrVdwdv3mBDZxRUnpq6
vYSSy3ZM4z5sqM6Y/Zg27HGq7NXyB3tca2RGGn0BxaQqCZ90NpTRGlA8IfMC
igQWEmdG2FDlyMf//jTHQSGH8aOmM+xId0N7e+bkU9iqtuXTs2FHZ6qsI84c
eQq6Nz0zv1xgR68ckk50yjyFH50J1dmO7Khal1Fji/YpLMXNb4V7saPM59R6
O1WxoMD77Jp+FDvK3bT7WasVC1mCwydxLTsSzE/h4VWPgWQJb9b3qhyo3Svl
OZd1FLzpOE/pqcGBFFVIXhXGUZDlr/dXWZsDTeqv5t/RjIKiPo7eEj0OVCRU
x8kjGAWNTwpSyi04kPy9azIbFZGwsbpwsPUGB/I74lBf1/UErGqvnpzP5UAJ
EXenEzgeA+MVuwg5SU50oX6Ft7U/HIi7//0ZkOZEZ0pCqCmqw2H12YzpE3lO
NGfAOmCUEw7DVZ4c8yqcaL7izhqfXzgUCIcm5utyogoDi/flwuFg3Z2Vd+gS
J1JdZFimdX4AmforHeqJnMj4UK8UNUMYHBMPE9Bn50Lf/3fNsvhBMJQnXPtb
xMWFikm+Apy3gkGLw6JZko8L3anioQ10CAZVShF/OhEuROVCyRuuEwxSI6Vj
jfJce/1et8R4OwgYE+eyThtzodR9ld+ibgZBJ4eVul0AF/Kb1xRscw8Ep33i
Vr7zXGhB4kbho0h/SL09GHN4mQtVkWVYRPz94efs85alVS50z6agpsrdH8w7
6Y2cd7jQeEgVq7K5P2ilL2haMXGjycvPc8o4/YHF8IuIggw3kgrroRrRvg+l
Eaf/jDlyo5XzvHL9Pn6wnz0w+PggN2LnG5e30LwDrU4Dh2tHuBF1vYlLqNgd
iPmi9ltnghvZ1UTfbmS6A9yO82Yas9zI0LCtLnZvLyZ9shE+sMGNchdOnmUK
84FDFw6XUnPxIPvP256J3bfhTPbsfMUJHvRyV8SyLPQWpB373zm1rzyo73Pl
9Tjem2ARyHw/tZwHxWhcYHxFcxOoK2pTGat5kCxJYCv3rxdc0VabGa7nQdw/
qlP2tXuBvDqvT3gPDyJuD8Y6RHhBqXx/XN8yD7pjk/pnieAF7bwX2n2leVHj
WXWa8dUbQFxwNKp4zotUBJ9fC2XwAHeZpdabr3iRFqdnS9WmOww7+p2RTuZF
p8Kbqphn3aF8INYpNp0XieuKy3c0usO9hvIQh0JedLZEOpY60h020vkq6Tp4
kf4RCU4OLndYOt+sYb6fD+WZqBgM27jBaIOK7FgwH8rOsm+nZrgKvb8uSZ95
wId6Nr7kvl92gVbKKKmmCD7U/Dkzx/2nC2DNGbHiGD70orqlVjrXBRKykwQj
UvhQJf744rG5C1hF0DAf+sKHCsr4y3eSnKHeuHcxcJkPfYnkXuPTvwLvv/sW
i17iR8zHBEm13x3AcdSXd9SBH83ZfRxyLHQAgU3fu6+d+VF8w413vK8dIFTW
D0ge/KjQUl625LYD2ET61Qr68yPFJVzbJeUA1Jb3unmS+NGKgphqxCN7sB6+
v7a/jx8FIIKitd1loFgLPLxpJoAs9BS3GI/YASyIsdy1FEABFaltO3J24Dtd
M7VxRgC5/o/ctC1kB6v99PEbFwSQeoMrLZloBzPlMVv/rgkgv0tMZnQ1F6H9
YWrFergAknSxNtc0vwipQpXHVysEkMLr3eTWX7ZwVJ94cVFRED0d/EJ15OM5
cDtAeHtBRRC1N/w+GJxwDuIZdxeb1ASR/eb+rKHgc7DUvhWUBYJodCLXsMPy
HKReWM+4fEIQVd3cPp69bg37fObnO68IogZLI39mHWuoyR64X5osiNaDnLSV
x86AMWtpchCTEJrNZzL3OWcFyosRJlqsQkhZ1kOmSN8KhNrO/1vhEEIvs7+b
UCtZwXIU8bSjgBA6xd0gPExrBQksRtRGMkLoKsd3ztvFlvCHucd1v5EQehqv
/ucAjyVE7V9VfxkshB6cHZ4T/HUauhiUfuRuCqHsc25vyorNwLDxvzXJXSGU
fF1k7lKmGZQ+4uV/TSGMEreWwjhemkESE/FSLJ0wIvu3+yXfMQMH5tb5W9x7
7NKjeFrbDFbY3BiOHhJGMvVUXZJ1p4CNL0unw0UYFUWrV3vUm4KplOj7tV5h
1P7qLbNtiAncm7ii9nlAGN19rXv3qYsJ5Kbm4XsjwujSszTmcVMT2C94pJlq
WhiNWWlbNPOZQDPrmd/s63vxVj5+aXx/HDK2a9h4GEgIlr632owbg8SvLRPl
AySUQGPyQvacEYiXXqlwdSChl/syNEcf6sPHxxpf9ZxISM/YqITHWx907Rg/
CTmTkPsk08VLdvpgT5uf3+pKQtpnrWfk1fQh1WotWdmLhB6Lse9mTeqB0HLI
va1AErqjaExNMtADLtk0zUcpJFQSfzw3jFMXaJMGCrP7SahPn1zRMn4UftoR
/tgPkNCIwviIS+dRyBMniwkNkdBx3g3EXnMUrN5diYkaJSHFsVePIjKOQtqX
Zbeb0yQ0eJ5fkPfqUdDup5OCNRLazzR8PmkFwU0e1fh2NhH0WENUgooVwWjM
k3v/jESQqeSpot1eLeDojP/VfVwEPchN7uXCWmDAnXGq6IQIqpoV4jJ4owU5
r7Cop5kIGggU9lty0wLvNws1s2dEkDSRxecGlRbQFZkzDzuJIA7kKUR5WBMU
erlSakJEUP15IcGGbHXwE06uiK0QQaUvLZr+160KK2ZbDuZVIqjxPGe0Z5Uq
uASfpWf9JoIYFn0yUvJUwWqa/fSTOhEk2DQWKf9AFRQKHow/aBFBgeGMOdwa
qjCqf4Pm3oAIGk2pFGV7rQL6bnonrvwTQczKzLLH7ioD89ffPVqKoojhxUpG
3Hkl8LW/VbikJIp0aahjp04owQwDZUymsijilDg0YqCtBDXWfMc51ERRtJWS
j7ywEtxbN/z6W1sUMdqLWsePKMLsofTX8SaiKJd8nG3siiLUZ110WXcSRUHD
OYO//RUg9EXnZkHSXvyK6zYH3srB6TJj+sgUUXT8ck5X/mM5II1jHpfUvfuH
FCrNbshB6cEsFVK6KDpZOPJkSFMO/tTcu/7onSgKtvJ1l2qVBYu/kmP2X0RR
Yd4LyXPbMiBqfqees08UDd9TO5HhLA2YQfjlLU4yate+kH0oRBJaRSZGlbjJ
6FV3g+WQuyQMH86WneMhI8q1gJgEG0mgsD9cbi9ARvIt3KHHlSVB94vpLzMy
GY19GMnzGZeAeld/FVlFMgowFqOlN5SArqaRtmETMjI3ClJ9xi8Oc5Fv6I2D
ycjmXEHdqUVR0Pt5blQtlIzun8lpph8ShQQp9lLJB2SkcNnqZlejKBhXBDhT
PSKjTYbvF1MzRSFjybauPJaMyqoZeujtROGiJW/o4TQyWsvl+8LcKQIdfE+I
4pVkNAtSh29/J4G0k14vezUZVRNl4/Q/kSCwYCufooaMji5YPRV7SwIFk6sX
h7+T0TfPaUXmcBI88jPEr9rISHA30TTRiAT6wxR+bCNklC2HLpFeCUOibKkF
cYyMGlp0yWm+wrBy20N2YZyM+PvKTxyzFYZU1uH+pikyutz45Vq/iDDs6nzV
CF8gI8dM+hqnLCGwivRiu71ERnjfqbL2R0KQ2y8z47hCRnf+0iHr60Jg4xX/
UnedjJoaejzKlIWgoNzM49AGGXk8l/8dzy0E9Ex0RqJbZKQXdcc/dkMQ7M6W
k1h3yKickMyVOSAIJf/dWt/dJaPv517E9JQLwv8BRRCFjw==
     "]]}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->True,
  AxesOrigin->{0, 0},
  PlotRange->{All, All},
  PlotRangeClipping->True,
  PlotRangePadding->{Automatic, Automatic}]], "Output",
 CellChangeTimes->{{3.5262172353207693`*^9, 3.5262172590502944`*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Solve", "[", 
  RowBox[{
   RowBox[{
    RowBox[{
     RowBox[{"r", "^", "2"}], "+", 
     RowBox[{"4", "r"}], "+", "3"}], "\[Equal]", "0"}], ",", "r"}], 
  "]"}]], "Input",
 CellChangeTimes->{{3.5262161176331234`*^9, 3.52621617178204*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"r", "\[Rule]", 
     RowBox[{"-", "3"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"r", "\[Rule]", 
     RowBox[{"-", "1"}]}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{{3.5262161312528505`*^9, 3.5262161720220356`*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"D", "[", 
  RowBox[{
   RowBox[{
    RowBox[{"c", "[", "1", "]"}], "*", 
    RowBox[{"Exp", "[", 
     RowBox[{"-", "t"}], "]"}]}], ",", "t"}], "]"}]], "Input",
 CellChangeTimes->{{3.526216179371888*^9, 3.526216203681402*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"-", 
   SuperscriptBox["\[ExponentialE]", 
    RowBox[{"-", "t"}]]}], " ", 
  RowBox[{"c", "[", "1", "]"}]}]], "Output",
 CellChangeTimes->{3.526216204431387*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"D", "[", 
  RowBox[{
   RowBox[{
    RowBox[{"c", "[", "2", "]"}], "*", 
    RowBox[{"Exp", "[", 
     RowBox[{
      RowBox[{"-", "3"}], "t"}], "]"}]}], ",", "t"}], "]"}]], "Input",
 CellChangeTimes->{{3.5262162079613166`*^9, 3.526216218131113*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"-", "3"}], " ", 
  SuperscriptBox["\[ExponentialE]", 
   RowBox[{
    RowBox[{"-", "3"}], " ", "t"}]], " ", 
  RowBox[{"c", "[", "2", "]"}]}]], "Output",
 CellChangeTimes->{3.526216218491106*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Factor", "[", 
  RowBox[{
   RowBox[{"4", 
    RowBox[{"r", "^", "2"}]}], "-", "4"}], "]"}]], "Input",
 CellChangeTimes->{{3.5262163397086816`*^9, 3.526216345388568*^9}}],

Cell[BoxData[
 RowBox[{"4", " ", 
  RowBox[{"(", 
   RowBox[{
    RowBox[{"-", "1"}], "+", "r"}], ")"}], " ", 
  RowBox[{"(", 
   RowBox[{"1", "+", "r"}], ")"}]}]], "Output",
 CellChangeTimes->{3.526216345998556*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"DSolve", "[", 
  RowBox[{
   RowBox[{
    RowBox[{
     RowBox[{"4", 
      RowBox[{
       RowBox[{"y", "''"}], "[", "t", "]"}]}], "-", 
     RowBox[{"y", "[", "t", "]"}]}], "\[Equal]", "0"}], ",", 
   RowBox[{"y", "[", "t", "]"}], ",", "t"}], "]"}]], "Input",
 CellChangeTimes->{{3.5262165865037456`*^9, 3.5262166036134033`*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"{", 
   RowBox[{
    RowBox[{"y", "[", "t", "]"}], "\[Rule]", 
    RowBox[{
     RowBox[{
      SuperscriptBox["\[ExponentialE]", 
       RowBox[{"t", "/", "2"}]], " ", 
      RowBox[{"C", "[", "1", "]"}]}], "+", 
     RowBox[{
      SuperscriptBox["\[ExponentialE]", 
       RowBox[{
        RowBox[{"-", "t"}], "/", "2"}]], " ", 
      RowBox[{"C", "[", "2", "]"}]}]}]}], "}"}], "}"}]], "Output",
 CellChangeTimes->{3.526216603923397*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"(", GridBox[{
     {
      RowBox[{"Exp", "[", 
       RowBox[{"-", "1"}], "]"}], 
      RowBox[{"Exp", "[", "1", "]"}], "1"},
     {
      RowBox[{
       RowBox[{"1", "/", "2"}], 
       RowBox[{"Exp", "[", 
        RowBox[{"-", "1"}], "]"}]}], 
      RowBox[{
       RowBox[{
        RowBox[{"-", "1"}], "/", "2"}], 
       RowBox[{"Exp", "[", "1", "]"}]}], 
      RowBox[{"-", "1"}]}
    }], ")"}], "//", "MatrixForm"}]], "Input",
 CellChangeTimes->{{3.526217041174652*^9, 3.5262170449145775`*^9}}],

Cell[BoxData[
 TagBox[
  RowBox[{"(", "\[NoBreak]", GridBox[{
     {
      FractionBox["1", "\[ExponentialE]"], "\[ExponentialE]", "1"},
     {
      FractionBox["1", 
       RowBox[{"2", " ", "\[ExponentialE]"}]], 
      RowBox[{"-", 
       FractionBox["\[ExponentialE]", "2"]}], 
      RowBox[{"-", "1"}]}
    },
    GridBoxAlignment->{
     "Columns" -> {{Center}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
      "RowsIndexed" -> {}},
    GridBoxSpacings->{"Columns" -> {
        Offset[0.27999999999999997`], {
         Offset[0.7]}, 
        Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
        Offset[0.2], {
         Offset[0.4]}, 
        Offset[0.2]}, "RowsIndexed" -> {}}], "\[NoBreak]", ")"}],
  Function[BoxForm`e$, 
   MatrixForm[BoxForm`e$]]]], "Output",
 CellChangeTimes->{3.5262170453145695`*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"plot16", " ", "=", " ", 
  RowBox[{
   RowBox[{"y", "[", "t", "]"}], "/.", 
   RowBox[{"DSolve", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{
        RowBox[{
         RowBox[{"4", 
          RowBox[{
           RowBox[{"y", "''"}], "[", "t", "]"}]}], "-", 
         RowBox[{"y", "[", "t", "]"}]}], "\[Equal]", "0"}], ",", 
       RowBox[{
        RowBox[{
         RowBox[{"y", "'"}], "[", 
         RowBox[{"-", "2"}], "]"}], "\[Equal]", 
        RowBox[{"-", "1"}]}], ",", 
       RowBox[{
        RowBox[{"y", "[", 
         RowBox[{"-", "2"}], "]"}], "\[Equal]", "1"}]}], "}"}], ",", 
     RowBox[{"y", "[", "t", "]"}], ",", "t"}], "]"}]}]}]], "Input",
 CellChangeTimes->{{3.5262171015034456`*^9, 3.5262171267029414`*^9}, {
  3.5262172961395526`*^9, 3.5262173013694477`*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"-", 
    FractionBox["1", "2"]}], " ", 
   SuperscriptBox["\[ExponentialE]", 
    RowBox[{
     RowBox[{"-", "1"}], "-", 
     FractionBox["t", "2"]}]], " ", 
   RowBox[{"(", 
    RowBox[{
     RowBox[{"-", "3"}], "+", 
     SuperscriptBox["\[ExponentialE]", 
      RowBox[{"2", "+", "t"}]]}], ")"}]}], "}"}]], "Output",
 CellChangeTimes->{3.526217127432927*^9, 3.526217302409427*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Plot", "[", 
  RowBox[{"plot16", ",", 
   RowBox[{"{", 
    RowBox[{"t", ",", 
     RowBox[{"-", "8"}], ",", "8"}], "}"}], ",", 
   RowBox[{"PlotRange", "\[Rule]", "All"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.5262173039593964`*^9, 3.526217354728381*^9}}],

Cell[BoxData[
 GraphicsBox[{{}, {}, 
   {Hue[0.67, 0.6, 0.6], LineBox[CompressedData["
1:eJwt1Ps3lAkYwHGXRCOT2yiTeV+3iKhpwiQ0z9ZmS27zrqKjYjhKJO2QS3Zz
my1ZLVtqrVTaUVItoZLQ+wipNqmQpChiDSv326Ts7jn7w/d8/oOvUUA4FaSk
oKDg9m//uVKg1z83R6LV9p3vYtjrIXzGJGVGTiJIB5x+Vl0PN0pXm41NkMi7
GhlZNO4EvOVuAb0DJPbP3nBnNToBX0vy+kkrib88T+oLkzgBdI88/q2IRNlF
rrPriCNQxxqurfEjUSU70emnJgeIbpSE7b1H4EIygXfijj00N6v3V4s4eL2E
vrG5yBY4GK7LNzDAQxrd3JzveXArtFZl0Vs2WnpgxvucVeCftnq4LUkf2XLX
8skCS5g+GZdCC5bg2kBub26lGUiZHfpZ7/Xw3MS8Vd6ECeS4rBY3HWdhaimk
nDUwhKT9ohiLLbq4ivrUqHBwKcQpX40WD2pjprF9eabiYhAlNJq+vKKFGtyG
+NsxOnC6qicrJ0QT61WyUs/EacLdzuULrxszcZr37vYdf3Uw0YQNXufV8fDH
POunHfOhxDIlpKtbDaM+VhxbcUEJOuuKDe3s5mOTWpU8ceKzoMfqNI++rYxm
7sOvIwanBFpHCuxWKipi7yvmqQeMUYGV3ZDVpbFZ2rNUbZBk9AuSvx58Vh4z
RT+1SJLE1nYKWF6FGTsWj9JP44ULi2MfCUom6xY9NO2n61QLLH8oK6Evtfec
kEk66Ezl1qN9N1vpXUKDm+2BtfRGIXtIxOihyxlxLfcP1QgK+RoWL9M/0rZd
ikSiT6egIj07IaZjnDYZrphZd18m4D4JaPc6L6e3SNsa3H1GBduvR901b1DA
TW7ayhO3pgSf9jbMKd2ah+l+rQncslkBc6dt8MVONax352h4aivCsW06A/ks
Jg4asY68yFaGL35ij6/eauGhyBWidL35MJa7+06LJgtb32hSex6qQfDxFB9j
Qh/9Yx3/UnVVB9OOl3+apnKwZgU/tUaFCcZyyXBzphGaLajsy9usCQnW8uD8
q6bIqQzdpJKiBd/GjZvorFmOCnKlAnGXNuT8Ped+qtQKp4RVu+uW6UKv14LA
rS+42G7jt3SZhAU+2W0jN2fW4EFvTS3jN3pw1Nw6wiaPj/qZH3zmcZbAicNn
GncUOGChb27+WIw+ZNnLkhOCAL2d4jc/rGKDi46spoe/EYt3hxmvm10Kaw19
jXwjnXGasVG5fBsHpElpGaGnXZB67mDHySIgrKkiwpbwQIaDenXlOQLulzo+
IGw8sDrv9dadUgIsvoQnL3bxQG5MrOhsIQHiFNE+fpQHMsmyNP06Atx9v2Hx
Gj3w0X5eN2uUgL6WX12YGzwR1CwymK4kRIRQxxmfPXH6u2l2oZAEyXTgHwoL
hFjUXn/JzZuE/L1sxzldIRJFeyrSAkjg+K0sZlkLcXZbXi8jlgQj3b7cK7uE
WCYlnVQvk3BUbvomFIV4QGOo/vI1EszFbYcHngjRLPoe5VxMQuuzLx8i2oSY
6bIr+MdKEix9g2wujApRPJJ9SrmJBOkk64D/MgotfUMI6SsSqvPy9cx5FL6v
tS/Y0EGCsV9h5eR6Cj2zXt1LlJHw+/BBdrEPhWpKV7YYDZGwXdbVcTaIQjo0
uhnHSXjMt7ubLqYwqsXZz19OwhnD5yVp8RT+/y+w2Ec0nkyj8B9C00Va
     "]]}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->True,
  AxesOrigin->{0, 0},
  PlotRange->{All, All},
  PlotRangeClipping->True,
  PlotRangePadding->{Automatic, Automatic}]], "Output",
 CellChangeTimes->{{3.5262173169491367`*^9, 3.526217354918377*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"RowReduce", "[", 
   RowBox[{"(", GridBox[{
      {
       RowBox[{"Exp", "[", 
        RowBox[{"-", "1"}], "]"}], 
       RowBox[{"Exp", "[", "1", "]"}], "1"},
      {
       RowBox[{
        RowBox[{"1", "/", "2"}], 
        RowBox[{"Exp", "[", 
         RowBox[{"-", "1"}], "]"}]}], 
       RowBox[{
        RowBox[{
         RowBox[{"-", "1"}], "/", "2"}], 
        RowBox[{"Exp", "[", "1", "]"}]}], 
       RowBox[{"-", "1"}]}
     }], ")"}], "]"}], "//", "MatrixForm"}]], "Input",
 CellChangeTimes->{{3.5262166219230375`*^9, 3.5262166707820597`*^9}, {
  3.5262169564163475`*^9, 3.5262169705960636`*^9}}],

Cell[BoxData[
 TagBox[
  RowBox[{"(", "\[NoBreak]", GridBox[{
     {"1", "0", 
      RowBox[{"-", 
       FractionBox["\[ExponentialE]", "2"]}]},
     {"0", "1", 
      FractionBox["3", 
       RowBox[{"2", " ", "\[ExponentialE]"}]]}
    },
    GridBoxAlignment->{
     "Columns" -> {{Center}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
      "RowsIndexed" -> {}},
    GridBoxSpacings->{"Columns" -> {
        Offset[0.27999999999999997`], {
         Offset[0.7]}, 
        Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
        Offset[0.2], {
         Offset[0.4]}, 
        Offset[0.2]}, "RowsIndexed" -> {}}], "\[NoBreak]", ")"}],
  Function[BoxForm`e$, 
   MatrixForm[BoxForm`e$]]]], "Output",
 CellChangeTimes->{{3.5262166614122477`*^9, 3.526216671042055*^9}, 
   3.526216971526045*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Exp", "[", "1", "]"}]], "Input",
 CellChangeTimes->{{3.5262167620702343`*^9, 3.526216763330209*^9}}],

Cell[BoxData["\[ExponentialE]"], "Output",
 CellChangeTimes->{3.5262167636502028`*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Factor", "[", 
  RowBox[{
   RowBox[{"4", 
    RowBox[{"t", "^", "2"}]}], "-", "1"}], "]"}]], "Input",
 CellChangeTimes->{{3.526216806099354*^9, 3.526216820999056*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"(", 
   RowBox[{
    RowBox[{"-", "1"}], "+", 
    RowBox[{"2", " ", "t"}]}], ")"}], " ", 
  RowBox[{"(", 
   RowBox[{"1", "+", 
    RowBox[{"2", " ", "t"}]}], ")"}]}]], "Output",
 CellChangeTimes->{{3.526216817679122*^9, 3.526216821329049*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"Exp", "[", "1", "]"}], "*", 
  RowBox[{"Exp", "[", "2", "]"}]}]], "Input",
 CellChangeTimes->{{3.5262168501084733`*^9, 3.5262168551583724`*^9}}],

Cell[BoxData[
 SuperscriptBox["\[ExponentialE]", "3"]], "Output",
 CellChangeTimes->{3.526216855538365*^9}]
}, Open  ]],

Cell[BoxData[""], "Input",
 CellChangeTimes->{{3.52621618678174*^9, 3.5262161929916162`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"DSolve", "[", 
  RowBox[{
   RowBox[{
    RowBox[{
     RowBox[{"y", "''"}], "[", "t", "]"}], "\[Equal]", 
    RowBox[{
     FractionBox["1", "a"], 
     SqrtBox[
      RowBox[{"1", "+", 
       SuperscriptBox[
        RowBox[{"(", 
         RowBox[{
          RowBox[{"y", "'"}], "[", "t", "]"}], ")"}], "2"]}]]}]}], ",", 
   RowBox[{"y", "[", "t", "]"}], ",", "t"}], "]"}]], "Input",
 CellChangeTimes->{{3.5262171837618003`*^9, 3.526217187611723*^9}, {
  3.52621789327761*^9, 3.526217919967076*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"{", 
   RowBox[{
    RowBox[{"y", "[", "t", "]"}], "\[Rule]", 
    RowBox[{
     RowBox[{"C", "[", "2", "]"}], "+", 
     RowBox[{"a", " ", 
      RowBox[{"Cosh", "[", 
       FractionBox["t", "a"], "]"}], " ", 
      RowBox[{"Cosh", "[", 
       RowBox[{"C", "[", "1", "]"}], "]"}]}], "+", 
     RowBox[{"a", " ", 
      RowBox[{"Sinh", "[", 
       FractionBox["t", "a"], "]"}], " ", 
      RowBox[{"Sinh", "[", 
       RowBox[{"C", "[", "1", "]"}], "]"}]}]}]}], "}"}], "}"}]], "Output",
 CellChangeTimes->{{3.526217917837118*^9, 3.5262179201470723`*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"DSolve", "[", 
  RowBox[{
   RowBox[{
    RowBox[{
     RowBox[{"v", "'"}], "[", "t", "]"}], "\[Equal]", 
    RowBox[{
     FractionBox["1", "a"], 
     SqrtBox[
      RowBox[{"1", "+", 
       SuperscriptBox[
        RowBox[{"(", 
         RowBox[{"v", "[", "t", "]"}], ")"}], "2"]}]]}]}], ",", 
   RowBox[{"v", "[", "t", "]"}], ",", "t"}], "]"}]], "Input",
 CellChangeTimes->{{3.5262179343567877`*^9, 3.526217960396267*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"{", 
   RowBox[{
    RowBox[{"v", "[", "t", "]"}], "\[Rule]", 
    RowBox[{"Sinh", "[", 
     FractionBox[
      RowBox[{"t", "+", 
       RowBox[{"a", " ", 
        RowBox[{"C", "[", "1", "]"}]}]}], "a"], "]"}]}], "}"}], 
  "}"}]], "Output",
 CellChangeTimes->{{3.5262179517264404`*^9, 3.526217961286249*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"D", "[", 
  RowBox[{
   SuperscriptBox[
    RowBox[{"Cos", "[", "\[Theta]", "]"}], "2"], ",", "\[Theta]"}], 
  "]"}]], "Input",
 CellChangeTimes->{{3.526218217601123*^9, 3.526218227460926*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"-", "2"}], " ", 
  RowBox[{"Cos", "[", "\[Theta]", "]"}], " ", 
  RowBox[{"Sin", "[", "\[Theta]", "]"}]}]], "Output",
 CellChangeTimes->{3.5262182277909193`*^9}]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Online Assignment 4\t", "Section",
 CellChangeTimes->{{3.526388274627016*^9, 3.526388288176338*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"y1", "=", " ", 
  RowBox[{
   RowBox[{
    RowBox[{
     RowBox[{"y", "[", "t", "]"}], "/.", 
     RowBox[{"DSolve", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
         RowBox[{
          RowBox[{
           RowBox[{
            RowBox[{"y", "''"}], "[", "t", "]"}], "+", 
           RowBox[{"7", 
            RowBox[{
             RowBox[{"y", "'"}], "[", "t", "]"}]}], "+", 
           RowBox[{"12", 
            RowBox[{"y", "[", "t", "]"}]}]}], "\[Equal]", "0"}], ",", 
         RowBox[{
          RowBox[{
           RowBox[{"y", "'"}], "[", "0", "]"}], "\[Equal]", "0"}], ",", 
         RowBox[{
          RowBox[{"y", "[", "0", "]"}], "\[Equal]", "1"}]}], "}"}], ",", 
       RowBox[{"y", "[", "t", "]"}], ",", "t"}], "]"}]}], "//", "Expand"}], "//",
    "TraditionalForm"}]}]], "Input",
 CellChangeTimes->{{3.5263882893762784`*^9, 3.5263883615026717`*^9}, {
  3.5263883989407997`*^9, 3.5263884436585636`*^9}}],

Cell[BoxData[
 FormBox[
  RowBox[{"{", 
   RowBox[{
    RowBox[{"4", " ", 
     SuperscriptBox["\[ExponentialE]", 
      RowBox[{
       RowBox[{"-", "3"}], " ", "t"}]]}], "-", 
    RowBox[{"3", " ", 
     SuperscriptBox["\[ExponentialE]", 
      RowBox[{
       RowBox[{"-", "4"}], " ", "t"}]]}]}], "}"}], TraditionalForm]], "Output",\

 CellChangeTimes->{{3.5263883228446045`*^9, 3.526388361802657*^9}, {
  3.526388400430725*^9, 3.5263884439585485`*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"DSolve", "[", 
   RowBox[{
    RowBox[{
     RowBox[{
      RowBox[{
       RowBox[{"y", "''"}], "[", "x", "]"}], "-", 
      RowBox[{"14", 
       RowBox[{
        RowBox[{"y", "'"}], "[", "x", "]"}]}], "+", 
      RowBox[{"49", 
       RowBox[{"y", "[", "x", "]"}]}]}], "\[Equal]", "0"}], ",", 
    RowBox[{"y", "[", "x", "]"}], ",", "x"}], "]"}], "//", 
  "TraditionalForm"}]], "Input",
 CellChangeTimes->{{3.5263887894022193`*^9, 3.5263888384196787`*^9}}],

Cell[BoxData[
 FormBox[
  RowBox[{"{", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"y", "(", "x", ")"}], "\[Rule]", 
     RowBox[{
      RowBox[{
       SubscriptBox[
        TagBox["c",
         C], "1"], " ", 
       SuperscriptBox["\[ExponentialE]", 
        RowBox[{"7", " ", "x"}]]}], "+", 
      RowBox[{
       SubscriptBox[
        TagBox["c",
         C], "2"], " ", 
       SuperscriptBox["\[ExponentialE]", 
        RowBox[{"7", " ", "x"}]], " ", "x"}]}]}], "}"}], "}"}], 
  TraditionalForm]], "Output",
 CellChangeTimes->{{3.5263888153811803`*^9, 3.5263888387896533`*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 SqrtBox["625"]], "Input",
 CellChangeTimes->{{3.526388997278558*^9, 3.526389000058364*^9}}],

Cell[BoxData["25"], "Output",
 CellChangeTimes->{3.526389000208353*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Solve", "[", 
  RowBox[{
   RowBox[{
    RowBox[{
     RowBox[{"625", 
      SuperscriptBox["x", "2"]}], "-", "9"}], "\[Equal]", "0"}], ",", "x"}], 
  "]"}]], "Input",
 CellChangeTimes->{{3.5263890214368668`*^9, 3.5263890328860655`*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"x", "\[Rule]", 
     RowBox[{"-", 
      FractionBox["3", "25"]}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"x", "\[Rule]", 
     FractionBox["3", "25"]}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{3.5263890331360483`*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"6", "*", 
  RowBox[{"3", "/", "25"}]}]], "Input",
 CellChangeTimes->{{3.526389108620764*^9, 3.5263891112805777`*^9}}],

Cell[BoxData[
 FractionBox["18", "25"]], "Output",
 CellChangeTimes->{3.5263891117105474`*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"(", 
   RowBox[{
    RowBox[{"-", "18"}], "/", "25"}], ")"}], "+", "5"}]], "Input",
 CellChangeTimes->{{3.526389115430287*^9, 3.5263891221598773`*^9}}],

Cell[BoxData[
 FractionBox["107", "25"]], "Output",
 CellChangeTimes->{{3.5263891175201406`*^9, 3.5263891224798613`*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"6", "+", 
  RowBox[{"107", "/", "6"}]}]], "Input",
 CellChangeTimes->{{3.5263891494185143`*^9, 3.526389150928439*^9}}],

Cell[BoxData[
 FractionBox["143", "6"]], "Output",
 CellChangeTimes->{3.5263891511784267`*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Factor", "[", 
  RowBox[{
   RowBox[{"4", 
    RowBox[{"x", "^", "2"}]}], "+", 
   RowBox[{"16", "x"}], "-", "33"}], "]"}]], "Input",
 CellChangeTimes->{{3.526389299810994*^9, 3.5263893133103194`*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"(", 
   RowBox[{
    RowBox[{"-", "3"}], "+", 
    RowBox[{"2", " ", "x"}]}], ")"}], " ", 
  RowBox[{"(", 
   RowBox[{"11", "+", 
    RowBox[{"2", " ", "x"}]}], ")"}]}]], "Output",
 CellChangeTimes->{3.5263893135503073`*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Factor", "[", 
  RowBox[{
   RowBox[{"x", "^", "2"}], "+", 
   RowBox[{"4", "x"}], "-", 
   RowBox[{"33", "/", "4"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.5263893461886754`*^9, 3.526389353308319*^9}}],

Cell[BoxData[
 RowBox[{
  FractionBox["1", "4"], " ", 
  RowBox[{"(", 
   RowBox[{
    RowBox[{"-", "3"}], "+", 
    RowBox[{"2", " ", "x"}]}], ")"}], " ", 
  RowBox[{"(", 
   RowBox[{"11", "+", 
    RowBox[{"2", " ", "x"}]}], ")"}]}]], "Output",
 CellChangeTimes->{3.5263893535983047`*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"16", "*", "16"}], "-", 
  RowBox[{"16", "*", 
   RowBox[{"-", "33"}]}]}]], "Input",
 CellChangeTimes->{{3.5263894547511168`*^9, 3.526389461600843*^9}}],

Cell[BoxData["784"], "Output",
 CellChangeTimes->{3.5263894625108066`*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 SqrtBox["784"]], "Input",
 CellChangeTimes->{{3.5263894659906673`*^9, 3.526389468630562*^9}}],

Cell[BoxData["28"], "Output",
 CellChangeTimes->{3.5263894688905516`*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"28", "/", "8"}]], "Input",
 CellChangeTimes->{{3.5263894929795876`*^9, 3.5263894935995626`*^9}}],

Cell[BoxData[
 FractionBox["7", "2"]], "Output",
 CellChangeTimes->{3.526389493779556*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"-", "2"}], "+", 
  RowBox[{"7", "/", "2"}]}]], "Input",
 CellChangeTimes->{{3.5263894980393853`*^9, 3.526389499519326*^9}}],

Cell[BoxData[
 FractionBox["3", "2"]], "Output",
 CellChangeTimes->{3.526389499749317*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"-", "2"}], "-", 
  RowBox[{"7", "/", "2"}]}]], "Input",
 CellChangeTimes->{{3.5263895012392573`*^9, 3.5263895030591846`*^9}}],

Cell[BoxData[
 RowBox[{"-", 
  FractionBox["11", "2"]}]], "Output",
 CellChangeTimes->{3.5263895032691765`*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Exp", "[", 
  RowBox[{"-", 
   RowBox[{"Integrate", "[", 
    RowBox[{
     RowBox[{
      RowBox[{"-", "2"}], "/", "t"}], ",", "t"}], "]"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.526389832566004*^9, 3.5263898523849325`*^9}}],

Cell[BoxData[
 SuperscriptBox["t", "2"]], "Output",
 CellChangeTimes->{3.5263898527049103`*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Exp", "[", 
  RowBox[{"-", 
   RowBox[{"Integrate", "[", 
    RowBox[{
     RowBox[{
      RowBox[{"-", "2"}], "t"}], ",", "t"}], "]"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.5263899102508817`*^9, 3.526389911230813*^9}}],

Cell[BoxData[
 SuperscriptBox["\[ExponentialE]", 
  SuperscriptBox["t", "2"]]], "Output",
 CellChangeTimes->{3.52638991170078*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Integrate", "[", 
  RowBox[{
   RowBox[{
    RowBox[{"-", "1"}], "/", "t"}], ",", "t"}], "]"}]], "Input",
 CellChangeTimes->{{3.5263899574675765`*^9, 3.526389962197245*^9}}],

Cell[BoxData[
 RowBox[{"-", 
  RowBox[{"Log", "[", "t", "]"}]}]], "Output",
 CellChangeTimes->{3.526389962437228*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"DSolve", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{
        RowBox[{
         RowBox[{"4", 
          RowBox[{
           RowBox[{"y", "''"}], "[", "t", "]"}]}], "+", 
         RowBox[{"16", 
          RowBox[{
           RowBox[{"y", "'"}], "[", "t", "]"}]}], "-", 
         RowBox[{"33", 
          RowBox[{"y", "[", "t", "]"}]}]}], "\[Equal]", "0"}], ",", 
       RowBox[{
        RowBox[{"y", "[", "0", "]"}], "\[Equal]", "0"}], ",", 
       RowBox[{
        RowBox[{
         RowBox[{"y", "'"}], "[", "0", "]"}], "\[Equal]", "1"}]}], "}"}], ",", 
     RowBox[{"y", "[", "t", "]"}], ",", "t"}], "]"}], "//", "Expand"}], "//", 
  "TraditionalForm"}]], "Input",
 CellChangeTimes->{{3.5263903988617926`*^9, 3.5263904759779367`*^9}}],

Cell[BoxData[
 FormBox[
  RowBox[{"{", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"y", "(", "t", ")"}], "\[Rule]", 
     RowBox[{
      RowBox[{
       FractionBox["1", "7"], " ", 
       SuperscriptBox["\[ExponentialE]", 
        RowBox[{
         RowBox[{"3", " ", "t"}], "/", "2"}]]}], "-", 
      RowBox[{
       FractionBox["1", "7"], " ", 
       SuperscriptBox["\[ExponentialE]", 
        RowBox[{
         RowBox[{
          RowBox[{"-", "11"}], " ", "t"}], "/", "2"}]]}]}]}], "}"}], "}"}], 
  TraditionalForm]], "Output",
 CellChangeTimes->{{3.526390434090031*^9, 3.5263904452794714`*^9}, 
   3.5263904765079103`*^9}]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["\<\
Assignment 5: 3.5:3,17,s8 3.6: 8,15,28 4.2: 1,8,11,17,24,29,31 4.3: \
1,9,s10,s11\
\>", "Section",
 CellChangeTimes->{{3.5269950250518847`*^9, 3.5269951117859154`*^9}}],

Cell[BoxData[
 RowBox[{"Clear", "[", "\"\<`*\>\"", "]"}]], "Input",
 CellChangeTimes->{{3.526997206909607*^9, 3.526997215619259*^9}, {
  3.5269974060616407`*^9, 3.5269974065616207`*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"y", " ", "[", "t_", "]"}], ":=", " ", 
  RowBox[{
   RowBox[{"(", 
    RowBox[{
     RowBox[{"A", "*", 
      RowBox[{"t", "^", "2"}]}], "+", 
     RowBox[{"B", "*", "t"}], "+", "c"}], ")"}], "*", 
   RowBox[{"Exp", "[", 
    RowBox[{"-", "t"}], "]"}]}]}]], "Input",
 CellChangeTimes->{{3.526997393002163*^9, 3.5269973959520454`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"y", "'"}], "[", "t", "]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"y", "''"}], "[", "t", "]"}], "//", "Simplify"}], "//", 
  "Expand"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{
     RowBox[{"y", "''"}], "[", "t", "]"}], "-", 
    RowBox[{"2", 
     RowBox[{
      RowBox[{"y", "'"}], "[", "t", "]"}]}], "-", 
    RowBox[{"3", 
     RowBox[{"y", "[", "t", "]"}]}]}], "//", "Simplify"}], "//", 
  "Expand"}]}], "Input",
 CellChangeTimes->{{3.5269974205010633`*^9, 3.5269974331205587`*^9}, {
  3.5269975187571325`*^9, 3.5269975448860874`*^9}, {3.5269975924041867`*^9, 
  3.5269976001338778`*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{
   SuperscriptBox["\[ExponentialE]", 
    RowBox[{"-", "t"}]], " ", 
   RowBox[{"(", 
    RowBox[{"B", "+", 
     RowBox[{"2", " ", "A", " ", "t"}]}], ")"}]}], "-", 
  RowBox[{
   SuperscriptBox["\[ExponentialE]", 
    RowBox[{"-", "t"}]], " ", 
   RowBox[{"(", 
    RowBox[{"c", "+", 
     RowBox[{"B", " ", "t"}], "+", 
     RowBox[{"A", " ", 
      SuperscriptBox["t", "2"]}]}], ")"}]}]}]], "Output",
 CellChangeTimes->{
  3.526997433730534*^9, {3.526997521397027*^9, 3.5269975451860757`*^9}, 
   3.526997600483864*^9}],

Cell[BoxData[
 RowBox[{
  RowBox[{"2", " ", "A", " ", 
   SuperscriptBox["\[ExponentialE]", 
    RowBox[{"-", "t"}]]}], "-", 
  RowBox[{"2", " ", "B", " ", 
   SuperscriptBox["\[ExponentialE]", 
    RowBox[{"-", "t"}]]}], "+", 
  RowBox[{"c", " ", 
   SuperscriptBox["\[ExponentialE]", 
    RowBox[{"-", "t"}]]}], "-", 
  RowBox[{"4", " ", "A", " ", 
   SuperscriptBox["\[ExponentialE]", 
    RowBox[{"-", "t"}]], " ", "t"}], "+", 
  RowBox[{"B", " ", 
   SuperscriptBox["\[ExponentialE]", 
    RowBox[{"-", "t"}]], " ", "t"}], "+", 
  RowBox[{"A", " ", 
   SuperscriptBox["\[ExponentialE]", 
    RowBox[{"-", "t"}]], " ", 
   SuperscriptBox["t", "2"]}]}]], "Output",
 CellChangeTimes->{
  3.526997433730534*^9, {3.526997521397027*^9, 3.5269975451860757`*^9}, 
   3.526997600483864*^9}],

Cell[BoxData[
 RowBox[{
  RowBox[{"2", " ", "A", " ", 
   SuperscriptBox["\[ExponentialE]", 
    RowBox[{"-", "t"}]]}], "-", 
  RowBox[{"4", " ", "B", " ", 
   SuperscriptBox["\[ExponentialE]", 
    RowBox[{"-", "t"}]]}], "-", 
  RowBox[{"8", " ", "A", " ", 
   SuperscriptBox["\[ExponentialE]", 
    RowBox[{"-", "t"}]], " ", "t"}]}]], "Output",
 CellChangeTimes->{
  3.526997433730534*^9, {3.526997521397027*^9, 3.5269975451860757`*^9}, 
   3.526997600483864*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Solve", "[", 
  RowBox[{
   RowBox[{
    RowBox[{
     RowBox[{"x", "^", "2"}], "+", "4"}], "\[Equal]", "0"}], ",", "x"}], 
  "]"}]], "Input",
 CellChangeTimes->{{3.5269977716070185`*^9, 3.526997777966764*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"x", "\[Rule]", 
     RowBox[{
      RowBox[{"-", "2"}], " ", "\[ImaginaryI]"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"x", "\[Rule]", 
     RowBox[{"2", " ", "\[ImaginaryI]"}]}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{3.5269977782467527`*^9}]
}, Open  ]]
}, Open  ]]
}, Open  ]]
},
WindowSize->{784, 1122},
WindowMargins->{{Automatic, 0}, {0, Automatic}},
FrontEndVersion->"8.0 for Microsoft Windows (32-bit) (February 23, 2011)",
StyleDefinitions->"Default.nb"
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{}
*)
(*CellTagsIndex
CellTagsIndex->{}
*)
(*NotebookFileOutline
Notebook[{
Cell[CellGroupData[{
Cell[579, 22, 100, 1, 83, "Title"],
Cell[CellGroupData[{
Cell[704, 27, 105, 1, 71, "Section"],
Cell[CellGroupData[{
Cell[834, 32, 93, 1, 34, "Subsection"],
Cell[CellGroupData[{
Cell[952, 37, 70, 1, 24, "Subsubsection"],
Cell[1025, 40, 632, 21, 71, "Text"],
Cell[CellGroupData[{
Cell[1682, 65, 574, 16, 47, "Input"],
Cell[2259, 83, 703, 19, 33, "Output"]
}, Closed]],
Cell[CellGroupData[{
Cell[2999, 107, 118, 2, 21, "Input"],
Cell[3120, 111, 116, 2, 27, "Output"]
}, Closed]],
Cell[CellGroupData[{
Cell[3273, 118, 117, 2, 21, "Input"],
Cell[3393, 122, 142, 2, 27, "Output"]
}, Closed]],
Cell[CellGroupData[{
Cell[3572, 129, 124, 2, 21, "Input"],
Cell[3699, 133, 156, 3, 27, "Output"]
}, Closed]],
Cell[CellGroupData[{
Cell[3892, 141, 117, 2, 21, "Input"],
Cell[4012, 145, 156, 3, 27, "Output"]
}, Closed]],
Cell[CellGroupData[{
Cell[4205, 153, 9206, 160, 71, "WolframAlphaShortInput"],
Cell[13414, 315, 187, 3, 27, "Output"]
}, Closed]]
}, Closed]]
}, Closed]],
Cell[CellGroupData[{
Cell[13662, 325, 91, 1, 26, "Subsection"],
Cell[CellGroupData[{
Cell[13778, 330, 95, 1, 24, "Subsubsection"],
Cell[CellGroupData[{
Cell[13898, 335, 562, 16, 33, "Input"],
Cell[14463, 353, 396, 11, 47, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[14896, 369, 148, 3, 27, "Input"],
Cell[15047, 374, 396, 12, 34, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[15480, 391, 128, 2, 27, "Input"],
Cell[15611, 395, 445, 13, 47, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[16093, 413, 192, 5, 27, "Input"],
Cell[16288, 420, 764, 23, 47, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[17089, 448, 305, 7, 27, "Input"],
Cell[17397, 457, 145, 3, 27, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[17579, 465, 418, 11, 27, "Input"],
Cell[18000, 478, 667, 21, 47, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[18704, 504, 436, 11, 37, "WolframAlphaLong"],
Cell[19143, 517, 10183, 221, 294, "Print"]
}, Closed]]
}, Closed]],
Cell[CellGroupData[{
Cell[29375, 744, 93, 1, 18, "Subsubsection"],
Cell[CellGroupData[{
Cell[29493, 749, 399, 11, 27, "Input"],
Cell[29895, 762, 256, 7, 27, "Output"]
}, Closed]],
Cell[CellGroupData[{
Cell[30188, 774, 729, 22, 27, "Input"],
Cell[30920, 798, 804, 27, 57, "Output"]
}, Closed]],
Cell[CellGroupData[{
Cell[31761, 830, 565, 19, 21, "Input"],
Cell[32329, 851, 152, 3, 27, "Output"]
}, Closed]]
}, Closed]]
}, Closed]]
}, Closed]],
Cell[CellGroupData[{
Cell[32554, 862, 163, 2, 41, "Section"],
Cell[CellGroupData[{
Cell[32742, 868, 65, 1, 34, "Subsection"],
Cell[CellGroupData[{
Cell[32832, 873, 388, 11, 27, "Input"],
Cell[33223, 886, 342, 12, 33, "Output"]
}, Open  ]]
}, Closed]],
Cell[CellGroupData[{
Cell[33614, 904, 67, 1, 26, "Subsection"],
Cell[CellGroupData[{
Cell[33706, 909, 718, 20, 27, "Input"],
Cell[34427, 931, 565, 17, 33, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[35029, 953, 184, 4, 27, "Input"],
Cell[35216, 959, 160, 4, 30, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[35413, 968, 293, 8, 27, "Input"],
Cell[35709, 978, 210, 6, 50, "Output"]
}, Open  ]]
}, Closed]],
Cell[CellGroupData[{
Cell[35968, 990, 89, 1, 26, "Subsection"],
Cell[CellGroupData[{
Cell[36082, 995, 459, 14, 46, "Input"],
Cell[36544, 1011, 335, 12, 47, "Output"]
}, Closed]],
Cell[CellGroupData[{
Cell[36916, 1028, 570, 16, 21, "Input"],
Cell[37489, 1046, 571, 18, 33, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[38097, 1069, 124, 1, 37, "WolframAlphaLong"],
Cell[38224, 1072, 465330, 8427, 1585, "Print"]
}, Closed]],
Cell[CellGroupData[{
Cell[503591, 9504, 589, 18, 21, "Input"],
Cell[504183, 9524, 447, 14, 33, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[504667, 9543, 590, 18, 27, "Input"],
Cell[505260, 9563, 419, 14, 33, "Output"]
}, Open  ]]
}, Open  ]]
}, Closed]],
Cell[CellGroupData[{
Cell[505740, 9584, 159, 2, 41, "Section"],
Cell[CellGroupData[{
Cell[505924, 9590, 684, 21, 52, "Input"],
Cell[506611, 9613, 697, 24, 57, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[507345, 9642, 227, 6, 47, "Input"],
Cell[507575, 9650, 175, 5, 32, "Output"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[507799, 9661, 106, 1, 71, "Section"],
Cell[CellGroupData[{
Cell[507930, 9666, 208, 5, 31, "Input"],
Cell[508141, 9673, 72, 1, 30, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[508250, 9679, 200, 5, 31, "Input"],
Cell[508453, 9686, 92, 2, 46, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[508582, 9693, 227, 6, 31, "Input"],
Cell[508812, 9701, 220, 6, 50, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[509069, 9712, 221, 6, 33, "Input"],
Cell[509293, 9720, 90, 2, 47, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[509420, 9727, 327, 10, 31, "Input"],
Cell[509750, 9739, 243, 8, 30, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[510030, 9752, 379, 12, 31, "Input"],
Cell[510412, 9766, 978, 32, 47, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[511427, 9803, 449, 13, 33, "Input"],
Cell[511879, 9818, 6532, 191, 473, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[518448, 10014, 344, 11, 42, "Input"],
Cell[518795, 10027, 713, 20, 62, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[519545, 10052, 927, 26, 31, "Input"],
Cell[520475, 10080, 477, 14, 47, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[520989, 10099, 286, 7, 31, "Input"],
Cell[521278, 10108, 10062, 169, 238, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[531377, 10282, 264, 8, 31, "Input"],
Cell[531644, 10292, 295, 9, 30, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[531976, 10306, 250, 7, 31, "Input"],
Cell[532229, 10315, 197, 6, 30, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[532463, 10326, 274, 8, 31, "Input"],
Cell[532740, 10336, 230, 7, 30, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[533007, 10348, 194, 5, 31, "Input"],
Cell[533204, 10355, 216, 7, 30, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[533457, 10367, 355, 10, 31, "Input"],
Cell[533815, 10379, 480, 15, 33, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[534332, 10399, 537, 18, 42, "Input"],
Cell[534872, 10419, 843, 24, 63, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[535752, 10448, 828, 24, 31, "Input"],
Cell[536583, 10474, 436, 14, 47, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[537056, 10493, 283, 7, 31, "Input"],
Cell[537342, 10502, 2077, 38, 238, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[539456, 10545, 644, 20, 42, "Input"],
Cell[540103, 10567, 818, 23, 62, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[540958, 10595, 124, 2, 31, "Input"],
Cell[541085, 10599, 86, 1, 30, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[541208, 10605, 192, 5, 31, "Input"],
Cell[541403, 10612, 280, 9, 30, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[541720, 10626, 179, 4, 31, "Input"],
Cell[541902, 10632, 107, 2, 30, "Output"]
}, Open  ]],
Cell[542024, 10637, 93, 1, 31, "Input"],
Cell[CellGroupData[{
Cell[542142, 10642, 525, 16, 47, "Input"],
Cell[542670, 10660, 597, 17, 46, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[543304, 10682, 450, 14, 47, "Input"],
Cell[543757, 10698, 350, 11, 47, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[544144, 10714, 217, 6, 33, "Input"],
Cell[544364, 10722, 196, 5, 30, "Output"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[544609, 10733, 106, 1, 71, "Section"],
Cell[CellGroupData[{
Cell[544740, 10738, 957, 27, 52, "Input"],
Cell[545700, 10767, 456, 14, 34, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[546193, 10786, 494, 15, 31, "Input"],
Cell[546690, 10803, 584, 20, 34, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[547311, 10828, 106, 2, 35, "Input"],
Cell[547420, 10832, 71, 1, 30, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[547528, 10838, 261, 8, 33, "Input"],
Cell[547792, 10848, 299, 10, 47, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[548128, 10863, 141, 3, 31, "Input"],
Cell[548272, 10868, 94, 2, 47, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[548403, 10875, 186, 5, 31, "Input"],
Cell[548592, 10882, 121, 2, 47, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[548750, 10889, 142, 3, 31, "Input"],
Cell[548895, 10894, 94, 2, 47, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[549026, 10901, 225, 6, 31, "Input"],
Cell[549254, 10909, 259, 9, 30, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[549550, 10923, 228, 6, 31, "Input"],
Cell[549781, 10931, 290, 10, 47, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[550108, 10946, 186, 5, 31, "Input"],
Cell[550297, 10953, 74, 1, 30, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[550408, 10959, 108, 2, 35, "Input"],
Cell[550519, 10963, 73, 1, 30, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[550629, 10969, 120, 2, 31, "Input"],
Cell[550752, 10973, 90, 2, 47, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[550879, 10980, 158, 4, 31, "Input"],
Cell[551040, 10986, 90, 2, 47, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[551167, 10993, 160, 4, 31, "Input"],
Cell[551330, 10999, 111, 3, 47, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[551478, 11007, 252, 7, 31, "Input"],
Cell[551733, 11016, 95, 2, 30, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[551865, 11023, 247, 7, 31, "Input"],
Cell[552115, 11032, 130, 3, 35, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[552282, 11040, 197, 5, 31, "Input"],
Cell[552482, 11047, 117, 3, 30, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[552636, 11055, 806, 24, 52, "Input"],
Cell[553445, 11081, 627, 20, 48, "Output"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[554121, 11107, 178, 4, 97, "Section"],
Cell[554302, 11113, 186, 3, 31, "Input"],
Cell[554491, 11118, 369, 11, 31, "Input"],
Cell[CellGroupData[{
Cell[554885, 11133, 690, 21, 72, "Input"],
Cell[555578, 11156, 557, 18, 33, "Output"],
Cell[556138, 11176, 786, 23, 30, "Output"],
Cell[556927, 11201, 465, 13, 30, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[557429, 11219, 234, 7, 31, "Input"],
Cell[557666, 11228, 325, 10, 30, "Output"]
}, Open  ]]
}, Open  ]]
}, Open  ]]
}
]
*)

(* End of internal cache information *)
