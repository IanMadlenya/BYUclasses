(* Content-type: application/mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='Mathematica 6.0' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       145,          7]
NotebookDataLength[    303466,       7246]
NotebookOptionsPosition[    289455,       6803]
NotebookOutlinePosition[    289929,       6822]
CellTagsIndexPosition[    289886,       6819]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{

Cell[CellGroupData[{
Cell["\<\
Physics 230 -- Lab 7 (Programming I)\
\>", "Title",
 CellChangeTimes->{{3.399308987464324*^9, 3.399308997477577*^9}, {
   3.3996509147507887`*^9, 3.3996509168582067`*^9}, 3.4274817158062444`*^9, {
   3.427505828304313*^9, 3.427505832757467*^9}, {3.4275745555520296`*^9, 
   3.42757455564578*^9}, {3.427574731865658*^9, 3.4275747372563176`*^9}, {
   3.4294834587838097`*^9, 3.4294834590806885`*^9}, 3.430327560654002*^9, {
   3.430601265670842*^9, 3.430601266858365*^9}, 3.4311905217116194`*^9, 
   3.4318058743262105`*^9, 3.4322908055044465`*^9, 3.432910136263564*^9, {
   3.433205089320956*^9, 3.4332051069307823`*^9}, {3.433259990263834*^9, 
   3.4332599997484517`*^9}, {3.4336892224375553`*^9, 3.433689223515708*^9}, {
   3.4342150326553063`*^9, 3.4342150328584366`*^9}, {3.434215084125374*^9, 
   3.434215090203655*^9}, {3.4342354699053955`*^9, 3.4342354813430414`*^9}, {
   3.523959976954297*^9, 3.5239599778672967`*^9}}],

Cell["\<\
Branton J. Campbell, BYU Physics & Astronomy, Winter 2010
Steve Turley, BYU Physics & Astronomy, Fall 2011\
\>", "Subtitle",
 CellChangeTimes->{{3.433259527908248*^9, 3.433259551315097*^9}, {
  3.446333728214923*^9, 3.446333729949298*^9}, {3.471790451043971*^9, 
  3.4717904516064744`*^9}, {3.4967721872443156`*^9, 3.496772188859477*^9}, {
  3.523706568608156*^9, 3.523706575759156*^9}}],

Cell[TextData[{
 "When carrying out a complicated task, we often need to evaluate multiple \
expressions in order to obtain a final result or sequence of results.  In \
previous labs, we have occasionally evaluated compound expressions on a \
single line, separated by semicolons, or performed multiple processing steps \
by nesting functions within functions or by composing them via postfix \
notation.  More often than not, we have simply evaluated more than one \
expression, each one on a separate line or in a separate cell, and assigned \
global names to each of the intermediate results.  However, some tasks are so \
complicated that this approach becomes impractical.  Any good computer \
\"programming\" language will include rules and operations that allow us to \
combine multiple single-step evaluations into a larger multi-step \"program\" \
that can perform an arbitrarily complex task with minimal user interaction.  \
In this lab, you will be introduced to several basic programming concepts.  \
Though the details will be specific to ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 ", the concepts are quite general and have different implementations in \
other programming languages."
}], "Text",
 CellChangeTimes->{{3.4303328171611757`*^9, 3.4303328617557817`*^9}, {
   3.430337158416401*^9, 3.430337162963363*^9}, {3.4303440447361155`*^9, 
   3.4303440608145494`*^9}, {3.430352154594947*^9, 3.430352177017253*^9}, 
   3.430497670206213*^9, {3.4306011277463193`*^9, 3.4306011281682024`*^9}, 
   3.430601271436578*^9, {3.4306013425004425`*^9, 3.430601366329025*^9}, {
   3.4307097552544365`*^9, 3.430709783676858*^9}, {3.4307694207016554`*^9, 
   3.43076964619036*^9}, {3.430769681566039*^9, 3.4307700168381014`*^9}, {
   3.4311197804732823`*^9, 3.431119796661093*^9}, {3.431190525414815*^9, 
   3.4311905257429466`*^9}, 3.4311905979787083`*^9, {3.4311907394970503`*^9, 
   3.431190742981492*^9}, {3.431492886761525*^9, 3.431492887223022*^9}, {
   3.431494062343462*^9, 3.431494337141776*^9}, {3.4317255415822144`*^9, 
   3.4317255520667906`*^9}, {3.4318058441225057`*^9, 3.431805844450637*^9}, {
   3.4318073279009933`*^9, 3.4318073289478884`*^9}, {3.4318785406526766`*^9, 
   3.431878608466479*^9}, {3.4322908285673895`*^9, 3.4322909571167326`*^9}, {
   3.4322922730482473`*^9, 3.432293150330716*^9}, {3.4329099693228593`*^9, 
   3.432909970526007*^9}, {3.4329102356092215`*^9, 3.4329102393905444`*^9}, {
   3.432910984811106*^9, 3.432911019280518*^9}, {3.4329110574843764`*^9, 
   3.4329111183292947`*^9}, {3.432911200955881*^9, 3.4329112138936296`*^9}, {
   3.4329118104050827`*^9, 3.43291181107697*^9}, {3.4329135996738105`*^9, 
   3.4329136611593657`*^9}, {3.4329142475925007`*^9, 3.432914473831219*^9}, 
   3.432916189082901*^9, 3.43291645930684*^9, {3.4329167501092978`*^9, 
   3.4329167720315933`*^9}, {3.4330158750885677`*^9, 3.433015875463575*^9}, {
   3.433072742352726*^9, 3.433073376817874*^9}, {3.4332050929772997`*^9, 
   3.4332050933054333`*^9}, {3.4332602218635125`*^9, 3.433260229207451*^9}, {
   3.433525730550697*^9, 3.433525816393897*^9}, {3.4335259150495157`*^9, 
   3.43352593479939*^9}, {3.433525970408537*^9, 3.4335262261569*^9}, {
   3.4335263061251383`*^9, 3.433526322687532*^9}, {3.4335265292955847`*^9, 
   3.4335265657484765`*^9}, {3.433526646247961*^9, 3.433526694263279*^9}, {
   3.4335267242787123`*^9, 3.4335267541222706`*^9}, {3.4335267939032664`*^9, 
   3.4335268524341416`*^9}, {3.4335275777419996`*^9, 3.433527748990904*^9}, {
   3.4335278487246404`*^9, 3.4335278598808193`*^9}, {3.433528262971989*^9, 
   3.4335282724563036`*^9}, {3.4336981782449427`*^9, 
   3.4336983987037115`*^9}, {3.4336984290482388`*^9, 
   3.4336988991071463`*^9}, {3.4336989538741736`*^9, 3.4336993600564466`*^9}, 
   3.433727829997929*^9, {3.4338777570969467`*^9, 3.4338777570977383`*^9}, {
   3.434215080297151*^9, 3.434215080625284*^9}, {3.4343166873783293`*^9, 
   3.434317597073492*^9}, {3.434317631715004*^9, 3.4343179085189652`*^9}, {
   3.4343179555357933`*^9, 3.4343181014926553`*^9}}],

Cell[TextData[{
 "In this lab, we\[CloseCurlyQuote]ll learn about some powerful ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " functions which let you develop final results that require multiple steps. \
 These include logic to determine what steps to take, functions with \
different expressions in different regions, execution which depends on \
logical conditions, loops, and functions that are called recursively.  In the \
next lab, we\[CloseCurlyQuote]ll learn how to peice these together into yet \
more complex programs."
}], "Text",
 CellChangeTimes->{{3.523754961725*^9, 3.5237551087082*^9}}],

Cell[CellGroupData[{

Cell["Logic (20 min)", "Section",
 CellChangeTimes->{{3.434230412442472*^9, 3.4342304137393804`*^9}, {
  3.434305319602947*^9, 3.4343053363064995`*^9}, {3.4344314435350456`*^9, 
  3.4344314436912055`*^9}, {3.5237226880964966`*^9, 3.523722688209508*^9}}],

Cell[TextData[{
 "The \"binary\" number system has base 2 rather than base 10.  The binary \
integers within this system consist of the set containing 0 and 1.  A \
\"logical\" variable can have one of two discrete values, ",
 StyleBox["True",
  FontWeight->"Bold"],
 " or ",
 StyleBox["False",
  FontWeight->"Bold"],
 ".  Because there is an obvious connection between such a two-value system \
and the binary integers, we often associate 0 \[Rule] ",
 StyleBox["False",
  FontWeight->"Bold"],
 " and 1 \[Rule] ",
 StyleBox["True",
  FontWeight->"Bold"],
 ".  A \"binary\" function takes two inputs and returns one output.  In this \
context, the word \"binary\" refers to the number of inputs rather than the \
type of inputs.  A \"binary logic function\" takes two logical (i.e. ",
 StyleBox["True",
  FontWeight->"Bold"],
 " or ",
 StyleBox["False",
  FontWeight->"Bold"],
 ") inputs and returns one logical output.  You have encountered these before \
in the context of digital electronics, where 0 Volts \[Rule] ",
 StyleBox["False",
  FontWeight->"Bold"],
 " and 5 Volts \[Rule] ",
 StyleBox["True",
  FontWeight->"Bold"],
 ". "
}], "Text",
 CellChangeTimes->{{3.43430165614979*^9, 3.4343019697984447`*^9}, {
  3.4343020013305016`*^9, 3.4343023599490566`*^9}, {3.434302391715495*^9, 
  3.4343024154661036`*^9}, {3.434302482749076*^9, 3.4343025450944214`*^9}, {
  3.434302868571452*^9, 3.4343033200517597`*^9}, {3.434303374646908*^9, 
  3.434303520806899*^9}, {3.434303796813965*^9, 3.434303798235876*^9}, {
  3.4343165080456142`*^9, 3.4343165137020087`*^9}}],

Cell[CellGroupData[{

Cell["(#1) Binary logic functions (15 min)", "Subsection",
 CellChangeTimes->{{3.4342979470462227`*^9, 3.4342979532495065`*^9}, {
  3.434301696338319*^9, 3.4343017199639235`*^9}, {3.434305194287239*^9, 
  3.434305195568522*^9}, {3.4343052941022944`*^9, 3.434305324493697*^9}}],

Cell[TextData[{
 "(a) Use ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 "'s ",
 StyleBox[ButtonBox["BaseForm",
  BaseStyle->"Link",
  ButtonData->"paclet://ref/BaseForm"],
  FontWeight->"Bold"],
 " function to convert the decimal integers 0 through 16 in binary form.  \
Explain to your TA how ",
 Cell[BoxData[
  FormBox[
   SubscriptBox["1001", "2"], TraditionalForm]]],
 " = ",
 Cell[BoxData[
  FormBox[
   SubscriptBox["9", "10"], TraditionalForm]]],
 "."
}], "Text",
 CellChangeTimes->{{3.43430165614979*^9, 3.4343019697984447`*^9}, {
   3.4343020013305016`*^9, 3.4343023599490566`*^9}, {3.434302391715495*^9, 
   3.4343024154661036`*^9}, {3.434302482749076*^9, 3.4343025450944214`*^9}, {
   3.434302868571452*^9, 3.4343033200517597`*^9}, {3.434303374646908*^9, 
   3.4343035221506834`*^9}, 3.434303597996375*^9, {3.434303846502737*^9, 
   3.434303847471512*^9}, {3.4343038986134453`*^9, 3.4343039001759853`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{"Manipulate", "[", 
  RowBox[{
   RowBox[{"BaseForm", "[", 
    RowBox[{"i", ",", "2"}], "]"}], ",", 
   RowBox[{"{", 
    RowBox[{"i", ",", "0", ",", "16", ",", "1"}], "}"}]}], 
  "]"}], "\[IndentingNewLine]", 
 RowBox[{"BaseForm", "[", 
  RowBox[{"67", ",", "2"}], "]"}], "\[IndentingNewLine]", 
 RowBox[{"BaseForm", "[", 
  RowBox[{"15", ",", "2"}], "]"}]}], "Input",
 CellChangeTimes->{{3.4343023615740986`*^9, 3.4343023832465286`*^9}, {
   3.4343024219662695`*^9, 3.434302424700714*^9}, 3.434432773214059*^9, {
   3.4904378603268003`*^9, 3.4904378895612*^9}, 3.4976903515608*^9, {
   3.5271001375617523`*^9, 3.527100158131425*^9}, {3.527330488380828*^9, 
   3.527330510579718*^9}, {3.5273307973690677`*^9, 3.527330829927765*^9}, {
   3.527331156024721*^9, 3.5273311685742188`*^9}, {3.5273324747119713`*^9, 
   3.52733249050134*^9}, {3.527332534559577*^9, 3.5273325356195345`*^9}}],

Cell[BoxData[
 TagBox[
  StyleBox[
   DynamicModuleBox[{$CellContext`i$$ = 0, Typeset`show$$ = True, 
    Typeset`bookmarkList$$ = {}, Typeset`bookmarkMode$$ = "Menu", 
    Typeset`animator$$, Typeset`animvar$$ = 1, Typeset`name$$ = 
    "\"untitled\"", Typeset`specs$$ = {{
      Hold[$CellContext`i$$], 0, 16, 1}}, Typeset`size$$ = {13., {3., 8.}}, 
    Typeset`update$$ = 0, Typeset`initDone$$, Typeset`skipInitDone$$ = 
    True, $CellContext`i$2063$$ = 0}, 
    DynamicBox[Manipulate`ManipulateBoxes[
     1, StandardForm, "Variables" :> {$CellContext`i$$ = 0}, 
      "ControllerVariables" :> {
        Hold[$CellContext`i$$, $CellContext`i$2063$$, 0]}, 
      "OtherVariables" :> {
       Typeset`show$$, Typeset`bookmarkList$$, Typeset`bookmarkMode$$, 
        Typeset`animator$$, Typeset`animvar$$, Typeset`name$$, 
        Typeset`specs$$, Typeset`size$$, Typeset`update$$, Typeset`initDone$$,
         Typeset`skipInitDone$$}, "Body" :> BaseForm[$CellContext`i$$, 2], 
      "Specifications" :> {{$CellContext`i$$, 0, 16, 1}}, "Options" :> {}, 
      "DefaultOptions" :> {}],
     ImageSizeCache->{243., {46., 52.}},
     SingleEvaluation->True],
    Deinitialization:>None,
    DynamicModuleValues:>{},
    SynchronousInitialization->True,
    UnsavedVariables:>{Typeset`initDone$$},
    UntrackedVariables:>{Typeset`size$$}], "Manipulate",
   Deployed->True,
   StripOnInput->False],
  Manipulate`InterpretManipulate[1]]], "Output",
 CellChangeTimes->{
  3.5271001585203037`*^9, {3.52733050513999*^9, 3.527330510919701*^9}, {
   3.527330804838769*^9, 3.5273308304177456`*^9}, {3.52733116203448*^9, 
   3.5273311690741987`*^9}, {3.527332479711771*^9, 3.527332490961321*^9}, 
   3.52733253598952*^9}],

Cell[BoxData[
 TagBox[
  InterpretationBox[
   SubscriptBox["\<\"1000011\"\>", "\<\"2\"\>"],
   67,
   Editable->False],
  BaseForm[#, 2]& ]], "Output",
 CellChangeTimes->{
  3.5271001585203037`*^9, {3.52733050513999*^9, 3.527330510919701*^9}, {
   3.527330804838769*^9, 3.5273308304177456`*^9}, {3.52733116203448*^9, 
   3.5273311690741987`*^9}, {3.527332479711771*^9, 3.527332490961321*^9}, 
   3.527332536019519*^9}],

Cell[BoxData[
 TagBox[
  InterpretationBox[
   SubscriptBox["\<\"1111\"\>", "\<\"2\"\>"],
   15,
   Editable->False],
  BaseForm[#, 2]& ]], "Output",
 CellChangeTimes->{
  3.5271001585203037`*^9, {3.52733050513999*^9, 3.527330510919701*^9}, {
   3.527330804838769*^9, 3.5273308304177456`*^9}, {3.52733116203448*^9, 
   3.5273311690741987`*^9}, {3.527332479711771*^9, 3.527332490961321*^9}, 
   3.527332536019519*^9}]
}, Open  ]],

Cell["\<\
(b) You can convert from binary from back to an integer using FromDigits.\
\>", "Text",
 CellChangeTimes->{{3.523707517926156*^9, 3.5237075312861567`*^9}, {
  3.5237153105531564`*^9, 3.5237153122491565`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"FromDigits", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"1", ",", "0", ",", "1", ",", "1", ",", "1"}], "}"}], ",", "2"}], 
  "]"}]], "Input",
 CellChangeTimes->{{3.5237075323641567`*^9, 3.5237075528231564`*^9}}],

Cell[BoxData[
 FormBox["23", TraditionalForm]], "Output",
 CellChangeTimes->{3.5271001664181643`*^9}]
}, Open  ]],

Cell["It also works with strings.", "Text",
 CellChangeTimes->{{3.5237075594921565`*^9, 3.5237075642601566`*^9}, 
   3.5237076474551563`*^9}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"FromDigits", "[", 
  RowBox[{"\"\<10111\>\"", ",", "2"}], "]"}]], "Input",
 CellChangeTimes->{{3.5237075670661564`*^9, 3.5237075760061564`*^9}}],

Cell[BoxData[
 FormBox["23", TraditionalForm]], "Output",
 CellChangeTimes->{3.527100205047265*^9}]
}, Open  ]],

Cell[TextData[{
 "Sometimes you will receive encoded information from an instrument,where a \
set bit or sequence of bits indicates a condition and a slice of information. \
  Suppose your instrument documentation said the instrument returned a status \
byte (integer) that had bits with the following meaning:\n\nbit 0: set (i.e. \
1) if data is ready\nbits 1-4: channel with information\nbit 5: set if there \
was an overflow condition\nbit 6: set if device is within temperature limits\n\
bit 7: set if device is within pressure limits\n\nYou can use the ",
 StyleBox[ButtonBox["BitAnd",
  BaseStyle->"Link",
  ButtonData->"paclet://ref/BitAnd"],
  FontWeight->"Bold"],
 ", ",
 StyleBox[ButtonBox["BitShiftRight",
  BaseStyle->"Link",
  ButtonData->"paclet://BitShiftRight"],
  FontWeight->"Bold"],
 ", and other ",
 StyleBox[ButtonBox["Bitwise Operations",
  BaseStyle->"Link",
  ButtonData->"paclet://guide/BitwiseOperations"],
  FontWeight->"Bold"],
 " to test the status of the various bits.\n\nHere are some expressions you \
could use to test a status you received of status code fo 103.  Execute the \
cell and explain how they work to your TA."
}], "Text",
 CellChangeTimes->{{3.523707684669156*^9, 3.5237078055261564`*^9}, {
   3.5237078587711563`*^9, 3.5237078900651565`*^9}, {3.5237079356791563`*^9, 
   3.523708025049156*^9}, {3.5237080589201565`*^9, 3.5237080655431566`*^9}, {
   3.523714813464156*^9, 3.5237148416521564`*^9}, {3.5237149340471563`*^9, 
   3.5237150199071565`*^9}, {3.5237150596581564`*^9, 3.523715196608156*^9}, {
   3.5237152361441565`*^9, 3.5237152496631565`*^9}, 3.5264900505002575`*^9}],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"status", " ", "=", " ", "103"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{"BaseForm", "[", 
  RowBox[{"status", ",", "2"}], "]"}], "\[IndentingNewLine]", 
 RowBox[{"dataIsRead", " ", "=", " ", 
  RowBox[{
   RowBox[{"BitAnd", "[", 
    RowBox[{"status", ",", " ", 
     RowBox[{"2", "^", "0"}]}], "]"}], ">", "0"}]}], "\[IndentingNewLine]", 
 RowBox[{"channel", " ", "=", " ", 
  RowBox[{"BitShiftRight", "[", 
   RowBox[{
    RowBox[{"BitAnd", "[", 
     RowBox[{"status", ",", " ", 
      RowBox[{"FromDigits", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"1", ",", "1", ",", "1", ",", "0"}], "}"}], ",", "2"}], 
       "]"}]}], "]"}], ",", "1"}], "]"}]}], "\[IndentingNewLine]", 
 RowBox[{"overflow", " ", "=", " ", 
  RowBox[{
   RowBox[{"BitAnd", "[", 
    RowBox[{"status", ",", " ", 
     RowBox[{"2", "^", "5"}]}], "]"}], ">", "0"}]}], "\[IndentingNewLine]", 
 RowBox[{"withinTemperatureLimits", " ", "=", " ", 
  RowBox[{
   RowBox[{"BitAnd", "[", 
    RowBox[{"status", ",", " ", 
     RowBox[{"2", "^", "6"}]}], "]"}], ">", "0"}]}], "\[IndentingNewLine]", 
 RowBox[{"withinPressureLimits", " ", "=", " ", 
  RowBox[{
   RowBox[{"BitAnd", "[", 
    RowBox[{"status", ",", " ", 
     RowBox[{"2", "^", "7"}]}], "]"}], ">", "0"}]}]}], "Input",
 CellChangeTimes->{{3.5237080274231567`*^9, 3.523708054603156*^9}, {
  3.5237080967121563`*^9, 3.523708114615156*^9}, {3.5237083527451563`*^9, 
  3.5237083949351563`*^9}, {3.523708430582156*^9, 3.5237085080011563`*^9}, {
  3.5237138399731565`*^9, 3.5237138980241566`*^9}, {3.5237139376161566`*^9, 
  3.523713940556156*^9}, {3.5237146144721565`*^9, 3.5237147289731565`*^9}, {
  3.527332857176672*^9, 3.527332869046197*^9}}],

Cell[BoxData[
 TagBox[
  InterpretationBox[
   SubscriptBox["\<\"1100111\"\>", "\<\"2\"\>"],
   103,
   Editable->False],
  BaseForm[#, 2]& ]], "Output",
 CellChangeTimes->{
  3.527332248731011*^9, {3.527332857796647*^9, 3.5273328694561806`*^9}}],

Cell[BoxData["True"], "Output",
 CellChangeTimes->{
  3.527332248731011*^9, {3.527332857796647*^9, 3.5273328694661803`*^9}}],

Cell[BoxData["3"], "Output",
 CellChangeTimes->{
  3.527332248731011*^9, {3.527332857796647*^9, 3.5273328694661803`*^9}}],

Cell[BoxData["True"], "Output",
 CellChangeTimes->{
  3.527332248731011*^9, {3.527332857796647*^9, 3.5273328694661803`*^9}}],

Cell[BoxData["True"], "Output",
 CellChangeTimes->{
  3.527332248731011*^9, {3.527332857796647*^9, 3.5273328694661803`*^9}}],

Cell[BoxData["False"], "Output",
 CellChangeTimes->{
  3.527332248731011*^9, {3.527332857796647*^9, 3.5273328694661803`*^9}}]
}, Open  ]],

Cell[TextData[{
 "(c) Binary logic functions such as ",
 StyleBox["And",
  FontWeight->"Bold"],
 ", ",
 StyleBox["Or",
  FontWeight->"Bold"],
 ", ",
 StyleBox["Nand",
  FontWeight->"Bold"],
 ", ",
 StyleBox["Nor",
  FontWeight->"Bold"],
 " and ",
 StyleBox["Xor",
  FontWeight->"Bold"],
 " are summarized on the DC guide page on ",
 StyleBox[ButtonBox["Logic and Boolean Algebra",
  BaseStyle->"Link",
  ButtonData->"paclet://guide/LogicAndBooleanAlgebra"],
  FontWeight->"Bold"],
 ".  Take a few minutes to become familiar with the shorthand notation for \
each of these operations.  The only single-input logic function that you need \
to be familiar with is ",
 StyleBox["Not",
  FontWeight->"Bold"],
 ".  You can practice them in the cell below."
}], "Text",
 CellChangeTimes->{{3.4343038042204046`*^9, 3.4343038406432114`*^9}, {
  3.4343038948477244`*^9, 3.4343038961602583`*^9}, {3.4344327913550324`*^9, 
  3.4344328048396664`*^9}, {3.5237076776301565`*^9, 3.5237076805271564`*^9}, {
  3.5237153237221565`*^9, 3.5237153245541563`*^9}}],

Cell[TextData[{
 "(d) See the tutorial on ",
 StyleBox[ButtonBox["Relational and Logical Operators",
  BaseStyle->"Link",
  ButtonData->"paclet://tutorial/RelationalAndLogicalOperators"],
  FontWeight->"Bold"],
 " to review the relational operators available in ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 ".  Write a function that will return true if a value is postive and prime \
or negative and even.  Test it by mapping it to the list tList below.  You \
might find ",
 StyleBox[ButtonBox["PrimeQ",
  BaseStyle->"Link",
  ButtonData->"paclet://ref/PrimeQ"],
  FontWeight->"Bold"],
 ", ",
 StyleBox[ButtonBox["EvenQ",
  BaseStyle->"Link",
  ButtonData->"paclet://ref/EvenQ"],
  FontWeight->"Bold"],
 ", and ",
 StyleBox[ButtonBox["Map",
  BaseStyle->"Link",
  ButtonData->"paclet://ref/Map"],
  FontWeight->"Bold"],
 " helpful."
}], "Text",
 CellChangeTimes->{{3.523722293163007*^9, 3.523722368690559*^9}, {
  3.523722447014391*^9, 3.5237224649021792`*^9}, {3.5237225183275213`*^9, 
  3.523722563709059*^9}, {3.523722597613449*^9, 3.5237225983975277`*^9}, {
  3.523722653779065*^9, 3.523722655711258*^9}}],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{"tList", "=", 
  RowBox[{"{", 
   RowBox[{
    RowBox[{"-", "6"}], ",", "0", ",", "5", ",", "9", ",", "14"}], 
   "}"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"theTest", "[", "number_", "]"}], ":=", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"a", " ", "=", " ", 
      RowBox[{"PrimeQ", "[", "number", "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"b", " ", "=", " ", 
      RowBox[{"number", ">", "0"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"c", " ", "=", " ", 
      RowBox[{"EvenQ", "[", "number", "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"d", " ", "=", " ", 
      RowBox[{"number", " ", "<", "0"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"a", "&&", "b"}], "||", 
      RowBox[{"c", "&&", "d"}]}]}]}], "]"}]}], "\[IndentingNewLine]", 
 RowBox[{"theTest", "/@", "tList"}]}], "Input",
 CellChangeTimes->{{3.523722369760666*^9, 3.5237224400716963`*^9}, {
   3.523722578542542*^9, 3.5237225817418623`*^9}, {3.5273330801877513`*^9, 
   3.527333086487499*^9}, {3.5273331428052464`*^9, 3.5273332789198017`*^9}, 
   3.5273333237780075`*^9, {3.5273339996209726`*^9, 3.5273340467590866`*^9}, {
   3.5273343581966286`*^9, 3.527334470642131*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"-", "6"}], ",", "0", ",", "5", ",", "9", ",", "14"}], 
  "}"}]], "Output",
 CellChangeTimes->{
  3.5273330870274773`*^9, {3.527333159334585*^9, 3.527333202032877*^9}, 
   3.527333241011318*^9, 3.5273340120204763`*^9, 3.5273344711621103`*^9}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"True", ",", "False", ",", "True", ",", "False", ",", "False"}], 
  "}"}]], "Output",
 CellChangeTimes->{
  3.5273330870274773`*^9, {3.527333159334585*^9, 3.527333202032877*^9}, 
   3.527333241011318*^9, 3.5273340120204763`*^9, 3.5273344711721096`*^9}]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["(#2) Inequalities (5 min)", "Subsection",
 CellChangeTimes->{{3.434297961827851*^9, 3.4342979646872993`*^9}, {
  3.434305303571287*^9, 3.4343053289938126`*^9}}],

Cell[TextData[{
 "See the tutorial on ",
 StyleBox[ButtonBox["Relational and Logical Operators",
  BaseStyle->"Link",
  ButtonData->"paclet://tutorial/RelationalAndLogicalOperators"],
  FontWeight->"Bold"],
 " to review the relational operators available in ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 ".  Evaluate the cell below to ",
 StyleBox["Simplify",
  FontWeight->"Bold"],
 " several combined inequalities.  Explain the output to your TA."
}], "Text",
 CellChangeTimes->{{3.4342304222552233`*^9, 3.434230460287447*^9}, {
  3.43428954558115*^9, 3.4342895491124907`*^9}, {3.4343035511358004`*^9, 
  3.434303551354556*^9}, {3.4343050411426935`*^9, 3.4343051016129913`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{"Simplify", "[", 
  RowBox[{
   RowBox[{"(", 
    RowBox[{"x", ">", "y"}], ")"}], "&&", 
   RowBox[{"(", 
    RowBox[{"x", "<", "y"}], ")"}]}], "]"}], "\[IndentingNewLine]", 
 RowBox[{"Simplify", "[", 
  RowBox[{
   RowBox[{"(", 
    RowBox[{"x", ">", "y"}], ")"}], "&&", 
   RowBox[{"(", 
    RowBox[{"x", "\[GreaterEqual]", "y"}], ")"}]}], 
  "]"}], "\[IndentingNewLine]", 
 RowBox[{"Simplify", "[", 
  RowBox[{
   RowBox[{"(", 
    RowBox[{"x", "\[GreaterEqual]", "y"}], ")"}], "&&", 
   RowBox[{"(", 
    RowBox[{"x", "\[LessEqual]", "y"}], ")"}]}], "]"}], "\[IndentingNewLine]", 
 RowBox[{"Simplify", "[", 
  RowBox[{
   RowBox[{"(", 
    RowBox[{"x", ">", "y"}], ")"}], "||", 
   RowBox[{"(", 
    RowBox[{"x", "<", "y"}], ")"}]}], "]"}], "\[IndentingNewLine]", 
 RowBox[{"Simplify", "[", 
  RowBox[{
   RowBox[{"(", 
    RowBox[{"x", ">", "y"}], ")"}], "||", 
   RowBox[{"(", 
    RowBox[{"x", "\[GreaterEqual]", "y"}], ")"}]}], 
  "]"}], "\[IndentingNewLine]", 
 RowBox[{"Simplify", "[", 
  RowBox[{
   RowBox[{"(", 
    RowBox[{"x", "\[GreaterEqual]", "y"}], ")"}], "||", 
   RowBox[{"(", 
    RowBox[{"x", "\[LessEqual]", "y"}], ")"}]}], "]"}]}], "Input",
 CellChangeTimes->{{3.434298188130519*^9, 3.4342982448194704`*^9}, {
  3.434298281570411*^9, 3.4342983139618654`*^9}, {3.4342983559160643`*^9, 
  3.4342984662001376`*^9}, {3.4343016154299974`*^9, 3.4343016252114983`*^9}}],

Cell[BoxData["False"], "Output",
 CellChangeTimes->{3.527333406054716*^9}],

Cell[BoxData[
 RowBox[{"x", ">", "y"}]], "Output",
 CellChangeTimes->{3.527333406054716*^9}],

Cell[BoxData[
 RowBox[{"x", "\[Equal]", "y"}]], "Output",
 CellChangeTimes->{3.5273334060647154`*^9}],

Cell[BoxData[
 RowBox[{"x", "\[NotEqual]", "y"}]], "Output",
 CellChangeTimes->{3.5273334060647154`*^9}],

Cell[BoxData[
 RowBox[{"x", "\[GreaterEqual]", "y"}]], "Output",
 CellChangeTimes->{3.5273334060647154`*^9}],

Cell[BoxData["True"], "Output",
 CellChangeTimes->{3.5273334060647154`*^9}]
}, Open  ]]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Piecewise Functions (20 min)", "Section",
 CellChangeTimes->{{3.4342295780617375`*^9, 3.4342295811555667`*^9}, {
  3.434229693767824*^9, 3.434229696783527*^9}, {3.434230592900217*^9, 
  3.4342305964003067`*^9}, {3.434234429904955*^9, 3.43423443131026*^9}, {
  3.434309967034418*^9, 3.434309970737638*^9}, {3.4343160099859886`*^9, 
  3.4343160145017295`*^9}, {3.4343780559231377`*^9, 3.4343780563388643`*^9}, {
  3.4344314422076855`*^9, 3.4344314423794613`*^9}, {3.5237315165712557`*^9, 
  3.523731519482547*^9}}],

Cell[TextData[{
 "A piecewise functions is a function whose definition is different in \
different domains of its independent variable.  You have encountered the ",
 StyleBox[ButtonBox["Piecewise",
  BaseStyle->"Link",
  ButtonData->"paclet://ref/Piecewise"],
  FontWeight->"Bold"],
 " and ",
 StyleBox[ButtonBox["Boole",
  BaseStyle->"Link",
  ButtonData->"paclet://ref/Boole"],
  FontWeight->"Bold"],
 " functions in previous lab exercises, though we didn't take time to \
formally introduce them.  They allow us to define arbitrary piecewise \
functions (even multidimensional functions) based on a set of inequalities.  \
You have also worked with a number of pre-defined piecewise functions such as \
",
 StyleBox[ButtonBox["Abs",
  BaseStyle->"Link",
  ButtonData->"paclet://ref/Abs"],
  FontWeight->"Bold"],
 " and ",
 StyleBox[ButtonBox["Sign",
  BaseStyle->"Link",
  ButtonData->"paclet://ref/Sign"],
  FontWeight->"Bold"],
 "."
}], "Text",
 CellChangeTimes->{{3.4343157983086953`*^9, 3.434315896920594*^9}, {
  3.4343162385699654`*^9, 3.434316247570196*^9}, {3.434316316790718*^9, 
  3.434316400824119*^9}}],

Cell[CellGroupData[{

Cell["\<\
(#3) Built-in piecewise functions (10 min)\
\>", "Subsection",
 CellChangeTimes->{{3.434309649463789*^9, 3.434309659776553*^9}, {
  3.4343099445807185`*^9, 3.4343099541903396`*^9}, {3.434316409480591*^9, 
  3.434316429918614*^9}, {3.5237227552352095`*^9, 3.5237227560042863`*^9}}],

Cell[TextData[{
 "(a) Evaluate the cell below to define a list of common piecewise functions. \
 Links to their DC reference pages are found on the ",
 StyleBox[ButtonBox["Conditionals",
  BaseStyle->"Link",
  ButtonData->"paclet://guide/Conditionals"],
  FontWeight->"Bold"],
 " guide page in the section on ",
 StyleBox["Mathematical Function Conditionals",
  FontWeight->"Bold"],
 "."
}], "Text",
 CellChangeTimes->{{3.4342297023461695`*^9, 3.4342297921609683`*^9}, {
   3.4342298237711525`*^9, 3.4342298343495483`*^9}, 3.4343091222159166`*^9, {
   3.434309293032789*^9, 3.4343094171765924`*^9}, {3.4343094612558455`*^9, 
   3.434309463802786*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"funclist", " ", "=", " ", 
  RowBox[{"{", 
   RowBox[{
   "Round", ",", " ", "Floor", ",", " ", "Ceiling", ",", " ", "IntegerPart", 
    ",", " ", "FractionalPart", ",", " ", "Abs", ",", " ", "Sign", ",", 
    "UnitStep", ",", "Unitize", ",", 
    RowBox[{
     RowBox[{"Chop", "[", 
      RowBox[{"#", ",", "1"}], "]"}], "&"}], ",", " ", "Clip"}], 
   "}"}]}]], "Input",
 CellChangeTimes->{{3.4343089259140167`*^9, 3.4343089309610205`*^9}, {
   3.434308966805688*^9, 3.4343090974809084`*^9}, {3.434309178842366*^9, 
   3.4343092253279314`*^9}, 3.4343098654849434`*^9, {3.434313961605427*^9, 
   3.4343139617616806`*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "Round", ",", "Floor", ",", "Ceiling", ",", "IntegerPart", ",", 
   "FractionalPart", ",", "Abs", ",", "Sign", ",", "UnitStep", ",", "Unitize",
    ",", 
   RowBox[{
    RowBox[{"Chop", "[", 
     RowBox[{"#1", ",", "1"}], "]"}], "&"}], ",", "Clip"}], "}"}]], "Output",
 CellChangeTimes->{3.527333479521777*^9, 3.5273412776498394`*^9}]
}, Open  ]],

Cell[TextData[{
 "\n(b) ",
 StyleBox["Plot",
  FontWeight->"Bold"],
 " each of these piecewise functions over the range {",
 StyleBox["x",
  FontSlant->"Italic"],
 ", -3, 3} with ",
 StyleBox["{PlotRange \[Rule] All, ExclusionsStyle \[Rule] Automatic, \
PlotLabel \[Rule] #, PlotStyle \[Rule] Thick}",
  FontWeight->"Bold"],
 " as options.  Do this with one line of code by creating a pure function \
(where the function name is the variable) and then mapping it onto the list \
of function names.  If you still aren't comfortable with pure functions, then \
spend some time and get comfortable.  Explain each graph to your TA."
}], "Text",
 CellChangeTimes->{{3.4343094708967175`*^9, 3.4343095156009865`*^9}, {
  3.4343095561489*^9, 3.434309564195981*^9}, {3.434750819172725*^9, 
  3.4347509385187664`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"plotFunc", " ", "[", "i_", "]"}], ":=", 
  RowBox[{"Plot", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"funclist", "[", 
      RowBox[{"[", "i", "]"}], "]"}], "[", "x", "]"}], ",", 
    RowBox[{"{", 
     RowBox[{"x", ",", 
      RowBox[{"-", "3"}], ",", "3"}], "}"}], ",", 
    StyleBox[
     RowBox[{"PlotRange", " ", "\[Rule]", " ", "All"}],
     FontWeight->"Bold"], 
    StyleBox[",",
     FontWeight->"Bold"], 
    StyleBox[" ",
     FontWeight->"Bold"], 
    StyleBox[
     RowBox[{"ExclusionsStyle", " ", "\[Rule]", " ", "Automatic"}],
     FontWeight->"Bold"], 
    StyleBox[",",
     FontWeight->"Bold"], 
    StyleBox[" ",
     FontWeight->"Bold"], 
    StyleBox[
     RowBox[{"PlotLabel", " ", "\[Rule]", " ", 
      RowBox[{"funclist", "[", 
       RowBox[{"[", "i", "]"}], "]"}]}],
     FontWeight->"Bold"], 
    StyleBox[",",
     FontWeight->"Bold"], 
    StyleBox[" ",
     FontWeight->"Bold"], 
    StyleBox[
     RowBox[{"PlotStyle", " ", "\[Rule]", " ", "Thick"}],
     FontWeight->"Bold"]}], 
   StyleBox["]",
    FontWeight->"Bold"]}]}], "\[IndentingNewLine]", 
 StyleBox[
  RowBox[{"Manipulate", "[", 
   RowBox[{
    RowBox[{"plotFunc", "[", "j", "]"}], ",", 
    RowBox[{"{", 
     RowBox[{"j", ",", "1", ",", "11", ",", "1"}], "}"}]}], "]"}],
  FontWeight->"Bold"], "\[IndentingNewLine]", 
 StyleBox[
  RowBox[{"Plot", "[", 
   RowBox[{
    RowBox[{"Round", "[", "x", "]"}], ",", 
    RowBox[{"{", 
     RowBox[{"x", ",", 
      RowBox[{"-", "3"}], ",", "3"}], "}"}]}], "]"}],
  FontWeight->"Bold"]}], "Input",
 CellChangeTimes->{{3.434229583608754*^9, 3.4342295847025323`*^9}, {
   3.4343086912205086`*^9, 3.434308766472435*^9}, {3.4343088072859793`*^9, 
   3.434308836567979*^9}, {3.4343088777565336`*^9, 3.4343089358830214`*^9}, {
   3.43430925284426*^9, 3.4343092648601933`*^9}, {3.434309539476598*^9, 
   3.434309546633031*^9}, 3.4344329285451665`*^9, {3.4904385164316*^9, 
   3.4904385304091997`*^9}, {3.4904385767724*^9, 3.4904386035732*^9}, {
   3.4904386558644*^9, 3.4904388091032*^9}, 3.497690552676*^9, {
   3.52733353670949*^9, 3.5273336328556433`*^9}, {3.527333682643652*^9, 
   3.527333708352624*^9}, {3.527333754460779*^9, 3.5273339038948016`*^9}, {
   3.5273339438332043`*^9, 3.527333969562175*^9}, {3.5273345243499823`*^9, 
   3.5273345916672897`*^9}}],

Cell[BoxData[
 TagBox[
  StyleBox[
   DynamicModuleBox[{$CellContext`j$$ = 10, Typeset`show$$ = True, 
    Typeset`bookmarkList$$ = {}, Typeset`bookmarkMode$$ = "Menu", 
    Typeset`animator$$, Typeset`animvar$$ = 1, Typeset`name$$ = 
    "\"untitled\"", Typeset`specs$$ = {{
      Hold[$CellContext`j$$], 1, 11, 1}}, Typeset`size$$ = {86., {3., 8.}}, 
    Typeset`update$$ = 0, Typeset`initDone$$, Typeset`skipInitDone$$ = 
    True, $CellContext`j$2552$$ = 0}, 
    DynamicBox[Manipulate`ManipulateBoxes[
     1, StandardForm, "Variables" :> {$CellContext`j$$ = 1}, 
      "ControllerVariables" :> {
        Hold[$CellContext`j$$, $CellContext`j$2552$$, 0]}, 
      "OtherVariables" :> {
       Typeset`show$$, Typeset`bookmarkList$$, Typeset`bookmarkMode$$, 
        Typeset`animator$$, Typeset`animvar$$, Typeset`name$$, 
        Typeset`specs$$, Typeset`size$$, Typeset`update$$, Typeset`initDone$$,
         Typeset`skipInitDone$$}, 
      "Body" :> $CellContext`plotFunc[$CellContext`j$$], 
      "Specifications" :> {{$CellContext`j$$, 1, 11, 1}}, "Options" :> {}, 
      "DefaultOptions" :> {}],
     ImageSizeCache->{243., {46., 52.}},
     SingleEvaluation->True],
    Deinitialization:>None,
    DynamicModuleValues:>{},
    SynchronousInitialization->True,
    UnsavedVariables:>{Typeset`initDone$$},
    UntrackedVariables:>{Typeset`size$$}], "Manipulate",
   Deployed->True,
   StripOnInput->False],
  Manipulate`InterpretManipulate[1]]], "Output",
 CellChangeTimes->{{3.527334567588253*^9, 3.527334592037275*^9}, {
  3.527341276289894*^9, 3.527341279529764*^9}}],

Cell[BoxData[
 GraphicsBox[{{{}, {}, 
    {Hue[0.67, 0.6, 0.6], 
     LineBox[{{-2.9999998775510206`, -3.}, {-2.941113955170919, -3.}, \
{-2.8822280327908176`, -3.}, {-2.754549857487248, -3.}, {-2.635332698579087, \
-3.}, {-2.576893402832915, -3.}, {-2.518454107086743, -3.}, \
{-2.5105300494595113`, -3.}, {-2.5026059918322794`, -3.}, \
{-2.5019132653061225`, -3.}}], LineBox[CompressedData["
1:eJxTTMoPSmViYGAQB2IQrb/8wVORP8wHGCDgwL/E7hytnwh+wkqvs9JfEXwV
i5N9/94g+C+OuQc8fILg/2B0Css5guBz2NrEfF+M4GtsNsjgTUbwPTRVS5SV
EPyDrx16f65ggvOt1sUsO6+P4P/qShM20mSE879+XzI1Tp0Bzj+iNMlkX+6/
/TC+NWv9Zu2UP3D+FAdzc8faX3B+zTt3vml9P+H85DkRT1/N/wHnX4i9uFI3
HsG3k/fKK5BD8HPMbx6LEEPwZ/lnyDvyIfiLNtqZXGNH8AEpZG7o
      "]], LineBox[CompressedData["
1:eJxTTMoPSmViYGAQBWIQHed38LTmj+/7GcDgw/6ADUsaH71F8Nc8OGS0+S6C
n+T4f0rIXgRfcpH1969zEPwvKroN1dII/vnlcpyMs77B+d8i02UTVnyF8+V4
Nhju3/YFzudSeHb+5apPcH5OSOuMFSs+wPkJh++flpv0Fs5Xsv0XeLTxJZy/
MmPzw93bniLMW2c0f/GKx3B+1ueNMd2zHsL5D3jWhGVJIvihassCPGc8gPMF
jBef3RGO4J+2X+ClIY7guyTXZqzhR/ABojuHzA==
      "]], LineBox[CompressedData["
1:eJxTTMoPSmViYGAwA2IQXWHJqr/8wf39DFCwTmjPhfKzCD7PTKt+/bUIfqb8
Tt/nPQj+saXmPPNzEPzGTSadfDoI/j2Lze7HuBF8m/2GbHWv78H5307rNb9d
heDnPNWoPaOJ4EdIyBZ2qd+F8/XqWCPZlG/D+VK7Lkx/wYLgs36bfe3Us1tw
/p1co5D+VQh+V2y8v4QRgv/cZqerluNNOH/B7xwjv/jrcL5w5RXuabMvw/nX
U3K01j8+BueXV2n1nZy6Ds5f1W/hsMRgrT2M35fZeC2h6Ticz/vFx3pN4GU4
X+CWUXJ5EYIvckCi22kygi/V8+TWjSsIvoZKTRVrxBU43ylk9c64uKtwftkW
TgvB7OtwfuWs9/F3uhH8moar7cvXIPjNPguv275D8Cc8sSjPKrwB568Wydh2
uPwmnP+g5JhJWcttOP/OCVapFUsQ/Bsyrv9vHkHwLxw5fNKW9Q6cf0DkYBxr
G4I/f8vujintd+H8WRy/c48tR/CnxVgF/ziO4Pex7JSN4bgH59eFbNuk3Ing
V634Oj10JYJf9sektv0kgp+3ZLP7a877cH7Wj086sloIfpqPkZC/F4If92XD
nU1dCH6Ux4eDT1Yh+KFz9JeLnUbwqyD5Cc4HACQn5Fw=
      "]], LineBox[CompressedData["
1:eJxTTMoPSmViYGAQBWIQ7Zpcm7GG/4E9Axh8sFcqE5N7r4rgy50KZVZ0Q/DF
iq6cbWlD8Pmkgme8OIbg/8sM0N3g/hDOf7fT91D5CQT/1IJywXcrHsP5y9oX
JqR0PoXzVb+tFq6Y/RLOv7dJfq91xls4P3T6g47XEz7A+fOW9uz1mfYJzmeJ
zn3LWvkFzn8Z2+21pu4rnH8uYeXyoJZvcD5HD+vV6n8IvtP2RKalFd/h/Ptn
+Gfu3Irg1zzaq3/uE4If53fwtOYPBB8AyZdy3g==
      "]], LineBox[CompressedData["
1:eJxTTMoPSmViYGCQAGIQvWijnck19h/2DBDgME3L/sVWTgTf661IdYQggr+x
6MCCuQoIvsSP7GOP9BH8Z0yHBXP9EPytvFKx33MQ/HeX5y6qj/kJ56vNUnzB
7vMLzv9V1vJ3dfAfOP/1L2m+FRb/4PwF6e1XpJUZHGD8CY5neiRVGeF8vvzV
TodFmeD8ZzcNGWxnIPj7XHbs3SbFjFDP/2j2vHAEP+4md1XbFAS/bZ9C5q9N
CP66xaYReRcRfCexA/4rHiD41zq83B+9R/AVDvE7139H8PWXP3gq8gfBBwDD
BF7T
      "]], 
     LineBox[{{2.5019132653061225`, 3.}, {2.5032829836187265`, 3.}, {
      2.505141679104934, 3.}, {2.5070003745911422`, 3.}, {2.5653093464418926`,
       3.}, {2.623618318292643, 3.}, {2.75014259253751, 3.}, {
      2.8682058503869685`, 3.}, {2.9341028639689943`, 3.}, {
      2.9999998775510206`, 3.}}]}, {}}, {{}, {}, {}}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->True,
  AxesOrigin->{0, 0},
  PlotRange->{{-3, 3}, {-3., 3.}},
  PlotRangeClipping->True,
  PlotRangePadding->{
    Scaled[0.02], 
    Scaled[0.02]}]], "Output",
 CellChangeTimes->{{3.527334567588253*^9, 3.527334592037275*^9}, {
  3.527341276289894*^9, 3.5273412795897617`*^9}}]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["\<\
(#4) General piecewise functions (10 min)\
\>", "Subsection",
 CellChangeTimes->{{3.434309676823864*^9, 3.434309681542735*^9}, {
  3.434309959440474*^9, 3.4343099611280174`*^9}, {3.4343103380126653`*^9, 
  3.4343103426377835`*^9}, {3.434315762870288*^9, 3.434315767057895*^9}, {
  3.4343159166242237`*^9, 3.434315919436796*^9}, {3.5237227595236387`*^9, 
  3.523722760115698*^9}}],

Cell[TextData[{
 "(a) Use ",
 StyleBox[ButtonBox["Piecewise",
  BaseStyle->"Link",
  ButtonData->"paclet://ref/Piecewise"],
  FontWeight->"Bold"],
 " to define an expression that equals ",
 Cell[BoxData[
  FormBox[
   FractionBox["1", "6"], TraditionalForm]]],
 Cell[BoxData[
  FormBox[
   SuperscriptBox[
    RowBox[{"(", 
     RowBox[{"2", "+", "x"}], ")"}], "3"], TraditionalForm]]],
 " over the range ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{"-", "2"}], "<", "x", "\[LessEqual]", 
    RowBox[{"-", "1"}]}], TraditionalForm]]],
 ",  ",
 Cell[BoxData[
  RowBox[{
   FractionBox["1", "6"], 
   RowBox[{"(", 
    RowBox[{"4", "-", 
     RowBox[{"6", " ", 
      SuperscriptBox["x", "2"]}], "-", 
     RowBox[{"3", 
      SuperscriptBox["x", "3"]}]}], ")"}]}]],
  CellChangeTimes->{{3.4343110501246448`*^9, 3.4343110551560235`*^9}}],
 " over the range ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{"-", "1"}], "<", "x", "\[LessEqual]", "0"}], TraditionalForm]]],
 ",  ",
 Cell[BoxData[
  RowBox[{
   FractionBox["1", "6"], 
   RowBox[{"(", 
    RowBox[{"4", "-", 
     RowBox[{"6", " ", 
      SuperscriptBox["x", "2"]}], "+", 
     RowBox[{"3", 
      SuperscriptBox["x", "3"]}]}], ")"}]}]],
  CellChangeTimes->{{3.4343110501246448`*^9, 3.4343110551560235`*^9}}],
 " over the range ",
 Cell[BoxData[
  FormBox[
   RowBox[{"0", "<", "x", "\[LessEqual]", "1"}], TraditionalForm]]],
 ",  ",
 Cell[BoxData[
  FormBox[
   FractionBox["1", "6"], TraditionalForm]]],
 Cell[BoxData[
  FormBox[
   SuperscriptBox[
    RowBox[{"(", 
     RowBox[{"2", "-", "x"}], ")"}], "3"], TraditionalForm]]],
 " the range ",
 Cell[BoxData[
  FormBox[
   RowBox[{"1", "<", "x", "\[LessEqual]", "2"}], TraditionalForm]]],
 ", or 0 otherwise.  This curve is called a uniform cubic B-spline.  Compute \
the ",
 Cell[BoxData[
  FormBox[
   SuperscriptBox["1", "st"], TraditionalForm]]],
 ", ",
 Cell[BoxData[
  FormBox[
   SuperscriptBox["2", "nd"], TraditionalForm]]],
 " and ",
 Cell[BoxData[
  FormBox[
   SuperscriptBox["3", "rd"], TraditionalForm]]],
 " derivatives of the B-spline and also the indefinite integral of the \
B-spline, giving each result a different name."
}], "Text",
 CellChangeTimes->{{3.4343098456719365`*^9, 3.43430984640633*^9}, {
  3.4343109121054864`*^9, 3.4343109341060495`*^9}, {3.434310976372757*^9, 
  3.43431099759205*^9}, {3.4343110593280053`*^9, 3.4343112123631725`*^9}, {
  3.4343141863299294`*^9, 3.4343145954497776`*^9}, {3.4343146782487726`*^9, 
  3.434314750313117*^9}, {3.4343148205961666`*^9, 3.4343148760038347`*^9}, {
  3.4343149287083087`*^9, 3.4343151149474516`*^9}, {3.4343151754646254`*^9, 
  3.4343152054966445`*^9}, {3.434315276217205*^9, 3.434315305124195*^9}, {
  3.4343153480627937`*^9, 3.43431548792575*^9}, {3.4343159513438625`*^9, 
  3.434315959000309*^9}, {3.434432670977721*^9, 3.434432670977721*^9}, {
  3.4347509725194197`*^9, 3.4347509725194197`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"myfuncfor4", " ", "=", " ", 
   RowBox[{"Piecewise", "[", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"0", ",", 
        RowBox[{"x", "\[LessEqual]", 
         RowBox[{"-", "2"}]}]}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{
         FractionBox["1", "6"], 
         SuperscriptBox[
          RowBox[{"(", 
           RowBox[{"2", "+", "x"}], ")"}], "3"]}], ",", 
        RowBox[{
         RowBox[{"-", "2"}], "<", "x", "\[LessEqual]", 
         RowBox[{"-", "1"}]}]}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{
         FractionBox["1", "6"], 
         RowBox[{"(", 
          RowBox[{"4", "-", 
           RowBox[{"6", 
            SuperscriptBox["x", "2"]}], "-", 
           RowBox[{"3", 
            SuperscriptBox["x", "3"]}]}], ")"}]}], ",", 
        RowBox[{
         RowBox[{"-", "1"}], "<", "x", "\[LessEqual]", "0"}]}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{
         FractionBox["1", "6"], 
         RowBox[{"(", 
          RowBox[{"4", "-", 
           RowBox[{"6", 
            SuperscriptBox["x", "2"]}], "+", 
           RowBox[{"3", 
            SuperscriptBox["x", "3"]}]}], ")"}]}], ",", 
        RowBox[{"0", "<", "x", "\[LessEqual]", "1"}]}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{
         FractionBox["1", "6"], 
         SuperscriptBox[
          RowBox[{"(", 
           RowBox[{"2", "-", "x"}], ")"}], "3"]}], ",", 
        RowBox[{"1", "<", "x", "\[LessEqual]", "2"}]}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"0", ",", 
        RowBox[{"x", ">", "2"}]}], "}"}]}], "}"}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{"d1st", " ", "=", " ", 
  RowBox[{"D", "[", " ", 
   RowBox[{"myfuncfor4", ",", 
    RowBox[{"{", 
     RowBox[{"x", ",", "1"}], "}"}]}], "]"}]}], "\[IndentingNewLine]", 
 RowBox[{"d2nd", " ", "=", " ", 
  RowBox[{"D", "[", " ", 
   RowBox[{"myfuncfor4", ",", 
    RowBox[{"{", 
     RowBox[{"x", ",", "2"}], "}"}]}], "]"}]}], "\[IndentingNewLine]", 
 RowBox[{"d3rd", " ", "=", " ", 
  RowBox[{"D", "[", " ", 
   RowBox[{"myfuncfor4", ",", 
    RowBox[{"{", 
     RowBox[{"x", ",", "3"}], "}"}]}], "]"}]}], "\[IndentingNewLine]", 
 RowBox[{"indefint", " ", "=", " ", 
  RowBox[{"Integrate", "[", 
   RowBox[{"myfuncfor4", ",", "x"}], "]"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"thelist", " ", "=", " ", 
   RowBox[{"{", 
    RowBox[{
    "myfuncfor4", ",", "d1st", ",", "d2nd", ",", "d3rd", ",", "indefint"}], 
    "}"}]}], ";"}]}], "Input",
 CellChangeTimes->{{3.434315499082285*^9, 3.4343155389114294`*^9}, 
   3.434432952186245*^9, {3.4904389095984*^9, 3.4904390363796*^9}, {
   3.490439087922*^9, 3.4904392160136003`*^9}, 3.497690579742*^9, {
   3.5273347047127676`*^9, 3.527335040909319*^9}, {3.5273350759279184`*^9, 
   3.5273350993469815`*^9}}],

Cell[BoxData[
 TagBox[GridBox[{
    {"\[Piecewise]", GridBox[{
       {"0", 
        RowBox[{
         RowBox[{"x", "<", 
          RowBox[{"-", "2"}]}], "||", 
         RowBox[{"x", "\[Equal]", 
          RowBox[{"-", "2"}]}]}]},
       {
        RowBox[{
         FractionBox["1", "2"], " ", 
         SuperscriptBox[
          RowBox[{"(", 
           RowBox[{"2", "+", "x"}], ")"}], "2"]}], 
        RowBox[{
         RowBox[{"-", "2"}], "<", "x", "<", 
         RowBox[{"-", "1"}]}]},
       {
        FractionBox["1", "2"], 
        RowBox[{"x", "\[Equal]", 
         RowBox[{"-", "1"}]}]},
       {
        RowBox[{
         FractionBox["1", "6"], " ", 
         RowBox[{"(", 
          RowBox[{
           RowBox[{
            RowBox[{"-", "12"}], " ", "x"}], "-", 
           RowBox[{"9", " ", 
            SuperscriptBox["x", "2"]}]}], ")"}]}], 
        RowBox[{
         RowBox[{"-", "1"}], "<", "x", "<", "0"}]},
       {"0", 
        RowBox[{"x", "\[Equal]", "0"}]},
       {
        RowBox[{
         FractionBox["1", "6"], " ", 
         RowBox[{"(", 
          RowBox[{
           RowBox[{
            RowBox[{"-", "12"}], " ", "x"}], "+", 
           RowBox[{"9", " ", 
            SuperscriptBox["x", "2"]}]}], ")"}]}], 
        RowBox[{"0", "<", "x", "<", "1"}]},
       {
        RowBox[{"-", 
         FractionBox["1", "2"]}], 
        RowBox[{"x", "\[Equal]", "1"}]},
       {
        RowBox[{
         RowBox[{"-", 
          FractionBox["1", "2"]}], " ", 
         SuperscriptBox[
          RowBox[{"(", 
           RowBox[{
            RowBox[{"-", "2"}], "+", "x"}], ")"}], "2"]}], 
        RowBox[{"1", "<", "x", "<", "2"}]},
       {"0", 
        TagBox["True",
         "PiecewiseDefault",
         AutoDelete->True]}
      },
      AllowedDimensions->{2, Automatic},
      Editable->True,
      GridBoxAlignment->{
       "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
        "RowsIndexed" -> {}},
      GridBoxItemSize->{
       "Columns" -> {{Automatic}}, "ColumnsIndexed" -> {}, "Rows" -> {{1.}}, 
        "RowsIndexed" -> {}},
      GridBoxSpacings->{"Columns" -> {
          Offset[0.27999999999999997`], {
           Offset[0.84]}, 
          Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
          Offset[0.2], {
           Offset[0.4]}, 
          Offset[0.2]}, "RowsIndexed" -> {}},
      Selectable->True]}
   },
   GridBoxAlignment->{
    "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
     "RowsIndexed" -> {}},
   GridBoxItemSize->{
    "Columns" -> {{Automatic}}, "ColumnsIndexed" -> {}, "Rows" -> {{1.}}, 
     "RowsIndexed" -> {}},
   GridBoxSpacings->{"Columns" -> {
       Offset[0.27999999999999997`], {
        Offset[0.35]}, 
       Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
       Offset[0.2], {
        Offset[0.4]}, 
       Offset[0.2]}, "RowsIndexed" -> {}}],
  "Piecewise",
  DeleteWithContents->True,
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{
  3.527334849616971*^9, {3.527334886415499*^9, 3.527334919264185*^9}, {
   3.5273349883014235`*^9, 3.527334996241106*^9}, {3.5273350692981834`*^9, 
   3.5273350998969593`*^9}}],

Cell[BoxData[
 TagBox[GridBox[{
    {"\[Piecewise]", GridBox[{
       {"0", 
        RowBox[{
         RowBox[{"x", "<", 
          RowBox[{"-", "2"}]}], "||", 
         RowBox[{"x", "\[Equal]", 
          RowBox[{"-", "2"}]}]}]},
       {
        RowBox[{"2", "+", "x"}], 
        RowBox[{
         RowBox[{"-", "2"}], "<", "x", "<", 
         RowBox[{"-", "1"}]}]},
       {"1", 
        RowBox[{"x", "\[Equal]", 
         RowBox[{"-", "1"}]}]},
       {
        RowBox[{
         FractionBox["1", "2"], " ", 
         RowBox[{"(", 
          RowBox[{
           RowBox[{"-", "4"}], "-", 
           RowBox[{"6", " ", "x"}]}], ")"}]}], 
        RowBox[{
         RowBox[{"-", "1"}], "<", "x", "<", "0"}]},
       {
        RowBox[{"-", "2"}], 
        RowBox[{"x", "\[Equal]", "0"}]},
       {
        RowBox[{
         FractionBox["1", "2"], " ", 
         RowBox[{"(", 
          RowBox[{
           RowBox[{"-", "4"}], "+", 
           RowBox[{"6", " ", "x"}]}], ")"}]}], 
        RowBox[{"0", "<", "x", "<", "1"}]},
       {"1", 
        RowBox[{"x", "\[Equal]", "1"}]},
       {
        RowBox[{"2", "-", "x"}], 
        RowBox[{"1", "<", "x", "<", "2"}]},
       {"0", 
        TagBox["True",
         "PiecewiseDefault",
         AutoDelete->True]}
      },
      AllowedDimensions->{2, Automatic},
      Editable->True,
      GridBoxAlignment->{
       "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
        "RowsIndexed" -> {}},
      GridBoxItemSize->{
       "Columns" -> {{Automatic}}, "ColumnsIndexed" -> {}, "Rows" -> {{1.}}, 
        "RowsIndexed" -> {}},
      GridBoxSpacings->{"Columns" -> {
          Offset[0.27999999999999997`], {
           Offset[0.84]}, 
          Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
          Offset[0.2], {
           Offset[0.4]}, 
          Offset[0.2]}, "RowsIndexed" -> {}},
      Selectable->True]}
   },
   GridBoxAlignment->{
    "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
     "RowsIndexed" -> {}},
   GridBoxItemSize->{
    "Columns" -> {{Automatic}}, "ColumnsIndexed" -> {}, "Rows" -> {{1.}}, 
     "RowsIndexed" -> {}},
   GridBoxSpacings->{"Columns" -> {
       Offset[0.27999999999999997`], {
        Offset[0.35]}, 
       Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
       Offset[0.2], {
        Offset[0.4]}, 
       Offset[0.2]}, "RowsIndexed" -> {}}],
  "Piecewise",
  DeleteWithContents->True,
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{
  3.527334849616971*^9, {3.527334886415499*^9, 3.527334919264185*^9}, {
   3.5273349883014235`*^9, 3.527334996241106*^9}, {3.5273350692981834`*^9, 
   3.5273350998969593`*^9}}],

Cell[BoxData[
 TagBox[GridBox[{
    {"\[Piecewise]", GridBox[{
       {"0", 
        RowBox[{"x", "<", 
         RowBox[{"-", "2"}]}]},
       {"1", 
        RowBox[{
         RowBox[{"-", "2"}], "<", "x", "<", 
         RowBox[{"-", "1"}]}]},
       {
        RowBox[{"-", "3"}], 
        RowBox[{
         RowBox[{"-", "1"}], "<", "x", "<", "0"}]},
       {"3", 
        RowBox[{"0", "<", "x", "<", "1"}]},
       {
        RowBox[{"-", "1"}], 
        RowBox[{"1", "<", "x", "<", "2"}]},
       {"0", 
        RowBox[{"x", ">", "2"}]},
       {"Indeterminate", 
        TagBox["True",
         "PiecewiseDefault",
         AutoDelete->True]}
      },
      AllowedDimensions->{2, Automatic},
      Editable->True,
      GridBoxAlignment->{
       "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
        "RowsIndexed" -> {}},
      GridBoxItemSize->{
       "Columns" -> {{Automatic}}, "ColumnsIndexed" -> {}, "Rows" -> {{1.}}, 
        "RowsIndexed" -> {}},
      GridBoxSpacings->{"Columns" -> {
          Offset[0.27999999999999997`], {
           Offset[0.84]}, 
          Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
          Offset[0.2], {
           Offset[0.4]}, 
          Offset[0.2]}, "RowsIndexed" -> {}},
      Selectable->True]}
   },
   GridBoxAlignment->{
    "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
     "RowsIndexed" -> {}},
   GridBoxItemSize->{
    "Columns" -> {{Automatic}}, "ColumnsIndexed" -> {}, "Rows" -> {{1.}}, 
     "RowsIndexed" -> {}},
   GridBoxSpacings->{"Columns" -> {
       Offset[0.27999999999999997`], {
        Offset[0.35]}, 
       Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
       Offset[0.2], {
        Offset[0.4]}, 
       Offset[0.2]}, "RowsIndexed" -> {}}],
  "Piecewise",
  DeleteWithContents->True,
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{
  3.527334849616971*^9, {3.527334886415499*^9, 3.527334919264185*^9}, {
   3.5273349883014235`*^9, 3.527334996241106*^9}, {3.5273350692981834`*^9, 
   3.5273350999069595`*^9}}],

Cell[BoxData[
 TagBox[GridBox[{
    {"\[Piecewise]", GridBox[{
       {"0", 
        RowBox[{"x", "\[LessEqual]", 
         RowBox[{"-", "2"}]}]},
       {
        RowBox[{
         FractionBox["1", "24"], " ", 
         SuperscriptBox[
          RowBox[{"(", 
           RowBox[{"2", "+", "x"}], ")"}], "4"]}], 
        RowBox[{
         RowBox[{"-", "2"}], "<", "x", "\[LessEqual]", 
         RowBox[{"-", "1"}]}]},
       {
        RowBox[{
         FractionBox["1", "2"], "+", 
         FractionBox[
          RowBox[{"2", " ", "x"}], "3"], "-", 
         FractionBox[
          SuperscriptBox["x", "3"], "3"], "-", 
         FractionBox[
          SuperscriptBox["x", "4"], "8"]}], 
        RowBox[{
         RowBox[{"-", "1"}], "<", "x", "\[LessEqual]", "0"}]},
       {
        RowBox[{
         FractionBox["1", "2"], "+", 
         FractionBox[
          RowBox[{"2", " ", "x"}], "3"], "-", 
         FractionBox[
          SuperscriptBox["x", "3"], "3"], "+", 
         FractionBox[
          SuperscriptBox["x", "4"], "8"]}], 
        RowBox[{"0", "<", "x", "\[LessEqual]", "1"}]},
       {
        RowBox[{"1", "-", 
         RowBox[{
          FractionBox["1", "24"], " ", 
          SuperscriptBox[
           RowBox[{"(", 
            RowBox[{
             RowBox[{"-", "2"}], "+", "x"}], ")"}], "4"]}]}], 
        RowBox[{"1", "<", "x", "\[LessEqual]", "2"}]},
       {"1", 
        TagBox["True",
         "PiecewiseDefault",
         AutoDelete->True]}
      },
      AllowedDimensions->{2, Automatic},
      Editable->True,
      GridBoxAlignment->{
       "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
        "RowsIndexed" -> {}},
      GridBoxItemSize->{
       "Columns" -> {{Automatic}}, "ColumnsIndexed" -> {}, "Rows" -> {{1.}}, 
        "RowsIndexed" -> {}},
      GridBoxSpacings->{"Columns" -> {
          Offset[0.27999999999999997`], {
           Offset[0.84]}, 
          Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
          Offset[0.2], {
           Offset[0.4]}, 
          Offset[0.2]}, "RowsIndexed" -> {}},
      Selectable->True]}
   },
   GridBoxAlignment->{
    "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
     "RowsIndexed" -> {}},
   GridBoxItemSize->{
    "Columns" -> {{Automatic}}, "ColumnsIndexed" -> {}, "Rows" -> {{1.}}, 
     "RowsIndexed" -> {}},
   GridBoxSpacings->{"Columns" -> {
       Offset[0.27999999999999997`], {
        Offset[0.35]}, 
       Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
       Offset[0.2], {
        Offset[0.4]}, 
       Offset[0.2]}, "RowsIndexed" -> {}}],
  "Piecewise",
  DeleteWithContents->True,
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{
  3.527334849616971*^9, {3.527334886415499*^9, 3.527334919264185*^9}, {
   3.5273349883014235`*^9, 3.527334996241106*^9}, {3.5273350692981834`*^9, 
   3.527335099926958*^9}}]
}, Open  ]],

Cell[TextData[{
 "\n(b) Group the B-spline, its first three derivatives and its indefinite \
integral into a list, and then ",
 StyleBox["Plot",
  FontWeight->"Bold"],
 " them all (on separate graphs), over the range {",
 StyleBox["x",
  FontSlant->"Italic"],
 ", -3, 3} with ",
 StyleBox["{PlotRange\[Rule]All, ExclusionsStyle\[Rule]Automatic}",
  FontWeight->"Bold"],
 " as options."
}], "Text",
 CellChangeTimes->{{3.4343098456719365`*^9, 3.43430984640633*^9}, {
   3.4343109121054864`*^9, 3.4343109341060495`*^9}, {3.434310976372757*^9, 
   3.43431099759205*^9}, {3.4343110593280053`*^9, 3.4343112123631725`*^9}, {
   3.4343141863299294`*^9, 3.4343145954497776`*^9}, {3.4343146782487726`*^9, 
   3.434314750313117*^9}, {3.4343148205961666`*^9, 3.4343148760038347`*^9}, {
   3.4343149287083087`*^9, 3.4343151149474516`*^9}, {3.4343151754646254`*^9, 
   3.4343152054966445`*^9}, {3.434315276217205*^9, 3.434315305124195*^9}, {
   3.4343153480627937`*^9, 3.434315484581914*^9}, {3.434315634320122*^9, 
   3.4343156610551815`*^9}, 3.4343159550470824`*^9, {3.434432973827286*^9, 
   3.434433020140675*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Table", "[", 
  RowBox[{
   RowBox[{"Plot", "[", 
    RowBox[{
     RowBox[{"thelist", "[", 
      RowBox[{"[", "n", "]"}], "]"}], ",", 
     RowBox[{"{", 
      RowBox[{"x", ",", 
       RowBox[{"-", "3"}], ",", "3"}], "}"}], ",", 
     RowBox[{"PlotRange", "\[Rule]", "All"}], ",", 
     RowBox[{"ExclusionsStyle", "\[Rule]", "Automatic"}]}], "]"}], ",", 
   RowBox[{"{", 
    RowBox[{"n", ",", "1", ",", "5"}], "}"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.4343132302429543`*^9, 3.434313351980446*^9}, {
   3.4343134077318726`*^9, 3.4343134590613117`*^9}, {3.434313527250558*^9, 
   3.4343135807206764`*^9}, {3.434313615518442*^9, 3.4343136926922927`*^9}, {
   3.434313879243943*^9, 3.434313931510906*^9}, {3.4343140027627306`*^9, 
   3.434314104515335*^9}, {3.4343146236536245`*^9, 3.4343146694672976`*^9}, {
   3.4343147699073687`*^9, 3.4343148013612986`*^9}, {3.434315125900857*^9, 
   3.434315157354787*^9}, {3.434315217262571*^9, 3.4343152660919456`*^9}, {
   3.4343153225621414`*^9, 3.434315342343898*^9}, {3.4343155066293535`*^9, 
   3.4343155233016553`*^9}, {3.4343155598807163`*^9, 3.434315628773105*^9}, {
   3.434315675289921*^9, 3.434315675602429*^9}, 3.4344329703272185`*^9, {
   3.4904392419096003`*^9, 3.4904393070864*^9}, {3.490439372388*^9, 
   3.4904394619788*^9}, {3.4904394926015997`*^9, 3.4904394992784*^9}, 
   3.4976905834236*^9, {3.5273351077666445`*^9, 3.5273352078726406`*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   GraphicsBox[{{{}, {}, 
      {Hue[0.67, 0.6, 0.6], LineBox[CompressedData["
1:eJxTTMoPSmViYGAQBWIQnbx+wvv//9kPMECByG8pNes/CP4Rt6UxZT8QfLV7
O0+++YDgv+J5vPjmQwS/IMs0YvNhBL9O9daBtHYEf9Zs5Uln+RD8+fc78gM5
2eB8sQvB/pqirHD+iYBgl9OqLHC+h6ZqibISM5xvtS5m2Xl9Jjj/V1easJEm
I5z/9fuSqXHqDHB+VMf26XOUEfwDEqdm3pJH8Hss388Nk0Dwlaotl/lxIvgd
3D4relgR/IsR8lKvmRF8AKQITkw=
        "]], LineBox[CompressedData["
1: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
        "]], LineBox[CompressedData["
1:eJxtz3k4FHgYB3A5urZdRZtzM0US4yyURq+zSEvkqhWTlkciVBRNtqyEcoaQ
7MgiZ64I6XVXo5xlooM5fs5dUkjNpp39f//4Pt/n88/7vN9NngEOXqIiIiJO
wvzXigbBS7VBMxgmvTm7KaQD6K3DnRuT/0advMAml2gWbDZesm+/PIGRu5qd
GvX7oNCnitNQQzCmY9LTRo8Nvh8r3K5lcnCZ51auEfMNaIVLHF6u/BprFvxF
256NgHx9z81x8ddIM28cDnk5AhILtwZYo0N4oC42VuXdCLzx13NMKBrCq0tZ
lMCZEYg96mEnqzeErLlog8frODBGq7NUNx1EZmeXlZ8TB5gCPz1bDzbSBTeW
HXjFgeuGO4N0TNmoY6msaTnCgXNnxMqllNnomyUzajjOAdupDE326ACm2VFf
rVrkwNehDjX6qQHU6pn5012GC0fqKUqnL77E2GBtSqsjF6RDX3yXdqsfa7ZJ
p+uyuLD47fO6mbB+NGMYpnJ6ufAuSknW6kg/5ht1RkYPcuFuiq/KF9l+NNUw
W9kwzoU95SLG7ml9GK4ZsrtiOQ9OjFFPqSb1YrzFLg22CQ/Ci1fn+H/fjVk6
Jh/ulfLAus6pVOlZF7q4k5gt1TxY/5hZ1xvbhYJQMUZiPQ8KuQZ9+iu70KK4
mLb3MQ9eyB0XWxJ9jnf2VbO0R3igHt3gFb/IQtGF8dkZST6wf/VTv8frwNGs
Oa1Obz48envQsCa/A+0ps7bhJ/mQ76xv0XiiA5+8VWxTDeTDWaulo50z7Xiq
8lKkSygf1lITk8YEbUg/897I8BofrD9WLSqtb8XzQ1t8R0v4oOOXLrGV3YKb
5aa/TZTzQZYwpLQyW3CVyYgFt5oPowOWVBqlBeU/NFWWP+RDRD3bw5XajBvT
JwWtnXwIFvsUtynmEdJOp2g3jPHBYh4LtCUfoaJd/5D4FB+kxqKbjVMb0afF
IMFsmg9lLPn5wzkPsU9mciJjTng/aY9bcl09NmmFWtSKEKj+fUUIE+rxVcCh
DUwxAhHBPQll7XV4Ntsum7GcgNJhz1ZW7wNsC6AWrF1DwJUSpS42WYMZN6ZD
czcQUJWys1gXWIN5s7ZDanIE5sRk3ZUW7qNtStftHAUCSWOFSbtF7+M3hyIV
fwoBVtnzxTPyVVjpvV/y5DYC6cw0qQhmJZ7OVPCO1SDgnexBTVStRP6JVc+z
NAmIhcx6lOhVYNDVupxMXQLnwtTjn6aW4Rd/rvnnnQRsp98P3MsvRWb9bkaB
kfAfz1qltNoSpDPH5q1oBF5aW1R4Dhahf65ClBcQKGlc/cVqshDfLPwYM2JC
IFK310xbcBfv2O3LtzUjsF3O/YVAsQB/u7h9pbglgdVxKj9xNfOxOpq+y2Yv
Aa7IlNeTPXkYIVF49Mo+4b7xc59S6Lmo1RTo2mdNwMdtj8mFoDuoscNTgewn
YNIjHnMsIgdFow4VTdoQeBegrO9m9QcytOUlun4mEOdS3qHmextNG481FtsS
oIGx6/y1W0hJjZNn2BGYUmVNNJdmoFrfgBQcJJD5g8uF+O6b6JcQkjUntPUC
b80vs6m4OJZXmmVPYPFtYPZW6RQcXrhNM3QgUND+VXtuRzLqsG9Cm9DOpbHN
Tc6JKMh9VmJ+SLhPXTtffvY6HjwfHHZfaJ/PVk+rdsSgSUBntpwjgY4nnn8d
OH8FB3NXrA0UWjmdITnacBk1dY+3PRBatJvqtbR0AW30ZCo/Ct3oTy/WiTqL
5i1u3RQnArOyarx2eV9U/cdPykTonpKNw44OzigquBRk/z/+F3puz74=
        "]], LineBox[CompressedData["
1:eJwV02s01AkYBvBZaSNZsblkt1W2sO1RGQqLnl3lviNMdrs4EuVaTJqMlmjs
hFlRiKiEcYtEjNiccWfIJZdxiXJp/P9sMlGLxNbu7If3POd33nPeD8857zbP
IJfTMhQKxVk6/2fhLh5rQ7UnimNkvOxdSaSHZiyKBhj4qt51xUDq0WG/0mzH
UCzPZ5YrSK1tts8vqDUS1H8LUoYOkzB0ZCd+k/U7qruNHqRIPRDhE3jFLQaX
bRTXWEvNKqU5zGrE4bzDctZfdBKaE4Z69IEEcOoF1y9J7S4XLzNqmwhe3LYX
slKXbqWc26ibjNpEydUIFxIU0/PjB9amoK1qunjGmYSz8xSNNZmKUvGglZ3U
PL+jgqKGNJx6zz55y4nEwVtIV464g6VzurabDpFIKS9fZ+V2F+XZpToWjiTO
kypm5luy8NFRqfQIjUTzxyuFQavZWHnEIHwcSMxy6zy4MzzEm1LyjtuTUFX7
oJ4znIOzT6P2WdqR8N51JnqwKg+DdeF/T1uTSKjOs5jPz8f+KTa1wIpElfX4
gnxqAfhlKX5HD5KQO+HiZcEsRHSH7HTqTySKrpn8mLvnARRUG/ewzEjINmcK
1hmVgBJqwC8yJXFi+XPTAONSCGOTzLuNSfzxcEZjc+ZDJOlopL42JLF/82Pl
ibxyFIVUNgR/TyKAP9udqMtHSYDJ8O7vSKTRtiYcKORDfSH2+JgOiXfsmPUF
xRUYN+D0KWmTyJ9xXRPIr0QDx3e6RZ2EiMNt0NpbBW8TolxJVdq3Vk1kb2UV
KKcVaA4qJI7Rt/9jVP0nJm7ba6VtIKEkeLewWl+NJznK6VwKidD4a1Pcp7X4
weR11yBJIE+3KdfMqQ7tb5TcD4gJ9DUseUp663DhVTqHN0ZAbbUk6J5/PSa2
dApNhggwdqvNKgQ24Gr+rkvCVgI70giij9kEY7rq3XP5BMxPf2q6/6gJ87WR
gYo8Ai5UjRzOUhOmTOUz7mQQuNzpcHJfaDPoPT7WKTcIjFD4o+lhLeDznum+
ZRNI8GMPekS1IvRDmbL7MQKxHZ89Impb0TTdSU1wJRClH5Xsu9qKeYxTKpwI
sN5GOTGYbQgxjOicsCbgcZHTHun9BO9pZRb1VAIG3Jjau/YdaIym+WbKEei/
F5//QqUbmlU+L3c8mMTT9V9c8TjUjZlr2nZaBZNoO5PgRcR1g/jE5CllT8I9
zWZjiEwPRnKZLgM3JkF3s+26FNaDVOPXTYthkzAn7Gziz/bCokStK9l2EooL
P5sVO4uk9xhhcc/F2DhC9WIFiyDzSoE5JhJjU71GnGWyCLIreTZ6nWJoXiVG
nvWLQKVH8rMEYuhtD/9t7ZF+WDt6r9PJEMPy8P3H7u4DqG2lSOLdxAipkDdR
DhiCbYeluv7AS0wwhUYhnOco2C3SCX84gTePaY2stpdY+Vbrm7ZTL5Afk+1x
iiv9c2qASk3gEHYs3f8y9PYrLAxvj+7d1Iexcq0aM18J3mla0aqm29FlErxT
myVBy5TeYmVLOwS1zTfloiV4VkZr6chpx+12v+CBHAm02f4X93q044iYrxs0
LkFermeg4sgT9CrbJvF+eYM9lJGQt71taGYwfOSt5uCvTHNPFwnBX2rsn6PP
Ifa6/k5uhRC8cFXLQc85XJjpWUpKEYIdW/11zuU5UP0Z+ou/CrE/S7bPXCDd
m3Joy6MtENyJukmfn0PPPaeLNcwW/AeLBJGr
        "]], LineBox[CompressedData["
1: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
L1hDaw==
        "]], LineBox[CompressedData["
1:eJxTTMoPSmViYGBQB2IQzaLA9yuWjcGBAQrWsLpIVnIh+P8urA9fL4TgL0hv
vyKtjOBzVGecVlZH8Av6PA9payP49lu5N1gbI/j3mCZ0Rzsj+DLzZjjNTkbw
Z1xZuUFqCYI/wfFMj6QqI5zPl7/a6bAoE5y/z2XH3m1SzHD+39x4szA+Fjif
kf3STO2/CL6ZR9EhLwY2OP/XnTUvRD8h+C45Jyb4fkPwe38/tmj9heArSEl3
fmFih/Pdwzs1Lwsj+FMupmZNMEXw9Y7JveGqRPArQq2mONUi+AefhNpUNSL4
Icy9PS87Efxqh986J2Yh+Cd2Xc9t3YPgC3l9Ft17AMGPucm378sRBP/9d1e+
lLMIvpjplnVO9xD8hCPnw6oeIfgrg1//2/gMwbcpUvJXfI/gtzHafY/4jOBf
mBA5f8J3BF9KodT9xG8EP3n9hPf//yP4AG/Yfhk=
        "]], LineBox[{{2.000007473692602, 0.}, {2.000007473692602, 0.}}], 
       LineBox[{{0.9980867346938775, 0.1676251261099595}, {0.999992526307398, 
        0.16667040354089546`}}], 
       LineBox[{{-2.0019132653061225`, 0.}, {-2.000007473692602, 0.}}], 
       LineBox[{{-1.0019132653061225`, 
        0.16571186313839315`}, {-1.0000074736926021`, 0.16666292984829356`}}],
        LineBox[{{-0.0013624028037877885`, 
        0.666664811789673}, {-7.473692602040797*^-6, 0.6666666666108108}}], 
       LineBox[{{-1.0000074736926021`, 
        0.16666292984829356`}, {-0.999992526307398, 0.16667040354089546`}}], 
       LineBox[{{0.999992526307398, 0.16667040354089546`}, {
        1.0000074736926021`, 0.16666292984829356`}}], 
       LineBox[{{-7.473692602040797*^-6, 0.6666666666108108}, {
        7.473692602040836*^-6, 0.6666666666108108}}], 
       LineBox[{{2.000007473692602, 0.}, {2.000007473692602, 0.}}], 
       LineBox[{{-2.000007473692602, 0.}, {-1.9999925263073979`, 
        6.957519669716155*^-17}}]}}, {{}, {}, {}}},
    AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
    Axes->True,
    AxesOrigin->{0, 0},
    PlotRange->{All, All},
    PlotRangeClipping->True,
    PlotRangePadding->{Automatic, Automatic}], ",", 
   GraphicsBox[{{{}, {}, 
      {Hue[0.67, 0.6, 0.6], LineBox[CompressedData["
1:eJxTTMoPSmViYGAQBWIQnbx+wvv//9kPMECByG8pNes/CP4Rt6UxZT8QfLV7
O0+++YDgv+J5vPjmQwS/IMs0YvNhBL9O9daBtHYEf9Zs5Uln+RD8+fc78gM5
2eB8sQvB/pqirHD+iYBgl9OqLHC+h6ZqibISM5xvtS5m2Xl9Jjj/V1easJEm
I5z/9fuSqXHqDHB+VMf26XOUEfwDEqdm3pJH8Hss388Nk0Dwlaotl/lxIvgd
3D4relgR/IsR8lKvmRF8AKQITkw=
        "]], LineBox[CompressedData["
1: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
lVqerxsnxuFfEDJcPw==
        "]], LineBox[CompressedData["
1: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
        "]], LineBox[CompressedData["
1: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
O4VY
        "]], LineBox[CompressedData["
1:eJxlj2k41YkegKlMMaGLTqJu0eRapmSLYvx67EmLnRvTqXhUFCrHdi7jMJcs
DWWJUpYxIYl0hPDjlGM/jqRsLWKMtRHH4Wz//535fD+8z/u8H1+Nc8Eu/uuk
pKQu/cXfds/5lDSXvgglXQOU2+z3eL8ktckpewmyBKY6Ivpb3HD68oJMJA9s
YuW+3XqPi+rHPHYbxfHgegPFIC2Bi4bm4Eq9wQN/9wV5ymUuUtX/Ud+Qy4PU
csGctyUXm0afJQQ38IBTvPOa28s+pPmI1YdFPOjU8TAZ8eDgjG+KY0XMCoy8
85hZze5GDrXsoUsCH+IbsxXp0Wxk7Ik9vJLChw7lghkPTzaaTLn15tzmQ5uX
08wJIzbeC5RaHiviw/CjNO/suTYMpHlaBrTyIYRWI2H4tuGmVJnBaIIPtPwU
twG7V2j1/Oy6kohV6DS8YnFKn4X8SNMs+59WIe/IYFefAgvLLOS1ZxNX4TuL
jzFBX1pxC6vuuH7OKpwSj3pKHrfixx7F3HrmKqgWRvTS97ci/XOTPmdpFWLp
lu1Lxi3IlFfzXQ1aA8OVtZmwJ404pWf34Nr1NWCXUxI+0hpR1fHq+J/Ra/B6
RVMrzrIR6f/t8p9OXgN/p42MIM4LtCGjrgyXrkGMiLgzsdiArxdHY19MrgHj
bLm165F6/DKQXxTrI4A8p68pZrK1uHupc1J0XgBk9fie4ndMdNnC14oIFMBE
RctL29+YyHQ68SgkSgD7zzuqG9kwkd5G1Jy9I4DK/lSdSsYzlHt+ps36jQBC
a3tZe+VqUCtPY3qjkxBkH8C0mnUV5u4Nj9ByE0KHcUHfgkoVbq7u2WTrIwT3
DC97Gc4TXG4P12EECaFqMG3P5LYn2LLSe0mcKoRBg82budWP8bRz1MJirxAq
TL3yqUQ5pm8aWBo+KYLWyH2tfsISXJ+pHb/mKYLj+zkNP1eWIG1XjPI2qgg0
P7al6Z4vQd+DOsZuISK4Z9KAZO+vqOsXG8ZJFwHBrHUdKivGNtRbY/WLwHkD
aW4VVYhCWoLkkasY6ipz1ZdEeSg3yF6A02J4rp+jo5CWh2pGsh8GzolhR5Da
rOKuPDz0Z1qzKFQMe7c9ZbyyzcWIgJzYY+limDXRUlrKz0G+Z7n0XI8Y4rI1
yn+MzMRvaue/xrwRw3Bv1KdB1UykqOh/VhoTw50W707D+ttowq1hHZ4Tg/NQ
6dN88S287tAUnywrgWhuyoTpzQxcMuPK6NpJoKa9ky6qS8N1OUr8puMSUC02
OlygkoZKK25Tzu4SsF8p9dlyNRUNqofZkX4S2EkwuS6GKRiiM5HYyZDAoULv
MGpHEn7Zzpe9iBJI3Ndedd8xAYlwM6GYLYH7YdPNAlY8KryNmk3nSCDOeKvh
7h/icd8tsqvuvQTqKRn2fQcZGCQnm7pJLIH8ICX9WvgJ54TqCqVmBIw00j4d
PxmJFuxEpw9HCPCYDCpjBkTgzYzlZJWjBOhqMi+4JYTjAe3ujXHeBPiPm3cd
7ApDmnuU9L+jCKBc1tz+S9JVbN89BekMAg44lGVWskJRdd45hp1MAB5ifCMj
HYovGDoiw7sEQItb3mOVYJSqGuJ920gA5/rDHvUHF9El2sbI6hUBqrfeand5
XMBiu6rQiB4Cro6VhU5RAtDufeKXyTECalctOi9U+WFO6fL36r8TwO4Qv+Pc
OI/T184EOi8Q0MSmDhQFnsMUOdPpJgkBVke3pmc6UHFssEiLJ0PCp7vdRX6J
P+L+QgV/XQUS+ohnRPRNH+SaTo1n/5OErNdUK8s+L6T4Z40GAwlXnuwQbFF3
wYAD0mq/2ZNgmyhlp3fnFNaJgrzGTpLwJtR7yMrpBJ6+ZTPoQCVh0aUxyWrG
ASt8q5RjL5BA6WfPu1+yQ0J7hwszhISMdefWa8jbYAEuczTiSJiXzkpvDAZc
Sj4j73WDhOo8/YWCWHO09ug+djODBP27c5W816aYqWGa/CqXhD/WdQ4+v2iM
U/NFHcJCEuj97WdnrQ3QtE5ho0E5CVRFbonqy+8xKT7KNuApCT84urqY//wv
HDkxFZ/fQMJ61+2dFhxN1FNzYQ2wSHjqbqNy2GIn0n9vkpLr/uuvaFS3bmYr
cqp04MgACeqUr4/+OKqIu+hZ/6GNkvDdnoN6I6MbMMReurFiggTRwOaHvygJ
mllKl4Wf50hQK028zXKYaVb+MGS2nUeCspat8Ndn/c1+ZTbhJ8UkmD908h0/
dPf/+n/TTpiH
        "]], LineBox[CompressedData["
1:eJxTTMoPSmViYGBQB2IQzaLA9yuWjcGBAQrWsLpIVnIh+P8urA9fL4TgL0hv
vyKtjOBzVGecVlZH8Av6PA9payP49lu5N1gbI/j3mCZ0Rzsj+DLzZjjNTkbw
Z1xZuUFqCYI/wfFMj6QqI5zPl7/a6bAoE5y/z2XH3m1SzHD+39x4szA+Fjif
kf3STO2/CL6ZR9EhLwY2OP/XnTUvRD8h+C45Jyb4fkPwe38/tmj9heArSEl3
fmFih/Pdwzs1Lwsj+FMupmZNMEXw9Y7JveGqRPArQq2mONUi+AefhNpUNSL4
Icy9PS87Efxqh986J2Yh+Cd2Xc9t3YPgC3l9Ft17AMGPucm378sRBP/9d1e+
lLMIvpjplnVO9xD8hCPnw6oeIfgrg1//2/gMwbcpUvJXfI/gtzHafY/4jOBf
mBA5f8J3BF9KodT9xG8EP3n9hPf//yP4AG/Yfhk=
        "]], 
       LineBox[{{0.9980867346938775, -0.501907774429925}, {
        0.999992526307398, -0.500007473608818}}], 
       LineBox[{{-1.0019132653061225`, 
        0.49808856498594334`}, {-1.0000074736926021`, 0.4999925263353259}}], 
       LineBox[{{2.000007473692602, 0.}, {2.000007473692602, 0.}}], 
       LineBox[{{0.999992526307398, -0.500007473608818}, {
        1., -0.499999999972072}}], 
       LineBox[{{-2.0019132653061225`, 0.}, {-1.9980867346938775`, 
        1.8302920658059315`*^-6}}], 
       LineBox[{{-0.9999999708058883, 
        0.5000000291941102}, {-0.9999999708058883, 0.5000000291941102}}], 
       LineBox[{{-0.9999999708058883, 
        0.5000000291941102}, {-0.9999999708058883, 0.5000000291941102}}], 
       LineBox[{{-0.0019132653061224483`, 
        0.0038210397360474786`}, {-7.473692602040799*^-6, 
        0.000014947301419959934`}}], 
       LineBox[{{-7.473692602040799*^-6, 0.000014947301419959934`}, {
        7.611702193862236*^-23, 6.939725807139084*^-22}}], 
       LineBox[{{2.000007473692602, 0.}, {2.000007473692602, 
        0.}}]}}, {{}, {}, {}}},
    AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
    Axes->True,
    AxesOrigin->{0, 0},
    PlotRange->{All, All},
    PlotRangeClipping->True,
    PlotRangePadding->{Automatic, Automatic}], ",", 
   GraphicsBox[{{{}, {}, 
      {Hue[0.67, 0.6, 0.6], LineBox[CompressedData["
1:eJxTTMoPSmViYGBQAGIQnbx+wvv//9kPMECByG8pNes/CP4Rt6UxZT8QfLV7
O0+++YDgv+J5vPjmQwS/IMs0YvNhBL9O9daBtHYEf9Zs5Uln+RD8+fc78gM5
2eB8sQvB/pqirHD+iYBgl9OqLHC+h6ZqibISM5xvtS5m2Xl9Jjj/V1easJEm
I5y/riX/qJYqgp9UV1GurIjgnyrsui0iieDPili3+DsHgm+p9s147wsGOL/i
YGuIxwoEX2d3H5vjEgT/wZbpOywXIPgeK1bKaM9A8MX7zz7h7UDwt8WIll5O
R/C/fl8yNU4dwY/q2D59jjKCf0Di1Mxb8gh+j+X7uWESCL5SteUyP04Ev4Pb
Z0UPK4J/MUJe6jUzgg8Aid119w==
        "]], LineBox[CompressedData["
1:eJwBcQOO/CFib1JlAgAAADYAAAACAAAAXk7Byyn4/78AiMb60FhfP3J5B12N
9P+/ABwN8UXlZj8+mixhCe3/vwDCZdOe9nI/CbtRZYXl/78A90Sumnp6P6D8
m2191v+/ALABMknBhD9sHcFx+c7/vwBKcR9Hg4g/Nz7mdXXH/7+A5OAMRUWM
P85/MH5tuP+/gAzgc6DkkT/8AsWOXZr/vwBBv06caJk/Vwnurz1e/78g1T4C
SjikPyIqE7S5Vv+/wLuafckopT/uSji4NU//v0Ci9vhIGaY/hIyCwC1A/7+A
b67vR/qnP7IPF9EdIv+/wAke3UW8qz8OFkDy/eX+vyCf/tsgoLE/xCKSNL5t
/r/A0922HCS5P07WjeqXZf6/IJsiV4GmuT/YiYmgcV3+v4BiZ/flKLo/7PCA
DCVN/r9A8fA3ry27PxO/b+SLLP6/0A4EuUE3vT9iW02UWev9v/AklV0zpcA/
AJQI9PRo/b8AYLtfWLjEPzsFf7MrZPy/KNYHZKLezD+UQDc3QX36v7D9IiP7
CtY/Y5xY5eqf+L90jp1qVIDdP8+nHgkBmva/YrDC7f3L4j8eDLAxv7b0v8Tn
n5yBkuY/CiDmz+mq8r/svzNgLKrqP9ycCMvgovK/SMbuaT666j+tGSvG15ry
v6bMqXNQyuo/UBNwvMWK8r9g2R+HdOrqP5YG+qihavK/1PILrrwq6z8i7Q2C
WSryv7wl5PtMq+s/O7o1NMmp8b+Ki5SXbazsPww3WC/AofG/6JFPoX+87D/e
s3oqt5nxv0SYCquRzOw/gq2/IKWJ8b/8pIC+tezsP8igSQ2BafG/cL5s5f0s
7T9Uh13mOCnxv1jxRDOOre0/bFSFmKio8L8oV/XOrq7uP6H+ujMqofC/vgKK
mKu97j/WqPDOq5nwv1SuHmKozO4/QP1bBa+K8L+ABUj1oeruPxSmMnK1bPC/
2LOaG5Um7z9JUGgNN2Xwv25fL+WRNe8/fvqdqLhd8L8EC8SujkTvP+hOCd+7
TvC/MGLtQYhi7z+9999LwjDwv4YQQGh7nu8/8qEV50Mp8L8cvNQxeK3vPydM
S4LFIfC/smdp+3S87z9c9oAdRxrwv0gT/sRxy+8/kaC2uMgS8L/evpKObtrv
P8ZK7FNKC/C/dGonWGvp7z+isT401gfwv7ycgpdT8O8/VQDcKw==
        "]], LineBox[CompressedData["
1:eJwBYQOe/CFib1JlAgAAADUAAAACAAAAvJyCl1Pw77801ofG+tDvP8uSGkue
6e+/YLhP4dq87z8254WBodrvv6C1kYTkj+8/oDvxt6TL77/gstMn7mLvP3Tk
xySrre+/XK1XbgEJ7z8cNnX+t3Hvv1SiX/snVe4/horgNLti77+Qn6GeMSju
P/DeS2u+U++/0JzjQTv77T/EhyLYxDXvv0yXZ4hOoe0/bdnPsdH57r9IjG8V
de3sP758KmXrge6/OHZ/L8KF6z9gw9/LHpLtvyBKn2Nctug/Rz34Zd2B7b/U
t+gxmIXoPy63EACcce2/iCUyANRU6D/8qkE0GVHtv/QAxZxL8+c/mJKjnBMQ
7b/It+rVOjDnP9BhZ20Ijuy/cCU2SBmq5T9BAO8O8onrv8QAzSzWneI/Ij3+
UcWB6b/QbvXrnwrZP6los+G7tuW/wJ+jUTpDoj9q87Fci5rhv4RL1NO7YNa/
Ln4FWQYj27+8wnd6dkvnvxN51AuWm9O/MqUgd09L8b/XZGwqr+PGvzBaF1Ce
ave/vt1QN7amxr/ZrEGre4H3v6ZWNUS9aca/gv9rBlmY9790SP5dy+/Fv9Sk
wLwTxve/ECyQkef7xL9672kpiSH4v0nzs/gfFMO/xIS8AnTY+L91A/eNIYm+
v1qvYbVJRvq/RPW/py8Pvr8DAowQJ136vxLniME9lb2/rFS2awR0+r+uyhr1
WaG8vwD6CiK/ofq/5pE+XJK5ur+lRLSONP36v1gghioD6ra/8NkGaB+0+793
eiqOyZWuv4UErBr1If2/Tu7w1q+mrb+padmDXzj9vyZitx+Wt6y/zM4G7clO
/b/VSUSxYtmqvxSZYb+ee/2/Mxle1Pscp7+jLRdkSNX9v95vIzVcSJ+/wlaC
rZuI/r+NV7DGKGqdv+W7rxYGn/6/PD89WPWLm78JId1/cLX+v5oOV3uOz5e/
Ues3UkXi/r9WrYrBwFaQv+B/7fbuO/+/CiovphrxjL8E5RpgWVL/v2j5SMmz
NIm/KEpIycNo/78jmHwP5ruBv28Uo5uYlf+/As8sZf7+e7+TedAEA6z/v71t
YKswhnS/t979bW3C/7/xGCjjxRpqv9tDK9fX2P+/0Kwe31RSVr/+qFhAQu//
v9CsHt9UUla//qhYQELv/79Gf+Tm
        "]], LineBox[CompressedData["
1:eJwBgQN+/CFib1JlAgAAADcAAAACAAAAqS6idwy6Yj+6jEzt6OP/v5l4nfXT
1XA/licfhH7N/7/d2WmvoU54P3LC8RoUt/+/Ijs2aW/Hfz9PXcSxqaD/vzNO
gZEeoIM/K/iWSD+K/793r01L7BiLP+MtPHZqXf+/GuAzKFPVjj+/yA4NAEf/
v14IjQLdSJE/nGPho5Uw/78AOXPfQwWVP1SZhtHAA/+/RJo/mRF+nD/FBNEs
F6r+v6qPOECkMK0/iLL6mXBD/b8ExJ+8BzSuP6AFUUYfK/2/X/gGOWs3rz+3
WKfyzRL9v4qw6hgZn7A/5v5TSyvi/L8+GbkR4KWyP0RLrfzlgPy/pupVA26z
tj8B5F9fW777v3iNj+aJzr4/ehXFJEY5+r+OaYHWYILHP2t4j68bL/e/DfRM
O6xR0z/2SIbTvoLxv+B0xjR2hNs/sFDWsE655r/uuU3Cd8jhP2ykLXIxTdW/
poehYGSJ5T8A3pI8pIWTPyX2qxN4m+k/4MQHdtCk2T8YxVEiq6rpP5Ce6s0C
ANo/CpT3MN656T9AeM0lNVvaP/AxQ05E2Ok/oCuT1ZkR2z+8bdqIEBXqP2iS
HjVjftw/VOUI/qiO6j/4XzX09VffP4LUZejZges/iH0xuY2F4j91owv3DJHr
P2DqIuUms+I/aHKxBUCg6z84VxQRwODiP04Q/SKmvus/6DD3aPI74z8ZTJRd
cvvrP0zkvBhX8uM/sMPC0gp17D8QS0h4IF/lP96yH707aO0/mBhfN7M46D/N
OHIqInftP2iqVn9mZeg/vL7ElwiG7T80PE7HGZLoP5vKaXLVo+0/0F89V4Dr
6D9Y4rMnb9/tPwinG3dNnuk/0RFIkqJW7j90Ndi25wPrP8CXmv+IZe4/QMfP
/pow6z+wHe1sb3TuPxBZx0ZOXes/jimSRzyS7j+ofLbWtLbrP0pB3PzVze4/
4MOU9oFp7D/EcHBnCUXvP0xSUTYcz+0/s/bC1O9T7z8Y5Eh+z/vtP6J8FULW
Yu8/6HVAxoIo7j+BiLoco4DvP4SZL1bpge4/cA4NiomP7z9QKyeenK7uP2CU
X/dvnu8/IL0e5k/b7j8+oATSPLzvP7jgDXa2NO8/LSZXPyPL7z+IcgW+aWHv
PxysqawJ2u8/VAT9BR2O7z8MMvwZ8OjvPySW9E3Quu8/vJyCl1Pw7z801ofG
+tDvP2FHyyw=
        "]], LineBox[CompressedData["
1:eJxlzn9MjAEYB/A3y9rKNStDWc0RIpszpmat7+mOwqV0qpOsZjijlCE5Wcr5
VTnJdMp1+jF15+elcNTNdlp+nFKOpE47nLpVd+/bdSqn7rz+9sezZ59993z3
MPdkxu+bQRDEKnr+7ZqGiLXdHhRaZAVSPkXC8u23qsuTwtLwWfKUIRKmoNpB
rg+FsCfPWNl9JAxCXqDaj0I0S/jyyjsSH+/82hHCpCC4MydRqSGhs8iL5MEU
DgZpzdoHJJ4fHZ0Uh1Ionh/gPV5C4kZemX57AoVOQi9ISSCRIDVeHC6hkNgV
YQ3ut0IS1chwK6dgyio3Tbdb8XriXOncagpZs+29HzRWrBeEyDY00H2xyle5
lVYE+mU/lHZRaG33re5MscJc4dXN8RkF662Zn9NngUi+brHs2ihmvSx99qpn
BPLbxRpemQ2tTQPi/fohuO/KsMw8acfk5iVL7IxBdKQp6+PF49gbcV+VPPEd
jxn+uyfSJ7HyjbRoEa8fSyuYZg+eAwekJ1ON77vhyBZP3+VPgRVt8K3a045h
xwJvRZgTcdvZgXnHWxDedoHXz3aCLTsbusDWDMnVscI5m51YONgW9/RwM1jB
Oo/8nU4Qp2POksLnyE4QuSWLnKhSJJtTk9UgVD12rxY6J44/YqMJ8ae4ayJb
nTBuUesMzY2o3aQ6kvPOic7rf0w5YY3Y9PWC1WSg70MK5jWsfoQiz1CzZpr+
J+lKLjNIhbn7rvdlwgX2bv5ldx8FhCw3/7ooFxaOfXkR7lUP9Z90gSHWBeJS
mu2Yex12lXI/Rae5UNWUkfRzvBZVL8Y6mPl0Pn82p/jpLdgKUxmCSy6c4QQo
ppSV4CTqtkqu0v2ZKxgZspsYGKl57aim8zbu55h8KUL847V6Le0hW3dgmQS5
PzWEp47ui2RUu0SF6FAtB1tPu3zZIWPqeWRFubXc+0G7RO3k8HOh9clwfB+m
HWEpnRlwDL79PWF+dtq9nG2SdiH2KrknYqdoG5t6N4pj/vNf3EyD6g==
        "]], LineBox[CompressedData["
1:eJxTTMoPSmViYGBQB2IQzaLA9yuWjcGBAQrWsLpIVnIh+P8urA9fL4TgL0hv
vyKtjOBzVGecVlZH8Av6PA9payP49lu5N1gbI/j3mCZ0Rzsj+DLzZjjNTkbw
Z1xZuUFqCYI/wfFMj6QqI5zPl7/a6bAoE5y/z2XH3m1SzHD+39x4szA+Fjif
kf3STO2/CL6ZR9EhLwY2OP/XnTUvRD8h+C45Jyb4fkPwe38/tmj9heArSEl3
fmFih/Pdwzs1Lwsj+FMupmZNMEXw9Y7JveGqRPArQq2mONUi+AefhNpUNSL4
Icy9PS87Efxqh986J2Yh+Cd2Xc9t3YPgC3l9Ft17AMGPucm378sRBP/9d1e+
lLMIvpjplnVO9xD8hCPnw6oeIfgrg1//2/gMwbcpUvJXfI/gtzHafY/4jOBf
mBA5f8J3BF9KodT9xG8EP3n9hPf//yP4AG/Yfhk=
        "]], 
       LineBox[{{-0.0013624028037877885`, -1.9959127915886365`}, \
{-7.473692602040797*^-6, -1.9999775789221939`}}], 
       LineBox[{{0.9980867346938775, 0.9942602040816326}, {0.999992526307398, 
        0.9999775789221941}}], 
       LineBox[{{-1.0019132653061225`, 
        0.9980867346938775}, {-1.0000074736926021`, 0.9999925263073979}}], 
       LineBox[{{2.9194111726721938`*^-8, -1.9999999124176648`}, {
        2.9194111726721938`*^-8, -1.9999999124176648`}}], 
       LineBox[{{2.000007473692602, 0.}, {2.000007473692602, 0.}}], 
       LineBox[{{0.999992526307398, 0.9999775789221941}, {1., 
        0.999985052614796}}], 
       LineBox[{{-2.0019132653061225`, 0.}, {-2.000007473692602, 0.}}], 
       LineBox[{{-1.0000074736926021`, 
        0.9999925263073979}, {-0.999992526307398, 0.9999775789221941}}], 
       LineBox[{{2.9194111726721938`*^-8, -1.9999999124176648`}, {
        2.9194111726721938`*^-8, -1.9999999124176648`}}], 
       LineBox[{{2.000007473692602, 0.}, {2.000007473692602, 0.}}], 
       LineBox[{{-2.000007473692602, 0.}, {-1.9999925263073979`, 
        7.473692602122384*^-6}}]}}, {{}, {}, {}}},
    AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
    Axes->True,
    AxesOrigin->{0, 0},
    PlotRange->{All, All},
    PlotRangeClipping->True,
    PlotRangePadding->{Automatic, Automatic}], ",", 
   GraphicsBox[{{{}, {}, 
      {Hue[0.67, 0.6, 0.6], LineBox[CompressedData["
1:eJxTTMoPSmViYGBQA2IQnbx+wvv//9kPMECByG8pNes/CP4Rt6UxZT8QfLV7
O0+++YDgv+J5vPjmQwS/IMs0YvNhBL9O9daBtHYEf9Zs5Uln+RD8+fc78gM5
2eB8sQvB/pqirHD+iYBgl9OqLHC+h6ZqibISM5xvtS5m2Xl9Jjj/V1easJEm
I5y/riX/qJYqgp9UV1GurIjgnyrsui0iieDPili3+DsHgm+p9s147wsGOL/i
YGuIxwoEX2d3H5vjEgT/wZbpOywXIPgeK1bKaM9A8MX7zz7h7UDwt8WIll5O
R/CzwuTUzyQj+HIB6jePxCP4bc6WttvCEfwwrVjWme4I/tfvS6bGqSP4UR3b
p89RRvAPSJyaeUsewe+xfD83TALB/3SSccEUEQQ/PEpk0SUBBF+p2nKZHyeC
38Hts6KHFcG/GCEv9ZoZwQcA/sSInQ==
        "]], LineBox[CompressedData["
1:eJxTTMoPSmViYGAQB2IQHed38LTmj//7GcDgg31RJXts7xcEn3N3YGrrUwR/
wZ/ZubXXEPw/TEf7Ymch+OGc79bbxiH4fGIOn/4+/QfnH1GaZLIvF8FnmMLx
5UvGXzjfmrV+s3bKHzh/ioO5uWPtLzg/eU7E01fzf8D555fLcTLO+gbny/Fs
MNy/7Qucz6Xw7PzLVZ8Q5u8yNTm58iOcnxPSOmPFig9wvsgyo6KtOQj+3u/3
vQ8ZIPjqPt5NRxUR/IkLtu04IYTgH/N6E+zFjeAv2mhnco0dwQcAvQeHZQ==

        "]], 
       LineBox[{{-0.9980867346938775, -3.}, {-0.9972678629752293, -3.}, \
{-0.9899497717261867, -3.}, {-0.982631680477144, -3.}, {-0.9533593154809734, \
-3.}, {-0.9240869504848028, -3.}, {-0.8605890552207783, -3.}, \
{-0.7970911599567538, -3.}, {-0.6785563858241136, -3.}, {-0.5501152811481067, \
-3.}, {-0.42401274388791677`, -3.}, {-0.30637122302313563`, -3.}, \
{-0.17882337161498782`, -3.}, {-0.11927995410861832`, -3.}, \
{-0.059736536602248806`, -3.}, {-0.0305494697030183, -3.}, \
{-0.001913265306122449, -3.}}], LineBox[CompressedData["
1:eJxTTMoPSmViYGCQBGIQfa392K8LEfH2DGDA4bBSb1E5z64kOH9mxdyvl68W
wPl3b2auX+hXAecb+zVOlFvQDOeXr/f1fiPRDeczWBbfd2adCue7zLKfKVg3
B85P08tpu7Z9KZy/qt/CYYnBWji/orf/Wee5fXB+X2bjtYSm43A+7xcf6zWB
l+H8ByXHTMpabsP573b6Hio/8RDOX9a+MCGl8ymcr/pttXDF7JdwftOV1Bc3
G1/D+fc2ye+1zngL518U9Ji0KOwdnH+koCCd0/U9nN/YsUtmcQOCb7eA5ZLN
HgRfZs3KNZy3EPw9c5qmB39A8AH6jG6O
        "]], LineBox[CompressedData["
1:eJxTTMoPSmViYGCQAGIQvWijnck19g/2DGDwYf/bhz83XORC8J+oLH7uIoTg
30n3kdshieDPqJ92OTAUwQ+d/qDj9QQEv2qemfKcyR/h/HlLe/b6TPsE57NE
575lrfwC559LWLk8qOUbnL+VVyr2e84POF9tluILdp9fcP6vspa/q4P/wPmf
LC6warn9hfNf/5LmW2HxD85n2HDjC/ceBF8sdertfPv/cP6C/Z/PKTYi+NpS
QYcuH0Lwz23QtHe4jOAXuDPuWfMYwT8klPvr0WsEX/jeDQvJLwh+nN/B05o/
EHwAZiiRRQ==
        "]], LineBox[CompressedData["
1:eJxTTMoPSmViYGDQAGIQfTFCXuo1M4MDAxSwKPD9imVD8NewukhWciH4/y6s
D18vhOAvSG+/Iq2M4HNUZ5xWVkfwC/o8D2lrI/j2W7k3WBsj+PeYJnRHOyP4
MvNmOM1ORvBnXFm5QWoJgj/B8UyPpCojnM+Xv9rpsCgTnL/PZcfebVLMcP7f
3HizMD4WOJ+R/dJM7b8IvplH0SEvBjY4/9edNS9EPyH4LjknJvh+Q/B7fz+2
aP2F4CtISXd+YWKH893DOzUvCyP4Uy6mZk0wRfD1jsm94apE8CtCraY41SL4
B5+E2lQ1IvghzL09LzsR/GqH3zonZiH4J3Zdz23dg+ALeX0W3XsAwY+5ybfv
yxEE//13V76Uswi+mOmWdU73EPyEI+fDqh4h+CuDX//b+AzBtylS8ld8j+C3
Mdp9j/iM4F+YEDl/wncEX0qh1P3EbwQ/ef2E9///I/gA8auAqg==
        "]], 
       LineBox[{{-0.001913265306122449, -3.}, {-7.473692602040797*^-6, -3.}}],
        LineBox[{{-1.0019132653061225`, 1.}, {-1.0000074736926021`, 1.}}], 
       LineBox[{{0.9980867346938775, 3.}, {0.999992526307398, 3.}}], 
       LineBox[{{1.9980867346938775`, -1.}, {1.9999925263073979`, -1.}}], 
       LineBox[{{-2.0019132653061225`, 0.}, {-2.000007473692602, 0.}}], 
       LineBox[{{-1.0000074736926021`, 1.}, {-0.999992526307398, -3.}}], 
       LineBox[{{-7.473692602040797*^-6, -3.}, {7.473692602040836*^-6, 3.}}], 
       LineBox[{{0.999992526307398, 3.}, {1.0000074736926021`, -1.}}], 
       LineBox[{{1.9999925263073979`, -1.}, {1.9999999708058882`, -1.}}], 
       LineBox[{{-2.000007473692602, 0.}, {-1.9999925263073979`, 1.}}], 
       LineBox[{{1.9999999708058882`, -1.}, {2.0000000291941116`, 
        0.}}]}}, {{}, {}, {}}},
    AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
    Axes->True,
    AxesOrigin->{0, 0},
    PlotRange->{All, All},
    PlotRangeClipping->True,
    PlotRangePadding->{Automatic, Automatic}], ",", 
   GraphicsBox[{{{}, {}, 
      {Hue[0.67, 0.6, 0.6], LineBox[CompressedData["
1:eJxTTMoPSmViYGAQBWIQnbx+wvv//9kPMECByG8pNes/CP4Rt6UxZT8QfLV7
O0+++YDgv+J5vPjmQwS/IMs0YvNhBL9O9daBtHYEf9Zs5Uln+RD8+fc78gM5
2eB8sQvB/pqirHD+iYBgl9OqLHC+h6ZqibISM5xvtS5m2Xl9Jjj/V1easJEm
I5z/9fuSqXHqDHB+VMf26XOUEfwDEqdm3pJH8Hss388Nk0Dwlaotl/lxIvgd
3D4relgR/IsR8lKvmRF8AKQITkw=
        "]], LineBox[CompressedData["
1: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
        "]], LineBox[CompressedData["
1:eJwB0QIu/SFib1JlAgAAACwAAAACAAAAHDZ1/rdx77+wqwZuv9qmP4aK4DS7
Yu+/iMJHIfIEpz/w3ktrvlPvv8QdgRRfL6c/xIci2MQ177+wO0mA6ISnP23Z
z7HR+e6/FFj8wr4yqD++fCpl64Huv2Th07Cimak/YMPfyx6S7b/cHDLlhpWs
P0c9+GXdge2/YDZe/JXLrD8utxAAnHHtv2zttjnwAa0//KpBNBlR7b+wQXTz
hm+tP5iSo5wTEO2/9Dhp5EJOrj/QYWdtCI7sv3ire7sPDbA/QQDvDvKJ6788
6GcdVvaxPyh6B6mweeu/4EMvzj0Wsj8Q9B9Db2nrv5TyqOJNNrI/3udQd+xI
67/mbGSD53ayP3rPst/mB+u/UPyjsQL6sj+ynnaw24Xqv/RduYboB7Q/Ij3+
UcWB6b862wXC5UK2P9ARPSyZcum/C5RYd4Fltj9+5nsGbWPpv8S9Vh1CiLY/
2o/5uhRF6b/opvpkMs62P5Pi9CNkCOm/XhTo/c9btz8EiOv1Ao/ov9gLOK8H
frg/5tLYmUCc579Dsurgo966P6los+G7tuW/sbqMV/MIwD/UYp8fS6blv+BH
oV7UIMA/AF2LXdqV5b/NSJjqyzjAP1ZRY9n4dOW/72Dskv5owD8COhPRNTPl
v8jPiStyysA/WgtzwK+v5L+eibdXkpHBPwquMp+jqOO/GuQ4+K8wwz9q87Fc
i5rhvyZYXXPTscY/mTbxO2eK4b8YLoPWvs7GP8h5MBtDeuG/DB4UQL/rxj8l
AK/Z+lnhv+egzw7/Jcc/4AysVmoZ4b9qeKfveZvHP1UmplBJmOC/wuIbFVeK
yD+BsjSJDizfv6iDF4h8d8o/Ln4FWQYj278n2ZxFj43OPxN51AuWm9O/JjuN
DZ540z/XZGwqr+PGv9s5UVvoe9g/d3oqjsmVrr/Svdfjp3TdP9OHxvrQWF+/
5xLaIRrr3z+8RoJV
        "]], LineBox[CompressedData["
1:eJwBYQOe/CFib1JlAgAAADUAAAACAAAAqo84QKQwrT8rSEho3TbhP45pgdZg
gsc/K3cmWk/b4z8N9Ew7rFHTP+Um5anzLeY/4HTGNHaE2z+mpxhkGnboP9zI
BRqopNs/0xKzSH1+6D/YHEX/2cTbP9rIonLbhug/0MTDyT0F3D+Z/RqLiZfo
P8AUwV4Fhtw/zCX1f6y46D+ftLuIlIfdP8Q6sRkL+ug/XvSw3LKK3z9wbQ1T
GXnpP+65TcJ3yOE/BC5oNwBo6j8lCcd0e9fhP4o6hjGnbuo/XFhAJ3/m4T+x
0omZSXXqP8r2MoyGBOI/a6X7roCC6j+lMxhWlUDiP/JepNK3nOo/XK3i6bK4
4j//wCIlSdDqP8qgdxHuqOM///DcK/Iz6z+mh6FgZInlPyMp4Kw+7es/YLFt
r6yZ5T+e7qsSMvPrPxrbOf70qeU/rCG68h/56z+OLtKbhcrlPyQoHSLrBOw/
dtUC16YL5j+PeOFCPxzsP0YjZE3pjeY/iqSeyN5J7D/mviY6bpLnPxfhnRj+
oOw/oOjyiLai5z8VmvV9QabsP1oSv9f+suc/LsnObX+r7D/OZVd1j9PnP2iQ
vPDqtew/tgyIsLAU6D93Tu+egMrsP4Za6Sbzlug/AlIbjafy7D8l9qsTeJvp
P8eMsoXsPu0/GMVRIquq6T+Khm2ENUPtPwqU9zDeuek/E8nf5XlH7T/wMUNO
RNjpP5VVi9b0T+0/vG3aiBAV6j+IaniXs2DtP1TlCP6ojuo/mveB61WB7T+C
1GXo2YHrP6lflns5v+0/daML9wyR6z8ijJrn8cLtP2hysQVAoOs/k/Cv7KXG
7T9OEP0ipr7rP3QBIcoAzu0/GUyUXXL76z/7RbALgtztP7DDwtIKdew/RPIr
hrT47T/esh+9O2jtP+y+ZD7pLe4/zThyKiJ37T/iO/UKCTHuP7y+xJcIhu0/
skuB4yQ07j+bymly1aPtP6ujc8JQOu4/WOKzJ2/f7T/wZxJ+eUbuP9ERSJKi
Vu4/2nOQLRFe7j/EcHBnCUXvPyrEOWVsiu4/s/bC1O9T7z+wgp3SEo3uP6J8
FULWYu8/cPrSo7WP7j+BiLoco4DvP/My3H3wlO4/PqAE0jy87z+FSYRmO5/u
P7ycgpdT8O8/PNukAgyo7j8CIsk+
        "]], LineBox[CompressedData["
1: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

        "]], 
       LineBox[{{2.0171429256269704`, 1.}, {2.0801290323093546`, 1.}, {
        2.143115138991739, 1.}, {2.2606263359610983`, 1.}, {
        2.3880438634738246`, 1.}, {2.5070003745911422`, 1.}, {
        2.623618318292643, 1.}, {2.75014259253751, 1.}, {2.8682058503869685`, 
        1.}, {2.9341028639689943`, 1.}, {2.9999998775510206`, 1.}}], 
       LineBox[{{1.9980867346938775`, 0.9999999999994417}, {
        1.9999925263073979`, 1.}}], 
       LineBox[{{-2.0019132653061225`, 0.}, {-2.000007473692602, 0.}}], 
       LineBox[{{-1.0019132653061225`, 
        0.04134870309495938}, {-1.0000074736926021`, 0.041665421065196925`}}],
        LineBox[{{-0.0019132653061224483`, 
        0.4987244921287996}, {-7.473692602040799*^-6, 0.4999950175382655}}], 
       LineBox[{{-1.0000074736926021`, 
        0.041665421065196925`}, {-0.999992526307398, 0.0416679122960644}}], 
       LineBox[{{0.9980867346938775, 0.9580135394706768}, {0.999992526307398, 
        0.9583320877039356}}], 
       LineBox[{{1.9999925263073979`, 1.}, {2.000007473692602, 1.}}], 
       LineBox[{{-7.473692602040799*^-6, 0.4999950175382655}, {
        7.473692602040838*^-6, 0.5000049824617346}}], 
       LineBox[{{0.999992526307398, 0.9583320877039356}, {1.0000074736926021`,
         0.9583345789348031}}], 
       LineBox[{{-2.000007473692602, 0.}, {-1.9999925263073979`, 
        1.2999590821169652`*^-22}}]}}, {{}, {}, {}}},
    AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
    Axes->True,
    AxesOrigin->{0, 0},
    PlotRange->{All, All},
    PlotRangeClipping->True,
    PlotRangePadding->{Automatic, Automatic}]}], "}"}]], "Output",
 CellChangeTimes->{{3.527335176353901*^9, 3.5273352084226184`*^9}}]
}, Open  ]],

Cell[TextData[{
 "\n(c) Finally, compute the definite integral of the B-spline from ",
 StyleBox["x",
  FontSlant->"Italic"],
 " = -3 to +3."
}], "Text",
 CellChangeTimes->{{3.434315669758529*^9, 3.4343156705241737`*^9}, {
  3.434315957328391*^9, 3.4343159676567802`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Integrate", "[", 
  RowBox[{"myfuncfor4", ",", 
   RowBox[{"{", 
    RowBox[{"x", ",", 
     RowBox[{"-", "3"}], ",", "3"}], "}"}]}], "]"}]], "Input",
 CellChangeTimes->{
  3.4344330346566114`*^9, {3.4904395364376*^9, 3.4904395433328*^9}, 
   3.4976905908492002`*^9, {3.527335218112231*^9, 3.527335229151789*^9}}],

Cell[BoxData["1"], "Output",
 CellChangeTimes->{3.5273352297317657`*^9}]
}, Open  ]]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Conditional decisions (25 min)", "Section",
 CellChangeTimes->{{3.4342295101381235`*^9, 3.434229511356905*^9}, {
  3.434229686033252*^9, 3.434229690595868*^9}, {3.434234596219349*^9, 
  3.434234600343398*^9}, {3.434309973518959*^9, 3.434309975847144*^9}, {
  3.4343100093011255`*^9, 3.434310009598008*^9}, {3.4343201819990396`*^9, 
  3.4343201874991803`*^9}, {3.434374248334386*^9, 3.434374283908044*^9}, {
  3.434397972237877*^9, 3.434397972925394*^9}, {3.4344314403181496`*^9, 
  3.4344314404586935`*^9}, {3.523731173627965*^9, 3.523731174988101*^9}}],

Cell[TextData[{
 "The conditionals addressed here must decide amongst multiple outputs based \
on a logical test against the input.  ",
 StyleBox[ButtonBox["If",
  BaseStyle->"Link",
  ButtonData->"paclet://ref/If"],
  FontWeight->"Bold"],
 " selects between two possible outputs based on a single logical (i.e. ",
 StyleBox["True",
  FontWeight->"Bold"],
 "/",
 StyleBox["False",
  FontWeight->"Bold"],
 ") input.  ",
 StyleBox[ButtonBox["Which",
  BaseStyle->"Link",
  ButtonData->"paclet://ref/Which"],
  FontWeight->"Bold"],
 " evaluates multiple logical inputs, but only returns the output \
corresponding to the first ",
 StyleBox["True",
  FontWeight->"Bold"],
 " input.  ",
 StyleBox[ButtonBox["Switch",
  BaseStyle->"Link",
  ButtonData->"paclet://ref/Switch"],
  FontWeight->"Bold"],
 " compares an expression against multiple patterns, but only returns the \
output corresponding to the first pattern that matches the expression.  The \
DC guide on ",
 StyleBox[ButtonBox["Conditionals",
  BaseStyle->"Link",
  ButtonData->"paclet://guide/Conditionals"],
  FontWeight->"Bold"],
 " may prove to be a useful reference."
}], "Text",
 CellChangeTimes->{{3.4342297023461695`*^9, 3.4342297722073326`*^9}, {
  3.43430699966158*^9, 3.4343070059273663`*^9}, {3.4344314925380535`*^9, 
  3.43443150684231*^9}, {3.434432019715*^9, 3.434432026136547*^9}, {
  3.4344320633846397`*^9, 3.434432615523532*^9}}],

Cell[CellGroupData[{

Cell["(#5) \"If\" (15 min)", "Subsection",
 CellChangeTimes->{{3.433702366555286*^9, 3.4337023698522453`*^9}, {
   3.43370288975618*^9, 3.4337028928031325`*^9}, {3.43370573731345*^9, 
   3.4337057641735125`*^9}, {3.433725812253214*^9, 3.433725815597039*^9}, {
   3.433731019873151*^9, 3.4337310335693207`*^9}, 3.4337327132599382`*^9, {
   3.433732804124433*^9, 3.4337328205968637`*^9}, 3.433737389360873*^9, 
   3.433742896945434*^9, {3.433901102437495*^9, 3.433901102578745*^9}, {
   3.434215137236109*^9, 3.4342151478613806`*^9}, {3.434229473684066*^9, 
   3.4342294841843348`*^9}, {3.4343162024752913`*^9, 3.434316216163142*^9}, {
   3.4343165581875224`*^9, 3.4343165691565533`*^9}, {3.4343187812131805`*^9, 
   3.4343188013699465`*^9}, 3.4343967210027213`*^9, {3.4343977915145006`*^9, 
   3.4343977917020054`*^9}, {3.43439787803234*^9, 3.434397894048375*^9}, 
   3.434400072896165*^9, {3.523731158267429*^9, 3.5237311585554576`*^9}}],

Cell[TextData[{
 "(a) Use ",
 StyleBox[ButtonBox["If",
  BaseStyle->"Link",
  ButtonData->"paclet://ref/If"],
  FontWeight->"Bold"],
 " (not ",
 StyleBox["Piecewise",
  FontWeight->"Bold"],
 ") to define a piecewise function, ",
 StyleBox["myabs[x_]",
  FontWeight->"Bold"],
 ", that mimics the ",
 StyleBox["Abs",
  FontWeight->"Bold"],
 " function.  Plot it over the range from {",
 StyleBox["x",
  FontSlant->"Italic"],
 ", -3, 3}."
}], "Text",
 CellChangeTimes->{{3.434308506606407*^9, 3.4343085090439696`*^9}, {
  3.4343160468463078`*^9, 3.434316124707676*^9}, {3.4343161624742675`*^9, 
  3.434316166943132*^9}, {3.4343184996590977`*^9, 3.4343184996590977`*^9}, {
  3.4343967895826015`*^9, 3.434396793254571*^9}}],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"myabs", "[", "x_", "]"}], ":=", 
  RowBox[{"If", "[", 
   RowBox[{
    RowBox[{"x", "<", "0"}], ",", 
    RowBox[{"-", "x"}], ",", "x"}], "]"}]}], "\[IndentingNewLine]", 
 RowBox[{"Plot", "[", 
  RowBox[{
   RowBox[{"myabs", "[", "x", "]"}], ",", 
   RowBox[{"{", 
    RowBox[{"x", ",", 
     RowBox[{"-", "3"}], ",", "3"}], "}"}]}], "]"}]}], "Input",
 CellChangeTimes->{{3.4343085096846113`*^9, 3.4343085102158747`*^9}, {
   3.4343161450988226`*^9, 3.434316195568865*^9}, 3.4344330597666297`*^9, {
   3.4904396661204*^9, 3.4904396928431997`*^9}, 3.4976906334372*^9, {
   3.527335293779204*^9, 3.5273353358375216`*^9}}],

Cell[BoxData[
 GraphicsBox[{{}, {}, 
   {Hue[0.67, 0.6, 0.6], LineBox[CompressedData["
1:eJxF1flTlHUcwPGFBZ4kXFPEgaVBYAcSZNQSBOX4PuKWq4IHyDWtSAgmBOEY
cmjiUICsHC4MoCzaaskighxSGOju90EQIVIoPIaMKwLlEuRuV9Zq5uP3+eE9
rz/hbRUa4xOuy+FwEv/rfw9VSifevKEYkF6p4du6vqYYkG76pFgct0AxIG3b
U9c6NkkxID1iNPBDVz/FgPTRSKfAmkaKAekkmz+Yw2coBqRlRYLcBzyKAWl5
b3rMviUGDEiv6vDdY2eiz4B0y15fYZuNHgPSIjubWIE1lwHpLRViRft6XQak
1WcPG39kp8OA9Oz81fzgDzgMSDdZ5zqqorUYRK76p2vWhr3GIMqjnZ23nlJj
EB26GDg4Il/AIGovsViiI5vDILIwqvoQ185gEBlaDrUPX5/CIIran3rh2rVJ
DKKQxt42i9xxDCJrd+2+e8nDGESlR2r6b9cOYhBFTleLM2T9GETrkvSDDATP
MIiMEx+9W1DUiUH0NCzKvnKgGYNI1b3XuVbRjEGk8HcSKiOaMYhiRdoDbRP3
MIjec5DmPNc0YRDtmK5ZWL2yEYPoOHc+y0qiwiASzuKS9ctUGEQrnqc3uOcr
MYgqfuHPBl25g0E0lOMhzq2rxyAKtEyz547UYhDFn7DPbs2vwCDa/XLySaXi
BgaRbeit1QW3yjGIHu8QVod2Xccg2mgW/EjzfgkGUU+MwEkskmMQZQVUNa+J
vIRB5IbcA2czijCIZLyAk9nt5zGI/G+cbWD8pRhEhvbrFfxXmRhER/4RtdY4
SjCIBBe+XjZ0OxmDSLfdIVyrPYlBpIwOKduQFotB9Mp0zcA9fiQGUUe5Re9+
H38MIr3Pdlmmb/Mglq77Pt6oPpRYmHBptvPxUWJ3V0Tlld0JRGvXTREx908T
N+5OzrG4/C0xvtJ715hpBpHft3GN7+NsYvA7WbrdohwiZ/NXvdv084lCGSpc
nnSReP2cC311ww2iXpP8DuVYQTy4YLD5C+dK4tmqEVMzeRXRw6xueV/xTaJi
xI/7ZU0tMSHr3JDkoYqYHZH8JOSb+8SlM16u5fs6iX2xzY5xKc+IL+u878a3
9BMVZ66EhEkGiTZzZcYJRcPEnpurla5Hxol+5/vSR6WTxO+KM5VeBVNEvU+j
x/UTZ4gPQ0pLfFLmiD8t5R+Yj1og2sqsXlBeaqI6LmWxzPc1cVRtzrvmoiVe
/vzMI3MBh36rdOuvmWY2OkReTJlno4kuUSX8WVnL5xIXow9u8ufpEXWo3wvX
LrJuEh27u5NjQFT/Wf7CZIpVGNUi9Z5jzdIMuKSqWS355pIZXYq4PUBi12nM
mvdbeKTUiXVds8WYYSJrgt+WPM9TrA1/+7mdSGbdz83KHJawnqQ1Di0y1pb6
p9Gpd1hX7Jw2UTKs4i6eaqaJdWL+Y17YA9ZVTj9WePawhjS1+5/4i7XUd1Rb
PcTqdsx6j9UEa5qOx3zgNGuHNEgunWflWx7f3qJhffvdt/4LnbebAg==
     "]]}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->True,
  AxesOrigin->{0, 0},
  PlotRange->{{-3, 3}, {0., 2.9999998775510206`}},
  PlotRangeClipping->True,
  PlotRangePadding->{
    Scaled[0.02], 
    Scaled[0.02]}]], "Output",
 CellChangeTimes->{3.5273353361875076`*^9}]
}, Open  ]],

Cell[TextData[{
 "\n(b)  Use ",
 StyleBox["If",
  FontWeight->"Bold"],
 " to create a function (named ",
 StyleBox["surprise",
  FontSlant->"Italic"],
 ") that takes no arguments, but randomly returns either a 0 or a 1, with 0 \
appearing 2/3 of the time and 1 appearing 1/3 of the time.  Hint: a ",
 StyleBox["RandomReal",
  FontWeight->"Bold"],
 " number between 0 and 1 has a 2/3 probability of being less than 2/3.  \
After you get it working properly, create a list of ",
 Cell[BoxData[
  FormBox[
   SuperscriptBox["10", "4"], TraditionalForm]]],
 " ",
 StyleBox["surprise",
  FontSlant->"Italic"],
 " values and verify that their average is approximately 1/3."
}], "Text",
 CellChangeTimes->{{3.434215125829567*^9, 3.4342151285327606`*^9}, {
  3.434307577223241*^9, 3.4343079285447345`*^9}, {3.4343081518004494`*^9, 
  3.4343083957910705`*^9}, {3.434308465230348*^9, 3.4343085142784786`*^9}, {
  3.4343185085186996`*^9, 3.4343185094718494`*^9}, {3.434396774816599*^9, 
  3.4343968008641405`*^9}, {3.434397374956962*^9, 3.4343973862697515`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{"surprise", ":=", " ", 
  RowBox[{"If", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"RandomReal", "[", "]"}], "<", 
     RowBox[{"2", "/", "3"}]}], ",", "0", ",", "1"}], 
   "]"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"biglist", " ", "=", 
   RowBox[{"Table", "[", 
    RowBox[{"surprise", ",", 
     RowBox[{"{", 
      RowBox[{"n", ",", "0", ",", 
       RowBox[{"10", "^", "4"}]}], "}"}]}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"Mean", "[", "biglist", "]"}], "//", "N"}]}], "Input",
 CellChangeTimes->{
  3.434215120923191*^9, {3.434307029365466*^9, 3.4343070507097626`*^9}, {
   3.434307089913891*^9, 3.4343071969322557`*^9}, {3.43430724749605*^9, 
   3.434307424203698*^9}, {3.434307466642285*^9, 3.4343075470818443`*^9}, {
   3.434307660569124*^9, 3.4343076611628895`*^9}, {3.4343078180419054`*^9, 
   3.4343078197450743`*^9}, {3.434308376274946*^9, 3.4343084547613297`*^9}, 
   3.434433080204653*^9, {3.4904396998632*^9, 3.4904397564912*^9}, 
   3.4976906433431997`*^9, {3.5273353441871877`*^9, 3.527335427243865*^9}, {
   3.5273354695121746`*^9, 3.5273354700421534`*^9}, {3.527335506020714*^9, 
   3.5273355756679277`*^9}, {3.5273356195261736`*^9, 
   3.5273357167022867`*^9}, {3.5273358073686595`*^9, 3.527335848487015*^9}, {
   3.527335964662368*^9, 3.527336020830121*^9}}],

Cell[BoxData["0.33436656334366566`"], "Output",
 CellChangeTimes->{{3.5273360148703594`*^9, 3.5273360210801105`*^9}}]
}, Open  ]],

Cell[TextData[{
 "\n(c) Use ",
 StyleBox["If",
  FontWeight->"Bold"],
 " to create a function, ",
 StyleBox["happyprime[n_]",
  FontWeight->"Bold"],
 ", the returns a ",
 Cell[BoxData[
  GraphicsBox[
   {PointSize[0.15], Thickness[Large], CircleBox[{0, 0}], 
    CircleBox[{0, 0}, 0.5, {-2.891592653589793, -0.25}], 
    PointBox[{-0.33, 0.3}], PointBox[{0.33, 0.3}]},
   ImageSize->25]],
  CellChangeTimes->{{3.4343969770717764`*^9, 3.434397187061527*^9}, {
   3.4343972208280163`*^9, 3.434397231547041*^9}}],
 " when ",
 StyleBox["n",
  FontSlant->"Italic"],
 " is a prime number and a ",
 Cell[BoxData[
  GraphicsBox[
   {PointSize[0.15], Thickness[Large], CircleBox[{0, 0}], 
    CircleBox[{0, -0.5}, 0.5, {0.25, 2.891592653589793}], 
    PointBox[{-0.33, 0.3}], PointBox[{0.33, 0.3}]},
   ImageSize->25]],
  CellChangeTimes->{{3.4343969770717764`*^9, 3.434397187061527*^9}, {
   3.4343972208280163`*^9, 3.434397231578292*^9}}],
 " otherwise (you can copy/paste these icons into your function).  Then try \
it out on the integers from 1 to 10."
}], "Text",
 CellChangeTimes->{{3.4343967267059917`*^9, 3.434396765941372*^9}, {
  3.434396806192402*^9, 3.4343968862100754`*^9}, {3.43439724910999*^9, 
  3.43439726198532*^9}, {3.434397342424879*^9, 3.434397401035754*^9}}],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"happyprime", "[", "n_", "]"}], ":=", " ", 
  RowBox[{"If", "[", 
   RowBox[{
    RowBox[{"PrimeQ", "[", "n", "]"}], ",", 
    GraphicsBox[
     {PointSize[0.15], Thickness[Large], CircleBox[{0, 0}], 
      CircleBox[{0, 0}, 0.5, {-2.891592653589793, -0.25}], 
      PointBox[{-0.33, 0.3}], PointBox[{0.33, 0.3}]},
     ImageSize->25], ",", 
    GraphicsBox[
     {PointSize[0.15], Thickness[Large], CircleBox[{0, 0}], 
      CircleBox[{0, -0.5}, 0.5, {0.25, 2.891592653589793}], 
      PointBox[{-0.33, 0.3}], PointBox[{0.33, 0.3}]},
     ImageSize->25]}], " ", "]"}]}], "\[IndentingNewLine]", 
 RowBox[{"happyprime", "/@", 
  RowBox[{"Range", "[", 
   RowBox[{"1", ",", "10", ",", "1"}], "]"}]}]}], "Input",
 CellChangeTimes->{{3.43439726939176*^9, 3.434397307205228*^9}, 
   3.4344330834391108`*^9, {3.4904398296084003`*^9, 3.4904398640376*^9}, {
   3.4904399172335997`*^9, 3.4904399174208*^9}, {3.4904399515067997`*^9, 
   3.4904399549544*^9}, 3.4976906751048*^9, {3.5273360411893063`*^9, 
   3.5273361216460876`*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   GraphicsBox[
    {PointSize[0.15], Thickness[Large], CircleBox[{0, 0}], 
     CircleBox[{0, -0.5}, 0.5, {0.25, 2.891592653589793}], 
     PointBox[{-0.33, 0.3}], PointBox[{0.33, 0.3}]},
    ImageSize->25], ",", 
   GraphicsBox[
    {PointSize[0.15], Thickness[Large], CircleBox[{0, 0}], 
     CircleBox[{0, 0}, 0.5, {-2.891592653589793, -0.25}], 
     PointBox[{-0.33, 0.3}], PointBox[{0.33, 0.3}]},
    ImageSize->25], ",", 
   GraphicsBox[
    {PointSize[0.15], Thickness[Large], CircleBox[{0, 0}], 
     CircleBox[{0, 0}, 0.5, {-2.891592653589793, -0.25}], 
     PointBox[{-0.33, 0.3}], PointBox[{0.33, 0.3}]},
    ImageSize->25], ",", 
   GraphicsBox[
    {PointSize[0.15], Thickness[Large], CircleBox[{0, 0}], 
     CircleBox[{0, -0.5}, 0.5, {0.25, 2.891592653589793}], 
     PointBox[{-0.33, 0.3}], PointBox[{0.33, 0.3}]},
    ImageSize->25], ",", 
   GraphicsBox[
    {PointSize[0.15], Thickness[Large], CircleBox[{0, 0}], 
     CircleBox[{0, 0}, 0.5, {-2.891592653589793, -0.25}], 
     PointBox[{-0.33, 0.3}], PointBox[{0.33, 0.3}]},
    ImageSize->25], ",", 
   GraphicsBox[
    {PointSize[0.15], Thickness[Large], CircleBox[{0, 0}], 
     CircleBox[{0, -0.5}, 0.5, {0.25, 2.891592653589793}], 
     PointBox[{-0.33, 0.3}], PointBox[{0.33, 0.3}]},
    ImageSize->25], ",", 
   GraphicsBox[
    {PointSize[0.15], Thickness[Large], CircleBox[{0, 0}], 
     CircleBox[{0, 0}, 0.5, {-2.891592653589793, -0.25}], 
     PointBox[{-0.33, 0.3}], PointBox[{0.33, 0.3}]},
    ImageSize->25], ",", 
   GraphicsBox[
    {PointSize[0.15], Thickness[Large], CircleBox[{0, 0}], 
     CircleBox[{0, -0.5}, 0.5, {0.25, 2.891592653589793}], 
     PointBox[{-0.33, 0.3}], PointBox[{0.33, 0.3}]},
    ImageSize->25], ",", 
   GraphicsBox[
    {PointSize[0.15], Thickness[Large], CircleBox[{0, 0}], 
     CircleBox[{0, -0.5}, 0.5, {0.25, 2.891592653589793}], 
     PointBox[{-0.33, 0.3}], PointBox[{0.33, 0.3}]},
    ImageSize->25], ",", 
   GraphicsBox[
    {PointSize[0.15], Thickness[Large], CircleBox[{0, 0}], 
     CircleBox[{0, -0.5}, 0.5, {0.25, 2.891592653589793}], 
     PointBox[{-0.33, 0.3}], PointBox[{0.33, 0.3}]},
    ImageSize->25]}], "}"}]], "Output",
 CellChangeTimes->{{3.5273360915272927`*^9, 3.5273361218860784`*^9}}]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["(#6) \"Which\" (10 min)", "Subsection",
 CellChangeTimes->{{3.4342295418576856`*^9, 3.4342295424358253`*^9}, {
  3.4343165728753986`*^9, 3.4343165769848785`*^9}, {3.4343187924947195`*^9, 
  3.434318792775976*^9}, {3.4343978969390745`*^9, 3.434397902236085*^9}, {
  3.434400076239979*^9, 3.4344000771462464`*^9}, {3.5237311619788*^9, 
  3.523731162363838*^9}}],

Cell[TextData[{
 "Use ",
 StyleBox[ButtonBox["Which",
  BaseStyle->"Link",
  ButtonData->"paclet://ref/Which"],
  FontWeight->"Bold"],
 " (not ",
 StyleBox["Piecewise",
  FontWeight->"Bold"],
 ") to define a piecewise function ",
 StyleBox["myspline[x_]",
  FontWeight->"Bold"],
 " that is equivalent to the cubic B-spline defined above in a previous \
exercise.  Make sure that you handle cases where ",
 Cell[BoxData[
  FormBox[
   RowBox[{"|", "x", "|", 
    RowBox[{">", "2"}]}], TraditionalForm]]],
 ".  ",
 StyleBox["Plot",
  FontWeight->"Bold"],
 " your function over the range from {",
 StyleBox["x",
  FontSlant->"Italic"],
 ", -3, 3}.  You might be able to copy/paste/modify some code from a previous \
exercise."
}], "Text",
 CellChangeTimes->{{3.434316551015464*^9, 3.43431655554683*^9}, {
  3.4343181895417843`*^9, 3.4343183414362974`*^9}, {3.4343185226909375`*^9, 
  3.4343185226909375`*^9}, {3.434318661710121*^9, 3.4343187497123737`*^9}, {
  3.434433102877108*^9, 3.434433124158903*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"pwfunc", " ", "=", " ", 
   RowBox[{"Piecewise", "[", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"0", ",", 
        RowBox[{"x", "\[LessEqual]", 
         RowBox[{"-", "2"}]}]}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{
         FractionBox["1", "6"], 
         SuperscriptBox[
          RowBox[{"(", 
           RowBox[{"2", "+", "x"}], ")"}], "3"]}], ",", 
        RowBox[{
         RowBox[{"-", "2"}], "<", "x", "\[LessEqual]", 
         RowBox[{"-", "1"}]}]}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{
         FractionBox["1", "6"], 
         RowBox[{"(", 
          RowBox[{"4", "-", 
           RowBox[{"6", 
            SuperscriptBox["x", "2"]}], "-", 
           RowBox[{"3", 
            SuperscriptBox["x", "3"]}]}], ")"}]}], ",", 
        RowBox[{
         RowBox[{"-", "1"}], "<", "x", "\[LessEqual]", "0"}]}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{
         FractionBox["1", "6"], 
         RowBox[{"(", 
          RowBox[{"4", "-", 
           RowBox[{"6", 
            SuperscriptBox["x", "2"]}], "+", 
           RowBox[{"3", 
            SuperscriptBox["x", "3"]}]}], ")"}]}], ",", 
        RowBox[{"0", "<", "x", "\[LessEqual]", "1"}]}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{
         FractionBox["1", "6"], 
         SuperscriptBox[
          RowBox[{"(", 
           RowBox[{"2", "-", "x"}], ")"}], "3"]}], ",", 
        RowBox[{"1", "<", "x", "\[LessEqual]", "2"}]}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"0", ",", 
        RowBox[{"x", ">", "2"}]}], "}"}]}], "}"}], "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.52733635832662*^9, 3.5273363620364723`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"whichfunc", " ", "=", " ", 
   RowBox[{"Which", "[", 
    RowBox[{
     RowBox[{
      RowBox[{"Abs", "[", "x", "]"}], ">", "2"}], ",", "0", ",", 
     RowBox[{
      RowBox[{"-", "2"}], "<", "x", "\[LessEqual]", 
      RowBox[{"-", "1"}]}], ",", 
     RowBox[{
      FractionBox["1", "6"], 
      SuperscriptBox[
       RowBox[{"(", 
        RowBox[{"2", "+", "x"}], ")"}], "3"]}], ",", 
     RowBox[{
      RowBox[{"-", "1"}], "<", "x", "\[LessEqual]", "0"}], ",", 
     RowBox[{
      FractionBox["1", "6"], 
      RowBox[{"(", 
       RowBox[{"4", "-", 
        RowBox[{"6", 
         SuperscriptBox["x", "2"]}], "-", 
        RowBox[{"3", 
         SuperscriptBox["x", "3"]}]}], ")"}]}], ",", 
     RowBox[{"0", "<", "x", "\[LessEqual]", "1"}], ",", 
     RowBox[{
      FractionBox["1", "6"], 
      RowBox[{"(", 
       RowBox[{"4", "-", 
        RowBox[{"6", 
         SuperscriptBox["x", "2"]}], "+", 
        RowBox[{"3", 
         SuperscriptBox["x", "3"]}]}], ")"}]}], ",", 
     RowBox[{"1", "<", "x", "\[LessEqual]", "2"}], ",", 
     RowBox[{
      FractionBox["1", "6"], 
      SuperscriptBox[
       RowBox[{"(", 
        RowBox[{"2", "-", "x"}], ")"}], "3"]}]}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{"Plot", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"whichfunc", ",", "pwfunc"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"x", ",", 
     RowBox[{"-", "3"}], ",", "3"}], "}"}], ",", 
   RowBox[{"PlotStyle", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"Blue", ",", "Thick"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"Red", ",", "Thin"}], "}"}]}], "}"}]}]}], 
  "]"}], "\[IndentingNewLine]"}], "Input",
 CellChangeTimes->{{3.4342295574518347`*^9, 3.434229558123727*^9}, {
   3.434318355905418*^9, 3.434318471845886*^9}, {3.4343185407070236`*^9, 
   3.434318587520722*^9}, {3.434318640209571*^9, 3.434318641803362*^9}, {
   3.434318757696954*^9, 3.434318766415927*^9}, 3.4344331007051773`*^9, {
   3.4904400156071997`*^9, 3.4904401272720003`*^9}, 3.4976906915783997`*^9, {
   3.5273361725540514`*^9, 3.5273361763339005`*^9}, {3.5273362063427*^9, 
   3.52733639034534*^9}}],

Cell[BoxData[
 GraphicsBox[{{{}, {}, 
    {RGBColor[0, 0, 1], Thickness[Large], LineBox[CompressedData["
1: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
      "]]}, 
    {RGBColor[1, 0, 0], Thickness[Tiny], LineBox[CompressedData["
1:eJxTTMoPSmViYGAQBWIQnbx+wvv//9kPMECByG8pNes/CP4Rt6UxZT8QfLV7
O0+++YDgv+J5vPjmQwS/IMs0YvNhBL9O9daBtHYEf9Zs5Uln+RD8+fc78gM5
2eB8sQvB/pqirHD+iYBgl9OqLHC+h6ZqibISM5xvtS5m2Xl9Jjj/V1easJEm
I5z/9fuSqXHqDHB+VMf26XOUEfwDEqdm3pJH8Hss388Nk0Dwlaotl/lxIvgd
3D4relgR/IsR8lKvmRF8AKQITkw=
      "]], LineBox[CompressedData["
1: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
      "]], LineBox[CompressedData["
1:eJxtz3k4FHgYB3AZurZdRZtzM0WSm0KJXsco0iK5aoW0PJKzomiyZSWUM4Rk
RzZy5oqQXnc1ylkmOsz1c+6SQmo27ez/+8f3+T6ff97n/W7yCnLwFhUREXES
5r9WMAhdqguZwQipzbnNYZ3g2TbStTH1b9S5E9zsEsuEzSZLBzsuTWD0rhan
Jv1+KPKt5jTWEozrnPSy0WOB38dKt6vZHFzmtZVrxHgDWpHih5crvcbahQDR
9mdskGvovTEu9hqNLZpGwl6yQXzh5iBzdBgP1MfHK79jw5sAPcek4mG8spRD
DZ5hQ/xRDzsZvWFkzsUaPF7HgTHjeks1syHM6+q28nfiAEPgr2frwUJPwfVl
B15x4JrhzhAdMxbqWCppWrI5cPY0pUJSiYV+OdKjhuMcsJ3K0mSNDmK6ncar
VYsc+DrcqeoZOIhavTN/uktz4UgDVfHUhZcYH6pNbXPkglT4i+8ybg5g7Tap
TF0mFxa/fV43EzGA5nTDdE4fF97FKMpYHRnAQqOu6NghLtxN81P+IjOAZurm
KxvHubCnQsTEPaMfIzXDdlcu58GJMY1AlZQ+TKTtUmeZ8iCyZHVewPc9mKNj
+uFeGQ+s653KFJ91o4s7idtSw4P1jxn1ffHdKAin0JMbeFDENejXX9mNtJIS
472PefBC9jhlSfQ53t5Xw9Rm80AtttE7cZGJlIXx2RkJPrB+9Ve7x+vE0Zw5
rS4fPjx6a29YW9CJ9tRZ28iTfChw1qc1nejEJ28V2lWC+XDGaulo10wHBlZd
jHYJ58NajeSUMUE7ep5+b2R4lQ/WH6sXFde34bnhLX6jpXzQ8c8U38pqxc2y
098mKvggQ+iSWtmtuMqUTePW8GF00FLDmNqKch+aqyoe8iGqgeXhqtGCGzMn
BW1dfAilfErYFPcIjU+laTeO8YE2j4XaEo9QwW5gWGyKD5JjsS0m6U3o22qQ
ZD7Nh3Km3PzhvIfYLz05kTUnvJ+yxy21vgGbtcJpdSIEan5fEcaABnwVdGgD
g0IgKrQ3qbyjHs/k2uXSlxNQPOzVxux7gO1BGoVr1xBwpcaoUSZrMev6dHj+
BgIqkna0dcG1WDBrO6wqS2COIuOuuHAfbdO6b+XJE0gZK0rZLXofvzkUKwdQ
CTDLny+elqvGKp/9Eie3EchkZEhGMarwVLa8T7w6AZ9UD41klSrkn1j1PEeT
ACVs1qNUrxJDrtTnZesSOBuhlvg0vRy/BHAtPu8kYDv9fvBeQRkyGnbTC42E
/3jVKWbUlaInY2zeypjAS2tapddQMQbmy8d4A4HSptVfrCaL8PXCj3FsUwLR
un3m2oK7eNtuX4GtOYHtsu4vBAqF+NuF7SvFLAmsTlD+iatZgDWxnrts9hLg
ikx5P9lzB6PEi45e3ifcN372U5pnPmo1B7v2WxPwddtjej7kNqrv8JIn+wmY
9orFHYvKQ9GYQ8WTNgTeBSnpu1n9gXRtOfHunwkkuFR0qvrdQrOmY00ltgSM
wcR1/upNpKYnyNHtCEypMCdayrJQtX9QEuwJZP/gcj6x5waeTArLmRPaeoG3
5pfZdFwcu1OWc5DA4tvg3K1SaTiycMvY0IFAYcdX7bkdqajDugHtQjuXxbc0
OyejIP9ZqcUh4T417QK52Wtofy404r7Qvp+tnlbviEPToK5cWUcCnU+8/jpw
7jIO5a9YGyy0UiZdYrTxEmrqHm9/ILRoj4b30tJ5tNGTrvoodFOAZ4lOzBm0
aHXroToRmJVR5XXI+aHKP/6SpkL3lm4ccXRwRlHBxZCD/+N/AYBmz78=
      "]], LineBox[CompressedData["
1:eJwV02s01AkYBvBZaSNZsZGcLWUL2x6VobDo2VXuO8Jkt4sjUa7FpMloiUYT
ZkUhohLGLRIxYnPGnSGXXMYlyqXx/7PJRC0SW+3sh/c853fec94PzznvNo9A
59MyFArFSTr/Z8EuHmtdlQeKomU87VxIpIWkL4j6GdCoc1nWl3pkyLckyyEE
S3MZZQpSa5nu8w1siQD1S37y4GESBg7shC2ZV1DVZfgwWer+cO+Aq67RuGyt
uMpKalYJzX5GPRbn7Zcy/6aT0Bg30KX3x4NTJ7hxSWo3uTiZEZsE8GK3vZSV
umQr5dx6nSTUJEiuhTuToJicHzuwOhmtlVNF004knJwmaayJFJSIByxtpeb5
HhUU1qfi1Af2yduOJA7eRppy+F0snNOx2XCIRHJZ2RpL13soyyrRNncgcZ5U
MTXbnIlPDkolR2gkmj5dLQhcycLyYwbhbU9ihlvrzp3mIc6EknvcjoSq2seN
2UPZOPsscp+FLQmvXWeiBipzMVAb9s+UFYn4qlzzubw87J9kU/MtSVRajc3L
p+SDX5rse/QgCbkTzp7mzAJEtctOpfxCovC68c85ex5CQbVhD8uUhGxThmCN
YTG+sPT5hSYkTix9beJvVAJhTKJZlxGJPx9Nq2/KeIREbfWUNwYk9m96ojye
W4bC4Ir6oB9J+PNnuhJ0+Cj2Nx7a/QOJVNrW+AMFfKjPxxwf1Sbxnh29Nr+o
HKP6nF4lLRJ50y6rAvgVqOf4TDVvJCHicOs191bCy5goU1KV9q1ZHdFTUQnK
aQWavQqJY/Tt/xpW/YXxO3aaqetIKAnez6/UVeFptnIal0IiJO76JPdZDX4y
ftM5QBLI1WnMMXWsRftbJbcDYgK99Ysekp5aXHidxuGNElBbKQ6871eH8c0d
QuNBAozdajMKAfW4lrfrkrCFwI5UguhlNsKIrnrvXB4Bs9OfGx88bsRcTUSA
Io+AM1U9m7PYiEkT+fS76QQud9if3BfShMPd3lbJNwkMU/gjaaHN4POe67xj
E4j3ZQ+4R7Yg5GOpstsxAjHtXz0malrQONVBjXchEKkXmeSz0oI5jFHKHQmw
3kU6MpitCDYI7xi3IuB+kdMW4fUUH2il5nVUAvrc6Jp7du1oiKL5ZMgR6Lsf
l/dSpQsald6vdjycwLO131x1P9SF6etatpr5E2g9E+9JxHaB+MzkKWVNwC3V
en2wTDeGc5jO/TcnQHe16bwU2o0UozeNC6ETMCNsrePO9sC8WK0zyWYCivO/
mhY5iaT3GKGxL8RYP0z1ZAWJIPNagTkqEmNDnXqsRZIIssu51rodYmhcI4af
94lApUfwMwVi6G4P+2P1kT5YOXit0U4Xw+Lwgydubv2oaaFI4lzFCC6XN1b2
H4RNu8VGvf5XGGcKDYM5L5C/W6Qd9mgcb5/QGlitr7D8veaW1lMvkRed5X6K
K/1zqr9KdcAgdiw++DbkzmvMD22P6tnQi9EyzWpTHwnea1jSKqfa0GkctFOL
JUHzpO5CRXMbBDVNt+SiJHheSmtuz27DnTbfoP5sCbTYfhf3urfhiJivEzgm
QW6OR4Di8FP0KNsk8n57iz2U4eB3Pa1oYjC85S1n4adMc0sTCcFfbOibpc8i
5obeTm65ELwwVYsBj1lcmO5eTEwWgh1T9V325VlQ/Rh6C78LsT9TttdMIN2b
cGhLI80Q3I28RZ+bRfd9x4vVzGb8BwgRkqk=
      "]], LineBox[CompressedData["
1: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
L1hDaw==
      "]], LineBox[CompressedData["
1:eJxTTMoPSmViYGBQB2IQzaLA9yuWjcGBAQrWsLpIVnIh+P8urA9fL4TgL0hv
vyKtjOBzVGecVlZH8Av6PA9payP49lu5N1gbI/j3mCZ0Rzsj+DLzZjjNTkbw
Z1xZuUFqCYI/wfFMj6QqI5zPl7/a6bAoE5y/z2XH3m1SzHD+39x4szA+Fjif
kf3STO2/CL6ZR9EhLwY2OP/XnTUvRD8h+C45Jyb4fkPwe38/tmj9heArSEl3
fmFih/Pdwzs1Lwsj+FMupmZNMEXw9Y7JveGqRPArQq2mONUi+AefhNpUNSL4
Icy9PS87Efxqh986J2Yh+Cd2Xc9t3YPgC3l9Ft17AMGPucm378sRBP/9d1e+
lLMIvpjplnVO9xD8hCPnw6oeIfgrg1//2/gMwbcpUvJXfI/gtzHafY/4jOBf
mBA5f8J3BF9KodT9xG8EP3n9hPf//yP4AG/Yfhk=
      "]]}, {}}, {{}, {}, {}, {}}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->True,
  AxesOrigin->{0, 0},
  PlotRange->{{-3, 3}, {0., 0.6666660378810596}},
  PlotRangeClipping->True,
  PlotRangePadding->{
    Scaled[0.02], 
    Scaled[0.02]}]], "Output",
 CellChangeTimes->{{3.5273363702261443`*^9, 3.527336390815321*^9}}]
}, Open  ]]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Procedural loops (40 min)", "Section",
 CellChangeTimes->{{3.4306009820872726`*^9, 3.4306009986500907`*^9}, {
   3.430607504087493*^9, 3.4306075152908325`*^9}, {3.431182354054803*^9, 
   3.4311823567267294`*^9}, {3.4311825544336505`*^9, 3.431182554574278*^9}, {
   3.431190573165732*^9, 3.431190601072518*^9}, {3.431201043366756*^9, 
   3.431201044929286*^9}, 3.4314665256696043`*^9, 3.4314665763961973`*^9, 
   3.431466615222662*^9, 3.431488602552561*^9, {3.4318058304191175`*^9, 
   3.4318058361536026`*^9}, {3.431806408320838*^9, 3.431806410414628*^9}, {
   3.43180665273178*^9, 3.4318066534036684`*^9}, {3.4318077228617015`*^9, 
   3.431807724346105*^9}, {3.431808201011507*^9, 3.431808201183385*^9}, {
   3.431811172787314*^9, 3.4318111733341994`*^9}, {3.4318135733021526`*^9, 
   3.4318135734896564`*^9}, {3.431897525064046*^9, 3.431897525142172*^9}, 
   3.4319917298815885`*^9, 3.432072668283319*^9, {3.43229167834933*^9, 
   3.432291683161922*^9}, {3.4322920767788544`*^9, 3.4322920768413553`*^9}, {
   3.4324110366565547`*^9, 3.432411036828433*^9}, 3.432488565189156*^9, {
   3.432516046826768*^9, 3.432516069749083*^9}, 3.432516203673529*^9, 
   3.4325876102902927`*^9, {3.432587649744175*^9, 3.432587698635739*^9}, 
   3.432659693804842*^9, {3.4326644461611924`*^9, 3.4326644463174458`*^9}, {
   3.4329101771549745`*^9, 3.432910181076925*^9}, {3.432910213999432*^9, 
   3.432910216343227*^9}, {3.4329160468301697`*^9, 3.432916047830189*^9}, {
   3.432916726843226*^9, 3.432916730218291*^9}, {3.433081780106669*^9, 
   3.4330817803302298`*^9}, 3.433089522477521*^9, 3.43308968236663*^9, {
   3.4330909348163157`*^9, 3.433090934975607*^9}, {3.4330909799131927`*^9, 
   3.433090980408948*^9}, 3.4332003298553667`*^9, 3.433203638268185*^9, {
   3.4332050476948905`*^9, 3.433205074133067*^9}, 3.4336950731810803`*^9, {
   3.4336951135102377`*^9, 3.4336951136977425`*^9}, {3.4336953351877875`*^9, 
   3.433695364001025*^9}, 3.433743529024207*^9, {3.43374548595474*^9, 
   3.433745486092311*^9}, 3.4337974276303825`*^9, {3.434215100766425*^9, 
   3.4342151019852066`*^9}, {3.4342165872419777`*^9, 
   3.4342165873669815`*^9}, {3.4342294532460423`*^9, 
   3.4342294572773952`*^9}, {3.43431000011339*^9, 3.434310004175994*^9}, 
   3.434377730645236*^9, 3.434398362168356*^9, {3.4344113781531134`*^9, 
   3.434411383184492*^9}, 3.4344195214865775`*^9, {3.43443137535559*^9, 
   3.434431375496134*^9}, {3.4344314369607096`*^9, 3.434431437148102*^9}}],

Cell[TextData[{
 "Loop structures allow us to sequentially run though a list of similar \
evaluations.  Examples might include counting to 10, performing a finite sum, \
performing the same operation on each element of list, or iteratively \
searching for the numerical solution to a nonlinear equation.  In this \
section, we will introduce several ",
 StyleBox["procedural",
  FontSlant->"Italic"],
 " loop structures (",
 StyleBox[ButtonBox["Do",
  BaseStyle->"Link",
  ButtonData->"paclet://ref/Do"],
  FontWeight->"Bold"],
 ", ",
 StyleBox[ButtonBox["While",
  BaseStyle->"Link",
  ButtonData->"paclet://ref/While"],
  FontWeight->"Bold"],
 " and ",
 StyleBox[ButtonBox["For",
  BaseStyle->"Link",
  ButtonData->"paclet://ref/For"],
  FontWeight->"Bold"],
 ").  As expected from a \"procedure\", they can each perform global-variable \
assignments, but produce no outputs."
}], "Text",
 CellChangeTimes->{
  3.434418245375785*^9, {3.4344182761734486`*^9, 3.4344182819860973`*^9}, {
   3.434418321627737*^9, 3.4344183221433754`*^9}, {3.434418488241377*^9, 
   3.4344184889913964`*^9}, 3.434428366416127*^9, {3.434428851194162*^9, 
   3.434428872522833*^9}, {3.4344289096956596`*^9, 3.4344289501498203`*^9}}],

Cell[CellGroupData[{

Cell["\<\
(#7) Compound expressions as function arguments (5 min)\
\>", "Subsection",
 CellChangeTimes->{{3.4342352975780087`*^9, 3.4342353059060802`*^9}, {
   3.434235349733925*^9, 3.4342353519839106`*^9}, {3.434316593329047*^9, 
   3.4343166123764095`*^9}, {3.434378203474958*^9, 3.4343782073353243`*^9}, {
   3.434378253144807*^9, 3.434378263464926*^9}, 3.434398337400047*^9, {
   3.4343983751377726`*^9, 3.4343983752626286`*^9}, 3.434418230875414*^9, {
   3.4344313780415416`*^9, 3.4344313781820855`*^9}, {3.4976910869292*^9, 
   3.4976910873036003`*^9}, {3.5237315458671846`*^9, 3.523731546796278*^9}}],

Cell[TextData[{
 "(a) A series of expressions separated by semicolons is called a \"compound \
expression\".  We have often used this construct to perform multiple \
computations on a single line, but only display the last result.  Evaluate \
the example below to see how a ",
 StyleBox[ButtonBox["CompoundExpression",
  BaseStyle->"Link",
  ButtonData->"paclet://ref/CompoundExpression"],
  FontWeight->"Bold"],
 " is viewed internally by ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 ".  Observe that the first two simple expressions (",
 StyleBox["M",
  FontSlant->"Italic"],
 " = 2 and ",
 StyleBox["Q",
  FontSlant->"Italic"],
 " = ",
 Cell[BoxData[
  FormBox[
   SuperscriptBox["3", "M"], TraditionalForm]]],
 ") do get evaluated, but that only the second simple expression (5 ",
 StyleBox["Q",
  FontSlant->"Italic"],
 ") is \"returned\" to ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " as output.  In general, when we string multiple simple expressions \
together into a compound expression, only the last one gets returned as \
output.  Reread that last sentence for emphasis!"
}], "Text",
 CellChangeTimes->{{3.4343782704927893`*^9, 3.434378271449*^9}, {
  3.434378373694332*^9, 3.434378433926236*^9}, {3.4343784840402937`*^9, 
  3.434378593639557*^9}, {3.434379199526046*^9, 3.434379373986944*^9}, {
  3.43437955305898*^9, 3.43437962031461*^9}}],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"M", " ", "=", " ", "2"}], ";", " ", 
   RowBox[{"Q", " ", "=", " ", 
    RowBox[{"3", "^", "M"}]}], ";", " ", 
   RowBox[{"5", "*", "Q"}]}], " "}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"Hold", "[", 
   RowBox[{
    RowBox[{"M", " ", "=", " ", "2"}], ";", " ", 
    RowBox[{"Q", " ", "=", " ", 
     RowBox[{"3", "^", "M"}]}], ";", 
    RowBox[{"5", "*", "Q"}]}], "]"}], "//", "FullForm"}]}], "Input",
 CellChangeTimes->{{3.434378218256571*^9, 3.43437824396931*^9}, {
  3.434378280699934*^9, 3.4343783604927053`*^9}, {3.434379387428987*^9, 
  3.434379534899375*^9}}],

Cell[BoxData["45"], "Output",
 CellChangeTimes->{3.527336454602769*^9}],

Cell[BoxData[
 TagBox[
  StyleBox[
   RowBox[{"Hold", "[", 
    RowBox[{"CompoundExpression", "[", 
     RowBox[{
      RowBox[{"Set", "[", 
       RowBox[{"M", ",", "2"}], "]"}], ",", 
      RowBox[{"Set", "[", 
       RowBox[{"Q", ",", 
        RowBox[{"Power", "[", 
         RowBox[{"3", ",", "M"}], "]"}]}], "]"}], ",", 
      RowBox[{"Times", "[", 
       RowBox[{"5", ",", "Q"}], "]"}]}], "]"}], "]"}],
   ShowSpecialCharacters->False,
   ShowStringCharacters->True,
   NumberMarks->True],
  FullForm]], "Output",
 CellChangeTimes->{3.527336454612769*^9}]
}, Open  ]],

Cell[TextData[{
 "\n(b) Up to now, compound expressions were simple matter of convenience and \
probably don't seem very important.  In the context of programming, however, \
compound expressions are an essential part of the ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " language.  In fact, any argument that you feed to any ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " function can be replaced with a compound expression.  Reread that last \
sentence three times for emphasis!\n\nEvaluate the cells below to see two \
equivalent definite integrals, and observe that the second case employs \
compound expressions.  In both cases, ",
 StyleBox["Integrate",
  FontWeight->"Bold"],
 " takes two arguments.  Thus, it should be clear that semicolons do not \
separate function arguments -- only commas can do that.  Also observe that \
ONLY the last simple expression within each compound expression actually gets \
returned to ",
 StyleBox["Integrate",
  FontWeight->"Bold"],
 " as a proper argument.  Describe this in detail to your TA."
}], "Text",
 CellChangeTimes->{{3.434378660641177*^9, 3.4343790849220667`*^9}, {
  3.434379126291647*^9, 3.434379184285507*^9}, {3.434379625498765*^9, 
  3.4343797047163277`*^9}, {3.434379743967526*^9, 3.43437979391197*^9}, {
  3.43437983992299*^9, 3.434379857152997*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Integrate", "[", 
  RowBox[{
   RowBox[{"x", "^", "2"}], ",", 
   RowBox[{"{", 
    RowBox[{"x", ",", "0", ",", "1"}], "}"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.4343770834795427`*^9, 3.4343770901458*^9}}],

Cell[BoxData[
 FractionBox["1", "3"]], "Output",
 CellChangeTimes->{3.5273366136864057`*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Integrate", "[", 
  RowBox[{
   RowBox[{
    RowBox[{"base", " ", "=", " ", "x"}], ";", " ", 
    RowBox[{"exponent", " ", "=", " ", "2"}], ";", " ", 
    RowBox[{"base", "^", "exponent"}]}], ",", " ", 
   RowBox[{"{", 
    RowBox[{"x", ",", "0", ",", "1"}], "}"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.434376795741164*^9, 3.4343768255769463`*^9}, {
  3.434376884762643*^9, 3.434377074952051*^9}, {3.434377141266378*^9, 
  3.434377147169701*^9}, {3.434379724878725*^9, 3.434379739390895*^9}, {
  3.434751025067303*^9, 3.4347510293955116`*^9}}],

Cell[BoxData[
 FractionBox["1", "3"]], "Output",
 CellChangeTimes->{3.5273366113165007`*^9}]
}, Open  ]],

Cell[TextData[{
 "\n(c) Use a compound expression in the first argument of ",
 StyleBox["NSum",
  FontWeight->"Bold"],
 " to compute a numerical result for ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    UnderoverscriptBox[
     RowBox[{"\[Sum]", " "}], 
     RowBox[{"n", "=", "1"}], "\[Infinity]"], 
    FractionBox[
     RowBox[{"ln", "(", "n", ")"}], 
     SuperscriptBox["n", "4"]]}], TraditionalForm]]],
 ".  Hint: define the numerator and demoninator separately and then combine \
them in one big compound expression."
}], "Text",
 CellChangeTimes->{{3.4343799007741957`*^9, 3.434379902042267*^9}, {
  3.434379948739789*^9, 3.434380012617833*^9}, {3.4343800539863462`*^9, 
  3.4343800592894697`*^9}, {3.434380171077276*^9, 3.4343802315490093`*^9}, {
  3.434398502911827*^9, 3.43439853939711*^9}, {3.43475198766391*^9, 
  3.4347520074299145`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Sum", "[", 
  RowBox[{
   RowBox[{
    RowBox[{"numerator", "=", 
     RowBox[{"Log", "[", "n", "]"}]}], ";", 
    RowBox[{"denominator", "=", 
     RowBox[{"n", "^", "4"}]}], ";", 
    RowBox[{"numerator", "/", "denominator"}]}], ",", 
   RowBox[{"{", 
    RowBox[{"n", ",", "1", ",", "\[Infinity]"}], "}"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.434379903201295*^9, 3.434379929285033*^9}, {
  3.434380017055107*^9, 3.434380165678342*^9}, {3.4343802052538233`*^9, 
  3.4343802087092953`*^9}, {3.4344331438781576`*^9, 3.434433148034514*^9}, {
  3.527336645225144*^9, 3.527336693523212*^9}}],

Cell[BoxData[
 RowBox[{"-", 
  RowBox[{
   SuperscriptBox["Zeta", "\[Prime]",
    MultilineFunction->None], "[", "4", "]"}]}]], "Output",
 CellChangeTimes->{{3.5273366813436995`*^9, 3.5273366939431953`*^9}}]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["\<\
(#8) Special assignment shortcuts (5 min)\
\>", "Subsection",
 CellChangeTimes->{{3.4342352975780087`*^9, 3.4342353059060802`*^9}, {
  3.434235349733925*^9, 3.4342353519839106`*^9}, {3.434316593329047*^9, 
  3.4343166123764095`*^9}, {3.434380260047248*^9, 3.434380260261457*^9}, {
  3.434410275265506*^9, 3.434410286234536*^9}, {3.434419537643241*^9, 
  3.4344195377526193`*^9}, {3.4344313793689013`*^9, 3.4344313795250616`*^9}, {
  3.4976910924516*^9, 3.4976910928571997`*^9}, {3.5237315496915674`*^9, 
  3.5237315506846666`*^9}}],

Cell[TextData[{
 "Though ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " provides a handful of ",
 StyleBox[ButtonBox["assignment",
  BaseStyle->"Link",
  ButtonData->"paclet://guide/Assignments"],
  FontWeight->"Bold"],
 " functions, which have been specifically designed to modify their \
arguments, the vast majority of ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " functions do not modify their arguments.  Here, we will experiment with \
some ",
 StyleBox[ButtonBox["Special Forms of Assignment",
  BaseStyle->"Link",
  ButtonData->"paclet://tutorial/SpecialFormsOfAssignment"],
  FontWeight->"Bold"],
 ", which are especially useful for modifying variables within a program.  \
The syntax of these assignments parallels similar syntax in the ",
 StyleBox["C",
  FontSlant->"Italic"],
 " and ",
 StyleBox["Java",
  FontSlant->"Italic"],
 " languages.\n\n(a) Evaluate and study the following examples of the ",
 StyleBox["Increment",
  FontWeight->"Bold"],
 " (",
 StyleBox["r",
  FontSlant->"Italic"],
 "++) ",
 StyleBox["PreIncrement",
  FontWeight->"Bold"],
 " (++",
 StyleBox["r ",
  FontSlant->"Italic"],
 "), ",
 StyleBox["Decrement",
  FontWeight->"Bold"],
 " (",
 StyleBox["r",
  FontSlant->"Italic"],
 "--) and ",
 StyleBox["PreDecrement",
  FontWeight->"Bold"],
 " (--",
 StyleBox["r ",
  FontSlant->"Italic"],
 ") functions.  Observe that while all of these functions update the value of \
their argument, both ",
 StyleBox["Increment",
  FontWeight->"Bold"],
 " and ",
 StyleBox["Decrement",
  FontWeight->"Bold"],
 " return the old pre-update value as output."
}], "Text",
 CellChangeTimes->{{3.434235317421632*^9, 3.434235321109108*^9}, {
  3.4342353550463905`*^9, 3.4342354454208126`*^9}, {3.43440818457136*^9, 
  3.434408224384879*^9}, {3.4344082594014006`*^9, 3.4344083400128393`*^9}, {
  3.43440842754633*^9, 3.4344088005715046`*^9}, {3.434408842072567*^9, 
  3.4344088569166965`*^9}, {3.4344090227334414`*^9, 3.43440917562798*^9}, {
  3.4344097698306913`*^9, 3.434409804565956*^9}, {3.43440983831682*^9, 
  3.434409847332676*^9}, {3.4344098953339043`*^9, 3.434410163684524*^9}, {
  3.4344103062819242`*^9, 3.434410361033326*^9}}],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"r", "=", "0"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{"r", "++"}], "\[IndentingNewLine]", "r"}], "Input",
 CellChangeTimes->{{3.434235454280195*^9, 3.434235456077093*^9}, {
  3.434408003472974*^9, 3.4344080424583473`*^9}, {3.4344080737247725`*^9, 
  3.434408140851491*^9}, {3.4344102542493424`*^9, 3.434410255843133*^9}, {
  3.5273367089625945`*^9, 3.5273367257819214`*^9}}],

Cell[BoxData["0"], "Output",
 CellChangeTimes->{{3.527336705692725*^9, 3.5273367320316715`*^9}}],

Cell[BoxData["1"], "Output",
 CellChangeTimes->{{3.527336705692725*^9, 3.5273367320316715`*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"r", "=", "0"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{"++", "r"}], "\[IndentingNewLine]", "r"}], "Input",
 CellChangeTimes->{{3.434235454280195*^9, 3.434235456077093*^9}, {
  3.434408003472974*^9, 3.4344080424583473`*^9}, {3.4344080737247725`*^9, 
  3.4344080915064774`*^9}, {3.434408142460907*^9, 3.434408145554736*^9}, {
  3.4344102581244416`*^9, 3.434410258999464*^9}}],

Cell[BoxData["1"], "Output",
 CellChangeTimes->{3.527336733201625*^9}],

Cell[BoxData["1"], "Output",
 CellChangeTimes->{3.527336733201625*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"r", "=", "0"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{"--", "r"}], "\[IndentingNewLine]", "r"}], "Input",
 CellChangeTimes->{{3.4344084000456257`*^9, 3.434408404467614*^9}}],

Cell[BoxData[
 RowBox[{"-", "1"}]], "Output",
 CellChangeTimes->{3.5273367364314957`*^9}],

Cell[BoxData[
 RowBox[{"-", "1"}]], "Output",
 CellChangeTimes->{3.5273367364314957`*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"r", "=", "0"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{"r", "--"}], "\[IndentingNewLine]", "r"}], "Input",
 CellChangeTimes->{{3.4344084000456257`*^9, 3.4344084172960677`*^9}}],

Cell[BoxData["0"], "Output",
 CellChangeTimes->{3.5273367377314434`*^9}],

Cell[BoxData[
 RowBox[{"-", "1"}]], "Output",
 CellChangeTimes->{3.5273367377314434`*^9}]
}, Open  ]],

Cell[TextData[{
 "\n(b) Evaluate the cell below, and make sure that you understand how each \
of the following assignments changes the value of ",
 StyleBox["r",
  FontSlant->"Italic"],
 "."
}], "Text",
 CellChangeTimes->{{3.4344083519818954`*^9, 3.4344083650291047`*^9}, {
  3.434410210841981*^9, 3.4344102286549373`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{"r", " ", "=", " ", "2"}], "\[IndentingNewLine]", 
 RowBox[{"r", "*=", " ", "3"}], "\[IndentingNewLine]", 
 RowBox[{"r", "+=", " ", "7"}], "\[IndentingNewLine]", 
 RowBox[{"r", "-=", " ", "1"}], "\[IndentingNewLine]", 
 RowBox[{"r", "/=", "4", " "}]}], "Input",
 CellChangeTimes->{{3.4344081503673596`*^9, 3.4344081773211746`*^9}, {
  3.4344089009803247`*^9, 3.434408989045079*^9}, {3.4344097497676783`*^9, 
  3.4344097502520657`*^9}}],

Cell[BoxData["2"], "Output",
 CellChangeTimes->{3.527336748751003*^9}],

Cell[BoxData["6"], "Output",
 CellChangeTimes->{3.527336748751003*^9}],

Cell[BoxData["13"], "Output",
 CellChangeTimes->{3.527336748751003*^9}],

Cell[BoxData["12"], "Output",
 CellChangeTimes->{3.527336748751003*^9}],

Cell[BoxData["3"], "Output",
 CellChangeTimes->{3.527336748771002*^9}]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["(#9) \"Do\" (10 min)", "Subsection",
 CellChangeTimes->{{3.434229526763549*^9, 3.4342295270135555`*^9}, {
  3.434316601688636*^9, 3.4343166203141127`*^9}, {3.4343802632855997`*^9, 
  3.4343802633893557`*^9}, {3.434419512126963*^9, 3.434419539502664*^9}, {
  3.4344205697165365`*^9, 3.4344205698259144`*^9}, {3.4344313801653175`*^9, 
  3.434431380321478*^9}, {3.4976910980208*^9, 3.4976910983484*^9}, {
  3.5237315564442425`*^9, 3.5237315574843464`*^9}}],

Cell[TextData[{
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 "'s ",
 StyleBox[ButtonBox["Do",
  BaseStyle->"Link",
  ButtonData->"paclet://ref/Do"],
  FontWeight->"Bold"],
 " loop is much like the ",
 StyleBox["Do",
  FontSlant->"Italic"],
 " implemented in the Fortran language.  It has a locally-defined iterator \
(with specified range and stepsize), and terminates when the iterator has \
traversed its range.\n\n(a) Evaluate the cell below and observe that a ",
 StyleBox["Do",
  FontWeight->"Bold"],
 " loop doesn't actually return any output.  ",
 StyleBox["Null",
  FontWeight->"Bold"],
 " isn't really proper output -- just a placeholder that pops out when \
nothing else is returned."
}], "Text",
 CellChangeTimes->{{3.4343807997892323`*^9, 3.4343808076371202`*^9}, {
   3.434410386143344*^9, 3.434410424909961*^9}, {3.434410461004635*^9, 
   3.4344105322720847`*^9}, {3.4344105710855784`*^9, 3.434410668853706*^9}, {
   3.4344110073936224`*^9, 3.434411279213081*^9}, {3.4344185117419786`*^9, 
   3.4344185253204517`*^9}, 3.434428855538023*^9}],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{"Do", "[", 
  RowBox[{"\"\<any expression that you can imagine\>\"", ",", 
   RowBox[{"{", 
    RowBox[{"n", ",", "1", ",", "10"}], "}"}]}], "]"}], "\[IndentingNewLine]", 
 RowBox[{"%", "//", "FullForm"}]}], "Input",
 CellChangeTimes->{{3.4343808095266113`*^9, 3.434380870751683*^9}, {
   3.4344104318320136`*^9, 3.434410451379389*^9}, 3.4344109923619876`*^9, {
   3.4344111221465597`*^9, 3.4344111327874575`*^9}}],

Cell[BoxData[
 TagBox[
  StyleBox["Null",
   ShowSpecialCharacters->False,
   ShowStringCharacters->True,
   NumberMarks->True],
  FullForm]], "Output",
 CellChangeTimes->{3.5273367655203323`*^9}]
}, Open  ]],

Cell[TextData[{
 "\n(b)   Evaluate the example below, which uses a global variable (",
 StyleBox["result",
  FontSlant->"Italic"],
 ") to compute the sum of the integers from 1 to 10.  We check ",
 StyleBox["result",
  FontSlant->"Italic"],
 " at the end to verify that it becomes 55 as expected."
}], "Text",
 CellChangeTimes->{{3.434411080817377*^9, 3.4344110818955297`*^9}, {
  3.434418538195781*^9, 3.4344187577482767`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"result", " ", "=", " ", "0"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{"Do", "[", 
  RowBox[{
   RowBox[{"result", "+=", "n"}], ",", 
   RowBox[{"{", 
    RowBox[{"n", ",", "1", ",", "10"}], "}"}]}], 
  "]"}], "\[IndentingNewLine]", "result"}], "Input",
 CellChangeTimes->{{3.4342346371786594`*^9, 3.434234638381507*^9}, {
   3.434380380073557*^9, 3.434380532578993*^9}, 3.4343805737999163`*^9, 
   3.434380793990531*^9, {3.434418676199314*^9, 3.4344186875433545`*^9}}],

Cell[BoxData["55"], "Output",
 CellChangeTimes->{3.527336794179186*^9}]
}, Open  ]],

Cell["\<\

(c) In the cell below, pull all of the code from the previous cell onto a \
single line using a compound expression.\
\>", "Text",
 CellChangeTimes->{{3.434418763935935*^9, 3.434418788045927*^9}, {
  3.434418837469067*^9, 3.4344189057833157`*^9}, {3.4344253857460737`*^9, 
  3.434425408840415*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"result", " ", "=", " ", "0"}], ";", 
  RowBox[{"Do", "[", 
   RowBox[{
    RowBox[{"result", "+=", "n"}], ",", 
    RowBox[{"{", 
     RowBox[{"n", ",", "1", ",", "10"}], "}"}]}], "]"}], ";", 
  "result"}]], "Input",
 CellChangeTimes->{{3.4343805670494013`*^9, 3.434380570575169*^9}, {
   3.434418799264964*^9, 3.434418804140089*^9}, {3.4344188416566744`*^9, 
   3.4344188512350445`*^9}, {3.434418907814618*^9, 3.434418908033374*^9}, 
   3.434433167019375*^9, {3.497483761236*^9, 3.497483768334*^9}, 
   3.4976907885792*^9, {3.527336801888877*^9, 3.527336812718444*^9}}],

Cell[BoxData["55"], "Output",
 CellChangeTimes->{3.527336813178426*^9}]
}, Open  ]],

Cell[TextData[{
 "\n(d) Use ",
 StyleBox["Do",
  FontWeight->"Bold"],
 " to start with decimal number ",
 StyleBox["latest = 1.0",
  FontWeight->"Bold"],
 ", and recursively compute 100 cosines, taking the cosine of the most recent \
result each time.  Show the final value of ",
 StyleBox["latest",
  FontSlant->"Italic"],
 "."
}], "Text",
 CellChangeTimes->{{3.4343809285523376`*^9, 3.434380938424796*^9}, {
   3.4343810131262293`*^9, 3.434381014442841*^9}, {3.4343810552281*^9, 
   3.434381161807266*^9}, {3.4343811999874372`*^9, 3.434381304732115*^9}, {
   3.434419416530766*^9, 3.4344194849387674`*^9}, 3.434425424028304*^9, {
   3.4344270725705056`*^9, 3.434427102399394*^9}, {3.434427294779319*^9, 
   3.4344273204674764`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"latest", "=", "1.0"}], ";", 
  RowBox[{"Do", "[", 
   RowBox[{
    RowBox[{"latest", "=", 
     RowBox[{"Cos", "[", "latest", "]"}]}], ",", 
    RowBox[{"{", "100", "}"}]}], "]"}], ";", "latest"}]], "Input",
 CellChangeTimes->{{3.434380721157885*^9, 3.434380732299374*^9}, 
   3.43438101741194*^9, {3.434381165330689*^9, 3.4343811945639887`*^9}, {
   3.434381258500402*^9, 3.4343812588128242`*^9}, {3.4344272915917373`*^9, 
   3.434427292357382*^9}, {3.434427327842665*^9, 3.4344273350615997`*^9}, 
   3.4344331708632236`*^9, {3.497483786586*^9, 3.4974839285372*^9}, 
   3.4976907949751997`*^9, {3.527336819468174*^9, 3.5273369202041445`*^9}, {
   3.5273369554727335`*^9, 3.527336986831479*^9}, {3.5273370254799333`*^9, 
   3.5273370339795933`*^9}}],

Cell[BoxData["0.7390851332151607`"], "Output",
 CellChangeTimes->{{3.527336897635047*^9, 3.5273369209241157`*^9}, {
  3.527336957382657*^9, 3.5273369804517345`*^9}, {3.52733702856981*^9, 
  3.5273370345295715`*^9}}]
}, Open  ]],

Cell[TextData[{
 "\n(e) In this example, we use nested ",
 StyleBox["Do",
  FontWeight->"Bold"],
 " loops to accumulate a list of the integer sums of the form ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    UnderoverscriptBox[
     RowBox[{"\[Sum]", " "}], 
     RowBox[{"n", " ", "=", "1"}], "p"], "n"}], TraditionalForm]]],
 "  for ",
 StyleBox["p",
  FontSlant->"Italic"],
 " values running from 1 to 10.  Evaluate the example and figure out how it \
works.  Then modify them to accumulate a list of the squared-integer sums of \
the form  ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    UnderoverscriptBox[
     RowBox[{"\[Sum]", " "}], 
     RowBox[{"n", " ", "=", "1"}], "p"], 
    SuperscriptBox["n", "2"]}], TraditionalForm]]],
 ".  You might want to copy the code to a practice cell first."
}], "Text",
 CellChangeTimes->{{3.4344188155153804`*^9, 3.434418818624835*^9}, {
   3.4344189420811205`*^9, 3.434418957050254*^9}, {3.434418993285556*^9, 
   3.4344190984913745`*^9}, {3.434419193728187*^9, 3.4344193047154036`*^9}, {
   3.434419359841815*^9, 3.434419425812254*^9}, 3.4344254260439806`*^9, {
   3.4344284084640784`*^9, 3.434428421573789*^9}, {3.4457165936042852`*^9, 
   3.4457165951667852`*^9}, 3.4457166817605352`*^9, {3.4974840304988003`*^9, 
   3.4974840322928*^9}}],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"reslist", " ", "=", " ", 
   RowBox[{"{", "}"}]}], ";", " ", 
  RowBox[{"result", "=", "0"}], ";", 
  RowBox[{"Do", "[", " ", 
   RowBox[{
    RowBox[{
     RowBox[{"result", "+=", "p"}], ";", 
     RowBox[{"reslist", " ", "=", " ", 
      RowBox[{"Append", "[", 
       RowBox[{"reslist", ",", "result"}], "]"}]}]}], ",", " ", 
    RowBox[{"{", 
     RowBox[{"p", ",", "1", ",", "10"}], "}"}]}], "]"}], ";", 
  "reslist"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"reslist2", " ", "=", " ", 
   RowBox[{"{", "}"}]}], ";", " ", 
  RowBox[{"result", "=", "0"}], ";", 
  RowBox[{"Do", "[", " ", 
   RowBox[{
    RowBox[{
     RowBox[{"result", "+=", 
      RowBox[{"p", "*", "p"}]}], ";", 
     RowBox[{"reslist2", " ", "=", " ", 
      RowBox[{"Append", "[", 
       RowBox[{"reslist2", ",", "result"}], "]"}]}]}], ",", " ", 
    RowBox[{"{", 
     RowBox[{"p", ",", "1", ",", "10"}], "}"}]}], "]"}], ";", 
  "reslist2"}]}], "Input",
 CellChangeTimes->{{3.434380591025735*^9, 3.434380650466567*^9}, {
  3.434419117819994*^9, 3.434419159180428*^9}, {3.4344193207001877`*^9, 
  3.434419332450488*^9}, {3.434419373092154*^9, 3.4344193735140395`*^9}, {
  3.4344284580278473`*^9, 3.434428459809143*^9}, {3.4457166451042852`*^9, 
  3.4457166745261602`*^9}, {3.4974851727464*^9, 3.4974851756792*^9}, {
  3.527337063608408*^9, 3.5273371186462064`*^9}, {3.5273371753439384`*^9, 
  3.5273371967730813`*^9}, {3.5273372301917443`*^9, 3.5273372338615975`*^9}, {
  3.5273372645603695`*^9, 3.527337268270221*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "1", ",", "3", ",", "6", ",", "10", ",", "15", ",", "21", ",", "28", ",", 
   "36", ",", "45", ",", "55"}], "}"}]], "Output",
 CellChangeTimes->{{3.527337047759042*^9, 3.527337119336179*^9}, {
   3.5273371775138516`*^9, 3.527337196943074*^9}, 3.5273372345915685`*^9, 
   3.5273372688601975`*^9}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "1", ",", "5", ",", "14", ",", "30", ",", "55", ",", "91", ",", "140", ",", 
   "204", ",", "285", ",", "385"}], "}"}]], "Output",
 CellChangeTimes->{{3.527337047759042*^9, 3.527337119336179*^9}, {
   3.5273371775138516`*^9, 3.527337196943074*^9}, 3.5273372345915685`*^9, 
   3.5273372688601975`*^9}]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["(#10) \"While\" (10 min)", "Subsection",
 CellChangeTimes->{{3.4342295325293217`*^9, 3.4342295330918365`*^9}, {
  3.434316622782926*^9, 3.4343166453460035`*^9}, {3.434374434424281*^9, 
  3.434374434576297*^9}, {3.4343760889530363`*^9, 3.434376089081202*^9}, {
  3.434380265965554*^9, 3.434380266189425*^9}, {3.4344195260491943`*^9, 
  3.434419541737096*^9}, {3.4344266316529684`*^9, 3.434426631887349*^9}, {
  3.4344313654394293`*^9, 3.4344313810085816`*^9}, {3.4976911022328*^9, 
  3.497691102498*^9}, {3.5237315643960376`*^9, 3.523731565308129*^9}}],

Cell[TextData[{
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 "'s ",
 StyleBox[ButtonBox["While",
  BaseStyle->"Link",
  ButtonData->"paclet://ref/While"],
  FontWeight->"Bold"],
 " loop is much like the ",
 StyleBox["While",
  FontSlant->"Italic"],
 " or ",
 StyleBox["Do/While",
  FontSlant->"Italic"],
 " loops that you may have seen in other programming languages.  It has no \
iterator, but terminates when some condition is met.\n\n",
 "(a) Evaluate the example below, where we use ",
 StyleBox["While",
  FontWeight->"Bold"],
 " to find the largest ",
 StyleBox["Prime",
  FontWeight->"Bold"],
 " number less than ",
 Cell[BoxData[
  FormBox[
   SuperscriptBox["10", "6"], TraditionalForm]]],
 ".  We use the global variable ",
 StyleBox["m",
  FontSlant->"Italic"],
 " as an iterator."
}], "Text",
 CellChangeTimes->{{3.4344255899075503`*^9, 3.434425632533642*^9}, {
   3.434425706348031*^9, 3.434425709379359*^9}, {3.434425842148382*^9, 
   3.4344258946497264`*^9}, 3.434428866835188*^9}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"m", " ", "=", " ", "1"}], ";", 
  RowBox[{"While", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"Prime", "[", "m", "]"}], "<", 
     RowBox[{"10", "^", "6"}]}], ",", 
    RowBox[{"m", "++"}]}], "]"}], ";", " ", 
  RowBox[{"Prime", "[", 
   RowBox[{"m", "-", "1"}], "]"}]}]], "Input",
 CellChangeTimes->{{3.43442563559622*^9, 3.4344256617218885`*^9}, {
  3.434425729676753*^9, 3.434425741708311*^9}, {3.435416143880436*^9, 
  3.4354161519900184`*^9}, {3.4457167892449102`*^9, 3.4457167932292852`*^9}}],

Cell[BoxData["999983"], "Output",
 CellChangeTimes->{3.527337288399416*^9}]
}, Open  ]],

Cell[TextData[{
 "\n(b) Start with decimal number ",
 StyleBox["latest = 1.0",
  FontWeight->"Bold"],
 ", and use ",
 StyleBox["While",
  FontWeight->"Bold"],
 " to recursively compute cosines until the magnitude of the change between \
recursions is less than ",
 Cell[BoxData[
  FormBox[
   SuperscriptBox["10", 
    RowBox[{"-", "6"}]], TraditionalForm]]],
 ".  In other words, keep evaluating  ",
 StyleBox["latest = Cos[latest]",
  FontWeight->"Bold"],
 " as long as ",
 StyleBox["Abs[Cos[latest]-latest] ",
  FontWeight->"Bold"],
 Cell[BoxData[
  FormBox[
   RowBox[{">", 
    SuperscriptBox["10", 
     RowBox[{"-", "6"}]]}], TraditionalForm]],
  FontWeight->"Bold"],
 ".  Use a second global variable to count the number of iterations required. \
 Then compare ",
 StyleBox["latest",
  FontSlant->"Italic"],
 " to the result that you previously obtained with a ",
 StyleBox["Do",
  FontWeight->"Bold"],
 " loop."
}], "Text",
 CellChangeTimes->{{3.4343809285523376`*^9, 3.434380938424796*^9}, {
   3.4343810131262293`*^9, 3.434381014442841*^9}, {3.4343810552281*^9, 
   3.434381161807266*^9}, {3.4343811999874372`*^9, 3.434381304732115*^9}, {
   3.434419416530766*^9, 3.4344194849387674`*^9}, 3.434425424028304*^9, {
   3.4344259351195126`*^9, 3.434426135968404*^9}, {3.434426229267668*^9, 
   3.434426359177243*^9}, {3.4344263919280815`*^9, 3.4344264556797132`*^9}, {
   3.434426750968523*^9, 3.4344267733909717`*^9}, {3.434426934238839*^9, 
   3.4344269356920013`*^9}, {3.4344270613670936`*^9, 3.434427062945259*^9}, 
   3.434430586238578*^9, {3.434752082056347*^9, 3.4347520822594757`*^9}}],

Cell[BoxData[
 RowBox[{"Clear", "[", "\"\<`*\>\"", "]"}]], "Input",
 CellChangeTimes->{{3.434380721157885*^9, 3.434380732299374*^9}, 
   3.43438101741194*^9, {3.434381165330689*^9, 3.4343811945639887`*^9}, {
   3.434381258500402*^9, 3.4343812588128242`*^9}, {3.4344261416560497`*^9, 
   3.4344262116265907`*^9}, {3.4344264636955433`*^9, 3.4344264821491413`*^9}, 
   3.43442693875458*^9, 3.434433202145274*^9, {3.434752139401198*^9, 
   3.4347522094806685`*^9}, {3.4347522563721943`*^9, 3.434752258106602*^9}, 
   3.434752387952845*^9, {3.4974852858152*^9, 3.4974853615688*^9}, {
   3.4974854001632*^9, 3.4974854343272*^9}, 3.49769084112*^9, {
   3.527337293839198*^9, 3.527337312328459*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  StyleBox[
   RowBox[{
    RowBox[{"latest", " ", "=", " ", "1.0"}], ";", 
    RowBox[{
     RowBox[{"Abs", "[", 
      RowBox[{
       RowBox[{"Cos", "[", "latest", "]"}], "-", "latest"}], "]"}], " ", ">", 
     " ", "1*^-6"}]}],
   FontWeight->"Bold"], "\[IndentingNewLine]"}]], "Input",
 CellChangeTimes->{{3.527337808858597*^9, 3.5273378715860877`*^9}}],

Cell[BoxData["True"], "Output",
 CellChangeTimes->{{3.5273378525668488`*^9, 3.527337872146065*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"latest", "=", " ", "1.0"}], ";", 
  RowBox[{"n", "=", "0"}], " ", ";", " ", 
  RowBox[{"While", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"Abs", "[", 
      RowBox[{
       RowBox[{"Cos", "[", "latest", "]"}], "-", "latest"}], "]"}], ">", 
     "1*^-6"}], ",", 
    RowBox[{
     RowBox[{"latest", " ", "=", " ", 
      RowBox[{"Cos", "[", "latest", "]"}]}], ";", 
     RowBox[{"n", "++"}]}]}], "]"}], ";", 
  RowBox[{"{", 
   RowBox[{"latest", ",", "n"}], "}"}]}]], "Input",
 CellChangeTimes->{{3.5273373136684055`*^9, 3.5273373345875683`*^9}, {
  3.5273373924552536`*^9, 3.52733749778104*^9}, {3.5273375418092794`*^9, 
  3.5273375513288984`*^9}, {3.5273377938391976`*^9, 3.5273378036388054`*^9}, {
  3.5273378760359097`*^9, 3.5273378984650126`*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"0.7390845495752126`", ",", "33"}], "}"}]], "Output",
 CellChangeTimes->{{3.5273378923052588`*^9, 3.52733789902499*^9}}]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["(#11) \"For\" (10 min)", "Subsection",
 CellChangeTimes->{{3.4342346299928155`*^9, 3.4342346302115154`*^9}, {
  3.434316629111213*^9, 3.4343166338925858`*^9}, {3.434374432410627*^9, 
  3.434374437824408*^9}, {3.434376091041304*^9, 3.434376091169108*^9}, {
  3.434380268805644*^9, 3.4343802690216846`*^9}, {3.434419532018097*^9, 
  3.4344195435496426`*^9}, {3.4344313729194937`*^9, 3.4344313816332216`*^9}, {
  3.4976911062732*^9, 3.4976911064916*^9}, {3.5237315709246902`*^9, 
  3.523731571260724*^9}}],

Cell[TextData[{
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 "'s ",
 StyleBox[ButtonBox["For",
  BaseStyle->"Link",
  ButtonData->"paclet://ref/For"],
  FontWeight->"Bold"],
 " loop is much like the ",
 StyleBox["For",
  FontSlant->"Italic"],
 " implemented in the ",
 StyleBox["C",
  FontSlant->"Italic"],
 " and ",
 StyleBox["Java",
  FontSlant->"Italic"],
 " languages.  It has an global iterator variable, a mechanism for changing \
the iterator, and a condition on the iterator that terminates the loop.  Most \
tasks that you can accomplish with ",
 StyleBox["For",
  FontWeight->"Bold"],
 ", you can also accomplish with either ",
 StyleBox["Do",
  FontWeight->"Bold"],
 " or ",
 StyleBox["While",
  FontWeight->"Bold"],
 " loop.\n\n(a)  Evaluate the example below, where we use ",
 StyleBox["For",
  FontWeight->"Bold"],
 " to identify all of the integers less than or equal to 25 that have an odd \
number of 1's in their binary (i.e. base-2) representations."
}], "Text",
 CellChangeTimes->{{3.434429368676159*^9, 3.4344293698168135`*^9}, {
  3.434429854969858*^9, 3.4344298900176306`*^9}, {3.434429986066964*^9, 
  3.434430004551812*^9}, {3.434430053865575*^9, 3.4344300579594297`*^9}, {
  3.4344305208306537`*^9, 3.434430529080865*^9}, {3.4344306555997286`*^9, 
  3.4344306914131455`*^9}, {3.4344309880111694`*^9, 3.4344310894683666`*^9}, {
  3.434431330240966*^9, 3.4344313321773496`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"oddones", "[", "n_", "]"}], " ", ":=", " ", 
  RowBox[{"OddQ", "[", 
   RowBox[{"Count", "[", 
    RowBox[{
     RowBox[{"IntegerDigits", "[", 
      RowBox[{"n", ",", "2"}], "]"}], ",", "1"}], "]"}], 
   "]"}]}], "\[IndentingNewLine]", 
 RowBox[{"For", "[", 
  RowBox[{
   RowBox[{"n", "=", "1"}], ",", 
   RowBox[{"n", "\[LessEqual]", "25"}], ",", 
   RowBox[{"n", "++"}], ",", 
   RowBox[{"If", "[", 
    RowBox[{
     RowBox[{"oddones", "[", "n", "]"}], ",", 
     RowBox[{"Print", "[", 
      RowBox[{"{", 
       RowBox[{"n", ",", 
        RowBox[{"BaseForm", "[", 
         RowBox[{"n", ",", "2"}], "]"}]}], "}"}], "]"}]}], "]"}]}], 
  "]"}]}], "Input",
 CellChangeTimes->{{3.4342346312112846`*^9, 3.4342346315861983`*^9}, {
  3.43438193380998*^9, 3.434381950840761*^9}, {3.434382146609305*^9, 
  3.434382160910596*^9}, {3.434429499007621*^9, 3.434429506226556*^9}, {
  3.4344295768846145`*^9, 3.4344296192294483`*^9}, {3.434429653527201*^9, 
  3.4344296844029913`*^9}, {3.434429717466338*^9, 3.4344297374355993`*^9}, {
  3.4344298016716185`*^9, 3.434429831672387*^9}, {3.434430007005*^9, 
  3.434430065944009*^9}, {3.4344301522587185`*^9, 3.434430184993932*^9}, {
  3.434430709866743*^9, 3.4344307514928083`*^9}, {3.434430817650752*^9, 
  3.434430949106765*^9}, {3.4344310941325274`*^9, 3.4344311132571464`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"1", ",", 
   TagBox[
    InterpretationBox[
     SubscriptBox["\<\"1\"\>", "\<\"2\"\>"],
     1,
     Editable->False],
    BaseForm[#, 2]& ]}], "}"}]], "Print",
 CellChangeTimes->{3.5273379811317053`*^9}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"2", ",", 
   TagBox[
    InterpretationBox[
     SubscriptBox["\<\"10\"\>", "\<\"2\"\>"],
     2,
     Editable->False],
    BaseForm[#, 2]& ]}], "}"}]], "Print",
 CellChangeTimes->{3.5273379811317053`*^9}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"4", ",", 
   TagBox[
    InterpretationBox[
     SubscriptBox["\<\"100\"\>", "\<\"2\"\>"],
     4,
     Editable->False],
    BaseForm[#, 2]& ]}], "}"}]], "Print",
 CellChangeTimes->{3.5273379811417055`*^9}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"7", ",", 
   TagBox[
    InterpretationBox[
     SubscriptBox["\<\"111\"\>", "\<\"2\"\>"],
     7,
     Editable->False],
    BaseForm[#, 2]& ]}], "}"}]], "Print",
 CellChangeTimes->{3.5273379811417055`*^9}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"8", ",", 
   TagBox[
    InterpretationBox[
     SubscriptBox["\<\"1000\"\>", "\<\"2\"\>"],
     8,
     Editable->False],
    BaseForm[#, 2]& ]}], "}"}]], "Print",
 CellChangeTimes->{3.527337981161704*^9}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"11", ",", 
   TagBox[
    InterpretationBox[
     SubscriptBox["\<\"1011\"\>", "\<\"2\"\>"],
     11,
     Editable->False],
    BaseForm[#, 2]& ]}], "}"}]], "Print",
 CellChangeTimes->{3.527337981161704*^9}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"13", ",", 
   TagBox[
    InterpretationBox[
     SubscriptBox["\<\"1101\"\>", "\<\"2\"\>"],
     13,
     Editable->False],
    BaseForm[#, 2]& ]}], "}"}]], "Print",
 CellChangeTimes->{3.5273379811717043`*^9}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"14", ",", 
   TagBox[
    InterpretationBox[
     SubscriptBox["\<\"1110\"\>", "\<\"2\"\>"],
     14,
     Editable->False],
    BaseForm[#, 2]& ]}], "}"}]], "Print",
 CellChangeTimes->{3.5273379811717043`*^9}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"16", ",", 
   TagBox[
    InterpretationBox[
     SubscriptBox["\<\"10000\"\>", "\<\"2\"\>"],
     16,
     Editable->False],
    BaseForm[#, 2]& ]}], "}"}]], "Print",
 CellChangeTimes->{3.5273379811817036`*^9}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"19", ",", 
   TagBox[
    InterpretationBox[
     SubscriptBox["\<\"10011\"\>", "\<\"2\"\>"],
     19,
     Editable->False],
    BaseForm[#, 2]& ]}], "}"}]], "Print",
 CellChangeTimes->{3.5273379811817036`*^9}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"21", ",", 
   TagBox[
    InterpretationBox[
     SubscriptBox["\<\"10101\"\>", "\<\"2\"\>"],
     21,
     Editable->False],
    BaseForm[#, 2]& ]}], "}"}]], "Print",
 CellChangeTimes->{3.5273379811817036`*^9}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"22", ",", 
   TagBox[
    InterpretationBox[
     SubscriptBox["\<\"10110\"\>", "\<\"2\"\>"],
     22,
     Editable->False],
    BaseForm[#, 2]& ]}], "}"}]], "Print",
 CellChangeTimes->{3.527337981191703*^9}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"25", ",", 
   TagBox[
    InterpretationBox[
     SubscriptBox["\<\"11001\"\>", "\<\"2\"\>"],
     25,
     Editable->False],
    BaseForm[#, 2]& ]}], "}"}]], "Print",
 CellChangeTimes->{3.527337981191703*^9}]
}, Open  ]]
}, Open  ]],

Cell[TextData[{
 "\n(b) In the cell below, use ",
 StyleBox["For",
  FontWeight->"Bold"],
 " to compute a list of each of the powers of 2 (i.e. ",
 Cell[BoxData[
  FormBox[
   SuperscriptBox["2", "n"], TraditionalForm]]],
 ") less than ",
 Cell[BoxData[
  FormBox[
   SuperscriptBox["10", "6"], TraditionalForm]]],
 ".  Hints: First define ",
 StyleBox["reslist = { }",
  FontWeight->"Bold"],
 " for future use.  Then, for every non-negative integer ",
 StyleBox["n",
  FontSlant->"Italic"],
 " such that ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    SuperscriptBox["2", "n"], "<", 
    SuperscriptBox["10", "6"]}], TraditionalForm]]],
 ", use ",
 StyleBox["AppendTo",
  FontWeight->"Bold"],
 " to append ",
 Cell[BoxData[
  FormBox[
   SuperscriptBox["2", "n"], TraditionalForm]]],
 " to ",
 StyleBox["reslist",
  FontSlant->"Italic"],
 "."
}], "Text",
 CellChangeTimes->{{3.434429377457634*^9, 3.4344293923173895`*^9}, {
  3.4344300709128857`*^9, 3.4344300759755154`*^9}, {3.4344301362739344`*^9, 
  3.434430148461746*^9}, {3.4344302622771597`*^9, 3.4344304923924255`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"reslist", "=", 
   RowBox[{"{", "}"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"For", "[", 
   RowBox[{
    RowBox[{"n", "=", "0"}], ",", 
    RowBox[{
     RowBox[{"2", "^", "n"}], " ", "<", " ", "1*^6"}], ",", 
    RowBox[{"n", "++"}], ",", 
    RowBox[{"AppendTo", "[", 
     RowBox[{"reslist", ",", 
      RowBox[{"2", "^", "n"}]}], "]"}]}], "]"}], ";", "reslist"}]}], "Input",
 CellChangeTimes->{{3.4344293803639584`*^9, 3.434429380692092*^9}, 
   3.4344300671315393`*^9, {3.4344303450761547`*^9, 3.434430351154435*^9}, 
   3.43443045857906*^9, 3.434433218473817*^9, {3.4974855406724*^9, 
   3.4974856303724003`*^9}, 3.4976908620864*^9, {3.527338027839837*^9, 
   3.527338120496131*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "1", ",", "2", ",", "4", ",", "8", ",", "16", ",", "32", ",", "64", ",", 
   "128", ",", "256", ",", "512", ",", "1024", ",", "2048", ",", "4096", ",", 
   "8192", ",", "16384", ",", "32768", ",", "65536", ",", "131072", ",", 
   "262144", ",", "524288"}], "}"}]], "Output",
 CellChangeTimes->{{3.527338115176344*^9, 3.5273381207561207`*^9}}]
}, Open  ]]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Recursive Structures (15 min)", "Section",
 CellChangeTimes->{{3.4343774210967712`*^9, 3.434377430840434*^9}, {
   3.434377737753962*^9, 3.4343777379776907`*^9}, 3.434423681983709*^9, {
   3.434428077955618*^9, 3.4344280935810175`*^9}, {3.434428961650115*^9, 
   3.434428961775118*^9}, {3.434431436039366*^9, 3.4344314362267575`*^9}, {
   3.4344705181003447`*^9, 3.4344705183659763`*^9}, {3.5237547416714*^9, 
   3.5237547434498*^9}, {3.5237548923050003`*^9, 3.523754892773*^9}, {
   3.523755167567*^9, 3.5237551678478003`*^9}}],

Cell[TextData[{
 "You are already familiar with several of ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 "'s functional loop structures (e.g. ",
 StyleBox["Table",
  FontWeight->"Bold"],
 ", ",
 StyleBox["Sum",
  FontWeight->"Bold"],
 ", ",
 StyleBox["NIntegrate",
  FontWeight->"Bold"],
 ", ",
 StyleBox["Plot",
  FontWeight->"Bold"],
 ", ",
 StyleBox["Map",
  FontWeight->"Bold"],
 ", etc.) which either iterate over fixed range of numbers or over the \
elements of a list.  As expected of a \"function\", they each take input and \
produce output, but don't alter any global variables.  In this section, we \
introduce several new functional loop structures that are designed for \
recursive function evaluation.  The guide page on ",
 StyleBox[ButtonBox["Functional Iteration",
  BaseStyle->"Link",
  ButtonData->"paclet://guide/FunctionalIteration"],
  FontWeight->"Bold"],
 " is a useful quick reference to these functions."
}], "Text",
 CellChangeTimes->{{3.43441956200324*^9, 3.434419571300353*^9}, {
   3.434423170845624*^9, 3.4344232498476467`*^9}, {3.4344237090312757`*^9, 
   3.4344237107656956`*^9}, {3.434424104666404*^9, 3.434424158089647*^9}, 
   3.4344241966218834`*^9, 3.4344242686237264`*^9, {3.4344280837213907`*^9, 
   3.434428085221429*^9}, 3.4344283335871615`*^9, 3.434428369416204*^9, {
   3.4344284868254595`*^9, 3.4344286451420126`*^9}, {3.4344287117374673`*^9, 
   3.4344288259747667`*^9}, {3.4344289653533344`*^9, 3.434428968353411*^9}, 
   3.4976911232771997`*^9}],

Cell[CellGroupData[{

Cell["\<\
(#12) Nest and NestList (10 min)\
\>", "Subsection",
 CellChangeTimes->{{3.4344201746439233`*^9, 3.434420178362768*^9}, {
   3.434420209410438*^9, 3.434420211285486*^9}, 3.434422460858699*^9, {
   3.434422507453642*^9, 3.4344225075942698`*^9}, {3.4344280595957727`*^9, 
   3.434428080518183*^9}, {3.4976911153212*^9, 3.4976911158828*^9}, {
   3.5237317578133774`*^9, 3.523731764533049*^9}, {3.5237321409336853`*^9, 
   3.5237321467732697`*^9}, {3.5237546342497997`*^9, 3.5237546345618*^9}, {
   3.523755285269*^9, 3.5237552953466*^9}}],

Cell[TextData[{
 "(a)  Evaluate the cell below to observe the behavior of ",
 StyleBox[ButtonBox["Nest",
  BaseStyle->"Link",
  ButtonData->"paclet://ref/Nest"],
  FontWeight->"Bold"],
 ".  The function starts with 0 as input and recursively adds 1 to the \
previous result for a total of 10 recursions. Explain to your TA how this \
example works."
}], "Text",
 CellChangeTimes->{{3.4344206631251783`*^9, 3.4344206644845877`*^9}, {
  3.4344220558795815`*^9, 3.434422057535874*^9}, {3.434422160116625*^9, 
  3.43442219488314*^9}, {3.434422282510383*^9, 3.4344224228108497`*^9}, {
  3.4344241847309537`*^9, 3.4344241914655013`*^9}, {3.523731681971794*^9, 
  3.5237316823378305`*^9}, {3.5237317693665323`*^9, 3.5237318474653416`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Nest", "[", 
  RowBox[{
   RowBox[{
    RowBox[{"#", "+", "1"}], "&"}], ",", "0", ",", "10"}], "]"}]], "Input",
 CellChangeTimes->{
  3.4343679541545343`*^9, 3.434370801718852*^9, {3.434421879296936*^9, 
   3.434421883250162*^9}, {3.5237318499795933`*^9, 3.5237318503956347`*^9}, {
   3.5273382345815673`*^9, 3.5273382383714156`*^9}}],

Cell[BoxData["10"], "Output",
 CellChangeTimes->{
  3.523731850939689*^9, {3.527338213232421*^9, 3.527338238941393*^9}}]
}, Open  ]],

Cell[TextData[{
 " \n(b) Use ",
 StyleBox["Nest",
  FontWeight->"Bold"],
 " to start with the decimal number 1.0, and recursively compute 100 cosines. \
 Compare your output to the result that you previously obtained with a ",
 StyleBox["Do",
  FontWeight->"Bold"],
 " loop."
}], "Text",
 CellChangeTimes->{{3.434420638155789*^9, 3.434420643468425*^9}, {
   3.434420780893818*^9, 3.4344207819563446`*^9}, {3.434422046176208*^9, 
   3.434422048098132*^9}, {3.4344221226469154`*^9, 3.4344221282251835`*^9}, {
   3.434426700232849*^9, 3.4344267388588376`*^9}, 3.4344272105584126`*^9, {
   3.523731938781472*^9, 3.523731938909485*^9}, {3.5237320544180346`*^9, 
   3.523732054530046*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"ne", " ", "=", " ", "1.0"}], ";", " ", 
  RowBox[{"Nest", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"Cos", "[", "#", "]"}], "&"}], ",", "ne", ",", "100"}], "]"}], 
  " ", 
  RowBox[{"(*", " ", 
   RowBox[{
   "same", " ", "answer", " ", "as", " ", "above", " ", "two", " ", 
    "examples"}], " ", "*)"}]}]], "Input",
 CellChangeTimes->{{3.4344206444684505`*^9, 3.434420645030965*^9}, {
   3.434422138037935*^9, 3.4344221423192945`*^9}, 3.434433256240409*^9, {
   3.527338252440853*^9, 3.52733831800823*^9}}],

Cell[BoxData["0.7390851332151607`"], "Output",
 CellChangeTimes->{3.5273383064986906`*^9}]
}, Open  ]],

Cell[TextData[{
 "\n(c) Sometimes it\[CloseCurlyQuote]s helpful to see how the nested \
calculations are progressiong at each step.  A convenient function to use for \
this is ",
 StyleBox[ButtonBox["NestList",
  BaseStyle->"Link",
  ButtonData->"paclet://ref/NestList"],
  FontWeight->"Bold"],
 ".  It not only gives a final result, but produces a list which includesall \
of the intermediate results as well.  Repeat the calculation you did in part \
(b) using NestList instead of Nest and compare the results."
}], "Text",
 CellChangeTimes->{{3.5237551920746*^9, 3.523755342415*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"ne", " ", "=", " ", "1.0"}], ";", " ", 
  RowBox[{"NestList", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"Cos", "[", "#", "]"}], "&"}], ",", "ne", ",", "100"}], 
   "]"}]}]], "Input",
 CellChangeTimes->{{3.5237553378754*^9, 3.5237553391546*^9}, {
  3.5273383393473763`*^9, 3.5273383449171534`*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "1.`", ",", "0.5403023058681398`", ",", "0.8575532158463934`", ",", 
   "0.6542897904977791`", ",", "0.7934803587425656`", ",", 
   "0.7013687736227565`", ",", "0.7639596829006542`", ",", 
   "0.7221024250267077`", ",", "0.7504177617637605`", ",", 
   "0.7314040424225098`", ",", "0.7442373549005569`", ",", 
   "0.7356047404363473`", ",", "0.7414250866101092`", ",", 
   "0.7375068905132428`", ",", "0.7401473355678757`", ",", 
   "0.7383692041223232`", ",", "0.7395672022122561`", ",", 
   "0.7387603198742113`", ",", "0.7393038923969059`", ",", 
   "0.7389377567153445`", ",", "0.7391843997714936`", ",", 
   "0.7390182624274122`", ",", "0.7391301765296711`", ",", 
   "0.7390547907469174`", ",", "0.7391055719265363`", ",", 
   "0.7390713652989449`", ",", "0.7390944073790913`", ",", 
   "0.739078885994992`", ",", "0.7390893414033927`", ",", 
   "0.7390822985224024`", ",", "0.7390870426953322`", ",", 
   "0.7390838469650002`", ",", "0.7390859996481299`", ",", 
   "0.7390845495752126`", ",", "0.7390855263619245`", ",", 
   "0.7390848683867142`", ",", "0.7390853116067619`", ",", 
   "0.7390850130484203`", ",", "0.7390852141609171`", ",", 
   "0.739085078689123`", ",", "0.7390851699445544`", ",", 
   "0.7390851084737987`", ",", "0.7390851498812394`", ",", 
   "0.7390851219886894`", ",", "0.7390851407774467`", ",", 
   "0.7390851281211138`", ",", "0.7390851366465718`", ",", 
   "0.7390851309037207`", ",", "0.7390851347721744`", ",", 
   "0.7390851321663374`", ",", "0.7390851339216605`", ",", 
   "0.7390851327392538`", ",", "0.7390851335357372`", ",", 
   "0.7390851329992164`", ",", "0.7390851333606233`", ",", 
   "0.7390851331171753`", ",", "0.7390851332811648`", ",", 
   "0.7390851331706995`", ",", "0.7390851332451103`", ",", 
   "0.7390851331949863`", ",", "0.7390851332287504`", ",", 
   "0.7390851332060064`", ",", "0.7390851332213271`", ",", 
   "0.7390851332110069`", ",", "0.7390851332179587`", ",", 
   "0.7390851332132758`", ",", "0.7390851332164302`", ",", 
   "0.7390851332143055`", ",", "0.7390851332157367`", ",", 
   "0.7390851332147726`", ",", "0.739085133215422`", ",", 
   "0.7390851332149846`", ",", "0.7390851332152792`", ",", 
   "0.7390851332150807`", ",", "0.7390851332152145`", ",", 
   "0.7390851332151244`", ",", "0.7390851332151851`", ",", 
   "0.7390851332151441`", ",", "0.7390851332151718`", ",", 
   "0.7390851332151531`", ",", "0.7390851332151657`", ",", 
   "0.7390851332151572`", ",", "0.7390851332151629`", ",", 
   "0.7390851332151591`", ",", "0.7390851332151617`", ",", 
   "0.7390851332151599`", ",", "0.7390851332151611`", ",", 
   "0.7390851332151603`", ",", "0.7390851332151609`", ",", 
   "0.7390851332151605`", ",", "0.7390851332151608`", ",", 
   "0.7390851332151606`", ",", "0.7390851332151607`", ",", 
   "0.7390851332151607`", ",", "0.7390851332151607`", ",", 
   "0.7390851332151607`", ",", "0.7390851332151607`", ",", 
   "0.7390851332151607`", ",", "0.7390851332151607`", ",", 
   "0.7390851332151607`", ",", "0.7390851332151607`"}], "}"}]], "Output",
 CellChangeTimes->{3.5273383455071297`*^9}]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["(#13) NestWhile (5 min)", "Subsection",
 CellChangeTimes->{{3.4344201951131973`*^9, 3.434420215426217*^9}, {
  3.434422526844763*^9, 3.4344225269697657`*^9}, {3.43442425176392*^9, 
  3.4344242519045486`*^9}, {3.434428053939378*^9, 3.4344280814244566`*^9}, {
  3.4976911359912*^9, 3.4976911364124002`*^9}, {3.5237546384462*^9, 
  3.523754638727*^9}, {3.5237547727622004`*^9, 3.5237547879566*^9}}],

Cell[TextData[{
 "(a) ",
 StyleBox[ButtonBox["NestWhile",
  BaseStyle->"Link",
  ButtonData->"paclet://ref/NestWhile"],
  FontWeight->"Bold"],
 " is similar to ",
 StyleBox["Nest",
  FontWeight->"Bold"],
 " , but does not take a prespecified number of recursions.  Instead, it \
terminates using a logical condition that depends on the evolving value of \
the output.  After each recursion, the value of the output is tested against \
the condition.  As long as the condition returns ",
 StyleBox["True",
  FontWeight->"Bold"],
 ", the recursions continue.  When the condition finally returns ",
 StyleBox["False",
  FontWeight->"Bold"],
 ", the recursions stop and a final output value is returned.  Evaluate the \
two examples in the cell below, and explain to your TA how they work."
}], "Text",
 CellChangeTimes->{{3.4344231562671256`*^9, 3.434423166939274*^9}, {
  3.4344232759420643`*^9, 3.4344236469359365`*^9}, {3.4344241619959965`*^9, 
  3.4344242325759287`*^9}, {3.434752115228859*^9, 3.4347521155882406`*^9}, {
  3.523754792699*^9, 3.523754814383*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"NestWhile", "[", 
  RowBox[{
   RowBox[{
    RowBox[{"#", "+", "1"}], "&"}], ",", "0", ",", 
   RowBox[{
    RowBox[{"#", "<", "10"}], "&"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.43442058468567*^9, 3.434420586060705*^9}, {
  3.434423068858638*^9, 3.434423146048114*^9}, {3.5237548241174*^9, 
  3.5237548248817997`*^9}}],

Cell[BoxData["10"], "Output",
 CellChangeTimes->{3.5273383763658953`*^9}]
}, Open  ]],

Cell[TextData[{
 " \n(d) Use ",
 StyleBox["NestWhile ",
  FontWeight->"Bold"],
 "to start with the decimal number 1.0, and recursively compute cosines until \
the magnitude of the change between recursions is less than ",
 Cell[BoxData[
  FormBox[
   SuperscriptBox["10", 
    RowBox[{"-", "6"}]], TraditionalForm]]],
 ".  In other words, keep recursing as long as ",
 StyleBox["Abs[Cos[#] - #] ",
  FontWeight->"Bold"],
 Cell[BoxData[
  FormBox[
   RowBox[{">", 
    SuperscriptBox["10", 
     RowBox[{"-", "6"}]], " "}], TraditionalForm]],
  FontWeight->"Bold"],
 StyleBox["&",
  FontWeight->"Bold"],
 " .  Compare the final value to the result that you previously obtained with \
",
 StyleBox["While",
  FontWeight->"Bold"],
 ".  If you are still uncomfortable with pure functions, it's time to get \
comfortable now.  Seriously.  Don't go on until you understand them."
}], "Text",
 CellChangeTimes->{{3.434420638155789*^9, 3.434420643468425*^9}, {
  3.434420780893818*^9, 3.4344207819563446`*^9}, {3.434422046176208*^9, 
  3.434422048098132*^9}, {3.4344221226469154`*^9, 3.4344221282251835`*^9}, {
  3.434426700232849*^9, 3.4344267388588376`*^9}, {3.4344270490542784`*^9, 
  3.434427050085555*^9}, {3.4344270898521976`*^9, 3.4344270916959953`*^9}, {
  3.4344271255406113`*^9, 3.4344271415722723`*^9}, {3.4344272200899067`*^9, 
  3.434427254856422*^9}, {3.4344275762709*^9, 3.434427645163288*^9}, {
  3.434427702399129*^9, 3.434427712086877*^9}, {3.4344278263866777`*^9, 
  3.4344278386057405`*^9}, {3.434427936405119*^9, 3.4344279866720304`*^9}, {
  3.434428025188642*^9, 3.4344280278137093`*^9}, {3.446322975984588*^9, 
  3.446322987187713*^9}, {3.446323018500213*^9, 3.446323103953338*^9}, {
  3.523754836691*^9, 3.523754878733*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"nes", " ", "=", " ", "1.0"}], ";", " ", 
  RowBox[{"NestWhile", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"Cos", "[", "#", "]"}], "&"}], ",", "nes", ",", 
    RowBox[{
     RowBox[{
      RowBox[{"Abs", "[", 
       RowBox[{
        RowBox[{"Cos", "[", "#", "]"}], "-", "#"}], "]"}], " ", ">", " ", 
      "1*^-6"}], " ", "&"}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.434427801870425*^9, 3.4344278224803276`*^9}, {
   3.4344278636376314`*^9, 3.434427928373664*^9}, {3.4344279922346735`*^9, 
   3.4344280116570454`*^9}, 3.4344332659750333`*^9, {3.527338397085067*^9, 
   3.5273384568626757`*^9}}],

Cell[BoxData["0.7390845495752126`"], "Output",
 CellChangeTimes->{3.5273384572726593`*^9}]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Other recursive functions (optional)", "Subsection",
 CellChangeTimes->{{3.4344201951131973`*^9, 3.434420238239301*^9}, {
  3.4344220742394266`*^9, 3.4344220775207605`*^9}, {3.434424028211322*^9, 
  3.4344240328520656`*^9}, {3.4344252884779587`*^9, 3.4344252886810894`*^9}, {
  3.434428070721058*^9, 3.4344280822526026`*^9}, {3.4344705048968816`*^9, 
  3.43447050931887*^9}}],

Cell[TextData[{
 "The guide page on ",
 StyleBox[ButtonBox["Functional Iteration",
  BaseStyle->"Link",
  ButtonData->"paclet://guide/FunctionalIteration"],
  FontWeight->"Bold"],
 " lists other recursive functions.  We will learn more about ",
 StyleBox[ButtonBox["FixedPoint",
  BaseStyle->"Link",
  ButtonData->"paclet://ref/FixedPoint"],
  FontWeight->"Bold"],
 " in the next lab.  Evaluate the cell below to see one interesting example \
of ",
 StyleBox[ButtonBox["Fold",
  BaseStyle->"Link",
  ButtonData->"paclet://ref/Fold"],
  FontWeight->"Bold"],
 ", which we modified from an example at the end of the tutorial on ",
 StyleBox[ButtonBox["Applying Functions Repeatedly",
  BaseStyle->"Link",
  ButtonData->"paclet://tutorial/ApplyingFunctionsRepeatedly"],
  FontWeight->"Bold"],
 ", and which achieves the same functionality as ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 "'s ",
 StyleBox["FromDigits",
  FontWeight->"Bold"],
 " function with integer input."
}], "Text",
 CellChangeTimes->{{3.434423740157073*^9, 3.434423901676833*^9}, {
  3.434423933068261*^9, 3.434423983803935*^9}, {3.434424039945997*^9, 
  3.434424063259094*^9}, {3.434424259701623*^9, 3.4344243431256337`*^9}, {
  3.4344250668629107`*^9, 3.4344250859102736`*^9}, {3.434425127286332*^9, 
  3.4344251550057917`*^9}, {3.434425209319682*^9, 3.4344252153823376`*^9}, {
  3.4344252627585506`*^9, 3.434425280243373*^9}}],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"mytry", "[", 
   RowBox[{"digitlist_", ",", "base_"}], "]"}], ":=", 
  RowBox[{"Fold", "[", 
   RowBox[{
    RowBox[{
     RowBox[{
      RowBox[{"base", "*", "#1"}], "+", "#2"}], "&"}], ",", "0", ",", 
    "digitlist"}], "]"}]}], "\[IndentingNewLine]", 
 RowBox[{"mytry", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"a", ",", "b", ",", "c", ",", "d", ",", "e", ",", "f", ",", "g"}],
     "}"}], ",", "10"}], "]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"%", "//", "Expand"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{"mytry", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"1", ",", "0", ",", "4", ",", "8", ",", "5", ",", "7", ",", "6"}],
     "}"}], ",", "10"}], "]"}], "\[IndentingNewLine]", 
 RowBox[{"FromDigits", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"1", ",", "0", ",", "4", ",", "8", ",", "5", ",", "7", ",", "6"}],
     "}"}], ",", "10"}], "]"}]}], "Input",
 CellChangeTimes->{{3.4344198594952307`*^9, 3.4344201467838345`*^9}, {
  3.4344250923635635`*^9, 3.434425120786166*^9}, {3.434425177381365*^9, 
  3.4344251820533595`*^9}, {3.4344252196793227`*^9, 3.4344252502269793`*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"10", " ", 
   RowBox[{"(", 
    RowBox[{
     RowBox[{"10", " ", 
      RowBox[{"(", 
       RowBox[{
        RowBox[{"10", " ", 
         RowBox[{"(", 
          RowBox[{
           RowBox[{"10", " ", 
            RowBox[{"(", 
             RowBox[{
              RowBox[{"10", " ", 
               RowBox[{"(", 
                RowBox[{
                 RowBox[{"10", " ", "a"}], "+", "b"}], ")"}]}], "+", "c"}], 
             ")"}]}], "+", "d"}], ")"}]}], "+", "e"}], ")"}]}], "+", "f"}], 
    ")"}]}], "+", "g"}]], "Output",
 CellChangeTimes->{3.5273384808417163`*^9}],

Cell[BoxData[
 RowBox[{
  RowBox[{"1000000", " ", "a"}], "+", 
  RowBox[{"100000", " ", "b"}], "+", 
  RowBox[{"10000", " ", "c"}], "+", 
  RowBox[{"1000", " ", "d"}], "+", 
  RowBox[{"100", " ", "e"}], "+", 
  RowBox[{"10", " ", "f"}], "+", "g"}]], "Output",
 CellChangeTimes->{3.5273384808417163`*^9}],

Cell[BoxData["1048576"], "Output",
 CellChangeTimes->{3.5273384808417163`*^9}],

Cell[BoxData["1048576"], "Output",
 CellChangeTimes->{3.527338480851716*^9}]
}, Open  ]]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Programming Paradigms (10 min)", "Section",
 CellChangeTimes->{{3.434411301338647*^9, 3.4344113219798007`*^9}, {
   3.434411705598996*^9, 3.434411713692953*^9}, {3.4344147488019*^9, 
   3.434414750598821*^9}, {3.4344147895216923`*^9, 3.4344147942874393`*^9}, {
   3.434417624563018*^9, 3.43441762601618*^9}, {3.4344184513185573`*^9, 
   3.4344184779442387`*^9}, {3.434420453119802*^9, 3.4344204586199427`*^9}, {
   3.4344314390688696`*^9, 3.4344314392718773`*^9}, {3.4344705429759817`*^9, 
   3.434470552444974*^9}, {3.4344706238061757`*^9, 3.4344706275562716`*^9}, 
   3.4967730282984123`*^9, {3.4976896635072002`*^9, 3.4976896647708*^9}, {
   3.501272985869921*^9, 3.5012729860599213`*^9}, {3.501273023429974*^9, 
   3.501273023659974*^9}}],

Cell[CellGroupData[{

Cell["\<\
(#14) Speed and Convenience (10 min)\
\>", "Subsection",
 CellChangeTimes->{{3.434470529006874*^9, 3.434470566007821*^9}, {
   3.496773303966977*^9, 3.496773307022282*^9}, 3.4974272448616*^9, {
   3.4976911486896*^9, 3.4976911491108*^9}, {3.5012730152399626`*^9, 
   3.501273015869963*^9}, {3.5237546425022*^9, 3.5237546427518*^9}}],

Cell[TextData[{
 "As you've no doubt noticed there are usally many ways to solve the same \
problem in ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 ".  So with many different ways to choose to do things, how do you decide \
which is \"best?\"  Here are some of the factors you might want to consider."
}], "Text",
 CellChangeTimes->{{3.4336955823503647`*^9, 3.433695588678652*^9}, {
   3.4336994133703117`*^9, 3.43369941469847*^9}, {3.4336996082503004`*^9, 
   3.4336996150942254`*^9}, {3.433700624041929*^9, 3.4337006417767577`*^9}, {
   3.4337006737150755`*^9, 3.4337008852204895`*^9}, {3.4337009390812435`*^9, 
   3.4337009593786383`*^9}, {3.4337009924107337`*^9, 3.433701007708*^9}, {
   3.4337010692720766`*^9, 3.4337012215884757`*^9}, 3.433701293012179*^9, {
   3.4337013346382446`*^9, 3.433701396999216*^9}, {3.4337014295000477`*^9, 
   3.4337014871733994`*^9}, {3.4337017223512945`*^9, 
   3.4337017263201466`*^9}, {3.43370214815907*^9, 3.433702151362277*^9}, 
   3.4337022828500185`*^9, {3.4337049340741377`*^9, 3.433704939371148*^9}, {
   3.4337058017838507`*^9, 3.4337058025182447`*^9}, {3.4337296163333406`*^9, 
   3.433729640505035*^9}, {3.433729682917398*^9, 3.43373011816197*^9}, {
   3.4337301481938667`*^9, 3.433730722497674*^9}, {3.433736433038677*^9, 
   3.433736433999501*^9}, {3.4337366058728247`*^9, 3.433736643085538*^9}, {
   3.433739241434061*^9, 3.43373924565921*^9}, {3.4337399667021227`*^9, 
   3.433740054157799*^9}, {3.433789198857231*^9, 3.4337892084043508`*^9}, {
   3.43385046828552*^9, 3.433850480306014*^9}, {3.434215105688426*^9, 
   3.4342151060321846`*^9}, {3.434324048863654*^9, 3.4343242520251045`*^9}, {
   3.434374595640828*^9, 3.4343747345370903`*^9}, 3.434374801942872*^9, {
   3.4343748434710093`*^9, 3.434375163389892*^9}, {3.434375244392448*^9, 
   3.434375408756588*^9}, {3.434375555406453*^9, 3.4343755787460423`*^9}, {
   3.4343756587458267`*^9, 3.434375868434889*^9}, {3.434375926012444*^9, 
   3.434375988256958*^9}, {3.4343760386981697`*^9, 3.434376040088203*^9}, {
   3.4343820084177933`*^9, 3.434382074603571*^9}, 3.434382122217732*^9, {
   3.4344113154327583`*^9, 3.4344113161046505`*^9}, {3.4344113966848383`*^9, 
   3.4344116842390747`*^9}, {3.4344117631317186`*^9, 
   3.4344121330943146`*^9}, {3.434412234018773*^9, 3.434412308067544*^9}, {
   3.434412830909053*^9, 3.434412926520876*^9}, {3.4344131269478817`*^9, 
   3.4344134810819473`*^9}, {3.434413518254774*^9, 3.4344135683810573`*^9}, {
   3.4344138960456953`*^9, 3.4344138982020006`*^9}, {3.4344141112699547`*^9, 
   3.434414120582693*^9}, {3.4344145948448343`*^9, 3.4344147426923685`*^9}, {
   3.4344147732400255`*^9, 3.434415485383256*^9}, {3.4344155284312334`*^9, 
   3.4344159626454735`*^9}, {3.434416019803187*^9, 3.4344160921019125`*^9}, {
   3.434416126790301*^9, 3.4344161991202774`*^9}, {3.4344163516866827`*^9, 
   3.4344166476630096`*^9}, {3.4344166833201723`*^9, 3.434416754243863*^9}, {
   3.434416792760474*^9, 3.434416855074569*^9}, {3.434416890247345*^9, 
   3.434416896044368*^9}, {3.4344169484050837`*^9, 3.434416986312304*^9}, {
   3.434417103034042*^9, 3.434417236849968*^9}, {3.43441726839765*^9, 
   3.4344174107450438`*^9}, {3.434417450730443*^9, 3.4344176126095867`*^9}, {
   3.4344176857677097`*^9, 3.4344177243936987`*^9}, {3.4344182399225206`*^9, 
   3.434418290533191*^9}, {3.434424376423361*^9, 3.434424500114027*^9}, {
   3.434424541943223*^9, 3.4344245655063267`*^9}, {3.4344246080855412`*^9, 
   3.4344246740559797`*^9}, {3.4344247984810405`*^9, 
   3.4344247984810405`*^9}, {3.4344248380758038`*^9, 3.434424846216637*^9}, {
   3.434424885436391*^9, 3.434424885436391*^9}, {3.4344315510438395`*^9, 
   3.4344315608232117`*^9}, {3.434431597941084*^9, 3.434431654648944*^9}, {
   3.434431690017152*^9, 3.4344317295408115`*^9}, {3.4344317656588755`*^9, 
   3.434431940484682*^9}, {3.434752407843852*^9, 3.4347525509716*^9}, {
   3.4347525861754007`*^9, 3.4347530219181423`*^9}, {3.4347530571375685`*^9, 
   3.4347532096248713`*^9}, {3.434753240094206*^9, 3.434753365409112*^9}, 
   3.4904405575184*^9, 3.490443067602*^9, {3.4967730349390764`*^9, 
   3.4967730426628485`*^9}, {3.4967732063832192`*^9, 3.496773241375718*^9}, {
   3.49677331190277*^9, 3.496773460738652*^9}, {3.4967735158901668`*^9, 
   3.4967735288974676`*^9}, 3.4974272448616*^9}],

Cell[CellGroupData[{

Cell["\<\
You should choose an approach which is as clear as possible both to you and \
to others who may use your program later.\
\>", "Item",
 CellChangeTimes->{{3.4967734810996885`*^9, 3.4967735130898867`*^9}, {
   3.4967735470262804`*^9, 3.4967735784964266`*^9}, {3.4967744554581146`*^9, 
   3.496774455462115*^9}, 3.4974272448616*^9}],

Cell["\<\
If you do a similar thing in a number of places in your code, use a common \
function to do it.  That way, if you find a problem and need to change it, \
you only have to do so in one place.\
\>", "Item",
 CellChangeTimes->{{3.4967744658081493`*^9, 3.4967745176643343`*^9}, 
   3.4974272448616*^9}],

Cell["\<\
Sometimes one way of accomplishing a task can take dramatically more memory \
or time than another way.  If the time starts to get long enough to be \
noticable or the memory needs limit what you can do in the calculation, \
consider alternate approaches which may be less demanding on the computer \
resources.\
\>", "Item",
 CellChangeTimes->{{3.4967745318217497`*^9, 3.4967746067752447`*^9}, {
   3.4967751126488266`*^9, 3.4967751126528273`*^9}, 3.4974272448616*^9}],

Cell[TextData[{
 "If there is a ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " function which already does what you want to do, it is usually faster and \
clearer to use it than to write your own."
}], "Item",
 CellChangeTimes->{{3.496775113992961*^9, 3.49677513608617*^9}, 
   3.4974272448616*^9}]
}, Open  ]],

Cell["", "Text",
 CellChangeTimes->{{3.4336955823503647`*^9, 3.433695588678652*^9}, {
   3.4336994133703117`*^9, 3.43369941469847*^9}, {3.4336996082503004`*^9, 
   3.4336996150942254`*^9}, {3.433700624041929*^9, 3.4337006417767577`*^9}, {
   3.4337006737150755`*^9, 3.4337008852204895`*^9}, {3.4337009390812435`*^9, 
   3.4337009593786383`*^9}, {3.4337009924107337`*^9, 3.433701007708*^9}, {
   3.4337010692720766`*^9, 3.4337012215884757`*^9}, 3.433701293012179*^9, {
   3.4337013346382446`*^9, 3.433701396999216*^9}, {3.4337014295000477`*^9, 
   3.4337014871733994`*^9}, {3.4337017223512945`*^9, 
   3.4337017263201466`*^9}, {3.43370214815907*^9, 3.433702151362277*^9}, 
   3.4337022828500185`*^9, {3.4337049340741377`*^9, 3.433704939371148*^9}, {
   3.4337058017838507`*^9, 3.4337058025182447`*^9}, {3.4337296163333406`*^9, 
   3.433729640505035*^9}, {3.433729682917398*^9, 3.43373011816197*^9}, {
   3.4337301481938667`*^9, 3.433730722497674*^9}, {3.433736433038677*^9, 
   3.433736433999501*^9}, {3.4337366058728247`*^9, 3.433736643085538*^9}, {
   3.433739241434061*^9, 3.43373924565921*^9}, {3.4337399667021227`*^9, 
   3.433740054157799*^9}, {3.433789198857231*^9, 3.4337892084043508`*^9}, {
   3.43385046828552*^9, 3.433850480306014*^9}, {3.434215105688426*^9, 
   3.4342151060321846`*^9}, {3.434324048863654*^9, 3.4343242520251045`*^9}, {
   3.434374595640828*^9, 3.4343747345370903`*^9}, 3.434374801942872*^9, {
   3.4343748434710093`*^9, 3.434375163389892*^9}, {3.434375244392448*^9, 
   3.434375408756588*^9}, {3.434375555406453*^9, 3.4343755787460423`*^9}, {
   3.4343756587458267`*^9, 3.434375868434889*^9}, {3.434375926012444*^9, 
   3.434375988256958*^9}, {3.4343760386981697`*^9, 3.434376040088203*^9}, {
   3.4343820084177933`*^9, 3.434382074603571*^9}, 3.434382122217732*^9, {
   3.4344113154327583`*^9, 3.4344113161046505`*^9}, {3.4344113966848383`*^9, 
   3.4344116842390747`*^9}, {3.4344117631317186`*^9, 
   3.4344121330943146`*^9}, {3.434412234018773*^9, 3.434412308067544*^9}, {
   3.434412830909053*^9, 3.434412926520876*^9}, {3.4344131269478817`*^9, 
   3.4344134810819473`*^9}, {3.434413518254774*^9, 3.4344135683810573`*^9}, {
   3.4344138960456953`*^9, 3.4344138982020006`*^9}, {3.4344141112699547`*^9, 
   3.434414120582693*^9}, {3.4344145948448343`*^9, 3.4344147426923685`*^9}, {
   3.4344147732400255`*^9, 3.434415485383256*^9}, {3.4344155284312334`*^9, 
   3.4344159626454735`*^9}, {3.434416019803187*^9, 3.4344160921019125`*^9}, {
   3.434416126790301*^9, 3.4344161991202774`*^9}, {3.4344163516866827`*^9, 
   3.4344166476630096`*^9}, {3.4344166833201723`*^9, 3.434416754243863*^9}, {
   3.434416792760474*^9, 3.434416855074569*^9}, {3.434416890247345*^9, 
   3.434416896044368*^9}, {3.4344169484050837`*^9, 3.434416986312304*^9}, {
   3.434417103034042*^9, 3.434417236849968*^9}, {3.43441726839765*^9, 
   3.4344174107450438`*^9}, {3.434417450730443*^9, 3.4344176126095867`*^9}, {
   3.4344176857677097`*^9, 3.4344177243936987`*^9}, {3.4344182399225206`*^9, 
   3.434418290533191*^9}, {3.434424376423361*^9, 3.434424500114027*^9}, {
   3.434424541943223*^9, 3.4344245655063267`*^9}, {3.4344246080855412`*^9, 
   3.4344246740559797`*^9}, {3.4344247984810405`*^9, 
   3.4344247984810405`*^9}, {3.4344248380758038`*^9, 3.434424846216637*^9}, {
   3.434424885436391*^9, 3.434424885436391*^9}, {3.4344315510438395`*^9, 
   3.4344315608232117`*^9}, {3.434431597941084*^9, 3.434431654648944*^9}, {
   3.434431690017152*^9, 3.4344317295408115`*^9}, {3.4344317656588755`*^9, 
   3.434431940484682*^9}, {3.434752407843852*^9, 3.4347525509716*^9}, {
   3.4347525861754007`*^9, 3.4347530219181423`*^9}, {3.4347530571375685`*^9, 
   3.4347532096248713`*^9}, {3.434753240094206*^9, 3.434753365409112*^9}, 
   3.4904405575184*^9, 3.490443067602*^9, {3.4967730349390764`*^9, 
   3.4967730426628485`*^9}, {3.4967732063832192`*^9, 3.496773241375718*^9}, {
   3.49677331190277*^9, 3.496773479858564*^9}, 3.4967746131448812`*^9, 
   3.4974272448616*^9}],

Cell["\<\
Here is an example of several ways to find the mean (average) values of a \
large number of random real numbers.  A fast, compact way to do so is to \
generate a list of numbers with a single call to RandomReal and then use the \
Mean function.\
\>", "Text",
 CellChangeTimes->{{3.496776633310878*^9, 3.4967766364311895`*^9}, {
   3.4974264791668*^9, 3.4974265115368*^9}, {3.4974266293168*^9, 
   3.4974266688004*^9}, 3.4974272448616*^9}],

Cell[BoxData[
 RowBox[{
  RowBox[{"nvals", "=", "1000000"}], ";"}]], "Input",
 CellChangeTimes->{{3.496774780020567*^9, 3.496774786868252*^9}, 
   3.4974272448616*^9}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Timing", "[", 
  RowBox[{"Mean", "[", 
   RowBox[{"RandomReal", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"-", "1"}], ",", "1"}], "}"}], ",", "nvals"}], "]"}], "]"}], 
  "]"}]], "Input",
 CellChangeTimes->{{3.4974266759452*^9, 3.4974266984560003`*^9}, 
   3.4974272448616*^9}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"0.0310000000000001`", ",", 
   RowBox[{"-", "0.00004107582245078286`"}]}], "}"}]], "Output",
 CellChangeTimes->{3.5273385670482683`*^9}]
}, Open  ]],

Cell["\<\
A noticeable slower way to do the same thing would be to generate the random \
numbers individually within a Table statement or a loop.\
\>", "Text",
 CellChangeTimes->{{3.4974267160996*^9, 3.4974267618856*^9}, 
   3.4974272448616*^9}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Timing", "[", 
  RowBox[{
   RowBox[{"vals", "=", 
    RowBox[{"Table", "[", 
     RowBox[{
      RowBox[{"RandomReal", "[", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"-", "1"}], ",", "1"}], "}"}], "]"}], ",", 
      RowBox[{"{", 
       RowBox[{"i", ",", "1", ",", "nvals"}], "}"}]}], "]"}]}], ";", 
   "\[IndentingNewLine]", 
   RowBox[{"sum", "=", "0"}], ";", "\[IndentingNewLine]", 
   RowBox[{"For", "[", 
    RowBox[{
     RowBox[{"i", "=", "1"}], ",", " ", 
     RowBox[{"i", "\[LessEqual]", "nvals"}], ",", " ", 
     RowBox[{"i", "++"}], ",", " ", 
     RowBox[{"sum", " ", "+=", 
      RowBox[{"vals", "[", 
       RowBox[{"[", "i", "]"}], "]"}]}]}], "]"}], ";", "\[IndentingNewLine]", 
   RowBox[{"sum", "/", "nvals"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.496774679697536*^9, 3.4967747071162777`*^9}, {
   3.4967747389064565`*^9, 3.4967748368632507`*^9}, {3.496774905979162*^9, 
   3.4967749237559395`*^9}, {3.496775198059367*^9, 3.496775218347396*^9}, {
   3.4967752581573763`*^9, 3.496775281258686*^9}, 3.4974272448772*^9}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"3.432`", ",", "0.001054076069631556`"}], "}"}]], "Output",
 GeneratedCell->False,
 CellAutoOverwrite->False,
 CellChangeTimes->{{3.4967752240659676`*^9, 3.496775236603221*^9}, {
   3.4967752692574863`*^9, 3.496775286150175*^9}, 3.4967766231688633`*^9, 
   3.4974267693892*^9, 3.4974272448772*^9, 3.5273385867074814`*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"Timing", "[", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"sum", "=", "0"}], ";", "\[IndentingNewLine]", 
    RowBox[{"For", "[", 
     RowBox[{
      RowBox[{"i", "=", "1"}], ",", " ", 
      RowBox[{"i", "\[LessEqual]", "nvals"}], ",", " ", 
      RowBox[{"i", "++"}], ",", 
      RowBox[{"sum", " ", "+=", " ", 
       RowBox[{"RandomReal", "[", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"-", "1"}], ",", "1"}], "}"}], "]"}]}]}], "]"}], ";", 
    "\[IndentingNewLine]", 
    RowBox[{"sum", "/", "nvals"}]}], "\[IndentingNewLine]", "]"}], 
  "\[IndentingNewLine]"}]], "Input",
 CellChangeTimes->{{3.4967766889964457`*^9, 3.4967766896475105`*^9}, {
   3.4967767542399693`*^9, 3.496776795698115*^9}, {3.4967768536339083`*^9, 
   3.4967768947060146`*^9}, {3.496776992735817*^9, 3.4967770910186443`*^9}, 
   3.4974272448772*^9}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"3.245`", ",", 
   RowBox[{"-", "0.0005692688782552429`"}]}], "}"}]], "Output",
 GeneratedCell->False,
 CellAutoOverwrite->False,
 CellChangeTimes->{{3.49677684795534*^9, 3.496776901652709*^9}, {
   3.4967770672992725`*^9, 3.4967770952540674`*^9}, 3.4974267731331997`*^9, 
   3.4974272448772*^9, 3.5273385962870984`*^9}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"3.6819999999999986`", ",", "0.0007841738413028492`"}], 
  "}"}]], "Output",
 GeneratedCell->False,
 CellAutoOverwrite->False,
 CellChangeTimes->{{3.49677684795534*^9, 3.496776901652709*^9}, {
   3.4967770672992725`*^9, 3.4967770952540674`*^9}, 3.4974267731331997`*^9, 
   3.4974272448772*^9}]
}, Open  ]],

Cell["\<\
On the other hand, if you have a much larger number of random numbers, you \
will run out of memory trying to generate a list of all of them.  In this \
case, your only alternative is to create them in smaller chunks.\
\>", "Text",
 CellChangeTimes->{{3.49742678176*^9, 3.4974268688392*^9}, 3.4974272448772*^9}
  ],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"nvals", "=", "100000000"}]], "Input",
 CellChangeTimes->{{3.4974268746736*^9, 3.4974268780587997`*^9}, 
   3.4974271594983997`*^9, 3.4974272448772*^9}],

Cell[BoxData["100000000"], "Output",
 GeneratedCell->False,
 CellAutoOverwrite->False,
 CellChangeTimes->{3.49742687887*^9, 3.497427089158*^9, 3.4974271600132*^9, 
  3.4974272448772*^9, 3.5273386292257805`*^9}],

Cell[BoxData["100000000"], "Output",
 GeneratedCell->False,
 CellAutoOverwrite->False,
 CellChangeTimes->{3.49742687887*^9, 3.497427089158*^9, 3.4974271600132*^9, 
  3.4974272448772*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Timing", "[", 
  RowBox[{"Mean", "[", 
   RowBox[{"RandomReal", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"-", "1"}], ",", "1"}], "}"}], ",", "1000000000"}], "]"}], 
   "]"}], "]"}]], "Input",
 CellChangeTimes->{{3.4967749455811214`*^9, 3.496774959035467*^9}, {
   3.4967774705835967`*^9, 3.496777516662204*^9}, 3.4974272448772*^9, {
   3.527338639075387*^9, 3.5273386410153093`*^9}}],

Cell["\<\

No more memory available.
Mathematica kernel has shut down.
Try quitting other applications and then retry.\
\>", "Print",
 CellChangeTimes->{3.527338641585286*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{
   "reset", " ", "nvals", " ", "since", " ", "we", " ", "have", " ", "quit", 
    " ", "the", " ", "kernel"}], " ", "*)"}], "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{"nvals", " ", "=", " ", "100000000"}], "\[IndentingNewLine]", 
   RowBox[{"Timing", "[", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"sum", "=", "0"}], ";", "\[IndentingNewLine]", 
     RowBox[{"(*", " ", 
      RowBox[{
       RowBox[{
       "Assume", " ", "nvals", " ", "is", " ", "a", " ", "multiple", " ", 
        "of", " ", "1000000"}], ",", " ", 
       RowBox[{"otherwise", " ", "this", " ", "fails"}]}], " ", "*)"}], 
     "\[IndentingNewLine]", 
     RowBox[{"loops", "=", 
      RowBox[{"nvals", "/", "1000000"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"For", "[", 
      RowBox[{
       RowBox[{"i", "=", "0"}], ",", " ", 
       RowBox[{"i", "<", "loops"}], ",", " ", 
       RowBox[{"i", "++"}], ",", " ", 
       RowBox[{"sum", "+=", " ", 
        RowBox[{"Mean", "[", 
         RowBox[{"RandomReal", "[", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{
             RowBox[{"-", "1"}], ",", "1"}], "}"}], ",", "1000000"}], "]"}], 
         "]"}]}]}], "]"}], ";", "\[IndentingNewLine]", 
     RowBox[{"sum", "/", "loops"}]}], "\[IndentingNewLine]", 
    "]"}]}]}]], "Input",
 CellChangeTimes->{{3.4974269113024*^9, 3.4974271161616*^9}, 
   3.4974271740376*^9, 3.4974272448928003`*^9}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"2.667`", ",", "0.000012085218670687627`"}], "}"}]], "Output",
 GeneratedCell->False,
 CellAutoOverwrite->False,
 CellChangeTimes->{{3.4974270757888002`*^9, 3.4974271171912003`*^9}, {
   3.4974271667212*^9, 3.4974271902616*^9}, 3.4974272448928003`*^9, 
   3.527338650664923*^9}],

Cell[BoxData["100000000"], "Output",
 GeneratedCell->False,
 CellAutoOverwrite->False,
 CellChangeTimes->{{3.4974270757888002`*^9, 3.4974271171912003`*^9}, {
   3.4974271667212*^9, 3.4974271902616*^9}, 3.4974272448928003`*^9, 
   3.527338647595046*^9}],

Cell[BoxData["100000000"], "Output",
 GeneratedCell->False,
 CellAutoOverwrite->False,
 CellChangeTimes->{{3.4974270757888002`*^9, 3.4974271171912003`*^9}, {
   3.4974271667212*^9, 3.4974271902616*^9}, 3.4974272448928003`*^9}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"2.387`", ",", "4.11393629921586`*^-6"}], "}"}]], "Output",
 GeneratedCell->False,
 CellAutoOverwrite->False,
 CellChangeTimes->{{3.4974270757888002`*^9, 3.4974271171912003`*^9}, {
   3.4974271667212*^9, 3.4974271929448*^9}, 3.4974272448928003`*^9}]
}, Open  ]],

Cell["\<\
We could have also done this with single function evaluations, but it would \
have been much slower.\
\>", "Text",
 CellChangeTimes->{{3.4974271309192*^9, 3.4974271549119997`*^9}, 
   3.4974272448928003`*^9, {3.4974273148120003`*^9, 3.4974273338908*^9}}],

Cell[TextData[{
 "To illustrate the value of using internal ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " functions to do a task, consider finding the numerical integral of ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{"f", " ", "x"}], "=", 
    FractionBox["1", 
     RowBox[{"log", "(", 
      RowBox[{
       RowBox[{"sin", "(", 
        RowBox[{"5", " ", "x"}], ")"}], "+", 
       FractionBox["21", "10"]}], ")"}]]}], TraditionalForm]]],
 " between 0 and 40."
}], "Text",
 CellChangeTimes->{{3.4974287170648003`*^9, 3.4974288159688*^9}, {
   3.4974288764188004`*^9, 3.4974288832516003`*^9}, {3.4974289599323997`*^9, 
   3.497428986234*^9}, {3.497429020788*^9, 3.497429071176*^9}, 
   3.4974291474288*^9, {3.4974291841512003`*^9, 3.4974292055076*^9}, {
   3.4976899840404*^9, 3.4976899878936*^9}, {3.4976901776208*^9, 
   3.4976901777144003`*^9}, {3.5012730920761433`*^9, 3.5012731098961687`*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"f14", "[", "x_", "]"}], ":=", 
  RowBox[{
   RowBox[{"1", "/", 
    RowBox[{"Log", "[", 
     RowBox[{
      RowBox[{"21", "/", "10"}], "+", 
      RowBox[{"Sin", "[", 
       RowBox[{"5", "*", "x"}], "]"}]}], "]"}]}], "//", 
   RowBox[{
    RowBox[{"N", "[", 
     RowBox[{"#", ",", "20"}], "]"}], "&"}]}]}]], "Input",
 CellChangeTimes->{{3.4974273973672*^9, 3.4974274204708*^9}, {
   3.4974277277595997`*^9, 3.4974277372756*^9}, {3.497428072972*^9, 
   3.4974280736584*^9}, {3.4974282014068003`*^9, 3.4974282292995996`*^9}, {
   3.4974283557532*^9, 3.4974283896364*^9}, 3.4974285458236*^9, {
   3.4974290355456*^9, 3.4974290360448*^9}, {3.4974290761991997`*^9, 
   3.497429085216*^9}, {3.4974303648216*^9, 3.4974303665220003`*^9}, {
   3.4974306127212*^9, 3.4974307001904*^9}, {3.4974307402824*^9, 
   3.497430742638*^9}, {3.4974416892516003`*^9, 3.497441696568*^9}, {
   3.4974747965601997`*^9, 3.4974747968254004`*^9}, {3.4974748331734*^9, 
   3.4974748334542*^9}, {3.4974748757146*^9, 3.4974748774618*^9}, {
   3.4976896991532*^9, 3.4976897244564*^9}, {3.4976897569824*^9, 
   3.4976897855148*^9}, {3.497689835856*^9, 3.4976898394128*^9}, {
   3.4976899939776*^9, 3.4976900001396*^9}, {3.5273404423632526`*^9, 
   3.527340442493247*^9}}],

Cell[TextData[{
 "First compute this integral using ",
 ButtonBox["NIntegrate ",
  BaseStyle->"Link",
  ButtonData->"paclet://ref/NIntegrate"],
 "and ",
 ButtonBox["Timing",
  BaseStyle->"Link",
  ButtonData->"paclet://ref/Timing"],
 ".  Use a PrecisionGoal of 7 and a WorkingPrecision of 20."
}], "Text",
 CellChangeTimes->{{3.4974292132764*^9, 3.4974292306236*^9}, {
  3.4974292875792*^9, 3.4974293923332*^9}, {3.4974304795908003`*^9, 
  3.4974305199636*^9}, {3.4976900202948*^9, 3.4976900335236*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Timing", "[", 
  RowBox[{"NIntegrate", "[", 
   RowBox[{
    RowBox[{"f14", "[", "x", "]"}], ",", 
    RowBox[{"{", 
     RowBox[{"x", ",", "0", ",", "40"}], "}"}]}], "]"}], "]"}]], "Input",
 CellChangeTimes->{{3.4974284029588003`*^9, 3.4974284102752*^9}, 
   3.4974285642472*^9, 3.4974291277728*^9, {3.4974304113096*^9, 
   3.4974304176588*^9}, {3.49743075465*^9, 3.4974307548216*^9}, {
   3.4974416705628*^9, 3.4974416767872*^9}, {3.4974417076284*^9, 
   3.4974417087984*^9}, {3.4974417479856*^9, 3.4974417483132*^9}, {
   3.4976897075148*^9, 3.4976898560892*^9}, 3.4976900381879997`*^9, {
   3.4976901557964*^9, 3.497690208384*^9}, 3.4976909740788*^9, {
   3.527338677543848*^9, 3.527338697013069*^9}, {3.527340444463168*^9, 
   3.527340444503167*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"0.062000000000000215`", ",", "105.09022406729308`"}], 
  "}"}]], "Output",
 CellChangeTimes->{3.5273386978830347`*^9, 3.5273404448331537`*^9, 
  3.527940782038512*^9, 3.527940867545092*^9}]
}, Open  ]],

Cell[TextData[{
 "Now time how long it takes to compute this using the mid-point rule.  For \
an integral from ",
 Cell[BoxData[
  FormBox[
   SubscriptBox["x", "i"], TraditionalForm]]],
 " to ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    SubscriptBox["x", "f"], " "}], TraditionalForm]]],
 ", the midpoint rule approximates the integral using n-point Riemann sums as \
follows:\n",
 Cell[BoxData[{
  StyleBox[
   RowBox[{"dx", "=", 
    FractionBox[
     RowBox[{
      SubscriptBox["x", "f"], "-", 
      SubscriptBox["x", "i"]}], "n"]}], "DisplayFormula"], "\n", 
  RowBox[{
   StyleBox[
    RowBox[{
     SubscriptBox[
      SuperscriptBox["\[Integral]", 
       SubscriptBox["x", "f"]], 
      SubscriptBox["x", "i"]], 
     RowBox[{"f", 
      RowBox[{"(", "x", ")"}], 
      RowBox[{"\[DifferentialD]", "x"}]}]}], "DisplayFormula"], 
   StyleBox["=", "DisplayFormula"], 
   RowBox[{
    StyleBox["dx", "DisplayFormula"], 
    RowBox[{
     StyleBox[
      UnderoverscriptBox["\[Sum]", 
       RowBox[{"i", "=", "0"}], 
       RowBox[{"n", "-", "1"}]], "DisplayFormula"], 
     RowBox[{
      StyleBox["f", "DisplayFormula"], 
      RowBox[{
       StyleBox["(", "DisplayFormula"], 
       RowBox[{
        SubscriptBox[
         StyleBox["x", "DisplayFormula"], "i"], "+", 
        StyleBox[
         RowBox[{"dx", 
          RowBox[{"(", 
           RowBox[{"i", "+", 
            FractionBox["1", "2"]}], ")"}]}], "DisplayFormula"]}], 
       StyleBox[")", "DisplayFormula"]}]}]}]}]}]}]]
}], "Text",
 CellChangeTimes->{{3.4974294027384*^9, 3.4974295721076*^9}, {
   3.4974296115755997`*^9, 3.4974297128976*^9}, {3.4974298706292*^9, 
   3.4974299115324*^9}, {3.4974299469132*^9, 3.4974300807612*^9}, {
   3.4974301159236*^9, 3.4974301360788*^9}, {3.4974302315508003`*^9, 
   3.4974302389296*^9}, {3.4974305320224*^9, 3.4974305494164*^9}, 
   3.4974745419681997`*^9, {3.5012731279261937`*^9, 3.5012731302861967`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"reimann", "[", "n_", "]"}], ":=", 
   RowBox[{"Timing", "[", 
    RowBox[{
     FractionBox["40", "n"], "*", 
     RowBox[{"Sum", "[", 
      RowBox[{
       RowBox[{"f14", "[", 
        RowBox[{"0", "+", 
         RowBox[{
          FractionBox["40", "n"], "*", 
          RowBox[{"(", 
           RowBox[{"i", "+", 
            FractionBox["1", "2"]}], ")"}]}]}], "]"}], ",", 
       RowBox[{"{", 
        RowBox[{"i", ",", "1", ",", "n"}], "}"}]}], "]"}]}], "]"}]}], " ", 
  RowBox[{"(*", 
   RowBox[{
    RowBox[{"don", "'"}], "t", " ", "get", " ", "this", " ", "one"}], 
   "*)"}]}], "\[IndentingNewLine]", 
 RowBox[{"reimann", "[", "200000", "]"}]}], "Input",
 CellChangeTimes->{{3.4974274276312*^9, 3.4974277249672003`*^9}, 
   3.4974278214063997`*^9, 3.49742804887*^9, {3.4974280791808*^9, 
   3.4974281660884*^9}, {3.4974284239564*^9, 3.4974284313196*^9}, {
   3.497428583248*^9, 3.497428612186*^9}, {3.497429097072*^9, 
   3.4974291429048*^9}, 3.4974297375612*^9, {3.49743015444*^9, 
   3.4974302486328*^9}, {3.4974303018756*^9, 3.4974304057404003`*^9}, {
   3.497430769392*^9, 3.4974307704216003`*^9}, {3.4974417160524*^9, 
   3.4974417718691998`*^9}, {3.497474890285*^9, 3.4974748904566*^9}, {
   3.4976898739356003`*^9, 3.497689959954*^9}, {3.4976900552076*^9, 
   3.4976900561124*^9}, 3.4976900999172*^9, 3.4976909786496*^9, {
   3.527338713842396*^9, 3.527338717592246*^9}, 3.5273387492209806`*^9, {
   3.5273403686861997`*^9, 3.5273404178742323`*^9}, {3.5273404488129945`*^9, 
   3.527340559738557*^9}, {3.527341390805313*^9, 3.5273414372234564`*^9}, 
   3.5273415231200204`*^9, {3.527940775778763*^9, 3.5279407779086776`*^9}, {
   3.527940855865559*^9, 3.5279408571855063`*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"88.078`", ",", "105.09093251939886566856069739732`20."}], 
  "}"}]], "Output",
 CellChangeTimes->{{3.5273414120444636`*^9, 3.527341432953627*^9}, 
   3.527341466972266*^9, 3.5279408622553034`*^9, 3.5279409564815345`*^9}]
}, Open  ]],

Cell["How many points are required to get 6 significant digits?", "Text",
 CellChangeTimes->{{3.4974297477792*^9, 3.4974297734723997`*^9}}],

Cell["", "Text",
 CellChangeTimes->{{3.497429784876*^9, 3.4974297854376*^9}}],

Cell["How do the timings compare?", "Text",
 CellChangeTimes->{{3.49742978004*^9, 3.4974297832536*^9}}],

Cell["", "Text",
 CellChangeTimes->{{3.497429786826*^9, 3.4974297874812*^9}}]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Working on Your Own (30 min)", "Section",
 CellChangeTimes->{{3.5136280858004*^9, 3.513628089638*^9}, {
  3.5237549365466003`*^9, 3.5237549549858*^9}, {3.5237553496066*^9, 
  3.5237553508546*^9}}],

Cell[CellGroupData[{

Cell["(#15) Atomic Beam (15 min)", "Subsection",
 CellChangeTimes->{{3.5136283094264*^9, 3.513628340174*^9}, {
  3.5237546495222*^9, 3.5237546514254*^9}, {3.5237551257746*^9, 
  3.5237551274594*^9}}],

Cell[TextData[{
 "You create a beam of sodium atoms by heating them up in an oven with a 4 mm \
slit as shown in the diagram below.  The beam is collimated with another slit \
20 cm away which also has a width of 4 mm.  One meter later, the atoms are \
detected by illuminating them with a resonant laser beam 2 mm wide and \
monitoring the fluorescense.  Plot the intensity of the fluorescence signal \
seen at the end of the beam.  Note that all of the angles in this problem are \
small enough to use the small angle approximation (",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{"sin", "(", "\[Theta]", ")"}], "=", 
    RowBox[{
     RowBox[{"tan", "(", "\[Theta]", ")"}], "=", "\[Theta]"}]}], 
   TraditionalForm]]],
 ")."
}], "Text",
 CellChangeTimes->{{3.5136283226708*^9, 3.513628374416*^9}, {
  3.5136284100776*^9, 3.5136285463124*^9}, {3.5136287131076*^9, 
  3.5136287139656*^9}, {3.5237340628078537`*^9, 3.523734079608534*^9}, {
  3.5237558521138*^9, 3.5237559161205997`*^9}}],

Cell["\<\
HINT : Assume the atoms leave the first slit with an equal probability of \
going any direction from any point in the slit.  (This isn\[CloseCurlyQuote]t \
strictly true, but it\[CloseCurlyQuote]s a good approximation in this case.)  \
You will find a condition expression or piecewise function good ways to \
represent this beam.  If you look back at the first slit from the \
fluorescense point, the intensity of the beam will be proportional to the \
amount of the first slit that you can see through the second slit at that \
point.

The fluorescense signal is the integral of the product of the rectangular \
laser beam and the fraction of the atomic beam it illuminates at each angle.\
\>", "Text",
 CellChangeTimes->{{3.5136285502904*^9, 3.5136287008304*^9}, {
  3.5237340934179144`*^9, 3.5237341232438965`*^9}, {3.5237554527382*^9, 
  3.5237555143426*^9}}],

Cell[BoxData[
 GraphicsBox[{{
    {RGBColor[0.501961, 0, 0.501961], EdgeForm[{RGBColor[0., 0., 0.], Opacity[
     1.], AbsoluteThickness[3]}], FaceForm[{RGBColor[
     0.0196078, 0.980392, 0.141176], Opacity[0.23]}], 
     RectangleBox[{0.10624991666666664`, 0.7416666666666667}, \
{0.08124991666666664, 0.5833333333333335}]}, 
    {RGBColor[0.501961, 0, 0.501961], EdgeForm[{RGBColor[0., 0., 0.], Opacity[
     1.], AbsoluteThickness[3]}], FaceForm[{RGBColor[
     0.0196078, 0.980392, 0.141176], Opacity[0.23]}], 
     RectangleBox[{0.10624991666666664`, 0.5375000000000005}, \
{0.08124991666666662, 0.3791666666666673}]}}, GeometricTransformationBox[{
     {RGBColor[0.501961, 0, 0.501961], EdgeForm[{RGBColor[0., 0., 0.], 
      Opacity[1.], AbsoluteThickness[3]}], FaceForm[{RGBColor[
      0.0196078, 0.980392, 0.141176], Opacity[0.23]}], 
      RectangleBox[{0.10347213888888843`, 0.7527777777777778}, \
{0.07847213888888865, 0.5944444444444446}]}, 
     {RGBColor[0.501961, 0, 0.501961], EdgeForm[{RGBColor[0., 0., 0.], 
      Opacity[1.], AbsoluteThickness[3]}], FaceForm[{RGBColor[
      0.0196078, 0.980392, 0.141176], Opacity[0.23]}], 
      RectangleBox[{0.10624991666666628`, 0.5486111111111116}, \
{0.08124991666666648, 0.3902777777777784}]}}, {{
    0.3562499166666668, -0.007638888888888751}}], 
   {RGBColor[0.501961, 0, 0.501961], AbsolutePointSize[8], AbsoluteThickness[
    6], Arrowheads[{{0.04, Automatic}}], StrokeForm[{RGBColor[0., 0., 0.], 
    Opacity[1.]}], EdgeForm[{RGBColor[0., 0., 0.], Opacity[1.], 
    AbsoluteThickness[3]}], FaceForm[{RGBColor[0.0196078, 0.980392, 0.141176],
     Opacity[0.23]}], 
    ArrowBox[{{0.07222205555555561, 0.5611111111111124}, {1.1333331666666666`,
      0.5611111111111116}}]}, 
   {RGBColor[0.501961, 0, 0.501961], AbsolutePointSize[8], AbsoluteThickness[
    3], Arrowheads[{{0.04, Automatic}}], StrokeForm[{RGBColor[
    1, 0.501961, 0.25098], Opacity[1.]}], EdgeForm[{RGBColor[0., 0., 0.], 
    Opacity[1.], AbsoluteThickness[3]}], FaceForm[{RGBColor[
    0.0196078, 0.980392, 0.141176], Opacity[0.23]}], 
    ArrowBox[{{1.0861109444444443`, 0.8916666666666668}, {1.0916664999999999`,
      0.6111111111111114}}]}, InsetBox[
    StyleBox[Cell["First Slit",
      GeneratedCell->False,
      CellAutoOverwrite->False,
      CellBaseline->Baseline,
      TextAlignment->Left],
     FontColor->GrayLevel[0.],
     Background->RGBColor[
      0.9490196078431372, 1., 
       0.8666666666666667]], {0.03611094444444446, 0.7777777777777781}, {
    Left, Baseline},
    Alignment->{Left, Top}], InsetBox[
    StyleBox[Cell["Second Slit",
      GeneratedCell->False,
      CellAutoOverwrite->False,
      CellBaseline->Baseline,
      TextAlignment->Left],
     FontColor->GrayLevel[0.],
     Background->RGBColor[
      0.9490196078431372, 1., 
       0.8666666666666667]], {0.3805553888888889, 0.7888888888888892}, {
    Left, Baseline},
    Alignment->{Left, Top}], InsetBox[
    StyleBox[Cell["Atomic Beam",
      GeneratedCell->False,
      CellAutoOverwrite->False,
      CellBaseline->Baseline,
      TextAlignment->Left],
     FontColor->GrayLevel[0.],
     Background->RGBColor[
      0.9490196078431372, 1., 
       0.8666666666666667]], {0.6416664999999999, 0.627777777777778}, {
    Left, Baseline},
    Alignment->{Left, Top}], InsetBox[
    StyleBox[Cell["laser",
      GeneratedCell->False,
      CellAutoOverwrite->False,
      CellBaseline->Baseline,
      TextAlignment->Left],
     FontColor->GrayLevel[0.],
     Background->RGBColor[
      0.9490196078431372, 1., 
       0.8666666666666667]], {1.1305553888888888`, 0.788888888888889}, {
    Left, Baseline},
    Alignment->{Left, Top}]},
  ContentSelectable->True,
  ImagePadding->{{0., 0.}, {0., 0.}},
  ImageSize->{480, 360},
  PlotRange->{{0., 1.333333}, {0., 1.}},
  PlotRangePadding->Automatic]], "Input",
 CellChangeTimes->{{3.5237555569774*^9, 3.5237556885165997`*^9}, {
  3.5237557418686*^9, 3.5237557933798*^9}}],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"intensity", "[", "x_", "]"}], ":=", "  ", 
  RowBox[{"Which", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"Abs", "[", "x", "]"}], ">", ".022"}], ",", "0", ",", 
    RowBox[{
     RowBox[{"-", ".022"}], "\[LessEqual]", "x", "<", 
     RowBox[{"-", ".002"}]}], ",", 
    RowBox[{
     RowBox[{"50", "*", "x"}], "+", "1.1"}], ",", 
    RowBox[{
     RowBox[{"-", ".002"}], "<", "x", "<", ".002"}], ",", "1", ",", 
    RowBox[{".002", "\[LessEqual]", "x", "<", ".022"}], ",", 
    RowBox[{
     RowBox[{
      RowBox[{"-", "50"}], "*", "x"}], "+", "1.1"}]}], 
   "]"}]}], "\[IndentingNewLine]", 
 RowBox[{"Plot", "[", 
  RowBox[{
   RowBox[{"intensity", "[", "x", "]"}], ",", 
   RowBox[{"{", 
    RowBox[{"x", ",", 
     RowBox[{"-", ".05"}], ",", ".05"}], "}"}]}], 
  "]"}], "\[IndentingNewLine]"}], "Input",
 CellChangeTimes->{{3.5273405741779795`*^9, 3.5273405825776434`*^9}, {
  3.5273408838655915`*^9, 3.5273409664522877`*^9}, {3.527341107566643*^9, 
  3.5273411319156694`*^9}, {3.527341622266054*^9, 3.527341689643359*^9}, {
  3.5273417278818293`*^9, 3.5273418308377113`*^9}, {3.52794096684112*^9, 
  3.5279410290686307`*^9}}],

Cell[BoxData[
 GraphicsBox[{{}, {}, 
   {Hue[0.67, 0.6, 0.6], LineBox[CompressedData["
1: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
nleHMQ==
     "]]}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->True,
  AxesOrigin->{0, 0},
  PlotRange->{{-0.05, 0.05}, {0., 1.}},
  PlotRangeClipping->True,
  PlotRangePadding->{
    Scaled[0.02], 
    Scaled[0.02]}]], "Output",
 CellChangeTimes->{3.5279410294786143`*^9}]
}, Open  ]],

Cell[BoxData[
 RowBox[{"Clear", "[", "intensity", "]"}]], "Input",
 CellChangeTimes->{{3.5273409485130053`*^9, 3.527340952002866*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell["\<\
(#16) Finite Square Well (15 min)\
\>", "Subsection",
 CellChangeTimes->{{3.523732483060895*^9, 3.523732487844373*^9}, {
  3.5237546546233997`*^9, 3.523754656433*^9}, {3.5237551173038*^9, 
  3.5237551226546*^9}}],

Cell["\<\
The finite square is a quantum mechanics problem which only has a numerical \
solution for the energy.  We got an approximate solution earlier using the \
variational principle.  Here we will find an arbitrarily precise solution.\
\>", "Text",
 CellChangeTimes->{{3.5237559359326*^9, 3.5237560129653997`*^9}}],

Cell[TextData[{
 "Assume we have a particle in a potential well which is 0 between -1 and 1 \
and 3 outside this region.  We\[CloseCurlyQuote]ll choose units where the \
mass of the particle is 1 and Plank\[CloseCurlyQuote]s constant is also 1.  \
If we are interest in the lowest energy state, the wave function inside the \
well must have the form ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{"\[Psi]", "(", "x", ")"}], "=", 
    RowBox[{"c1", " ", 
     RowBox[{"cos", "(", 
      RowBox[{"k", " ", "x"}], ")"}]}]}], TraditionalForm]]],
 " where ",
 Cell[BoxData[
  FormBox[
   RowBox[{"k", "=", 
    SqrtBox[
     RowBox[{"2", " ", "e"}]]}], TraditionalForm]]],
 "  with e being the energy of the particle.  For our purposes, the \
normalization of the wave funciton doesn\[CloseCurlyQuote]t matter and we can \
just set c1=1.  Write a function for the wave function ",
 Cell[BoxData[
  FormBox[
   RowBox[{"\[Psi]", "(", "x", ")"}], TraditionalForm]]],
 " and the potential energy ",
 Cell[BoxData[
  FormBox[
   RowBox[{"v", "(", "x", ")"}], TraditionalForm]]],
 " and plot these on the same graph.  Use a value of 1 for k at this point \
until we can find something better."
}], "Text",
 CellChangeTimes->{{3.5237324909476833`*^9, 3.5237325277653646`*^9}, {
  3.523756017271*^9, 3.5237563287874002`*^9}}],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"energy", " ", "[", "x_", "]"}], ":=", " ", 
   RowBox[{"Which", "[", 
    RowBox[{
     RowBox[{
      RowBox[{"-", "1"}], "<", "x", "<", "1"}], ",", " ", "0", ",", " ", 
     RowBox[{
      RowBox[{"Abs", "[", "x", "]"}], "\[GreaterEqual]", " ", "1"}], ",", " ",
      "3"}], "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"\[Psi]", "[", "x_", "]"}], ":=", " ", 
  RowBox[{"Cos", "[", "x", "]"}]}]}], "Input",
 CellChangeTimes->{{3.5237325365052385`*^9, 3.523732683424929*^9}, {
   3.5237327538749733`*^9, 3.5237328603046155`*^9}, {3.523732894634048*^9, 
   3.5237330572373066`*^9}, {3.5237331391775*^9, 3.523733518896468*^9}, 
   3.5237563354018*^9, {3.5273392960591063`*^9, 3.5273393020588665`*^9}, {
   3.527339347287057*^9, 3.5273394523128557`*^9}, 3.527339499190981*^9}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Plot", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"energy", "[", "x", "]"}], ",", 
     RowBox[{"\[Psi]", "[", "x", "]"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"x", ",", 
     RowBox[{"-", "2"}], ",", "2"}], "}"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.5273393932552185`*^9, 3.5273394767018805`*^9}}],

Cell[BoxData[
 GraphicsBox[{{}, {}, 
   {Hue[0.67, 0.6, 0.6], LineBox[CompressedData["
1:eJxN1WlMEwYUB/BWYILKOQEZdAi2CohsKMfCMMWjES/EWlYWZ7E62cYRpXK5
blIYYci2gE4Y6whDKqNyGbxmRw8nVNDIOioMSys3iEJLKVcpIjvC3uMlLy+/
5J+89+15nDhNP7WCQCCk/NP/Tj+q08vFxUUZ4b+yDKN/3Vq9LQadpshO/ET6
Gtzevvrl7+wFMOne6bXBbq/At+ObLGyfmcDHv/XXq7LmwMZL3FwZ1QgW2HS7
FPfNgEv2+XOeXJgGZyWw0733ToG5ZlVpHK0BzOYpyH8JJ8DzpV0skRW6UDJU
XBKnB3d//82Ds1T0pjj/qX1r0XrysGrIBi3q4ct4Vugs/qEKV3P0D1WWTokL
40smEHzWc/rKDWhxobrm6XN0L69u124lmjPjbPt5M9o8IbPruhjtzWQkuVYu
y28xlRq4y/KCk3FeSeiida2BrFh0g1nZ44eRy/JdNFMZZVk+52LUIYUO/FuP
15oaT/QXocRa/jr09h9VBy/YoO/R8/JjTVpws3zUwUOJbq+ucynKROvSAjbx
esfAG+zCdjJKR8E3fHLj+gdGwD3y+vVBQcPgId/CrbI7A2D789eC/Ih9YN+g
cd+KSQ34q93aP0XpnWBHRl3Bh85K3Dcjt20hPwJXqIe+e5EtBR877HZLffIq
WLSK23E/RUD934H9xLczo2XgDfqGuZD7D8F7BarWiGglmHbQwWz6dic4P6aT
9+6vGnBzBMk60qEPrPVwPK/kD4BTkjez852GwZ0aO3psywj4+LnQ5ysPjIJ9
Pm7p0H2AnoxgNHWw0TnkhCuCNHSN4qejVAF6jjKvSDWhLylFd4eEY+CPJLTK
xzfRFGFb4U0p+u6XLziZ7ehuL5ctJIIW78tIv8Jgohs3B+c1WujArHcYgglb
tHFrktj9LbRvSLWO64e+HO5+JICJjj210q1CiCZ8Rg58cgPNT9gRQZSg/zjL
5R1rQwdnjQ86mtCWP3fW5uwfB5eXTz24FYUO/cW+tz8GfaZ2vwM1Ga1qkKXO
lqCTZZp8SiXapnFOeKQevfPRNvV1OVrTGjn1TIFObUu0XtOFtuvI2xgyiK56
Wkn9VIemaZqii4xo/bj+vRNE/ZItwyRJGbRzb6DzJq3pBavR5FmfeKkjWmra
kz3mjjYQs+6EB6A3WolHroajy/vfdI4aQZPE8TSL3AkwwbTiGqffAJ49LGHJ
KVNgdUCMKyV7GnyGaWfvqZkBu1wejDYnGcF1R8sqJ9PnwMztGeEtEhO4npXo
GfJqHmxctctMFLUApre9H0Qqfg0Os/QusDmwCF76n+C/AX12C8U=
     "]]}, 
   {Hue[0.9060679774997897, 0.6, 0.6], LineBox[CompressedData["
1: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
FZ06Na5aLLLgXekTz8znVPy/+zv8//39f3/QqXk=
     "]]}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->True,
  AxesOrigin->{0, 0},
  PlotRange->{{-2, 2}, {-0.4161467623187796, 3.}},
  PlotRangeClipping->True,
  PlotRangePadding->{
    Scaled[0.02], 
    Scaled[0.02]}]], "Output",
 CellChangeTimes->{
  3.5273394246739616`*^9, {3.5273394770518665`*^9, 3.5273395031708217`*^9}}]
}, Open  ]],

Cell[TextData[{
 "In the region where ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    TemplateBox[{"x"},
     "Abs"], ">", "1"}], TraditionalForm]]],
 ", the wave function has the form ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{"\[Psi]", "(", "x", ")"}], "=", 
    RowBox[{"c2", " ", 
     RowBox[{"exp", "(", 
      RowBox[{
       RowBox[{"-", "\[Alpha]"}], " ", 
       TemplateBox[{"x"},
        "Abs"]}], ")"}]}]}], TraditionalForm]]],
 " where ",
 Cell[BoxData[
  FormBox[
   RowBox[{"\[Alpha]", "=", 
    SqrtBox[
     RowBox[{"2", " ", 
      RowBox[{"(", 
       RowBox[{"3", "-", "e"}], ")"}]}]]}], TraditionalForm]]],
 ".  Plot the potential energy and \[Psi] for this case on the same graph."
}], "Text",
 CellChangeTimes->{{3.5237563577254*^9, 3.523756522633*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Plot", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"energy", "[", "x", "]"}], ",", 
     RowBox[{"Exp", "[", 
      RowBox[{
       RowBox[{"-", 
        SqrtBox[
         RowBox[{"2", "*", 
          RowBox[{"(", 
           RowBox[{"3", "-", 
            RowBox[{"Exp", "[", "1", "]"}]}], ")"}]}]]}], "*", 
       RowBox[{"Abs", "[", "x", "]"}]}], "]"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"x", ",", 
     RowBox[{"-", "1.2"}], ",", "1.2"}], "}"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.5237325365052385`*^9, 3.523732683424929*^9}, {
   3.5237327538749733`*^9, 3.5237328603046155`*^9}, {3.523732894634048*^9, 
   3.5237330572373066`*^9}, {3.5237331391775*^9, 3.5237335219847765`*^9}, 
   3.5237336028098583`*^9, {3.523734246230194*^9, 3.5237342797345448`*^9}, 
   3.523756527703*^9, {3.5273394128844333`*^9, 3.5273394162143*^9}, {
   3.5273395075206475`*^9, 3.5273395888973923`*^9}}],

Cell[BoxData[
 GraphicsBox[{{}, {}, 
   {Hue[0.67, 0.6, 0.6], LineBox[CompressedData["
1:eJxN1WlM0gEUAPC/R0sztbzKRkvFmatsmWkuKrXTzDzzHIaaRi4qu1Aatpnl
0pUKlVSO0nWa4Uy0Ukk8kg4lJXE6mFY0QUOwyErL6Njqvd729vbbex/eh7c9
19SDUemmBEHQf+efmuGiXmZHfBB7/xS3zZkgAqdLtrCKvo+Lib/xs7tKMOcz
2tR2roqrR88IYzo5jqAtzilDeG/Rtla3hGVytF2I1cjCl2ingkxS+VM0aSbl
9I1GtKdZT6ygHL3h+9RUMwO9eQ1tedAedDDrSWo7DR3+tajzaRSa+onM7/FH
M7U7AlXm6EplRf4Mvh5cOsCu+FKKPtkXJ9KUoBO7rQ3PT6Fnt7OSihjozLuR
q+atRa9mmag8lTpwh1PKulDn/7ypX0s6pgV/FMtjeAOjYEZ9UFJn3Aj4BT+d
WvBADc4ipiYJ72FwRI19pJvwHe4XPVwudVCB52V6FK3kvgFbE+vUG4YGwRsb
KYuP3lbgfIbz9fl3+sHCH2k2MrocrMsvrpveJQMrteEXspd0gQuMfMHV+g6w
ZiKaFUsT43weOUYcXov3cLHpkDzrErgrwItYmMgL+GcbvXRI+LIWXNvgwLUf
bQaTvsraOWYS7FPZPYYjXeDTjDrhgzUy8PsnIttkthx831O9ojS/H+xqIJTZ
uQrwiz7Bxa2PB8H7VI8LZclvwNYaXdQxMxU4+VB1Dq3wHfhMtWbsmuUwuGsy
Iy22Ug1ufcZeH+01An51c8BFIhsFP/IVbC0+oAWHb7eTXR0fAyvMEjTuX9Bp
oms/7k6jj3t5LXloqQPfsg3O6yajp3tzfIl49B3q6OWUFrSP44oajQTdLGVK
9kvRvevNP7EUaKPLolDuBDpmeKexzVMPNj3QkurOQd/Yy+FSeOjNu1Pbovjo
M/HmbrmVaJuNwW8HW9EL5vfQeAa0yK6iuHoSnWR9WNxhRJebOiyamDUO9tDF
DUWQ0T5tr6mzdqLlopqzrolo5sNckX8yuvEemURnoAN5dGX7KbSK42+lLETn
nbWkGErQktyqKy58dChjPCGnHq3f01JwoQldnMJpqGpFv4r1cVZI0Ucjzbd9
7EU7hvZlWyjQ8UFZA35q9DdKsEXYGLrMz9k/3YBe6/2ezp5EDy1t4p03orNb
mCcyTT4E/PsvvwB4uM2H
     "]]}, 
   {Hue[0.9060679774997897, 0.6, 0.6], LineBox[CompressedData["
1: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
HIX/+Yv/+/svxWzpPg==
     "]]}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->True,
  AxesOrigin->{0, 0},
  PlotRange->{{-1.2, 1.2}, {0., 2.1191725935786043`}},
  PlotRangeClipping->True,
  PlotRangePadding->{
    Scaled[0.02], 
    Scaled[0.02]}]], "Output",
 CellChangeTimes->{{3.527339581277697*^9, 3.527339589047386*^9}}]
}, Open  ]],

Cell[TextData[{
 "\nQuantum mechanics requires the the function on the inside of the well and \
the function outside the well need to join smoothly and have a continuous \
first derivative.  In other words, the following two equations have to be \
true at the point x=1.\n\n",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{"cos", "(", "k", ")"}], "\[LongEqual]", 
    RowBox[{"c2", " ", 
     RowBox[{"exp", "(", 
      RowBox[{"-", "\[Alpha]"}], ")"}]}]}], TraditionalForm]]],
 "\n",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{
     RowBox[{"-", "k"}], " ", 
     RowBox[{"sin", "(", "k", ")"}]}], "\[LongEqual]", 
    RowBox[{
     RowBox[{"-", "\[Alpha]"}], " ", "c2", " ", 
     RowBox[{"exp", "(", 
      RowBox[{"-", "\[Alpha]"}], ")"}]}]}], TraditionalForm]]],
 "\n\nMultiplying the second equation by -1 and dividing by the first \
equation, one gets\n\n",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{"k", " ", 
     RowBox[{"tan", "(", "k", ")"}]}], "\[LongEqual]", "\[Alpha]"}], 
   TraditionalForm]]],
 "\n\nIf we square both sides of this equation and substitute in the \
expressions for k and \[Alpha] we can write this equation as\n\n",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{
     SuperscriptBox["k", "2"], " ", 
     RowBox[{
      SuperscriptBox["tan", "2"], "(", "k", ")"}]}], "\[LongEqual]", 
    RowBox[{"2", " ", 
     RowBox[{"(", 
      RowBox[{"3", "-", "e"}], ")"}]}], "\[LongEqual]", 
    RowBox[{"2", " ", 
     RowBox[{"(", 
      RowBox[{"3", "-", 
       FractionBox[
        SuperscriptBox["k", "2"], "2"]}], ")"}]}]}], TraditionalForm]]],
 " (*where did get get that e = k^2/2? *)\n\nSimplifying this expression \
yields\n\n",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{
     RowBox[{"-", 
      FractionBox[
       SuperscriptBox["k", "2"], "2"]}], "-", 
     RowBox[{
      FractionBox["1", "2"], " ", 
      SuperscriptBox["k", "2"], " ", 
      RowBox[{
       SuperscriptBox["tan", "2"], "(", "k", ")"}]}], "+", "3"}], 
    "\[LongEqual]", "0"}], TraditionalForm]]],
 "\n"
}], "Text",
 CellChangeTimes->{{3.5237565335685997`*^9, 3.5237569016818*^9}, {
  3.5237569379674*^9, 3.523757025811*^9}, {3.5237570852002*^9, 
  3.523757205757*^9}, {3.5237572453654003`*^9, 3.523757281807*^9}, {
  3.527339851796876*^9, 3.5273398682862167`*^9}}],

Cell[CellGroupData[{

Cell["Solution using FindRoot", "Subsubsection",
 CellChangeTimes->{{3.5237572623226*^9, 3.5237572725094*^9}}],

Cell[TextData[{
 "\nThis equation can be easil solved using ",
 StyleBox[ButtonBox["FindRoot",
  BaseStyle->"Link",
  ButtonData->"paclet://ref/FindRoot"],
  FontWeight->"Bold"],
 ".   Go ahead and do so to give us a check on another method.  Find root \
will require an initial guess for k.  You can generate on by looking at a \
graph of the function ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{"f", "(", "k", ")"}], "=", 
    RowBox[{
     RowBox[{"-", 
      FractionBox[
       SuperscriptBox["k", "2"], "2"]}], "-", 
     RowBox[{
      FractionBox["1", "2"], " ", 
      SuperscriptBox["k", "2"], " ", 
      RowBox[{
       SuperscriptBox["tan", "2"], "(", "k", ")"}]}], "+", "3"}]}], 
   TraditionalForm]]],
 "."
}], "Text",
 CellChangeTimes->{3.5237573008389997`*^9}],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{"Plot", "[", 
  RowBox[{
   RowBox[{
    FractionBox[
     RowBox[{"-", 
      SuperscriptBox["k", "2"]}], "2"], "-", 
    RowBox[{
     FractionBox["1", "2"], 
     SuperscriptBox["k", "2"], "*", 
     SuperscriptBox[
      RowBox[{"(", 
       RowBox[{"Tan", "[", "k", "]"}], ")"}], "2"]}], "+", "3"}], ",", 
   RowBox[{"{", 
    RowBox[{"k", ",", 
     RowBox[{"-", "1.5"}], ",", "1.5"}], "}"}]}], 
  "]"}], "\[IndentingNewLine]", 
 RowBox[{"FindRoot", "[", 
  RowBox[{
   RowBox[{
    FractionBox[
     RowBox[{"-", 
      SuperscriptBox["k", "2"]}], "2"], "-", 
    RowBox[{
     FractionBox["1", "2"], 
     SuperscriptBox["k", "2"], "*", 
     SuperscriptBox[
      RowBox[{"(", 
       RowBox[{"Tan", "[", "k", "]"}], ")"}], "2"]}], "+", "3"}], ",", 
   RowBox[{"{", 
    RowBox[{"k", ",", "1"}], "}"}]}], "]"}]}], "Input",
 CellChangeTimes->{{3.523757306299*^9, 3.5237573092785997`*^9}, {
  3.527339704982749*^9, 3.527339752810836*^9}, {3.5273398821456623`*^9, 
  3.527339912584444*^9}}],

Cell[BoxData[
 GraphicsBox[{{}, {}, 
   {Hue[0.67, 0.6, 0.6], LineBox[CompressedData["
1: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
tR50oJnw2a1l6AgmcmL/DXNvOvj//wP/B08qA5U=
     "]]}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->True,
  AxesOrigin->{0, 0},
  PlotRange->{{-1.5, 1.5}, {-15.05856705296061, 2.999999973343878}},
  PlotRangeClipping->True,
  PlotRangePadding->{
    Scaled[0.02], 
    Scaled[0.02]}]], "Output",
 CellChangeTimes->{{3.5273397373414545`*^9, 3.5273397529608297`*^9}, {
  3.527339906754678*^9, 3.527339912914431*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"k", "\[Rule]", "1.1034785825820312`"}], "}"}]], "Output",
 CellChangeTimes->{{3.5273397373414545`*^9, 3.5273397529608297`*^9}, {
  3.527339906754678*^9, 3.5273399129444304`*^9}}]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["\<\
Solution using the Newton-Raphson Method\
\>", "Subsubsection",
 CellChangeTimes->{{3.5237573125078*^9, 3.5237573211502*^9}}],

Cell[TextData[{
 "Just for fun ( and to give you some practice with NestWhile), let\
\[CloseCurlyQuote]s also solve this equation using the Newton-Raphson method. \
 In our case, we are trying to solve the equation ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{"f", "(", "k", ")"}], "=", 
    RowBox[{
     RowBox[{
      RowBox[{"-", 
       FractionBox[
        SuperscriptBox["k", "2"], "2"]}], "-", 
      RowBox[{
       FractionBox["1", "2"], " ", 
       SuperscriptBox["k", "2"], " ", 
       RowBox[{
        SuperscriptBox["tan", "2"], "(", "k", ")"}]}], "+", "3"}], "=", 
     "0"}]}], TraditionalForm]]],
 ", Consider the Taylor series expansion of f(k) at a point ",
 Cell[BoxData[
  FormBox[
   SubscriptBox["k", "0"], TraditionalForm]]],
 "  in the neighborhood of k, which k is the point where ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{"f", "(", "k", ")"}], "\[LongEqual]", "0"}], TraditionalForm]]],
 ".  We then have\n\n",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{"f", "(", "k", ")"}], "\[LongEqual]", "0", "\[LongEqual]", 
    RowBox[{
     RowBox[{
      RowBox[{"(", 
       RowBox[{"k", "-", 
        SubscriptBox["k", "0"]}], ")"}], " ", 
      RowBox[{
       SuperscriptBox["f", "\[Prime]",
        MultilineFunction->None], "(", 
       SubscriptBox["k", "0"], ")"}]}], "+", 
     RowBox[{"f", "(", 
      SubscriptBox["k", "0"], ")"}]}]}], TraditionalForm]]],
 "\n\nIf we let ",
 Cell[BoxData[
  FormBox[
   RowBox[{"\[Delta]", "\[LongEqual]", 
    RowBox[{"k", "-", 
     SubscriptBox["k", "0"]}]}], TraditionalForm]]],
 " be the correction we want to make to k for a better estimate, then the \
above equation can be solved for \[Delta].\n\n",
 Cell[BoxData[
  FormBox[
   RowBox[{"\[Delta]", "=", 
    RowBox[{
     RowBox[{"-", 
      RowBox[{"f", "[", 
       SubscriptBox["k", "0"], "]"}]}], "/", 
     RowBox[{
      RowBox[{"f", "'"}], "[", 
      SubscriptBox["k", "0"], "]"}]}]}], TraditionalForm]]],
 "\n\nIf we recursively make this correction to ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    SubscriptBox["k", "0"], "   "}], TraditionalForm]]],
 "its value will get closer and closer to the true value of k we seek.\n\n\
Here\[CloseCurlyQuote]s an example of using the Newton-Raphson method to \
solve the equation ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{
     RowBox[{"cos", "(", "x", ")"}], "-", "x"}], "\[LongEqual]", "0"}], 
   TraditionalForm]]],
 "  we have solved a few times already in this lab.  We\[CloseCurlyQuote]ll \
ask for about 7 digits of accuracy in the answer."
}], "Text",
 CellChangeTimes->{{3.5237573238646*^9, 3.5237577471238003`*^9}, {
   3.523757777185*^9, 3.523757796763*^9}, 3.5238317786976*^9, 
   3.5273401696541615`*^9}],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"f", "[", "x_", "]"}], ":=", 
  RowBox[{
   RowBox[{"Cos", "[", "x", "]"}], "-", "x"}]}], "\[IndentingNewLine]", 
 RowBox[{"NestWhile", "[", 
  RowBox[{
   RowBox[{
    RowBox[{"#", "-", 
     RowBox[{
      RowBox[{"f", "[", "#", "]"}], "/", 
      RowBox[{
       RowBox[{"f", "'"}], "[", "#", "]"}]}]}], "&"}], ",", "1.", ",", 
   RowBox[{
    RowBox[{
     RowBox[{"Abs", "[", 
      RowBox[{"f", "[", "#", "]"}], "]"}], ">", 
     RowBox[{"10", "^", 
      RowBox[{"-", "7"}]}]}], "&"}]}], "]"}]}], "Input",
 CellChangeTimes->{{3.5237577540657997`*^9, 3.523757887243*^9}, {
  3.5237579355874*^9, 3.523758003307*^9}}],

Cell[BoxData["0.739085133385284`"], "Output",
 CellChangeTimes->{3.5273399547527575`*^9}]
}, Open  ]],

Cell[TextData[{
 "Use this technique to find the value of k which solves the equation  ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{"f", "(", "k", ")"}], "=", 
    RowBox[{
     RowBox[{"-", 
      FractionBox[
       SuperscriptBox["k", "2"], "2"]}], "-", 
     RowBox[{
      FractionBox["1", "2"], " ", 
      SuperscriptBox["k", "2"], " ", 
      RowBox[{
       SuperscriptBox["tan", "2"], "(", "k", ")"}]}], "+", "3"}]}], 
   TraditionalForm]]],
 "."
}], "Text",
 CellChangeTimes->{{3.5237580109978*^9, 3.5237580386878*^9}}],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"g", "[", "x_", "]"}], ":=", 
  RowBox[{
   FractionBox[
    RowBox[{"-", 
     SuperscriptBox["x", "2"]}], "2"], "-", 
   RowBox[{
    FractionBox["1", "2"], 
    SuperscriptBox["x", "2"], "*", 
    SuperscriptBox[
     RowBox[{"(", 
      RowBox[{"Tan", "[", "x", "]"}], ")"}], "2"]}], "+", 
   "3"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"NestWhile", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"#", "-", 
      RowBox[{
       RowBox[{"g", "[", "#", "]"}], "/", 
       RowBox[{
        RowBox[{"g", "'"}], "[", "#", "]"}]}]}], "&"}], ",", "1", ",", 
    RowBox[{
     RowBox[{
      RowBox[{"Abs", "[", 
       RowBox[{"g", "[", "#", "]"}], "]"}], " ", ">", " ", "1*^-7"}], " ", 
     "&"}]}], "]"}], "//", "N"}]}], "Input",
 CellChangeTimes->{{3.5237350541739807`*^9, 3.5237351040229645`*^9}, {
  3.523735141735736*^9, 3.5237352100285645`*^9}, {3.523735287472308*^9, 
  3.5237352931358747`*^9}, {3.5237353572182817`*^9, 3.5237353963561954`*^9}, {
  3.523735430773637*^9, 3.5237354363581953`*^9}, {3.5237355293214903`*^9, 
  3.523735549289487*^9}, {3.5237542688354*^9, 3.5237543202218*^9}, {
  3.5237577158458*^9, 3.5237577176865997`*^9}, {3.5237580450369997`*^9, 
  3.5237581013998003`*^9}, {3.5273399650523453`*^9, 3.527339967612243*^9}, {
  3.52734009643709*^9, 3.5273401346655607`*^9}, {3.5273401837535973`*^9, 
  3.5273402341315823`*^9}, {3.5273403040187864`*^9, 3.5273403044187703`*^9}}],

Cell[BoxData["1.1034785825820546`"], "Output",
 CellChangeTimes->{3.5273402283218145`*^9, 3.527340287579444*^9, 
  3.5273404188441935`*^9}]
}, Open  ]],

Cell["\<\

How does this answer compare to the one you got using FindRoot?\
\>", "Text",
 CellChangeTimes->{{3.523758109543*^9, 3.5237581265938*^9}}]
}, Open  ]]
}, Open  ]]
}, Open  ]]
}, Open  ]]
},
AutoGeneratedPackage->None,
WindowSize->{718, 856},
WindowMargins->{{0, Automatic}, {Automatic, 0}},
ShowSelection->True,
FrontEndVersion->"8.0 for Mac OS X x86 (32-bit, 64-bit Kernel) (February 23, \
2011)",
StyleDefinitions->FrontEnd`FileName[{"Creative"}, "PastelColor.nb", 
  CharacterEncoding -> "UTF-8"]
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{}
*)
(*CellTagsIndex
CellTagsIndex->{}
*)
(*NotebookFileOutline
Notebook[{
Cell[CellGroupData[{
Cell[567, 22, 936, 14, 60, "Title"],
Cell[1506, 38, 397, 7, 36, "Subtitle"],
Cell[1906, 47, 4033, 57, 161, "Text"],
Cell[5942, 106, 610, 11, 71, "Text"],
Cell[CellGroupData[{
Cell[6577, 121, 253, 3, 72, "Section"],
Cell[6833, 126, 1565, 38, 101, "Text"],
Cell[CellGroupData[{
Cell[8423, 168, 276, 3, 34, "Subsection"],
Cell[8702, 173, 925, 25, 41, "Text"],
Cell[CellGroupData[{
Cell[9652, 202, 909, 18, 68, "Input"],
Cell[10564, 222, 1711, 35, 125, "Output"],
Cell[12278, 259, 419, 11, 37, "Output"],
Cell[12700, 272, 416, 11, 37, "Output"]
}, Open  ]],
Cell[13131, 286, 218, 4, 26, "Text"],
Cell[CellGroupData[{
Cell[13374, 294, 238, 6, 37, "Input"],
Cell[13615, 302, 101, 2, 37, "Output"]
}, Open  ]],
Cell[13731, 307, 141, 2, 26, "Text"],
Cell[CellGroupData[{
Cell[13897, 313, 168, 3, 37, "Input"],
Cell[14068, 318, 99, 2, 37, "Output"]
}, Open  ]],
Cell[14182, 323, 1623, 31, 221, "Text"],
Cell[CellGroupData[{
Cell[15830, 358, 1725, 40, 128, "Input"],
Cell[17558, 400, 246, 8, 37, "Output"],
Cell[17807, 410, 124, 2, 37, "Output"],
Cell[17934, 414, 121, 2, 37, "Output"],
Cell[18058, 418, 124, 2, 37, "Output"],
Cell[18185, 422, 124, 2, 37, "Output"],
Cell[18312, 426, 125, 2, 37, "Output"]
}, Open  ]],
Cell[18452, 431, 1041, 31, 71, "Text"],
Cell[19496, 464, 1118, 31, 56, "Text"],
Cell[CellGroupData[{
Cell[20639, 499, 1287, 28, 143, "Input"],
Cell[21929, 529, 293, 7, 37, "Output"],
Cell[22225, 538, 291, 6, 37, "Output"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[22565, 550, 166, 2, 34, "Subsection"],
Cell[22734, 554, 687, 16, 41, "Text"],
Cell[CellGroupData[{
Cell[23446, 574, 1411, 41, 113, "Input"],
Cell[24860, 617, 74, 1, 37, "Output"],
Cell[24937, 620, 92, 2, 37, "Output"],
Cell[25032, 624, 101, 2, 37, "Output"],
Cell[25136, 628, 104, 2, 37, "Output"],
Cell[25243, 632, 108, 2, 37, "Output"],
Cell[25354, 636, 75, 1, 37, "Output"]
}, Open  ]]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[25490, 644, 518, 7, 72, "Section"],
Cell[26011, 653, 1117, 30, 71, "Text"],
Cell[CellGroupData[{
Cell[27153, 687, 290, 5, 34, "Subsection"],
Cell[27446, 694, 651, 15, 41, "Text"],
Cell[CellGroupData[{
Cell[28122, 713, 645, 14, 53, "Input"],
Cell[28770, 729, 377, 9, 53, "Output"]
}, Open  ]],
Cell[29162, 741, 808, 18, 86, "Text"],
Cell[CellGroupData[{
Cell[29995, 763, 2331, 64, 83, "Input"],
Cell[32329, 829, 1578, 33, 125, "Output"],
Cell[33910, 864, 3067, 59, 251, "Output"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[37026, 929, 389, 7, 36, "Subsection"],
Cell[37418, 938, 2903, 90, 105, "Text"],
Cell[CellGroupData[{
Cell[40346, 1032, 2884, 83, 214, "Input"],
Cell[43233, 1117, 3231, 101, 218, "Output"],
Cell[46467, 1220, 2742, 85, 178, "Output"],
Cell[49212, 1307, 2129, 64, 128, "Output"],
Cell[51344, 1373, 2953, 88, 160, "Output"]
}, Open  ]],
Cell[54312, 1464, 1105, 22, 65, "Text"],
Cell[CellGroupData[{
Cell[55442, 1490, 1432, 26, 53, "Input"],
Cell[56877, 1518, 50085, 863, 295, "Output"]
}, Open  ]],
Cell[106977, 2384, 272, 7, 41, "Text"],
Cell[CellGroupData[{
Cell[107274, 2395, 337, 8, 37, "Input"],
Cell[107614, 2405, 72, 1, 37, "Output"]
}, Open  ]]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[107747, 2413, 559, 7, 72, "Section"],
Cell[108309, 2422, 1404, 39, 86, "Text"],
Cell[CellGroupData[{
Cell[109738, 2465, 937, 12, 34, "Subsection"],
Cell[110678, 2479, 718, 23, 41, "Text"],
Cell[CellGroupData[{
Cell[111421, 2506, 655, 16, 53, "Input"],
Cell[112079, 2524, 1912, 37, 258, "Output"]
}, Open  ]],
Cell[114006, 2564, 1051, 25, 90, "Text"],
Cell[CellGroupData[{
Cell[115082, 2593, 1342, 29, 68, "Input"],
Cell[116427, 2624, 117, 1, 37, "Output"]
}, Open  ]],
Cell[116559, 2628, 1272, 33, 69, "Text"],
Cell[CellGroupData[{
Cell[117856, 2665, 1057, 23, 69, "Input"],
Cell[118916, 2690, 2269, 53, 52, "Output"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[121234, 2749, 365, 5, 34, "Subsection"],
Cell[121602, 2756, 1003, 30, 58, "Text"],
Cell[122608, 2788, 1758, 54, 94, "Input"],
Cell[CellGroupData[{
Cell[124391, 2846, 2185, 62, 127, "Input"],
Cell[126579, 2910, 23446, 394, 257, "Output"]
}, Open  ]]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[150086, 3311, 2456, 33, 72, "Section"],
Cell[152545, 3346, 1211, 30, 71, "Text"],
Cell[CellGroupData[{
Cell[153781, 3380, 607, 9, 34, "Subsection"],
Cell[154391, 3391, 1372, 35, 105, "Text"],
Cell[CellGroupData[{
Cell[155788, 3430, 620, 16, 53, "Input"],
Cell[156411, 3448, 71, 1, 37, "Output"],
Cell[156485, 3451, 562, 18, 37, "Output"]
}, Open  ]],
Cell[157062, 3472, 1327, 26, 161, "Text"],
Cell[CellGroupData[{
Cell[158414, 3502, 234, 6, 41, "Input"],
Cell[158651, 3510, 92, 2, 57, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[158780, 3517, 571, 12, 41, "Input"],
Cell[159354, 3531, 92, 2, 57, "Output"]
}, Open  ]],
Cell[159461, 3536, 850, 21, 82, "Text"],
Cell[CellGroupData[{
Cell[160336, 3561, 617, 14, 41, "Input"],
Cell[160956, 3577, 207, 5, 40, "Output"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[161212, 3588, 541, 9, 36, "Subsection"],
Cell[161756, 3599, 2168, 66, 155, "Text"],
Cell[CellGroupData[{
Cell[163949, 3669, 412, 7, 82, "Input"],
Cell[164364, 3678, 96, 1, 40, "Output"],
Cell[164463, 3681, 96, 1, 40, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[164596, 3687, 410, 7, 82, "Input"],
Cell[165009, 3696, 70, 1, 40, "Output"],
Cell[165082, 3699, 70, 1, 40, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[165189, 3705, 211, 4, 82, "Input"],
Cell[165403, 3711, 89, 2, 40, "Output"],
Cell[165495, 3715, 89, 2, 40, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[165621, 3722, 213, 4, 82, "Input"],
Cell[165837, 3728, 72, 1, 40, "Output"],
Cell[165912, 3731, 89, 2, 40, "Output"]
}, Open  ]],
Cell[166016, 3736, 323, 8, 65, "Text"],
Cell[CellGroupData[{
Cell[166364, 3748, 459, 8, 122, "Input"],
Cell[166826, 3758, 70, 1, 40, "Output"],
Cell[166899, 3761, 70, 1, 40, "Output"],
Cell[166972, 3764, 71, 1, 40, "Output"],
Cell[167046, 3767, 71, 1, 40, "Output"],
Cell[167120, 3770, 70, 1, 40, "Output"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[167239, 3777, 459, 6, 36, "Subsection"],
Cell[167701, 3785, 1059, 26, 101, "Text"],
Cell[CellGroupData[{
Cell[168785, 3815, 438, 8, 62, "Input"],
Cell[169226, 3825, 196, 7, 54, "Output"]
}, Open  ]],
Cell[169437, 3835, 428, 10, 65, "Text"],
Cell[CellGroupData[{
Cell[169890, 3849, 505, 11, 82, "Input"],
Cell[170398, 3862, 71, 1, 40, "Output"]
}, Open  ]],
Cell[170484, 3866, 309, 7, 47, "Text"],
Cell[CellGroupData[{
Cell[170818, 3877, 605, 13, 41, "Input"],
Cell[171426, 3892, 71, 1, 40, "Output"]
}, Open  ]],
Cell[171512, 3896, 734, 18, 65, "Text"],
Cell[CellGroupData[{
Cell[172271, 3918, 784, 15, 41, "Input"],
Cell[173058, 3935, 215, 3, 40, "Output"]
}, Open  ]],
Cell[173288, 3941, 1279, 32, 123, "Text"],
Cell[CellGroupData[{
Cell[174592, 3977, 1537, 37, 122, "Input"],
Cell[176132, 4016, 337, 7, 40, "Output"],
Cell[176472, 4025, 342, 7, 40, "Output"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[176863, 4038, 557, 7, 36, "Subsection"],
Cell[177423, 4047, 1001, 33, 103, "Text"],
Cell[CellGroupData[{
Cell[178449, 4084, 534, 13, 41, "Input"],
Cell[178986, 4099, 75, 1, 40, "Output"]
}, Open  ]],
Cell[179076, 4103, 1600, 42, 105, "Text"],
Cell[180679, 4147, 691, 10, 41, "Input"],
Cell[CellGroupData[{
Cell[181395, 4161, 382, 11, 62, "Input"],
Cell[181780, 4174, 99, 1, 40, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[181916, 4180, 788, 20, 62, "Input"],
Cell[182707, 4202, 159, 3, 40, "Output"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[182915, 4211, 508, 7, 36, "Subsection"],
Cell[183426, 4220, 1407, 39, 119, "Text"],
Cell[CellGroupData[{
Cell[184858, 4263, 1356, 31, 62, "Input"],
Cell[CellGroupData[{
Cell[186239, 4298, 245, 9, 23, "Print"],
Cell[186487, 4309, 246, 9, 23, "Print"],
Cell[186736, 4320, 247, 9, 23, "Print"],
Cell[186986, 4331, 247, 9, 23, "Print"],
Cell[187236, 4342, 246, 9, 23, "Print"],
Cell[187485, 4353, 248, 9, 23, "Print"],
Cell[187736, 4364, 250, 9, 23, "Print"],
Cell[187989, 4375, 250, 9, 23, "Print"],
Cell[188242, 4386, 251, 9, 23, "Print"],
Cell[188496, 4397, 251, 9, 23, "Print"],
Cell[188750, 4408, 251, 9, 23, "Print"],
Cell[189004, 4419, 249, 9, 23, "Print"],
Cell[189256, 4430, 249, 9, 23, "Print"]
}, Open  ]]
}, Open  ]],
Cell[189532, 4443, 1074, 38, 69, "Text"],
Cell[CellGroupData[{
Cell[190631, 4485, 741, 18, 62, "Input"],
Cell[191375, 4505, 384, 7, 60, "Output"]
}, Open  ]]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[191820, 4519, 534, 7, 75, "Section"],
Cell[192357, 4528, 1500, 37, 101, "Text"],
Cell[CellGroupData[{
Cell[193882, 4569, 545, 9, 36, "Subsection"],
Cell[194430, 4580, 732, 14, 47, "Text"],
Cell[CellGroupData[{
Cell[195187, 4598, 358, 8, 41, "Input"],
Cell[195548, 4608, 120, 2, 40, "Output"]
}, Open  ]],
Cell[195683, 4613, 683, 15, 65, "Text"],
Cell[CellGroupData[{
Cell[196391, 4632, 545, 14, 41, "Input"],
Cell[196939, 4648, 90, 1, 40, "Output"]
}, Open  ]],
Cell[197044, 4652, 586, 12, 83, "Text"],
Cell[CellGroupData[{
Cell[197655, 4668, 334, 9, 41, "Input"],
Cell[197992, 4679, 3105, 53, 250, "Output"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[201146, 4738, 401, 5, 36, "Subsection"],
Cell[201550, 4745, 1063, 24, 101, "Text"],
Cell[CellGroupData[{
Cell[202638, 4773, 347, 9, 41, "Input"],
Cell[202988, 4784, 73, 1, 40, "Output"]
}, Open  ]],
Cell[203076, 4788, 1740, 39, 103, "Text"],
Cell[CellGroupData[{
Cell[204841, 4831, 636, 16, 41, "Input"],
Cell[205480, 4849, 90, 1, 40, "Output"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[205619, 4856, 381, 5, 36, "Subsection"],
Cell[206003, 4863, 1404, 35, 83, "Text"],
Cell[CellGroupData[{
Cell[207432, 4902, 1160, 30, 142, "Input"],
Cell[208595, 4934, 607, 20, 40, "Output"],
Cell[209205, 4956, 303, 8, 40, "Output"],
Cell[209511, 4966, 78, 1, 40, "Output"],
Cell[209592, 4969, 76, 1, 40, "Output"]
}, Open  ]]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[209729, 4977, 748, 10, 75, "Section"],
Cell[CellGroupData[{
Cell[210502, 4991, 342, 6, 36, "Subsection"],
Cell[210847, 4999, 4300, 61, 65, "Text"],
Cell[CellGroupData[{
Cell[215172, 5064, 339, 6, 45, "Item"],
Cell[215514, 5072, 308, 6, 45, "Item"],
Cell[215825, 5080, 479, 8, 61, "Item"],
Cell[216307, 5090, 306, 8, 45, "Item"]
}, Open  ]],
Cell[216628, 5101, 3969, 54, 29, "Text"],
Cell[220600, 5157, 448, 8, 65, "Text"],
Cell[221051, 5167, 167, 4, 41, "Input"],
Cell[CellGroupData[{
Cell[221243, 5175, 326, 10, 41, "Input"],
Cell[221572, 5187, 176, 4, 40, "Output"]
}, Open  ]],
Cell[221763, 5194, 245, 5, 47, "Text"],
Cell[CellGroupData[{
Cell[222033, 5203, 1079, 26, 102, "Input"],
Cell[223115, 5231, 360, 7, 40, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[223512, 5243, 882, 21, 142, "Input"],
Cell[224397, 5266, 359, 8, 40, "Output"],
Cell[224759, 5276, 332, 8, 40, "Output"]
}, Open  ]],
Cell[225106, 5287, 324, 6, 47, "Text"],
Cell[CellGroupData[{
Cell[225455, 5297, 175, 3, 41, "Input"],
Cell[225633, 5302, 210, 4, 40, "Output"],
Cell[225846, 5308, 186, 4, 40, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[226069, 5317, 434, 11, 41, "Input"],
Cell[226506, 5330, 175, 6, 71, "Print"]
}, Open  ]],
Cell[CellGroupData[{
Cell[226718, 5341, 1457, 36, 202, "Input"],
Cell[228178, 5379, 317, 7, 40, "Output"],
Cell[228498, 5388, 252, 5, 40, "Output"],
Cell[228753, 5395, 226, 4, 40, "Output"],
Cell[228982, 5401, 288, 6, 43, "Output"]
}, Open  ]],
Cell[229285, 5410, 264, 5, 29, "Text"],
Cell[229552, 5417, 917, 22, 66, "Text"],
Cell[230472, 5441, 1277, 26, 41, "Input"],
Cell[231752, 5469, 503, 13, 29, "Text"],
Cell[CellGroupData[{
Cell[232280, 5486, 779, 15, 41, "Input"],
Cell[233062, 5503, 229, 5, 40, "Output"]
}, Open  ]],
Cell[233306, 5511, 1923, 57, 123, "Text"],
Cell[CellGroupData[{
Cell[235254, 5572, 1743, 37, 78, "Input"],
Cell[237000, 5611, 260, 5, 40, "Output"]
}, Open  ]],
Cell[237275, 5619, 139, 1, 29, "Text"],
Cell[237417, 5622, 77, 1, 29, "Text"],
Cell[237497, 5625, 103, 1, 29, "Text"],
Cell[237603, 5628, 77, 1, 29, "Text"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[237729, 5635, 202, 3, 75, "Section"],
Cell[CellGroupData[{
Cell[237956, 5642, 199, 3, 36, "Subsection"],
Cell[238158, 5647, 992, 20, 101, "Text"],
Cell[239153, 5669, 874, 15, 137, "Text"],
Cell[240030, 5686, 3953, 87, 385, "Input"],
Cell[CellGroupData[{
Cell[244008, 5777, 1165, 30, 102, "Input"],
Cell[245176, 5809, 3500, 64, 260, "Output"]
}, Open  ]],
Cell[248691, 5876, 134, 2, 41, "Input"]
}, Open  ]],
Cell[CellGroupData[{
Cell[248862, 5883, 222, 5, 36, "Subsection"],
Cell[249087, 5890, 319, 5, 47, "Text"],
Cell[249409, 5897, 1319, 33, 123, "Text"],
Cell[250731, 5932, 837, 18, 62, "Input"],
Cell[CellGroupData[{
Cell[251593, 5954, 351, 10, 41, "Input"],
Cell[251947, 5966, 7082, 123, 249, "Output"]
}, Open  ]],
Cell[259044, 6092, 784, 28, 51, "Text"],
Cell[CellGroupData[{
Cell[259853, 6124, 937, 23, 50, "Input"],
Cell[260793, 6149, 4258, 77, 258, "Output"]
}, Open  ]],
Cell[265066, 6229, 2306, 68, 388, "Text"],
Cell[CellGroupData[{
Cell[267397, 6301, 110, 1, 27, "Subsubsection"],
Cell[267510, 6304, 786, 25, 97, "Text"],
Cell[CellGroupData[{
Cell[268321, 6333, 1020, 33, 99, "Input"],
Cell[269344, 6368, 13823, 232, 247, "Output"],
Cell[283170, 6602, 218, 4, 40, "Output"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[283437, 6612, 135, 3, 27, "Subsubsection"],
Cell[283575, 6617, 2729, 81, 289, "Text"],
Cell[CellGroupData[{
Cell[286329, 6702, 656, 20, 62, "Input"],
Cell[286988, 6724, 89, 1, 40, "Output"]
}, Open  ]],
Cell[287092, 6728, 538, 18, 43, "Text"],
Cell[CellGroupData[{
Cell[287655, 6750, 1442, 36, 81, "Input"],
Cell[289100, 6788, 139, 2, 40, "Output"]
}, Open  ]],
Cell[289254, 6793, 149, 4, 47, "Text"]
}, Open  ]]
}, Open  ]]
}, Open  ]]
}, Open  ]]
}
]
*)

(* End of internal cache information *)
