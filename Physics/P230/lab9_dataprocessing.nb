(* Content-type: application/mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='Mathematica 6.0' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       145,          7]
NotebookDataLength[    174088,       3824]
NotebookOptionsPosition[    167379,       3625]
NotebookOutlinePosition[    167891,       3644]
CellTagsIndexPosition[    167848,       3641]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{

Cell[CellGroupData[{
Cell["\<\
Physics 230 -- Lab 9 (Data Processing)\
\>", "Title",
 CellChangeTimes->{{3.399308987464324*^9, 3.399308997477577*^9}, {
   3.3996509147507887`*^9, 3.3996509168582067`*^9}, 3.4274817158062444`*^9, {
   3.427505828304313*^9, 3.427505832757467*^9}, {3.4275745555520296`*^9, 
   3.42757455564578*^9}, {3.427574731865658*^9, 3.4275747372563176`*^9}, {
   3.4294834587838097`*^9, 3.4294834590806885`*^9}, 3.430327560654002*^9, {
   3.430601265670842*^9, 3.430601266858365*^9}, 3.4311905217116194`*^9, 
   3.4318058743262105`*^9, 3.4322908055044465`*^9, 3.432910136263564*^9, {
   3.433205089320956*^9, 3.4332051069307823`*^9}, {3.433259990263834*^9, 
   3.4332599997484517`*^9}, {3.4336892224375553`*^9, 3.433689223515708*^9}, {
   3.4342150326553063`*^9, 3.4342150328584366`*^9}, {3.434215084125374*^9, 
   3.434215090203655*^9}, {3.4342354968901157`*^9, 3.4342354970463676`*^9}, 
   3.43440013019414*^9, {3.434923340591065*^9, 3.434923347648348*^9}, {
   3.435922776887051*^9, 3.435922782561964*^9}, {3.5239599940097523`*^9, 
   3.523959994394752*^9}}],

Cell["\<\
Branton J. Campbell, BYU Physics & Astronomy, Winter 2010
R. Steven Turley, BYU Physics & Astronomy, Fall 2011
\
\>", "Subtitle",
 CellChangeTimes->{{3.433259527908248*^9, 3.433259551315097*^9}, {
  3.446333765199298*^9, 3.446333766839923*^9}, {3.4717904716691027`*^9, 
  3.4717904722003565`*^9}, {3.5246453315137153`*^9, 3.5246453354737206`*^9}, {
  3.5246453851337905`*^9, 3.5246454002738113`*^9}}],

Cell[TextData[{
 "Most scientists spend a great deal of time working with data.  In this lab, \
we will introduce some important tools for importing and exporting a variety \
of data types to and from ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 ", and will also practice the art of manipulating complicated \
multidimensional lists (i.e. arrays) of data."
}], "Text",
 CellChangeTimes->{{3.4303328171611757`*^9, 3.4303328617557817`*^9}, {
   3.430337158416401*^9, 3.430337162963363*^9}, {3.4303440447361155`*^9, 
   3.4303440608145494`*^9}, {3.430352154594947*^9, 3.430352177017253*^9}, 
   3.430497670206213*^9, {3.4306011277463193`*^9, 3.4306011281682024`*^9}, 
   3.430601271436578*^9, {3.4306013425004425`*^9, 3.430601366329025*^9}, {
   3.4307097552544365`*^9, 3.430709783676858*^9}, {3.4307694207016554`*^9, 
   3.43076964619036*^9}, {3.430769681566039*^9, 3.4307700168381014`*^9}, {
   3.4311197804732823`*^9, 3.431119796661093*^9}, {3.431190525414815*^9, 
   3.4311905257429466`*^9}, 3.4311905979787083`*^9, {3.4311907394970503`*^9, 
   3.431190742981492*^9}, {3.431492886761525*^9, 3.431492887223022*^9}, {
   3.431494062343462*^9, 3.431494337141776*^9}, {3.4317255415822144`*^9, 
   3.4317255520667906`*^9}, {3.4318058441225057`*^9, 3.431805844450637*^9}, {
   3.4318073279009933`*^9, 3.4318073289478884`*^9}, {3.4318785406526766`*^9, 
   3.431878608466479*^9}, {3.4322908285673895`*^9, 3.4322909571167326`*^9}, {
   3.4322922730482473`*^9, 3.432293150330716*^9}, {3.4329099693228593`*^9, 
   3.432909970526007*^9}, {3.4329102356092215`*^9, 3.4329102393905444`*^9}, {
   3.432910984811106*^9, 3.432911019280518*^9}, {3.4329110574843764`*^9, 
   3.4329111183292947`*^9}, {3.432911200955881*^9, 3.4329112138936296`*^9}, {
   3.4329118104050827`*^9, 3.43291181107697*^9}, {3.4329135996738105`*^9, 
   3.4329136611593657`*^9}, {3.4329142475925007`*^9, 3.432914473831219*^9}, 
   3.432916189082901*^9, 3.43291645930684*^9, {3.4329167501092978`*^9, 
   3.4329167720315933`*^9}, {3.4330158750885677`*^9, 3.433015875463575*^9}, {
   3.433072742352726*^9, 3.433073376817874*^9}, {3.4332050929772997`*^9, 
   3.4332050933054333`*^9}, {3.4332602218635125`*^9, 3.433260229207451*^9}, {
   3.433525730550697*^9, 3.433525816393897*^9}, {3.4335259150495157`*^9, 
   3.43352593479939*^9}, {3.433525970408537*^9, 3.4335262261569*^9}, {
   3.4335263061251383`*^9, 3.433526322687532*^9}, {3.4335265292955847`*^9, 
   3.4335265657484765`*^9}, {3.433526646247961*^9, 3.433526694263279*^9}, {
   3.4335267242787123`*^9, 3.4335267541222706`*^9}, {3.4335267939032664`*^9, 
   3.4335268524341416`*^9}, {3.4335275777419996`*^9, 3.433527748990904*^9}, {
   3.4335278487246404`*^9, 3.4335278598808193`*^9}, {3.433528262971989*^9, 
   3.4335282724563036`*^9}, {3.4336981782449427`*^9, 
   3.4336983987037115`*^9}, {3.4336984290482388`*^9, 
   3.4336988991071463`*^9}, {3.4336989538741736`*^9, 3.4336993600564466`*^9}, 
   3.433727829997929*^9, {3.4338777570969467`*^9, 3.4338777570977383`*^9}, {
   3.434215080297151*^9, 3.434215080625284*^9}, {3.434913498879365*^9, 
   3.434913591521956*^9}, {3.434913624971479*^9, 3.434913697189571*^9}, {
   3.434913797048811*^9, 3.434913855122602*^9}, {3.434919797455858*^9, 
   3.4349198191977997`*^9}, {3.434923353216918*^9, 3.4349233569937277`*^9}, {
   3.434984635249735*^9, 3.434984669678955*^9}, {3.4349884151213474`*^9, 
   3.4349884192151756`*^9}, {3.4350081146245704`*^9, 3.435008177563279*^9}, {
   3.4350082927686157`*^9, 3.4350083625668306`*^9}, {3.435099854867256*^9, 
   3.435099857058811*^9}, {3.435319820966485*^9, 3.4353198596034813`*^9}, {
   3.435322920254232*^9, 3.4353229660675087`*^9}, {3.4353229982544203`*^9, 
   3.435323683114252*^9}, {3.435324501678684*^9, 3.435324511047985*^9}, {
   3.4357173616829367`*^9, 3.4357173624566813`*^9}, {3.435922811363119*^9, 
   3.4359228139854116`*^9}, {3.43613098214093*^9, 3.436130984556963*^9}, {
   3.4361835828272038`*^9, 3.4361838977287607`*^9}, {3.4362703022212353`*^9, 
   3.436270303833487*^9}, {3.436277983411159*^9, 3.436277988584036*^9}, {
   3.436278103630924*^9, 3.4362781137237864`*^9}}],

Cell[CellGroupData[{

Cell["File systems (20 min)", "Section",
 CellChangeTimes->{{3.4295067016396456`*^9, 3.4295067053740683`*^9}, {
   3.4295067464995947`*^9, 3.4295067610466557`*^9}, {3.429506829875662*^9, 
   3.4295068318131866`*^9}, {3.4295069040797367`*^9, 
   3.4295069045172424`*^9}, {3.4311871674597187`*^9, 3.431187169162876*^9}, 
   3.4332815999263563`*^9, {3.435925354957663*^9, 3.4359253550434637`*^9}, {
   3.4360344790270667`*^9, 3.4360344862457705`*^9}, 3.4360345387766843`*^9, 
   3.4360460792028255`*^9, {3.436046110327626*^9, 3.4360461104057503`*^9}, {
   3.436046502340742*^9, 3.436046502496991*^9}, {3.436221362180441*^9, 
   3.436221362321065*^9}}],

Cell[CellGroupData[{

Cell["(#1) System Variables (5 min)", "Subsection",
 CellChangeTimes->{{3.436038144612982*^9, 3.436038152159809*^9}, 
   3.436046485543975*^9}],

Cell[TextData[{
 "(a) Evaluate the cell below to see the ",
 StyleBox[ButtonBox["Names",
  BaseStyle->"Link",
  ButtonData->"paclet://ref/Names"],
  FontWeight->"Bold"],
 " of all ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " functions and symbols that start with the letter \"W\"."
}], "Text",
 CellChangeTimes->{{3.4360382538310328`*^9, 3.436038292690159*^9}, {
  3.4360383295024233`*^9, 3.4360384108456535`*^9}, {3.436038651359739*^9, 
  3.4360386738752193`*^9}, {3.4360387129999695`*^9, 3.436038735249827*^9}, {
  3.4360389667170954`*^9, 3.4360389673577166`*^9}, {3.4360390635446005`*^9, 
  3.436039139247241*^9}, {3.43603917460639*^9, 3.436039194575012*^9}, {
  3.4360392377622356`*^9, 3.4360392408872156`*^9}, {3.436269957579595*^9, 
  3.436269958777461*^9}}],

Cell[BoxData[
 RowBox[{"Names", "[", "\"\<W*\>\"", "]"}]], "Input",
 CellChangeTimes->{{3.436038200206376*^9, 3.4360382442217197`*^9}, {
   3.4360383112212906`*^9, 3.4360383246274548`*^9}, {3.4360384387985992`*^9, 
   3.436038444595437*^9}, {3.4360386804064283`*^9, 3.436038723953024*^9}, {
   3.4360387732964582`*^9, 3.4360387876713667`*^9}, {3.4360390513884287`*^9, 
   3.4360390564040213`*^9}, {3.4360391434503393`*^9, 3.4360391537940235`*^9}, 
   3.436039219652977*^9, {3.4463823732096233`*^9, 3.4463823743033733`*^9}}],

Cell[TextData[{
 "\n(b) Beginning with a freshly-started kernel, evaluate the cell below to \
create a list containing all of the functions and symbols defined within ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 ", and to count their number.  Most of them are loaded when you start ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 ", though the list grows when you start defining your own."
}], "Text",
 CellChangeTimes->{{3.4360392273091774`*^9, 3.436039296746233*^9}, {
  3.436039343933431*^9, 3.436039350089642*^9}, {3.4360393992299523`*^9, 
  3.436039427245398*^9}, {3.436269988924301*^9, 3.4362699905700808`*^9}}],

Cell[BoxData[{
 RowBox[{
  RowBox[{"Names", "[", "\"\<*\>\"", "]"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"startupnames", " ", "=", " ", "%"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{"Length", "[", "startupnames", "]"}]}], "Input",
 CellChangeTimes->{{3.436038200206376*^9, 3.4360382442217197`*^9}, {
   3.4360383112212906`*^9, 3.4360383246274548`*^9}, {3.4360384387985992`*^9, 
   3.436038444595437*^9}, {3.4360386804064283`*^9, 3.436038723953024*^9}, {
   3.4360387732964582`*^9, 3.4360387876713667`*^9}, {3.4360390513884287`*^9, 
   3.4360390564040213`*^9}, {3.4360391434503393`*^9, 3.4360391537940235`*^9}, 
   3.436039219652977*^9, {3.43603930655867*^9, 3.4360393082774096`*^9}, {
   3.436039444510913*^9, 3.436039504151156*^9}}],

Cell[TextData[{
 "\n(c) Many more functions and symbols are added whenever you load \
additional packages.  Evaluate the cell below to see the new functions and \
symbols defined after loading the ",
 StyleBox["VectorAnalysis",
  FontWeight->"Bold"],
 " package.  Explain to your TA how ",
 StyleBox["Complement",
  FontWeight->"Bold"],
 " was used to obtain this list."
}], "Text",
 CellChangeTimes->{{3.4360389726545577`*^9, 3.4360390033262362`*^9}, {
  3.4360393273085375`*^9, 3.4360393721676254`*^9}, {3.4360395498227386`*^9, 
  3.4360395679632473`*^9}, {3.4362700462216873`*^9, 3.43627007395581*^9}, {
  3.436270104590403*^9, 3.436270119876774*^9}}],

Cell[BoxData[{
 RowBox[{"<<", "VectorAnalysis`"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"currentnames", " ", "=", " ", 
   RowBox[{"Names", "[", "\"\<*\>\"", "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"Length", "[", "currentnames", "]"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{"newnames", " ", "=", " ", 
  RowBox[{"Complement", "[", 
   RowBox[{"currentnames", ",", "startupnames"}], 
   "]"}]}], "\[IndentingNewLine]", 
 RowBox[{"Length", "[", "newnames", "]"}]}], "Input",
 CellChangeTimes->{{3.436038743249776*^9, 3.4360388322960806`*^9}, {
  3.4360388650302467`*^9, 3.436038946342226*^9}, {3.436039541604041*^9, 
  3.4360396101973524`*^9}}],

Cell[TextData[{
 "\n(d) Names beginning with the \"",
 StyleBox["$",
  FontWeight->"Bold"],
 "\" character are called system variables.  ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " relies on their values to perform important tasks that are normally \
transparent to the user.  Sometimes, however, it is useful to monitor or \
modify the values of system values.  Evaluate the cell below to see their \
current values, and study the output to find out which ",
 StyleBox["$Packages",
  FontWeight->"Bold"],
 " have been installed."
}], "Text",
 CellChangeTimes->{{3.436039625259756*^9, 3.4360396846968756`*^9}, {
   3.4360397786337743`*^9, 3.4360398285240803`*^9}, {3.4360400538351383`*^9, 
   3.4360401248815584`*^9}, 3.436040194021741*^9, {3.4362701772020893`*^9, 
   3.4362701780224037`*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"MatrixForm", "/@", 
     RowBox[{"{", 
      RowBox[{"#", ",", 
       RowBox[{"ToExpression", "[", "#", "]"}]}], "}"}]}], "&"}], "/@", 
   RowBox[{"Names", "[", "\"\<$*\>\"", "]"}]}], "//", "TableForm"}]], "Input",
 CellChangeTimes->{{3.436039745102739*^9, 3.4360397481339693`*^9}, {
  3.436039861773867*^9, 3.436039949945178*^9}, {3.436270197363522*^9, 
  3.4362702001598167`*^9}}]
}, Closed]],

Cell[CellGroupData[{

Cell["(#2) Navigation (10 min)", "Subsection",
 CellChangeTimes->{{3.4360345630577793`*^9, 3.436034572417094*^9}, 
   3.436041717996362*^9, {3.43604610740577*^9, 3.4360461075307693`*^9}}],

Cell[TextData[{
 "Browse the DC tutorial on ",
 Cell[BoxData[
  FormBox[
   StyleBox[
    ButtonBox[
     StyleBox[
      ButtonBox[
       RowBox[{"Naming", " ", "and", " ", "Finding", " ", "Files"}],
       BaseStyle->"Link",
       ButtonData->"paclet://tutorial/NamingAndFinding"],
      FontWeight->"Bold"],
     BaseStyle->"Link",
     ButtonData->"paclet://tutorial/NamingAndFindingFiles"],
    FontWeight->"Bold"], TraditionalForm]]],
 " and also a few of the references pages linked there."
}], "Text",
 CellChangeTimes->{{3.429386786820779*^9, 3.429386933291404*^9}, {
   3.4295067936564484`*^9, 3.429506794343957*^9}, {3.4295144765829134`*^9, 
   3.42951448137985*^9}, {3.429514572881021*^9, 3.4295146061158214`*^9}, {
   3.429514649006995*^9, 3.429515056449711*^9}, {3.4295155635655766`*^9, 
   3.42951568530151*^9}, {3.4332809658476243`*^9, 3.433280978066687*^9}, {
   3.4360344166055913`*^9, 3.436034427152399*^9}, {3.4360407506119285`*^9, 
   3.4360407585493774`*^9}, {3.436040934095129*^9, 3.4360409604543357`*^9}, {
   3.43604103945383*^9, 3.436041056594345*^9}, 3.4360452357863483`*^9, {
   3.436270364924593*^9, 3.436270365035355*^9}, {3.500050479801159*^9, 
   3.5000504836405425`*^9}, {3.500050609215099*^9, 3.5000506152267*^9}, 
   3.5000506707302494`*^9}],

Cell[TextData[{
 "(a)  In the cell below, we set the working directory to the default ",
 StyleBox["$InitialDirectory",
  FontWeight->"Bold"],
 ".  In the same cell, (1) use ",
 StyleBox[ButtonBox["Directory",
  BaseStyle->"Link",
  ButtonData->"paclet://ref/Directory"],
  FontWeight->"Bold"],
 " to identify the working directory, (2) use ",
 StyleBox[ButtonBox["FileNames",
  BaseStyle->"Link",
  ButtonData->"paclet://ref/FileNames"],
  FontWeight->"Bold"],
 " to view the files in the current directory, (3) use ",
 StyleBox[ButtonBox["SetDirectory",
  BaseStyle->"Link",
  ButtonData->"paclet://ref/SetDirectory"],
  FontWeight->"Bold"],
 " to change the working directory to \"../\", (4) use ",
 StyleBox["FileNames",
  FontWeight->"Bold"],
 " to view the files in that directory, (5) use ",
 StyleBox["SetDirectory",
  FontWeight->"Bold"],
 " with a relative pathname (e.g. \"230labs\") to change back to the original \
working directory, and (6) use ",
 StyleBox["FileNames",
  FontWeight->"Bold"],
 " to view the files in the original working directory once again."
}], "Text",
 CellChangeTimes->{{3.429386786820779*^9, 3.429386933291404*^9}, {
   3.4295067936564484`*^9, 3.429506794343957*^9}, {3.4295144765829134`*^9, 
   3.42951448137985*^9}, {3.429514572881021*^9, 3.4295146061158214`*^9}, {
   3.429514649006995*^9, 3.429515056449711*^9}, {3.4295155635655766`*^9, 
   3.42951568530151*^9}, {3.4332809658476243`*^9, 3.433280978066687*^9}, {
   3.4360344166055913`*^9, 3.436034427152399*^9}, {3.4360407506119285`*^9, 
   3.4360407585493774`*^9}, {3.436040934095129*^9, 3.4360409604543357`*^9}, {
   3.43604103945383*^9, 3.436041056594345*^9}, 3.4360452357863483`*^9, {
   3.436045409113364*^9, 3.436045418628928*^9}, {3.436045464300511*^9, 
   3.4360455188001623`*^9}, {3.4360455576749134`*^9, 
   3.4360456292838297`*^9}, {3.436270393308365*^9, 3.436270393732009*^9}, {
   3.437225796241484*^9, 3.437225865491041*^9}}],

Cell[BoxData[
 StyleBox[
  RowBox[{
   RowBox[{
    RowBox[{"SetDirectory", "[", "$InitialDirectory", "]"}], ";"}], 
   "\[IndentingNewLine]"}],
  FontWeight->"Bold"]], "Input",
 CellChangeTimes->{{3.436034719603652*^9, 3.4360347204630213`*^9}, {
   3.436035984173684*^9, 3.436036101047936*^9}, {3.4360362860780015`*^9, 
   3.4360364289520874`*^9}, {3.436036537576392*^9, 3.436036550263811*^9}, {
   3.4360407956428905`*^9, 3.4360408104552956`*^9}, {3.436040863751829*^9, 
   3.4360408848298197`*^9}, 3.436041005235299*^9, {3.436270422496052*^9, 
   3.4362704232344112`*^9}, 3.436275678398892*^9, {3.4372257856009274`*^9, 
   3.4372257869915433`*^9}, 3.437225868756645*^9}],

Cell[TextData[{
 "\n(b) In the cell below, we evaluate ",
 StyleBox["originald = Directory[]",
  FontWeight->"Bold"],
 " to save the absolute pathname of the original working directory.  We then \
use ",
 StyleBox["SetDirectory",
  FontWeight->"Bold"],
 " with absolute pathnames to switch to several important system locations.  \
Finally, we use ",
 StyleBox["SetDirectory[originald]",
  FontWeight->"Bold"],
 " to get back to our original working directory.  The path names that we \
have used here assume that you are working on a Windows PC computer in one of \
our department computing labs.  If this is not the case, you should change \
them as appropriate for your computer.\n\nNote that the back-slash (\"\\\") \
character must be doubled (i.e. \"\\\\\" instead of \"\\\") wherever we \
include it as input within a pathname, though the same back-slash will not \
appear doubled when displayed as output.  You can ask your instructor if you \
are dying to know more about this."
}], "Text",
 CellChangeTimes->{{3.4360366895441694`*^9, 3.4360367161846237`*^9}, {
   3.4360367525281415`*^9, 3.436037028807623*^9}, {3.4360370959946933`*^9, 
   3.436037110213352*^9}, {3.436037238400032*^9, 3.436037244915615*^9}, {
   3.436037279602893*^9, 3.43603753405439*^9}, {3.4360375705229063`*^9, 
   3.4360376490849037`*^9}, 3.4360403551144595`*^9, {3.4360403937704625`*^9, 
   3.4360405233477583`*^9}, {3.4360406367064075`*^9, 
   3.4360406816748695`*^9}, {3.4360407271277037`*^9, 3.436040727580826*^9}, 
   3.4360407617681074`*^9, {3.4360410190945854`*^9, 3.4360410206727*^9}, {
   3.436041082141057*^9, 3.4360411230939198`*^9}, {3.4360411697654963`*^9, 
   3.4360411717186084`*^9}, {3.436270502936265*^9, 3.436270639899748*^9}, {
   3.4362706716990137`*^9, 3.436270675051052*^9}}],

Cell[BoxData[{
 RowBox[{"originald", " ", "=", " ", 
  RowBox[{"Directory", "[", "]"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"myname", " ", "=", " ", "$UserName"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{"SetDirectory", "[", 
  RowBox[{"\"\<C:/Documents and Settings/\>\"", "<>", "myname"}], 
  "]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"FileNames", "[", "]"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{"SetDirectory", "[", 
  RowBox[{"\"\<\\\\\\\\physics\\\\shares\\\\users\\\\\>\"", "<>", "myname"}], 
  "]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"FileNames", "[", "]"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{"SetDirectory", "[", "originald", "]"}], "\[IndentingNewLine]", 
 RowBox[{"FileNames", "[", "]"}]}], "Input",
 CellChangeTimes->{{3.4360363229996405`*^9, 3.436036327265238*^9}, {
   3.436036546170087*^9, 3.4360365959353933`*^9}, {3.4360370397606783`*^9, 
   3.436037073510462*^9}, {3.4360371346975703`*^9, 3.4360372299157114`*^9}, 
   3.436037423664471*^9, {3.4360376547411175`*^9, 3.436037658209845*^9}, {
   3.436037852146104*^9, 3.4360379165675664`*^9}, 3.4360403323489804`*^9}],

Cell[TextData[{
 "\n(c) Ideally, when you start ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " by double-clicking on the icon of a notebook file, the working directory \
(i.e. folder) would default to the directory containing that file.  However, \
on computer systems that employ remotely mounted drives (e.g. the physics P: \
drive or the university U: drive), ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " often defaults to a less intelligent location.  The straightforward \
solution is to employ ",
 StyleBox["SetDirectory",
  FontWeight->"Bold"],
 " with the absolute pathname of the directory where you want to be working, \
though working with absolute pathnames can be a little painful on some \
computer systems.  The cell below contains an alternative approach that will \
help you in the future if you can remember where you saw it.  Evaluate this \
convoluted-looking instruction to automatically set the working directory to \
the location of your current notebook file.  Highlight this cell and use the ",
 StyleBox["Cell: Cell Properties",
  FontWeight->"Bold",
  FontColor->RGBColor[0., 0.5019607843137255, 0.]],
 " menu option to turn it into an initialization cell -- then it will always \
be executed when you first open the notebook."
}], "Text",
 CellChangeTimes->{{3.4295150734968038`*^9, 3.4295152950933905`*^9}, {
  3.4295153561410465`*^9, 3.4295155297526436`*^9}, {3.429515731489601*^9, 
  3.4295157361459103`*^9}, {3.4332809405344763`*^9, 3.4332809419407625`*^9}, {
  3.4332809798011065`*^9, 3.4332809805042496`*^9}, {3.4332810891789064`*^9, 
  3.433281091116456*^9}, {3.436034801337504*^9, 3.436034806524971*^9}, {
  3.4360407377995105`*^9, 3.43604073865888*^9}, {3.436041166406142*^9, 
  3.436041573841035*^9}, {3.4360416922777767`*^9, 3.436041708668297*^9}, {
  3.436041747355549*^9, 3.436041812558257*^9}, {3.4360420401505504`*^9, 
  3.436042111493844*^9}, {3.436045268036142*^9, 3.4360453151139655`*^9}, {
  3.436045687642831*^9, 3.4360458146732683`*^9}, {3.436275735382256*^9, 
  3.436275826105001*^9}, {3.4397514118260374`*^9, 3.43975141768545*^9}}],

Cell[BoxData[{
 RowBox[{"SetDirectory", "[", 
  RowBox[{"NotebookDirectory", "[", "]"}], "]"}], "\[IndentingNewLine]", 
 RowBox[{"FileNames", "[", "]"}]}], "Input",
 CellChangeTimes->{
  3.429515298421558*^9, 3.4295153317188587`*^9, {3.429515402235387*^9, 
   3.429515409876109*^9}, {3.436041622840721*^9, 3.436041626965695*^9}, {
   3.436041753699259*^9, 3.436041756964863*^9}, 3.4360453270826387`*^9, {
   3.444426989772464*^9, 3.444426993600564*^9}}]
}, Closed]],

Cell[CellGroupData[{

Cell["(#3) File Manipuation (5 min)", "Subsection",
 CellChangeTimes->{{3.436034549760989*^9, 3.4360346061043787`*^9}, 
   3.4360458573917446`*^9}],

Cell["\<\
(a) Evaluate this cell to create a file in your working directory called \
\"oldtest.txt\".  Check to make sure that it was created.\
\>", "Text",
 CellChangeTimes->{{3.436035298303074*^9, 3.436035300553059*^9}, 
   3.4360359472207956`*^9, {3.436045982078447*^9, 3.436046035624979*^9}, {
   3.4360461303899975`*^9, 3.436046180311553*^9}, {3.436046211561353*^9, 
   3.4360462360768213`*^9}}],

Cell[BoxData[
 RowBox[{"Export", "[", 
  RowBox[{"\"\<oldtest.txt\>\"", ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "2", ",", "3", ",", "4", ",", "5"}], "}"}]}], 
  "]"}]], "Input",
 CellChangeTimes->{{3.4360352892250066`*^9, 3.4360352901625004`*^9}, {
   3.4360459882502823`*^9, 3.4360460043751793`*^9}, {3.4360462397955475`*^9, 
   3.436046240858041*^9}, 3.436046395857049*^9, {3.5244221913904667`*^9, 
   3.5244222157632356`*^9}}],

Cell["\<\
Check and see how the information in this file was stored.\
\>", "Text",
 CellChangeTimes->{{3.524422221941615*^9, 3.5244222303035145`*^9}}],

Cell[BoxData[
 RowBox[{"FilePrint", "[", "\"\<oldtest.txt\>\"", "]"}]], "Input",
 CellChangeTimes->{{3.4360352892250066`*^9, 3.4360352901625004`*^9}, {
   3.4360459882502823`*^9, 3.4360460043751793`*^9}, {3.4360462397955475`*^9, 
   3.436046240858041*^9}, 3.436046395857049*^9, {3.5244221913904667`*^9, 
   3.5244222157632356`*^9}}],

Cell["\<\

(b) Evaluate this cell to copy \"oldtest.txt\" to a new file called \
\"newtest.txt\".  Check to make sure that it was copied.\
\>", "Text",
 CellChangeTimes->{{3.436035298303074*^9, 3.436035300553059*^9}, 
   3.4360359472207956`*^9, {3.436045982078447*^9, 3.436046035624979*^9}, 
   3.4360460752809753`*^9, {3.436046251623597*^9, 3.43604630192015*^9}, {
   3.52442218620054*^9, 3.5244221885527725`*^9}}],

Cell[BoxData[
 RowBox[{"CopyFile", "[", 
  RowBox[{"\"\<oldtest.txt\>\"", ",", "\"\<newtest.txt\>\""}], "]"}]], "Input",
 CellChangeTimes->{{3.4360352892250066`*^9, 3.4360352901625004`*^9}, {
  3.4360459882502823`*^9, 3.4360460043751793`*^9}, {3.4360462726078377`*^9, 
  3.4360462848577595`*^9}}],

Cell["\<\

(c) Evaluate this cell to delete both files.  Check to make sure that they \
were deleted.\
\>", "Text",
 CellChangeTimes->{{3.436035298303074*^9, 3.436035300553059*^9}, 
   3.4360359472207956`*^9, {3.436045982078447*^9, 3.436046035624979*^9}, {
   3.436046293170206*^9, 3.4360463433886347`*^9}, {3.436046433856806*^9, 
   3.436046448622336*^9}}],

Cell[BoxData[
 RowBox[{"DeleteFile", "[", 
  RowBox[{"{", 
   RowBox[{"\"\<oldtest.txt\>\"", ",", "\"\<newtest.txt\>\""}], "}"}], 
  "]"}]], "Input",
 CellChangeTimes->{{3.4360352892250066`*^9, 3.4360352901625004`*^9}, {
  3.4360459882502823`*^9, 3.4360460043751793`*^9}, {3.4360463519823294`*^9, 
  3.436046358466663*^9}, {3.436046412185069*^9, 3.436046420310017*^9}}]
}, Closed]]
}, Closed]],

Cell[CellGroupData[{

Cell["\<\
Data import/export/processing (75 min)\
\>", "Section",
 CellChangeTimes->{{3.4275746644277267`*^9, 3.4275746780059385`*^9}, {
   3.429483477440298*^9, 3.4294834808153415`*^9}, 3.4295068360319905`*^9, {
   3.4295135359614983`*^9, 3.4295135391334143`*^9}, {3.4311871957102613`*^9, 
   3.4311871970384116`*^9}, {3.433281586613516*^9, 3.4332815879573*^9}, {
   3.4359232340681267`*^9, 3.435923238337859*^9}, 3.435925362374331*^9, {
   3.4359290244564962`*^9, 3.435929055679201*^9}, {3.4359290940644093`*^9, 
   3.435929098800604*^9}, {3.4359299927576942`*^9, 3.435929992850533*^9}, {
   3.436046647449188*^9, 3.4360466480741844`*^9}, {3.436046860963447*^9, 
   3.4360468610571966`*^9}, {3.4360613766517963`*^9, 3.436061398886029*^9}, {
   3.4360660020128183`*^9, 3.4360660021846924`*^9}, {3.4361198197040863`*^9, 
   3.436119819846488*^9}, {3.436119868025365*^9, 3.436119875017146*^9}, {
   3.4362213613366966`*^9, 3.436221361492945*^9}, {3.524674286673028*^9, 
   3.524674287084051*^9}}],

Cell[CellGroupData[{

Cell[TextData[{
 "(#4) Import/Export of ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " expressions (5 min)"
}], "Subsection",
 CellChangeTimes->{{3.429506736999473*^9, 3.429506740921398*^9}, {
   3.4295068007034135`*^9, 3.4295068028909416`*^9}, {3.4295068388132763`*^9, 
   3.429506840782051*^9}, {3.429506908314166*^9, 3.42950690865792*^9}, {
   3.429515842787901*^9, 3.429515849241108*^9}, {3.429515898366737*^9, 
   3.429515908851246*^9}, {3.43118717480361*^9, 3.4311871764442663`*^9}, 
   3.4332816020045347`*^9, {3.436046796557609*^9, 3.4360467966669836`*^9}, {
   3.4360468292605247`*^9, 3.436046832885502*^9}, {3.436119877777487*^9, 
   3.43611987793731*^9}, {3.436278026068061*^9, 3.4362780274251328`*^9}}],

Cell[TextData[{
 "Importing and exporting complete ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " expressions is really easy.  Browse the tutorial page on ",
 Cell[BoxData[
  FormBox[
   StyleBox[
    ButtonBox[
     RowBox[{
     "Reading", " ", "and", " ", "Writing", " ", "Mathematica", " ", "Files"}],
     BaseStyle->"Link",
     ButtonData->"paclet://tutorial/ReadingAndWritingMathematicaFiles"],
    FontWeight->"Bold"], TraditionalForm]]],
 "."
}], "Text",
 CellChangeTimes->{{3.429386786820779*^9, 3.429386933291404*^9}, {
   3.4295068556884923`*^9, 3.429506871204316*^9}, 3.4295144571295395`*^9, {
   3.429515856897456*^9, 3.4295160220558205`*^9}, {3.4295160755096292`*^9, 
   3.4295160838847365`*^9}, {3.436275935111548*^9, 3.4362759577567883`*^9}, {
   3.5000515623574038`*^9, 3.5000515623614035`*^9}}],

Cell[TextData[{
 "(a) Execute this cell to ",
 StyleBox[ButtonBox["Expand",
  BaseStyle->"Link",
  ButtonData->"paclet://ref/Expand"],
  FontWeight->"Bold"],
 " the polynomial ",
 Cell[BoxData[
  FormBox[
   SuperscriptBox[
    RowBox[{"(", 
     RowBox[{"x", "+", "y"}], ")"}], "10"], TraditionalForm]]],
 " and write the result to an ascii text file called \"test.txt\"."
}], "Text",
 CellChangeTimes->{
  3.429506874407482*^9, {3.429514105687541*^9, 3.429514131531622*^9}, {
   3.429516043056089*^9, 3.429516351153783*^9}, {3.4295164592332907`*^9, 
   3.4295164858430066`*^9}, {3.429516542593733*^9, 3.4295165958287897`*^9}, {
   3.4295167051270638`*^9, 3.429516812737816*^9}, {3.4360469038694224`*^9, 
   3.436046904635042*^9}, 3.4360469558690896`*^9, 3.4362762118603086`*^9, {
   3.436276317920087*^9, 3.4362763190473337`*^9}, {3.436276393476865*^9, 
   3.436276394465382*^9}}],

Cell[BoxData[{
 RowBox[{"Expand", "[", 
  RowBox[{
   RowBox[{"(", 
    RowBox[{"x", "+", "y"}], ")"}], "^", "10"}], "]"}], "\[IndentingNewLine]", 
 RowBox[{"%", " ", ">>", " ", "\"\<test.txt\>\""}]}], "Input",
 CellChangeTimes->{{3.429514139437973*^9, 3.4295141975168414`*^9}, 
   3.429515756083666*^9, {3.4295163556069646`*^9, 3.429516367966498*^9}, {
   3.42951660289138*^9, 3.429516612141498*^9}}],

Cell[TextData[{
 "\n(b) Manually open the new text file in an external text editor of some \
kind (e.g. Wordpad, Notepad, TextEdit) to see what the saved expression looks \
like.  Also evaluate this cell to view the contents of the file with ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 "'s ",
 StyleBox[ButtonBox["FilePrint",
  BaseStyle->"Link",
  ButtonData->"paclet://ref/FilePrint"],
  FontWeight->"Bold"],
 " function."
}], "Text",
 CellChangeTimes->{{3.4360469510566206`*^9, 3.436047079712047*^9}, {
  3.436275994550334*^9, 3.436276007894775*^9}, {3.436276200900041*^9, 
  3.436276263189849*^9}, {3.436276400066518*^9, 3.436276400985499*^9}}],

Cell[BoxData[
 RowBox[{"FilePrint", "[", "\"\<test.txt\>\"", "]"}]], "Input",
 CellChangeTimes->{{3.429516664407792*^9, 3.4295166914237633`*^9}}],

Cell[TextData[{
 "\n(c) Evaluate this cell to read the expression back in again and to ",
 StyleBox["Simplify",
  FontWeight->"Bold"],
 " it."
}], "Text",
 CellChangeTimes->{{3.4360469510566206`*^9, 3.436047091430722*^9}, {
  3.4362763225511417`*^9, 3.436276367408268*^9}}],

Cell[BoxData[{
 RowBox[{"<<", "\"\<test.txt\>\""}], "\[IndentingNewLine]", 
 RowBox[{"%", "//", "Simplify"}]}], "Input",
 CellChangeTimes->{{3.429516386638612*^9, 3.4295164389674063`*^9}, {
   3.429516529390439*^9, 3.4295165340467486`*^9}, 3.42951662046973*^9, {
   3.436046913338112*^9, 3.4360469209005632`*^9}}]
}, Closed]],

Cell[CellGroupData[{

Cell["(#5) Import/Export/Processing of numerical data (10 min)", "Subsection",
 CellChangeTimes->{{3.429506736999473*^9, 3.429506740921398*^9}, {
   3.4295068007034135`*^9, 3.4295068477821407`*^9}, {3.4295069140017385`*^9, 
   3.429506914720498*^9}, {3.4295168258629837`*^9, 3.42951683922253*^9}, {
   3.429517190117646*^9, 3.429517199867771*^9}, {3.4311871848038015`*^9, 
   3.4311871863663316`*^9}, 3.43328160436397*^9, {3.436046728323671*^9, 
   3.4360468031356916`*^9}, {3.436119806599432*^9, 3.4361198082712593`*^9}, {
   3.436119879217496*^9, 3.436119879377317*^9}, {3.4362780297216587`*^9, 
   3.436278031185219*^9}}],

Cell[TextData[{
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " supports many formats for ",
 StyleBox[ButtonBox["Importing and Exporting",
  BaseStyle->"Link",
  ButtonData->"paclet://guide/ImportingAndExporting"],
  FontWeight->"Bold"],
 " data (e.g. images, audio, video).  While we will focus on simple numerical \
data arrays here, we will explore other data formats later in the semester.  \
Evaluate each of the cells below and try to understand the output.\n\n(a) \
First, evaluate the cell below to create an artificial dataset (a noisy \
quadratic) and plot it."
}], "Text",
 CellChangeTimes->{{3.429386786820779*^9, 3.429386933291404*^9}, {
   3.429506878063779*^9, 3.4295068805169353`*^9}, {3.429517147367099*^9, 
   3.429517148445238*^9}, 3.429518523915969*^9, {3.429519355457862*^9, 
   3.429519586288942*^9}, {3.4295220997898645`*^9, 3.4295221255401936`*^9}, {
   3.4360466043400893`*^9, 3.436046605121334*^9}, {3.436276166349492*^9, 
   3.436276172978866*^9}}],

Cell[BoxData[{
 RowBox[{"xydata", " ", "=", " ", 
  RowBox[{"Table", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"n", ",", 
      RowBox[{
       RowBox[{"n", "^", "2"}], "+", 
       RowBox[{"5", "*", 
        RowBox[{"RandomReal", "[", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"-", "1"}], ",", "1"}], "}"}], "]"}]}]}]}], "}"}], ",", 
    " ", 
    RowBox[{"{", 
     RowBox[{"n", ",", "0", ",", "10", ",", "0.2"}], "}"}]}], 
   "]"}]}], "\[IndentingNewLine]", 
 RowBox[{"ListPlot", "[", "xydata", "]"}]}], "Input",
 CellChangeTimes->{
  3.4295168507695527`*^9, {3.429517259837289*^9, 3.429517283978223*^9}, {
   3.4295178767514353`*^9, 3.429517915251928*^9}, {3.4295180429566875`*^9, 
   3.42951817127083*^9}, {3.429518314741416*^9, 3.4295183550700574`*^9}, 
   3.4295184326491756`*^9, {3.429518536431754*^9, 3.42951870841833*^9}, {
   3.4295198819646015`*^9, 3.429519886230281*^9}, {3.429520258641298*^9, 
   3.4295202679382915`*^9}, {3.429521403999708*^9, 3.429521410843546*^9}, 
   3.436066152277482*^9, 3.436271160354328*^9}],

Cell[TextData[{
 "\n(b) In the cell below, ",
 StyleBox[ButtonBox["Export",
  BaseStyle->"Link",
  ButtonData->"paclet://ref/Export"],
  FontWeight->"Bold"],
 " the ",
 StyleBox["xydata",
  FontSlant->"Italic"],
 " array to a file in your working directory named \"xydata.txt\" using the \
\"",
 StyleBox["Table",
  FontFamily->"Courier New"],
 "\" format specifier.  Note that if we were to use a filename with a \
\".dat\" extension, \"",
 StyleBox["Table",
  FontFamily->"Courier New"],
 "\" would be the default format and would not need to be specified.  In this \
example, because we are using a \".txt\" file extension, we need to specify \
the output format explicitly.  The \"",
 StyleBox["Table",
  FontFamily->"Courier New"],
 "\" format uses tabs to delimit (i.e. separate) the columns in the output \
file, though options are available for using other delimiters (e.g. commas or \
spaces).\n\nIn a separate cell, ",
 StyleBox[ButtonBox["Import",
  BaseStyle->"Link",
  ButtonData->"paclet://ref/Import"],
  FontWeight->"Bold"],
 " the data from \"xydata.txt\" using a \"",
 StyleBox["Table",
  FontFamily->"Courier New"],
 "\" format specifier to tell ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " what kind of data to prepare for.  The imported list should look identical \
to the original ",
 StyleBox["xydata",
  FontSlant->"Italic"],
 ".\n\nAlso open the \"xydata.txt\" file using external software -- try both \
a text editor (e.g. Notepad, Wordpad, or TextEdit) and a spreadsheed (e.g. \
Microsoft Excel).  Why do so many digits appear after the decimal point?  "
}], "Text",
 CellChangeTimes->{{3.429518845560711*^9, 3.4295188476076117`*^9}, {
  3.4295191462520595`*^9, 3.4295191935964155`*^9}, {3.429519591773387*^9, 
  3.429519614101798*^9}, {3.4295196619305353`*^9, 3.4295202388597946`*^9}, {
  3.429520319298324*^9, 3.429520378189703*^9}, {3.4360465839027205`*^9, 
  3.4360466098088045`*^9}, {3.436270927803318*^9, 3.436271036694459*^9}, {
  3.436271076776416*^9, 3.436271121807682*^9}, {3.436271175557378*^9, 
  3.436271931135049*^9}, {3.436276047928492*^9, 3.4362761269297323`*^9}, {
  3.4397514834202456`*^9, 3.4397514926390543`*^9}}],

Cell[BoxData[""], "Input",
 CellChangeTimes->{
  3.4295168507695527`*^9, {3.429517259837289*^9, 3.429517283978223*^9}, {
   3.4295178767514353`*^9, 3.429517915251928*^9}, {3.4295180429566875`*^9, 
   3.42951817127083*^9}, {3.429518314741416*^9, 3.429518383961052*^9}, {
   3.4295187305592384`*^9, 3.4295187687159767`*^9}, {3.436271939752049*^9, 
   3.43627196168736*^9}, 3.436276422978163*^9}],

Cell[BoxData[""], "Input",
 CellChangeTimes->{
  3.4295168507695527`*^9, {3.429517259837289*^9, 3.429517283978223*^9}, {
   3.4295178767514353`*^9, 3.429517915251928*^9}, {3.4295180429566875`*^9, 
   3.42951817127083*^9}, {3.429518314741416*^9, 3.429518383961052*^9}, {
   3.4295187305592384`*^9, 3.4295187687159767`*^9}, {3.436271939752049*^9, 
   3.436271943390959*^9}, {3.436272154920792*^9, 3.436272155691319*^9}, 
   3.4362764246664124`*^9, 3.44637388693365*^9}],

Cell[TextData[{
 "\n(c) If you want your data file to be nicely formatted, you will be \
dissapointed to find that ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " doesn't make this easy.  But it can be done.  Evaluate this example, which \
involves converting numerical data into nicely formatted strings prior to \
export.  Open the resulting file in an external text editor to verify the \
results."
}], "Text",
 CellChangeTimes->{{3.429518845560711*^9, 3.4295188476076117`*^9}, {
  3.4295190164222727`*^9, 3.4295191226111317`*^9}, {3.429520294298004*^9, 
  3.4295202949542627`*^9}, {3.4295204056431794`*^9, 3.4295204145495434`*^9}, {
  3.436046612840035*^9, 3.4360466136994047`*^9}, {3.436271986042637*^9, 
  3.436271994784593*^9}, {3.436272037042986*^9, 3.4362721174114923`*^9}, {
  3.436272186702066*^9, 3.4362722112699823`*^9}, {3.436276436939996*^9, 
  3.436276443827016*^9}}],

Cell[BoxData[{
 RowBox[{"niceoutput", " ", "=", " ", 
  RowBox[{"Map", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"ToString", "[", 
      RowBox[{"NumberForm", "[", 
       RowBox[{"#", ",", 
        RowBox[{"{", 
         RowBox[{"10", ",", "6"}], "}"}], ",", 
        RowBox[{"NumberPadding", "\[Rule]", 
         RowBox[{"{", 
          RowBox[{"\"\< \>\"", ",", "\"\<0\>\""}], "}"}]}]}], "]"}], "]"}], 
     "&"}], ",", "xydata", ",", 
    RowBox[{"{", "2", "}"}]}], "]"}]}], "\[IndentingNewLine]", 
 RowBox[{"Export", "[", 
  RowBox[{"\"\<xydata.txt\>\"", ",", "niceoutput", ",", "\"\<Table\>\""}], 
  "]"}]}], "Input",
 CellChangeTimes->{
  3.4295168507695527`*^9, {3.429517259837289*^9, 3.429517283978223*^9}, {
   3.4295178767514353`*^9, 3.429517915251928*^9}, {3.4295180429566875`*^9, 
   3.42951817127083*^9}, {3.429518314741416*^9, 3.4295183550700574`*^9}, 
   3.4295184326491756`*^9, {3.429518536431754*^9, 3.4295186858086658`*^9}, {
   3.4295211731061277`*^9, 3.429521175153029*^9}, {3.4360661604649296`*^9, 
   3.4360661724179783`*^9}, {3.436272008314473*^9, 3.436272021922389*^9}, {
   3.436272161335456*^9, 3.436272162406591*^9}}],

Cell["\<\

(d) There are times when you need more control over the input/output process, \
particularly when dealing with non-standard formats that involve a \
combination of data types.  We include one example here of a low-level \
routine for reading selected portions of a standard data file.\
\>", "Text",
 CellChangeTimes->{{3.429386786820779*^9, 3.429386933291404*^9}, {
   3.429506878063779*^9, 3.4295068805169353`*^9}, {3.429517147367099*^9, 
   3.429517148445238*^9}, {3.42952043734671*^9, 3.429520445284312*^9}, 
   3.4295205248634553`*^9, {3.4295205594888983`*^9, 3.4295206255209937`*^9}, {
   3.4295207426943684`*^9, 3.429520820507865*^9}, {3.42952113266811*^9, 
   3.4295211378713017`*^9}, {3.4295220677894545`*^9, 3.429522071898882*^9}, {
   3.4360466271680684`*^9, 3.4360466283868103`*^9}, 3.4360466968238726`*^9, 
   3.436055888405671*^9}],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"instream", " ", "=", " ", 
    RowBox[{"OpenRead", "[", "\"\<xydata.txt\>\"", "]"}]}], ";"}], "  ", 
  RowBox[{"(*", " ", 
   RowBox[{
   "open", " ", "the", " ", "file", " ", "as", " ", "an", " ", "input", " ", 
    "stream"}], " ", "*)"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"ReadList", "[", 
   RowBox[{"instream", ",", 
    RowBox[{"{", 
     RowBox[{"Number", ",", "Number"}], "}"}], ",", "5"}], "]"}], "  ", 
  RowBox[{"(*", " ", 
   RowBox[{"read", " ", "5", " ", "xy", " ", "data", " ", "pairs"}], " ", 
   "*)"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"Skip", "[", 
   RowBox[{"instream", ",", " ", "String", ",", " ", "15"}], "]"}], "  ", 
  RowBox[{"(*", " ", 
   RowBox[{"skip", " ", "15", " ", "rows"}], " ", 
   "*)"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"ReadList", "[", 
   RowBox[{"instream", ",", 
    RowBox[{"{", 
     RowBox[{"Number", ",", "Number"}], "}"}], ",", "5"}], "]"}], "  ", 
  RowBox[{"(*", " ", 
   RowBox[{"read", " ", "5", " ", "xy", " ", "data", " ", "pairs"}], " ", 
   "*)"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"Close", "[", "instream", "]"}], ";"}], " ", 
  RowBox[{"(*", " ", 
   RowBox[{"close", " ", "the", " ", "file"}], " ", "*)"}]}]}], "Input",
 CellChangeTimes->{
  3.4295207351942725`*^9, {3.4295208349768*^9, 3.429520901555777*^9}, {
   3.4295210556671247`*^9, 3.4295211286836843`*^9}, {3.42952123384128*^9, 
   3.4295212852638135`*^9}, {3.429521349780264*^9, 3.4295213504365225`*^9}, {
   3.4295214372970095`*^9, 3.429521635846426*^9}, {3.4295217253475714`*^9, 
   3.429521732300785*^9}, {3.429521965241267*^9, 3.429521966335031*^9}, {
   3.4295220420703754`*^9, 3.4295220427735095`*^9}, {3.429522489076097*^9, 
   3.429522573608429*^9}, {3.436046668855302*^9, 3.4360466756990075`*^9}, {
   3.436272140465938*^9, 3.4362721690115843`*^9}}],

Cell[TextData[{
 " \n(e) In the cell below, generate some three-column numerical data (i.e. a \
list of three-element lists) and export it to a data file in \"",
 StyleBox["Table",
  FontFamily->"Courier New"],
 "\" format.  Show the result to your TA."
}], "Text",
 CellChangeTimes->{{3.4295225981243677`*^9, 3.429522672359693*^9}, {
   3.4360466324180346`*^9, 3.436046634371147*^9}, 3.4360467005582237`*^9, 
   3.4360558926868935`*^9, {3.436055926733551*^9, 3.4360559438115664`*^9}, 
   3.4397515079204025`*^9}],

Cell[BoxData[""], "Input",
 CellChangeTimes->{{3.446374076664077*^9, 3.4463740773781557`*^9}}]
}, Closed]],

Cell[CellGroupData[{

Cell["(#6) X-ray scattering data (20 min)", "Subsection",
 CellChangeTimes->{{3.4360613892923403`*^9, 3.4360613898079615`*^9}, {
  3.436065769842429*^9, 3.43606579165479*^9}, {3.4360659482319126`*^9, 
  3.4360659499819016`*^9}, {3.436100725379155*^9, 3.436100733562499*^9}, {
  3.436100763843416*^9, 3.436100766429474*^9}, {3.436101722773508*^9, 
  3.436101726092948*^9}, {3.436110907640148*^9, 3.436110907773979*^9}, {
  3.436119862881199*^9, 3.436119880529291*^9}, {3.436278034033536*^9, 
  3.436278035641165*^9}}],

Cell[TextData[{
 "We learned in a previous lab exercise that the wavevector (",
 StyleBox["k",
  FontSlant->"Italic"],
 ") of a light wave propagating through a real material typically has both \
real and imaginary components, causing the wave to behave like an \
exponentially-decaying sinusoid of the form ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    SuperscriptBox["\[ExponentialE]", 
     RowBox[{
      RowBox[{"-", 
       SubscriptBox["k", "i"]}], "x"}]], 
    RowBox[{"cos", "(", 
     RowBox[{
      SubscriptBox["k", "r"], "x"}], ")"}]}], TraditionalForm]]],
 ".  The imaginary component of the wavevector ",
 Cell[BoxData[
  FormBox[
   RowBox[{"(", 
    SubscriptBox["k", "i"]}], TraditionalForm]]],
 ") is responsible for the decay term, which causes most of the light to be \
absorbed after penetrating a short distance into the material.  This \
penetration depth (also called absorption length) is computed as ",
 Cell[BoxData[
  FormBox[
   RowBox[{"s", "=", 
    RowBox[{"1", "/", 
     SubscriptBox["k", "i"]}]}], TraditionalForm]]],
 ".\n\n(a) In addition to importing local data files, it is possible to \
import ascii data files available on the internet.  Evaluate the cell below \
to download some numerical data from Lawrence-Berkeley National Laboratory.  \
This data measures the x-ray scattering factor (",
 StyleBox["f",
  FontSlant->"Italic"],
 ") of solid copper metal as a function of x-ray energy (",
 StyleBox["E",
  FontSlant->"Italic"],
 ", first column).  Because ",
 StyleBox["f",
  FontSlant->"Italic"],
 " is proportional to the complex wavevector, it also has both real (",
 Cell[BoxData[
  FormBox[
   SubscriptBox["f", "r"], TraditionalForm]]],
 ", 2nd column) and imaginary (",
 Cell[BoxData[
  FormBox[
   SubscriptBox["f", "i"], TraditionalForm]]],
 ", 3rd column) parts.  Observe that the column titles have been included \
with the data.  Also notice that because ",
 Cell[BoxData[
  FormBox[
   SubscriptBox["f", "r"], TraditionalForm]]],
 " could not be reliably measured below 29 eV, it was recorded as -9999.  \
Delete the lengthy output before proceeding to the next part so that it won't \
be in the way."
}], "Text",
 CellChangeTimes->{{3.436100794888365*^9, 3.436100970123638*^9}, {
  3.43610140011977*^9, 3.436101421069371*^9}, {3.4361014838467617`*^9, 
  3.436101700485574*^9}, {3.43610175350233*^9, 3.436101938027512*^9}, {
  3.436102006085339*^9, 3.4361023742401648`*^9}, {3.436102438822628*^9, 
  3.4361025060138073`*^9}, {3.436102536311005*^9, 3.436103233033555*^9}, {
  3.4361033745273314`*^9, 3.4361033839522457`*^9}, {3.43610384157346*^9, 
  3.436103842247718*^9}, {3.436105120514102*^9, 3.436105218236936*^9}, {
  3.43610583194445*^9, 3.4361058328720284`*^9}, {3.436105891090344*^9, 
  3.436106051997682*^9}, {3.436106833054603*^9, 3.436107025731813*^9}, {
  3.436107055958563*^9, 3.4361070573643827`*^9}, {3.4361070925263653`*^9, 
  3.436107093701599*^9}, {3.436272300570593*^9, 3.436272301088772*^9}, {
  3.436272377685687*^9, 3.436272439140332*^9}}],

Cell[BoxData[
 RowBox[{"scatteringdata", " ", "=", 
  RowBox[{"Import", "[", 
   RowBox[{
   "\"\<http://henke.lbl.gov/optical_constants/sf/cu.nff\>\"", ",", 
    "\"\<Table\>\""}], "]"}]}]], "Input",
 CellChangeTimes->{
  3.4360632076869526`*^9, {3.436065540718896*^9, 3.436065550125086*^9}, {
   3.4360658353420105`*^9, 3.4360658644199495`*^9}, 3.43606610023094*^9, 
   3.436104014314375*^9, {3.436272527403521*^9, 3.436272529361025*^9}}],

Cell[TextData[{
 "\n(b) In the cell below, ",
 StyleBox["Drop",
  FontWeight->"Bold"],
 " the column titles from your list of data and ",
 StyleBox["Select",
  FontWeight->"Bold"],
 " the data points for which ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    SubscriptBox["f", "r"], ">", "0"}], TraditionalForm]]],
 " (use #[[2]] to refer to the second column).  Then ",
 StyleBox["Transpose",
  FontWeight->"Bold"],
 " the data and name the result ",
 StyleBox["{energy, freal, fimag}",
  FontWeight->"Bold"],
 ", effectively splitting the data into three component lists.  When you are \
sure that you have succeded, suppress the output with a semicolon."
}], "Text",
 CellChangeTimes->{{3.436103361857665*^9, 3.4361033671179867`*^9}, {
  3.436103866996031*^9, 3.436104009800956*^9}, {3.436104070494513*^9, 
  3.43610446783125*^9}, {3.436104605972414*^9, 3.436104619051093*^9}, {
  3.436107061496594*^9, 3.436107259914308*^9}, {3.436107311958398*^9, 
  3.436107313798483*^9}, {3.436272371438252*^9, 3.436272372635442*^9}, {
  3.4362724789725122`*^9, 3.436272500982884*^9}, {3.436272550691407*^9, 
  3.436272572896269*^9}}],

Cell[BoxData[""], "Input",
 CellChangeTimes->{
  3.4360632076869526`*^9, {3.436065540718896*^9, 3.436065550125086*^9}, {
   3.4360658353420105`*^9, 3.4360658644199495`*^9}, 3.43606610023094*^9, {
   3.436100695210793*^9, 3.436100696988758*^9}, {3.436106437492118*^9, 
   3.436106444131762*^9}, {3.436107266358768*^9, 3.43610727965982*^9}, {
   3.4362725326010847`*^9, 3.436272534336772*^9}, 3.4362764789263563`*^9}],

Cell[TextData[{
 "\n(c) The wavevector (",
 StyleBox["k",
  FontSlant->"Italic"],
 ") is related to the complex scattering factor (",
 StyleBox["f",
  FontSlant->"Italic"],
 ") according to the equation ",
 Cell[BoxData[
  FormBox[
   RowBox[{"k", "=", 
    RowBox[{"2", "\[Rho]", " ", 
     SubscriptBox["r", "0"], " ", "\[Lambda]", " ", "f"}]}], 
   TraditionalForm]]],
 ", where \[Rho] is the atomic density of the material, ",
 Cell[BoxData[
  FormBox[
   SubscriptBox["r", "0"], TraditionalForm]]],
 " is the classical electron radius, and \[Lambda] is the vacuum wavelength \
of the light.  In the cell below, use this formula on your list of scattering \
factors to obtain a list of wavevectors.  Because you have the real and \
imaginary parts of the scattering factor stored separately, it will be \
convenient to compute the real and imaginary parts of ",
 StyleBox["k",
  FontSlant->"Italic"],
 " separately.  Thus, you are going to create two separate lists (name them ",
 StyleBox["kreal",
  FontSlant->"Italic"],
 " and ",
 StyleBox["kimag",
  FontSlant->"Italic"],
 ") rather than one.\n\nHints: We have already provided the physical \
constants required, though you will need to compute the wavelength yourself.  \
From basic quantum physics, we know that wavelength (\[Lambda]) depends on \
energy (",
 StyleBox["E",
  FontSlant->"Italic"],
 ") according to ",
 Cell[BoxData[
  FormBox[
   RowBox[{"\[Lambda]", "=", 
    RowBox[{"h", " ", 
     RowBox[{"c", "/", "E"}]}]}], TraditionalForm]]],
 ", where ",
 StyleBox["h",
  FontSlant->"Italic"],
 " is Planck's constant and ",
 StyleBox["c",
  FontSlant->"Italic"],
 " is the vacuum speed of light.  This means that we need a list of \
wavelengths, one for each energy.  Because mathematical functions tend to be ",
 Cell[BoxData[
  FormBox[
   ButtonBox["Listable",
    BaseStyle->"Link",
    ButtonData->"paclet://ref/Listable"], TraditionalForm]],
  FontWeight->"Bold"],
 ", you should be able to multipy and divide these lists (e.g. ",
 StyleBox["energy",
  FontSlant->"Italic"],
 ", ",
 StyleBox["wavelength",
  FontSlant->"Italic"],
 ", ",
 StyleBox["freal",
  FontSlant->"Italic"],
 ", ",
 StyleBox["kimag",
  FontSlant->"Italic"],
 ", etc.) just like ordinary variables."
}], "Text",
 CellChangeTimes->{{3.436103390981687*^9, 3.4361034033998013`*^9}, {
   3.436103455542363*^9, 3.436103460214448*^9}, {3.436104478544156*^9, 
   3.436104582185392*^9}, {3.4361046321396427`*^9, 3.436105098441798*^9}, {
   3.436105226657086*^9, 3.436105286375654*^9}, {3.436105346411553*^9, 
   3.436105820608047*^9}, {3.436105881025406*^9, 3.436105885112372*^9}, {
   3.4361060792242727`*^9, 3.436106346867156*^9}, {3.436106383345873*^9, 
   3.436106414225663*^9}, {3.436106477435273*^9, 3.4361066001272*^9}, {
   3.436106673919444*^9, 3.436106739060693*^9}, {3.4361068043708563`*^9, 
   3.436106804698526*^9}, {3.436107377315737*^9, 3.436107380318125*^9}, {
   3.436107632810175*^9, 3.436107637675054*^9}, 3.436110306551021*^9, {
   3.436136959160798*^9, 3.436136959764658*^9}, {3.436272736056314*^9, 
   3.436272793415003*^9}, {3.436272836928411*^9, 3.4362728379922523`*^9}, {
   3.50005174274344*^9, 3.50005175474364*^9}}],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"rho", " ", "=", " ", 
    RowBox[{"4", "/", 
     RowBox[{"3.61", "^", "3"}]}]}], ";"}], " ", 
  RowBox[{"(*", " ", 
   RowBox[{
   "density", " ", "of", " ", "copper", " ", "in", " ", "atoms", " ", "per", 
    " ", "cubic", " ", "Angstrom"}], " ", "*)"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"hc", " ", "=", " ", "12398.5"}], ";"}], " ", 
  RowBox[{"(*", " ", 
   RowBox[{
    RowBox[{"Planck", "'"}], "s", " ", 
    RowBox[{"constant", " ", "\[Cross]", " ", "speed"}], " ", "of", " ", 
    "light", " ", "in", " ", 
    RowBox[{"eV", "\[Cross]", "Angstroms"}]}], " ", 
   "*)"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"radius", " ", "=", " ", "2.82*^-5"}], ";"}], " ", 
  RowBox[{"(*", " ", 
   RowBox[{
   "classical", " ", "electron", " ", "radius", " ", "in", " ", "Angstroms"}],
    " ", "*)"}], " ", 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]"}], "Input",
 CellChangeTimes->{{3.4360634100450325`*^9, 3.4360634377792296`*^9}, {
   3.436063830261093*^9, 3.436064013619294*^9}, {3.436064115696766*^9, 
   3.436064224946067*^9}, {3.436064312523631*^9, 3.4360643659295397`*^9}, {
   3.4360644063355308`*^9, 3.436064421132311*^9}, {3.436064568865741*^9, 
   3.4360645777563086`*^9}, {3.4360647480677185`*^9, 
   3.4360647778331532`*^9}, {3.4360648372702727`*^9, 
   3.4360648742387867`*^9}, {3.436065325548398*^9, 3.4360653278765078`*^9}, {
   3.4360655772499123`*^9, 3.4360656393745146`*^9}, {3.4360657126396704`*^9, 
   3.43606571748339*^9}, {3.4360659068884273`*^9, 3.43606590727905*^9}, {
   3.436099736954541*^9, 3.4361000549450808`*^9}, {3.4361001098696413`*^9, 
   3.4361001939903793`*^9}, {3.4361002584582167`*^9, 3.436100268577125*^9}, {
   3.436100336787829*^9, 3.436100339241836*^9}, {3.436100512943959*^9, 
   3.436100519957556*^9}, {3.436100570489209*^9, 3.4361006388088293`*^9}, 
   3.4361006930665197`*^9, {3.436101005656879*^9, 3.436101033470252*^9}, {
   3.436101063767029*^9, 3.436101107339862*^9}, {3.4361011684531097`*^9, 
   3.436101353553631*^9}, {3.4361032764185677`*^9, 3.4361032849617863`*^9}, {
   3.436106430074651*^9, 3.436106463461337*^9}, {3.4361067931512747`*^9, 
   3.436106797308936*^9}, {3.43627648269514*^9, 3.436276494357313*^9}, 
   3.43741326730802*^9}],

Cell[TextData[{
 "\n(d) Use your list of ",
 Cell[BoxData[
  FormBox[
   SubscriptBox["k", "i"], TraditionalForm]]],
 " values to compute a list of penetration depths (",
 Cell[BoxData[
  FormBox[
   RowBox[{"s", " ", "=", " ", 
    RowBox[{"1", "/", 
     SubscriptBox["k", "i"]}]}], TraditionalForm]]],
 "), and multiply by a practical factor of ",
 Cell[BoxData[
  FormBox[
   SuperscriptBox["10", 
    RowBox[{"-", "4"}]], TraditionalForm]]],
 " so that result will be expressed in microns rather than Angstroms.  Then ",
 StyleBox["Transpose",
  FontWeight->"Bold"],
 " the resulting list with the energy list, so that you get a list of {",
 StyleBox["E",
  FontSlant->"Italic"],
 ", ",
 StyleBox["s",
  FontSlant->"Italic"],
 "} data points, and name the output ",
 StyleBox["penetration",
  FontSlant->"Italic"],
 "."
}], "Text",
 CellChangeTimes->{{3.436107395603445*^9, 3.43610775346577*^9}, {
   3.436108218902701*^9, 3.436108667084003*^9}, {3.436272933451684*^9, 
   3.436272940798053*^9}, {3.436273030015512*^9, 3.436273046847001*^9}, 
   3.4372257340231323`*^9, 3.4374131285745325`*^9}],

Cell[BoxData[""], "Input",
 CellChangeTimes->{{3.4360634100450325`*^9, 3.4360634377792296`*^9}, {
   3.436063830261093*^9, 3.436064013619294*^9}, {3.436064115696766*^9, 
   3.436064224946067*^9}, {3.436064312523631*^9, 3.4360643659295397`*^9}, {
   3.4360644063355308`*^9, 3.436064421132311*^9}, {3.436064568865741*^9, 
   3.4360645777563086`*^9}, {3.4360647480677185`*^9, 
   3.4360647778331532`*^9}, {3.4360648372702727`*^9, 
   3.4360648742387867`*^9}, {3.436065325548398*^9, 3.4360653278765078`*^9}, {
   3.4360655772499123`*^9, 3.4360656393745146`*^9}, {3.4360657126396704`*^9, 
   3.43606571748339*^9}, {3.4360659068884273`*^9, 3.43606590727905*^9}, {
   3.436099736954541*^9, 3.4361000549450808`*^9}, {3.4361001098696413`*^9, 
   3.4361001939903793`*^9}, {3.4361002584582167`*^9, 3.436100268577125*^9}, {
   3.436100336787829*^9, 3.436100339241836*^9}, {3.436100512943959*^9, 
   3.436100519957556*^9}, {3.436100570489209*^9, 3.4361006388088293`*^9}, 
   3.4361006930665197`*^9, {3.436101005656879*^9, 3.436101033470252*^9}, {
   3.436101063767029*^9, 3.436101107339862*^9}, {3.4361011684531097`*^9, 
   3.436101353553631*^9}, {3.4361032764185677`*^9, 3.4361032849617863`*^9}, 
   3.436106430074651*^9, {3.436107289471019*^9, 3.4361072971501417`*^9}, 
   3.436107812092042*^9, {3.4361086806223087`*^9, 3.436108733863289*^9}, 
   3.4362729025387173`*^9, 3.436276489044117*^9}],

Cell[TextData[{
 "\n(e) Use your list of ",
 Cell[BoxData[
  FormBox[
   SubscriptBox["k", "r"], TraditionalForm]]],
 " values to compute a list of index-of-refraction values (",
 Cell[BoxData[
  FormBox[
   RowBox[{"n", "=", 
    RowBox[{"1", "-", 
     FractionBox[
      RowBox[{"\[Lambda]", " ", 
       SubscriptBox["k", "r"]}], 
      RowBox[{"4", "\[Pi]"}]]}]}], TraditionalForm]]],
 ").  Then ",
 StyleBox["Transpose",
  FontWeight->"Bold"],
 " the resulting list with the energy list, so that you get a list of {",
 StyleBox["E",
  FontSlant->"Italic"],
 ", ",
 StyleBox["n",
  FontSlant->"Italic"],
 "} data points, and name the output ",
 StyleBox["refraction",
  FontSlant->"Italic"],
 "."
}], "Text",
 CellChangeTimes->{{3.436107395603445*^9, 3.43610775346577*^9}, {
  3.436108218902701*^9, 3.436108667084003*^9}, {3.436272927695796*^9, 
  3.4362729798287992`*^9}, {3.4362730101590347`*^9, 3.436273020086173*^9}, {
  3.4362730695307007`*^9, 3.4362730776881933`*^9}}],

Cell[BoxData[""], "Input",
 CellChangeTimes->{{3.4360634100450325`*^9, 3.4360634377792296`*^9}, {
   3.436063830261093*^9, 3.436064013619294*^9}, {3.436064115696766*^9, 
   3.436064224946067*^9}, {3.436064312523631*^9, 3.4360643659295397`*^9}, {
   3.4360644063355308`*^9, 3.436064421132311*^9}, {3.436064568865741*^9, 
   3.4360645777563086`*^9}, {3.4360647480677185`*^9, 
   3.4360647778331532`*^9}, {3.4360648372702727`*^9, 
   3.4360648742387867`*^9}, {3.436065325548398*^9, 3.4360653278765078`*^9}, {
   3.4360655772499123`*^9, 3.4360656393745146`*^9}, {3.4360657126396704`*^9, 
   3.43606571748339*^9}, {3.4360659068884273`*^9, 3.43606590727905*^9}, {
   3.436099736954541*^9, 3.4361000549450808`*^9}, {3.4361001098696413`*^9, 
   3.4361001939903793`*^9}, {3.4361002584582167`*^9, 3.436100268577125*^9}, {
   3.436100336787829*^9, 3.436100339241836*^9}, {3.436100512943959*^9, 
   3.436100519957556*^9}, {3.436100570489209*^9, 3.4361006388088293`*^9}, 
   3.4361006930665197`*^9, {3.436101005656879*^9, 3.436101033470252*^9}, {
   3.436101063767029*^9, 3.436101107339862*^9}, {3.4361011684531097`*^9, 
   3.436101353553631*^9}, {3.4361032764185677`*^9, 3.4361032849617863`*^9}, 
   3.436106430074651*^9, {3.436107289471019*^9, 3.4361072971501417`*^9}, 
   3.436107812092042*^9, {3.4361086806223087`*^9, 3.436108733863289*^9}, 
   3.4362729025387173`*^9, {3.436276492163046*^9, 3.4362764923401527`*^9}}],

Cell[TextData[{
 "\n(f) Evaluate the cell below to plot the x-ray penetration depth and the \
index of refraction of copper metal as a function of energy.  We use ",
 StyleBox["ListLogLogPlot",
  FontWeight->"Bold"],
 " for the penetration depth and ",
 StyleBox["ListLogLinearPlot",
  FontWeight->"Bold"],
 " for the index of refraction.  In the penetration-depth plot, you should \
notice two sharp \"cliffs\" correpsonding to the K (near 9 keV) and L (near 1 \
keV) aborption edges.  Each absorption edge indicates an x-ray energy large \
enough to knock electrons out a specific atomic core shell (the K shell is \
the deepest shell).  This greater propensity to interact with an electron \
above the edge increases the absorption and decreases the penetration depth.  \
You may be concerned that your ",
 StyleBox["n",
  FontSlant->"Italic"],
 " values violate the special theory of relativity -- the Wikipedia article \
on ",
 StyleBox[ButtonBox["Refractive Index",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["http://en.wikipedia.org/wiki/Refractive_index"], None}],
  FontWeight->"Bold"],
 " addresses this issue and uses x-ray scattering as an example."
}], "Text",
 CellChangeTimes->{{3.436107821720047*^9, 3.436108159956746*^9}, {
   3.4361087513448544`*^9, 3.436108930980468*^9}, {3.436110192956594*^9, 
   3.436110291484139*^9}, {3.436110357815027*^9, 3.436110880149787*^9}, 
   3.4362730962683353`*^9, {3.436273151748152*^9, 3.436273266854877*^9}, {
   3.4362765280736856`*^9, 3.4362765554865093`*^9}}],

Cell[BoxData[{
 RowBox[{"ListLogLogPlot", "[", " ", 
  RowBox[{"penetration", ",", 
   RowBox[{"Joined", "\[Rule]", "True"}], ",", 
   RowBox[{"PlotRange", "\[Rule]", "All"}], ",", 
   RowBox[{"Frame", "\[Rule]", "True"}], ",", 
   RowBox[{"FrameLabel", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{
     "\"\<Energy (eV)\>\"", ",", "\"\<Penetration Depth (\[Mu]m)\>\""}], 
     "}"}]}]}], "]"}], "\[IndentingNewLine]", 
 RowBox[{"ListLogLinearPlot", "[", 
  RowBox[{"refraction", ",", 
   RowBox[{"Joined", "\[Rule]", "True"}], ",", 
   RowBox[{"PlotRange", "\[Rule]", "All"}], ",", 
   RowBox[{"Frame", "\[Rule]", "True"}], ",", 
   RowBox[{"FrameLabel", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"\"\<Energy (eV)\>\"", ",", "\"\<Index of Refraction\>\""}], 
     "}"}]}]}], "]"}]}], "Input",
 CellChangeTimes->{{3.4360634100450325`*^9, 3.4360634377792296`*^9}, {
   3.436063830261093*^9, 3.436064013619294*^9}, {3.436064115696766*^9, 
   3.436064224946067*^9}, {3.436064312523631*^9, 3.4360643659295397`*^9}, {
   3.4360644063355308`*^9, 3.436064421132311*^9}, {3.436064568865741*^9, 
   3.4360645777563086`*^9}, {3.4360647480677185`*^9, 
   3.4360647778331532`*^9}, {3.4360648372702727`*^9, 
   3.4360648742387867`*^9}, {3.436065325548398*^9, 3.4360653278765078`*^9}, {
   3.4360655772499123`*^9, 3.4360656393745146`*^9}, {3.4360657126396704`*^9, 
   3.43606571748339*^9}, {3.4360659068884273`*^9, 3.43606590727905*^9}, {
   3.436099736954541*^9, 3.4361000549450808`*^9}, {3.4361001098696413`*^9, 
   3.4361001939903793`*^9}, {3.4361002584582167`*^9, 3.436100268577125*^9}, {
   3.436100336787829*^9, 3.436100339241836*^9}, {3.436100512943959*^9, 
   3.436100519957556*^9}, {3.436100570489209*^9, 3.4361006388088293`*^9}, 
   3.4361006930665197`*^9, {3.436101005656879*^9, 3.436101033470252*^9}, {
   3.436101063767029*^9, 3.436101107339862*^9}, {3.4361011684531097`*^9, 
   3.436101353553631*^9}, {3.4361032764185677`*^9, 3.4361032849617863`*^9}, 
   3.436106430074651*^9, {3.436107289471019*^9, 3.4361072971501417`*^9}, 
   3.436107812092042*^9, {3.4361080593244057`*^9, 3.436108060716114*^9}, {
   3.436108724097045*^9, 3.4361087305720453`*^9}}]
}, Closed]],

Cell[CellGroupData[{

Cell["\<\
(#7) Import/Export/Processing of ascii-character data (20 min)\
\>", "Subsection",
 CellChangeTimes->{{3.4360468232449384`*^9, 3.436046850026017*^9}, 
   3.4360614112453246`*^9, {3.436119560746592*^9, 3.436119560871606*^9}, {
   3.436119796177246*^9, 3.4361198131856623`*^9}, {3.436119881433627*^9, 
   3.4361198816013947`*^9}, {3.4362780375775433`*^9, 3.436278039137426*^9}}],

Cell[TextData[{
 "(a) Download the \"funwithstring.txt\" file from the course website into \
your working directory, and ",
 StyleBox["Import",
  FontWeight->"Bold"],
 " it into a list called ",
 StyleBox["firsttry",
  FontSlant->"Italic"],
 ", assuming a \"Table\" format.  Examine ",
 StyleBox["firsttry",
  FontSlant->"Italic"],
 " carefully using both ",
 StyleBox["TableForm",
  FontWeight->"Bold"],
 " and ",
 StyleBox["InputForm",
  FontWeight->"Bold"],
 ".  Also measure the length of each of its rows (i.e. ",
 StyleBox["Length/@firsttry",
  FontWeight->"Bold"],
 ").  You should see that this list has some problems -- explain them to your \
TA."
}], "Text",
 CellChangeTimes->{{3.436110960893145*^9, 3.436111027825663*^9}, {
  3.4361110778357487`*^9, 3.436111373739719*^9}, {3.436111458696472*^9, 
  3.436111525288335*^9}, {3.436112435151073*^9, 3.4361124387243853`*^9}, {
  3.436273306385026*^9, 3.4362733074139843`*^9}, {3.43627659649172*^9, 
  3.4362766302244053`*^9}, {3.4366416008836126`*^9, 3.4366416088991866`*^9}, {
  3.436642054302586*^9, 3.436642071552476*^9}}],

Cell[BoxData[""], "Input",
 CellChangeTimes->{{3.436051805134929*^9, 3.436051812041135*^9}, {
   3.4360518521190033`*^9, 3.4360518954468513`*^9}, {3.436051967290141*^9, 
   3.4360519746025944`*^9}, {3.436052720269697*^9, 3.4360527252227907`*^9}, {
   3.4360559634676905`*^9, 3.4360559666707954`*^9}, {3.436055998873714*^9, 
   3.436056022545438*^9}, {3.436057788877883*^9, 3.4360577912841177`*^9}, {
   3.4360619495700045`*^9, 3.4360619497418785`*^9}, 3.436111033611562*^9, {
   3.436111387445704*^9, 3.436111427630979*^9}, {3.436273461926016*^9, 
   3.436273465084346*^9}, 3.436276805327738*^9}],

Cell[TextData[{
 "\n(b) Take a few minutes to browse through the tutorial on ",
 StyleBox[ButtonBox["Reading Textual Data",
  BaseStyle->"Link",
  ButtonData->"paclet://tutorial/ReadingTextualData"],
  FontWeight->"Bold"],
 ", which demonstrates the capabilities of the ",
 StyleBox[ButtonBox["ReadList",
  BaseStyle->"Link",
  ButtonData->"paclet://ref/ReadList"],
  FontWeight->"Bold"],
 " function.  Then use ",
 StyleBox["ReadList",
  FontWeight->"Bold"],
 " to import \"funwithstring.txt\" into a list called ",
 StyleBox["secondtry",
  FontSlant->"Italic"],
 ".  Specify the ",
 StyleBox["String",
  FontWeight->"Bold"],
 " object type, so that each row of data gets imported as one long string -- \
this should produce a list of 10 strings."
}], "Text",
 CellChangeTimes->{{3.436111555161195*^9, 3.436111560809223*^9}, {
   3.436112460875942*^9, 3.4361125131462517`*^9}, {3.4361125854093647`*^9, 
   3.43611277419697*^9}, {3.436112808744635*^9, 3.4361128334467783`*^9}, {
   3.436112896635347*^9, 3.436113013028232*^9}, {3.43611305346964*^9, 
   3.436113065445711*^9}, {3.436113118536557*^9, 3.4361133072759*^9}, {
   3.436113369113639*^9, 3.436113571189188*^9}, {3.4361136317829514`*^9, 
   3.43611364380017*^9}, {3.436115976974511*^9, 3.4361159787725973`*^9}, 
   3.4362733363194733`*^9, {3.436276680027619*^9, 3.4362767868603153`*^9}}],

Cell[BoxData[""], "Input",
 CellChangeTimes->{{3.436052011946106*^9, 3.43605206671138*^9}, {
   3.436052123226643*^9, 3.4360521457108746`*^9}, {3.436052208147975*^9, 
   3.436052230350958*^9}, {3.4360527411758137`*^9, 3.436052744175794*^9}, {
   3.436053472733631*^9, 3.4360535571862164`*^9}, {3.4360537437162724`*^9, 
   3.43605375576307*^9}, {3.4360538399031563`*^9, 3.4360538474656076`*^9}, {
   3.4360540490580683`*^9, 3.436054137276253*^9}, 3.4360541694322977`*^9, {
   3.4360543064470453`*^9, 3.436054314993866*^9}, {3.436054543929901*^9, 
   3.4360545510548553`*^9}, {3.4360551531916265`*^9, 3.436055183285184*^9}, {
   3.436056052170248*^9, 3.4360561209510574`*^9}, {3.4360573223808684`*^9, 
   3.4360573845992203`*^9}, {3.4360575103327904`*^9, 
   3.4360575132390223`*^9}, {3.436057742003183*^9, 3.4360577448781643`*^9}, {
   3.4360578004090595`*^9, 3.4360578022215476`*^9}, {3.436057860127427*^9, 
   3.4360578604399247`*^9}, {3.4360603904706078`*^9, 3.4360603987049303`*^9}, 
   3.4361110360435333`*^9, {3.436112780406775*^9, 3.4361127956727457`*^9}, {
   3.436113609936091*^9, 3.436113626767202*^9}, {3.436115965773571*^9, 
   3.436115972429178*^9}, 3.4362768087490664`*^9}],

Cell[TextData[{
 "\n(c) ",
 StyleBox["Map",
  FontWeight->"Bold"],
 " ",
 StyleBox[ButtonBox["StringSplit",
  BaseStyle->"Link",
  ButtonData->"paclet://ref/StringSplit"],
  FontWeight->"Bold"],
 " onto each of the long strings within ",
 StyleBox["secondtry",
  FontSlant->"Italic"],
 " in order to break them up into shorter strings based on the locations of \
any commas present.  Hints: This will require you to specify \",\" (including \
the quotes) as the delimiter in the 2nd argument of ",
 StyleBox["StringSplit",
  FontWeight->"Bold"],
 ".  Name the result ",
 StyleBox["nicetry",
  FontSlant->"Italic"],
 " and verify that it has ",
 StyleBox["Dimensions",
  FontWeight->"Bold"],
 " of {10,6}."
}], "Text",
 CellChangeTimes->CompressedData["
1:eJxTTMoPSmViYGAQAWIQ3aSReuPOzJeOGk8lb4LoHexzPO8CaYl1KgEgukVS
NxJET/E9VgCiea+Il4JoJh+9ChB9OESkAUS7P1/QB6K92NdPBtEuznpTQXSV
9sXZIFrnSsZmEP1ukfJuEH2FN+0KiJ768cJdEK225s59EL07b+0zEO0RbfIB
RFu9/PwFREfZ6/wB0aZO3PvvAelJ/lWHQLRPeMpxEL1vYtJpED3VY+19EL13
e9w7EJ1fsuYPiFbpUP8Horsl2ZjuA2m7fXpgekGFMCeI7uWplwTRjz6JyoPo
Azc/K4LoD0t+3tWe9dKxQKX1PojmUnf4fB9I96llfAHRAGgNt3M=
  "]],

Cell[BoxData[""], "Input",
 CellChangeTimes->{{3.436052011946106*^9, 3.43605206671138*^9}, {
   3.436052123226643*^9, 3.4360521457108746`*^9}, {3.436052208147975*^9, 
   3.436052230350958*^9}, {3.4360527411758137`*^9, 3.436052744175794*^9}, {
   3.436053472733631*^9, 3.4360535571862164`*^9}, {3.4360537437162724`*^9, 
   3.43605375576307*^9}, {3.4360538399031563`*^9, 3.4360538474656076`*^9}, {
   3.4360540490580683`*^9, 3.436054137276253*^9}, 3.4360541694322977`*^9, {
   3.4360543064470453`*^9, 3.436054314993866*^9}, {3.436054543929901*^9, 
   3.4360545510548553`*^9}, {3.4360551531916265`*^9, 3.436055183285184*^9}, {
   3.436056052170248*^9, 3.4360561209510574`*^9}, {3.4360573223808684`*^9, 
   3.4360573845992203`*^9}, {3.4360575103327904`*^9, 
   3.4360575132390223`*^9}, {3.436057742003183*^9, 3.4360577448781643`*^9}, {
   3.4360578004090595`*^9, 3.4360578022215476`*^9}, {3.436057860127427*^9, 
   3.4360578604399247`*^9}, {3.4360603904706078`*^9, 3.4360603987049303`*^9}, 
   3.4361110360435333`*^9, {3.436112780406775*^9, 3.4361127956727457`*^9}, 
   3.436113609936091*^9, {3.4361158377777042`*^9, 3.436115871770237*^9}, {
   3.4361159894384937`*^9, 3.436116002733795*^9}, {3.436116176612043*^9, 
   3.43611620489435*^9}, {3.436116246358049*^9, 3.436116252018463*^9}, {
   3.436273409538793*^9, 3.4362734128175373`*^9}, 3.436276812469983*^9}],

Cell[TextData[{
 "\n(d) Reverse the order of the given names and surnames (so as to show \
given name first) in ",
 StyleBox["nicetry",
  FontSlant->"Italic"],
 ", and sort the individuals in the list by zip code, displaying the final \
result in ",
 StyleBox["TableForm",
  FontWeight->"Bold"],
 ".\n\nHints: (1) Use a single line of code to ",
 StyleBox["Transpose",
  FontWeight->"Bold"],
 " ",
 StyleBox["nicetry",
  FontSlant->"Italic"],
 " into six component lists: ",
 StyleBox["{surname, givenname, streetaddress, city, state, zip}",
  FontWeight->"Bold"],
 ", where the zip-code strings get promptly converted to integers.  (2) \
Reconstruct the name-address list as the ",
 StyleBox["Transpose",
  FontWeight->"Bold"],
 " of ",
 StyleBox["{givenname, surname, streetaddress, city, state, \
ToExpression[zip]}",
  FontWeight->"Bold"],
 " and name the result ",
 StyleBox["nexttry",
  FontSlant->"Italic"],
 ".  (3) Then ",
 StyleBox["Sort",
  FontWeight->"Bold"],
 " ",
 StyleBox["nextry",
  FontSlant->"Italic"],
 " by zip code (i.e. #[[6]])."
}], "Text",
 CellChangeTimes->{{3.436116895743721*^9, 3.436116975074469*^9}, {
  3.4366423121446857`*^9, 3.436642824438282*^9}, {3.436643129514455*^9, 
  3.436643215810777*^9}, {3.4372257510073986`*^9, 3.4372257514448957`*^9}, {
  3.4986830493644*^9, 3.4986830668676*^9}}],

Cell[BoxData[""], "Input",
 CellChangeTimes->{
  3.436116890859501*^9, {3.436116992707527*^9, 3.436116996838564*^9}, 
   3.4362768156292562`*^9}]
}, Closed]],

Cell[CellGroupData[{

Cell["(#8) Exporting XML Data (10 min)", "Subsection",
 CellChangeTimes->{{3.524670682557884*^9, 3.524670696028655*^9}, {
  3.5246721727171164`*^9, 3.5246721769243574`*^9}}],

Cell["\<\
A common format for transmitting data between different systems or programs \
is called Externsible Mark-up Language (XML).  It is particularly widely used \
for sharing data over the internet.  If you are familiar with HTML, it has a \
similar structure.  There are a lot of details to the protocol but the basic \
elements we\[CloseCurlyQuote]ll worry about are the XML declaration, XML \
elements, XML attributes, and XML values.\
\>", "Text",
 CellChangeTimes->{{3.524670702372018*^9, 3.5246707631904964`*^9}, {
  3.524670812996345*^9, 3.524670815060463*^9}, {3.5246709558335147`*^9, 
  3.5246710553142047`*^9}, {3.5246711042640047`*^9, 3.5246711106553698`*^9}, {
  3.5246711907599516`*^9, 3.524671201899589*^9}, {3.5246712537605553`*^9, 
  3.52467125698974*^9}, {3.524671288883564*^9, 3.5246712953329334`*^9}}],

Cell["\<\
The first line in an XML file is the XML declaration which flags the file as \
XML and gives the XML version number.  It looks like the following:
<?xml version=\[CloseCurlyDoubleQuote]1.0\[CloseCurlyDoubleQuote]?>\
\>", "Text",
 CellChangeTimes->{{3.5246713034883995`*^9, 3.5246713643508806`*^9}}],

Cell["\<\
The rest of the file consists of XML elements.  These consist of an opening \
tag, optional atributes, data (or values), and a closing tag.  Here is an \
example.

<temperature unit=\[CloseCurlyDoubleQuote]Kelvin\[CloseCurlyDoubleQuote]>
301
</temperature>

The opening tag has an opening angle bracket and ends wtih a closing angle \
bracket.  The bracket is followed b y the name of the tag.  In this case the \
tag is temperature.

The optional attribute(s) have a format name=\[CloseCurlyDoubleQuote]value\
\[CloseCurlyDoubleQuote].  The value must be in quotes.  They are contained \
inside the opening tag.

The opening tag is followed by the value of the tag.  The value can have \
other tags nested inside it.

The final part of the XML element is the closing tag.  It starts with an \
angle bracket following by a / character and then the name of the opening \
tag.  Evering opening XML tag must have a corresponding closing tag.\
\>", "Text",
 CellChangeTimes->{{3.5246714006619577`*^9, 3.524671736811184*^9}}],

Cell[TextData[{
 "The \[OpenCurlyDoubleQuote]extensible\[CloseCurlyDoubleQuote] part of XML \
lies in the fact that there are no predefined restrictions on that names of \
the XML tags or their contents.  This makes it a very general format that can \
be used for a lot of purposes.  For example, Wolfram has defined a \
partricular set of tags that can be used to describe ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " expressions.  You can export your data in XML format and read it back into \
",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " with relative ease.  Execute the following sequence of statements to see \
how this is done.  Explain the output to your TA."
}], "Text",
 CellChangeTimes->{{3.524671733708007*^9, 3.5246718877308164`*^9}, {
  3.52467214549356*^9, 3.524672149187771*^9}}],

Cell[BoxData[{
 RowBox[{"SetDirectory", "[", 
  RowBox[{"NotebookDirectory", "[", "]"}], "]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"xData", "=", 
   RowBox[{"Range", "[", "5", "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{"Export", "[", 
  RowBox[{"\"\<data.xml\>\"", ",", "xData"}], "]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"FilePrint", "[", "\"\<data.xml\>\"", "]"}], "\[IndentingNewLine]", 
  RowBox[{"(*", " ", 
   RowBox[{
   "clear", " ", "the", " ", "data", " ", "and", " ", "read", " ", "it", " ", 
    "back", " ", "in"}], " ", "*)"}]}], "\[IndentingNewLine]", 
 RowBox[{"Clear", "[", "xData", "]"}], "\[IndentingNewLine]", 
 RowBox[{"Import", "[", "\"\<data.xml\>\"", "]"}]}], "Input",
 CellChangeTimes->{{3.5246719150243773`*^9, 3.524672024673649*^9}}],

Cell[TextData[{
 "The <!DOCTYPE> tag in the ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " output tells XML readers what format to expect in the data.  Likewise, the \
extra data in the root Expression tag describe the format use for the \
following data."
}], "Text",
 CellChangeTimes->{{3.524672065500984*^9, 3.524672130833721*^9}}]
}, Closed]],

Cell[CellGroupData[{

Cell["\<\
(#9) Importing XML Data (10 min)\
\>", "Subsection",
 CellChangeTimes->{{3.524672165484703*^9, 3.524672196629484*^9}, {
  3.5246742649367847`*^9, 3.524674272708229*^9}}],

Cell[TextData[{
 "Importing XML data produced by programs other than ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " is more involveved than importing data created by ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 ".  You\[CloseCurlyQuote]ll need to either have documentation on the format \
used or figure it out by examining the contents of the file."
}], "Text",
 CellChangeTimes->{{3.5246722285423098`*^9, 3.5246723053517027`*^9}}],

Cell["\<\
Here is an example of what some temperature data might look like.\
\>", "Text",
 CellChangeTimes->{{3.524672321109604*^9, 3.5246723440399156`*^9}}],

Cell[BoxData[{
 RowBox[{
  RowBox[{"SetDirectory", "[", 
   RowBox[{"NotebookDirectory", "[", "]"}], "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{"FilePrint", "[", "\"\<temp.xml\>\"", "]"}]}], "Input",
 CellChangeTimes->{{3.524672377121808*^9, 3.524672383575177*^9}, {
   3.524821498149815*^9, 3.5248215106698327`*^9}, 3.5248216244999924`*^9}],

Cell["\<\
It has a root tag of measurement followed by an embedded sequence of \
temperature tags.  Each temperature tag has two embedded tags, one for the \
number of degrees and one for the units.  Reading this file using only the \
tools you have acquired so far takes a little work to wend through the \
embedded structures.  Here is an example of one way to do it.  These two \
functions produce a list of the temperature data in the file.  In the \
interest of simplicity and clarity, the routines don\[CloseCurlyQuote]t do \
any internal checking on the structure of the data.\
\>", "Text",
 CellChangeTimes->{{3.5246723921666684`*^9, 3.5246724113277645`*^9}, {
  3.5246724552542768`*^9, 3.5246724571593857`*^9}, {3.5246729489025116`*^9, 
  3.524673043247908*^9}, {3.5248214049256115`*^9, 3.5248214342556524`*^9}}],

Cell[BoxData[{
 RowBox[{
  RowBox[{"parseXML", "[", "file_", "]"}], ":=", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"xml", ",", "dv"}], "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{"(*", " ", 
     RowBox[{
      RowBox[{"/", "assume"}], " ", "top", " ", "levels", " ", "is", " ", 
      "an", " ", "XMLObject", " ", "of", " ", "type", " ", 
      "\"\<Document\>\""}], " ", "*)"}], "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"xml", "=", 
      RowBox[{"Import", "[", "file", "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"(*", " ", 
      RowBox[{"Check", " ", "list", " ", "of", " ", "elements"}], " ", "*)"}],
      "\[IndentingNewLine]", 
     RowBox[{"xml", "=", 
      RowBox[{"xml", "[", 
       RowBox[{"[", "2", "]"}], "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"getTemperature", "/@", 
      RowBox[{"xml", "[", 
       RowBox[{"[", "3", "]"}], "]"}]}]}]}], "\[IndentingNewLine]", 
   "]"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"getTemperature", "[", "elemt_", "]"}], ":=", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", "subel", "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"subel", "=", 
      RowBox[{"elemt", "[", 
       RowBox[{"[", "3", "]"}], "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"lst", "=", 
      RowBox[{"Select", "[", 
       RowBox[{"subel", ",", 
        RowBox[{
         RowBox[{
          RowBox[{"#", "[", 
           RowBox[{"[", "1", "]"}], "]"}], "\[Equal]", " ", 
          "\"\<degrees\>\""}], "&"}]}], "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"lst", "[", 
       RowBox[{"[", 
        RowBox[{"1", ",", "3"}], "]"}], "]"}], "//", "First"}]}]}], 
   "\[IndentingNewLine]", "]"}]}], "\[IndentingNewLine]", 
 RowBox[{"parseXML", "[", "\"\<temp.xml\>\"", "]"}]}], "Input",
 CellChangeTimes->{{3.5246724492439327`*^9, 3.5246724502719917`*^9}, {
  3.5246730687633677`*^9, 3.524673074595701*^9}}],

Cell["\<\
Explain how these routines work to your TA.\
\>", "Text",
 CellChangeTimes->{{3.524673097269998*^9, 3.5246731039563804`*^9}}],

Cell["\<\
Here is a simpler way of extracting the data using pattern matching.\
\>", "Text",
 CellChangeTimes->{{3.524821466579771*^9, 3.5248214865697994`*^9}}],

Cell[BoxData[{
 RowBox[{
  RowBox[{"patternXML", "[", "file_", "]"}], ":=", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", "xml", "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"xml", "=", 
      RowBox[{"Import", "[", "file", "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"Cases", "[", 
      RowBox[{"xml", ",", " ", 
       RowBox[{
        RowBox[{"XMLElement", "[", 
         RowBox[{"\"\<degrees\>\"", ",", "_", ",", 
          RowBox[{"{", "temp_", "}"}]}], "]"}], "\[RuleDelayed]", 
        RowBox[{"ToExpression", "[", "temp", "]"}]}], ",", " ", "Infinity"}], 
      "]"}]}]}], "\[IndentingNewLine]", "]"}]}], "\[IndentingNewLine]", 
 RowBox[{"patternXML", "[", "\"\<temp.xml\>\"", "]"}]}], "Input",
 CellChangeTimes->{{3.5248215356198673`*^9, 3.524821589339943*^9}, {
  3.5248216497500277`*^9, 3.5248217273501363`*^9}, {3.5248282187330337`*^9, 
  3.5248282337260337`*^9}}],

Cell[TextData[{
 "The trick in the simplification is the use of the Cases statement which \
relies on pattern matching to find just those XML elements which contain the \
data we are intereested in.  the _ in the pattern means to match any list of  \
attributes (or non attributes).  The temp_ replacement rule replaces each XML \
pattern that matches the given pattern with the temperature found in that \
pattern.\n\nThe delayed replacement rule ",
 Cell[BoxData[
  FormBox["\[RuleDelayed]", TraditionalForm]],
  FormatType->"TraditionalForm"],
 "  (typeed :>) is necessary to enable temp to be assigned before the call to \
ToExpression which converts the temperature from a String to a Real."
}], "Text",
 CellChangeTimes->{{3.524821781590212*^9, 3.524821926430415*^9}, {
  3.5248282371290336`*^9, 3.5248283207860336`*^9}}]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Multimedia (25 min)", "Section",
 CellChangeTimes->{{3.4359291396433563`*^9, 3.435929145561406*^9}, {
  3.43613684185907*^9, 3.4361368419923267`*^9}, {3.436221359805456*^9, 
  3.43622135994608*^9}, {3.524674301956902*^9, 3.5246743023159227`*^9}}],

Cell[TextData[{
 "Multimedia (images, audio and video) tools have become an invaluable means \
of recording, storing, sharing and analyzing scienfic data.  ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " currenty supports a large number of ",
 StyleBox["Import",
  FontWeight->"Bold"],
 "/",
 StyleBox["Export",
  FontWeight->"Bold"],
 " formats.  The ",
 StyleBox[ButtonBox["Import",
  BaseStyle->"Link",
  ButtonData->"paclet://ref/Import"],
  FontWeight->"Bold"],
 " and ",
 StyleBox[ButtonBox["Export",
  BaseStyle->"Link",
  ButtonData->"paclet://ref/Export"],
  FontWeight->"Bold"],
 " reference pages are fairly limited, but contain links to a number of good \
tutorials.  Also see the complete list of supported formats, grouped by ",
 StyleBox[ButtonBox["media type",
  BaseStyle->"Link",
  ButtonData->"paclet://guide/ImportingAndExporting"],
  FontWeight->"Bold"],
 " or grouped ",
 StyleBox[ButtonBox["alphabetically",
  BaseStyle->"Link",
  ButtonData->"paclet://guide/ListingOfAllFormats"],
  FontWeight->"Bold"],
 ", to learn about the special options available to individual formats.  If \
you use a common extention (e.g.  \".jpg\"), ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " will automatically figure out which format you want.  Otherwise, you can \
provide a format specifier (e.g. \"",
 StyleBox["JPEG",
  FontFamily->"Courier New"],
 "\") as an argument to ",
 StyleBox["Import",
  FontWeight->"Bold"],
 " or ",
 StyleBox["Export",
  FontWeight->"Bold"],
 "."
}], "Text",
 CellChangeTimes->{{3.436129149328553*^9, 3.4361291603976583`*^9}, {
  3.4361292260581207`*^9, 3.436129284177507*^9}, {3.436129315908805*^9, 
  3.436129409484242*^9}, {3.436129458932837*^9, 3.436129498719911*^9}, {
  3.436129533320863*^9, 3.436129563898266*^9}, {3.436129622184948*^9, 
  3.436129662700453*^9}, {3.4361832226492662`*^9, 3.4361835522085953`*^9}}],

Cell[CellGroupData[{

Cell["(#10) Audio (15 min)", "Subsection",
 CellChangeTimes->{{3.435926618430599*^9, 3.435926619037857*^9}, {
  3.435929033838606*^9, 3.4359290359344788`*^9}, {3.435929111566641*^9, 
  3.4359291117764797`*^9}, {3.436136037315283*^9, 3.436136037448642*^9}, {
  3.436136846880643*^9, 3.436136847048437*^9}, {3.436278048305849*^9, 
  3.436278049617757*^9}, {3.524670362799595*^9, 3.524670363174617*^9}, {
  3.5246828875969725`*^9, 3.524682888370017*^9}}],

Cell[TextData[{
 "(a) The DC guide page on ",
 StyleBox[ButtonBox["Sound and Sonification",
  BaseStyle->"Link",
  ButtonData->"paclet://guide/SoundAndSonification"],
  FontWeight->"Bold"],
 " contains links to most of the standard functions for creating and \
analyzing audio signals.  Spend 10 minutes working through the \"Basic \
Examples\" on each of these reference pages.  If you have have a strong \
interest in music and/or audio, you may also want to explore the special ",
 StyleBox[ButtonBox["Music",
  BaseStyle->"Link",
  ButtonData->"paclet://Music/guide/MusicPackage"],
  FontWeight->"Bold"],
 " and ",
 StyleBox[ButtonBox["Audio",
  BaseStyle->"Link",
  ButtonData->"paclet://Audio/guide/AudioPackage"],
  FontWeight->"Bold"],
 " packages.\n\n(b) Evaluate the cell below to see some instrumental-audio \
clips available via ",
 StyleBox["ExampleData",
  FontWeight->"Bold"],
 ".  One can also conveniently ",
 StyleBox["Import",
  FontWeight->"Bold"],
 " audio data from disk or from the internet.  Use earphones to listen to the \
clip that we loaded here (the TAs should have headphones available if you \
don't have your own).  Study the output from ",
 StyleBox["ReplacePart",
  FontWeight->"Bold"],
 " to see how ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " organizes sound data.  Observe that the only metadata stored is the sample \
frequency.  ",
 StyleBox[ButtonBox["Sound",
  BaseStyle->"Link",
  ButtonData->"paclet://ref/Sound"],
  FontWeight->"Bold"],
 ", like ",
 StyleBox["Graphics",
  FontWeight->"Bold"],
 ", is a wrapper that delivers its content in a user-friendly format (i.e. a \
cute graphical-interface box)."
}], "Text",
 CellChangeTimes->{{3.435926702272093*^9, 3.4359267243693657`*^9}, {
   3.435926777402864*^9, 3.4359267984832697`*^9}, {3.4359269800912647`*^9, 
   3.4359269929534883`*^9}, {3.43592720428924*^9, 3.4359272281918173`*^9}, {
   3.4359289775598516`*^9, 3.435928978645236*^9}, {3.436126743360723*^9, 
   3.436126805296049*^9}, {3.436126838753627*^9, 3.436126867849654*^9}, {
   3.43612724041485*^9, 3.4361272408451*^9}, {3.436127463438574*^9, 
   3.4361277231149607`*^9}, {3.436129940466288*^9, 3.436129946493559*^9}, 
   3.436129980615292*^9, {3.436130037704235*^9, 3.436130073962901*^9}, {
   3.436130105603773*^9, 3.436130260966446*^9}, {3.4361302997428837`*^9, 
   3.436130299743641*^9}, {3.436130330511879*^9, 3.4361303505330057`*^9}, {
   3.4361304023649807`*^9, 3.436130429307539*^9}, {3.436130581925193*^9, 
   3.436130606794361*^9}, {3.436134499360422*^9, 3.436134542415986*^9}, {
   3.436135669316292*^9, 3.436135670456398*^9}, {3.4397516854684134`*^9, 
   3.4397516881403055`*^9}}],

Cell[BoxData[{
 RowBox[{"ExampleData", "[", "\"\<Sound\>\"", "]"}], "\[IndentingNewLine]", 
 RowBox[{"horn", " ", "=", " ", 
  RowBox[{"ExampleData", "[", 
   RowBox[{"{", 
    RowBox[{"\"\<Sound\>\"", ",", "\"\<FrenchHorn\>\""}], "}"}], 
   "]"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"ReplacePart", "[", 
   RowBox[{"horn", ",", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"1", ",", "1"}], "}"}], "\[Rule]", "\"\<datagoeshere\>\""}]}], 
   "]"}], "//", "InputForm"}]}], "Input",
 CellChangeTimes->{{3.435927252857182*^9, 3.435927305850878*^9}, {
  3.436126723562087*^9, 3.436126723894011*^9}, {3.4361269370617332`*^9, 
  3.436126937405078*^9}, {3.436127052673044*^9, 3.4361270646178427`*^9}, {
  3.4361271604362288`*^9, 3.436127236565819*^9}, {3.436127450769767*^9, 
  3.436127451253002*^9}, {3.437228155038888*^9, 3.437228155960757*^9}}],

Cell[TextData[{
 "\n(c) Make a modified version of this horn sound that plays the same note \
an octave lower.  You might use ",
 StyleBox["ReplacePart",
  FontWeight->"Bold"],
 " on ",
 StyleBox["horn",
  FontSlant->"Italic"],
 " to cut the sample rate in half (i.e. from 22050 Hz to 11025 Hz).  Or you \
could extract the audio data within ",
 StyleBox["horn",
  FontSlant->"Italic"],
 ", and manually invoke ",
 StyleBox["SampledSoundList",
  FontWeight->"Bold"],
 " with the lower frequency, followed by ",
 StyleBox["Sound",
  FontWeight->"Bold"],
 " or ",
 StyleBox["EmitSound",
  FontWeight->"Bold"],
 ".  Either way, name the new sound ",
 StyleBox["lowhorn",
  FontSlant->"Italic"],
 ".  Why does ",
 StyleBox["lowhorn",
  FontSlant->"Italic"],
 " play twice as long as ",
 StyleBox["horn",
  FontSlant->"Italic"],
 "?"
}], "Text",
 CellChangeTimes->{{3.436126919534444*^9, 3.436126930196163*^9}, 
   3.436126968445119*^9, {3.4361270221347713`*^9, 3.436127037174582*^9}, {
   3.4361272701343822`*^9, 3.436127284414435*^9}, {3.436127318015617*^9, 
   3.4361274600460243`*^9}, {3.436130569073111*^9, 3.436130674827444*^9}, {
   3.436131007461145*^9, 3.436131008396203*^9}, 3.436131276055374*^9, {
   3.436134520321788*^9, 3.436134536335333*^9}, {3.436134575990011*^9, 
   3.4361347686433573`*^9}, {3.43613482187214*^9, 3.436134889263247*^9}, {
   3.43613495029144*^9, 3.4361349998590612`*^9}, {3.4361350519242983`*^9, 
   3.436135066700989*^9}, {3.436135741506633*^9, 3.4361357653772707`*^9}, {
   3.436274273612966*^9, 3.436274282498129*^9}, {3.4362743188349533`*^9, 
   3.436274374316568*^9}, {3.4986839055952*^9, 3.4986839063596*^9}}],

Cell[BoxData[""], "Input",
 CellChangeTimes->{{3.436131530949863*^9, 3.436131531571661*^9}, {
   3.4361321821056633`*^9, 3.4361321843191767`*^9}, {3.436132216810876*^9, 
   3.4361322232584248`*^9}, 3.436133291578825*^9, 3.436133322539897*^9, {
   3.436134774293106*^9, 3.436134807357848*^9}, {3.4361350163411407`*^9, 
   3.436135025092874*^9}, {3.436136030899343*^9, 3.4361360311456757`*^9}, 
   3.436277018804298*^9, {3.4986839316316*^9, 3.4986839470288*^9}}],

Cell[TextData[{
 "\n(d) ",
 StyleBox["Export",
  FontWeight->"Bold"],
 " ",
 StyleBox["lowhorn",
  FontSlant->"Italic"],
 " to a \".wav\" file in your working directory and play it with external \
software."
}], "Text",
 CellChangeTimes->{{3.436135036246039*^9, 3.436135126238551*^9}, {
  3.436277023579401*^9, 3.436277029595134*^9}}],

Cell[BoxData[""], "Input",
 CellChangeTimes->{{3.436135107438991*^9, 3.436135108238236*^9}, {
   3.436135592838352*^9, 3.436135601268548*^9}, {3.4361357832349253`*^9, 
   3.4361357834659224`*^9}, {3.436274249188313*^9, 3.436274249561781*^9}, 
   3.436277032563388*^9}]
}, Closed]],

Cell[CellGroupData[{

Cell["(#11) Video (10 min)", "Subsection",
 CellChangeTimes->{{3.4359266320792007`*^9, 3.435926633214302*^9}, {
  3.435929038302717*^9, 3.43592903971854*^9}, {3.4359291945984793`*^9, 
  3.435929196818906*^9}, {3.4361367714730463`*^9, 3.4361367716063232`*^9}, {
  3.436136847728621*^9, 3.436136847896463*^9}, {3.4362780513138237`*^9, 
  3.43627805324984*^9}, {3.5246703673338547`*^9, 3.524670368001893*^9}, {
  3.524682901978795*^9, 3.5246829026828356`*^9}}],

Cell[TextData[{
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " can import and export a nubmer of video formats.  For our purposes, we\
\[CloseCurlyQuote]ll focus on the single tasks of exporting animations which \
you might want to embed in a presentation or display on the web."
}], "Text",
 CellChangeTimes->{{3.435929187146953*^9, 3.435929189754553*^9}, {
  3.435929696692319*^9, 3.435929757644094*^9}, {3.435929824993082*^9, 
  3.43592986299286*^9}, {3.436136434799473*^9, 3.436136575921454*^9}, {
  3.436136657728031*^9, 3.436136765822894*^9}, {3.436217361346671*^9, 
  3.4362173620185423`*^9}, {3.436217400080798*^9, 3.4362174503148518`*^9}, {
  3.4362744023818693`*^9, 3.436274402502714*^9}, {3.524670480499327*^9, 
  3.5246704819544106`*^9}, {3.5246816899494715`*^9, 3.524681745022621*^9}}],

Cell["\<\
The simplest (and usually most inadequate) way to export data is to export an \
animation directly.  You can export AVI, MOV, or SWF formats.  AVI files are \
the largest but most universally accepted by programs such as PowerPoint.  \
MOVE format files are much smaller and faster if your target software \
supports them.  SWF files are also much smaller and work well on web pages.\
\>", "Text",
 CellChangeTimes->{{3.524681749506878*^9, 3.524681896011257*^9}}],

Cell["\<\
Execute the following commands to create an animation and store it as an AVI \
file.  Then view the file using Windows Media player on your desktop by \
double clicking on it.\
\>", "Text",
 CellChangeTimes->{{3.5246819112501287`*^9, 3.524681954128581*^9}}],

Cell[BoxData[{
 RowBox[{"SetDirectory", "[", 
  RowBox[{"NotebookDirectory", "[", "]"}], "]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"Animate", "[", 
   RowBox[{
    RowBox[{"Plot", "[", 
     RowBox[{
      RowBox[{"Sin", "[", 
       RowBox[{"2", " ", "Pi", " ", 
        RowBox[{"(", 
         RowBox[{"x", "-", "t"}], ")"}]}], "]"}], ",", 
      RowBox[{"{", 
       RowBox[{"x", ",", "0", ",", "2"}], "}"}]}], "]"}], ",", 
    RowBox[{"{", 
     RowBox[{"t", ",", "0", ",", "2"}], "}"}]}], "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{"Export", "[", 
  RowBox[{"\"\<sine.avi\>\"", ",", "%"}], "]"}]}], "Input",
 CellChangeTimes->{{3.524681955192642*^9, 3.5246820091467285`*^9}}],

Cell["\<\
A better way to create graphics (usually smoother, smaller, and without \
non-functional controls) is to create an array of graphics objects and then \
export that.\
\>", "Text",
 CellChangeTimes->{{3.524682083081957*^9, 3.524682118229967*^9}}],

Cell[BoxData[{
 RowBox[{
  RowBox[{"gArray", "=", 
   RowBox[{"Table", "[", 
    RowBox[{
     RowBox[{"Plot", "[", 
      RowBox[{
       RowBox[{"Sin", "[", 
        RowBox[{"2", " ", "Pi", 
         RowBox[{"(", 
          RowBox[{"x", "-", "t"}], ")"}]}], "]"}], ",", 
       RowBox[{"{", 
        RowBox[{"x", ",", "0", ",", "2"}], "}"}]}], "]"}], ",", 
     RowBox[{"{", 
      RowBox[{"t", ",", "0", ",", "2", ",", "0.05"}], "}"}]}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{"Export", "[", 
  RowBox[{"\"\<sine2.avi\>\"", ",", "gArray", ",", " ", 
   RowBox[{"AnimationRate", "\[Rule]", "10"}]}], "]"}]}], "Input",
 CellChangeTimes->{{3.524682124896349*^9, 3.5246822488234367`*^9}, {
  3.5246822797102036`*^9, 3.5246823073487844`*^9}}],

Cell[TextData[{
 "Create an animation file of the function ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{"f", "(", 
     RowBox[{"x", ",", "y", ",", "t"}], ")"}], "=", 
    RowBox[{"3", " ", 
     RowBox[{"cos", "(", 
      RowBox[{"0.2", " ", "t"}], ")"}], " ", 
     RowBox[{"exp", "(", 
      RowBox[{
       RowBox[{"-", 
        FractionBox["1", "3"]}], " ", 
       RowBox[{"(", 
        RowBox[{
         SuperscriptBox["x", "2"], "+", 
         SuperscriptBox["y", "2"]}], ")"}]}], ")"}]}]}], TraditionalForm]]],
 " for x and y from -5 to 5 and t from 0 to 20\[Pi].  Embed your file in a \
PowerPoint presentation and who it to your TA.  Use PlotRange->{All, All, \
{-3,3}} in order to preserve the scale on your plots."
}], "Text",
 CellChangeTimes->{{3.524682331363158*^9, 3.5246823412677245`*^9}, {
  3.5246823845411997`*^9, 3.5246825227811065`*^9}, {3.524682660211967*^9, 
  3.524682687772543*^9}}],

Cell[BoxData[""], "Input",
 CellChangeTimes->{{3.5246825271393557`*^9, 3.524682643285999*^9}, 
   3.52468291272941*^9}],

Cell["", "Text"]
}, Closed]]
}, Open  ]],

Cell[CellGroupData[{

Cell["\<\
Integrated Data Sources (10 min)\
\>", "Section",
 CellChangeTimes->{{3.4293870979341364`*^9, 3.429387131372064*^9}, {
   3.4294833774233932`*^9, 3.429483381173441*^9}, {3.4295234591041384`*^9, 
   3.429523460197902*^9}, {3.4359290437921886`*^9, 3.435929043870716*^9}, {
   3.435929118545209*^9, 3.435929118728846*^9}, {3.4359300133314667`*^9, 
   3.435930013395002*^9}, 3.435956237148321*^9, 3.436066267823617*^9, 
   3.436119841657992*^9, {3.4361370754744*^9, 3.43613707608762*^9}, {
   3.4463874061158733`*^9, 3.4463874061783733`*^9}, {3.4463907167564983`*^9, 
   3.4463907170533733`*^9}, {3.524674315839696*^9, 3.5246743172757783`*^9}, {
   3.524674397865388*^9, 3.5246743984204197`*^9}}],

Cell[TextData[{
 "Briefly review the DC guide page on ",
 StyleBox["Mathematica'",
  FontSlant->"Italic"],
 "s ",
 StyleBox[ButtonBox["Integrated Data Sources",
  BaseStyle->"Link",
  ButtonData->"paclet://guide/DataCollections"],
  FontWeight->"Bold"],
 ", a diverse collection of internet-accessible data sources, some of which \
are continually updated.  Whenever you query one of the data sources, the \
requested data is automatically downloaded to your computer and imported into \
your notebook for analysis and/or display.  While we only have time to \
explore a few of the available data sources in this section, you are \
encourage to explore the others later on your own.  You may also be \
interested in the ",
 StyleBox[ButtonBox["Units",
  BaseStyle->"Link",
  ButtonData->"paclet://Units/guide/UnitsPackage"],
  FontWeight->"Bold"],
 " package and the ",
 StyleBox[ButtonBox["Physical Constants",
  BaseStyle->"Link",
  ButtonData->"paclet://PhysicalConstants/guide/PhysicalConstantsPackage"],
  FontWeight->"Bold"],
 " package."
}], "Text",
 CellChangeTimes->{{3.429387140215927*^9, 3.429387162747466*^9}, {
   3.429513669838212*^9, 3.4295136787758265`*^9}, {3.429522715578996*^9, 
   3.4295227693609343`*^9}, {3.429522809017692*^9, 3.429522877534194*^9}, {
   3.4295229165815687`*^9, 3.4295232278824286`*^9}, 3.4295234137598076`*^9, {
   3.429523471901177*^9, 3.4295234939795847`*^9}, {3.431187351353874*^9, 
   3.4311873552289486`*^9}, {3.4361839191239033`*^9, 
   3.4361839195851917`*^9}, {3.436274415510639*^9, 3.436274416509965*^9}, {
   3.436277307419983*^9, 3.436277540395173*^9}, {3.436277574264123*^9, 
   3.436277948936234*^9}}],

Cell[CellGroupData[{

Cell["(#12) Element Data (10 min)", "Subsection",
 CellChangeTimes->{{3.4359418836647778`*^9, 3.4359418857428894`*^9}, {
   3.435945030785261*^9, 3.4359450348164854`*^9}, {3.435947741330414*^9, 
   3.4359477461272583`*^9}, {3.4360660348719835`*^9, 3.4360660374969664`*^9}, 
   3.4361198384802933`*^9, {3.436199570710532*^9, 3.436199570835531*^9}, {
   3.436221357914843*^9, 3.436221358086717*^9}, {3.436278056002056*^9, 
   3.43627805869002*^9}, {3.4463873985064983`*^9, 3.4463874009283733`*^9}, {
   3.5246829210878882`*^9, 3.5246829212318964`*^9}}],

Cell[TextData[{
 "(a) ",
 StyleBox[ButtonBox["ElementData",
  BaseStyle->"Link",
  ButtonData->"paclet://ref/ElementData"],
  FontWeight->"Bold"],
 " provides a variety of information on each element in the periodic table.  \
Evaluate the cell below, where we display (1) a list of the elements in the \
database, (2) a list of the properties stored for each element, (3) the \
atomic number of iron, and (4) a list of the property values stored for iron. \
 Carefully study how ",
 StyleBox["ElementData",
  FontWeight->"Bold"],
 " is used to obtain each of these three lists, and explain your observations \
to your TA.  Before you proceed to the next part, delete the lengthy output \
so that it won't be in the way."
}], "Text",
 CellChangeTimes->{{3.436187075861313*^9, 3.436187174045218*^9}, {
   3.4361872169685183`*^9, 3.436187236223908*^9}, {3.436187396789648*^9, 
   3.436187522879595*^9}, {3.436187566243641*^9, 3.436187602065283*^9}, {
   3.436187699165156*^9, 3.4361878484162493`*^9}, {3.4361979402990923`*^9, 
   3.43619794529906*^9}, {3.436218573448289*^9, 3.4362186396197405`*^9}, 
   3.4362744422005863`*^9}],

Cell[BoxData[{
 RowBox[{"ElementData", "[", "]"}], "\[IndentingNewLine]", 
 RowBox[{"properties", " ", "=", " ", 
  RowBox[{
  "ElementData", "[", "\"\<Properties\>\"", "]"}]}], "\[IndentingNewLine]", 
 RowBox[{"ElementData", "[", 
  RowBox[{"\"\<Iron\>\"", ",", "\"\<AtomicNumber\>\""}], 
  "]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"MatrixForm", "/@", 
     RowBox[{"{", 
      RowBox[{"#", ",", 
       RowBox[{"ElementData", "[", 
        RowBox[{"\"\<Iron\>\"", ",", "#"}], "]"}]}], "}"}]}], "&"}], " ", "/@",
    " ", "properties"}], " ", "//", " ", "TableForm"}]}], "Input",
 CellChangeTimes->{{3.4359450363789754`*^9, 3.4359450381445894`*^9}, {
   3.435947790314475*^9, 3.4359478009237823`*^9}, {3.43618731780317*^9, 
   3.436187320978448*^9}, {3.436187402467187*^9, 3.436187402870603*^9}, {
   3.436187462441311*^9, 3.4361874649346657`*^9}, {3.436187534177455*^9, 
   3.436187553635662*^9}, {3.436187586790431*^9, 3.436187590428876*^9}, {
   3.436187867525573*^9, 3.4361878702332907`*^9}, {3.4361973905362277`*^9, 
   3.436197391770602*^9}, 3.4361977387847567`*^9}],

Cell[TextData[{
 "\n(b)  Of course, it isn't possible to include every property for every \
element in the periodic table.  And you probably saw that some of the \
properties of iron were listed as ",
 StyleBox[ButtonBox["Missing",
  BaseStyle->"Link",
  ButtonData->"paclet://ref/Missing"],
  FontWeight->"Bold"],
 " because they were either \"",
 StyleBox["NotAvailable",
  FontFamily->"Courier New"],
 "\", \"",
 StyleBox["NotApplicable",
  FontFamily->"Courier New"],
 "\", or \"",
 StyleBox["Unknown",
  FontFamily->"Courier New"],
 "\".  Evaluate the cell below to create a function called ",
 StyleBox["skipmissing",
  FontSlant->"Italic"],
 " that eliminates any ",
 StyleBox["Missing",
  FontWeight->"Bold"],
 " items from a list of data.  We test it for one simple example.  Before you \
proceed to the next part, delete the lengthy output so that it won't be in \
the way."
}], "Text",
 CellChangeTimes->{{3.43618724753472*^9, 3.43618730517699*^9}, {
  3.436187386164373*^9, 3.436187415332985*^9}, {3.436187663100933*^9, 
  3.436187686915526*^9}, {3.436187741589799*^9, 3.4361877487257557`*^9}, {
  3.4361878858491163`*^9, 3.4361878932492533`*^9}, {3.436197925799185*^9, 
  3.4361982259535136`*^9}, {3.436199158822543*^9, 3.436199184338005*^9}, {
  3.4362746039894457`*^9, 3.436274610557743*^9}}],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"skipmissing", "[", "data_", "]"}], " ", ":=", " ", 
   RowBox[{"Select", "[", 
    RowBox[{"data", ",", 
     RowBox[{
      RowBox[{"!", 
       RowBox[{"MemberQ", "[", 
        RowBox[{
         RowBox[{"Flatten", "[", "#", "]"}], ",", "_Missing"}], "]"}]}], 
      "&"}]}], "]"}]}], "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"{", 
    RowBox[{"#", ",", 
     RowBox[{"ElementData", "[", 
      RowBox[{"#", ",", "\"\<MagneticType\>\""}], "]"}], ",", 
     RowBox[{"ElementData", "[", 
      RowBox[{"#", ",", "\"\<ElectricalType\>\""}], "]"}]}], "}"}], "&"}], "/@",
   " ", 
  RowBox[{"ElementData", "[", "]"}]}], "\[IndentingNewLine]", 
 RowBox[{"%", " ", "//", " ", "skipmissing"}]}], "Input",
 CellChangeTimes->{{3.436187308499276*^9, 3.436187357731496*^9}, 
   3.436187638156823*^9, {3.4361972755987277`*^9, 3.436197316114352*^9}, {
   3.436197402458102*^9, 3.436197404270602*^9}, {3.4361978407216043`*^9, 
   3.4361978410809765`*^9}, {3.436198228312874*^9, 3.4361982445940194`*^9}, {
   3.4361982787656755`*^9, 3.436198312812333*^9}, {3.43619835151521*^9, 
   3.436198355608934*^9}, {3.436198409858587*^9, 3.436198413436689*^9}, {
   3.436198479186268*^9, 3.4361985523889246`*^9}, {3.436198617326009*^9, 
   3.4361986464664474`*^9}, {3.4361986800443573`*^9, 
   3.4361987015910945`*^9}, {3.437420319544135*^9, 3.437420345372095*^9}}],

Cell[TextData[{
 "\n(c) In this cell, create a 2D list that contains a pair of Kelvin-degree \
temperatures, the \"",
 StyleBox["AbsoluteMeltingPoint",
  FontFamily->"Courier New"],
 "\" and the \"",
 StyleBox["AbsoluteBoilingPoint",
  FontFamily->"Courier New"],
 "\", for each element in the database.  Then use ",
 StyleBox["skipmissing",
  FontSlant->"Italic"],
 " to eliminate the pairs that are ",
 StyleBox["Missing",
  FontWeight->"Bold"],
 " one or both of these temperatures, and employ ",
 StyleBox["N",
  FontWeight->"Bold"],
 " to ensure that all of the entries contain true floating-point data."
}], "Text",
 CellChangeTimes->{{3.436187378311037*^9, 3.436187381099105*^9}, {
   3.436187881969111*^9, 3.436187882088909*^9}, {3.436198769231287*^9, 
   3.4361989404645658`*^9}, {3.436199136541436*^9, 3.436199137150807*^9}, 
   3.436199205931617*^9, {3.436211739867024*^9, 3.436211802679122*^9}, {
   3.436213679995232*^9, 3.4362136822139683`*^9}, {3.436274482936192*^9, 
   3.436274496592628*^9}}],

Cell[BoxData[""], "Input",
 CellChangeTimes->{{3.435947809751851*^9, 3.435948200764973*^9}, {
   3.435948262248955*^9, 3.4359482895925293`*^9}, {3.4359483574202204`*^9, 
   3.435948383154431*^9}, {3.4359484282478924`*^9, 3.4359484455915313`*^9}, {
   3.435948714433561*^9, 3.435948722636633*^9}, 3.4359487980736504`*^9, 
   3.435949035337757*^9, {3.435950225806066*^9, 3.435950419446005*^9}, 
   3.435950539220084*^9, {3.436197322551852*^9, 3.436197344489352*^9}, 
   3.436197400833102*^9, {3.436197466614352*^9, 3.436197546223489*^9}, {
   3.436197788878186*^9, 3.43619789061191*^9}, {3.4361988474339113`*^9, 
   3.436198862011943*^9}, {3.4362112741981297`*^9, 3.436211275979368*^9}, 
   3.436277051934518*^9}],

Cell[TextData[{
 "\n(d) ",
 StyleBox["Fit",
  FontWeight->"Bold"],
 " a straight line with zero intercept through the data obtained in the \
previous cell.  Plot the data and the resulting fit on the same graph with \
the following options:  ",
 StyleBox["{PlotRange \[Rule] All, Frame \[Rule] True, FrameLabel \[Rule] \
{\"Melting Point (K)\", \"Boiling Point (K)\"}}",
  FontWeight->"Bold"],
 ".  What do you learn from this plot?"
}], "Text",
 CellChangeTimes->{{3.436199197462921*^9, 3.4361993089934573`*^9}, {
  3.436199514148394*^9, 3.436199537851368*^9}, {3.436211561743164*^9, 
  3.4362116365551853`*^9}, {3.436211841335125*^9, 3.436211937709508*^9}, {
  3.4362119837248383`*^9, 3.436211985662326*^9}}],

Cell[BoxData[""], "Input",
 CellChangeTimes->{{3.435947809751851*^9, 3.435948200764973*^9}, {
   3.435948262248955*^9, 3.4359482895925293`*^9}, {3.4359483574202204`*^9, 
   3.435948383154431*^9}, {3.4359484282478924`*^9, 3.4359484455915313`*^9}, {
   3.435948714433561*^9, 3.435948722636633*^9}, 3.4359487980736504`*^9, 
   3.435949035337757*^9, {3.435950225806066*^9, 3.4359503329459934`*^9}, {
   3.4359504063740587`*^9, 3.4359504830650873`*^9}, {3.436197858721489*^9, 
   3.436197858893363*^9}, {3.436197897330617*^9, 3.436197897439991*^9}, {
   3.436199287165472*^9, 3.436199342290119*^9}, {3.4361994038678503`*^9, 
   3.436199437461385*^9}, {3.436199498929742*^9, 3.436199499460988*^9}, {
   3.436211278229354*^9, 3.436211281463708*^9}, {3.436211536008954*^9, 
   3.4362115372901955`*^9}, 3.4362770589637012`*^9}]
}, Closed]]
}, Open  ]],

Cell[CellGroupData[{

Cell["On Your Own (40 min)", "Section",
 CellChangeTimes->{{3.5244219839279356`*^9, 3.524421985829755*^9}, {
  3.52467442133173*^9, 3.5246744243799047`*^9}}],

Cell[CellGroupData[{

Cell["\<\
(#13) Reading a CSV data file (10 min)\
\>", "Subsection",
 CellChangeTimes->{{3.5246731465028143`*^9, 3.5246731529391823`*^9}, {
  3.524674453691581*^9, 3.524674470719555*^9}, {3.5246745124649425`*^9, 
  3.5246745145890636`*^9}, {3.5246747716007643`*^9, 3.524674773430869*^9}, {
  3.5246829360347433`*^9, 3.524682938238869*^9}}],

Cell[BoxData[{
 RowBox[{
  RowBox[{"SetDirectory", "[", 
   RowBox[{"NotebookDirectory", "[", "]"}], "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{"Clear", "[", "\"\<`*\>\"", "]"}]}], "Input",
 CellChangeTimes->{{3.5290766190207233`*^9, 3.529076643585767*^9}, {
  3.5290774181535077`*^9, 3.529077422873272*^9}}],

Cell[TextData[{
 "The file multidata.csv contains data from an experiment recorded in four \
columns.  The first column is the time in seconds, the second the \
temperature, the third the magnetic field, and the fourth a voltage on a \
sensor in millivolts.  Read in the data and create a 3d plot of the \
calibrated sensor reading as a function of 1/temperature and magnetic field.  \
The file calibration.csv contains the calibration data for the sensor.  The \
first column is the sensor reading and the second column is the calibration \
signal.  (Since your routine should work for a large collection of deata \
files, you need to do any necessary data manipulation from within ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 ".  Don\[CloseCurlyQuote]t edit the data files directly."
}], "Text",
 CellChangeTimes->{{3.5246745348242216`*^9, 3.524674538225416*^9}, {
  3.5246745831719866`*^9, 3.524674733895608*^9}, {3.524674776785061*^9, 
  3.5246748609468746`*^9}, {3.524676140203044*^9, 3.524676176661129*^9}}],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"data13", " ", "=", " ", 
   RowBox[{"Import", "[", "\"\<multidata.csv\>\"", "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"calibrationData", " ", "=", " ", 
   RowBox[{"Import", "[", "\"\<calibration.csv\>\"", "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"{", 
    RowBox[{"time", ",", "temp", ",", "field", ",", "voltage"}], "}"}], " ", 
   "=", " ", 
   RowBox[{"Transpose", "[", 
    RowBox[{"Drop", "[", 
     RowBox[{"data13", ",", "2"}], "]"}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"func", "[", "x_", "]"}], "=", " ", 
   RowBox[{"Interpolation", "[", 
    RowBox[{"calibrationData", ",", "x"}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{"ListPlot3D", "[", 
  RowBox[{"Transpose", "[", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"1", "/", "temp"}], ",", "field", ",", 
     RowBox[{"func", "[", "voltage", "]"}]}], "}"}], "]"}], "]"}]}], "Input",
 CellChangeTimes->{{3.5290766637837467`*^9, 3.529076733419287*^9}, {
  3.529076814371199*^9, 3.529076880317892*^9}, {3.529076922115803*^9, 
  3.5290770418773155`*^9}, {3.5290772939047203`*^9, 3.529077308528989*^9}, {
  3.529077372198305*^9, 3.5290775299017286`*^9}, {3.529077635353566*^9, 
  3.529077721105995*^9}, {3.529077776424336*^9, 3.529077937584503*^9}, {
  3.5290779910878987`*^9, 3.529078054985983*^9}, {3.5290781024520593`*^9, 
  3.529078127868797*^9}}],

Cell[BoxData[
 Graphics3DBox[GraphicsComplex3DBox[CompressedData["
1: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
   "], {{
     {EdgeForm[None], GraphicsGroup3DBox[{Polygon3DBox[CompressedData["
1:eJwtlXfMjlcYxs95bD4+QcT40K9mbIqaCUKNorWFEKsk1Peh9p6196g9q7H3
CEKChBhpEEGCILESMaptYvO7ct9//HJdz/2e97znnPt6zpveN7NDRhJC2ARZ
oD0PB9DdMYSf0VzQF15BfngItyAFpjMmhfFj8XPw82AKvgC1mfhM/Fs0J6Th
V6FLoAD+GVTFl0HT0BkwFP8YfQn98JPQUsw1Df8aDvB8CG1B7UmweVT/Pdp6
bmtefH90Mvoi2ncXol8gAz8NvQ+j8E9hNZSApXCSen10CDoVLQzD4Euw9eeg
Ph8m44uwhuIwB7+MWis0J/SEyxoLR2ERn81ECzH2FzQ3DILn0Z6noKV9nvdw
A1L1OayMtob/4BG+GzpRZ8b4BfjPkOCHoFOp30Pz+b568FwNbRPtfHS276Lt
R3NqDz/y3R1oDep70crwp/pMfbHyQD1bYuemXlfBb8GXitbzgjAAPvgZrvb+
ar+fos1dETbDYf0O7HHk1cvaifVgC+M3BsvDBhjIc220T7Q8VoX90DCxcX9R
n60+wGioR30X+j31vPAtfmu09ZaDNZ5h5bMoY9/wWTv8GDQmlofZ+H88P+qL
5qukeeB/nn9CxynPjB+Hn6ueRFtbK7QT9YP4H6JlZiFk95p6sTNYr/QeDYZ1
jPtGOUb/8IwtgZGe7V6wWO8G+jHaPrVfPT9Qpjwz26A8rIW70b4/C031dSpL
3TyTzeBv38tY9Dq0wY9Cr0Bb95nR3v2rcBvfBR3vmgc6wh2eu3omT6CN4Ba+
fbT+9kMrsYZl+o6yF20Nl6BOtGzs1d6jnVVFxpaJ1q/v0OHQBH9Od4L6Bin4
a343qRdrvL+b4HSwNV+D5nxWE/3V52mMP64MC3wntEWwe6NpsP02RI+geRLr
x0Z8T8/hgGj9UF90rx30u0LveNfE8t3B7y29g72D7Ve/e9azlhd6wL5ouWqE
nkezKcP4w9Ag2P1zHlriR6Cnfa2/oSvQYrBSmY6m1fn9i34HjVRuo51HE+qp
ul90tmjTxLJSAV8cKmjvaEHP4XrVvF96l6vDdnzrxPqr/4czyi2U1Hg9+zr1
uw89DxN0lr7HluiFYH08ES3r+q3tupOiZeYoWsTf2XQfj4Rjwe4O5UTrKB8t
5/XQU76eDN2RkK4M+Jzq403032B33YpoE+rcdGde8swrJ+/8ncpKrTvUUu/Q
uontcxv+hr8X6lE5v3uXq6eJ3ZuNtR7vndaTltj/xwJ8Wb9L9d+3w/eu8+4M
dfCDVEvsLluK/wrsMdNT
         "]], Polygon3DBox[CompressedData["
1:eJxFmHm811Max8/5qlsxmW5Jm9ItRKW41SVyb3IrFe3SpdRcW2T0orzwsr2y
ZBkzpsZYJjtZyr7vQpZGKAaTtZVGDRHZ5fPu+fxe/vi8vs9Zv895zjnP83lO
Rf200ScXKaUpOaUG+v5X+IMwWHhWdR/r20I4k3p1XK/vH4Wz+ar8jb47CjOF
nVR+R2MGSh4kvCf5HX23E8Yxt8qv69tYGCIsVvlEoUry3sJBko8RekvuKRwp
eZ2+zYXThA9VfsPj+Qf/el2YIHmi8KbnXyI8JflpYQ/pdIF1vErlpfo2EUYK
y1T+tzBU8jDhNckvCQdJrhVekfygsK/kvsJDkh8XqiXXCE8yXt9Gwnhhjcor
hLGSDxNWSf5RmC55hvCL5A/0bSoMF75W+YIc9j5CaChd1+hbLtQJm9V2vdBR
8hXoXURdnfv/IPkrfVsK57BGtb+l7/bC0cIXav9M+JPkeuF/klfq20z4s1Co
fyPV7ST5avZJ5ZNV3sb79wxjhT6S9xJGSP5O31Yp1sTaFuq7rXCssF7lR20P
bIbtrvH8s4RdNf8y2x+bY/t/CHOEtmprJ+xchK2Yv4PkzsJfJF8mdJI8X33v
EloIOwjtizh3f5X8N+Fz1il8xNkVzhbO8r6sRBdhF7XfKPTTuANU7iZ5AXus
8n4qd5V8F2dC5dZCK3RQ/eUGcnPVtRB2Fy5W39bCBu6I2rYT/o/9hQbYU/ie
/cJWkpsIzTSuXOji89mO/VB9hcodi7AJtqEuC7u5798lX8HaJbcUFuSwCbZo
mWOP2Ku7uSNq/wU7CtexJ0X8v73ka4U+Ki/KcbbZrxckv5viznJXlwvvCwNS
nNH3DPqU2g7JcVcfFMZqvudy+I3pwgzhsRx3i/1+xHdyoO8wd/V5398jhYUe
M9338GXv4XEpfFBpb9fZF7DHu2IblW8R9tT/N9pfcIY4Sz/qu0OKM8RZqs3h
Zw6XPF4YIrmH2h4QRqn8tsqjfKY522+m8Dn4mnd93p8T3srR90zhDPuhN3Kc
8Vm+I9yVf6ruSuFryZuol7yjcJNws9A6Rx3yLa6vUL/ZQq8i9r+d739lEfPh
yzgznIdrvZ+cQc7irSp3kjxHqFJ5tb6rhG0kNyjCR+ArzhXauA5/gs8p9V1p
38CYhv4//8OX3ml/dI1QXYQt8d0Pp7DpBt+FS1Kc489S+KPjhU/U93ShoeTR
wn8k/6pvW+FyYRf1b6O6LpLnCQNU7oRN/b8albup3F3yvcJwle/1fZ0vjFG5
t8p7SL5DOFjlS1S+OLMg3SPhVYllKXw4vnyz94o9K1P71TniBHHtW+F7fJ5w
oXCR8DOy18h9/kblyV7jR6xJeFv4UvUbhaZFxM1LJV8mfJgiBuD7N+UYQx0y
c2EDbIFPx7eX27+wx9xd5sbH49tL/5iSIibz74us61rhU2HbIuIG+1iWw8dT
h4zvJ4YTy89iDe7LWWPPG1pndG+k+sZFrBlf9pNtcZ5wbo44sy6HD8YXb8AH
2u9xD4gVjDlfmMm+C1tynDHO2ky3dS3inLEH7EWZ7xMxZIvQlf0Vtkd3y7tj
Z9fh03oX4WOxF2eGs8OZJW4MoL/k+4SRauun8v74McmHFiETA/D91NFnhHCg
x3InZ1ufxjnaOIf9c/RhjltTxJR+HkN9W+5RDt2Yg7HoyB2d4/39SdiniDrk
n4WekuemuBNdOPvcgSJiDLFmtxw+EN/Xo4gYQCy4QbjRMrHyetcd7fsK5zrB
c7SRfGWKubt4Tubi38QMdEIXYkkvtVUKnTmrwnXCXOYswj9V+vxg71Lbv4S9
iugDzzw+B6+oF+4X7ssRh6ttK2zZxjbjX3vn8AP884Mc/IyYRPwZmSPmEesG
oa/kfWwT1jHKfWgbLAzF57M2dLLe6JZyxNmetmNHyRU51szasXl3973KPosx
lV4XYwvbjb3YOf8+B/54rvcS/3mHUC40F/rm0BldsT06PpRij9Adn4ZvI8YO
y6E7fq1HjjXcI9ydw+/1yeEP77FclWOPp9jW7D1j8Y1wIOaYKEzg3ArDDfgD
nI+2Wnx8Efesq/vCyw/xGNrw09xB+vQv4s5x1+Z7TGfNdXuKubAJtiEGtrJ9
OlomFlb7vuLzO6g8lrMt+RGhzjGbODMa21hf9DhMdeOK6E99d8ZZpm8319EH
bsQaGVuac4z/Ve+zOcLnBv7yqPCC+r+Ywob1bmN/jmAOYWiO/UEen4NXlOrY
O3Ia+i5OEYOIPU9Yd2wJd2INkyQf5TmYa2qOHIk4C3c5iTOHnyDeujzVbQOF
44RjvU8TLR/jPZvguXul4Dz8Yxy28z+YB44GV4OjT5M8OYdOdV4rNiBPhNNh
m8M9x1Tr8nCOPOkptT+dQu4b4XdrHRwHroMfxFcvyZF3LVLbSyk4FFyKXG6p
8EAOH4FvqDGQ98NXF2FjbA13G10Eh4XLkoOckiMHJZchp3lSeMK6oNMiz4Xv
2cr9uVuSB+eIA/jv9jlyhq25gv95WwoOgi4d3Ic2zi5jB+WIIczBXb9daJbj
zrPWYbbhIuvwovC4dYPzwn3JPV/NwZHgSnBS+OYy2wVeSi672P3IeeHT2I1c
GH4Nb11qWyIzhnlrbZ/X7FOwIbbD1zxje8HR4erv67s8Ba9f6H8xB2OXuI03
Azg/fciJa8I1pldSjIHbk/My1205OGqV48qBRfgMfMUC2whbETOIHXAKuAW5
6+f+1vt8PpuCN8Gl4OBwcXICcgM4H9wPzgn3JIcglyAHJBckN18tfKr6tSk4
HlwPzgR3Wm596UcuX+Z7S59pKXIMxja3zuhKvPs2R749OQWfK+mMruQN5E3k
VuSk5KZwAuIcfrTWwFfCUWgjJyY35h3mkxRvDOiNH+HtAQ4Plyen/zIF54J7
rfG64IhwRTgaXG29dUKXhSn6npqC/zPmK5VPSMEpN/pf2IC1L7ZN2MtJKWzF
GwRvEeSHs3LwupNSvPmQR25xHTJ5IxwELtLEPJQ3kRm25+wcaz0jRb7HmuGY
8EZyXnJfODwXGA4Nb4aXsr/wb3gxHJU6ZLgybyroR47TwGMneQ3Mge3hGgMc
58ipya3JM8k3yf/PS5FzbfIeoBecHm6/wnXI8GfyfXIDOHu56+DW5KArPCdr
Y438iz68BfBGwFjeFHhbWJUiH4PDYTNsBXcnjyQvII/jXQKdqENG19XeS/aU
uQY63sFH4Vlrvc+8I3HmB7kPbfhZ+C7cmJhL/IRHwC0ONm+qct0QcyliKrEV
DgwXZgx1yCPNs+AZ+FD8JPGWWE4MI16Nsd+Gs8Bd4Jfk83DoQx0TiY34VHzr
ONch46vR4c4UOSC6wdnh7nBGuCNzUFfpuckZyBPwQ/Ny5H/kebwj8d6ETO7H
mxJ1vDnx9gRH5j2H2EWODofvbU4Id+aNBa7IWohFcDLWxJy8ZZFjbvYcvA1V
eG50aWqfiE60kUOTO9OHHJ+3H94QyP3J28jLyJHIleZ5HL50X8cv9po9x1bY
GG4Ax6lzDCOWEZOITfBNzgB7T6ytdh/a4KpwfHh3f/tqcFOKPSq1wc1r7Mfh
s+QqxEhiJRy7p/eeWLm/4yycl77IxF44O3W/AYW2bP4=
         "]], Polygon3DBox[CompressedData["
1:eJwt1Hvs0FMYx/Hv+SVqFo1KsWq/UhJ/ZLPZwvzIXDa3xdLmnktDNyEhSoQQ
XZAQXWQI64KSUqK7SyklJNENtYQKub2enfPHe5/P83zP+X6/5znPObU9+nbt
U1NV1UWoj0mpqsbR0WiD5uJf6FDs5LfQrXiHP5XOwQdYiEO8qBEe8ewu8aH8
SfxUfjLao534MPkh/C5swvfoKv8WfQPH4zhxQzTAMxgp19i8J/kR/NH8bvor
psg9T8ejbXxX/HOV/6GBcavpGszH+1iF8/C5cU08H8aP4rfTHzEg5efL6Qp8
jPvRR+4/upauw1f8egzCpeKv6QLMx204J2pDO2AK/1ypaSPxu5iNOThdrj9d
iLriP8RH8W3xiqg3OuM9uRPwKj8x6hnvFDdGa/4pPI1nxQNxAX8ZLscn4rdx
Ct8v5T2chb/F+zGOHxO1V5OV9DOsLeP70ltxNn8GumCRuHfK/zWDzow9jDrh
5Cr7uXQeDuIPREfvfjzqiDvE51e5vovoYmyL+iMZ9w3dgH2e78Wf6Cd+gNYr
PdHOuH30DxzO96e3YDAeM+YAuXoYWvavfvQefz1/E27E7uhx7MJgXFdyQ4rf
Tn+KnsJ9sWa5m9EL/8a6yprG8nvoXpyWch9HP8/E9LKnsddLMAuz8a3cBjyc
8ro30tcxnZ+GY3Gi+Hf8hjtxodwe+jJe5F+o8t5HDzT1LwOjtlEnjJT7iw7H
UZ5tpN/hCL4ZWpSz+Gj0DyZF76AWzeIcp3w39MA15butzGkZa075XmjNN015
TsydgKniszCDfw0do3/FW3EVf2X0FIaJh8e6+BvQM3rF++6R686fWXotzlYb
+VqMSXk9bfmDS8924HfQnRgd9Sw1iFocWZP7+AusK/dW9H+rlM9PnKNX0Em8
OuV7YUDpzTWlBlHzT+lKrML+qCv+Sfn+eIJuKf35IP2SrsfdfDd6MS6J2otv
L3fDYroUy1Jeb9whm+gP2IyHYmypVdSsqslzz2WvKGc67pd7cS1/ddmjbeIR
0avlLMSZ2CFOKQ6Wnq3yHdre+5bTZVW+j+pifJzZlO+Z3uUcz4s+w1h+VOmN
2O86vMm/hGPQQvw/cTrT0w==
         "]]}]}, {}, {}, {}, {}}, {
     {GrayLevel[0], Line3DBox[CompressedData["
1:eJwt0DtOQlEUBdCHoAUUWmAhhcRIoYUWgNjBGHz+OiBG+QiRAfgZAFpqCSWU
2hg0aiGo43K9hGJl312dc8/GWS+8igVBcMCE6F2hzBLHHHFIii4dVrjjllUe
yPBEliE5xmzzwi4FqobUqFPUz+UFDfb0pmzRphTtIE84ZV/P88oOz2wxYpMB
6zyyRp970lxzwzIt2lySnP8/ZJE/fvkhwYwp38T54pMPFnjnbX6/fzHxINU=

       "]]}, {
      Line3DBox[{183, 199, 442, 440, 200, 482, 480, 379, 472, 213, 510, 385, 
       514, 225, 239, 537, 534, 241, 548, 254, 256, 560, 410, 272, 422, 572, 
       284, 302, 584, 308, 428, 593, 329, 344, 350}], 
      Line3DBox[{2, 57, 56, 7, 68, 67, 66, 12, 90, 89, 17, 114, 113, 22, 131, 
       27, 143, 32, 152, 37, 161, 42, 170, 47, 52}], 
      Line3DBox[{187, 435, 434, 182, 203, 455, 453, 371, 446, 216, 390, 505, 
       502, 228, 492, 397, 540, 244, 406, 553, 261, 521, 413, 275, 425, 575, 
       290, 305, 587, 314, 326, 596, 332, 347, 356}], 
      Line3DBox[{3, 70, 69, 8, 93, 92, 91, 13, 95, 94, 18, 116, 115, 23, 134, 
       28, 145, 33, 154, 38, 163, 43, 172, 48, 53}], 
      Line3DBox[{193, 186, 471, 469, 206, 463, 461, 376, 498, 219, 512, 391, 
       476, 232, 401, 509, 506, 247, 549, 408, 264, 563, 416, 278, 287, 557, 
       293, 311, 569, 317, 431, 581, 335, 353, 359}], 
      Line3DBox[{4, 75, 74, 9, 98, 97, 96, 14, 103, 102, 19, 120, 119, 24, 
       135, 29, 146, 34, 155, 39, 164, 44, 173, 49, 54}], 
      Line3DBox[{196, 459, 458, 209, 190, 489, 487, 382, 494, 210, 519, 393, 
       524, 222, 538, 402, 544, 236, 552, 409, 251, 566, 419, 269, 296, 578, 
       281, 320, 590, 299, 338, 599, 323, 362, 341}], 
      Line3DBox[{343, 364, 325, 601, 340, 301, 592, 322, 283, 580, 298, 271, 
       421, 568, 253, 556, 268, 238, 546, 547, 250, 224, 526, 527, 235, 212, 
       496, 497, 384, 491, 192, 467, 468, 375, 198}], 
      Line3DBox[{352, 346, 331, 595, 430, 310, 586, 304, 286, 574, 424, 274, 
       412, 562, 258, 551, 405, 243, 536, 396, 531, 227, 516, 517, 387, 215, 
       474, 475, 381, 484, 202, 369, 450, 452, 185}], 
      Line3DBox[{358, 349, 334, 598, 328, 316, 589, 307, 292, 577, 427, 277, 
       415, 523, 263, 255, 518, 246, 542, 543, 240, 230, 504, 389, 486, 218, 
       448, 449, 373, 457, 205, 444, 445, 366, 189}], 
      Line3DBox[{361, 355, 337, 583, 433, 319, 571, 313, 295, 559, 289, 280, 
       418, 565, 266, 529, 260, 249, 508, 400, 533, 234, 478, 479, 231, 221, 
       500, 501, 378, 465, 208, 367, 437, 439, 195}], 
      Line3DBox[{184, 451, 370, 441, 201, 483, 481, 380, 473, 214, 511, 386, 
       515, 226, 530, 395, 535, 242, 404, 550, 257, 561, 411, 273, 423, 573, 
       285, 303, 585, 309, 429, 594, 330, 345, 351}], 
      Line3DBox[{188, 436, 365, 443, 204, 456, 454, 372, 447, 217, 485, 388, 
       503, 229, 493, 398, 541, 245, 407, 554, 262, 522, 414, 276, 426, 576, 
       291, 306, 588, 315, 327, 597, 333, 348, 357}], 
      Line3DBox[{194, 438, 368, 470, 207, 464, 462, 377, 499, 220, 513, 392, 
       477, 233, 532, 399, 507, 248, 259, 528, 265, 564, 417, 279, 288, 558, 
       294, 312, 570, 318, 432, 582, 336, 354, 360}], 
      Line3DBox[{197, 460, 374, 466, 191, 490, 488, 383, 495, 211, 520, 394, 
       525, 223, 539, 403, 545, 237, 267, 555, 252, 567, 420, 270, 297, 579, 
       282, 321, 591, 300, 339, 600, 324, 363, 342}]}, {
      Line3DBox[{62, 440, 441, 64, 450, 56, 434, 58, 443, 444, 69, 469, 470, 
       60, 437, 74, 458, 76, 466, 467, 81}], 
      Line3DBox[{82, 468, 77, 460, 459, 75, 439, 438, 61, 471, 70, 445, 59, 
       436, 435, 57, 452, 451, 65, 442, 63}], 
      Line3DBox[{83, 86, 472, 473, 474, 66, 71, 446, 447, 448, 91, 78, 498, 
       499, 500, 96, 99, 494, 495, 496, 104}], 
      Line3DBox[{106, 101, 491, 490, 489, 98, 80, 465, 464, 463, 93, 73, 457, 
       456, 455, 68, 88, 484, 483, 482, 85}], 
      Line3DBox[{107, 109, 514, 515, 516, 89, 502, 503, 504, 111, 94, 117, 
       476, 477, 478, 102, 121, 524, 525, 526, 123}], 
      Line3DBox[{124, 527, 122, 520, 519, 103, 479, 118, 513, 512, 95, 486, 
       485, 112, 505, 90, 517, 110, 511, 510, 108}], 
      Line3DBox[{125, 534, 535, 536, 127, 113, 129, 540, 541, 542, 115, 506, 
       507, 508, 132, 119, 136, 544, 545, 546, 138}], 
      Line3DBox[{139, 547, 137, 539, 538, 120, 533, 532, 133, 509, 116, 543, 
       130, 493, 492, 114, 531, 530, 128, 537, 126}], 
      Line3DBox[{140, 548, 141, 550, 551, 131, 553, 554, 142, 518, 134, 549, 
       144, 528, 529, 135, 552, 147, 555, 556, 148}], 
      Line3DBox[{31, 272, 273, 274, 32, 275, 276, 277, 33, 278, 279, 280, 34, 
       269, 270, 271, 35}], 
      Line3DBox[{149, 150, 560, 561, 562, 143, 521, 522, 523, 151, 145, 563, 
       564, 565, 153, 146, 566, 567, 568, 156, 157}], 
      Line3DBox[{158, 159, 572, 573, 574, 152, 575, 576, 577, 160, 154, 162, 
       557, 558, 559, 155, 165, 578, 579, 580, 166}], 
      Line3DBox[{167, 584, 585, 586, 168, 161, 169, 587, 588, 589, 163, 171, 
       569, 570, 571, 164, 174, 590, 591, 592, 175}], 
      Line3DBox[{176, 177, 593, 594, 595, 170, 178, 596, 597, 598, 172, 581, 
       582, 583, 179, 173, 180, 599, 600, 601, 181}], 
      Line3DBox[{84, 480, 481, 87, 475, 67, 453, 454, 72, 449, 92, 461, 462, 
       79, 501, 97, 487, 488, 100, 497, 105}]}, {}, {}}},
   VertexNormals->CompressedData["
1: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
CcnfTko5FIiWo5qs3ONNuoUwee0MTbVULjj9JrgbdIdQXu+ESJTqLITXNMzb
Kk/B857MOPuGPDj10XS7gc8Y7F/vH1ZunIe/ssEWh162oapCsHZ1aC0cWLmx
sqbeDWZVP/uFdk+jEKfMdz6NQXjetsBs7UtgdZev3vZnCWjqxTCrlloOjWqz
jZFvSF4dxh/wYkseSnm+21CTKgPHWh8FlUcEFrAe2DxiXIoDKVSqWxpK/u//
Znv/04PR/+nB1Kc8hjtXw+Gz6nG7Bbcp3Glb9LzAaQz6rys79YpEQEnLiZ5f
jtPo+ZJj/emVUUjisrBQnyQg3UBA8eh2XdDsP8be2ZkJCr9EvOe6CNjFsfmy
cVU8/k2fF5wpy/4/HffzPx2n+5+O86N7L84qOQxcjU/cTt+YQJy02/Xv9ADw
/2irovnQgDdCMhgGNs1g79Ndf76IDsOp/3Qcz386rvQ/HWeZbmnuqE6goGvg
k+TCaqQJij78YiUTrJtl0nRDCFzgD1TexVGCaVsc2HWqc4F5l3QmHRJovW/n
fsfMNISdp1/7vy4ARxMd4fDjX9D89+I9udE5THLQ3GOm9R2WuzMN9IMykG2b
w9dcj2m8rnOzN5xvFNx09ELYrfLQlk+moGT7OKpZRy77jk/Car7GScmLfRhT
dtKFI6AXAxtenGd7Ng1vbq1Wr3ZPIlc4u6mxewt6lL8KS7EYhUQf09AbIhTU
iJ2+u38uG5+AanCjTTvsiDNdPrZKoNzqJQaa2gj0PiVeXegVBmPtg880fxFY
+gnN/3hEY7PXU8U4hUiYyE0N4fxB4EvnYd/c67F44Szj3by6aIgqUaPn+jCE
j/pTBNRaJ3BDddbMWXoAlLz3ppnQz+DE36B9hW8HsP3TsRzNGx3wpFXcmOM2
gdRtTvS0weU4c/pIvNl6CdhHqV/J2dmJd5giM3PXxpC/l/5dq/04eM2wWD/4
PoFvBY8ePPNrCLddqKdKlOwHO/4N671nKLilR4mNeagVk2Lo8p5iGXQ5bypX
+k2gdEFgTSCfI8gF0g18fxMFsReHWogZMp8nJUWctsVjmJ6oZ29TAngPFmZT
FxNYd3qR58+1Arwi+MDH/FU60F6ib00rJdD7YHXs2wIl0P7bm/jYCcE4j2t5
Mxlf7kiZOofIdFi/wFBSN/MVaP0q3vP4EZiToMHGY1sKNgxp9ruP5UDIjY2R
rD//ew95LkXF2BXLHvNUJtYEQ92QLgfNBoFaDznpXUTsMOmdU+IJbX/4mlSw
bZnEe9xF55Z5TPAnx/GOsYkPYLdYbpL4hUDK68E7jQWIrjnLO1q9MsH8fdBc
rfcsnqgQeNOm9x3VFA+bL9u0wC7h1etcOiMYmQLbHjBNYOyr1UhT1T5QO037
690Ugcd1KjtX98RDyg3z+bXnyTCwfrHMdYzAMdWtmlvD0iDm+sIVM5d4GG8I
5lrpJzClQeaORUIWNEgd+5XhEwP/DzC3KVg=
    "]],
  AutomaticImageSize->True,
  Axes->True,
  BoxRatios->{1, 1, 0.4},
  ImageSize->{417.4022356904336, 260.8034974860447},
  Method->{"RotationControl" -> "Globe"},
  PlotRange->{{0.05, 0.1}, {0.5, 2.5}, {-0.9994707428158375, 
   0.9989166901688163}},
  PlotRangePadding->{
    Scaled[0.02], 
    Scaled[0.02], 
    Scaled[0.02]},
  ViewPoint->{1.6776759517171262`, -2.6475972537631725`, 1.2750028168187357`},
  ViewVertical->{0., 0., 1.}]], "Output",
 CellChangeTimes->{{3.529077866694129*^9, 3.529077934417098*^9}, 
   3.5290779915678844`*^9, 3.5290780557459598`*^9, {3.529078113261735*^9, 
   3.529078130208727*^9}}]
}, Open  ]],

Cell["Create the data.", "Text",
 CellChangeTimes->{{3.524674874485649*^9, 3.52467488115703*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell["\<\
(#14) Reading an XML data file (15 min)\
\>", "Subsection",
 CellChangeTimes->{{3.524673157342434*^9, 3.5246731651808825`*^9}, {
  3.5246744810871477`*^9, 3.524674508838735*^9}, {3.524682941385049*^9, 
  3.524682942907136*^9}}],

Cell["\<\
The file temperature.xml has temperature readings for an approximate 3 day \
period in early September 2011 as measured by the BYU weather station.  Plot \
the temperature at five minute intervals for this time period.  (HINT:  make \
sure you turn the readings into numbers before trying to plot them.  The \
AbsoluteTime function may help you with the date and time data.)\
\>", "Text",
 CellChangeTimes->{{3.52467909957231*^9, 3.524679173156519*^9}, {
  3.524680236067314*^9, 3.5246802483540163`*^9}, {3.5248226379672146`*^9, 
  3.5248226542072372`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"tempData14", "=", " ", 
   RowBox[{"Import", "[", "\"\<temperature.xml\>\"", "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"dates", " ", "=", " ", 
   RowBox[{"Cases", "[", 
    RowBox[{"xml", ",", " ", 
     RowBox[{
      RowBox[{"XMLElement", "[", 
       RowBox[{"\"\<date\>\"", ",", 
        RowBox[{"{", "}"}], ",", 
        RowBox[{"{", "date_", "}"}]}], "]"}], "\[RuleDelayed]", "date"}], ",",
      " ", "Infinity"}], "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"times", " ", "=", " ", 
   RowBox[{"Cases", "[", 
    RowBox[{"xml", ",", " ", 
     RowBox[{
      RowBox[{"XMLElement", "[", 
       RowBox[{"\"\<time\>\"", ",", 
        RowBox[{"{", "}"}], ",", 
        RowBox[{"{", "time_", "}"}]}], "]"}], "\[RuleDelayed]", "time"}], ",",
      " ", "Infinity"}], "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"temps", " ", "=", 
   RowBox[{"Cases", "[", 
    RowBox[{"xml", ",", " ", 
     RowBox[{
      RowBox[{"XMLElement", "[", 
       RowBox[{"\"\<temp\>\"", ",", 
        RowBox[{"{", 
         RowBox[{"\"\<units\>\"", "\[Rule]", "\"\<F\>\""}], "}"}], ",", 
        RowBox[{"{", "temp_", "}"}]}], "]"}], "\[RuleDelayed]", "temp"}], ",",
      " ", "Infinity"}], "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{"plotTemps", " ", "=", " ", 
  RowBox[{
   RowBox[{
    RowBox[{"temps", "[", 
     RowBox[{"[", "#", "]"}], "]"}], "&"}], "/@", 
   RowBox[{"Range", "[", 
    RowBox[{"1", ",", 
     RowBox[{"Length", "[", "temps", "]"}], ",", "5"}], "]"}]}]}]}], "Input",
 CellChangeTimes->{{3.529077093544732*^9, 3.529077130842868*^9}, {
  3.529077187707529*^9, 3.5290772434647417`*^9}, {3.5291524500642776`*^9, 
  3.5291526740775566`*^9}}],

Cell[BoxData[
 InterpretationBox[
  TagBox[
   PanelBox[GridBox[{
      {
       StyleBox[
        StyleBox[
         DynamicBox[ToBoxes[
           FEPrivate`FrontEndResource["FEStrings", "sizeExplanation"], 
           StandardForm],
          ImageSizeCache->{299., {3., 9.}}],
         StripOnInput->False,
         DynamicUpdating->True], "Panel",
        StripOnInput->False,
        Background->None]},
      {
       ItemBox[
        TagBox[
         RowBox[{
          RowBox[{"XMLObject", "[", "\<\"Document\"\>", "]"}], "[", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{
             RowBox[{"XMLObject", "[", "\<\"Declaration\"\>", "]"}], "[", 
             RowBox[{"\<\"Version\"\>", "\[Rule]", "\<\"1.0\"\>"}], "]"}], 
            "}"}], ",", 
           RowBox[{"XMLElement", "[", 
            RowBox[{"\<\"measurement\"\>", ",", 
             RowBox[{"{", "}"}], ",", 
             RowBox[{"{", 
              RowBox[{
               RowBox[{"XMLElement", "[", 
                RowBox[{"\<\"reading\"\>", ",", 
                 RowBox[{"{", "}"}], ",", 
                 RowBox[{"{", 
                  RowBox[{
                   RowBox[{"XMLElement", "[", 
                    RowBox[{"\<\"date\"\>", ",", 
                    RowBox[{"{", "}"}], ",", 
                    RowBox[{"{", "\<\"7-Sep-2011\"\>", "}"}]}], "]"}], ",", 
                   RowBox[{"XMLElement", "[", 
                    RowBox[{"\<\"time\"\>", ",", 
                    RowBox[{"{", "}"}], ",", 
                    RowBox[{"{", "\<\"00:00:22\"\>", "}"}]}], "]"}], ",", 
                   RowBox[{"XMLElement", "[", 
                    RowBox[{"\<\"temp\"\>", ",", 
                    RowBox[{"{", 
                    RowBox[{"\<\"units\"\>", "\[Rule]", "\<\"F\"\>"}], "}"}], 
                    ",", 
                    RowBox[{"{", "\<\"61.8494\"\>", "}"}]}], "]"}]}], "}"}]}],
                 "]"}], ",", 
               RowBox[{"XMLElement", "[", 
                RowBox[{"\<\"reading\"\>", ",", 
                 RowBox[{"{", "}"}], ",", 
                 RowBox[{"{", 
                  RowBox[{
                   RowBox[{"XMLElement", "[", 
                    RowBox[{"\<\"date\"\>", ",", 
                    RowBox[{"{", "}"}], ",", 
                    RowBox[{"{", "\<\"7-Sep-2011\"\>", "}"}]}], "]"}], ",", 
                   RowBox[{"XMLElement", "[", 
                    RowBox[{"\<\"time\"\>", ",", 
                    RowBox[{"{", "}"}], ",", 
                    RowBox[{"{", "\<\"00:01:22\"\>", "}"}]}], "]"}], ",", 
                   RowBox[{"XMLElement", "[", 
                    RowBox[{"\<\"temp\"\>", ",", 
                    RowBox[{"{", 
                    RowBox[{"\<\"units\"\>", "\[Rule]", "\<\"F\"\>"}], "}"}], 
                    ",", 
                    RowBox[{"{", "\<\"61.9288\"\>", "}"}]}], "]"}]}], "}"}]}],
                 "]"}], ",", 
               RowBox[{"XMLElement", "[", 
                RowBox[{"\<\"reading\"\>", ",", 
                 RowBox[{"{", "}"}], ",", 
                 RowBox[{"{", 
                  RowBox[{
                   RowBox[{"XMLElement", "[", 
                    RowBox[{"\<\"date\"\>", ",", 
                    RowBox[{"{", "}"}], ",", 
                    RowBox[{"{", "\<\"7-Sep-2011\"\>", "}"}]}], "]"}], ",", 
                   RowBox[{"XMLElement", "[", 
                    RowBox[{"\<\"time\"\>", ",", 
                    RowBox[{"{", "}"}], ",", 
                    RowBox[{"{", "\<\"00:02:22\"\>", "}"}]}], "]"}], ",", 
                   RowBox[{"XMLElement", "[", 
                    RowBox[{"\<\"temp\"\>", ",", 
                    RowBox[{"{", 
                    RowBox[{"\<\"units\"\>", "\[Rule]", "\<\"F\"\>"}], "}"}], 
                    ",", 
                    RowBox[{"{", "\<\"61.9569\"\>", "}"}]}], "]"}]}], "}"}]}],
                 "]"}], ",", 
               RowBox[{"XMLElement", "[", 
                RowBox[{"\<\"reading\"\>", ",", 
                 RowBox[{"{", "}"}], ",", 
                 RowBox[{"{", 
                  RowBox[{
                   RowBox[{"XMLElement", "[", 
                    RowBox[{"\<\"date\"\>", ",", 
                    RowBox[{"{", "}"}], ",", 
                    RowBox[{"{", "\<\"7-Sep-2011\"\>", "}"}]}], "]"}], ",", 
                   RowBox[{"XMLElement", "[", 
                    RowBox[{"\<\"time\"\>", ",", 
                    RowBox[{"{", "}"}], ",", 
                    RowBox[{"{", "\<\"00:03:22\"\>", "}"}]}], "]"}], ",", 
                   RowBox[{"XMLElement", "[", 
                    RowBox[{"\<\"temp\"\>", ",", 
                    RowBox[{"{", 
                    RowBox[{"\<\"units\"\>", "\[Rule]", "\<\"F\"\>"}], "}"}], 
                    ",", 
                    RowBox[{"{", "\<\"61.9148\"\>", "}"}]}], "]"}]}], "}"}]}],
                 "]"}], ",", 
               RowBox[{"\[LeftSkeleton]", "4252", "\[RightSkeleton]"}], ",", 
               RowBox[{"XMLElement", "[", 
                RowBox[{"\<\"reading\"\>", ",", 
                 RowBox[{"{", "}"}], ",", 
                 RowBox[{"{", 
                  RowBox[{
                   RowBox[{"XMLElement", "[", 
                    RowBox[{"\<\"date\"\>", ",", 
                    RowBox[{"{", "}"}], ",", 
                    RowBox[{"{", "\<\"9-Sep-2011\"\>", "}"}]}], "]"}], ",", 
                   RowBox[{"XMLElement", "[", 
                    RowBox[{"\<\"time\"\>", ",", 
                    RowBox[{"{", "}"}], ",", 
                    RowBox[{"{", "\<\"23:56:22\"\>", "}"}]}], "]"}], ",", 
                   RowBox[{"XMLElement", "[", 
                    RowBox[{"\<\"temp\"\>", ",", 
                    RowBox[{"{", 
                    RowBox[{"\<\"units\"\>", "\[Rule]", "\<\"F\"\>"}], "}"}], 
                    ",", 
                    RowBox[{"{", "\<\"58.7616\"\>", "}"}]}], "]"}]}], "}"}]}],
                 "]"}], ",", 
               RowBox[{"XMLElement", "[", 
                RowBox[{"\<\"reading\"\>", ",", 
                 RowBox[{"{", "}"}], ",", 
                 RowBox[{"{", 
                  RowBox[{
                   RowBox[{"XMLElement", "[", 
                    RowBox[{"\<\"date\"\>", ",", 
                    RowBox[{"{", "}"}], ",", 
                    RowBox[{"{", "\<\"9-Sep-2011\"\>", "}"}]}], "]"}], ",", 
                   RowBox[{"XMLElement", "[", 
                    RowBox[{"\<\"time\"\>", ",", 
                    RowBox[{"{", "}"}], ",", 
                    RowBox[{"{", "\<\"23:57:22\"\>", "}"}]}], "]"}], ",", 
                   RowBox[{"XMLElement", "[", 
                    RowBox[{"\<\"temp\"\>", ",", 
                    RowBox[{"{", 
                    RowBox[{"\<\"units\"\>", "\[Rule]", "\<\"F\"\>"}], "}"}], 
                    ",", 
                    RowBox[{"{", "\<\"58.6962\"\>", "}"}]}], "]"}]}], "}"}]}],
                 "]"}], ",", 
               RowBox[{"XMLElement", "[", 
                RowBox[{"\<\"reading\"\>", ",", 
                 RowBox[{"{", "}"}], ",", 
                 RowBox[{"{", 
                  RowBox[{
                   RowBox[{"XMLElement", "[", 
                    RowBox[{"\<\"date\"\>", ",", 
                    RowBox[{"{", "}"}], ",", 
                    RowBox[{"{", "\<\"9-Sep-2011\"\>", "}"}]}], "]"}], ",", 
                   RowBox[{"XMLElement", "[", 
                    RowBox[{"\<\"time\"\>", ",", 
                    RowBox[{"{", "}"}], ",", 
                    RowBox[{"{", "\<\"23:58:22\"\>", "}"}]}], "]"}], ",", 
                   RowBox[{"XMLElement", "[", 
                    RowBox[{"\<\"temp\"\>", ",", 
                    RowBox[{"{", 
                    RowBox[{"\<\"units\"\>", "\[Rule]", "\<\"F\"\>"}], "}"}], 
                    ",", 
                    RowBox[{"{", "\<\"58.6121\"\>", "}"}]}], "]"}]}], "}"}]}],
                 "]"}], ",", 
               RowBox[{"XMLElement", "[", 
                RowBox[{"\<\"reading\"\>", ",", 
                 RowBox[{"{", "}"}], ",", 
                 RowBox[{"{", 
                  RowBox[{
                   RowBox[{"XMLElement", "[", 
                    RowBox[{"\<\"date\"\>", ",", 
                    RowBox[{"{", "}"}], ",", 
                    RowBox[{"{", "\<\"9-Sep-2011\"\>", "}"}]}], "]"}], ",", 
                   RowBox[{"XMLElement", "[", 
                    RowBox[{"\<\"time\"\>", ",", 
                    RowBox[{"{", "}"}], ",", 
                    RowBox[{"{", "\<\"23:59:22\"\>", "}"}]}], "]"}], ",", 
                   RowBox[{"XMLElement", "[", 
                    RowBox[{"\<\"temp\"\>", ",", 
                    RowBox[{"{", 
                    RowBox[{"\<\"units\"\>", "\[Rule]", "\<\"F\"\>"}], "}"}], 
                    ",", 
                    RowBox[{"{", "\<\"58.5888\"\>", "}"}]}], "]"}]}], "}"}]}],
                 "]"}]}], "}"}]}], "]"}], ",", 
           RowBox[{"{", "}"}]}], "]"}],
         Short[#, 20]& ],
        Background->GrayLevel[1],
        BaseStyle->{Deployed -> False},
        Frame->True,
        FrameStyle->GrayLevel[0, 0.2],
        StripOnInput->False]},
      {
       RowBox[{
        ButtonBox[
         StyleBox[
          StyleBox[
           DynamicBox[ToBoxes[
             FEPrivate`FrontEndResource["FEStrings", "sizeShowLess"], 
             StandardForm],
            ImageSizeCache->{54., {1., 9.}}],
           StripOnInput->False,
           DynamicUpdating->True], "Panel",
          StripOnInput->False,
          Background->None],
         Appearance->Automatic,
         ButtonFunction:>OutputSizeLimit`ButtonFunction[
          Identity, 60, 23128014116177453773, 20/2],
         Enabled->True,
         Evaluator->Automatic,
         Method->"Queued"], "\[ThinSpace]", 
        ButtonBox[
         StyleBox[
          StyleBox[
           DynamicBox[ToBoxes[
             FEPrivate`FrontEndResource["FEStrings", "sizeShowMore"], 
             StandardForm],
            ImageSizeCache->{60., {1., 9.}}],
           StripOnInput->False,
           DynamicUpdating->True], "Panel",
          StripOnInput->False,
          Background->None],
         Appearance->Automatic,
         ButtonFunction:>OutputSizeLimit`ButtonFunction[
          Identity, 60, 23128014116177453773, 20 2],
         Enabled->True,
         Evaluator->Automatic,
         Method->"Queued"], "\[ThinSpace]", 
        ButtonBox[
         StyleBox[
          StyleBox[
           DynamicBox[ToBoxes[
             FEPrivate`FrontEndResource["FEStrings", "sizeShowAll"], 
             StandardForm],
            ImageSizeCache->{92., {3., 9.}}],
           StripOnInput->False,
           DynamicUpdating->True], "Panel",
          StripOnInput->False,
          Background->None],
         Appearance->Automatic,
         ButtonFunction:>OutputSizeLimit`ButtonFunction[
          Identity, 60, 23128014116177453773, Infinity],
         Enabled->True,
         Evaluator->Automatic,
         Method->"Queued"], "\[ThinSpace]", 
        ButtonBox[
         StyleBox[
          StyleBox[
           DynamicBox[ToBoxes[
             FEPrivate`FrontEndResource["FEStrings", "sizeChangeLimit"], 
             StandardForm],
            ImageSizeCache->{78., {1., 9.}}],
           StripOnInput->False,
           DynamicUpdating->True], "Panel",
          StripOnInput->False,
          Background->None],
         Appearance->Automatic,
         ButtonFunction:>FrontEndExecute[{
            FrontEnd`SetOptions[
            FrontEnd`$FrontEnd, 
             FrontEnd`PreferencesSettings -> {"Page" -> "Evaluation"}], 
            FrontEnd`FrontEndToken["PreferencesDialog"]}],
         Evaluator->None,
         Method->"Preemptive"]}]}
     },
     GridBoxAlignment->{
      "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
       "RowsIndexed" -> {}},
     GridBoxDividers->{
      "Columns" -> {{False}}, "ColumnsIndexed" -> {}, "Rows" -> {{False}}, 
       "RowsIndexed" -> {}},
     GridBoxItemSize->{
      "Columns" -> {{Automatic}}, "ColumnsIndexed" -> {}, "Rows" -> {{1.}}, 
       "RowsIndexed" -> {}},
     GridBoxSpacings->{"Columns" -> {
         Offset[0.27999999999999997`], {
          Offset[0.5599999999999999]}, 
         Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
         Offset[0.2], {
          Offset[1.2]}, 
         Offset[0.2]}, "RowsIndexed" -> {}}],
    DefaultBaseStyle->{},
    FrameMargins->5],
   Deploy,
   DefaultBaseStyle->{Deployed -> True}],
  Out[60]]], "Output",
 CellChangeTimes->{3.5290772445046897`*^9}]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["\<\
(#15) Saving an animation as five  a movie  (15 min)\
\>", "Subsection",
 CellChangeTimes->{{3.5246731705561895`*^9, 3.52467317825163*^9}, {
   3.524674447752241*^9, 3.5246744488923063`*^9}, {3.5246744873785076`*^9, 
   3.524674488906595*^9}, {3.524679095613084*^9, 3.524679097040165*^9}, {
   3.5246791600947714`*^9, 3.524679160641803*^9}, 3.524680413520464*^9, {
   3.524682949499513*^9, 3.524682951068603*^9}}],

Cell[TextData[{
 "Create a graphical animation of a mass in damped harmonic motion (",
 Cell[BoxData[
  FormBox[
   RowBox[{"y", "=", 
    RowBox[{
     RowBox[{"exp", "(", 
      RowBox[{
       RowBox[{"-", "\[Alpha]"}], " ", "t"}], ")"}], " ", 
     RowBox[{"cos", "(", 
      RowBox[{"t", " ", "\[Omega]"}], ")"}]}]}], TraditionalForm]]],
 ").  (No need to draw the spring.) Export it to a file in .avi format that \
can be embedded in a PowerPoint presentation.  Make sure each frame is drawn \
using the same scale."
}], "Text",
 CellChangeTimes->{{3.5246736101603336`*^9, 3.5246736417661414`*^9}, {
  3.5246740851165*^9, 3.524674222857378*^9}, {3.52468044056301*^9, 
  3.524680467993579*^9}, {3.5246805193575172`*^9, 3.524680526650934*^9}, {
  3.524680564291087*^9, 3.5246805756387362`*^9}, {3.524680864373251*^9, 
  3.5246808651022925`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Animate", "[", 
  RowBox[{
   RowBox[{"Plot", "[", 
    RowBox[{
     RowBox[{
      RowBox[{"Exp", "[", 
       RowBox[{
        RowBox[{"-", "2"}], "*", "t"}], "]"}], "*", 
      RowBox[{"Cos", "[", 
       RowBox[{"t", "*", "\[Omega]"}], "]"}]}], ",", 
     RowBox[{"{", 
      RowBox[{"\[Omega]", ",", 
       RowBox[{
        RowBox[{"-", "2"}], "\[Pi]"}], ",", 
       RowBox[{"2", "\[Pi]"}]}], "}"}]}], "]"}], ",", 
   RowBox[{"{", 
    RowBox[{"t", ",", "0", ",", "10"}], "}"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.5290782123688383`*^9, 3.5290782863541217`*^9}}],

Cell[BoxData[
 TagBox[
  StyleBox[
   DynamicModuleBox[{$CellContext`t$$ = 0.8393735885620117, Typeset`show$$ = 
    True, Typeset`bookmarkList$$ = {}, Typeset`bookmarkMode$$ = "Menu", 
    Typeset`animator$$, Typeset`animvar$$ = 1, Typeset`name$$ = 
    "\"untitled\"", Typeset`specs$$ = {{
      Hold[$CellContext`t$$], 0, 10}}, Typeset`size$$ = {360., {109., 114.}}, 
    Typeset`update$$ = 0, Typeset`initDone$$, Typeset`skipInitDone$$ = 
    True, $CellContext`t$8640$$ = 0}, 
    DynamicBox[Manipulate`ManipulateBoxes[
     1, StandardForm, "Variables" :> {$CellContext`t$$ = 0}, 
      "ControllerVariables" :> {
        Hold[$CellContext`t$$, $CellContext`t$8640$$, 0]}, 
      "OtherVariables" :> {
       Typeset`show$$, Typeset`bookmarkList$$, Typeset`bookmarkMode$$, 
        Typeset`animator$$, Typeset`animvar$$, Typeset`name$$, 
        Typeset`specs$$, Typeset`size$$, Typeset`update$$, Typeset`initDone$$,
         Typeset`skipInitDone$$}, "Body" :> 
      Plot[Exp[(-2) $CellContext`t$$] 
        Cos[$CellContext`t$$ $CellContext`\[Omega]], {$CellContext`\[Omega], \
(-2) Pi, 2 Pi}], 
      "Specifications" :> {{$CellContext`t$$, 0, 10, 
         AppearanceElements -> {
          "ProgressSlider", "PlayPauseButton", "FasterSlowerButtons", 
           "DirectionButton"}}}, 
      "Options" :> {
       ControlType -> Animator, AppearanceElements -> None, DefaultBaseStyle -> 
        "Animate", DefaultLabelStyle -> "AnimateLabel", SynchronousUpdating -> 
        True, ShrinkingDelay -> 10.}, "DefaultOptions" :> {}],
     ImageSizeCache->{409., {147., 152.}},
     SingleEvaluation->True],
    Deinitialization:>None,
    DynamicModuleValues:>{},
    SynchronousInitialization->True,
    UnsavedVariables:>{Typeset`initDone$$},
    UntrackedVariables:>{Typeset`size$$}], "Animate",
   Deployed->True,
   StripOnInput->False],
  Manipulate`InterpretManipulate[1]]], "Output",
 CellChangeTimes->{3.5290782869941025`*^9}]
}, Open  ]]
}, Open  ]]
}, Open  ]]
}, Open  ]]
},
AutoGeneratedPackage->None,
WindowSize->{784, 1122},
WindowMargins->{{0, Automatic}, {0, Automatic}},
ShowSelection->True,
TaggingRules->{"DisplayFunction" -> True},
FrontEndVersion->"8.0 for Microsoft Windows (32-bit) (February 23, 2011)",
StyleDefinitions->FrontEnd`FileName[{"Creative"}, "PastelColor.nb", 
  CharacterEncoding -> "WindowsANSI"]
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{}
*)
(*CellTagsIndex
CellTagsIndex->{}
*)
(*NotebookFileOutline
Notebook[{
Cell[CellGroupData[{
Cell[567, 22, 1059, 16, 65, "Title"],
Cell[1629, 40, 410, 8, 57, "Subtitle"],
Cell[2042, 50, 4089, 58, 65, "Text"],
Cell[CellGroupData[{
Cell[6156, 112, 648, 9, 75, "Section"],
Cell[CellGroupData[{
Cell[6829, 125, 143, 2, 36, "Subsection"],
Cell[6975, 129, 774, 17, 29, "Text"],
Cell[7752, 148, 523, 7, 41, "Input"],
Cell[8278, 157, 630, 12, 65, "Text"],
Cell[8911, 171, 749, 12, 82, "Input"],
Cell[9663, 185, 654, 14, 65, "Text"],
Cell[10320, 201, 692, 15, 142, "Input"],
Cell[11015, 218, 805, 18, 83, "Text"],
Cell[11823, 238, 443, 11, 41, "Input"]
}, Closed]],
Cell[CellGroupData[{
Cell[12303, 254, 187, 2, 28, "Subsection"],
Cell[12493, 258, 1278, 27, 29, "Text"],
Cell[13774, 287, 1932, 42, 65, "Text"],
Cell[15709, 331, 673, 13, 62, "Input"],
Cell[16385, 346, 1780, 31, 137, "Text"],
Cell[18168, 379, 1184, 24, 242, "Input"],
Cell[19355, 405, 2100, 36, 137, "Text"],
Cell[21458, 443, 453, 8, 62, "Input"]
}, Closed]],
Cell[CellGroupData[{
Cell[21948, 456, 147, 2, 28, "Subsection"],
Cell[22098, 460, 400, 7, 29, "Text"],
Cell[22501, 469, 434, 9, 41, "Input"],
Cell[22938, 480, 150, 3, 29, "Text"],
Cell[23091, 485, 332, 5, 41, "Input"],
Cell[23426, 492, 415, 8, 47, "Text"],
Cell[23844, 502, 296, 5, 41, "Input"],
Cell[24143, 509, 357, 8, 47, "Text"],
Cell[24503, 519, 369, 7, 41, "Input"]
}, Closed]]
}, Closed]],
Cell[CellGroupData[{
Cell[24921, 532, 995, 15, 45, "Section"],
Cell[CellGroupData[{
Cell[25941, 551, 722, 13, 36, "Subsection"],
Cell[26666, 566, 822, 20, 29, "Text"],
Cell[27491, 588, 882, 21, 31, "Text"],
Cell[28376, 611, 401, 8, 62, "Input"],
Cell[28780, 621, 657, 15, 65, "Text"],
Cell[29440, 638, 145, 2, 41, "Input"],
Cell[29588, 642, 273, 7, 47, "Text"],
Cell[29864, 651, 313, 5, 62, "Input"]
}, Closed]],
Cell[CellGroupData[{
Cell[30214, 661, 624, 8, 28, "Subsection"],
Cell[30841, 671, 980, 19, 83, "Text"],
Cell[31824, 692, 1057, 25, 62, "Input"],
Cell[32884, 719, 2170, 50, 191, "Text"],
Cell[35057, 771, 393, 6, 41, "Input"],
Cell[35453, 779, 467, 7, 41, "Input"],
Cell[35923, 788, 890, 16, 65, "Text"],
Cell[36816, 806, 1147, 25, 62, "Input"],
Cell[37966, 833, 855, 14, 65, "Text"],
Cell[38824, 849, 1889, 44, 142, "Input"],
Cell[40716, 895, 513, 10, 47, "Text"],
Cell[41232, 907, 94, 1, 41, "Input"]
}, Closed]],
Cell[CellGroupData[{
Cell[41363, 913, 516, 7, 28, "Subsection"],
Cell[41882, 922, 3018, 70, 157, "Text"],
Cell[44903, 994, 440, 9, 41, "Input"],
Cell[45346, 1005, 1120, 27, 65, "Text"],
Cell[46469, 1034, 415, 6, 41, "Input"],
Cell[46887, 1042, 3182, 83, 173, "Text"],
Cell[50072, 1127, 2288, 46, 122, "Input"],
Cell[52363, 1175, 1099, 33, 67, "Text"],
Cell[53465, 1210, 1382, 19, 41, "Input"],
Cell[54850, 1231, 979, 31, 77, "Text"],
Cell[55832, 1264, 1408, 19, 41, "Input"],
Cell[57243, 1285, 1522, 30, 119, "Text"],
Cell[58768, 1317, 2151, 38, 62, "Input"]
}, Closed]],
Cell[CellGroupData[{
Cell[60956, 1360, 386, 6, 28, "Subsection"],
Cell[61345, 1368, 1082, 28, 47, "Text"],
Cell[62430, 1398, 596, 8, 41, "Input"],
Cell[63029, 1408, 1345, 30, 65, "Text"],
Cell[64377, 1440, 1186, 16, 41, "Input"],
Cell[65566, 1458, 1118, 32, 65, "Text"],
Cell[66687, 1492, 1357, 18, 41, "Input"],
Cell[68047, 1512, 1326, 40, 119, "Text"],
Cell[69376, 1554, 145, 3, 41, "Input"]
}, Closed]],
Cell[CellGroupData[{
Cell[69558, 1562, 173, 2, 28, "Subsection"],
Cell[69734, 1566, 825, 12, 65, "Text"],
Cell[70562, 1580, 308, 5, 47, "Text"],
Cell[70873, 1587, 1030, 24, 263, "Text"],
Cell[71906, 1613, 814, 16, 65, "Text"],
Cell[72723, 1631, 785, 16, 162, "Input"],
Cell[73511, 1649, 342, 8, 47, "Text"]
}, Closed]],
Cell[CellGroupData[{
Cell[73890, 1662, 179, 4, 28, "Subsection"],
Cell[74072, 1668, 448, 10, 65, "Text"],
Cell[74523, 1680, 157, 3, 29, "Text"],
Cell[74683, 1685, 348, 7, 62, "Input"],
Cell[75034, 1694, 821, 12, 101, "Text"],
Cell[75858, 1708, 1949, 49, 282, "Input"],
Cell[77810, 1759, 135, 3, 29, "Text"],
Cell[77948, 1764, 160, 3, 29, "Text"],
Cell[78111, 1769, 911, 20, 122, "Input"],
Cell[79025, 1791, 827, 14, 137, "Text"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[79901, 1811, 252, 3, 75, "Section"],
Cell[80156, 1816, 1874, 52, 119, "Text"],
Cell[CellGroupData[{
Cell[82055, 1872, 451, 6, 36, "Subsection"],
Cell[82509, 1880, 2659, 59, 137, "Text"],
Cell[85171, 1941, 852, 18, 82, "Input"],
Cell[86026, 1961, 1644, 42, 83, "Text"],
Cell[87673, 2005, 460, 6, 41, "Input"],
Cell[88136, 2013, 334, 11, 47, "Text"],
Cell[88473, 2026, 268, 4, 41, "Input"]
}, Closed]],
Cell[CellGroupData[{
Cell[88778, 2035, 457, 6, 28, "Subsection"],
Cell[89238, 2043, 803, 13, 47, "Text"],
Cell[90044, 2058, 473, 7, 65, "Text"],
Cell[90520, 2067, 267, 5, 29, "Text"],
Cell[90790, 2074, 695, 19, 82, "Input"],
Cell[91488, 2095, 254, 5, 29, "Text"],
Cell[91745, 2102, 753, 20, 62, "Input"],
Cell[92501, 2124, 917, 24, 57, "Text"],
Cell[93421, 2150, 119, 2, 41, "Input"],
Cell[93543, 2154, 16, 0, 29, "Text"]
}, Closed]]
}, Open  ]],
Cell[CellGroupData[{
Cell[93608, 2160, 702, 11, 75, "Section"],
Cell[94313, 2173, 1654, 35, 101, "Text"],
Cell[CellGroupData[{
Cell[95992, 2212, 550, 7, 36, "Subsection"],
Cell[96545, 2221, 1125, 22, 65, "Text"],
Cell[97673, 2245, 1108, 23, 102, "Input"],
Cell[98784, 2270, 1307, 32, 83, "Text"],
Cell[100094, 2304, 1428, 31, 102, "Input"],
Cell[101525, 2337, 1009, 24, 65, "Text"],
Cell[102537, 2363, 711, 10, 41, "Input"],
Cell[103251, 2375, 710, 15, 65, "Text"],
Cell[103964, 2392, 818, 11, 41, "Input"]
}, Closed]]
}, Open  ]],
Cell[CellGroupData[{
Cell[104831, 2409, 157, 2, 75, "Section"],
Cell[CellGroupData[{
Cell[105013, 2415, 339, 6, 36, "Subsection"],
Cell[105355, 2423, 315, 7, 62, "Input"],
Cell[105673, 2432, 1021, 16, 119, "Text"],
Cell[CellGroupData[{
Cell[106719, 2452, 1448, 36, 122, "Input"],
Cell[108170, 2490, 40026, 661, 286, "Output"]
}, Open  ]],
Cell[148211, 3154, 97, 1, 29, "Text"]
}, Open  ]],
Cell[CellGroupData[{
Cell[148345, 3160, 237, 5, 36, "Subsection"],
Cell[148585, 3167, 567, 9, 83, "Text"],
Cell[CellGroupData[{
Cell[149177, 3180, 1739, 46, 122, "Input"],
Cell[150919, 3228, 12515, 293, 432, "Output"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[163483, 3527, 423, 7, 36, "Subsection"],
Cell[163909, 3536, 849, 19, 65, "Text"],
Cell[CellGroupData[{
Cell[164783, 3559, 599, 18, 41, "Input"],
Cell[165385, 3579, 1942, 40, 326, "Output"]
}, Open  ]]
}, Open  ]]
}, Open  ]]
}, Open  ]]
}
]
*)

(* End of internal cache information *)
