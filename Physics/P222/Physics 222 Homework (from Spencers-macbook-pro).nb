(* Content-type: application/vnd.wolfram.mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='Mathematica 8.0' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       157,          7]
NotebookDataLength[   1611089,      30286]
NotebookOptionsPosition[   1603181,      30030]
NotebookOutlinePosition[   1603537,      30046]
CellTagsIndexPosition[   1603494,      30043]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{

Cell[CellGroupData[{
Cell["Physics 222 Homework", "Title",
 CellChangeTimes->{{3.5237029258382874`*^9, 3.523702930043894*^9}}],

Cell[BoxData[
 RowBox[{"(*", " ", 
  RowBox[{
  "to", " ", "clear", " ", "all", " ", "evaluate", " ", "the", " ", "cell", 
   " ", "below"}], "*)"}]], "Input",
 CellChangeTimes->{{3.524492898142791*^9, 3.524492913341361*^9}}],

Cell[BoxData[
 RowBox[{"Clear", "[", "\"\<`*\>\"", "]"}]], "Input"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Manipulate", "[", 
  RowBox[{
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"to2", ",", "convert2"}], "}"}], ",", 
     RowBox[{
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"magnitude", "==", "\"\<Temperature\>\""}], "\[Or]", 
         RowBox[{"magnitude", "==", "\"\<Weight\>\""}]}], ",", 
        RowBox[{
         RowBox[{"multiple", "=", "None"}], ";", 
         RowBox[{"tomultiple", "=", "None"}]}]}], "]"}], ";", 
      RowBox[{"to2", "=", 
       RowBox[{"Which", "[", 
        RowBox[{
         RowBox[{"magnitude", "\[Equal]", "\"\<Length\>\""}], ",", 
         "Units`Meter", ",", 
         RowBox[{"magnitude", "\[Equal]", "\"\<Mass\>\""}], ",", 
         "Units`Kilogram", ",", 
         RowBox[{"magnitude", "\[Equal]", "\"\<Time\>\""}], ",", 
         "Units`Second", ",", 
         RowBox[{"magnitude", "\[Equal]", "\"\<Temperature\>\""}], ",", 
         "Units`Fahrenheit", ",", 
         RowBox[{"magnitude", "\[Equal]", "\"\<Force\>\""}], ",", 
         "Units`Newton", ",", 
         RowBox[{"magnitude", "\[Equal]", "\"\<Weight\>\""}], ",", 
         "Units`AvoirdupoisOunce", ",", 
         RowBox[{"magnitude", "\[Equal]", "\"\<Pressure\>\""}], ",", 
         "Units`Pascal", ",", 
         RowBox[{"magnitude", "\[Equal]", "\"\<Power\>\""}], ",", 
         "Units`Horsepower", ",", 
         RowBox[{"magnitude", "\[Equal]", "\"\<Area\>\""}], ",", 
         "Units`Hectare", ",", 
         RowBox[{"magnitude", "\[Equal]", "\"\<Volume\>\""}], ",", 
         "Units`Liter"}], "]"}]}], ";", 
      RowBox[{"convert2", "=", 
       RowBox[{"Which", "[", 
        RowBox[{
         RowBox[{"magnitude", "\[Equal]", "\"\<Length\>\""}], ",", 
         "Units`Mile", ",", 
         RowBox[{"magnitude", "\[Equal]", "\"\<Mass\>\""}], ",", 
         "Units`Pound", ",", 
         RowBox[{"magnitude", "\[Equal]", "\"\<Time\>\""}], ",", "Units`Hour",
          ",", 
         RowBox[{"magnitude", "\[Equal]", "\"\<Temperature\>\""}], ",", 
         "Units`Celsius", ",", 
         RowBox[{"magnitude", "\[Equal]", "\"\<Force\>\""}], ",", 
         "Units`PoundForce", ",", 
         RowBox[{"magnitude", "\[Equal]", "\"\<Weight\>\""}], ",", 
         "Units`Ounce", ",", 
         RowBox[{"magnitude", "\[Equal]", "\"\<Pressure\>\""}], ",", 
         "Units`Atmosphere", ",", 
         RowBox[{"magnitude", "\[Equal]", "\"\<Power\>\""}], ",", 
         "Units`Watt", ",", 
         RowBox[{"magnitude", "\[Equal]", "\"\<Area\>\""}], ",", "Units`Acre",
          ",", 
         RowBox[{"magnitude", "\[Equal]", "\"\<Volume\>\""}], ",", 
         "Units`Gallon"}], "]"}]}], ";", 
      RowBox[{"Which", "[", " ", 
       RowBox[{
        RowBox[{"magnitude", "==", "\"\<Length\>\""}], ",", 
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{"!", 
           RowBox[{"MemberQ", "[", 
            RowBox[{
             RowBox[{"{", 
              RowBox[{
              "Units`AU", ",", "Units`Cable", ",", "Units`Centimeter", ",", 
               "Units`Cicero", ",", "Units`Didot", ",", "Units`Ell", ",", 
               "Units`Feet", ",", "Units`Femto", ",", "Units`Pico", ",", 
               "Units`Nano", ",", " ", "Units`Micro", ",", " ", "Units`Milli",
                ",", " ", "Units`Foot", ",", "Units`Hand", ",", 
               "Units`League", ",", "Units`Link", ",", "Units`Micron", ",", 
               "Units`Mile", ",", "Units`Parsec", ",", "Units`Pica", ",", 
               "Units`Pole", ",", "Units`Rod", ",", "Units`Skein", ",", 
               "Units`Stadion", ",", "Units`StatuteMile", ",", "Units`XUnit", 
               ",", "Units`Bolt", ",", "Units`Caliber", ",", "Units`Chain", 
               ",", "Units`Cubit", ",", "Units`DidotPoint", ",", 
               "Units`Fathom", ",", "Units`Fermi", ",", "Units`Furlong", ",", 
               "Units`Inch", ",", "Units`LightYear", ",", "Units`Meter", ",", 
               "Units`Mil", ",", "Units`NauticalMile", ",", "Units`Perch", 
               ",", "Units`Point", ",", "Units`PrintersPoint", ",", 
               "Units`Rope", ",", "Units`Span", ",", "Units`Stadium", ",", 
               "Units`SurveyMile", ",", "Units`Yard"}], "}"}], ",", 
             "convert"}], "]"}]}], ",", 
          RowBox[{
           RowBox[{"to", "=", "to2"}], ";", 
           RowBox[{"convert", "=", "convert2"}]}]}], "]"}], ",", 
        "\[IndentingNewLine]", " ", 
        RowBox[{"magnitude", "==", "\"\<Mass\>\""}], ",", 
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{"!", 
           RowBox[{"MemberQ", "[", 
            RowBox[{
             RowBox[{"{", 
              RowBox[{
              "Units`AMU", ",", "Units`AssayTon", ",", "Units`AtomicMassUnit",
                ",", "Units`AvoirdupoisOunce", ",", "Units`AvoirdupoisPound", 
               ",", "Units`Bale", ",", "Units`Carat", ",", "Units`Cental", 
               ",", "Units`Dalton", ",", "Units`Drachma", ",", 
               "Units`Geepound", ",", "Units`Grain", ",", "Units`Gram", ",", 
               "Units`GrossHundredweight", ",", "Units`Hundredweight", ",", 
               "Units`Kilogram", ",", "Units`Libra", ",", "Units`LongTon", 
               ",", "Units`MetricTon", ",", "Units`Mina", ",", 
               "Units`NetHundredweight", ",", "Units`Obolos", ",", 
               "Units`Ounce", ",", "Units`Pennyweight", ",", "Units`Pondus", 
               ",", "Units`Pound", ",", "Units`Quintal", ",", "Units`Shekel", 
               ",", "Units`ShortHundredweight", ",", " ", "Units`ShortTon", 
               ",", "Units`Slug", ",", "Units`SolarMass", ",", "Units`Stone", 
               ",", "Units`Talent", ",", "Units`Ton", ",", "Units`Tonne", ",",
                "Units`TroyOunce", ",", "Units`Wey"}], "}"}], ",", 
             "convert"}], "]"}]}], ",", 
          RowBox[{
           RowBox[{"to", "=", "to2"}], ";", 
           RowBox[{"convert", "=", "convert2"}]}]}], "]"}], ",", 
        "\[IndentingNewLine]", " ", 
        RowBox[{"magnitude", "==", "\"\<Time\>\""}], ",", 
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{"!", 
           RowBox[{"MemberQ", "[", 
            RowBox[{
             RowBox[{"{", 
              RowBox[{
              "Units`Century", ",", "Units`Day", ",", "Units`Decade", ",", 
               "Units`Fortnight", ",", "Units`Hour", ",", "Units`Millennium", 
               ",", "Units`Minute", ",", "Units`Month", ",", "Units`Second", 
               ",", "Units`SiderealSecond", ",", "Units`SiderealYear", ",", 
               "Units`TropicalYear", ",", "Units`Week", ",", "Units`Year"}], 
              "}"}], ",", "convert"}], "]"}]}], ",", 
          RowBox[{
           RowBox[{"to", "=", "to2"}], ";", 
           RowBox[{"convert", "=", "convert2"}]}]}], "]"}], ",", 
        "\[IndentingNewLine]", " ", 
        RowBox[{"magnitude", "==", "\"\<Temperature\>\""}], ",", 
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{"!", 
           RowBox[{"MemberQ", "[", 
            RowBox[{
             RowBox[{"{", 
              RowBox[{
              "Units`Celsius", ",", "Units`Fahrenheit", ",", "Units`Rankine", 
               ",", "Units`Kelvin"}], "}"}], ",", "convert"}], "]"}]}], ",", 
          RowBox[{
           RowBox[{"to", "=", "to2"}], ";", 
           RowBox[{"convert", "=", "convert2"}]}]}], "]"}], ",", 
        "\[IndentingNewLine]", " ", 
        RowBox[{"magnitude", "==", "\"\<Force\>\""}], ",", 
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{"!", 
           RowBox[{"MemberQ", "[", 
            RowBox[{
             RowBox[{"{", 
              RowBox[{
              "Units`Dyne", ",", "Units`GramWeight", ",", 
               "Units`KilogramForce", ",", "Units`KilogramWeight", ",", 
               "Units`Newton", ",", "Units`Poundal", ",", "Units`PoundForce", 
               ",", "Units`PoundWeight", ",", "Units`TonForce"}], "}"}], ",", 
             "convert"}], "]"}]}], ",", 
          RowBox[{
           RowBox[{"to", "=", "to2"}], ";", 
           RowBox[{"convert", "=", "convert2"}]}]}], "]"}], ",", 
        "\[IndentingNewLine]", " ", 
        RowBox[{"magnitude", "==", "\"\<Weight\>\""}], ",", 
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{"!", 
           RowBox[{"MemberQ", "[", 
            RowBox[{
             RowBox[{"{", 
              RowBox[{
              "Units`AssayTon", ",", "Units`AvoirdupoisOunce", ",", 
               "Units`AvoirdupoisPound", ",", "Units`Bale", ",", 
               "Units`Carat", ",", "Units`Cental", ",", "Units`Drachma", ",", 
               "Units`Grain", ",", "Units`GrossHundredweight", ",", 
               "Units`Hundredweight", ",", "Units`Libra", ",", 
               "Units`LongTon", ",", "Units`Mina", ",", 
               "Units`NetHundredweight", ",", "Units`Obolos", ",", 
               "Units`Ounce", ",", "Units`Pennyweight", ",", "Units`Pondus", 
               ",", "Units`Pound", ",", "Units`Shekel", ",", 
               "Units`ShortHundredweight", ",", "Units`ShortTon", ",", 
               "Units`Stone", ",", "Units`Talent", ",", "Units`Ton", ",", 
               "Units`TroyOunce", ",", "Units`Wey"}], "}"}], ",", "convert"}],
             "]"}]}], ",", 
          RowBox[{
           RowBox[{"to", "=", "to2"}], ";", 
           RowBox[{"convert", "=", "convert2"}]}]}], "]"}], ",", 
        "\[IndentingNewLine]", " ", 
        RowBox[{"magnitude", "==", "\"\<Pressure\>\""}], ",", 
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{"!", 
           RowBox[{"MemberQ", "[", 
            RowBox[{
             RowBox[{"{", 
              RowBox[{
              "Units`Atmosphere", ",", "Units`Barye", ",", 
               "Units`MillimeterMercury", ",", "Units`Torr", ",", "Units`Bar",
                ",", "Units`InchMercury", ",", "Units`Pascal"}], "}"}], ",", 
             "convert"}], "]"}]}], ",", 
          RowBox[{
           RowBox[{"to", "=", "to2"}], ";", 
           RowBox[{"convert", "=", "convert2"}]}]}], "]"}], ",", 
        "\[IndentingNewLine]", " ", 
        RowBox[{"magnitude", "==", "\"\<Power\>\""}], ",", 
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{"!", 
           RowBox[{"MemberQ", "[", 
            RowBox[{
             RowBox[{"{", 
              RowBox[{
              "Units`ChevalVapeur", ",", "Units`Watt", ",", 
               "Units`Horsepower"}], "}"}], ",", "convert"}], "]"}]}], ",", 
          RowBox[{
           RowBox[{"to", "=", "to2"}], ";", 
           RowBox[{"convert", "=", "convert2"}]}]}], "]"}], ",", 
        "\[IndentingNewLine]", " ", 
        RowBox[{"magnitude", "==", "\"\<Area\>\""}], ",", 
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{"!", 
           RowBox[{"MemberQ", "[", 
            RowBox[{
             RowBox[{"{", 
              RowBox[{
              "Units`Acre", ",", "Units`Barn", ",", "Units`Rood", ",", 
               "Units`Township", ",", "Units`Are", ",", "Units`Hectare", ",", 
               "Units`Section"}], "}"}], ",", "convert"}], "]"}]}], ",", 
          RowBox[{
           RowBox[{"to", "=", "to2"}], ";", 
           RowBox[{"convert", "=", "convert2"}]}]}], "]"}], ",", 
        "\[IndentingNewLine]", " ", 
        RowBox[{"magnitude", "==", "\"\<Volume\>\""}], ",", 
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{"!", 
           RowBox[{"MemberQ", "[", 
            RowBox[{
             RowBox[{"{", 
              RowBox[{
              "Units`Bag", ",", "Units`Barrel", ",", "Units`BoardFoot", ",", 
               "Units`Bucket", ",", "Units`Bushel", ",", "Units`Butt", ",", 
               "Units`Cord", ",", "Units`Cup", ",", "Units`Drop", ",", 
               "Units`Ephah", ",", "Units`Fifth", ",", "Units`Firkin", ",", 
               "Units`FluidDram", ",", "Units`FluidOunce", ",", 
               "Units`Gallon", ",", "Units`Gill", ",", "Units`Hogshead", ",", 
               "Units`Jeroboam", ",", "Units`Jigger", ",", "Units`Last", ",", 
               "Units`Liter", ",", "Units`Magnum", ",", "Units`Minim", ",", 
               "Units`Noggin", ",", "Units`Omer", ",", "Units`Pint", ",", 
               "Units`Pony", ",", "Units`Puncheon", ",", "Units`Quart", ",", 
               "Units`RegisterTon", ",", "Units`Seam", ",", "Units`Shot", ",",
                "Units`Stere", ",", "Units`Tablespoon", ",", "Units`Teaspoon",
                ",", "Units`Tun", ",", "Units`UKGallon", ",", "Units`UKPint", 
               ",", "Units`WineBottle"}], "}"}], ",", "convert"}], "]"}]}], 
          ",", 
          RowBox[{
           RowBox[{"to", "=", "to2"}], ";", 
           RowBox[{"convert", "=", "convert2"}]}]}], "]"}]}], "]"}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"Text", "@", 
       RowBox[{"Grid", "[", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{
             RowBox[{"NumberForm", "[", 
              RowBox[{
               RowBox[{"ScientificForm", "[", 
                RowBox[{"quantity", " ", 
                 RowBox[{"10", "^", "exponent"}]}], "]"}], ",", 
               RowBox[{"{", 
                RowBox[{"dig", ",", 
                 RowBox[{"dig", "+", "1"}]}], "}"}]}], "]"}], " ", ",", 
             "convert", " ", ",", "\"\<=\>\"", ",", "\[IndentingNewLine]", 
             RowBox[{"NumberForm", "[", 
              RowBox[{
               RowBox[{"ScientificForm", "[", 
                RowBox[{
                 RowBox[{"Quiet", "@", 
                  RowBox[{"If", "[", 
                   RowBox[{
                    RowBox[{
                    RowBox[{"convert", "===", "Units`Kelvin"}], "\[Or]", 
                    RowBox[{"to", "===", "Units`Kelvin"}]}], ",", 
                    RowBox[{
                    RowBox[{"Units`ConvertTemperature", "[", 
                    RowBox[{
                    RowBox[{"quantity", " ", 
                    RowBox[{"10", "^", "exponent"}]}], " ", ",", " ", 
                    "convert", " ", ",", "to"}], " ", "]"}], "to"}], ",", 
                    RowBox[{"Units`Convert", "[", 
                    RowBox[{
                    RowBox[{"quantity", "  ", "convert", " ", 
                    RowBox[{"10", "^", "exponent"}]}], ",", "to"}], " ", 
                    "]"}]}], "]"}]}], "/", 
                 RowBox[{"(", "to", " ", ")"}]}], "]"}], ",", 
               RowBox[{"{", 
                RowBox[{"dig", ",", 
                 RowBox[{"dig", "+", "1"}]}], "}"}]}], "]"}], ",", " ", 
             "to"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"If", "[", 
              RowBox[{
               RowBox[{"magnitude", "==", "\"\<Temperature\>\""}], ",", "0.", 
               ",", "1."}], "]"}], ",", "convert", ",", "\"\<=\>\"", ",", 
             RowBox[{"NumberForm", "[", 
              RowBox[{
               RowBox[{"ScientificForm", "[", 
                RowBox[{"If", "[", 
                 RowBox[{
                  RowBox[{"magnitude", "==", "\"\<Temperature\>\""}], ",", 
                  RowBox[{"Quiet", "@", 
                   RowBox[{"Units`ConvertTemperature", "[", " ", 
                    RowBox[{"0.", ",", "convert", ",", "to"}], "]"}]}], ",", 
                  RowBox[{
                   RowBox[{"Quiet", "@", 
                    RowBox[{"Units`Convert", "[", " ", 
                    RowBox[{
                    RowBox[{"1.", "convert"}], ",", "to"}], "]"}]}], "/", 
                   "to"}]}], "]"}], "]"}], ",", 
               RowBox[{"{", 
                RowBox[{"dig", ",", 
                 RowBox[{"dig", "+", "1"}]}], "}"}]}], "]"}], ",", "to"}], 
            "}"}], ",", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"If", "[", 
              RowBox[{
               RowBox[{"magnitude", "==", "\"\<Temperature\>\""}], ",", "0.", 
               ",", "1."}], "]"}], ",", "to", " ", ",", "\"\<=\>\"", ",", 
             RowBox[{"NumberForm", "[", 
              RowBox[{
               RowBox[{"ScientificForm", "[", 
                RowBox[{"If", "[", 
                 RowBox[{
                  RowBox[{"magnitude", "==", "\"\<Temperature\>\""}], ",", 
                  RowBox[{"Quiet", "@", 
                   RowBox[{"Units`ConvertTemperature", "[", " ", 
                    RowBox[{"0.", ",", "to", ",", "convert"}], "]"}]}], ",", 
                  RowBox[{
                   RowBox[{"Quiet", "@", 
                    RowBox[{"Units`Convert", "[", 
                    RowBox[{
                    RowBox[{"1.", " ", "to"}], ",", "convert"}], "]"}]}], "/",
                    "convert"}]}], "]"}], "]"}], ",", 
               RowBox[{"{", 
                RowBox[{"dig", ",", 
                 RowBox[{"dig", "+", "1"}]}], "}"}]}], "]"}], ",", 
             "convert"}], "}"}]}], "}"}], ",", 
         RowBox[{"ItemSize", "\[Rule]", 
          RowBox[{
           RowBox[{"17", "/", "22"}], 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"{", 
              RowBox[{
              "16", ",", " ", "16", ",", "1", ",", " ", "16", ",", " ", 
               "16"}], "}"}], ",", "3"}], "}"}]}]}], ",", 
         RowBox[{"ItemStyle", "\[Rule]", 
          RowBox[{"{", 
           RowBox[{"17", ",", "Blue"}], "}"}]}], ",", 
         RowBox[{"Spacings", "\[Rule]", "0"}], ",", 
         RowBox[{"Background", "\[Rule]", 
          RowBox[{"{", 
           RowBox[{"None", ",", 
            RowBox[{"{", 
             RowBox[{
              RowBox[{"Lighter", "[", 
               RowBox[{"Yellow", ",", ".9"}], "]"}], ",", 
              RowBox[{"{", 
               RowBox[{"Lighter", "[", 
                RowBox[{
                 RowBox[{"Blend", "[", 
                  RowBox[{"{", 
                   RowBox[{"Blue", ",", "Green"}], "}"}], "]"}], ",", ".8"}], 
                "]"}], "}"}]}], "}"}]}], "}"}]}], ",", 
         RowBox[{"Dividers", "\[Rule]", 
          RowBox[{"{", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{
              RowBox[{"Darker", "[", 
               RowBox[{"Gray", ",", ".6"}], "]"}], ",", "False", ",", "False",
               ",", "False", ",", "False", ",", 
              RowBox[{"Darker", "[", 
               RowBox[{"Gray", ",", ".6"}], "]"}]}], "}"}], ",", 
            RowBox[{"{", 
             RowBox[{
              RowBox[{"Darker", "[", 
               RowBox[{"Gray", ",", ".6"}], "]"}], ",", 
              RowBox[{"Darker", "[", 
               RowBox[{"Gray", ",", ".6"}], "]"}], ",", 
              RowBox[{"{", 
               RowBox[{"Lighter", "[", 
                RowBox[{"Gray", ",", ".5"}], "]"}], "}"}], ",", 
              RowBox[{"Darker", "[", 
               RowBox[{"Gray", ",", ".6"}], "]"}]}], "}"}]}], "}"}]}]}], 
        "]"}]}]}]}], "]"}], ",", "\[IndentingNewLine]", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"magnitude", ",", "\"\<Length\>\"", ",", "\"\<magnitude\>\""}], 
      "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
      "\"\<Length\>\"", ",", "\"\<Time\>\"", ",", "\"\<Mass\>\"", ",", 
       "\"\<Temperature\>\"", ",", "\"\<Force\>\"", ",", "\"\<Weight\>\"", 
       ",", "\"\<Pressure\>\"", ",", "\"\<Power\>\"", ",", "\"\<Area\>\"", 
       ",", "\"\<Volume\>\""}], "}"}]}], "}"}], ",", "\[IndentingNewLine]", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"quantity", ",", "5.", ",", "\"\<quantity\>\""}], "}"}], ",", 
     RowBox[{"-", "10."}], ",", "10.", ",", ".00000001", ",", 
     RowBox[{"Appearance", "\[Rule]", "\"\<Labeled\>\""}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"exponent", ",", "0", ",", "\"\<power of ten\>\""}], "}"}], ",", 
     RowBox[{"-", "50"}], ",", "50", ",", "1", ",", 
     RowBox[{"Appearance", "\[Rule]", "\"\<Labeled\>\""}]}], "}"}], ",", 
   "Delimiter", ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"convert", ",", ",", "\"\<convert from unit\>\""}], "}"}], ",", 
     
     RowBox[{"Which", "[", " ", 
      RowBox[{
       RowBox[{"magnitude", "==", "\"\<Length\>\""}], ",", 
       RowBox[{"{", 
        RowBox[{
        "Units`AU", ",", "Units`Cable", ",", "Units`Centimeter", ",", 
         "Units`Cicero", ",", "Units`Didot", ",", "Units`Ell", ",", 
         "Units`Feet", ",", "Units`Foot", ",", "Units`Hand", ",", 
         "Units`League", ",", "Units`Femto", ",", "Units`Pico", ",", 
         "Units`Nano", ",", " ", "Units`Micro", ",", " ", "Units`Milli", ",", 
         "Units`Link", ",", "Units`Micron", ",", "Units`Mile", ",", 
         "Units`Parsec", ",", "Units`Pica", ",", "Units`Pole", ",", 
         "Units`Rod", ",", "Units`Skein", ",", "Units`Stadion", ",", 
         "Units`StatuteMile", ",", "Units`XUnit", ",", "Units`Bolt", ",", 
         "Units`Caliber", ",", "Units`Chain", ",", "Units`Cubit", ",", 
         "Units`DidotPoint", ",", "Units`Fathom", ",", "Units`Fermi", ",", 
         "Units`Furlong", ",", "Units`Inch", ",", "Units`LightYear", ",", 
         "Units`Meter", ",", "Units`Mil", ",", "Units`NauticalMile", ",", 
         "Units`Perch", ",", "Units`Point", ",", "Units`PrintersPoint", ",", 
         "Units`Rope", ",", "Units`Span", ",", "Units`Stadium", ",", 
         "Units`SurveyMile", ",", "Units`Yard"}], "}"}], ",", 
       "\[IndentingNewLine]", " ", 
       RowBox[{"magnitude", "==", "\"\<Mass\>\""}], ",", 
       RowBox[{"{", 
        RowBox[{
        "Units`AMU", ",", "Units`AssayTon", ",", "Units`AtomicMassUnit", ",", 
         "Units`AvoirdupoisOunce", ",", "Units`AvoirdupoisPound", ",", 
         "Units`Bale", ",", "Units`Carat", ",", "Units`Cental", ",", 
         "Units`Dalton", ",", "Units`Drachma", ",", "Units`Geepound", ",", 
         "Units`Grain", ",", "Units`Gram", ",", "Units`GrossHundredweight", 
         ",", "Units`Hundredweight", ",", "Units`Kilogram", ",", 
         "Units`Libra", ",", "Units`LongTon", ",", "Units`MetricTon", ",", 
         "Units`Mina", ",", "Units`NetHundredweight", ",", "Units`Obolos", 
         ",", "Units`Ounce", ",", "Units`Pennyweight", ",", "Units`Pondus", 
         ",", "Units`Pound", ",", "Units`Quintal", ",", "Units`Shekel", ",", 
         "Units`ShortHundredweight", ",", " ", "Units`ShortTon", ",", 
         "Units`Slug", ",", "Units`SolarMass", ",", "Units`Stone", ",", 
         "Units`Talent", ",", "Units`Ton", ",", "Units`Tonne", ",", 
         "Units`TroyOunce", ",", "Units`Wey"}], "}"}], ",", 
       "\[IndentingNewLine]", " ", 
       RowBox[{"magnitude", "==", "\"\<Time\>\""}], ",", 
       RowBox[{"{", 
        RowBox[{
        "Units`Century", ",", "Units`Day", ",", "Units`Decade", ",", 
         "Units`Fortnight", ",", "Units`Hour", ",", "Units`Millennium", ",", 
         "Units`Minute", ",", "Units`Month", ",", "Units`Second", ",", 
         "Units`SiderealSecond", ",", "Units`SiderealYear", ",", 
         "Units`TropicalYear", ",", "Units`Week", ",", "Units`Year"}], "}"}], 
       ",", "\[IndentingNewLine]", " ", 
       RowBox[{"magnitude", "==", "\"\<Temperature\>\""}], ",", 
       RowBox[{"{", 
        RowBox[{
        "Units`Celsius", ",", "Units`Fahrenheit", ",", "Units`Rankine", ",", 
         "Units`Kelvin"}], "}"}], ",", "\[IndentingNewLine]", " ", 
       RowBox[{"magnitude", "==", "\"\<Force\>\""}], ",", 
       RowBox[{"{", 
        RowBox[{
        "Units`Dyne", ",", "Units`GramWeight", ",", "Units`KilogramForce", 
         ",", "Units`KilogramWeight", ",", "Units`Newton", ",", 
         "Units`Poundal", ",", "Units`PoundForce", ",", "Units`PoundWeight", 
         ",", "Units`TonForce"}], "}"}], ",", "\[IndentingNewLine]", " ", 
       RowBox[{"magnitude", "==", "\"\<Weight\>\""}], ",", 
       RowBox[{"{", 
        RowBox[{
        "Units`AssayTon", ",", "Units`AvoirdupoisOunce", ",", 
         "Units`AvoirdupoisPound", ",", "Units`Bale", ",", "Units`Carat", ",",
          "Units`Cental", ",", "Units`Drachma", ",", "Units`Grain", ",", 
         "Units`GrossHundredweight", ",", "Units`Hundredweight", ",", 
         "Units`Libra", ",", "Units`LongTon", ",", "Units`Mina", ",", 
         "Units`NetHundredweight", ",", "Units`Obolos", ",", "Units`Ounce", 
         ",", "Units`Pennyweight", ",", "Units`Pondus", ",", "Units`Pound", 
         ",", "Units`Shekel", ",", "Units`ShortHundredweight", ",", 
         "Units`ShortTon", ",", "Units`Stone", ",", "Units`Talent", ",", 
         "Units`Ton", ",", "Units`TroyOunce", ",", "Units`Wey"}], "}"}], ",", 
       "\[IndentingNewLine]", " ", 
       RowBox[{"magnitude", "==", "\"\<Pressure\>\""}], ",", 
       RowBox[{"{", 
        RowBox[{
        "Units`Atmosphere", ",", "Units`Barye", ",", 
         "Units`MillimeterMercury", ",", "Units`Torr", ",", "Units`Bar", ",", 
         "Units`InchMercury", ",", "Units`Pascal"}], "}"}], ",", 
       "\[IndentingNewLine]", " ", 
       RowBox[{"magnitude", "==", "\"\<Power\>\""}], ",", 
       RowBox[{"{", 
        RowBox[{
        "Units`ChevalVapeur", ",", "Units`Watt", ",", "Units`Horsepower"}], 
        "}"}], ",", "\[IndentingNewLine]", " ", 
       RowBox[{"magnitude", "==", "\"\<Area\>\""}], ",", 
       RowBox[{"{", 
        RowBox[{
        "Units`Acre", ",", "Units`Barn", ",", "Units`Rood", ",", 
         "Units`Township", ",", "Units`Are", ",", "Units`Hectare", ",", 
         "Units`Section"}], "}"}], ",", "\[IndentingNewLine]", " ", 
       RowBox[{"magnitude", "==", "\"\<Volume\>\""}], ",", 
       RowBox[{"{", 
        RowBox[{
        "Units`Bag", ",", "Units`Barrel", ",", "Units`BoardFoot", ",", 
         "Units`Bucket", ",", "Units`Bushel", ",", "Units`Butt", ",", 
         "Units`Cord", ",", "Units`Cup", ",", "Units`Drop", ",", 
         "Units`Ephah", ",", "Units`Fifth", ",", "Units`Firkin", ",", 
         "Units`FluidDram", ",", "Units`FluidOunce", ",", "Units`Gallon", ",",
          "Units`Gill", ",", "Units`Hogshead", ",", "Units`Jeroboam", ",", 
         "Units`Jigger", ",", "Units`Last", ",", "Units`Liter", ",", 
         "Units`Magnum", ",", "Units`Minim", ",", "Units`Noggin", ",", 
         "Units`Omer", ",", "Units`Pint", ",", "Units`Pony", ",", 
         "Units`Puncheon", ",", "Units`Quart", ",", "Units`RegisterTon", ",", 
         "Units`Seam", ",", "Units`Shot", ",", "Units`Stere", ",", 
         "Units`Tablespoon", ",", "Units`Teaspoon", ",", "Units`Tun", ",", 
         "Units`UKGallon", ",", "Units`UKPint", ",", "Units`WineBottle"}], 
        "}"}]}], "]"}], ",", 
     RowBox[{"ControlType", "\[Rule]", "PopupMenu"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"to", ",", "Units`Meter", ",", "\"\<to unit\>\""}], "}"}], ",", 
     
     RowBox[{"Which", "[", " ", 
      RowBox[{
       RowBox[{"magnitude", "==", "\"\<Length\>\""}], ",", 
       RowBox[{"{", 
        RowBox[{
        "Units`AU", ",", "Units`Cable", ",", "Units`Centimeter", ",", 
         "Units`Cicero", ",", "Units`Didot", ",", "Units`Ell", ",", 
         "Units`Feet", ",", "Units`Foot", ",", "Units`Hand", ",", 
         "Units`League", ",", "Units`Link", ",", "Units`Micron", ",", 
         "Units`Mile", ",", "Units`Parsec", ",", "Units`Pica", ",", 
         "Units`Pole", ",", "Units`Rod", ",", "Units`Skein", ",", 
         "Units`Stadion", ",", "Units`StatuteMile", ",", "Units`XUnit", ",", 
         "Units`Bolt", ",", "Units`Caliber", ",", "Units`Chain", ",", 
         "Units`Cubit", ",", "Units`DidotPoint", ",", "Units`Fathom", ",", 
         "Units`Fermi", ",", "Units`Furlong", ",", "Units`Inch", ",", 
         "Units`LightYear", ",", "Units`Meter", ",", "Units`Mil", ",", 
         "Units`NauticalMile", ",", "Units`Perch", ",", "Units`Point", ",", 
         "Units`PrintersPoint", ",", "Units`Rope", ",", "Units`Span", ",", 
         "Units`Stadium", ",", "Units`SurveyMile", ",", "Units`Yard"}], "}"}],
        ",", "\[IndentingNewLine]", " ", 
       RowBox[{"magnitude", "==", "\"\<Mass\>\""}], ",", 
       RowBox[{"{", 
        RowBox[{
        "Units`AMU", ",", "Units`AssayTon", ",", "Units`AtomicMassUnit", ",", 
         "Units`AvoirdupoisOunce", ",", "Units`AvoirdupoisPound", ",", 
         "Units`Bale", ",", "Units`Carat", ",", "Units`Cental", ",", 
         "Units`Dalton", ",", "Units`Drachma", ",", "Units`Geepound", ",", 
         "Units`Grain", ",", "Units`Gram", ",", "Units`GrossHundredweight", 
         ",", "Units`Hundredweight", ",", "Units`Kilogram", ",", 
         "Units`Libra", ",", "Units`LongTon", ",", "Units`MetricTon", ",", 
         "Units`Mina", ",", "Units`NetHundredweight", ",", "Units`Obolos", 
         ",", "Units`Ounce", ",", "Units`Pennyweight", ",", "Units`Pondus", 
         ",", "Units`Pound", ",", "Units`Quintal", ",", "Units`Shekel", ",", 
         "Units`ShortHundredweight", ",", " ", "Units`ShortTon", ",", 
         "Units`Slug", ",", "Units`SolarMass", ",", "Units`Stone", ",", 
         "Units`Talent", ",", "Units`Ton", ",", "Units`Tonne", ",", 
         "Units`TroyOunce", ",", "Units`Wey"}], "}"}], ",", 
       "\[IndentingNewLine]", " ", 
       RowBox[{"magnitude", "==", "\"\<Time\>\""}], ",", 
       RowBox[{"{", 
        RowBox[{
        "Units`Century", ",", "Units`Day", ",", "Units`Decade", ",", 
         "Units`Fortnight", ",", "Units`Hour", ",", "Units`Millennium", ",", 
         "Units`Minute", ",", "Units`Month", ",", "Units`Second", ",", 
         "Units`SiderealSecond", ",", "Units`SiderealYear", ",", 
         "Units`TropicalYear", ",", "Units`Week", ",", "Units`Year"}], "}"}], 
       ",", "\[IndentingNewLine]", " ", 
       RowBox[{"magnitude", "==", "\"\<Temperature\>\""}], ",", 
       RowBox[{"{", 
        RowBox[{
        "Units`Celsius", ",", "Units`Fahrenheit", ",", "Units`Rankine", ",", 
         "Units`Kelvin"}], "}"}], ",", "\[IndentingNewLine]", " ", 
       RowBox[{"magnitude", "==", "\"\<Force\>\""}], ",", 
       RowBox[{"{", 
        RowBox[{
        "Units`Dyne", ",", "Units`GramWeight", ",", "Units`KilogramForce", 
         ",", "Units`KilogramWeight", ",", "Units`Newton", ",", 
         "Units`Poundal", ",", "Units`PoundForce", ",", "Units`PoundWeight", 
         ",", "Units`TonForce"}], "}"}], ",", "\[IndentingNewLine]", " ", 
       RowBox[{"magnitude", "==", "\"\<Weight\>\""}], ",", 
       RowBox[{"{", 
        RowBox[{
        "Units`AssayTon", ",", "Units`AvoirdupoisOunce", ",", 
         "Units`AvoirdupoisPound", ",", "Units`Bale", ",", "Units`Carat", ",",
          "Units`Cental", ",", "Units`Drachma", ",", "Units`Grain", ",", 
         "Units`GrossHundredweight", ",", "Units`Hundredweight", ",", 
         "Units`Libra", ",", "Units`LongTon", ",", "Units`Mina", ",", 
         "Units`NetHundredweight", ",", "Units`Obolos", ",", "Units`Ounce", 
         ",", "Units`Pennyweight", ",", "Units`Pondus", ",", "Units`Pound", 
         ",", "Units`Shekel", ",", "Units`ShortHundredweight", ",", 
         "Units`ShortTon", ",", "Units`Stone", ",", "Units`Talent", ",", 
         "Units`Ton", ",", "Units`TroyOunce", ",", "Units`Wey"}], "}"}], ",", 
       "\[IndentingNewLine]", " ", 
       RowBox[{"magnitude", "==", "\"\<Pressure\>\""}], ",", 
       RowBox[{"{", 
        RowBox[{
        "Units`Atmosphere", ",", "Units`Barye", ",", 
         "Units`MillimeterMercury", ",", "Units`Torr", ",", "Units`Bar", ",", 
         "Units`InchMercury", ",", "Units`Pascal"}], "}"}], ",", 
       "\[IndentingNewLine]", " ", 
       RowBox[{"magnitude", "==", "\"\<Power\>\""}], ",", 
       RowBox[{"{", 
        RowBox[{
        "Units`ChevalVapeur", ",", "Units`Watt", ",", "Units`Horsepower"}], 
        "}"}], ",", "\[IndentingNewLine]", " ", 
       RowBox[{"magnitude", "==", "\"\<Area\>\""}], ",", 
       RowBox[{"{", 
        RowBox[{
        "Units`Acre", ",", "Units`Barn", ",", "Units`Rood", ",", 
         "Units`Township", ",", "Units`Are", ",", "Units`Hectare", ",", 
         "Units`Section"}], "}"}], ",", "\[IndentingNewLine]", " ", 
       RowBox[{"magnitude", "==", "\"\<Volume\>\""}], ",", 
       RowBox[{"{", 
        RowBox[{
        "Units`Bag", ",", "Units`Barrel", ",", "Units`BoardFoot", ",", 
         "Units`Bucket", ",", "Units`Bushel", ",", "Units`Butt", ",", 
         "Units`Cord", ",", "Units`Cup", ",", "Units`Drop", ",", 
         "Units`Ephah", ",", "Units`Fifth", ",", "Units`Firkin", ",", 
         "Units`FluidDram", ",", "Units`FluidOunce", ",", "Units`Gallon", ",",
          "Units`Gill", ",", "Units`Hogshead", ",", "Units`Jeroboam", ",", 
         "Units`Jigger", ",", "Units`Last", ",", "Units`Liter", ",", 
         "Units`Magnum", ",", "Units`Minim", ",", "Units`Noggin", ",", 
         "Units`Omer", ",", "Units`Pint", ",", "Units`Pony", ",", 
         "Units`Puncheon", ",", "Units`Quart", ",", "Units`RegisterTon", ",", 
         "Units`Seam", ",", "Units`Shot", ",", "Units`Stere", ",", 
         "Units`Tablespoon", ",", "Units`Teaspoon", ",", "Units`Tun", ",", 
         "Units`UKGallon", ",", "Units`UKPint", ",", "Units`WineBottle"}], 
        "}"}]}], "]"}], ",", 
     RowBox[{"ControlType", "\[Rule]", "PopupMenu"}]}], "}"}], ",", 
   "Delimiter", ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"dig", ",", "3", ",", "\"\<digits\>\""}], "}"}], ",", 
     RowBox[{"Range", "[", 
      RowBox[{"3", ",", "8"}], "]"}], ",", 
     RowBox[{"ControlType", "\[Rule]", "SetterBar"}]}], "}"}], ",", 
   RowBox[{"FrameMargins", "\[Rule]", "0"}], ",", 
   RowBox[{"BaseStyle", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"Background", "\[Rule]", "LightPurple"}], "}"}]}], ",", 
   RowBox[{"ControlPlacement", "\[Rule]", "Top"}], ",", 
   RowBox[{"FrameMargins", "\[Rule]", "0"}], ",", 
   RowBox[{"Initialization", "\[RuleDelayed]", 
    RowBox[{"{", 
     RowBox[{"Get", "[", "\"\<Units`\>\"", "]"}], "}"}]}], ",", 
   RowBox[{"AutorunSequencing", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"1", ",", "2", ",", "3"}], "}"}]}], ",", 
   RowBox[{"SynchronousInitialization", "\[Rule]", "False"}]}], 
  "]"}]], "Input",
 CellChangeTimes->{{3.526219851642852*^9, 3.5262199201178517`*^9}, 
   3.526220027701852*^9}],

Cell[BoxData[
 TagBox[
  StyleBox[
   DynamicModuleBox[{$CellContext`convert$$ = 
    Units`Pound, $CellContext`dig$$ = 3, $CellContext`exponent$$ = 
    0, $CellContext`magnitude$$ = "Mass", $CellContext`quantity$$ = 
    5., $CellContext`to$$ = Units`Kilogram, Typeset`show$$ = True, 
    Typeset`bookmarkList$$ = {}, Typeset`bookmarkMode$$ = "Menu", 
    Typeset`animator$$, Typeset`animvar$$ = 1, Typeset`name$$ = 
    "\"untitled\"", Typeset`specs$$ = {{{
       Hold[$CellContext`magnitude$$], "Length", "magnitude"}, {
      "Length", "Time", "Mass", "Temperature", "Force", "Weight", "Pressure", 
       "Power", "Area", "Volume"}}, {{
       Hold[$CellContext`quantity$$], 5., "quantity"}, -10., 10., 1.*^-8}, {{
       Hold[$CellContext`exponent$$], 0, "power of ten"}, -50, 50, 1}, {{
       Hold[$CellContext`convert$$], Null, "convert from unit"}, 
      Dynamic[
       Which[$CellContext`magnitude$$ == "Length", {
        Units`AU, Units`Cable, Units`Centimeter, Units`Cicero, Units`Didot, 
         Units`Ell, Units`Feet, Units`Foot, Units`Hand, Units`League, 
         Units`Femto, Units`Pico, Units`Nano, Units`Micro, Units`Milli, 
         Units`Link, Units`Micron, Units`Mile, Units`Parsec, Units`Pica, 
         Units`Pole, Units`Rod, Units`Skein, Units`Stadion, Units`StatuteMile,
          Units`XUnit, Units`Bolt, Units`Caliber, Units`Chain, Units`Cubit, 
         Units`DidotPoint, Units`Fathom, Units`Fermi, Units`Furlong, 
         Units`Inch, Units`LightYear, Units`Meter, Units`Mil, 
         Units`NauticalMile, Units`Perch, Units`Point, Units`PrintersPoint, 
         Units`Rope, Units`Span, Units`Stadium, Units`SurveyMile, 
         Units`Yard}, $CellContext`magnitude$$ == "Mass", {
        Units`AMU, Units`AssayTon, Units`AtomicMassUnit, 
         Units`AvoirdupoisOunce, Units`AvoirdupoisPound, Units`Bale, 
         Units`Carat, Units`Cental, Units`Dalton, Units`Drachma, 
         Units`Geepound, Units`Grain, Units`Gram, Units`GrossHundredweight, 
         Units`Hundredweight, Units`Kilogram, Units`Libra, Units`LongTon, 
         Units`MetricTon, Units`Mina, Units`NetHundredweight, Units`Obolos, 
         Units`Ounce, Units`Pennyweight, Units`Pondus, Units`Pound, 
         Units`Quintal, Units`Shekel, Units`ShortHundredweight, 
         Units`ShortTon, Units`Slug, Units`SolarMass, Units`Stone, 
         Units`Talent, Units`Ton, Units`Tonne, Units`TroyOunce, 
         Units`Wey}, $CellContext`magnitude$$ == "Time", {
        Units`Century, Units`Day, Units`Decade, Units`Fortnight, Units`Hour, 
         Units`Millennium, Units`Minute, Units`Month, Units`Second, 
         Units`SiderealSecond, Units`SiderealYear, Units`TropicalYear, 
         Units`Week, Units`Year}, $CellContext`magnitude$$ == "Temperature", {
        Units`Celsius, Units`Fahrenheit, Units`Rankine, 
         Units`Kelvin}, $CellContext`magnitude$$ == "Force", {
        Units`Dyne, Units`GramWeight, Units`KilogramForce, 
         Units`KilogramWeight, Units`Newton, Units`Poundal, Units`PoundForce, 
         Units`PoundWeight, Units`TonForce}, $CellContext`magnitude$$ == 
        "Weight", {
        Units`AssayTon, Units`AvoirdupoisOunce, Units`AvoirdupoisPound, 
         Units`Bale, Units`Carat, Units`Cental, Units`Drachma, Units`Grain, 
         Units`GrossHundredweight, Units`Hundredweight, Units`Libra, 
         Units`LongTon, Units`Mina, Units`NetHundredweight, Units`Obolos, 
         Units`Ounce, Units`Pennyweight, Units`Pondus, Units`Pound, 
         Units`Shekel, Units`ShortHundredweight, Units`ShortTon, Units`Stone, 
         Units`Talent, Units`Ton, Units`TroyOunce, 
         Units`Wey}, $CellContext`magnitude$$ == "Pressure", {
        Units`Atmosphere, Units`Barye, Units`MillimeterMercury, Units`Torr, 
         Units`Bar, Units`InchMercury, 
         Units`Pascal}, $CellContext`magnitude$$ == "Power", {
        Units`ChevalVapeur, Units`Watt, 
         Units`Horsepower}, $CellContext`magnitude$$ == "Area", {
        Units`Acre, Units`Barn, Units`Rood, Units`Township, Units`Are, 
         Units`Hectare, Units`Section}, $CellContext`magnitude$$ == 
        "Volume", {
        Units`Bag, Units`Barrel, Units`BoardFoot, Units`Bucket, Units`Bushel, 
         Units`Butt, Units`Cord, Units`Cup, Units`Drop, Units`Ephah, 
         Units`Fifth, Units`Firkin, Units`FluidDram, Units`FluidOunce, 
         Units`Gallon, Units`Gill, Units`Hogshead, Units`Jeroboam, 
         Units`Jigger, Units`Last, Units`Liter, Units`Magnum, Units`Minim, 
         Units`Noggin, Units`Omer, Units`Pint, Units`Pony, Units`Puncheon, 
         Units`Quart, Units`RegisterTon, Units`Seam, Units`Shot, Units`Stere, 
         Units`Tablespoon, Units`Teaspoon, Units`Tun, Units`UKGallon, 
         Units`UKPint, Units`WineBottle}]]}, {{
       Hold[$CellContext`to$$], Units`Meter, "to unit"}, 
      Dynamic[
       Which[$CellContext`magnitude$$ == "Length", {
        Units`AU, Units`Cable, Units`Centimeter, Units`Cicero, Units`Didot, 
         Units`Ell, Units`Feet, Units`Foot, Units`Hand, Units`League, 
         Units`Link, Units`Micron, Units`Mile, Units`Parsec, Units`Pica, 
         Units`Pole, Units`Rod, Units`Skein, Units`Stadion, Units`StatuteMile,
          Units`XUnit, Units`Bolt, Units`Caliber, Units`Chain, Units`Cubit, 
         Units`DidotPoint, Units`Fathom, Units`Fermi, Units`Furlong, 
         Units`Inch, Units`LightYear, Units`Meter, Units`Mil, 
         Units`NauticalMile, Units`Perch, Units`Point, Units`PrintersPoint, 
         Units`Rope, Units`Span, Units`Stadium, Units`SurveyMile, 
         Units`Yard}, $CellContext`magnitude$$ == "Mass", {
        Units`AMU, Units`AssayTon, Units`AtomicMassUnit, 
         Units`AvoirdupoisOunce, Units`AvoirdupoisPound, Units`Bale, 
         Units`Carat, Units`Cental, Units`Dalton, Units`Drachma, 
         Units`Geepound, Units`Grain, Units`Gram, Units`GrossHundredweight, 
         Units`Hundredweight, Units`Kilogram, Units`Libra, Units`LongTon, 
         Units`MetricTon, Units`Mina, Units`NetHundredweight, Units`Obolos, 
         Units`Ounce, Units`Pennyweight, Units`Pondus, Units`Pound, 
         Units`Quintal, Units`Shekel, Units`ShortHundredweight, 
         Units`ShortTon, Units`Slug, Units`SolarMass, Units`Stone, 
         Units`Talent, Units`Ton, Units`Tonne, Units`TroyOunce, 
         Units`Wey}, $CellContext`magnitude$$ == "Time", {
        Units`Century, Units`Day, Units`Decade, Units`Fortnight, Units`Hour, 
         Units`Millennium, Units`Minute, Units`Month, Units`Second, 
         Units`SiderealSecond, Units`SiderealYear, Units`TropicalYear, 
         Units`Week, Units`Year}, $CellContext`magnitude$$ == "Temperature", {
        Units`Celsius, Units`Fahrenheit, Units`Rankine, 
         Units`Kelvin}, $CellContext`magnitude$$ == "Force", {
        Units`Dyne, Units`GramWeight, Units`KilogramForce, 
         Units`KilogramWeight, Units`Newton, Units`Poundal, Units`PoundForce, 
         Units`PoundWeight, Units`TonForce}, $CellContext`magnitude$$ == 
        "Weight", {
        Units`AssayTon, Units`AvoirdupoisOunce, Units`AvoirdupoisPound, 
         Units`Bale, Units`Carat, Units`Cental, Units`Drachma, Units`Grain, 
         Units`GrossHundredweight, Units`Hundredweight, Units`Libra, 
         Units`LongTon, Units`Mina, Units`NetHundredweight, Units`Obolos, 
         Units`Ounce, Units`Pennyweight, Units`Pondus, Units`Pound, 
         Units`Shekel, Units`ShortHundredweight, Units`ShortTon, Units`Stone, 
         Units`Talent, Units`Ton, Units`TroyOunce, 
         Units`Wey}, $CellContext`magnitude$$ == "Pressure", {
        Units`Atmosphere, Units`Barye, Units`MillimeterMercury, Units`Torr, 
         Units`Bar, Units`InchMercury, 
         Units`Pascal}, $CellContext`magnitude$$ == "Power", {
        Units`ChevalVapeur, Units`Watt, 
         Units`Horsepower}, $CellContext`magnitude$$ == "Area", {
        Units`Acre, Units`Barn, Units`Rood, Units`Township, Units`Are, 
         Units`Hectare, Units`Section}, $CellContext`magnitude$$ == 
        "Volume", {
        Units`Bag, Units`Barrel, Units`BoardFoot, Units`Bucket, Units`Bushel, 
         Units`Butt, Units`Cord, Units`Cup, Units`Drop, Units`Ephah, 
         Units`Fifth, Units`Firkin, Units`FluidDram, Units`FluidOunce, 
         Units`Gallon, Units`Gill, Units`Hogshead, Units`Jeroboam, 
         Units`Jigger, Units`Last, Units`Liter, Units`Magnum, Units`Minim, 
         Units`Noggin, Units`Omer, Units`Pint, Units`Pony, Units`Puncheon, 
         Units`Quart, Units`RegisterTon, Units`Seam, Units`Shot, Units`Stere, 
         Units`Tablespoon, Units`Teaspoon, Units`Tun, Units`UKGallon, 
         Units`UKPint, Units`WineBottle}]]}, {{
       Hold[$CellContext`dig$$], 3, "digits"}, {3, 4, 5, 6, 7, 8}}}, 
    Typeset`size$$ = Automatic, Typeset`update$$ = 0, Typeset`initDone$$, 
    Typeset`skipInitDone$$ = False, $CellContext`magnitude$83941$$ = 
    0, $CellContext`quantity$83942$$ = 0, $CellContext`exponent$83943$$ = 
    0, $CellContext`dig$83944$$ = 0}, 
    DynamicBox[Manipulate`ManipulateBoxes[
     1, StandardForm, 
      "Variables" :> {$CellContext`convert$$ = Null, $CellContext`dig$$ = 
        3, $CellContext`exponent$$ = 0, $CellContext`magnitude$$ = 
        "Length", $CellContext`quantity$$ = 5., $CellContext`to$$ = 
        Units`Meter}, "ControllerVariables" :> {
        Hold[$CellContext`magnitude$$, $CellContext`magnitude$83941$$, 0], 
        Hold[$CellContext`quantity$$, $CellContext`quantity$83942$$, 0], 
        Hold[$CellContext`exponent$$, $CellContext`exponent$83943$$, 0], 
        Hold[$CellContext`dig$$, $CellContext`dig$83944$$, 0]}, 
      "OtherVariables" :> {
       Typeset`show$$, Typeset`bookmarkList$$, Typeset`bookmarkMode$$, 
        Typeset`animator$$, Typeset`animvar$$, Typeset`name$$, 
        Typeset`specs$$, Typeset`size$$, Typeset`update$$, Typeset`initDone$$,
         Typeset`skipInitDone$$}, "Body" :> 
      Module[{$CellContext`to2$, $CellContext`convert2$}, If[
          
          Or[$CellContext`magnitude$$ == 
           "Temperature", $CellContext`magnitude$$ == 
           "Weight"], $CellContext`multiple = None; $CellContext`tomultiple = 
           None]; $CellContext`to2$ = 
         Which[$CellContext`magnitude$$ == "Length", 
           Units`Meter, $CellContext`magnitude$$ == "Mass", 
           Units`Kilogram, $CellContext`magnitude$$ == "Time", 
           Units`Second, $CellContext`magnitude$$ == "Temperature", 
           Units`Fahrenheit, $CellContext`magnitude$$ == "Force", 
           Units`Newton, $CellContext`magnitude$$ == "Weight", 
           Units`AvoirdupoisOunce, $CellContext`magnitude$$ == "Pressure", 
           Units`Pascal, $CellContext`magnitude$$ == "Power", 
           Units`Horsepower, $CellContext`magnitude$$ == "Area", 
           Units`Hectare, $CellContext`magnitude$$ == "Volume", 
           Units`Liter]; $CellContext`convert2$ = 
         Which[$CellContext`magnitude$$ == "Length", 
           Units`Mile, $CellContext`magnitude$$ == "Mass", 
           Units`Pound, $CellContext`magnitude$$ == "Time", 
           Units`Hour, $CellContext`magnitude$$ == "Temperature", 
           Units`Celsius, $CellContext`magnitude$$ == "Force", 
           Units`PoundForce, $CellContext`magnitude$$ == "Weight", 
           Units`Ounce, $CellContext`magnitude$$ == "Pressure", 
           Units`Atmosphere, $CellContext`magnitude$$ == "Power", 
           Units`Watt, $CellContext`magnitude$$ == "Area", 
           Units`Acre, $CellContext`magnitude$$ == "Volume", Units`Gallon]; 
        Which[$CellContext`magnitude$$ == "Length", 
          If[
           Not[
            
            MemberQ[{
             Units`AU, Units`Cable, Units`Centimeter, Units`Cicero, 
              Units`Didot, Units`Ell, Units`Feet, Units`Femto, Units`Pico, 
              Units`Nano, Units`Micro, Units`Milli, Units`Foot, Units`Hand, 
              Units`League, Units`Link, Units`Micron, Units`Mile, 
              Units`Parsec, Units`Pica, Units`Pole, Units`Rod, Units`Skein, 
              Units`Stadion, Units`StatuteMile, Units`XUnit, Units`Bolt, 
              Units`Caliber, Units`Chain, Units`Cubit, Units`DidotPoint, 
              Units`Fathom, Units`Fermi, Units`Furlong, Units`Inch, 
              Units`LightYear, Units`Meter, Units`Mil, Units`NauticalMile, 
              Units`Perch, Units`Point, Units`PrintersPoint, Units`Rope, 
              Units`Span, Units`Stadium, Units`SurveyMile, 
              Units`Yard}, $CellContext`convert$$]], $CellContext`to$$ = \
$CellContext`to2$; $CellContext`convert$$ = $CellContext`convert2$], \
$CellContext`magnitude$$ == "Mass", 
          If[
           Not[
            
            MemberQ[{
             Units`AMU, Units`AssayTon, Units`AtomicMassUnit, 
              Units`AvoirdupoisOunce, Units`AvoirdupoisPound, Units`Bale, 
              Units`Carat, Units`Cental, Units`Dalton, Units`Drachma, 
              Units`Geepound, Units`Grain, Units`Gram, 
              Units`GrossHundredweight, Units`Hundredweight, Units`Kilogram, 
              Units`Libra, Units`LongTon, Units`MetricTon, Units`Mina, 
              Units`NetHundredweight, Units`Obolos, Units`Ounce, 
              Units`Pennyweight, Units`Pondus, Units`Pound, Units`Quintal, 
              Units`Shekel, Units`ShortHundredweight, Units`ShortTon, 
              Units`Slug, Units`SolarMass, Units`Stone, Units`Talent, 
              Units`Ton, Units`Tonne, Units`TroyOunce, 
              Units`Wey}, $CellContext`convert$$]], $CellContext`to$$ = \
$CellContext`to2$; $CellContext`convert$$ = $CellContext`convert2$], \
$CellContext`magnitude$$ == "Time", 
          If[
           Not[
            
            MemberQ[{
             Units`Century, Units`Day, Units`Decade, Units`Fortnight, 
              Units`Hour, Units`Millennium, Units`Minute, Units`Month, 
              Units`Second, Units`SiderealSecond, Units`SiderealYear, 
              Units`TropicalYear, Units`Week, 
              Units`Year}, $CellContext`convert$$]], $CellContext`to$$ = \
$CellContext`to2$; $CellContext`convert$$ = $CellContext`convert2$], \
$CellContext`magnitude$$ == "Temperature", 
          If[
           Not[
            
            MemberQ[{
             Units`Celsius, Units`Fahrenheit, Units`Rankine, 
              Units`Kelvin}, $CellContext`convert$$]], $CellContext`to$$ = \
$CellContext`to2$; $CellContext`convert$$ = $CellContext`convert2$], \
$CellContext`magnitude$$ == "Force", 
          If[
           Not[
            
            MemberQ[{
             Units`Dyne, Units`GramWeight, Units`KilogramForce, 
              Units`KilogramWeight, Units`Newton, Units`Poundal, 
              Units`PoundForce, Units`PoundWeight, 
              Units`TonForce}, $CellContext`convert$$]], $CellContext`to$$ = \
$CellContext`to2$; $CellContext`convert$$ = $CellContext`convert2$], \
$CellContext`magnitude$$ == "Weight", 
          If[
           Not[
            
            MemberQ[{
             Units`AssayTon, Units`AvoirdupoisOunce, Units`AvoirdupoisPound, 
              Units`Bale, Units`Carat, Units`Cental, Units`Drachma, 
              Units`Grain, Units`GrossHundredweight, Units`Hundredweight, 
              Units`Libra, Units`LongTon, Units`Mina, Units`NetHundredweight, 
              Units`Obolos, Units`Ounce, Units`Pennyweight, Units`Pondus, 
              Units`Pound, Units`Shekel, Units`ShortHundredweight, 
              Units`ShortTon, Units`Stone, Units`Talent, Units`Ton, 
              Units`TroyOunce, 
              Units`Wey}, $CellContext`convert$$]], $CellContext`to$$ = \
$CellContext`to2$; $CellContext`convert$$ = $CellContext`convert2$], \
$CellContext`magnitude$$ == "Pressure", 
          If[
           Not[
            
            MemberQ[{
             Units`Atmosphere, Units`Barye, Units`MillimeterMercury, 
              Units`Torr, Units`Bar, Units`InchMercury, 
              Units`Pascal}, $CellContext`convert$$]], $CellContext`to$$ = \
$CellContext`to2$; $CellContext`convert$$ = $CellContext`convert2$], \
$CellContext`magnitude$$ == "Power", 
          If[
           Not[
            
            MemberQ[{
             Units`ChevalVapeur, Units`Watt, 
              Units`Horsepower}, $CellContext`convert$$]], $CellContext`to$$ = \
$CellContext`to2$; $CellContext`convert$$ = $CellContext`convert2$], \
$CellContext`magnitude$$ == "Area", 
          If[
           Not[
            
            MemberQ[{
             Units`Acre, Units`Barn, Units`Rood, Units`Township, Units`Are, 
              Units`Hectare, 
              Units`Section}, $CellContext`convert$$]], $CellContext`to$$ = \
$CellContext`to2$; $CellContext`convert$$ = $CellContext`convert2$], \
$CellContext`magnitude$$ == "Volume", 
          If[
           Not[
            
            MemberQ[{
             Units`Bag, Units`Barrel, Units`BoardFoot, Units`Bucket, 
              Units`Bushel, Units`Butt, Units`Cord, Units`Cup, Units`Drop, 
              Units`Ephah, Units`Fifth, Units`Firkin, Units`FluidDram, 
              Units`FluidOunce, Units`Gallon, Units`Gill, Units`Hogshead, 
              Units`Jeroboam, Units`Jigger, Units`Last, Units`Liter, 
              Units`Magnum, Units`Minim, Units`Noggin, Units`Omer, Units`Pint,
               Units`Pony, Units`Puncheon, Units`Quart, Units`RegisterTon, 
              Units`Seam, Units`Shot, Units`Stere, Units`Tablespoon, 
              Units`Teaspoon, Units`Tun, Units`UKGallon, Units`UKPint, 
              Units`WineBottle}, $CellContext`convert$$]], $CellContext`to$$ = \
$CellContext`to2$; $CellContext`convert$$ = $CellContext`convert2$]]; Text[
          Grid[{{
             NumberForm[
              
              ScientificForm[$CellContext`quantity$$ 
               10^$CellContext`exponent$$], {$CellContext`dig$$, \
$CellContext`dig$$ + 1}], $CellContext`convert$$, "=", 
             NumberForm[
              ScientificForm[Quiet[
                 If[
                  
                  Or[$CellContext`convert$$ === 
                   Units`Kelvin, $CellContext`to$$ === Units`Kelvin], 
                  Units`ConvertTemperature[$CellContext`quantity$$ 
                    10^$CellContext`exponent$$, $CellContext`convert$$, \
$CellContext`to$$] $CellContext`to$$, 
                  
                  Units`Convert[($CellContext`quantity$$ \
$CellContext`convert$$) 
                   10^$CellContext`exponent$$, \
$CellContext`to$$]]]/$CellContext`to$$], {$CellContext`dig$$, \
$CellContext`dig$$ + 1}], $CellContext`to$$}, {
             
             If[$CellContext`magnitude$$ == "Temperature", 0., 
              1.], $CellContext`convert$$, "=", 
             NumberForm[
              ScientificForm[
               If[$CellContext`magnitude$$ == "Temperature", 
                Quiet[
                 Units`ConvertTemperature[
                 0., $CellContext`convert$$, $CellContext`to$$]], Quiet[
                  Units`Convert[
                  1. $CellContext`convert$$, \
$CellContext`to$$]]/$CellContext`to$$]], {$CellContext`dig$$, \
$CellContext`dig$$ + 1}], $CellContext`to$$}, {
             
             If[$CellContext`magnitude$$ == "Temperature", 0., 
              1.], $CellContext`to$$, "=", 
             NumberForm[
              ScientificForm[
               If[$CellContext`magnitude$$ == "Temperature", 
                Quiet[
                 Units`ConvertTemperature[
                 0., $CellContext`to$$, $CellContext`convert$$]], Quiet[
                  Units`Convert[
                  1. $CellContext`to$$, \
$CellContext`convert$$]]/$CellContext`convert$$]], {$CellContext`dig$$, \
$CellContext`dig$$ + 1}], $CellContext`convert$$}}, 
           ItemSize -> (17/22) {{16, 16, 1, 16, 16}, 3}, 
           ItemStyle -> {17, Blue}, Spacings -> 0, Background -> {None, {
              Lighter[Yellow, 0.9], {
               Lighter[
                Blend[{Blue, Green}], 0.8]}}}, Dividers -> {{
              Darker[Gray, 0.6], False, False, False, False, 
              Darker[Gray, 0.6]}, {
              Darker[Gray, 0.6], 
              Darker[Gray, 0.6], {
               Lighter[Gray, 0.5]}, 
              Darker[Gray, 0.6]}}]]], 
      "Specifications" :> {{{$CellContext`magnitude$$, "Length", 
          "magnitude"}, {
         "Length", "Time", "Mass", "Temperature", "Force", "Weight", 
          "Pressure", "Power", "Area", "Volume"}}, {{$CellContext`quantity$$, 
          5., "quantity"}, -10., 10., 1.*^-8, Appearance -> 
         "Labeled"}, {{$CellContext`exponent$$, 0, "power of ten"}, -50, 50, 
         1, Appearance -> "Labeled"}, 
        Delimiter, {{$CellContext`convert$$, Null, "convert from unit"}, 
         Dynamic[
          
          Which[$CellContext`magnitude$$ == "Length", {
           Units`AU, Units`Cable, Units`Centimeter, Units`Cicero, Units`Didot,
             Units`Ell, Units`Feet, Units`Foot, Units`Hand, Units`League, 
            Units`Femto, Units`Pico, Units`Nano, Units`Micro, Units`Milli, 
            Units`Link, Units`Micron, Units`Mile, Units`Parsec, Units`Pica, 
            Units`Pole, Units`Rod, Units`Skein, Units`Stadion, 
            Units`StatuteMile, Units`XUnit, Units`Bolt, Units`Caliber, 
            Units`Chain, Units`Cubit, Units`DidotPoint, Units`Fathom, 
            Units`Fermi, Units`Furlong, Units`Inch, Units`LightYear, 
            Units`Meter, Units`Mil, Units`NauticalMile, Units`Perch, 
            Units`Point, Units`PrintersPoint, Units`Rope, Units`Span, 
            Units`Stadium, Units`SurveyMile, 
            Units`Yard}, $CellContext`magnitude$$ == "Mass", {
           Units`AMU, Units`AssayTon, Units`AtomicMassUnit, 
            Units`AvoirdupoisOunce, Units`AvoirdupoisPound, Units`Bale, 
            Units`Carat, Units`Cental, Units`Dalton, Units`Drachma, 
            Units`Geepound, Units`Grain, Units`Gram, Units`GrossHundredweight,
             Units`Hundredweight, Units`Kilogram, Units`Libra, Units`LongTon, 
            Units`MetricTon, Units`Mina, Units`NetHundredweight, Units`Obolos,
             Units`Ounce, Units`Pennyweight, Units`Pondus, Units`Pound, 
            Units`Quintal, Units`Shekel, Units`ShortHundredweight, 
            Units`ShortTon, Units`Slug, Units`SolarMass, Units`Stone, 
            Units`Talent, Units`Ton, Units`Tonne, Units`TroyOunce, 
            Units`Wey}, $CellContext`magnitude$$ == "Time", {
           Units`Century, Units`Day, Units`Decade, Units`Fortnight, 
            Units`Hour, Units`Millennium, Units`Minute, Units`Month, 
            Units`Second, Units`SiderealSecond, Units`SiderealYear, 
            Units`TropicalYear, Units`Week, 
            Units`Year}, $CellContext`magnitude$$ == "Temperature", {
           Units`Celsius, Units`Fahrenheit, Units`Rankine, 
            Units`Kelvin}, $CellContext`magnitude$$ == "Force", {
           Units`Dyne, Units`GramWeight, Units`KilogramForce, 
            Units`KilogramWeight, Units`Newton, Units`Poundal, 
            Units`PoundForce, Units`PoundWeight, 
            Units`TonForce}, $CellContext`magnitude$$ == "Weight", {
           Units`AssayTon, Units`AvoirdupoisOunce, Units`AvoirdupoisPound, 
            Units`Bale, Units`Carat, Units`Cental, Units`Drachma, Units`Grain,
             Units`GrossHundredweight, Units`Hundredweight, Units`Libra, 
            Units`LongTon, Units`Mina, Units`NetHundredweight, Units`Obolos, 
            Units`Ounce, Units`Pennyweight, Units`Pondus, Units`Pound, 
            Units`Shekel, Units`ShortHundredweight, Units`ShortTon, 
            Units`Stone, Units`Talent, Units`Ton, Units`TroyOunce, 
            Units`Wey}, $CellContext`magnitude$$ == "Pressure", {
           Units`Atmosphere, Units`Barye, Units`MillimeterMercury, Units`Torr,
             Units`Bar, Units`InchMercury, 
            Units`Pascal}, $CellContext`magnitude$$ == "Power", {
           Units`ChevalVapeur, Units`Watt, 
            Units`Horsepower}, $CellContext`magnitude$$ == "Area", {
           Units`Acre, Units`Barn, Units`Rood, Units`Township, Units`Are, 
            Units`Hectare, Units`Section}, $CellContext`magnitude$$ == 
           "Volume", {
           Units`Bag, Units`Barrel, Units`BoardFoot, Units`Bucket, 
            Units`Bushel, Units`Butt, Units`Cord, Units`Cup, Units`Drop, 
            Units`Ephah, Units`Fifth, Units`Firkin, Units`FluidDram, 
            Units`FluidOunce, Units`Gallon, Units`Gill, Units`Hogshead, 
            Units`Jeroboam, Units`Jigger, Units`Last, Units`Liter, 
            Units`Magnum, Units`Minim, Units`Noggin, Units`Omer, Units`Pint, 
            Units`Pony, Units`Puncheon, Units`Quart, Units`RegisterTon, 
            Units`Seam, Units`Shot, Units`Stere, Units`Tablespoon, 
            Units`Teaspoon, Units`Tun, Units`UKGallon, Units`UKPint, 
            Units`WineBottle}]], ControlType -> 
         PopupMenu}, {{$CellContext`to$$, Units`Meter, "to unit"}, 
         Dynamic[
          
          Which[$CellContext`magnitude$$ == "Length", {
           Units`AU, Units`Cable, Units`Centimeter, Units`Cicero, Units`Didot,
             Units`Ell, Units`Feet, Units`Foot, Units`Hand, Units`League, 
            Units`Link, Units`Micron, Units`Mile, Units`Parsec, Units`Pica, 
            Units`Pole, Units`Rod, Units`Skein, Units`Stadion, 
            Units`StatuteMile, Units`XUnit, Units`Bolt, Units`Caliber, 
            Units`Chain, Units`Cubit, Units`DidotPoint, Units`Fathom, 
            Units`Fermi, Units`Furlong, Units`Inch, Units`LightYear, 
            Units`Meter, Units`Mil, Units`NauticalMile, Units`Perch, 
            Units`Point, Units`PrintersPoint, Units`Rope, Units`Span, 
            Units`Stadium, Units`SurveyMile, 
            Units`Yard}, $CellContext`magnitude$$ == "Mass", {
           Units`AMU, Units`AssayTon, Units`AtomicMassUnit, 
            Units`AvoirdupoisOunce, Units`AvoirdupoisPound, Units`Bale, 
            Units`Carat, Units`Cental, Units`Dalton, Units`Drachma, 
            Units`Geepound, Units`Grain, Units`Gram, Units`GrossHundredweight,
             Units`Hundredweight, Units`Kilogram, Units`Libra, Units`LongTon, 
            Units`MetricTon, Units`Mina, Units`NetHundredweight, Units`Obolos,
             Units`Ounce, Units`Pennyweight, Units`Pondus, Units`Pound, 
            Units`Quintal, Units`Shekel, Units`ShortHundredweight, 
            Units`ShortTon, Units`Slug, Units`SolarMass, Units`Stone, 
            Units`Talent, Units`Ton, Units`Tonne, Units`TroyOunce, 
            Units`Wey}, $CellContext`magnitude$$ == "Time", {
           Units`Century, Units`Day, Units`Decade, Units`Fortnight, 
            Units`Hour, Units`Millennium, Units`Minute, Units`Month, 
            Units`Second, Units`SiderealSecond, Units`SiderealYear, 
            Units`TropicalYear, Units`Week, 
            Units`Year}, $CellContext`magnitude$$ == "Temperature", {
           Units`Celsius, Units`Fahrenheit, Units`Rankine, 
            Units`Kelvin}, $CellContext`magnitude$$ == "Force", {
           Units`Dyne, Units`GramWeight, Units`KilogramForce, 
            Units`KilogramWeight, Units`Newton, Units`Poundal, 
            Units`PoundForce, Units`PoundWeight, 
            Units`TonForce}, $CellContext`magnitude$$ == "Weight", {
           Units`AssayTon, Units`AvoirdupoisOunce, Units`AvoirdupoisPound, 
            Units`Bale, Units`Carat, Units`Cental, Units`Drachma, Units`Grain,
             Units`GrossHundredweight, Units`Hundredweight, Units`Libra, 
            Units`LongTon, Units`Mina, Units`NetHundredweight, Units`Obolos, 
            Units`Ounce, Units`Pennyweight, Units`Pondus, Units`Pound, 
            Units`Shekel, Units`ShortHundredweight, Units`ShortTon, 
            Units`Stone, Units`Talent, Units`Ton, Units`TroyOunce, 
            Units`Wey}, $CellContext`magnitude$$ == "Pressure", {
           Units`Atmosphere, Units`Barye, Units`MillimeterMercury, Units`Torr,
             Units`Bar, Units`InchMercury, 
            Units`Pascal}, $CellContext`magnitude$$ == "Power", {
           Units`ChevalVapeur, Units`Watt, 
            Units`Horsepower}, $CellContext`magnitude$$ == "Area", {
           Units`Acre, Units`Barn, Units`Rood, Units`Township, Units`Are, 
            Units`Hectare, Units`Section}, $CellContext`magnitude$$ == 
           "Volume", {
           Units`Bag, Units`Barrel, Units`BoardFoot, Units`Bucket, 
            Units`Bushel, Units`Butt, Units`Cord, Units`Cup, Units`Drop, 
            Units`Ephah, Units`Fifth, Units`Firkin, Units`FluidDram, 
            Units`FluidOunce, Units`Gallon, Units`Gill, Units`Hogshead, 
            Units`Jeroboam, Units`Jigger, Units`Last, Units`Liter, 
            Units`Magnum, Units`Minim, Units`Noggin, Units`Omer, Units`Pint, 
            Units`Pony, Units`Puncheon, Units`Quart, Units`RegisterTon, 
            Units`Seam, Units`Shot, Units`Stere, Units`Tablespoon, 
            Units`Teaspoon, Units`Tun, Units`UKGallon, Units`UKPint, 
            Units`WineBottle}]], ControlType -> PopupMenu}, 
        Delimiter, {{$CellContext`dig$$, 3, "digits"}, {3, 4, 5, 6, 7, 8}, 
         ControlType -> SetterBar}}, 
      "Options" :> {
       FrameMargins -> 0, 
        BaseStyle -> {Background -> RGBColor[0.94, 0.88, 0.94]}, 
        ControlPlacement -> Top, FrameMargins -> 0, 
        AutorunSequencing -> {1, 2, 3}, SynchronousInitialization -> False}, 
      "DefaultOptions" :> {}],
     ImageSizeCache->{637., {174., 179.}},
     SingleEvaluation->True],
    Deinitialization:>None,
    DynamicModuleValues:>{},
    Initialization:>({
       Get["Units`"]}; Typeset`initDone$$ = True),
    SynchronousInitialization->False,
    UnsavedVariables:>{Typeset`initDone$$},
    UntrackedVariables:>{Typeset`size$$}], "Manipulate",
   Deployed->True,
   StripOnInput->False,
   Background->RGBColor[0.94, 0.88, 0.94]],
  Manipulate`InterpretManipulate[1]]], "Output",
 CellChangeTimes->{3.5262200310928516`*^9}]
}, {2}]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Manipulate", "[", "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{"Show", "[", 
    RowBox[{
     RowBox[{"BarChart3D", "[", 
      RowBox[{
       RowBox[{"Reverse", "/@", 
        RowBox[{"data", "[", "prop", "]"}]}], ",", 
       RowBox[{"ChartLayout", "\[Rule]", "\"\<Grid\>\""}], ",", 
       RowBox[{"ChartElementFunction", "\[Rule]", "chartelem"}], ",", 
       RowBox[{"BoxRatios", "\[Rule]", 
        RowBox[{"{", 
         RowBox[{"18", ",", "10", ",", "5"}], "}"}]}], ",", 
       RowBox[{"Boxed", "\[Rule]", "True"}], ",", 
       RowBox[{"Method", "\[Rule]", 
        RowBox[{"{", 
         RowBox[{"\"\<Canvas\>\"", "\[Rule]", "None"}], "}"}]}], ",", 
       RowBox[{"Ticks", "\[Rule]", 
        RowBox[{"{", 
         RowBox[{"None", ",", "None", ",", "Automatic"}], "}"}]}], ",", 
       RowBox[{"FaceGrids", "\[Rule]", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"0", ",", 
            RowBox[{"-", "1"}], ",", "0"}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{"1", ",", "0", ",", "0"}], "}"}]}], "}"}]}], ",", 
       RowBox[{"ViewAngle", "\[Rule]", 
        RowBox[{"Pi", "/", "4.5"}]}], ",", 
       RowBox[{"ViewPoint", "\[Rule]", 
        RowBox[{"{", 
         RowBox[{"0", ",", 
          RowBox[{"1", "/", "5"}], ",", "1"}], "}"}]}], ",", 
       RowBox[{"ViewVertical", "\[Rule]", 
        RowBox[{"{", 
         RowBox[{"0", ",", "0", ",", "1"}], "}"}]}], ",", 
       RowBox[{"ImageSize", "\[Rule]", 
        RowBox[{"{", 
         RowBox[{"500", ",", "300"}], "}"}]}]}], "]"}], ",", 
     RowBox[{"AxesEdge", "\[Rule]", 
      RowBox[{"{", 
       RowBox[{"None", ",", "None", ",", 
        RowBox[{"{", 
         RowBox[{"1", ",", 
          RowBox[{"-", "1"}]}], "}"}]}], "}"}]}]}], "]"}], ",", 
   "\[IndentingNewLine]", 
   RowBox[{"Dynamic", "[", 
    RowBox[{
     RowBox[{"Row", "[", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"Control", "[", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{
            "prop", ",", "\"\<AtomicNumber\>\"", ",", 
             "\"\<element property\>\""}], "}"}], ",", "props"}], "}"}], 
         "]"}], ",", 
        RowBox[{"Spacer", "[", "20", "]"}], ",", "\"\<unit: \>\"", ",", 
        RowBox[{"Dynamic", "[", 
         RowBox[{"With", "[", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"unit", "=", 
             RowBox[{"ElementData", "[", 
              RowBox[{
              "\"\<H\>\"", ",", "prop", ",", "\"\<UnitsNotation\>\""}], 
              "]"}]}], "}"}], ",", 
           RowBox[{"If", "[", 
            RowBox[{
             RowBox[{"MatchQ", "[", 
              RowBox[{"unit", ",", 
               RowBox[{
                RowBox[{"HoldPattern", "[", 
                 RowBox[{"ElementData", "[", "__", "]"}], "]"}], "|", 
                RowBox[{"Missing", "[", "_", "]"}]}]}], "]"}], ",", 
             "\"\<not available\>\"", ",", "unit"}], "]"}]}], "]"}], "]"}]}], 
       "}"}], "]"}], ",", 
     RowBox[{"SynchronousUpdating", "\[Rule]", "False"}]}], "]"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
      "chartelem", ",", "\"\<FadingCube\>\"", ",", "\"\<bar style\>\""}], 
      "}"}], ",", 
     RowBox[{
      RowBox[{"(", 
       RowBox[{
        RowBox[{"#", "\[Rule]", 
         RowBox[{"ChartElementData", "[", 
          RowBox[{"#", ",", "\"\<Name\>\""}], "]"}]}], "&"}], ")"}], "/@", 
      RowBox[{"{", 
       RowBox[{
       "\"\<Cone\>\"", ",", "\"\<Cube\>\"", ",", "\"\<Cylinder\>\"", ",", 
        "\"\<FadingCube\>\"", ",", "\"\<ProfileCube\>\""}], "}"}]}]}], "}"}], 
   ",", 
   RowBox[{"SynchronousUpdating", "\[Rule]", "False"}], ",", 
   RowBox[{"SynchronousInitialization", "\[Rule]", "False"}], ",", 
   "\[IndentingNewLine]", 
   RowBox[{"Initialization", "\[RuleDelayed]", 
    RowBox[{"(", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"props", "=", 
       RowBox[{"{", 
        RowBox[{
        "\"\<Name\>\"", ",", "\"\<AtomicNumber\>\"", ",", 
         "\"\<AtomicRadius\>\"", ",", "\"\<AtomicWeight\>\"", ",", 
         "\"\<BoilingPoint\>\"", ",", "\"\<CrustAbundance\>\"", ",", 
         "\"\<Density\>\"", ",", "\"\<ElectronAffinity\>\"", ",", 
         "\"\<Electronegativity\>\"", ",", "\"\<FusionHeat\>\"", ",", 
         "\"\<HalfLife\>\"", ",", "\"\<KnownIsotopes\>\"", ",", 
         "\"\<MeltingPoint\>\"", ",", "\"\<OceanAbundance\>\"", ",", 
         "\"\<SolarAbundance\>\"", ",", "\"\<SpecificHeat\>\"", ",", 
         "\"\<ThermalConductivity\>\"", ",", "\"\<UniverseAbundance\>\""}], 
        "}"}]}], ";", 
      RowBox[{
       RowBox[{
        RowBox[{"(", 
         RowBox[{
          RowBox[{"data", "[", "#", "]"}], "=", 
          RowBox[{
           RowBox[{
            RowBox[{"ColorData", "[", 
             RowBox[{"\"\<Atoms\>\"", ",", "\"\<Image\>\""}], "]"}], "[", 
            RowBox[{"[", 
             RowBox[{"1", ",", "2"}], "]"}], "]"}], "/.", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{
              RowBox[{"{", 
               RowBox[{"color_", ",", 
                RowBox[{"Rectangle", "[", "__", "]"}], ",", 
                RowBox[{"Inset", "[", 
                 RowBox[{
                  RowBox[{"Style", "[", 
                   RowBox[{"element_", ",", "__"}], "]"}], ",", "___"}], 
                 "]"}]}], "}"}], "\[RuleDelayed]", 
              RowBox[{"With", "[", 
               RowBox[{
                RowBox[{"{", 
                 RowBox[{"value", "=", 
                  RowBox[{"ElementData", "[", 
                   RowBox[{"element", ",", "#"}], "]"}]}], "}"}], ",", 
                "\[IndentingNewLine]", 
                RowBox[{"If", "[", 
                 RowBox[{
                  RowBox[{"MatchQ", "[", 
                   RowBox[{"value", ",", 
                    RowBox[{"Missing", "[", "_", "]"}]}], "]"}], ",", 
                  "\[IndentingNewLine]", 
                  RowBox[{"Labeled", "[", 
                   RowBox[{
                    RowBox[{"Style", "[", 
                    RowBox[{
                    RowBox[{"Tooltip", "[", 
                    RowBox[{"0", ",", 
                    RowBox[{"value", "/.", 
                    RowBox[{
                    RowBox[{"Missing", "[", "s_", "]"}], "\[Rule]", "s"}]}]}],
                     "]"}], ",", "White"}], "]"}], ",", 
                    RowBox[{"Style", "[", 
                    RowBox[{"element", ",", "\"\<Label\>\"", ",", "9", ",", 
                    RowBox[{"Background", "\[Rule]", 
                    RowBox[{"Opacity", "[", 
                    RowBox[{".5", ",", "White"}], "]"}]}]}], "]"}], ",", 
                    "Above"}], "]"}], ",", "\[IndentingNewLine]", 
                  RowBox[{"Labeled", "[", 
                   RowBox[{
                    RowBox[{"Style", "[", 
                    RowBox[{"value", ",", "color"}], "]"}], ",", 
                    RowBox[{"Style", "[", 
                    RowBox[{"element", ",", "\"\<Label\>\"", ",", "9", ",", 
                    RowBox[{"Background", "\[Rule]", 
                    RowBox[{"Opacity", "[", 
                    RowBox[{".5", ",", "White"}], "]"}]}]}], "]"}], ",", 
                    "Above"}], "]"}]}], "\[IndentingNewLine]", "]"}]}], 
               "]"}]}], ",", 
             RowBox[{
              RowBox[{"{", "}"}], "\[Rule]", "None"}]}], "}"}]}]}], ")"}], 
        "&"}], "/@", "props"}], ";"}], "\[IndentingNewLine]", ")"}]}]}], 
  "]"}]], "Input",
 CellChangeTimes->{{3.5250111545269775`*^9, 3.525011176996303*^9}, {
  3.525011246964204*^9, 3.52501126444368*^9}, {3.5250113097223215`*^9, 
  3.5250113437413006`*^9}}],

Cell[BoxData[
 TagBox[
  StyleBox[
   DynamicModuleBox[{$CellContext`chartelem$$ = 
    "FadingCube", $CellContext`prop$$ = "AtomicNumber", Typeset`show$$ = True,
     Typeset`bookmarkList$$ = {}, Typeset`bookmarkMode$$ = "Menu", 
    Typeset`animator$$, Typeset`animvar$$ = 1, Typeset`name$$ = 
    "\"untitled\"", Typeset`specs$$ = {{{
       Hold[$CellContext`prop$$], "AtomicNumber", "element property"}, {
      "Name", "AtomicNumber", "AtomicRadius", "AtomicWeight", "BoilingPoint", 
       "CrustAbundance", "Density", "ElectronAffinity", "Electronegativity", 
       "FusionHeat", "HalfLife", "KnownIsotopes", "MeltingPoint", 
       "OceanAbundance", "SolarAbundance", "SpecificHeat", 
       "ThermalConductivity", "UniverseAbundance"}}, {
      Hold[
       Dynamic[
        Row[{
          Manipulate`Place[1], 
          Spacer[20], "unit: ", 
          Dynamic[
           
           With[{$CellContext`unit = 
             ElementData["H", $CellContext`prop$$, "UnitsNotation"]}, 
            If[
             MatchQ[$CellContext`unit, 
              Alternatives[
               HoldPattern[
                ElementData[
                 BlankSequence[]]], 
               Missing[
                Blank[]]]], "not available", $CellContext`unit]]]}], 
        SynchronousUpdating -> False]], Manipulate`Dump`ThisIsNotAControl}, {{
      
       Hold[$CellContext`chartelem$$], "FadingCube", "bar style"}, {
      "Cone" -> "cone", "Cube" -> "cube", "Cylinder" -> "cylinder", 
       "FadingCube" -> "fading cube", "ProfileCube" -> " profile bar"}}}, 
    Typeset`size$$ = {500., {148., 152.}}, Typeset`update$$ = 0, 
    Typeset`initDone$$, Typeset`skipInitDone$$ = 
    False, $CellContext`prop$79636$$ = 0, $CellContext`chartelem$79637$$ = 
    False}, 
    DynamicBox[Manipulate`ManipulateBoxes[
     2, StandardForm, 
      "Variables" :> {$CellContext`chartelem$$ = 
        "FadingCube", $CellContext`prop$$ = "AtomicNumber"}, 
      "ControllerVariables" :> {
        Hold[$CellContext`prop$$, $CellContext`prop$79636$$, 0], 
        Hold[$CellContext`chartelem$$, $CellContext`chartelem$79637$$, 
         False]}, 
      "OtherVariables" :> {
       Typeset`show$$, Typeset`bookmarkList$$, Typeset`bookmarkMode$$, 
        Typeset`animator$$, Typeset`animvar$$, Typeset`name$$, 
        Typeset`specs$$, Typeset`size$$, Typeset`update$$, Typeset`initDone$$,
         Typeset`skipInitDone$$}, "Body" :> Show[
        BarChart3D[
         Map[Reverse, 
          $CellContext`data[$CellContext`prop$$]], ChartLayout -> "Grid", 
         ChartElementFunction -> $CellContext`chartelem$$, 
         BoxRatios -> {18, 10, 5}, Boxed -> True, 
         Method -> {"Canvas" -> None}, Ticks -> {None, None, Automatic}, 
         FaceGrids -> {{0, -1, 0}, {1, 0, 0}}, ViewAngle -> Pi/4.5, 
         ViewPoint -> {0, 1/5, 1}, ViewVertical -> {0, 0, 1}, 
         ImageSize -> {500, 300}], AxesEdge -> {None, None, {1, -1}}], 
      "Specifications" :> {{{$CellContext`prop$$, "AtomicNumber", 
          "element property"}, {
         "Name", "AtomicNumber", "AtomicRadius", "AtomicWeight", 
          "BoilingPoint", "CrustAbundance", "Density", "ElectronAffinity", 
          "Electronegativity", "FusionHeat", "HalfLife", "KnownIsotopes", 
          "MeltingPoint", "OceanAbundance", "SolarAbundance", "SpecificHeat", 
          "ThermalConductivity", "UniverseAbundance"}, ControlPlacement -> 1}, 
        Dynamic[
         Row[{
           Manipulate`Place[1], 
           Spacer[20], "unit: ", 
           Dynamic[
            
            With[{$CellContext`unit = 
              ElementData["H", $CellContext`prop$$, "UnitsNotation"]}, 
             If[
              MatchQ[$CellContext`unit, 
               Alternatives[
                HoldPattern[
                 ElementData[
                  BlankSequence[]]], 
                Missing[
                 Blank[]]]], "not available", $CellContext`unit]]]}], 
         SynchronousUpdating -> 
         False], {{$CellContext`chartelem$$, "FadingCube", "bar style"}, {
         "Cone" -> "cone", "Cube" -> "cube", "Cylinder" -> "cylinder", 
          "FadingCube" -> "fading cube", "ProfileCube" -> " profile bar"}}}, 
      "Options" :> {
       SynchronousUpdating -> False, SynchronousInitialization -> False}, 
      "DefaultOptions" :> {}],
     ImageSizeCache->{543., {202., 208.}},
     SingleEvaluation->True],
    Deinitialization:>None,
    DynamicModuleValues:>{},
    Initialization:>(($CellContext`props = {
        "Name", "AtomicNumber", "AtomicRadius", "AtomicWeight", 
         "BoilingPoint", "CrustAbundance", "Density", "ElectronAffinity", 
         "Electronegativity", "FusionHeat", "HalfLife", "KnownIsotopes", 
         "MeltingPoint", "OceanAbundance", "SolarAbundance", "SpecificHeat", 
         "ThermalConductivity", "UniverseAbundance"}; 
      Map[($CellContext`data[#] = ReplaceAll[
          Part[
           ColorData["Atoms", "Image"], 1, 2], {{
             Pattern[$CellContext`color, 
              Blank[]], 
             Rectangle[
              BlankSequence[]], 
             Inset[
              Style[
               Pattern[$CellContext`element, 
                Blank[]], 
               BlankSequence[]], 
              BlankNullSequence[]]} :> 
           With[{$CellContext`value = ElementData[$CellContext`element, #]}, 
             If[
              MatchQ[$CellContext`value, 
               Missing[
                Blank[]]], 
              Labeled[
               Style[
                Tooltip[0, 
                 ReplaceAll[$CellContext`value, Missing[
                    Pattern[$CellContext`s, 
                    Blank[]]] -> $CellContext`s]], White], 
               
               Style[$CellContext`element, "Label", 9, Background -> 
                Opacity[0.5, White]], Above], 
              Labeled[
               Style[$CellContext`value, $CellContext`color], 
               
               Style[$CellContext`element, "Label", 9, Background -> 
                Opacity[0.5, White]], Above]]], {} -> 
           None}])& , $CellContext`props]; Null); Typeset`initDone$$ = True),
    SynchronousInitialization->False,
    UnsavedVariables:>{Typeset`initDone$$},
    UntrackedVariables:>{Typeset`size$$}], "Manipulate",
   Deployed->True,
   StripOnInput->False],
  Manipulate`InterpretManipulate[1]]], "Output",
 CellChangeTimes->{
  3.525007757978932*^9, {3.525011159606825*^9, 3.525011184556076*^9}, {
   3.5250112716134644`*^9, 3.5250112779732738`*^9}, {3.525011319052041*^9, 
   3.5250113483011637`*^9}, 3.525088558595995*^9, {3.526218510655262*^9, 
   3.5262185207750597`*^9}}]
}, {2}]],

Cell[CellGroupData[{

Cell["Constants", "Section",
 CellChangeTimes->{{3.526220533338852*^9, 3.5262205390658517`*^9}}],

Cell[TextData[Cell[BoxData[
 FormBox[
  RowBox[{
   SuperscriptBox["ke", "2"], "=", 
   RowBox[{"1.44", " ", "eV", " ", "nm"}]}], TraditionalForm]],
 FormatType->"TraditionalForm"]], "Item",
 CellChangeTimes->{{3.5262205485858517`*^9, 3.526220568155852*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell["Online Homework", "Section",
 CellChangeTimes->{{3.523795257902218*^9, 3.523795263987578*^9}}],

Cell[CellGroupData[{

Cell["Unit 1", "Subsection",
 CellChangeTimes->{{3.5243074544611273`*^9, 3.524307455843721*^9}}],

Cell[CellGroupData[{

Cell["Other Functions", "Subsubsection",
 CellChangeTimes->{{3.5243076403987617`*^9, 3.524307647278803*^9}}],

Cell[TextData[{
 "t = ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    SubscriptBox["t", "0"], "\[Gamma]"}], TraditionalForm]]],
 "\nl = ",
 Cell[BoxData[
  FormBox[
   FractionBox[
    SubscriptBox["l", "0"], "\[Gamma]"], TraditionalForm]]],
 "\nPV = nRT (*n is number of moles*)\nPN = ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    SubscriptBox["NK", "b"], "T", " ", 
    RowBox[{"(*", " ", 
     RowBox[{"N", " ", "is", " ", "number", " ", "of", " ", "molecules"}], 
     " ", "*)"}]}], TraditionalForm]]],
 "\n",
 Cell[BoxData[
  FormBox[
   RowBox[{"\[Lambda]", "=", 
    RowBox[{
     FractionBox[
      RowBox[{
       SubscriptBox["k", "b"], "*", "T"}], 
      RowBox[{
       SqrtBox["2"], "*", "\[Pi]", "*", 
       SuperscriptBox["d", "2"], "P"}]], "=", 
     SuperscriptBox[
      RowBox[{"(", 
       RowBox[{
        SqrtBox["2"], "*", "n", "*", "\[Sigma]"}], ")"}], 
      RowBox[{"-", "1"}]]}]}], TraditionalForm]]],
 "(* T is temp, P is pressure, d is diameter of gas particles, ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    SubscriptBox["k", "b"], " ", "is", " ", "the", "  ", "botlzmann", " ", 
    "constant"}], TraditionalForm]]],
 ", n is number of target particles, \[Sigma] is the effective cross \
sectional area for collision *)\nAvagadro\[CloseCurlyQuote]s number: \
6.0221499*^23 ",
 Cell[BoxData[
  FormBox[
   FractionBox["atoms", "mole"], TraditionalForm]]],
 "\nBoltzman\[CloseCurlyQuote]s constant: ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    SubscriptBox["k", "b"], "=", " ", 
    RowBox[{"1.38065", "*"}]}], TraditionalForm]]],
 "*^-23 ",
 Cell[BoxData[
  FormBox[
   FractionBox["J", "K"], TraditionalForm]]],
 "= 8.6173324 *^.5 ",
 Cell[BoxData[
  FormBox[
   FractionBox["EV", "K"], TraditionalForm]]],
 "\nIdeal Gas Constant: R = 8.3144621 ",
 Cell[BoxData[
  FormBox[
   FractionBox["J", 
    RowBox[{"K", " ", "mole"}]], TraditionalForm]]],
 "= 5.189 *^19 ",
 Cell[BoxData[
  FormBox[
   FractionBox["eV", 
    RowBox[{"K", " ", "mole"}]], TraditionalForm]]]
}], "Text",
 CellChangeTimes->{{3.524307691248584*^9, 3.524307713983523*^9}, {
  3.525008856370932*^9, 3.525009096494932*^9}, {3.525009548335932*^9, 
  3.5250097239679317`*^9}}],

Cell[BoxData[
 RowBox[{"Needs", "[", "\"\<PhysicalConstants`\>\"", "]"}]], "Input",
 CellChangeTimes->{{3.524489138799349*^9, 3.5244891504006166`*^9}}],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"\[Gamma]", "[", "\[Beta]_", "]"}], " ", ":=", " ", 
   FractionBox["1", 
    SqrtBox[
     RowBox[{"1", "-", 
      SuperscriptBox["\[Beta]", "2"]}]]]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"\[Beta]", "[", "v_", "]"}], " ", ":=", 
   FractionBox["v", "3*^8"]}], ";"}]}], "Input",
 CellChangeTimes->{{3.524489056420527*^9, 3.524489093057214*^9}, {
  3.5244891346917477`*^9, 3.524489156954249*^9}, {3.524489260334528*^9, 
  3.524489262700238*^9}, {3.525009136004932*^9, 3.525009137796932*^9}}],

Cell[BoxData[{
 RowBox[{
  RowBox[{"r", " ", "=", " ", "8.3144621"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"k", " ", "=", " ", "1.38065*^-23"}], ";"}]}], "Input",
 CellChangeTimes->{{3.525009140314932*^9, 3.5250091842719316`*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell["Lorentz Transformations", "Subsubsection",
 CellChangeTimes->{{3.5243074704523487`*^9, 3.524307474478012*^9}}],

Cell["\<\
x = \[Gamma](x\[CloseCurlyQuote]+\[Beta]ct\[CloseCurlyQuote])
y= y\[CloseCurlyQuote]
z=z\[CloseCurlyQuote]
ct = \[Gamma]( ct\[CloseCurlyQuote] + \[Beta]x\[CloseCurlyQuote])\
\>", "Text",
 CellChangeTimes->{{3.5243075149793367`*^9, 3.524307546138093*^9}}]
}, Closed]],

Cell[CellGroupData[{

Cell["Due 9-1-11 Math Review", "Subsubsection",
 CellChangeTimes->{{3.523795266260489*^9, 3.523795274451685*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"a", " ", "=", " ", 
  RowBox[{"b", " ", "+", 
   RowBox[{"I", " ", "c"}]}]}]], "Input",
 CellChangeTimes->{{3.523795283501199*^9, 3.523795295678875*^9}}],

Cell[BoxData[
 FormBox[
  RowBox[{"b", "+", 
   RowBox[{"\[ImaginaryI]", " ", "c"}]}], TraditionalForm]], "Output",
 CellChangeTimes->{{3.523795291184327*^9, 3.5237952968985767`*^9}}]
}, Closed]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"b", 
  RowBox[{"(", "a", ")"}]}]], "Input",
 CellChangeTimes->{{3.523795303293353*^9, 3.523795304597406*^9}}],

Cell[BoxData[
 FormBox[
  RowBox[{"b", " ", 
   RowBox[{"(", 
    RowBox[{"b", "+", 
     RowBox[{"\[ImaginaryI]", " ", "c"}]}], ")"}]}], 
  TraditionalForm]], "Output",
 CellChangeTimes->{3.523795305193935*^9}]
}, Closed]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Simplify", "[", "%", "]"}]], "Input",
 CellChangeTimes->{{3.52379530779521*^9, 3.523795317692045*^9}}],

Cell[BoxData[
 FormBox[
  RowBox[{"b", " ", 
   RowBox[{"(", 
    RowBox[{"b", "+", 
     RowBox[{"\[ImaginaryI]", " ", "c"}]}], ")"}]}], 
  TraditionalForm]], "Output",
 CellChangeTimes->{3.5237953181965513`*^9}]
}, Closed]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"Conjugate", "[", "a", "]"}], "+", "a"}]], "Input",
 CellChangeTimes->{{3.5237953334700327`*^9, 3.523795337635448*^9}}],

Cell[BoxData[
 FormBox[
  RowBox[{
   TemplateBox[{"b"},
    "Conjugate"], "+", "b", "-", 
   RowBox[{"\[ImaginaryI]", " ", 
    TemplateBox[{"c"},
     "Conjugate"]}], "+", 
   RowBox[{"\[ImaginaryI]", " ", "c"}]}], TraditionalForm]], "Output",
 CellChangeTimes->{3.5237953384975653`*^9}]
}, Closed]],

Cell[CellGroupData[{

Cell["Integrate[(7-x) * Cos[4x],x]", "WolframAlphaLong",
 CellChangeTimes->{{3.52379557007156*^9, 3.5237955871061068`*^9}}],

Cell[BoxData[
 NamespaceBox["WolframAlphaQueryResults",
  DynamicModuleBox[{Typeset`q$$ = "Integrate[(7-x) * Cos[4x],x]", 
   Typeset`opts$$ = {
   AppearanceElements -> {
     "Warnings", "Assumptions", "Brand", "Pods", "PodMenus", "Unsuccessful", 
      "Sources"}, Asynchronous -> All, 
    TimeConstraint -> {30, Automatic, Automatic, Automatic}, 
    Method -> {
     "Formats" -> {"cell", "minput", "msound", "dataformats"}, "Server" -> 
      "http://api.wolframalpha.com/v1/"}, 
    PodStates -> {"IndefiniteIntegral__Show steps"}}, Typeset`elements$$ = {
   "Warnings", "Assumptions", "Brand", "Pods", "PodMenus", "Unsuccessful", 
    "Sources"}, Typeset`pod1$$ = XMLElement[
   "pod", {"title" -> "Indefinite integrals", "scanner" -> "Integral", "id" -> 
     "IndefiniteIntegral", "position" -> "100", "error" -> "false", 
     "numsubpods" -> "2", "primary" -> "true"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["minput", {}, {"Integrate[(7 - x) Cos[4 x], x]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            RowBox[{
              TagBox[
               TagBox[
                RowBox[{"\[Integral]", 
                  RowBox[{
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"7", "-", "x"}], ")"}], " ", 
                    RowBox[{"cos", "(", 
                    RowBox[{"4", " ", "x"}], ")"}]}], 
                    RowBox[{"\[DifferentialD]", "x"}]}]}], HoldForm], 
               PolynomialForm[#, TraditionalOrder -> False]& ], 
              "\[LongEqual]", 
              StyleBox[
               RowBox[{
                 StyleBox[
                  RowBox[{
                    FractionBox["1", "16"], " ", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"-", 
                    RowBox[{"4", " ", 
                    RowBox[{"(", 
                    RowBox[{"x", "-", "7"}], ")"}], " ", 
                    RowBox[{"sin", "(", 
                    RowBox[{"4", " ", "x"}], ")"}]}]}], "-", 
                    RowBox[{
                    RowBox[{"cos", "(", 
                    RowBox[{"4", " ", "x"}], ")"}]}]}], ")"}]}], 
                  GrayLevel[0]], "+", 
                 StyleBox[
                 "constant", FontFamily -> "Helvetica", Magnification -> 
                  0.9 Inherited]}], 
               GrayLevel[0.6]]}], TraditionalForm]], "Output"]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata,formuladata"}]}\
], 
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["cell", {"compressed" -> True, "string" -> False}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             GridBox[{{
                StyleBox[
                 StyleBox[
                 "\"Possible intermediate steps:\"", 
                  LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                  0, StripOnInput -> False], FontColor -> GrayLevel[0.5], 
                 FontSize -> Smaller, StripOnInput -> False]}, {
                InterpretationBox[
                 Cell[
                  BoxData[
                   FormBox[
                    TagBox[
                    RowBox[{"\[Integral]", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"7", "-", "x"}], ")"}], " ", 
                    RowBox[{"cos", "(", 
                    RowBox[{"4", " ", "x"}], ")"}]}], 
                    RowBox[{"\[DifferentialD]", "x"}]}]}], HoldForm], 
                    TraditionalForm]]], 
                 ExpressionCell[
                  HoldForm[
                   Integrate[(7 - Global`x) Cos[4 Global`x], Global`x]]]]}, {
                StyleBox[
                 StyleBox[
                  TemplateBox[{"\"Expanding the integrand \"", 
                    InterpretationBox[
                    Cell[
                    BoxData[
                    FormBox[
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"7", "-", "x"}], ")"}], " ", 
                    RowBox[{"cos", "(", 
                    RowBox[{"4", " ", "x"}], ")"}]}], TraditionalForm]]], 
                    ExpressionCell[(7 - Global`x) Cos[4 Global`x]]], 
                    "\" gives \"", 
                    InterpretationBox[
                    Cell[
                    BoxData[
                    FormBox[
                    RowBox[{
                    RowBox[{"7", " ", 
                    RowBox[{"cos", "(", 
                    RowBox[{"4", " ", "x"}], ")"}]}], "-", 
                    RowBox[{"x", " ", 
                    RowBox[{"cos", "(", 
                    RowBox[{"4", " ", "x"}], ")"}]}]}], TraditionalForm]]], 
                    ExpressionCell[
                    7 Cos[4 Global`x] - Global`x Cos[4 Global`x]]], "\":\""}, 
                   "Row", DisplayFunction -> (
                    RowBox[{#, "\[InvisibleSpace]", #2, 
                    "\[InvisibleSpace]", #3, "\[InvisibleSpace]", #4, 
                    "\[InvisibleSpace]", #5}]& ), 
                   InterpretationFunction -> (RowBox[{
                    StyleBox[
                    "Row", FontFamily -> "Bitstream Vera Sans", 
                    FontSize -> -1 + Inherited], "[", 
                    RowBox[{"{", 
                    RowBox[{#, ",", #2, ",", #3, ",", #4, ",", #5}], "}"}], 
                    "]"}]& )], LinebreakAdjustments -> {1, 100, 1, 0, 100}, 
                  LineIndent -> 0, StripOnInput -> False], FontColor -> 
                 GrayLevel[0.5], FontSize -> Smaller, StripOnInput -> 
                 False]}, {
                InterpretationBox[
                 Cell[
                  BoxData[
                   FormBox[
                    RowBox[{
                    TagBox["\"\"", HoldForm], "\[LongEqual]", 
                    RowBox[{"\[Integral]", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"7", " ", 
                    RowBox[{"cos", "(", 
                    RowBox[{"4", " ", "x"}], ")"}]}], "-", 
                    RowBox[{"x", " ", 
                    RowBox[{"cos", "(", 
                    RowBox[{"4", " ", "x"}], ")"}]}]}], ")"}], 
                    RowBox[{"\[DifferentialD]", "x"}]}]}]}], 
                    TraditionalForm]]], 
                 ExpressionCell[
                 HoldForm[""] == 
                  CalculateScan`StepByStepIntegrate`CommonFunctions`IntRun[
                   7 Cos[4 Global`x] - Global`x Cos[4 Global`x], 
                    Global`x]]]}, {
                StyleBox[
                 StyleBox[
                  
                  TemplateBox[{
                   "\"Integrate the sum term by term and factor out \
constants:\""}, "Row", DisplayFunction -> (#& ), 
                   InterpretationFunction -> (RowBox[{
                    StyleBox[
                    "Row", FontFamily -> "Bitstream Vera Sans", 
                    FontSize -> -1 + Inherited], "[", 
                    RowBox[{"{", #, "}"}], "]"}]& )], 
                  LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                  0, StripOnInput -> False], FontColor -> GrayLevel[0.5], 
                 FontSize -> Smaller, StripOnInput -> False]}, {
                InterpretationBox[
                 Cell[
                  BoxData[
                   FormBox[
                    RowBox[{
                    TagBox["\"\"", HoldForm], "\[LongEqual]", 
                    RowBox[{
                    RowBox[{"7", 
                    RowBox[{"\[Integral]", 
                    RowBox[{
                    RowBox[{"cos", "(", 
                    RowBox[{"4", " ", "x"}], ")"}], 
                    RowBox[{"\[DifferentialD]", "x"}]}]}]}], "-", 
                    RowBox[{"\[Integral]", 
                    RowBox[{
                    RowBox[{"x", " ", 
                    RowBox[{"cos", "(", 
                    RowBox[{"4", " ", "x"}], ")"}]}], 
                    RowBox[{"\[DifferentialD]", "x"}]}]}]}]}], 
                    TraditionalForm]]], 
                 ExpressionCell[
                 HoldForm[""] == 
                  7 CalculateScan`StepByStepIntegrate`CommonFunctions`IntRun[
                    Cos[4 Global`x], Global`x] - 
                   CalculateScan`StepByStepIntegrate`CommonFunctions`IntRun[
                   Global`x Cos[4 Global`x], Global`x]]]}, {
                StyleBox[
                 StyleBox[
                  TemplateBox[{"\"For the integrand \"", 
                    InterpretationBox[
                    Cell[
                    BoxData[
                    FormBox[
                    RowBox[{"x", " ", 
                    RowBox[{"cos", "(", 
                    RowBox[{"4", " ", "x"}], ")"}]}], TraditionalForm]]], 
                    ExpressionCell[Global`x Cos[4 Global`x]]], 
                    "\", integrate by parts, \"", 
                    InterpretationBox[
                    Cell[
                    BoxData[
                    FormBox[
                    RowBox[{
                    TagBox[
                    RowBox[{"\[Integral]", 
                    RowBox[{"f", 
                    RowBox[{"\[DifferentialD]", "g"}]}]}], HoldForm], 
                    "\[LongEqual]", 
                    RowBox[{
                    RowBox[{"f", " ", "g"}], "-", 
                    TagBox[
                    RowBox[{"\[Integral]", 
                    RowBox[{"g", 
                    RowBox[{"\[DifferentialD]", "f"}]}]}], HoldForm]}]}], 
                    TraditionalForm]]], 
                    ExpressionCell[HoldForm[
                    Integrate[Global`f, Global`g]] == 
                    Global`f Global`g - HoldForm[
                    Integrate[Global`g, Global`f]]]], "\", where \\n \"", 
                    InterpretationBox[
                    Cell[
                    BoxData[
                    FormBox[
                    RowBox[{"f", "\[LongEqual]", "x"}], TraditionalForm]]], 
                    ExpressionCell[Global`f == Global`x]], "\",    \"", 
                    InterpretationBox[
                    Cell[
                    BoxData[
                    FormBox[
                    RowBox[{
                    
                    RowBox[{
                    "\[DifferentialD]", "\[NegativeVeryThinSpace]", "g"}], 
                    "\[LongEqual]", 
                    RowBox[{"cos", "(", 
                    RowBox[{"4", " ", "x"}], ")"}]}], TraditionalForm]]], 
                    ExpressionCell[
                    CalculateScan`StepByStepIntegrate`CommonFunctions`dd[
                    Global`g] == Cos[4 Global`x]]], 
                    InterpretationBox[
                    Cell[
                    BoxData[
                    FormBox[
                    
                    RowBox[{
                    "\[DifferentialD]", "\[NegativeVeryThinSpace]", "x"}], 
                    TraditionalForm]]], 
                    ExpressionCell[
                    CalculateScan`StepByStepIntegrate`CommonFunctions`dd[
                    Global`x]]], "\",\\n\"", 
                    InterpretationBox[
                    Cell[
                    BoxData[
                    FormBox[
                    RowBox[{
                    
                    RowBox[{
                    "\[DifferentialD]", "\[NegativeVeryThinSpace]", "f"}], 
                    "\[LongEqual]", "\"\""}], TraditionalForm]]], 
                    ExpressionCell[
                    CalculateScan`StepByStepIntegrate`CommonFunctions`dd[
                    Global`f] == ""]], 
                    InterpretationBox[
                    Cell[
                    BoxData[
                    FormBox[
                    
                    RowBox[{
                    "\[DifferentialD]", "\[NegativeVeryThinSpace]", "x"}], 
                    TraditionalForm]]], 
                    ExpressionCell[
                    CalculateScan`StepByStepIntegrate`CommonFunctions`dd[
                    Global`x]]], "\",     \"", 
                    InterpretationBox[
                    Cell[
                    BoxData[
                    FormBox[
                    RowBox[{"g", "\[LongEqual]", 
                    RowBox[{
                    FractionBox["1", "4"], " ", 
                    RowBox[{"sin", "(", 
                    RowBox[{"4", " ", "x"}], ")"}]}]}], TraditionalForm]]], 
                    ExpressionCell[
                    Global`g == Rational[1, 4] Sin[4 Global`x]]], "\":\""}, 
                   "Row", DisplayFunction -> (
                    RowBox[{#, "\[InvisibleSpace]", #2, 
                    "\[InvisibleSpace]", #3, "\[InvisibleSpace]", #4, 
                    "\[InvisibleSpace]", #5, "\[InvisibleSpace]", #6, 
                    "\[InvisibleSpace]", #7, "\[InvisibleSpace]", #8, 
                    "\[InvisibleSpace]", #9, "\[InvisibleSpace]", #10, 
                    "\[InvisibleSpace]", #11, "\[InvisibleSpace]", #12, 
                    "\[InvisibleSpace]", #13, "\[InvisibleSpace]", #14, 
                    "\[InvisibleSpace]", #15}]& ), 
                   InterpretationFunction -> (RowBox[{
                    StyleBox[
                    "Row", FontFamily -> "Bitstream Vera Sans", 
                    FontSize -> -1 + Inherited], "[", 
                    RowBox[{"{", 
                    
                    RowBox[{#, ",", #2, ",", #3, ",", #4, ",", #5, ",", #6, 
                    ",", #7, ",", #8, ",", #9, ",", #10, ",", #11, ",", #12, 
                    ",", #13, ",", #14, ",", #15}], "}"}], "]"}]& )], 
                  LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                  0, StripOnInput -> False], FontColor -> GrayLevel[0.5], 
                 FontSize -> Smaller, StripOnInput -> False]}, {
                InterpretationBox[
                 Cell[
                  BoxData[
                   FormBox[
                    RowBox[{
                    TagBox["\"\"", HoldForm], "\[LongEqual]", 
                    RowBox[{
                    RowBox[{"-", 
                    RowBox[{
                    FractionBox["1", "4"], " ", "x", " ", 
                    RowBox[{"sin", "(", 
                    RowBox[{"4", " ", "x"}], ")"}]}]}], "+", 
                    RowBox[{
                    FractionBox["1", "4"], 
                    RowBox[{"\[Integral]", 
                    RowBox[{
                    RowBox[{"sin", "(", 
                    RowBox[{"4", " ", "x"}], ")"}], 
                    RowBox[{"\[DifferentialD]", "x"}]}]}]}], "+", 
                    RowBox[{"7", 
                    RowBox[{"\[Integral]", 
                    RowBox[{
                    RowBox[{"cos", "(", 
                    RowBox[{"4", " ", "x"}], ")"}], 
                    RowBox[{"\[DifferentialD]", "x"}]}]}]}]}]}], 
                    TraditionalForm]]], 
                 ExpressionCell[
                 HoldForm[""] == 
                  7 CalculateScan`StepByStepIntegrate`CommonFunctions`IntRun[
                    Cos[4 Global`x], Global`x] + 
                   Rational[1, 4] 
                    CalculateScan`StepByStepIntegrate`CommonFunctions`IntRun[
                    Sin[4 Global`x], Global`x] + (Rational[-1, 4] Global`x) 
                    Sin[4 Global`x]]]}, {
                StyleBox[
                 StyleBox[
                  TemplateBox[{"\"For the integrand \"", 
                    InterpretationBox[
                    Cell[
                    BoxData[
                    FormBox[
                    RowBox[{"sin", "(", 
                    RowBox[{"4", " ", "x"}], ")"}], TraditionalForm]]], 
                    ExpressionCell[
                    Sin[4 Global`x]]], "\", substitute \"", 
                    InterpretationBox[
                    Cell[
                    BoxData[
                    FormBox[
                    RowBox[{"u", "\[LongEqual]", 
                    RowBox[{"4", " ", "x"}]}], TraditionalForm]]], 
                    ExpressionCell[Global`u == 4 Global`x]], "\" and \"", 
                    InterpretationBox[
                    Cell[
                    BoxData[
                    FormBox[
                    RowBox[{
                    
                    RowBox[{
                    "\[DifferentialD]", "\[NegativeVeryThinSpace]", "u"}], 
                    "\[LongEqual]", "4"}], TraditionalForm]]], 
                    ExpressionCell[
                    CalculateScan`StepByStepIntegrate`CommonFunctions`dd[
                    Global`u] == 4]], 
                    InterpretationBox[
                    Cell[
                    BoxData[
                    FormBox[
                    
                    RowBox[{
                    "\[DifferentialD]", "\[NegativeVeryThinSpace]", "x"}], 
                    TraditionalForm]]], 
                    ExpressionCell[
                    CalculateScan`StepByStepIntegrate`CommonFunctions`dd[
                    Global`x]]], "\":\""}, "Row", 
                   DisplayFunction -> (
                    RowBox[{#, "\[InvisibleSpace]", #2, 
                    "\[InvisibleSpace]", #3, "\[InvisibleSpace]", #4, 
                    "\[InvisibleSpace]", #5, "\[InvisibleSpace]", #6, 
                    "\[InvisibleSpace]", #7, "\[InvisibleSpace]", #8}]& ), 
                   InterpretationFunction -> (RowBox[{
                    StyleBox[
                    "Row", FontFamily -> "Bitstream Vera Sans", 
                    FontSize -> -1 + Inherited], "[", 
                    RowBox[{"{", 
                    
                    RowBox[{#, ",", #2, ",", #3, ",", #4, ",", #5, ",", #6, 
                    ",", #7, ",", #8}], "}"}], "]"}]& )], 
                  LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                  0, StripOnInput -> False], FontColor -> GrayLevel[0.5], 
                 FontSize -> Smaller, StripOnInput -> False]}, {
                InterpretationBox[
                 Cell[
                  BoxData[
                   FormBox[
                    RowBox[{
                    TagBox["\"\"", HoldForm], "\[LongEqual]", 
                    RowBox[{
                    RowBox[{
                    FractionBox["1", "16"], 
                    RowBox[{"\[Integral]", 
                    RowBox[{
                    RowBox[{"sin", "(", "u", ")"}], 
                    RowBox[{"\[DifferentialD]", "u"}]}]}]}], "-", 
                    RowBox[{
                    FractionBox["1", "4"], " ", "x", " ", 
                    RowBox[{"sin", "(", 
                    RowBox[{"4", " ", "x"}], ")"}]}], "+", 
                    RowBox[{"7", 
                    RowBox[{"\[Integral]", 
                    RowBox[{
                    RowBox[{"cos", "(", 
                    RowBox[{"4", " ", "x"}], ")"}], 
                    RowBox[{"\[DifferentialD]", "x"}]}]}]}]}]}], 
                    TraditionalForm]]], 
                 ExpressionCell[
                 HoldForm[""] == 
                  7 CalculateScan`StepByStepIntegrate`CommonFunctions`IntRun[
                    Cos[4 Global`x], Global`x] + 
                   Rational[1, 16] 
                    CalculateScan`StepByStepIntegrate`CommonFunctions`IntRun[
                    Sin[Global`u], Global`u] + (Rational[-1, 4] Global`x) 
                    Sin[4 Global`x]]]}, {
                StyleBox[
                 StyleBox[
                  TemplateBox[{"\"The integral of \"", 
                    InterpretationBox[
                    Cell[
                    BoxData[
                    FormBox[
                    RowBox[{"sin", "(", "u", ")"}], TraditionalForm]]], 
                    ExpressionCell[
                    Sin[Global`u]]], "\" is \"", 
                    InterpretationBox[
                    Cell[
                    BoxData[
                    FormBox[
                    RowBox[{"-", 
                    RowBox[{"cos", "(", "u", ")"}]}], TraditionalForm]]], 
                    ExpressionCell[-Cos[Global`u]]], "\":\""}, "Row", 
                   DisplayFunction -> (
                    RowBox[{#, "\[InvisibleSpace]", #2, 
                    "\[InvisibleSpace]", #3, "\[InvisibleSpace]", #4, 
                    "\[InvisibleSpace]", #5}]& ), 
                   InterpretationFunction -> (RowBox[{
                    StyleBox[
                    "Row", FontFamily -> "Bitstream Vera Sans", 
                    FontSize -> -1 + Inherited], "[", 
                    RowBox[{"{", 
                    RowBox[{#, ",", #2, ",", #3, ",", #4, ",", #5}], "}"}], 
                    "]"}]& )], LinebreakAdjustments -> {1, 100, 1, 0, 100}, 
                  LineIndent -> 0, StripOnInput -> False], FontColor -> 
                 GrayLevel[0.5], FontSize -> Smaller, StripOnInput -> 
                 False]}, {
                InterpretationBox[
                 Cell[
                  BoxData[
                   FormBox[
                    RowBox[{
                    TagBox["\"\"", HoldForm], "\[LongEqual]", 
                    RowBox[{
                    RowBox[{"-", 
                    RowBox[{
                    FractionBox[
                    RowBox[{"cos", "(", "u", ")"}], "16"]}]}], "-", 
                    RowBox[{
                    FractionBox["1", "4"], " ", "x", " ", 
                    RowBox[{"sin", "(", 
                    RowBox[{"4", " ", "x"}], ")"}]}], "+", 
                    RowBox[{"7", 
                    RowBox[{"\[Integral]", 
                    RowBox[{
                    RowBox[{"cos", "(", 
                    RowBox[{"4", " ", "x"}], ")"}], 
                    RowBox[{"\[DifferentialD]", "x"}]}]}]}]}]}], 
                    TraditionalForm]]], 
                 ExpressionCell[
                 HoldForm[""] == 
                  Rational[-1, 16] Cos[Global`u] + 
                   7 CalculateScan`StepByStepIntegrate`CommonFunctions`IntRun[
                    
                    Cos[4 Global`x], Global`x] + (Rational[-1, 4] Global`x) 
                    Sin[4 Global`x]]]}, {
                StyleBox[
                 StyleBox[
                  TemplateBox[{"\"For the integrand \"", 
                    InterpretationBox[
                    Cell[
                    BoxData[
                    FormBox[
                    RowBox[{"cos", "(", 
                    RowBox[{"4", " ", "x"}], ")"}], TraditionalForm]]], 
                    ExpressionCell[
                    Cos[4 Global`x]]], "\", substitute \"", 
                    InterpretationBox[
                    Cell[
                    BoxData[
                    FormBox[
                    RowBox[{"s", "\[LongEqual]", 
                    RowBox[{"4", " ", "x"}]}], TraditionalForm]]], 
                    ExpressionCell[Global`s == 4 Global`x]], "\" and \"", 
                    InterpretationBox[
                    Cell[
                    BoxData[
                    FormBox[
                    RowBox[{
                    
                    RowBox[{
                    "\[DifferentialD]", "\[NegativeVeryThinSpace]", "s"}], 
                    "\[LongEqual]", "4"}], TraditionalForm]]], 
                    ExpressionCell[
                    CalculateScan`StepByStepIntegrate`CommonFunctions`dd[
                    Global`s] == 4]], 
                    InterpretationBox[
                    Cell[
                    BoxData[
                    FormBox[
                    
                    RowBox[{
                    "\[DifferentialD]", "\[NegativeVeryThinSpace]", "x"}], 
                    TraditionalForm]]], 
                    ExpressionCell[
                    CalculateScan`StepByStepIntegrate`CommonFunctions`dd[
                    Global`x]]], "\":\""}, "Row", 
                   DisplayFunction -> (
                    RowBox[{#, "\[InvisibleSpace]", #2, 
                    "\[InvisibleSpace]", #3, "\[InvisibleSpace]", #4, 
                    "\[InvisibleSpace]", #5, "\[InvisibleSpace]", #6, 
                    "\[InvisibleSpace]", #7, "\[InvisibleSpace]", #8}]& ), 
                   InterpretationFunction -> (RowBox[{
                    StyleBox[
                    "Row", FontFamily -> "Bitstream Vera Sans", 
                    FontSize -> -1 + Inherited], "[", 
                    RowBox[{"{", 
                    
                    RowBox[{#, ",", #2, ",", #3, ",", #4, ",", #5, ",", #6, 
                    ",", #7, ",", #8}], "}"}], "]"}]& )], 
                  LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                  0, StripOnInput -> False], FontColor -> GrayLevel[0.5], 
                 FontSize -> Smaller, StripOnInput -> False]}, {
                InterpretationBox[
                 Cell[
                  BoxData[
                   FormBox[
                    RowBox[{
                    TagBox["\"\"", HoldForm], "\[LongEqual]", 
                    RowBox[{
                    RowBox[{
                    FractionBox["7", "4"], 
                    RowBox[{"\[Integral]", 
                    RowBox[{
                    RowBox[{"cos", "(", "s", ")"}], 
                    RowBox[{"\[DifferentialD]", "s"}]}]}]}], "-", 
                    RowBox[{
                    FractionBox[
                    RowBox[{"cos", "(", "u", ")"}], "16"]}], "-", 
                    RowBox[{
                    FractionBox["1", "4"], " ", "x", " ", 
                    RowBox[{"sin", "(", 
                    RowBox[{"4", " ", "x"}], ")"}]}]}]}], TraditionalForm]]], 
                 
                 ExpressionCell[
                 HoldForm[""] == 
                  Rational[-1, 16] Cos[Global`u] + 
                   Rational[7, 4] 
                    CalculateScan`StepByStepIntegrate`CommonFunctions`IntRun[
                    Cos[Global`s], Global`s] + (Rational[-1, 4] Global`x) 
                    Sin[4 Global`x]]]}, {
                StyleBox[
                 StyleBox[
                  TemplateBox[{"\"The integral of \"", 
                    InterpretationBox[
                    Cell[
                    BoxData[
                    FormBox[
                    RowBox[{"cos", "(", "s", ")"}], TraditionalForm]]], 
                    ExpressionCell[
                    Cos[Global`s]]], "\" is \"", 
                    InterpretationBox[
                    Cell[
                    BoxData[
                    FormBox[
                    RowBox[{"sin", "(", "s", ")"}], TraditionalForm]]], 
                    ExpressionCell[
                    Sin[Global`s]]], "\":\""}, "Row", 
                   DisplayFunction -> (
                    RowBox[{#, "\[InvisibleSpace]", #2, 
                    "\[InvisibleSpace]", #3, "\[InvisibleSpace]", #4, 
                    "\[InvisibleSpace]", #5}]& ), 
                   InterpretationFunction -> (RowBox[{
                    StyleBox[
                    "Row", FontFamily -> "Bitstream Vera Sans", 
                    FontSize -> -1 + Inherited], "[", 
                    RowBox[{"{", 
                    RowBox[{#, ",", #2, ",", #3, ",", #4, ",", #5}], "}"}], 
                    "]"}]& )], LinebreakAdjustments -> {1, 100, 1, 0, 100}, 
                  LineIndent -> 0, StripOnInput -> False], FontColor -> 
                 GrayLevel[0.5], FontSize -> Smaller, StripOnInput -> 
                 False]}, {
                InterpretationBox[
                 Cell[
                  BoxData[
                   FormBox[
                    RowBox[{
                    TagBox["\"\"", HoldForm], "\[LongEqual]", 
                    StyleBox[
                    RowBox[{
                    StyleBox[
                    RowBox[{
                    FractionBox[
                    RowBox[{"7", " ", 
                    RowBox[{"sin", "(", "s", ")"}]}], "4"], "-", 
                    RowBox[{
                    FractionBox[
                    RowBox[{"cos", "(", "u", ")"}], "16"]}], "-", 
                    RowBox[{
                    FractionBox["1", "4"], " ", "x", " ", 
                    RowBox[{"sin", "(", 
                    RowBox[{"4", " ", "x"}], ")"}]}]}], 
                    GrayLevel[0]], "+", 
                    StyleBox[
                    "constant", FontFamily -> "Helvetica", Magnification -> 
                    0.9 Inherited]}], 
                    GrayLevel[0.6]]}], TraditionalForm]]], 
                 ExpressionCell[
                 HoldForm[""] == 
                  CalculateScan`StepByStepIntegrate`integralPlusC[
                   Rational[-1, 16] Cos[Global`u] + 
                    Rational[7, 4] Sin[Global`s] + (Rational[-1, 4] Global`x) 
                    Sin[4 Global`x]]]]}, {
                StyleBox[
                 StyleBox[
                  TemplateBox[{"\"Substitute back for \"", 
                    InterpretationBox[
                    Cell[
                    BoxData[
                    FormBox[
                    RowBox[{"s", "\[LongEqual]", 
                    RowBox[{"4", " ", "x"}]}], TraditionalForm]]], 
                    ExpressionCell[Global`s == 4 Global`x]], "\":\""}, "Row", 
                   DisplayFunction -> (
                    RowBox[{#, "\[InvisibleSpace]", #2, 
                    "\[InvisibleSpace]", #3}]& ), 
                   InterpretationFunction -> (RowBox[{
                    StyleBox[
                    "Row", FontFamily -> "Bitstream Vera Sans", 
                    FontSize -> -1 + Inherited], "[", 
                    RowBox[{"{", 
                    RowBox[{#, ",", #2, ",", #3}], "}"}], "]"}]& )], 
                  LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                  0, StripOnInput -> False], FontColor -> GrayLevel[0.5], 
                 FontSize -> Smaller, StripOnInput -> False]}, {
                InterpretationBox[
                 Cell[
                  BoxData[
                   FormBox[
                    RowBox[{
                    TagBox["\"\"", HoldForm], "\[LongEqual]", 
                    StyleBox[
                    RowBox[{
                    StyleBox[
                    RowBox[{
                    RowBox[{"-", 
                    RowBox[{
                    FractionBox[
                    RowBox[{"cos", "(", "u", ")"}], "16"]}]}], "-", 
                    RowBox[{
                    FractionBox["1", "4"], " ", "x", " ", 
                    RowBox[{"sin", "(", 
                    RowBox[{"4", " ", "x"}], ")"}]}], "+", 
                    RowBox[{
                    FractionBox["7", "4"], " ", 
                    RowBox[{"sin", "(", 
                    RowBox[{"4", " ", "x"}], ")"}]}]}], 
                    GrayLevel[0]], "+", 
                    StyleBox[
                    "constant", FontFamily -> "Helvetica", Magnification -> 
                    0.9 Inherited]}], 
                    GrayLevel[0.6]]}], TraditionalForm]]], 
                 ExpressionCell[
                 HoldForm[""] == 
                  CalculateScan`StepByStepIntegrate`integralPlusC[
                   Rational[-1, 16] Cos[Global`u] + 
                    Rational[7, 4] 
                    Sin[4 Global`x] + (Rational[-1, 4] Global`x) 
                    Sin[4 Global`x]]]]}, {
                StyleBox[
                 StyleBox[
                  TemplateBox[{"\"Substitute back for \"", 
                    InterpretationBox[
                    Cell[
                    BoxData[
                    FormBox[
                    RowBox[{"u", "\[LongEqual]", 
                    RowBox[{"4", " ", "x"}]}], TraditionalForm]]], 
                    ExpressionCell[Global`u == 4 Global`x]], "\":\""}, "Row", 
                   DisplayFunction -> (
                    RowBox[{#, "\[InvisibleSpace]", #2, 
                    "\[InvisibleSpace]", #3}]& ), 
                   InterpretationFunction -> (RowBox[{
                    StyleBox[
                    "Row", FontFamily -> "Bitstream Vera Sans", 
                    FontSize -> -1 + Inherited], "[", 
                    RowBox[{"{", 
                    RowBox[{#, ",", #2, ",", #3}], "}"}], "]"}]& )], 
                  LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                  0, StripOnInput -> False], FontColor -> GrayLevel[0.5], 
                 FontSize -> Smaller, StripOnInput -> False]}, {
                InterpretationBox[
                 Cell[
                  BoxData[
                   FormBox[
                    RowBox[{
                    TagBox["\"\"", HoldForm], "\[LongEqual]", 
                    StyleBox[
                    RowBox[{
                    StyleBox[
                    RowBox[{
                    RowBox[{"-", 
                    RowBox[{
                    FractionBox["1", "4"], " ", "x", " ", 
                    RowBox[{"sin", "(", 
                    RowBox[{"4", " ", "x"}], ")"}]}]}], "+", 
                    RowBox[{
                    FractionBox["7", "4"], " ", 
                    RowBox[{"sin", "(", 
                    RowBox[{"4", " ", "x"}], ")"}]}], "-", 
                    RowBox[{
                    RowBox[{
                    FractionBox["1", "16"]}], " ", 
                    RowBox[{"cos", "(", 
                    RowBox[{"4", " ", "x"}], ")"}]}]}], 
                    GrayLevel[0]], "+", 
                    StyleBox[
                    "constant", FontFamily -> "Helvetica", Magnification -> 
                    0.9 Inherited]}], 
                    GrayLevel[0.6]]}], TraditionalForm]]], 
                 ExpressionCell[
                 HoldForm[""] == 
                  CalculateScan`StepByStepIntegrate`integralPlusC[
                   Rational[-1, 16] Cos[4 Global`x] + 
                    Rational[7, 4] 
                    Sin[4 Global`x] + (Rational[-1, 4] Global`x) 
                    Sin[4 Global`x]]]]}, {
                StyleBox[
                 StyleBox[
                 "\"Which is equal to:\"", 
                  LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                  0, StripOnInput -> False], FontColor -> GrayLevel[0.5], 
                 FontSize -> Smaller, StripOnInput -> False]}, {
                InterpretationBox[
                 Cell[
                  BoxData[
                   FormBox[
                    RowBox[{
                    TagBox["\"\"", HoldForm], "\[LongEqual]", 
                    StyleBox[
                    RowBox[{
                    StyleBox[
                    RowBox[{
                    FractionBox["1", "16"], " ", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"-", 
                    RowBox[{"4", " ", 
                    RowBox[{"(", 
                    RowBox[{"x", "-", "7"}], ")"}], " ", 
                    RowBox[{"sin", "(", 
                    RowBox[{"4", " ", "x"}], ")"}]}]}], "-", 
                    RowBox[{
                    RowBox[{"cos", "(", 
                    RowBox[{"4", " ", "x"}], ")"}]}]}], ")"}]}], 
                    GrayLevel[0]], "+", 
                    StyleBox[
                    "constant", FontFamily -> "Helvetica", Magnification -> 
                    0.9 Inherited]}], 
                    GrayLevel[0.6]]}], TraditionalForm]]], 
                 ExpressionCell[
                 HoldForm[""] == 
                  CalculateScan`StepByStepIntegrate`integralPlusC[
                   Rational[1, 16] (-Cos[4 Global`x] - (4 (-7 + Global`x)) 
                    Sin[4 Global`x])]]]}}, 
              GridBoxAlignment -> {"Columns" -> {{Left}}}, 
              GridBoxItemSize -> {
               "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
              GridBoxSpacings -> {
               "Columns" -> {{None}}, "Rows" -> {None, {Plain, 1}}}], 
             "Column"], TraditionalForm]], "Output"]}], 
       XMLElement[
       "dataformats", {}, {"plaintext,computabledata,formatteddata"}]}], 
     XMLElement["states", {"count" -> "1"}, {
       XMLElement[
       "state", {
        "name" -> "Hide steps", "input" -> 
         "IndefiniteIntegral__Hide steps"}, {}]}]}], Typeset`pod2$$ = 
   XMLElement[
   "pod", {"title" -> "Plots of the integral", "scanner" -> "Integral", "id" -> 
     "Plot of the integral", "position" -> "200", "error" -> "false", 
     "numsubpods" -> "4"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {
        "Plot[(-Cos[4 x] - 4 (-7 + x) Sin[4 x])/16, {x, -1.6, 1.6}]"}], 
       XMLElement["cell", {"compressed" -> True, "string" -> False}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             FormBox[
              StyleBox[
               
               DynamicModuleBox[{
                Global`max1136$$ = 0.5, Global`min1135$$ = -0.5, 
                 CalculateUtilities`GraphicsUtilities`Private`more$$ = False, 
                 Typeset`show$$ = True, Typeset`bookmarkList$$ = {}, 
                 Typeset`bookmarkMode$$ = "Menu", Typeset`animator$$, 
                 Typeset`animvar$$ = 1, Typeset`name$$ = "\"untitled\"", 
                 Typeset`specs$$ = {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`more$$], {
                    False, True}}, {{
                    Hold[Global`min1135$$], -0.5, "min"}, -1, 1}, {{
                    Hold[Global`max1136$$], 0.5, "max"}, -1, 1}, {
                    Hold[
                    Style[
                    Overlay[{
                    RawBoxes[
                    PaneBox[
                    GraphicsBox[
                    
                    RasterBox[{{{0, 0, 0, 24}}, {{0, 0, 0, 9}}, {{0, 0, 0, 
                    10}}, {{0, 0, 0, 10}}, {{0, 0, 0, 9}}, {{0, 0, 0, 9}}, {{
                    0, 0, 0, 8}}, {{0, 0, 0, 8}}, {{0, 0, 0, 9}}, {{0, 0, 0, 
                    8}}, {{0, 0, 0, 7}}, {{0, 0, 0, 7}}, {{0, 0, 0, 8}}, {{0, 
                    0, 0, 6}}, {{0, 0, 0, 6}}, {{0, 0, 0, 6}}, {{0, 0, 0, 
                    6}}, {{0, 0, 0, 5}}, {{0, 0, 0, 6}}, {{0, 0, 0, 5}}, {{0, 
                    0, 0, 4}}, {{0, 0, 0, 4}}, {{0, 0, 0, 5}}, {{0, 0, 0, 
                    5}}, {{0, 0, 0, 3}}, {{0, 0, 0, 4}}, {{0, 0, 0, 3}}, {{0, 
                    0, 0, 3}}, {{0, 0, 0, 3}}, {{0, 0, 0, 3}}, {{0, 0, 0, 
                    2}}, {{0, 0, 0, 2}}, {{0, 0, 0, 2}}, {{0, 0, 0, 2}}, {{0, 
                    0, 0, 1}}, {{0, 0, 0, 2}}, {{0, 0, 0, 2}}, {{0, 0, 0, 
                    0}}, {{0, 0, 0, 1}}, {{255, 255, 255, 0}}, {{255, 255, 
                    255, 0}}, {{255, 255, 255, 0}}, {{255, 255, 255, 0}}, {{
                    255, 255, 255, 0}}, {{255, 255, 255, 0}}}, {{0, 45}, {
                    2500, 0}}, {0, 255}, ColorFunction -> RGBColor], 
                    ImageSize -> {2500, 45}, 
                    PlotRange -> {{0, 2500}, {0, 45}}], ImageSize -> 
                    Scaled[1], ScrollPosition -> {0., 0.}]], 
                    Pane[
                    Column[{
                    Grid[{{
                    Manipulate`Place[1], 
                    Manipulate`Place[2]}}]}], 
                    ImageMargins -> {{20, 30}, {10, 10}}]}, {1, 2}, 2, 
                    Alignment -> {Left, Top}]]], 
                    Manipulate`Dump`ThisIsNotAControl}}, Typeset`size$$ = 
                 Automatic, Typeset`update$$ = 0, Typeset`initDone$$ = False, 
                 Typeset`skipInitDone$$ = False, 
                 CalculateUtilities`GraphicsUtilities`Private`more$388211$$ = 
                 False, Global`min1135$388212$$ = 0, Global`max1136$388213$$ = 
                 0}, 
                DynamicBox[
                 Manipulate`ManipulateBoxes[
                 2, TraditionalForm, 
                  "Variables" :> {
                   Global`max1136$$ = 0.5, Global`min1135$$ = -0.5, 
                    CalculateUtilities`GraphicsUtilities`Private`more$$ = 
                    False}, "ControllerVariables" :> {
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`more$$, 
                    CalculateUtilities`GraphicsUtilities`Private`more$388211$$\
, False], 
                    Hold[Global`min1135$$, Global`min1135$388212$$, 0], 
                    Hold[Global`max1136$$, Global`max1136$388213$$, 0]}, 
                  "OtherVariables" :> {
                   Typeset`show$$, Typeset`bookmarkList$$, 
                    Typeset`bookmarkMode$$, Typeset`animator$$, 
                    Typeset`animvar$$, Typeset`name$$, Typeset`specs$$, 
                    Typeset`size$$, Typeset`update$$, Typeset`initDone$$, 
                    Typeset`skipInitDone$$}, "Body" :> Function[Null, 
                    CalculateUtilities`GraphicsUtilities`Private`post$388203[
                    Plot[
                    SlotSequence[1]]], HoldAll][
                   Rational[1, 16] (-Cos[4 Global`x] - (4 (-7 + Global`x)) 
                    Sin[4 Global`x]), {
                    Global`x, 0. + 
                    1.6792519083627135` 
                    Tan[1.5040801783846716` Global`min1135$$], 0. + 
                    1.6792519083627135` 
                    Tan[1.5040801783846716` 
                    If[Global`min1135$$ == Global`max1136$$, Global`min1135$$ + (\
1.5707963267948966` - 1.5707963267948966`)/1000, Global`max1136$$]]}, 
                    LabelStyle -> {FontFamily -> "Bitstream Charter"}, 
                    WorkingPrecision -> MachinePrecision, 
                    PlotRange -> {Automatic, Automatic}, Ticks -> Automatic, 
                    ImageSize -> 200, AxesLabel -> {
                    RawBoxes[
                    FormBox["x", TraditionalForm]], None}], 
                  "Specifications" :> {{
                    CalculateUtilities`GraphicsUtilities`Private`more$$, {
                    False, True}, ControlType -> None}, {{
                    Global`min1135$$, -0.5, "min"}, -1, 1, ImageSize -> Tiny, 
                    ControlPlacement -> 1}, {{
                    Global`max1136$$, 0.5, "max"}, -1, 1, ImageSize -> Tiny, 
                    ControlPlacement -> 2}, 
                    Style[
                    Overlay[{
                    RawBoxes[
                    PaneBox[
                    GraphicsBox[
                    
                    RasterBox[{{{0, 0, 0, 24}}, {{0, 0, 0, 9}}, {{0, 0, 0, 
                    10}}, {{0, 0, 0, 10}}, {{0, 0, 0, 9}}, {{0, 0, 0, 9}}, {{
                    0, 0, 0, 8}}, {{0, 0, 0, 8}}, {{0, 0, 0, 9}}, {{0, 0, 0, 
                    8}}, {{0, 0, 0, 7}}, {{0, 0, 0, 7}}, {{0, 0, 0, 8}}, {{0, 
                    0, 0, 6}}, {{0, 0, 0, 6}}, {{0, 0, 0, 6}}, {{0, 0, 0, 
                    6}}, {{0, 0, 0, 5}}, {{0, 0, 0, 6}}, {{0, 0, 0, 5}}, {{0, 
                    0, 0, 4}}, {{0, 0, 0, 4}}, {{0, 0, 0, 5}}, {{0, 0, 0, 
                    5}}, {{0, 0, 0, 3}}, {{0, 0, 0, 4}}, {{0, 0, 0, 3}}, {{0, 
                    0, 0, 3}}, {{0, 0, 0, 3}}, {{0, 0, 0, 3}}, {{0, 0, 0, 
                    2}}, {{0, 0, 0, 2}}, {{0, 0, 0, 2}}, {{0, 0, 0, 2}}, {{0, 
                    0, 0, 1}}, {{0, 0, 0, 2}}, {{0, 0, 0, 2}}, {{0, 0, 0, 
                    0}}, {{0, 0, 0, 1}}, {{255, 255, 255, 0}}, {{255, 255, 
                    255, 0}}, {{255, 255, 255, 0}}, {{255, 255, 255, 0}}, {{
                    255, 255, 255, 0}}, {{255, 255, 255, 0}}}, {{0, 45}, {
                    2500, 0}}, {0, 255}, ColorFunction -> RGBColor], 
                    ImageSize -> {2500, 45}, 
                    PlotRange -> {{0, 2500}, {0, 45}}], ImageSize -> 
                    Scaled[1], ScrollPosition -> {0., 0.}]], 
                    Pane[
                    Column[{
                    Grid[{{
                    Manipulate`Place[1], 
                    Manipulate`Place[2]}}]}], 
                    ImageMargins -> {{20, 30}, {10, 10}}]}, {1, 2}, 2, 
                    Alignment -> {Left, Top}]]}, 
                  "Options" :> {
                   TrackedSymbols -> True, ControlPlacement -> Bottom, 
                    FrameMargins -> {{0, 0}, {0, 10}}, Paneled -> False, 
                    AppearanceElements -> {}, 
                    LabelStyle -> {
                    "DialogStyle", FontColor -> GrayLevel[0.25]}}, 
                  "DefaultOptions" :> {}], SingleEvaluation -> True], 
                Initialization :> (ReleaseHold[
                   Hold[
                   CalculateUtilities`GraphicsUtilities`Private`WACleanTicks[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Blank[]]] := 
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`res, 
                    CalculateUtilities`GraphicsUtilities`Private`unitformat}, 
                    CalculateUtilities`GraphicsUtilities`Private`res = 
                    ReplaceAll[
                    ReplaceAll[
                    Part[
                    DeleteCases[
                    ReplaceAll[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Alternatives[
                    Style, Global`UnitNumberForm, NumberForm] -> (#& )], {
                    Blank[], "", 
                    BlankNullSequence[]}], All, 
                    Span[1, 2]], Superscript[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[Integer]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`p, 
                    Blank[Integer]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`b^
                    CalculateUtilities`GraphicsUtilities`Private`p], Row[{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    BlankSequence[]]}, "\[Times]"] :> 
                    Times[CalculateUtilities`GraphicsUtilities`Private`a]]; If[
                    MatchQ[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, All, 2], 
                    Condition[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`quants, {
                    Alternatives[
                    BlankSequence[Global`ShortQuantity], 
                    BlankSequence[Global`Quantity]]}], Length[
                    Union[
                    Map[
                    Global`UnitObjectPart, 
                    CalculateUtilities`GraphicsUtilities`Private`quants]]] == 
                    1]], CalculateUtilities`GraphicsUtilities`Private`\
unitformat = Global`ToCDFQuantityFunction[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, 1, 2]]; 
                    CalculateUtilities`GraphicsUtilities`Private`unitformat -> 
                    Thread[{
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, All, 1], 
                    Global`QuantityPart[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, All, 2], 
                    Global`UnitObjectPart[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, 1, 
                    2]]]}], 
                    CalculateUtilities`GraphicsUtilities`Private`res]]; 
                    Options[
                    CalculateUtilities`GraphicsUtilities`Private`post$388203] = \
{"ReturnInteractiveTypes" -> False, "Nearest" -> Automatic}; 
                    CalculateUtilities`GraphicsUtilities`Private`post$388203[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Blank[Graphics]], 
                    OptionsPattern[]] := 
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`lines, 
                    CalculateUtilities`GraphicsUtilities`Private`pts, 
                    CalculateUtilities`GraphicsUtilities`Private`gg, 
                    CalculateUtilities`GraphicsUtilities`Private`type, 
                    CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r, 
                    CalculateUtilities`GraphicsUtilities`Private`oldepilog, 
                    CalculateUtilities`GraphicsUtilities`Private`range, 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines, 
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines,
                     
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle = 
                    OptionValue["Nearest"]}, 
                    CalculateUtilities`GraphicsUtilities`Private`oldepilog = 
                    Replace[
                    ReplaceAll[Epilog, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]], 
                    Epilog -> Sequence[]]; Switch[
                    ReplaceAll[{Frame, Axes}, 
                    Options[
                    CalculateUtilities`GraphicsUtilities`Private`g]], {True, 
                    Blank[]}, 
                    CalculateUtilities`GraphicsUtilities`Private`type = 
                    Frame; {
                    CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r} = 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, 
                    ReplaceAll[FrameTicks, 
                    Options[
                    CalculateUtilities`GraphicsUtilities`Private`g]]], {
                    Blank[], True}, 
                    CalculateUtilities`GraphicsUtilities`Private`type = 
                    Axes; {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l} = 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, 
                    ReplaceAll[Ticks, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]]], 
                    Blank[], 
                    CalculateUtilities`GraphicsUtilities`Private`type = None]; 
                    If[
                    And[
                    CalculateUtilities`GraphicsUtilities`Private`type === 
                    Frame, 
                    Or[
                    Not[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`t === None, 
                    CalculateUtilities`GraphicsUtilities`Private`b === 
                    CalculateUtilities`GraphicsUtilities`Private`t]], 
                    Not[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`r === None, 
                    CalculateUtilities`GraphicsUtilities`Private`l === 
                    CalculateUtilities`GraphicsUtilities`Private`r]]]], 
                    CalculateUtilities`GraphicsUtilities`Private`type = None]; 
                    If[
                    TrueQ[
                    OptionValue["ReturnInteractiveTypes"]], 
                    Which[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`type === 
                    None, CalculateUtilities`GraphicsUtilities`Private`b === 
                    None, CalculateUtilities`GraphicsUtilities`Private`l === 
                    None], {}, 
                    FreeQ[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Alternatives[Line, Point]], {}, True, {
                    "Tooltips", "Coordinates"}], If[
                    FreeQ[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Alternatives[Line, Point]], 
                    Return[CalculateUtilities`GraphicsUtilities`Private`g]]; 
                    CalculateUtilities`GraphicsUtilities`Private`gg = 
                    Normal[CalculateUtilities`GraphicsUtilities`Private`g]; 
                    CalculateUtilities`GraphicsUtilities`Private`pts = 
                    Partition[
                    Flatten[
                    Cases[
                    Part[CalculateUtilities`GraphicsUtilities`Private`gg, 1], 
                    Point[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Blank[]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`a, 
                    Infinity]], 2]; 
                    If[Length[
                    CalculateUtilities`GraphicsUtilities`Private`pts] < 2, 
                    CalculateUtilities`GraphicsUtilities`Private`lines = Cases[
                    Part[CalculateUtilities`GraphicsUtilities`Private`gg, 1], 
                    
                    Blank[Line], Infinity]; 
                    If[CalculateUtilities`GraphicsUtilities`Private`lines === \
{}, 
                    Return[CalculateUtilities`GraphicsUtilities`Private`g]]; 
                    CalculateUtilities`GraphicsUtilities`Private`pts = Flatten[
                    Cases[
                    CalculateUtilities`GraphicsUtilities`Private`lines, Line[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Blank[]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`a, Infinity],
                     1]; If[
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle === 
                    Automatic, If[
                    CalculateUtilities`GraphicsUtilities`Private`orderedLines[
                    CalculateUtilities`GraphicsUtilities`Private`lines], 
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle = 
                    "1D", CalculateUtilities`GraphicsUtilities`Private`\
neareststyle = "2D"]; Null], 
                    If[
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle === 
                    Automatic, 
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle = 
                    "2D"]]; 
                    CalculateUtilities`GraphicsUtilities`Private`range = 
                    Replace[
                    ReplaceAll[PlotRange, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]], 
                    Except[{{
                    PatternTest[
                    Blank[], NumberQ], 
                    PatternTest[
                    Blank[], NumberQ]}, {
                    PatternTest[
                    Blank[], NumberQ], 
                    PatternTest[
                    Blank[], NumberQ]}}] :> {
                    Through[
                    {Min, Max}[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    1]]], 
                    Through[
                    {Min, Max}[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    2]]]}]; CalculateUtilities`GraphicsUtilities`Private`b = 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[CalculateUtilities`GraphicsUtilities`Private`b, 
                    First[CalculateUtilities`GraphicsUtilities`Private`range], 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    1]]; CalculateUtilities`GraphicsUtilities`Private`l = 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[CalculateUtilities`GraphicsUtilities`Private`l, 
                    Last[CalculateUtilities`GraphicsUtilities`Private`range], 
                    
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    2]]; CalculateUtilities`GraphicsUtilities`Private`\
oldgridlines = ReplaceAll[GridLines, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]]; 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines = 
                    With[{CalculateUtilities`GraphicsUtilities`Private`gray = 
                    GrayLevel[0.7]}, 
                    Replace[
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines,\
 {Pattern[CalculateUtilities`GraphicsUtilities`Private`a, {
                    Blank[List], 
                    Blank[List]}] :> Dynamic[
                    Join[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Replace[
                    MousePosition[{"Graphics", Graphics}, None], {
                    None -> {{}, {}}, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`x, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`y, 
                    Blank[]]} :> {{{
                    CalculateUtilities`GraphicsUtilities`Private`x, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}, {{
                    CalculateUtilities`GraphicsUtilities`Private`y, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}}}], 
                    2]], {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Blank[List]], Automatic} :> 
                    With[{CalculateUtilities`GraphicsUtilities`Private`\
divisions = {CalculateUtilities`GraphicsUtilities`Private`a, 
                    FindDivisions[
                    Last[CalculateUtilities`GraphicsUtilities`Private`range], 
                    7]}}, 
                    Dynamic[
                    Join[
                    CalculateUtilities`GraphicsUtilities`Private`divisions, 
                    Replace[
                    MousePosition[{"Graphics", Graphics}, None], {
                    None -> {{}, {}}, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`x, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`y, 
                    Blank[]]} :> {{{
                    CalculateUtilities`GraphicsUtilities`Private`x, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}, {{
                    CalculateUtilities`GraphicsUtilities`Private`y, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}}}], 
                    2]]], Blank[] -> Dynamic[
                    
                    Map[{{#, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}& , 
                    MousePosition[{"Graphics", Graphics}, None]]]}]]; If[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`type === 
                    None, CalculateUtilities`GraphicsUtilities`Private`b === 
                    None, CalculateUtilities`GraphicsUtilities`Private`l === 
                    None], 
                    Show[
                    CalculateUtilities`GraphicsUtilities`Private`g, GridLines -> 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines, 
                    If[
                    MatchQ[
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines, 
                    Alternatives[None, GridLines]], 
                    Method -> {"GridLinesInFront" -> True}, 
                    Apply[Sequence, {}]]], 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`nf = 
                    If[CalculateUtilities`GraphicsUtilities`Private`\
neareststyle === "1D", 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`n = 
                    Nearest[Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 1] -> 
                    CalculateUtilities`GraphicsUtilities`Private`pts]}, 
                    CalculateUtilities`GraphicsUtilities`Private`n[
                    Part[#, 1]]& ], 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`n = 
                    Nearest[Transpose[
                    Transpose[
                    CalculateUtilities`GraphicsUtilities`Private`pts]/Abs[
                    Apply[
                    Subtract, 
                    CalculateUtilities`GraphicsUtilities`Private`range, {
                    1}]]] -> 
                    CalculateUtilities`GraphicsUtilities`Private`pts], 
                    CalculateUtilities`GraphicsUtilities`Private`scale = Abs[
                    Apply[
                    Subtract, 
                    CalculateUtilities`GraphicsUtilities`Private`range, {
                    1}]]}, CalculateUtilities`GraphicsUtilities`Private`n[#/
                    CalculateUtilities`GraphicsUtilities`Private`scale]& ]], 
                    CalculateUtilities`GraphicsUtilities`Private`left = 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`bottom = 
                    CalculateUtilities`GraphicsUtilities`Private`b}, 
                    Show[
                    CalculateUtilities`GraphicsUtilities`Private`g, GridLines -> 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines, 
                    If[
                    MatchQ[
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines, 
                    Alternatives[None, GridLines]], 
                    Method -> {"GridLinesInFront" -> True}, 
                    Apply[Sequence, {}]], 
                    Epilog -> {
                    CalculateUtilities`GraphicsUtilities`Private`oldepilog, 
                    Dynamic[
                    
                    DynamicModule[{
                    CalculateUtilities`GraphicsUtilities`Private`pt = 
                    CalculateUtilities`GraphicsUtilities`Private`nf[
                    MousePosition[{"Graphics", Graphics}, {0, 0}]], 
                    CalculateUtilities`GraphicsUtilities`Private`scaled = 
                    MousePosition[{"GraphicsScaled", Graphics}, None]}, 
                    If[
                    CalculateUtilities`GraphicsUtilities`Private`scaled === 
                    None, {}, {
                    Text[
                    Style[
                    Row[{
                    CalculateUtilities`GraphicsUtilities`Private`bottom[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pt, 1, 1]], 
                    CalculateUtilities`GraphicsUtilities`Private`left[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pt, 1, 2]]}, 
                    ","], 12], 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pt, 1], {
                    1.5 Sign[Part[
                    CalculateUtilities`GraphicsUtilities`Private`scaled, 1] - 
                    0.5], 0}, Background -> White], 
                    AbsolutePointSize[7], 
                    Point[CalculateUtilities`GraphicsUtilities`Private`pt], 
                    White, 
                    AbsolutePointSize[5], 
                    Point[
                    CalculateUtilities`GraphicsUtilities`Private`pt]}]]]}]]]]]\
; CalculateUtilities`GraphicsUtilities`Private`post$388203[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Blank[]], 
                    BlankNullSequence[]] := 
                    CalculateUtilities`GraphicsUtilities`Private`g; 
                    CalculateUtilities`GraphicsUtilities`Private`orderedLines[{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`l, 
                    BlankSequence[Line]]}] := 
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`ordered, 
                    CalculateUtilities`GraphicsUtilities`Private`intervals}, 
                    CalculateUtilities`GraphicsUtilities`Private`ordered = 
                    Apply[And, 
                    Map[OrderedQ[
                    Part[#, 1, All, 1]]& , 
                    Hold[CalculateUtilities`GraphicsUtilities`Private`l]]]; If[
                    Not[
                    TrueQ[
                    CalculateUtilities`GraphicsUtilities`Private`ordered]], 
                    Return[False]]; 
                    CalculateUtilities`GraphicsUtilities`Private`intervals = 
                    Part[{CalculateUtilities`GraphicsUtilities`Private`l}, 
                    All, 1, {1, -1}, 1]; Length[
                    Apply[
                    Interval, 
                    CalculateUtilities`GraphicsUtilities`Private`intervals]] === 
                    Length[CalculateUtilities`GraphicsUtilities`Private`\
intervals]]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, 
                    Alternatives[Automatic, FrameTicks]] = {
                    Identity, Identity, Identity, Identity}; 
                    
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`l, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`t, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`r, 
                    Blank[]]}] := 
                    Map[CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction, {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r}]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, {{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`l, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`r, 
                    Blank[]]}, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`t, 
                    Blank[]]}}] := 
                    Map[CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction, {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r}]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, 
                    Blank[]] = {None, None, None, None}; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, 
                    Alternatives[Automatic, Ticks]] = {Identity, Identity}; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`h, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`v, 
                    Blank[]]}] := 
                    Map[CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction, {CalculateUtilities`GraphicsUtilities`Private`h, 
                    CalculateUtilities`GraphicsUtilities`Private`v}]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, 
                    Blank[]] = {None, None}; 
                    CalculateUtilities`GraphicsUtilities`Private`CDFCleanTicks[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Blank[]]] := ReplaceAll[
                    ReplaceAll[
                    Part[
                    DeleteCases[
                    ReplaceAll[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Alternatives[Style, NumberForm] -> (#& )], {
                    Blank[], "", 
                    BlankNullSequence[]}], All, 
                    Span[1, 2]], Superscript[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[Integer]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`p, 
                    Blank[Integer]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`b^
                    CalculateUtilities`GraphicsUtilities`Private`p], Row[{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    BlankSequence[]]}, "\[Times]"] :> 
                    Times[CalculateUtilities`GraphicsUtilities`Private`a]]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks$, 
                    Blank[]]] := 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    CalculateUtilities`GraphicsUtilities`Private`WACleanTicks[
                    CalculateUtilities`GraphicsUtilities`Private`ticks$]]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[None] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[True] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[Automatic] = Identity; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[All] = Identity; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[Pattern[CalculateUtilities`GraphicsUtilities`Private`func, 
                    Blank[]] -> 
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Blank[]]] := Replace[
                    
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[CalculateUtilities`GraphicsUtilities`Private`ticks], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`f, 
                    Except[None]] :> 
                    Composition[
                    CalculateUtilities`GraphicsUtilities`Private`func, 
                    CalculateUtilities`GraphicsUtilities`Private`f]]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[{}] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {
                    Repeated[{
                    Blank[Integer], 
                    Blank[String]}]}]] := Which[
                    Quiet[
                    MatchQ[
                    Apply[SameQ, 
                    Map[Part[
                    DateList[#], 
                    Span[2, All]]& , 
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {
                    2}], {1}], {
                    Repeated[True]}]], DateString, 
                    Apply[And, 
                    StringMatchQ[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, All, 
                    2], NumberString]], 
                    
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Transpose[{
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, All, 
                    1], 
                    ToExpression[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, All, 
                    2]]}]], True, None]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {
                    Repeated[{
                    PatternTest[
                    Blank[], NumericQ], 
                    PatternTest[
                    Blank[], NumericQ]}]}]] := Which[
                    MatchQ[
                    Apply[
                    Equal, CalculateUtilities`GraphicsUtilities`Private`ticks,\
 {1}], {
                    Repeated[True]}], Identity, 
                    MatchQ[
                    
                    Apply[# == Log[#2]& , 
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {1}], {
                    Repeated[True]}], Exp, 
                    TrueQ[
                    Quiet[
                    Apply[Equal, 
                    Apply[Divide, Transpose[
                    Rest[CalculateUtilities`GraphicsUtilities`Private`ticks]] - 
                    Part[CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    1]]]]], 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`slope = 
                    Apply[Divide, 
                    Apply[Subtract, 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {-1, 
                    1}]]]}, 
                    SetPrecision[(# - Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 1, 
                    1])/CalculateUtilities`GraphicsUtilities`Private`slope + 
                    Part[CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    1, 2], 3]& ], True, None]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Blank[]] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`type, 
                    Blank[]], 
                    BlankNullSequence[]] := 
                    CalculateUtilities`GraphicsUtilities`Private`type; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[Identity, {
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`min, 
                    Blank[]], 
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`max, 
                    Blank[]]}, 
                    Blank[]] := 
                    With[{CalculateUtilities`GraphicsUtilities`Private`nf = 
                    CalculateUtilities`GraphicsUtilities`Private`numberForm, 
                    CalculateUtilities`GraphicsUtilities`Private`acc = 
                    Floor[Max[
                    Ceiling[Log[10, 
                    Max[
                    
                    Abs[{CalculateUtilities`GraphicsUtilities`Private`min, 
                    CalculateUtilities`GraphicsUtilities`Private`max}]]] - 
                    Log[10, (CalculateUtilities`GraphicsUtilities`Private`max - 
                    CalculateUtilities`GraphicsUtilities`Private`min)/100]], 
                    3] - RealExponent[
                    Max[
                    
                    Abs[{CalculateUtilities`GraphicsUtilities`Private`min, 
                    CalculateUtilities`GraphicsUtilities`Private`max}]]]]}, 
                    CalculateUtilities`GraphicsUtilities`Private`nf[#, 
                    CalculateUtilities`GraphicsUtilities`Private`acc]& ]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[Exp, {
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`min, 
                    Blank[]], 
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`max, 
                    Blank[]]}, 
                    Blank[]] := 
                    With[{CalculateUtilities`GraphicsUtilities`Private`prec = 
                    Max[
                    Ceiling[Log[10, 
                    Max[
                    
                    Abs[{CalculateUtilities`GraphicsUtilities`Private`min, 
                    CalculateUtilities`GraphicsUtilities`Private`max}]]] - 
                    Log[10, (CalculateUtilities`GraphicsUtilities`Private`max - 
                    CalculateUtilities`GraphicsUtilities`Private`min)/100]], 
                    3]}, Quiet[
                    RawBoxes[
                    ToBoxes[
                    NumberForm[
                    Exp[#], 
                    CalculateUtilities`GraphicsUtilities`Private`prec]]]]& ]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[DateString, {
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`min, 
                    Blank[]], 
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`max, 
                    Blank[]]}, 
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`pts, 
                    Blank[]]] := 
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`dates, 
                    CalculateUtilities`GraphicsUtilities`Private`spec}, 
                    CalculateUtilities`GraphicsUtilities`Private`dates = 
                    Map[DateList, 
                    CalculateUtilities`GraphicsUtilities`Private`pts]; 
                    CalculateUtilities`GraphicsUtilities`Private`spec = Switch[
                    Map[Length, 
                    Map[Union, 
                    Transpose[
                    CalculateUtilities`GraphicsUtilities`Private`dates]]], {
                    Blank[], 1, 1, 
                    BlankSequence[]}, {"Year"}, {
                    Blank[], 
                    Blank[], 1, 
                    BlankSequence[]}, {"MonthNameShort", " ", "Year"}, 
                    Blank[], {
                    "DayShort", " ", "MonthNameShort", " ", "Year"}]; 
                    If[(CalculateUtilities`GraphicsUtilities`Private`max - 
                    CalculateUtilities`GraphicsUtilities`Private`min)/
                    31536000 > 25, 
                    CalculateUtilities`GraphicsUtilities`Private`spec = {
                    "Year"}]; 
                    With[{CalculateUtilities`GraphicsUtilities`Private`s = 
                    CalculateUtilities`GraphicsUtilities`Private`spec}, 
                    DateString[#, 
                    CalculateUtilities`GraphicsUtilities`Private`s]& ]]; 
                    CalculateUtilities`GraphicsUtilities`Private`numberForm = 
                    Function[{
                    CalculateUtilities`GraphicsUtilities`Private`a, 
                    CalculateUtilities`GraphicsUtilities`Private`acc}, 
                    Quiet[
                    RawBoxes[
                    ToBoxes[
                    NumberForm[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Max[1, 
                    Ceiling[
                    RealExponent[
                    CalculateUtilities`GraphicsUtilities`Private`a] + 
                    CalculateUtilities`GraphicsUtilities`Private`acc]], 
                    ExponentFunction -> (Null& ), 
                    NumberFormat -> (StringReplace[#, StringExpression[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`s, 
                    BlankSequence[]], ".", EndOfString] -> 
                    CalculateUtilities`GraphicsUtilities`Private`s]& )]]]]]]]; 
                 Typeset`initDone$$ = True), DynamicModuleValues :> {}, 
                Deinitialization :> None, 
                UntrackedVariables :> {Typeset`size$$}, 
                SynchronousInitialization -> True, 
                UnsavedVariables :> {Typeset`initDone$$}], "Manipulate", 
               Deployed -> True, StripOnInput -> False], TraditionalForm], 
             Manipulate`InterpretManipulate[1]], TraditionalForm]], 
          "Output"]}], 
       XMLElement["dataformats", {}, {"minput"}]}], 
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {
        "Plot[(-Cos[4 x] - 4 (-7 + x) Sin[4 x])/16, {x, -9.4, 9.4}]"}], 
       XMLElement["cell", {"compressed" -> True, "string" -> False}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             FormBox[
              StyleBox[
               
               DynamicModuleBox[{
                Global`max1138$$ = 0.5, Global`min1137$$ = -0.5, 
                 CalculateUtilities`GraphicsUtilities`Private`more$$ = False, 
                 Typeset`show$$ = True, Typeset`bookmarkList$$ = {}, 
                 Typeset`bookmarkMode$$ = "Menu", Typeset`animator$$, 
                 Typeset`animvar$$ = 1, Typeset`name$$ = "\"untitled\"", 
                 Typeset`specs$$ = {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`more$$], {
                    False, True}}, {{
                    Hold[Global`min1137$$], -0.5, "min"}, -1, 1}, {{
                    Hold[Global`max1138$$], 0.5, "max"}, -1, 1}, {
                    Hold[
                    Style[
                    Overlay[{
                    RawBoxes[
                    PaneBox[
                    GraphicsBox[
                    
                    RasterBox[{{{0, 0, 0, 24}}, {{0, 0, 0, 9}}, {{0, 0, 0, 
                    10}}, {{0, 0, 0, 10}}, {{0, 0, 0, 9}}, {{0, 0, 0, 9}}, {{
                    0, 0, 0, 8}}, {{0, 0, 0, 8}}, {{0, 0, 0, 9}}, {{0, 0, 0, 
                    8}}, {{0, 0, 0, 7}}, {{0, 0, 0, 7}}, {{0, 0, 0, 8}}, {{0, 
                    0, 0, 6}}, {{0, 0, 0, 6}}, {{0, 0, 0, 6}}, {{0, 0, 0, 
                    6}}, {{0, 0, 0, 5}}, {{0, 0, 0, 6}}, {{0, 0, 0, 5}}, {{0, 
                    0, 0, 4}}, {{0, 0, 0, 4}}, {{0, 0, 0, 5}}, {{0, 0, 0, 
                    5}}, {{0, 0, 0, 3}}, {{0, 0, 0, 4}}, {{0, 0, 0, 3}}, {{0, 
                    0, 0, 3}}, {{0, 0, 0, 3}}, {{0, 0, 0, 3}}, {{0, 0, 0, 
                    2}}, {{0, 0, 0, 2}}, {{0, 0, 0, 2}}, {{0, 0, 0, 2}}, {{0, 
                    0, 0, 1}}, {{0, 0, 0, 2}}, {{0, 0, 0, 2}}, {{0, 0, 0, 
                    0}}, {{0, 0, 0, 1}}, {{255, 255, 255, 0}}, {{255, 255, 
                    255, 0}}, {{255, 255, 255, 0}}, {{255, 255, 255, 0}}, {{
                    255, 255, 255, 0}}, {{255, 255, 255, 0}}}, {{0, 45}, {
                    2500, 0}}, {0, 255}, ColorFunction -> RGBColor], 
                    ImageSize -> {2500, 45}, 
                    PlotRange -> {{0, 2500}, {0, 45}}], ImageSize -> 
                    Scaled[1], ScrollPosition -> {0., 0.}]], 
                    Pane[
                    Column[{
                    Grid[{{
                    Manipulate`Place[1], 
                    Manipulate`Place[2]}}]}], 
                    ImageMargins -> {{20, 30}, {10, 10}}]}, {1, 2}, 2, 
                    Alignment -> {Left, Top}]]], 
                    Manipulate`Dump`ThisIsNotAControl}}, Typeset`size$$ = 
                 Automatic, Typeset`update$$ = 0, Typeset`initDone$$ = False, 
                 Typeset`skipInitDone$$ = False, 
                 CalculateUtilities`GraphicsUtilities`Private`more$388265$$ = 
                 False, Global`min1137$388266$$ = 0, Global`max1138$388267$$ = 
                 0}, 
                DynamicBox[
                 Manipulate`ManipulateBoxes[
                 2, TraditionalForm, 
                  "Variables" :> {
                   Global`max1138$$ = 0.5, Global`min1137$$ = -0.5, 
                    CalculateUtilities`GraphicsUtilities`Private`more$$ = 
                    False}, "ControllerVariables" :> {
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`more$$, 
                    CalculateUtilities`GraphicsUtilities`Private`more$388265$$\
, False], 
                    Hold[Global`min1137$$, Global`min1137$388266$$, 0], 
                    Hold[Global`max1138$$, Global`max1138$388267$$, 0]}, 
                  "OtherVariables" :> {
                   Typeset`show$$, Typeset`bookmarkList$$, 
                    Typeset`bookmarkMode$$, Typeset`animator$$, 
                    Typeset`animvar$$, Typeset`name$$, Typeset`specs$$, 
                    Typeset`size$$, Typeset`update$$, Typeset`initDone$$, 
                    Typeset`skipInitDone$$}, "Body" :> Function[Null, 
                    CalculateUtilities`GraphicsUtilities`Private`post$388257[
                    Plot[
                    SlotSequence[1]]], HoldAll][
                   Rational[1, 16] (-Cos[4 Global`x] - (4 (-7 + Global`x)) 
                    Sin[4 Global`x]), {
                    Global`x, 0. + 
                    10.075511450176283` 
                    Tan[1.5040801783846716` Global`min1137$$], 0. + 
                    10.075511450176283` 
                    Tan[1.5040801783846716` 
                    If[Global`min1137$$ == Global`max1138$$, 
                    Global`min1137$$ + (9.42477796076938 - 9.42477796076938)/
                    1000, Global`max1138$$]]}, 
                    LabelStyle -> {FontFamily -> "Bitstream Charter"}, 
                    WorkingPrecision -> MachinePrecision, 
                    PlotRange -> {Automatic, Automatic}, Ticks -> Automatic, 
                    ImageSize -> 200, AxesLabel -> {
                    RawBoxes[
                    FormBox["x", TraditionalForm]], None}], 
                  "Specifications" :> {{
                    CalculateUtilities`GraphicsUtilities`Private`more$$, {
                    False, True}, ControlType -> None}, {{
                    Global`min1137$$, -0.5, "min"}, -1, 1, ImageSize -> Tiny, 
                    ControlPlacement -> 1}, {{
                    Global`max1138$$, 0.5, "max"}, -1, 1, ImageSize -> Tiny, 
                    ControlPlacement -> 2}, 
                    Style[
                    Overlay[{
                    RawBoxes[
                    PaneBox[
                    GraphicsBox[
                    
                    RasterBox[{{{0, 0, 0, 24}}, {{0, 0, 0, 9}}, {{0, 0, 0, 
                    10}}, {{0, 0, 0, 10}}, {{0, 0, 0, 9}}, {{0, 0, 0, 9}}, {{
                    0, 0, 0, 8}}, {{0, 0, 0, 8}}, {{0, 0, 0, 9}}, {{0, 0, 0, 
                    8}}, {{0, 0, 0, 7}}, {{0, 0, 0, 7}}, {{0, 0, 0, 8}}, {{0, 
                    0, 0, 6}}, {{0, 0, 0, 6}}, {{0, 0, 0, 6}}, {{0, 0, 0, 
                    6}}, {{0, 0, 0, 5}}, {{0, 0, 0, 6}}, {{0, 0, 0, 5}}, {{0, 
                    0, 0, 4}}, {{0, 0, 0, 4}}, {{0, 0, 0, 5}}, {{0, 0, 0, 
                    5}}, {{0, 0, 0, 3}}, {{0, 0, 0, 4}}, {{0, 0, 0, 3}}, {{0, 
                    0, 0, 3}}, {{0, 0, 0, 3}}, {{0, 0, 0, 3}}, {{0, 0, 0, 
                    2}}, {{0, 0, 0, 2}}, {{0, 0, 0, 2}}, {{0, 0, 0, 2}}, {{0, 
                    0, 0, 1}}, {{0, 0, 0, 2}}, {{0, 0, 0, 2}}, {{0, 0, 0, 
                    0}}, {{0, 0, 0, 1}}, {{255, 255, 255, 0}}, {{255, 255, 
                    255, 0}}, {{255, 255, 255, 0}}, {{255, 255, 255, 0}}, {{
                    255, 255, 255, 0}}, {{255, 255, 255, 0}}}, {{0, 45}, {
                    2500, 0}}, {0, 255}, ColorFunction -> RGBColor], 
                    ImageSize -> {2500, 45}, 
                    PlotRange -> {{0, 2500}, {0, 45}}], ImageSize -> 
                    Scaled[1], ScrollPosition -> {0., 0.}]], 
                    Pane[
                    Column[{
                    Grid[{{
                    Manipulate`Place[1], 
                    Manipulate`Place[2]}}]}], 
                    ImageMargins -> {{20, 30}, {10, 10}}]}, {1, 2}, 2, 
                    Alignment -> {Left, Top}]]}, 
                  "Options" :> {
                   TrackedSymbols -> True, ControlPlacement -> Bottom, 
                    FrameMargins -> {{0, 0}, {0, 10}}, Paneled -> False, 
                    AppearanceElements -> {}, 
                    LabelStyle -> {
                    "DialogStyle", FontColor -> GrayLevel[0.25]}}, 
                  "DefaultOptions" :> {}], SingleEvaluation -> True], 
                Initialization :> (ReleaseHold[
                   Hold[
                   CalculateUtilities`GraphicsUtilities`Private`WACleanTicks[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Blank[]]] := 
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`res, 
                    CalculateUtilities`GraphicsUtilities`Private`unitformat}, 
                    CalculateUtilities`GraphicsUtilities`Private`res = 
                    ReplaceAll[
                    ReplaceAll[
                    Part[
                    DeleteCases[
                    ReplaceAll[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Alternatives[
                    Style, Global`UnitNumberForm, NumberForm] -> (#& )], {
                    Blank[], "", 
                    BlankNullSequence[]}], All, 
                    Span[1, 2]], Superscript[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[Integer]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`p, 
                    Blank[Integer]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`b^
                    CalculateUtilities`GraphicsUtilities`Private`p], Row[{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    BlankSequence[]]}, "\[Times]"] :> 
                    Times[CalculateUtilities`GraphicsUtilities`Private`a]]; If[
                    MatchQ[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, All, 2], 
                    Condition[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`quants, {
                    Alternatives[
                    BlankSequence[Global`ShortQuantity], 
                    BlankSequence[Global`Quantity]]}], Length[
                    Union[
                    Map[
                    Global`UnitObjectPart, 
                    CalculateUtilities`GraphicsUtilities`Private`quants]]] == 
                    1]], CalculateUtilities`GraphicsUtilities`Private`\
unitformat = Global`ToCDFQuantityFunction[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, 1, 2]]; 
                    CalculateUtilities`GraphicsUtilities`Private`unitformat -> 
                    Thread[{
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, All, 1], 
                    Global`QuantityPart[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, All, 2], 
                    Global`UnitObjectPart[
                    Part[CalculateUtilities`GraphicsUtilities`Private`res, 1, 
                    2]]]}], 
                    CalculateUtilities`GraphicsUtilities`Private`res]]; 
                    Options[
                    CalculateUtilities`GraphicsUtilities`Private`post$388257] = \
{"ReturnInteractiveTypes" -> False, "Nearest" -> Automatic}; 
                    CalculateUtilities`GraphicsUtilities`Private`post$388257[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Blank[Graphics]], 
                    OptionsPattern[]] := 
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`lines, 
                    CalculateUtilities`GraphicsUtilities`Private`pts, 
                    CalculateUtilities`GraphicsUtilities`Private`gg, 
                    CalculateUtilities`GraphicsUtilities`Private`type, 
                    CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r, 
                    CalculateUtilities`GraphicsUtilities`Private`oldepilog, 
                    CalculateUtilities`GraphicsUtilities`Private`range, 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines, 
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines,
                     CalculateUtilities`GraphicsUtilities`Private`\
neareststyle = OptionValue["Nearest"]}, 
                    CalculateUtilities`GraphicsUtilities`Private`oldepilog = 
                    Replace[
                    ReplaceAll[Epilog, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]], 
                    Epilog -> Sequence[]]; Switch[
                    ReplaceAll[{Frame, Axes}, 
                    Options[
                    CalculateUtilities`GraphicsUtilities`Private`g]], {True, 
                    Blank[]}, 
                    CalculateUtilities`GraphicsUtilities`Private`type = 
                    Frame; {
                    CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r} = 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, 
                    ReplaceAll[FrameTicks, 
                    Options[
                    CalculateUtilities`GraphicsUtilities`Private`g]]], {
                    Blank[], True}, 
                    CalculateUtilities`GraphicsUtilities`Private`type = 
                    Axes; {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l} = 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, 
                    ReplaceAll[Ticks, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]]], 
                    Blank[], 
                    CalculateUtilities`GraphicsUtilities`Private`type = None]; 
                    If[
                    And[
                    CalculateUtilities`GraphicsUtilities`Private`type === 
                    Frame, 
                    Or[
                    Not[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`t === None, 
                    CalculateUtilities`GraphicsUtilities`Private`b === 
                    CalculateUtilities`GraphicsUtilities`Private`t]], 
                    Not[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`r === None, 
                    CalculateUtilities`GraphicsUtilities`Private`l === 
                    CalculateUtilities`GraphicsUtilities`Private`r]]]], 
                    CalculateUtilities`GraphicsUtilities`Private`type = None]; 
                    If[
                    TrueQ[
                    OptionValue["ReturnInteractiveTypes"]], 
                    Which[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`type === 
                    None, CalculateUtilities`GraphicsUtilities`Private`b === 
                    None, CalculateUtilities`GraphicsUtilities`Private`l === 
                    None], {}, 
                    FreeQ[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Alternatives[Line, Point]], {}, True, {
                    "Tooltips", "Coordinates"}], If[
                    FreeQ[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Alternatives[Line, Point]], 
                    Return[CalculateUtilities`GraphicsUtilities`Private`g]]; 
                    CalculateUtilities`GraphicsUtilities`Private`gg = 
                    Normal[CalculateUtilities`GraphicsUtilities`Private`g]; 
                    CalculateUtilities`GraphicsUtilities`Private`pts = 
                    Partition[
                    Flatten[
                    Cases[
                    Part[CalculateUtilities`GraphicsUtilities`Private`gg, 1], 
                    Point[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Blank[]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`a, 
                    Infinity]], 2]; 
                    If[Length[
                    CalculateUtilities`GraphicsUtilities`Private`pts] < 2, 
                    CalculateUtilities`GraphicsUtilities`Private`lines = Cases[
                    Part[CalculateUtilities`GraphicsUtilities`Private`gg, 1], 
                    
                    Blank[Line], Infinity]; 
                    If[CalculateUtilities`GraphicsUtilities`Private`lines === \
{}, 
                    Return[CalculateUtilities`GraphicsUtilities`Private`g]]; 
                    CalculateUtilities`GraphicsUtilities`Private`pts = Flatten[
                    Cases[
                    CalculateUtilities`GraphicsUtilities`Private`lines, Line[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Blank[]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`a, Infinity],
                     1]; If[
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle === 
                    Automatic, If[
                    CalculateUtilities`GraphicsUtilities`Private`orderedLines[
                    CalculateUtilities`GraphicsUtilities`Private`lines], 
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle = 
                    "1D", CalculateUtilities`GraphicsUtilities`Private`\
neareststyle = "2D"]; Null], 
                    If[
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle === 
                    Automatic, 
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle = 
                    "2D"]]; 
                    CalculateUtilities`GraphicsUtilities`Private`range = 
                    Replace[
                    ReplaceAll[PlotRange, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]], 
                    Except[{{
                    PatternTest[
                    Blank[], NumberQ], 
                    PatternTest[
                    Blank[], NumberQ]}, {
                    PatternTest[
                    Blank[], NumberQ], 
                    PatternTest[
                    Blank[], NumberQ]}}] :> {
                    Through[
                    {Min, Max}[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    1]]], 
                    Through[
                    {Min, Max}[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    2]]]}]; CalculateUtilities`GraphicsUtilities`Private`b = 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[CalculateUtilities`GraphicsUtilities`Private`b, 
                    First[CalculateUtilities`GraphicsUtilities`Private`range], 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    1]]; CalculateUtilities`GraphicsUtilities`Private`l = 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[CalculateUtilities`GraphicsUtilities`Private`l, 
                    Last[CalculateUtilities`GraphicsUtilities`Private`range], 
                    
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    2]]; CalculateUtilities`GraphicsUtilities`Private`\
oldgridlines = ReplaceAll[GridLines, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]]; 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines = 
                    With[{CalculateUtilities`GraphicsUtilities`Private`gray = 
                    GrayLevel[0.7]}, 
                    Replace[
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines,\
 {Pattern[CalculateUtilities`GraphicsUtilities`Private`a, {
                    Blank[List], 
                    Blank[List]}] :> Dynamic[
                    Join[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Replace[
                    MousePosition[{"Graphics", Graphics}, None], {
                    None -> {{}, {}}, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`x, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`y, 
                    Blank[]]} :> {{{
                    CalculateUtilities`GraphicsUtilities`Private`x, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}, {{
                    CalculateUtilities`GraphicsUtilities`Private`y, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}}}], 
                    2]], {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Blank[List]], Automatic} :> 
                    With[{CalculateUtilities`GraphicsUtilities`Private`\
divisions = {CalculateUtilities`GraphicsUtilities`Private`a, 
                    FindDivisions[
                    Last[CalculateUtilities`GraphicsUtilities`Private`range], 
                    7]}}, 
                    Dynamic[
                    Join[
                    CalculateUtilities`GraphicsUtilities`Private`divisions, 
                    Replace[
                    MousePosition[{"Graphics", Graphics}, None], {
                    None -> {{}, {}}, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`x, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`y, 
                    Blank[]]} :> {{{
                    CalculateUtilities`GraphicsUtilities`Private`x, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}, {{
                    CalculateUtilities`GraphicsUtilities`Private`y, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}}}], 
                    2]]], Blank[] -> Dynamic[
                    
                    Map[{{#, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}& , 
                    MousePosition[{"Graphics", Graphics}, None]]]}]]; If[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`type === 
                    None, CalculateUtilities`GraphicsUtilities`Private`b === 
                    None, CalculateUtilities`GraphicsUtilities`Private`l === 
                    None], 
                    Show[
                    CalculateUtilities`GraphicsUtilities`Private`g, GridLines -> 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines, 
                    If[
                    MatchQ[
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines, 
                    Alternatives[None, GridLines]], 
                    Method -> {"GridLinesInFront" -> True}, 
                    Apply[Sequence, {}]]], 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`nf = 
                    If[CalculateUtilities`GraphicsUtilities`Private`\
neareststyle === "1D", 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`n = 
                    Nearest[Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 1] -> 
                    CalculateUtilities`GraphicsUtilities`Private`pts]}, 
                    CalculateUtilities`GraphicsUtilities`Private`n[
                    Part[#, 1]]& ], 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`n = 
                    Nearest[Transpose[
                    Transpose[
                    CalculateUtilities`GraphicsUtilities`Private`pts]/Abs[
                    Apply[
                    Subtract, 
                    CalculateUtilities`GraphicsUtilities`Private`range, {
                    1}]]] -> 
                    CalculateUtilities`GraphicsUtilities`Private`pts], 
                    CalculateUtilities`GraphicsUtilities`Private`scale = Abs[
                    Apply[
                    Subtract, 
                    CalculateUtilities`GraphicsUtilities`Private`range, {
                    1}]]}, CalculateUtilities`GraphicsUtilities`Private`n[#/
                    CalculateUtilities`GraphicsUtilities`Private`scale]& ]], 
                    CalculateUtilities`GraphicsUtilities`Private`left = 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`bottom = 
                    CalculateUtilities`GraphicsUtilities`Private`b}, 
                    Show[
                    CalculateUtilities`GraphicsUtilities`Private`g, GridLines -> 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines, 
                    If[
                    MatchQ[
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines, 
                    Alternatives[None, GridLines]], 
                    Method -> {"GridLinesInFront" -> True}, 
                    Apply[Sequence, {}]], 
                    Epilog -> {
                    CalculateUtilities`GraphicsUtilities`Private`oldepilog, 
                    Dynamic[
                    
                    DynamicModule[{
                    CalculateUtilities`GraphicsUtilities`Private`pt = 
                    CalculateUtilities`GraphicsUtilities`Private`nf[
                    MousePosition[{"Graphics", Graphics}, {0, 0}]], 
                    CalculateUtilities`GraphicsUtilities`Private`scaled = 
                    MousePosition[{"GraphicsScaled", Graphics}, None]}, 
                    If[
                    CalculateUtilities`GraphicsUtilities`Private`scaled === 
                    None, {}, {
                    Text[
                    Style[
                    Row[{
                    CalculateUtilities`GraphicsUtilities`Private`bottom[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pt, 1, 1]], 
                    CalculateUtilities`GraphicsUtilities`Private`left[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pt, 1, 2]]}, 
                    ","], 12], 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pt, 1], {
                    1.5 Sign[Part[
                    CalculateUtilities`GraphicsUtilities`Private`scaled, 1] - 
                    0.5], 0}, Background -> White], 
                    AbsolutePointSize[7], 
                    Point[CalculateUtilities`GraphicsUtilities`Private`pt], 
                    White, 
                    AbsolutePointSize[5], 
                    Point[
                    CalculateUtilities`GraphicsUtilities`Private`pt]}]]]}]]]]]\
; CalculateUtilities`GraphicsUtilities`Private`post$388257[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Blank[]], 
                    BlankNullSequence[]] := 
                    CalculateUtilities`GraphicsUtilities`Private`g; 
                    CalculateUtilities`GraphicsUtilities`Private`orderedLines[{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`l, 
                    BlankSequence[Line]]}] := 
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`ordered, 
                    CalculateUtilities`GraphicsUtilities`Private`intervals}, 
                    CalculateUtilities`GraphicsUtilities`Private`ordered = 
                    Apply[And, 
                    Map[OrderedQ[
                    Part[#, 1, All, 1]]& , 
                    Hold[CalculateUtilities`GraphicsUtilities`Private`l]]]; If[
                    Not[
                    TrueQ[
                    CalculateUtilities`GraphicsUtilities`Private`ordered]], 
                    Return[False]]; 
                    CalculateUtilities`GraphicsUtilities`Private`intervals = 
                    Part[{CalculateUtilities`GraphicsUtilities`Private`l}, 
                    All, 1, {1, -1}, 1]; Length[
                    Apply[
                    Interval, 
                    CalculateUtilities`GraphicsUtilities`Private`intervals]] === 
                    Length[CalculateUtilities`GraphicsUtilities`Private`\
intervals]]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, 
                    Alternatives[Automatic, FrameTicks]] = {
                    Identity, Identity, Identity, Identity}; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`l, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`t, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`r, 
                    Blank[]]}] := 
                    Map[CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction, {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r}]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, {{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`l, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`r, 
                    Blank[]]}, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`t, 
                    Blank[]]}}] := 
                    Map[CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction, {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r}]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, 
                    Blank[]] = {None, None, None, None}; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, 
                    Alternatives[Automatic, Ticks]] = {Identity, Identity}; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`h, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`v, 
                    Blank[]]}] := 
                    Map[CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction, {CalculateUtilities`GraphicsUtilities`Private`h, 
                    CalculateUtilities`GraphicsUtilities`Private`v}]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, 
                    Blank[]] = {None, None}; 
                    CalculateUtilities`GraphicsUtilities`Private`CDFCleanTicks[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Blank[]]] := ReplaceAll[
                    ReplaceAll[
                    Part[
                    DeleteCases[
                    ReplaceAll[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Alternatives[Style, NumberForm] -> (#& )], {
                    Blank[], "", 
                    BlankNullSequence[]}], All, 
                    Span[1, 2]], Superscript[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[Integer]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`p, 
                    Blank[Integer]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`b^
                    CalculateUtilities`GraphicsUtilities`Private`p], Row[{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    BlankSequence[]]}, "\[Times]"] :> 
                    Times[CalculateUtilities`GraphicsUtilities`Private`a]]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks$, 
                    Blank[]]] := 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    CalculateUtilities`GraphicsUtilities`Private`WACleanTicks[
                    CalculateUtilities`GraphicsUtilities`Private`ticks$]]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[None] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[True] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[Automatic] = Identity; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[All] = Identity; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[Pattern[CalculateUtilities`GraphicsUtilities`Private`func, 
                    Blank[]] -> 
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Blank[]]] := Replace[
                    
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[CalculateUtilities`GraphicsUtilities`Private`ticks], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`f, 
                    Except[None]] :> 
                    Composition[
                    CalculateUtilities`GraphicsUtilities`Private`func, 
                    CalculateUtilities`GraphicsUtilities`Private`f]]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[{}] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {
                    Repeated[{
                    Blank[Integer], 
                    Blank[String]}]}]] := Which[
                    Quiet[
                    MatchQ[
                    Apply[SameQ, 
                    Map[Part[
                    DateList[#], 
                    Span[2, All]]& , 
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {
                    2}], {1}], {
                    Repeated[True]}]], DateString, 
                    Apply[And, 
                    StringMatchQ[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, All, 
                    2], NumberString]], 
                    
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Transpose[{
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, All, 
                    1], 
                    ToExpression[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, All, 
                    2]]}]], True, None]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {
                    Repeated[{
                    PatternTest[
                    Blank[], NumericQ], 
                    PatternTest[
                    Blank[], NumericQ]}]}]] := Which[
                    MatchQ[
                    Apply[
                    Equal, CalculateUtilities`GraphicsUtilities`Private`ticks,\
 {1}], {
                    Repeated[True]}], Identity, 
                    MatchQ[
                    
                    Apply[# == Log[#2]& , 
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {1}], {
                    Repeated[True]}], Exp, 
                    TrueQ[
                    Quiet[
                    Apply[Equal, 
                    Apply[Divide, Transpose[
                    Rest[CalculateUtilities`GraphicsUtilities`Private`ticks]] - 
                    Part[CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    1]]]]], 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`slope = 
                    Apply[Divide, 
                    Apply[Subtract, 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {-1, 
                    1}]]]}, 
                    SetPrecision[(# - Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 1, 
                    1])/CalculateUtilities`GraphicsUtilities`Private`slope + 
                    Part[CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    1, 2], 3]& ], True, None]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Blank[]] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`type, 
                    Blank[]], 
                    BlankNullSequence[]] := 
                    CalculateUtilities`GraphicsUtilities`Private`type; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[Identity, {
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`min, 
                    Blank[]], 
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`max, 
                    Blank[]]}, 
                    Blank[]] := 
                    With[{CalculateUtilities`GraphicsUtilities`Private`nf = 
                    CalculateUtilities`GraphicsUtilities`Private`numberForm, 
                    CalculateUtilities`GraphicsUtilities`Private`acc = 
                    Floor[Max[
                    Ceiling[Log[10, 
                    Max[
                    
                    Abs[{CalculateUtilities`GraphicsUtilities`Private`min, 
                    CalculateUtilities`GraphicsUtilities`Private`max}]]] - 
                    Log[10, (CalculateUtilities`GraphicsUtilities`Private`max - 
                    CalculateUtilities`GraphicsUtilities`Private`min)/100]], 
                    3] - RealExponent[
                    Max[
                    
                    Abs[{CalculateUtilities`GraphicsUtilities`Private`min, 
                    CalculateUtilities`GraphicsUtilities`Private`max}]]]]}, 
                    CalculateUtilities`GraphicsUtilities`Private`nf[#, 
                    CalculateUtilities`GraphicsUtilities`Private`acc]& ]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[Exp, {
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`min, 
                    Blank[]], 
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`max, 
                    Blank[]]}, 
                    Blank[]] := 
                    With[{CalculateUtilities`GraphicsUtilities`Private`prec = 
                    Max[
                    Ceiling[Log[10, 
                    Max[
                    
                    Abs[{CalculateUtilities`GraphicsUtilities`Private`min, 
                    CalculateUtilities`GraphicsUtilities`Private`max}]]] - 
                    Log[10, (CalculateUtilities`GraphicsUtilities`Private`max - 
                    CalculateUtilities`GraphicsUtilities`Private`min)/100]], 
                    3]}, Quiet[
                    RawBoxes[
                    ToBoxes[
                    NumberForm[
                    Exp[#], 
                    CalculateUtilities`GraphicsUtilities`Private`prec]]]]& ]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[DateString, {
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`min, 
                    Blank[]], 
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`max, 
                    Blank[]]}, 
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`pts, 
                    Blank[]]] := 
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`dates, 
                    CalculateUtilities`GraphicsUtilities`Private`spec}, 
                    CalculateUtilities`GraphicsUtilities`Private`dates = 
                    Map[DateList, 
                    CalculateUtilities`GraphicsUtilities`Private`pts]; 
                    CalculateUtilities`GraphicsUtilities`Private`spec = Switch[
                    Map[Length, 
                    Map[Union, 
                    Transpose[
                    CalculateUtilities`GraphicsUtilities`Private`dates]]], {
                    Blank[], 1, 1, 
                    BlankSequence[]}, {"Year"}, {
                    Blank[], 
                    Blank[], 1, 
                    BlankSequence[]}, {"MonthNameShort", " ", "Year"}, 
                    Blank[], {
                    "DayShort", " ", "MonthNameShort", " ", "Year"}]; 
                    If[(CalculateUtilities`GraphicsUtilities`Private`max - 
                    CalculateUtilities`GraphicsUtilities`Private`min)/
                    31536000 > 25, 
                    CalculateUtilities`GraphicsUtilities`Private`spec = {
                    "Year"}]; 
                    With[{CalculateUtilities`GraphicsUtilities`Private`s = 
                    CalculateUtilities`GraphicsUtilities`Private`spec}, 
                    DateString[#, 
                    CalculateUtilities`GraphicsUtilities`Private`s]& ]]; 
                    CalculateUtilities`GraphicsUtilities`Private`numberForm = 
                    Function[{
                    CalculateUtilities`GraphicsUtilities`Private`a, 
                    CalculateUtilities`GraphicsUtilities`Private`acc}, 
                    Quiet[
                    RawBoxes[
                    ToBoxes[
                    NumberForm[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Max[1, 
                    Ceiling[
                    RealExponent[
                    CalculateUtilities`GraphicsUtilities`Private`a] + 
                    CalculateUtilities`GraphicsUtilities`Private`acc]], 
                    ExponentFunction -> (Null& ), 
                    NumberFormat -> (StringReplace[#, StringExpression[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`s, 
                    BlankSequence[]], ".", EndOfString] -> 
                    CalculateUtilities`GraphicsUtilities`Private`s]& )]]]]]]]; 
                 Typeset`initDone$$ = True), DynamicModuleValues :> {}, 
                Deinitialization :> None, 
                UntrackedVariables :> {Typeset`size$$}, 
                SynchronousInitialization -> True, 
                UnsavedVariables :> {Typeset`initDone$$}], "Manipulate", 
               Deployed -> True, StripOnInput -> False], TraditionalForm], 
             Manipulate`InterpretManipulate[1]], TraditionalForm]], 
          "Output"]}], 
       XMLElement["dataformats", {}, {"minput"}]}], 
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["cell", {"compressed" -> True, "string" -> False}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             FormBox[
              StyleBox[
               
               DynamicModuleBox[{
                CalculateScan`PlotterScanner`Private`ar$$ = 1, 
                 CalculateScan`PlotterScanner`Private`contraPedalCurveColor$$ = 
                 RGBColor[0.7464574, 0.2952580000000001, 0.2454606], 
                 CalculateScan`PlotterScanner`Private`\
contraPedalCurveCountFactor$$ = 0.3, 
                 CalculateScan`PlotterScanner`Private`\
contraPedalCurveLastParamaters$$ = {}, 
                 CalculateScan`PlotterScanner`Private`contraPedalCurveOpacity$\
$ = 0.8, CalculateScan`PlotterScanner`Private`contraPedalCurvePlotCurves$$ = \
{}, CalculateScan`PlotterScanner`Private`contraPedalCurvePoints$$ = "curve", 
                 CalculateScan`PlotterScanner`Private`contraPedalCurveTF$$ = 
                 False, CalculateScan`PlotterScanner`Private`\
contraPedalCurveThickness$$ = -3., 
                 CalculateScan`PlotterScanner`Private`dualCurveColor$$ = 
                 RGBColor[0.2860602, 0.4663408, 0.29410879999999995`], 
                 CalculateScan`PlotterScanner`Private`dualCurveCountFactor$$ = 
                 0.3, CalculateScan`PlotterScanner`Private`\
dualCurveLastParamaters$$ = {}, 
                 CalculateScan`PlotterScanner`Private`dualCurveOpacity$$ = 
                 0.8, CalculateScan`PlotterScanner`Private`\
dualCurvePlotCurves$$ = {}, 
                 CalculateScan`PlotterScanner`Private`dualCurveTF$$ = False, 
                 CalculateScan`PlotterScanner`Private`dualCurveThickness$$ = \
-3., CalculateScan`PlotterScanner`Private`dualPedalCurvePoints$$ = "curve", 
                 CalculateScan`PlotterScanner`Private`evoluteColor$$ = 
                 RGBColor[0.813033, 0.766292, 0.303458], 
                 CalculateScan`PlotterScanner`Private`evoluteOpacity$$ = 0.8, 
                 CalculateScan`PlotterScanner`Private`evoluteTF$$ = False, 
                 CalculateScan`PlotterScanner`Private`evoluteThickness$$ = \
-3., CalculateScan`PlotterScanner`Private`fy1$$ = 0.982793723247329, 
                 CalculateScan`PlotterScanner`Private`fy2$$ = 
                 0.982793723247329, 
                 CalculateScan`PlotterScanner`Private`\
inverseCurveCircleRadiusFactor$$ = 0.4636476090008061, 
                 CalculateScan`PlotterScanner`Private`inverseCurveColor$$ = 
                 RGBColor[0.2860602, 0.4663408, 0.29410879999999995`], 
                 CalculateScan`PlotterScanner`Private`inverseCurveCountFactor$\
$ = 0.3, CalculateScan`PlotterScanner`Private`inverseCurveOpacity$$ = 0.8, 
                 CalculateScan`PlotterScanner`Private`inverseCurvePlotCurves$$\
 = {}, CalculateScan`PlotterScanner`Private`inverseCurvePoints$$ = "grid", 
                 CalculateScan`PlotterScanner`Private`inverseCurveTF$$ = 
                 False, CalculateScan`PlotterScanner`Private`\
inverseCurveThickness$$ = -3., 
                 CalculateScan`PlotterScanner`Private`inverseLastParamaters$$ = \
{}, CalculateScan`PlotterScanner`Private`involuteColor$$ = 
                 RGBColor[0.49978279999999997`, 0.6025278, 0.2508104], 
                 CalculateScan`PlotterScanner`Private`involuteCount$$ = 60, 
                 CalculateScan`PlotterScanner`Private`involuteOpacity$$ = 0.8,
                  CalculateScan`PlotterScanner`Private`involutesLeftTF$$ = 
                 False, CalculateScan`PlotterScanner`Private`involutesRightTF$\
$ = True, CalculateScan`PlotterScanner`Private`involuteTF$$ = False, 
                 CalculateScan`PlotterScanner`Private`involuteThickness$$ = \
-3., CalculateScan`PlotterScanner`Private`isopticCurveAngle$$ = 
                 Rational[1, 3] Pi, 
                 CalculateScan`PlotterScanner`Private`isopticCurveColor$$ = 
                 RGBColor[
                  0.8519382, 0.7451437999999999, 0.31752080000000005`], 
                 CalculateScan`PlotterScanner`Private`isopticCurveOpacity$$ = 
                 0.8, CalculateScan`PlotterScanner`Private`\
isopticCurvePlotCurves$$ = {}, 
                 CalculateScan`PlotterScanner`Private`isopticCurveTF$$ = 
                 False, 
                 CalculateScan`PlotterScanner`Private`isopticCurveThickness$$ = \
-3., CalculateScan`PlotterScanner`Private`isopticLastParamaters$$ = {}, 
                 CalculateUtilities`GraphicsUtilities`Private`more$$ = False, 
                 CalculateScan`PlotterScanner`Private`negativePedalCurveColor$\
$ = RGBColor[0.7464574, 0.2952580000000001, 0.2454606], 
                 CalculateScan`PlotterScanner`Private`\
negativePedalCurveCountFactor$$ = 0.3, 
                 CalculateScan`PlotterScanner`Private`\
negativePedalCurveLastParamaters$$ = {}, 
                 CalculateScan`PlotterScanner`Private`\
negativePedalCurveOpacity$$ = 0.8, 
                 CalculateScan`PlotterScanner`Private`\
negativePedalCurvePlotCurves$$ = {}, 
                 CalculateScan`PlotterScanner`Private`\
negativePedalCurvePoints$$ = "curve", 
                 CalculateScan`PlotterScanner`Private`negativePedalCurveTF$$ = 
                 False, CalculateScan`PlotterScanner`Private`\
negativePedalCurveThickness$$ = -3., 
                 CalculateScan`PlotterScanner`Private`normalColor$$ = 
                 RGBColor[0.237, 0.34, 0.575], 
                 CalculateScan`PlotterScanner`Private`normalCount$$ = 120, 
                 CalculateScan`PlotterScanner`Private`normalLength$$ = 
                 0.24934835901117428`, 
                 CalculateScan`PlotterScanner`Private`normalOpacity$$ = 0.8, 
                 CalculateScan`PlotterScanner`Private`normalTF$$ = True, 
                 CalculateScan`PlotterScanner`Private`normalThickness$$ = -3.,
                  CalculateScan`PlotterScanner`Private`offsetCurveColor$$ = 
                 RGBColor[0.877875, 0.731045, 0.326896], 
                 CalculateScan`PlotterScanner`Private`offsetCurveCount$$ = 12,
                  CalculateScan`PlotterScanner`Private`offsetCurveDistance$$ = 
                 0.24934835901117428`, 
                 CalculateScan`PlotterScanner`Private`\
offsetCurveLastParamaters$$ = {}, 
                 CalculateScan`PlotterScanner`Private`offsetCurveOpacity$$ = 
                 0.8, CalculateScan`PlotterScanner`Private`\
offsetCurvePlotCurves$$ = {}, 
                 CalculateScan`PlotterScanner`Private`offsetCurveTF$$ = False,
                  CalculateScan`PlotterScanner`Private`offsetCurveThickness$$ = \
-3., CalculateScan`PlotterScanner`Private`orthotomicCurveAngle$$ = 
                 Rational[1, 3] Pi, 
                 CalculateScan`PlotterScanner`Private`orthotomicCurveColor$$ = 
                 RGBColor[
                  0.8519382, 0.7451437999999999, 0.31752080000000005`], 
                 CalculateScan`PlotterScanner`Private`\
orthotomicCurveCountFactor$$ = 0.3, 
                 CalculateScan`PlotterScanner`Private`orthotomicCurveOpacity$$\
 = 0.8, CalculateScan`PlotterScanner`Private`orthotomicCurvePlotCurves$$ = {},
                  CalculateScan`PlotterScanner`Private`orthotomicCurvePoints$$\
 = "curve", CalculateScan`PlotterScanner`Private`orthotomicCurveTF$$ = False, 
                 CalculateScan`PlotterScanner`Private`\
orthotomicCurveThickness$$ = -3., 
                 CalculateScan`PlotterScanner`Private`\
orthotomicLastParamaters$$ = {}, 
                 CalculateScan`PlotterScanner`Private`osculatingCircleColor$$ = 
                 RGBColor[0.2752426, 0.4446824, 0.33950440000000004`], 
                 CalculateScan`PlotterScanner`Private`osculatingCircleCount$$ = 
                 60, CalculateScan`PlotterScanner`Private`\
osculatingCircleLastParamaters$$ = {}, 
                 CalculateScan`PlotterScanner`Private`osculatingCircleOpacity$\
$ = 0.8, CalculateScan`PlotterScanner`Private`osculatingCircleRadiiTF$$ = 
                 False, CalculateScan`PlotterScanner`Private`\
osculatingCircles$$ = {}, 
                 CalculateScan`PlotterScanner`Private`osculatingCircleTF$$ = 
                 False, CalculateScan`PlotterScanner`Private`\
osculatingCircleThickness$$ = -3., 
                 CalculateScan`PlotterScanner`Private`pedalCurveColor$$ = 
                 RGBColor[0.32894650000000003`, 0.5006225, 0.2625337], 
                 CalculateScan`PlotterScanner`Private`pedalCurveCountFactor$$ = 
                 0.3, CalculateScan`PlotterScanner`Private`\
pedalCurveLastParamaters$$ = {}, 
                 CalculateScan`PlotterScanner`Private`pedalCurveOpacity$$ = 
                 0.8, CalculateScan`PlotterScanner`Private`\
pedalCurvePlotCurves$$ = {}, 
                 CalculateScan`PlotterScanner`Private`pedalCurvePoints$$ = 
                 "curve", CalculateScan`PlotterScanner`Private`pedalCurveTF$$ = 
                 False, CalculateScan`PlotterScanner`Private`\
pedalCurveThickness$$ = -3., CalculateScan`PlotterScanner`Private`sa$$ = 
                 False, CalculateScan`PlotterScanner`Private`sqPRQ$$ = False, 
                 CalculateScan`PlotterScanner`Private`st$$ = False, 
                 CalculateScan`PlotterScanner`Private`symmxQ$$ = False, 
                 CalculateScan`PlotterScanner`Private`symmyQ$$ = True, 
                 CalculateScan`PlotterScanner`Private`tangentColor$$ = 
                 RGBColor[0.237736, 0.340215, 0.575113], 
                 CalculateScan`PlotterScanner`Private`tangentCount$$ = 60, 
                 CalculateScan`PlotterScanner`Private`tangentLength$$ = 
                 0.24934835901117428`, 
                 CalculateScan`PlotterScanner`Private`tangentOpacity$$ = 0.8, 
                 CalculateScan`PlotterScanner`Private`tangentTF$$ = False, 
                 CalculateScan`PlotterScanner`Private`tangentThickness$$ = \
-3., CalculateScan`PlotterScanner`Private`taylorParabolaColor$$ = 
                 RGBColor[0.7189495000000001, 0.719797, 0.283877], 
                 CalculateScan`PlotterScanner`Private`taylorParabolaCount$$ = 
                 36, CalculateScan`PlotterScanner`Private`\
taylorParabolaLastParamaters$$ = {}, 
                 CalculateScan`PlotterScanner`Private`taylorParabolaOpacity$$ = 
                 0.8, CalculateScan`PlotterScanner`Private`taylorParabolas$$ = \
{}, CalculateScan`PlotterScanner`Private`taylorParabolaTF$$ = False, 
                 CalculateScan`PlotterScanner`Private`taylorParabolaThickness$\
$ = -3., CalculateScan`PlotterScanner`Private`tiltedOffsetCurveAngle$$ = 
                 Rational[1, 4] Pi, 
                 CalculateScan`PlotterScanner`Private`tiltedOffsetCurveColor$$\
 = RGBColor[0.49978279999999997`, 0.6025278, 0.2508104], 
                 CalculateScan`PlotterScanner`Private`tiltedOffsetCurveCount$$\
 = 12, CalculateScan`PlotterScanner`Private`tiltedOffsetCurveDistance$$ = 
                 0.24934835901117428`, 
                 CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveLastParamaters$$ = {}, 
                 CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveOpacity$$ = 0.8, 
                 CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurvePlotCurves$$ = {}, 
                 CalculateScan`PlotterScanner`Private`tiltedOffsetCurveTF$$ = 
                 False, CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveThickness$$ = -3., 
                 CalculateScan`PlotterScanner`Private`tiltedTangentAngle$$ = 
                 Rational[1, 4] Pi, 
                 CalculateScan`PlotterScanner`Private`tiltedTangentColor$$ = 
                 RGBColor[
                  0.2622702, 0.40739780000000003`, 0.41955020000000004`], 
                 CalculateScan`PlotterScanner`Private`tiltedTangentCount$$ = 
                 60, CalculateScan`PlotterScanner`Private`tiltedTangentLength$\
$ = 0.24934835901117428`, 
                 CalculateScan`PlotterScanner`Private`tiltedTangentOpacity$$ = 
                 0.8, CalculateScan`PlotterScanner`Private`tiltedTangentTF$$ = 
                 False, CalculateScan`PlotterScanner`Private`\
tiltedTangentThickness$$ = -3., 
                 CalculateScan`PlotterScanner`Private`x1$$ = \
-0.7853981633974483, CalculateScan`PlotterScanner`Private`x2$$ = 
                 0.7853981633974483, Typeset`show$$ = True, 
                 Typeset`bookmarkList$$ = {}, Typeset`bookmarkMode$$ = "Menu",
                  Typeset`animator$$, Typeset`animvar$$ = 1, Typeset`name$$ = 
                 "\"untitled\"", Typeset`specs$$ = {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`more$$], {
                    False, True}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`x1$$], \
-0.7853981633974483, 
                    Subscript[
                    Style["x", Italic], "min"]}, -1.5393804002589986`, 
                    1.5393804002589986`}, {{
                    Hold[CalculateScan`PlotterScanner`Private`x2$$], 
                    0.7853981633974483, 
                    Subscript[
                    Style["x", Italic], "max"]}, -1.5393804002589986`, 
                    1.5393804002589986`}, {{
                    Hold[CalculateScan`PlotterScanner`Private`symmxQ$$], 
                    False, "symmetric"}, {True, False}}, {{
                    Hold[CalculateScan`PlotterScanner`Private`fy1$$], 
                    0.982793723247329, 
                    Subscript["y", "min"]}, 0, 1.5393804002589986`}, {{
                    Hold[CalculateScan`PlotterScanner`Private`fy2$$], 
                    0.982793723247329, 
                    Subscript["y", "max"]}, 0, 1.5393804002589986`}, {{
                    Hold[CalculateScan`PlotterScanner`Private`symmyQ$$], True,
                     "symmetric"}, {True, False}}, {{
                    Hold[CalculateScan`PlotterScanner`Private`sqPRQ$$], False, 
                    Dynamic[
                    Style["same as horizontal-range", 
                    If[
                    CalculateScan`PlotterScanner`Private`symmxQ$$, Black, 
                    Gray]]]}, {True, False}}, {{
                    Hold[CalculateScan`PlotterScanner`Private`sa$$], False, 
                    "show axes"}, {True, False}}, {{
                    Hold[CalculateScan`PlotterScanner`Private`st$$], False, 
                    Dynamic[
                    Style["show ticks", 
                    If[
                    CalculateScan`PlotterScanner`Private`sa$$ === True, Black,
                     Gray]]]}, {True, False}}, {{
                    Hold[CalculateScan`PlotterScanner`Private`ar$$], 1, 
                    "aspect ratio"}, 
                    Rational[1, 4], 4}, {{
                    Hold[CalculateScan`PlotterScanner`Private`tangentTF$$], 
                    False, ""}, {True, False}}, {{
                    Hold[CalculateScan`PlotterScanner`Private`tangentCount$$],
                     60, ""}, 2, 360, 1}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`tangentLength$$], 
                    0.24934835901117428`, ""}, 0, 1.5393804002589986`}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`tangentThickness$$], \
-3., ""}, -4, -0.5}, {{
                    Hold[CalculateScan`PlotterScanner`Private`tangentColor$$], 
                    RGBColor[0.237736, 0.340215, 0.575113], ""}, 
                    RGBColor[1, 0, 0]}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`tangentOpacity$$], 
                    0.8, ""}, 0, 1}, {{
                    Hold[CalculateScan`PlotterScanner`Private`normalTF$$], 
                    True, ""}, {True, False}}, {{
                    Hold[CalculateScan`PlotterScanner`Private`normalCount$$], 
                    120, ""}, 2, 360, 1}, {{
                    Hold[CalculateScan`PlotterScanner`Private`normalLength$$],
                     0.24934835901117428`, ""}, 0, 1.5393804002589986`}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`normalThickness$$], \
-3., ""}, -4, -0.5}, {{
                    Hold[CalculateScan`PlotterScanner`Private`normalColor$$], 
                    
                    RGBColor[0.237, 0.34, 0.575], ""}, 
                    RGBColor[1, 0, 0]}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`normalOpacity$$], 
                    0.8, ""}, 0, 1}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`tiltedTangentTF$$], 
                    False, ""}, {True, False}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`tiltedTangentAngle$$]\
, Rational[1, 4] Pi, ""}, -Pi, Pi}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`tiltedTangentCount$$]\
, 60, ""}, 2, 360, 1}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`tiltedTangentLength$$\
], 0.24934835901117428`, ""}, 0, 1.5393804002589986`}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
tiltedTangentThickness$$], -3., ""}, -4, -0.5}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`tiltedTangentColor$$]\
, 
                    RGBColor[
                    0.2622702, 0.40739780000000003`, 0.41955020000000004`], 
                    ""}, 
                    RGBColor[1, 0, 0]}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`tiltedTangentOpacity$\
$], 0.8, ""}, 0, 1}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`osculatingCircleTF$$]\
, False, ""}, {True, False}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleCount$$], 60, ""}, 2, 360, 1}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleThickness$$], -3., ""}, -4, -0.5}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleColor$$], 
                    RGBColor[0.2752426, 0.4446824, 0.33950440000000004`], ""}, 
                    RGBColor[1, 0, 0]}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleOpacity$$], 0.8, ""}, 0, 1}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleRadiiTF$$], False, ""}, {True, False}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`taylorParabolaTF$$], 
                    False, ""}, {True, False}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`taylorParabolaCount$$\
], 36, ""}, 2, 120, 1}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
taylorParabolaThickness$$], -3., ""}, -4, -0.5}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`taylorParabolaColor$$\
], 
                    RGBColor[0.7189495000000001, 0.719797, 0.283877], ""}, 
                    RGBColor[1, 0, 0]}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
taylorParabolaOpacity$$], 0.8, ""}, 0, 1}, {{
                    Hold[CalculateScan`PlotterScanner`Private`involuteTF$$], 
                    False, ""}, {True, False}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`involuteCount$$], 60,
                     ""}, 1, 120, 1}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`involuteThickness$$],\
 -3., ""}, -4, -0.5}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`involuteColor$$], 
                    RGBColor[0.49978279999999997`, 0.6025278, 0.2508104], ""}, 
                    RGBColor[1, 0, 0]}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`involuteOpacity$$], 
                    0.8, ""}, 0, 1}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`involutesLeftTF$$], 
                    False, ""}, {True, False}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`involutesRightTF$$], 
                    True, ""}, {True, False}}, {{
                    Hold[CalculateScan`PlotterScanner`Private`evoluteTF$$], 
                    False, ""}, {True, False}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`evoluteThickness$$], \
-3., ""}, -4, -0.5}, {{
                    Hold[CalculateScan`PlotterScanner`Private`evoluteColor$$], 
                    RGBColor[0.813033, 0.766292, 0.303458], ""}, 
                    RGBColor[1, 0, 0]}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`evoluteOpacity$$], 
                    0.8, ""}, 0, 1}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`offsetCurveTF$$], 
                    False, ""}, {True, False}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`offsetCurveDistance$$\
], 0.24934835901117428`, ""}, 0, 1.5393804002589986`}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`offsetCurveCount$$], 
                    12, ""}, 1, 60, 1}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`offsetCurveThickness$\
$], -3., ""}, -4, -0.5}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`offsetCurveColor$$], 
                    
                    RGBColor[0.877875, 0.731045, 0.326896], ""}, 
                    RGBColor[1, 0, 0]}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`offsetCurveOpacity$$]\
, 0.8, ""}, 0, 1}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`tiltedOffsetCurveTF$$\
], False, ""}, {True, False}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveAngle$$], Rational[1, 4] Pi, ""}, -Pi, Pi}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveDistance$$], 0.24934835901117428`, ""}, 0, 
                    1.5393804002589986`}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveCount$$], 12, ""}, 1, 60, 1}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveThickness$$], -3., ""}, -4, -0.5}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveColor$$], 
                    RGBColor[0.49978279999999997`, 0.6025278, 0.2508104], ""}, 
                    RGBColor[1, 0, 0]}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveOpacity$$], 0.8, ""}, 0, 1}, {{
                    Hold[CalculateScan`PlotterScanner`Private`pedalCurveTF$$],
                     False, ""}, {True, False}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
pedalCurveCountFactor$$], 0.3, ""}, 0, 1}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`pedalCurveThickness$$\
], -3., ""}, -4, -0.5}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`pedalCurveColor$$], 
                    RGBColor[0.32894650000000003`, 0.5006225, 0.2625337], ""}, 
                    RGBColor[1, 0, 0]}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`pedalCurveOpacity$$],
                     0.8, ""}, 0, 1}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`pedalCurvePoints$$], 
                    "curve", ""}, {"grid", "curve"}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`negativePedalCurveTF$\
$], False, ""}, {True, False}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurveCountFactor$$], 0.3, ""}, 0, 1}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurveThickness$$], -3., ""}, -4, -0.5}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurveColor$$], 
                    RGBColor[0.7464574, 0.2952580000000001, 0.2454606], ""}, 
                    RGBColor[1, 0, 0]}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurveOpacity$$], 0.8, ""}, 0, 1}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurvePoints$$], "curve", ""}, {"curve", "grid"}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`contraPedalCurveTF$$]\
, False, ""}, {True, False}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurveCountFactor$$], 0.3, ""}, 0, 1}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurveThickness$$], -3., ""}, -4, -0.5}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurveColor$$], 
                    RGBColor[0.7464574, 0.2952580000000001, 0.2454606], ""}, 
                    RGBColor[1, 0, 0]}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurveOpacity$$], 0.8, ""}, 0, 1}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurvePoints$$], "curve", ""}, {"curve", "grid"}}, {{
                    Hold[CalculateScan`PlotterScanner`Private`dualCurveTF$$], 
                    False, ""}, {True, False}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`dualCurveCountFactor$\
$], 0.3, ""}, 0, 1}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`dualCurveThickness$$]\
, -3., ""}, -4, -0.5}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`dualCurveColor$$], 
                    RGBColor[0.2860602, 0.4663408, 0.29410879999999995`], ""}, 
                    RGBColor[1, 0, 0]}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`dualCurveOpacity$$], 
                    0.8, ""}, 0, 1}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`dualPedalCurvePoints$\
$], "curve", ""}, {"curve", "grid"}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`inverseCurveTF$$], 
                    False, ""}, {True, False}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
inverseCurveCountFactor$$], 0.3, ""}, 0, 1}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
inverseCurveThickness$$], -3., ""}, -4, -0.5}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`inverseCurveColor$$], 
                    RGBColor[0.2860602, 0.4663408, 0.29410879999999995`], ""}, 
                    RGBColor[1, 0, 0]}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`inverseCurveOpacity$$\
], 0.8, ""}, 0, 1}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`inverseCurvePoints$$]\
, "grid", ""}, {"curve", "grid"}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
inverseCurveCircleRadiusFactor$$], 0.4636476090008061, ""}, 0, 1}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`isopticCurveTF$$], 
                    False, ""}, {True, False}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`isopticCurveAngle$$],
                     Rational[1, 3] Pi, ""}, 0, Pi}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
isopticCurveThickness$$], -3., ""}, -4, -0.5}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`isopticCurveColor$$], 
                    RGBColor[
                    0.8519382, 0.7451437999999999, 0.31752080000000005`], ""}, 
                    RGBColor[1, 0, 0]}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`isopticCurveOpacity$$\
], 0.8, ""}, 0, 1}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`orthotomicCurveTF$$],
                     False, ""}, {True, False}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`orthotomicCurveAngle$\
$], Rational[1, 3] Pi, ""}, 0, Pi}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
orthotomicCurveCountFactor$$], 0.3, ""}, 0, 1}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
orthotomicCurveThickness$$], -3., ""}, -4, -0.5}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`orthotomicCurveColor$\
$], 
                    RGBColor[
                    0.8519382, 0.7451437999999999, 0.31752080000000005`], ""}, 
                    RGBColor[1, 0, 0]}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
orthotomicCurveOpacity$$], 0.8, ""}, 0, 1}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
orthotomicCurvePoints$$], "curve", ""}, {"curve", "grid"}}, {
                    Hold[
                    Style[
                    Overlay[{
                    RawBoxes[
                    PaneBox[
                    GraphicsBox[
                    
                    RasterBox[{{{0, 0, 0, 24}}, {{0, 0, 0, 9}}, {{0, 0, 0, 
                    10}}, {{0, 0, 0, 10}}, {{0, 0, 0, 9}}, {{0, 0, 0, 9}}, {{
                    0, 0, 0, 8}}, {{0, 0, 0, 8}}, {{0, 0, 0, 9}}, {{0, 0, 0, 
                    8}}, {{0, 0, 0, 7}}, {{0, 0, 0, 7}}, {{0, 0, 0, 8}}, {{0, 
                    0, 0, 6}}, {{0, 0, 0, 6}}, {{0, 0, 0, 6}}, {{0, 0, 0, 
                    6}}, {{0, 0, 0, 5}}, {{0, 0, 0, 6}}, {{0, 0, 0, 5}}, {{0, 
                    0, 0, 4}}, {{0, 0, 0, 4}}, {{0, 0, 0, 5}}, {{0, 0, 0, 
                    5}}, {{0, 0, 0, 3}}, {{0, 0, 0, 4}}, {{0, 0, 0, 3}}, {{0, 
                    0, 0, 3}}, {{0, 0, 0, 3}}, {{0, 0, 0, 3}}, {{0, 0, 0, 
                    2}}, {{0, 0, 0, 2}}, {{0, 0, 0, 2}}, {{0, 0, 0, 2}}, {{0, 
                    0, 0, 1}}, {{0, 0, 0, 2}}, {{0, 0, 0, 2}}, {{0, 0, 0, 
                    0}}, {{0, 0, 0, 1}}, {{255, 255, 255, 0}}, {{255, 255, 
                    255, 0}}, {{255, 255, 255, 0}}, {{255, 255, 255, 0}}, {{
                    255, 255, 255, 0}}, {{255, 255, 255, 0}}}, {{0, 45}, {
                    2500, 0}}, {0, 255}, ColorFunction -> RGBColor], 
                    ImageSize -> {2500, 45}, 
                    PlotRange -> {{0, 2500}, {0, 45}}], ImageSize -> 
                    Scaled[1], ScrollPosition -> {0., 0.}]], 
                    Pane[
                    Column[{
                    Row[{
                    Invisible[
                    RawBoxes[
                    GraphicsBox[
                    TagBox[
                    
                    RasterBox[{{{255, 132, 0}, {255, 132, 0}, {255, 132, 0}, {
                    255, 132, 0}, {255, 132, 0}, {255, 132, 0}}, {{255, 132, 
                    0}, {255, 132, 0}, {255, 132, 0}, {255, 132, 0}, {255, 
                    132, 0}, {255, 132, 0}}}, {{0, 2}, {6, 0}}, {0, 255}, 
                    ColorFunction -> RGBColor], 
                    BoxForm`ImageTag[
                    "Byte", ColorSpace -> "RGB", Interleaving -> True], 
                    Selectable -> False], BaseStyle -> "ImageGraphics", 
                    ImageSize -> Magnification[1], ImageSizeRaw -> {6, 2}, 
                    BaselinePosition -> (Scaled[0] -> Center), 
                    PlotRange -> {{0, 6}, {0, 2}}]]], " ", 
                    Column[{"Horizontal plot range:", 
                    Row[{
                    Manipulate`Place[1], "  ", 
                    Manipulate`Place[2], "  ", 
                    Manipulate`Place[3]}]}]}], 
                    PaneSelector[{True -> Grid[{{
                    Button[
                    Row[{
                    RawBoxes[
                    GraphicsBox[
                    TagBox[
                    
                    RasterBox[{{{255, 132, 0}, {255, 132, 0}, {255, 132, 0}, {
                    255, 132, 0}, {255, 132, 0}, {255, 132, 0}}, {{255, 132, 
                    0}, {255, 132, 0}, {255, 132, 0}, {255, 132, 0}, {255, 
                    132, 0}, {255, 132, 0}}}, {{0, 2}, {6, 0}}, {0, 255}, 
                    ColorFunction -> RGBColor], 
                    BoxForm`ImageTag[
                    "Byte", ColorSpace -> "RGB", Interleaving -> True], 
                    Selectable -> False], BaseStyle -> "ImageGraphics", 
                    ImageSize -> Magnification[1], ImageSizeRaw -> {6, 2}, 
                    BaselinePosition -> (Scaled[0] -> Center), 
                    PlotRange -> {{0, 6}, {0, 2}}]], " "}], 
                    CalculateUtilities`GraphicsUtilities`Private`more$$ = 
                    False, Appearance -> None, BaseStyle -> {}], 
                    Button[
                    "Fewer controls", 
                    CalculateUtilities`GraphicsUtilities`Private`more$$ = 
                    False, Appearance -> None, BaseStyle -> {}]}, {"", 
                    Item[
                    Column[{
                    Column[{"Vertical plot range:", 
                    Row[{
                    Manipulate`Place[4], "  ", 
                    Manipulate`Place[5], "  ", 
                    Manipulate`Place[6]}], 
                    Manipulate`Place[7]}], 
                    Column[{
                    Row[{
                    Manipulate`Place[8], "  ", 
                    Manipulate`Place[9]}], 
                    Row[{
                    Manipulate`Place[10], "   settings: ", 
                    Button[
                    "1", CalculateScan`PlotterScanner`Private`ar$$ = 1, 
                    ImageSize -> Small, Appearance -> "Palette", 
                    BaseStyle -> {}], "  ", 
                    Button["unscaled axes", 
                    (If[
                    1/4 <= # <= 4, 
                    CalculateScan`PlotterScanner`Private`ar$$ = #]& )[Abs[
                    Apply[
                    Subtract, CalculateScan`PlotterScanner`Private`pRY]]/Abs[
                    Apply[
                    Subtract, CalculateScan`PlotterScanner`Private`pRX]]], 
                    ImageSize -> Small, Appearance -> "Palette", 
                    BaseStyle -> {}]}]}], 
                    TabView[{Row[{" ", 
                    Dynamic[
                    If[CalculateScan`PlotterScanner`Private`tangentTF$$, 
                    Style[
                    "\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`tangentColor$$, 
                    Bold], " "]], 
                    Tooltip[" tangents             ", 
                    Style[" family of tangents at points along the curve ", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> 
                    Grid[{{"show tangents", 
                    Manipulate`Place[11]}, {"tangent count", 
                    Manipulate`Place[12]}, {"tangent length", 
                    Manipulate`Place[13]}, {"tangent thickness", 
                    Manipulate`Place[14]}, {"tangent color", 
                    Manipulate`Place[15]}, {"tangent opacity", 
                    Manipulate`Place[16]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    False}}], Row[{" ", 
                    Dynamic[
                    If[CalculateScan`PlotterScanner`Private`normalTF$$, 
                    Style[
                    "\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`normalColor$$, Bold],
                     " "]], 
                    Tooltip[" normals              ", 
                    Style[" family of normals at points along the curve ", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> 
                    Grid[{{"show normals", 
                    Manipulate`Place[17]}, {"normal count", 
                    Manipulate`Place[18]}, {"normal length", 
                    Manipulate`Place[19]}, {"normal thickness", 
                    Manipulate`Place[20]}, {"normal color", 
                    Manipulate`Place[21]}, {"normal opacity", 
                    Manipulate`Place[22]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    False}}], Row[{" ", 
                    Dynamic[
                    If[CalculateScan`PlotterScanner`Private`tiltedTangentTF$$, 
                    Style[
                    "\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`tiltedTangentColor$$,
                     Bold], " "]], 
                    Tooltip[" tilted tangents      ", 
                    Style[
                    " family of tilted tangents at points along the curve ", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> 
                    Grid[{{"show tilted tangents", 
                    Manipulate`Place[23]}, {"tilted tangent angle", 
                    Manipulate`Place[24]}, {"tilted tangent count", 
                    Manipulate`Place[25]}, {"tilted tangent length", 
                    Manipulate`Place[26]}, {"tilted tangent thickness", 
                    Manipulate`Place[27]}, {"tilted tangent color", 
                    Manipulate`Place[28]}, {"tilted tangent opacity", 
                    Manipulate`Place[29]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    False}}], Row[{" ", 
                    Dynamic[
                    If[
                    CalculateScan`PlotterScanner`Private`osculatingCircleTF$$, 
                    Style[
                    "\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleColor$$, Bold], " "]], 
                    Tooltip[" osculating circles   ", 
                    Style[
                    
                    " family of osculating circles (circles that are tangent \
to the curve) at points along the curve", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> Column[{
                    Grid[{{"show osculating circles", 
                    Manipulate`Place[30]}, {"osculating circle count", 
                    Manipulate`Place[31]}, {"osculating circle thickness", 
                    Manipulate`Place[32]}, {"osculating circle color", 
                    Manipulate`Place[33]}, {"osculating circle opacity", 
                    Manipulate`Place[34]}, {"show circle radii", 
                    Manipulate`Place[35]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    True}}], 
                    Dynamic[
                    Style[
                    If[
                    And[
                    CalculateScan`PlotterScanner`Private`osculatingCircleTF$$, 
                    Not[
                    0.98 < CalculateScan`PlotterScanner`Private`ar$$ < 1.02]],
                     "(note than circles appear as ellipses for unequally\n\
scaled horizontal and vertical axes)", ""]], 
                    RGBColor[
                    0.6666666666666666, 0.6666666666666666, 
                    0.6666666666666666]]}, Alignment -> Left], Row[{" ", 
                    Dynamic[
                    If[
                    CalculateScan`PlotterScanner`Private`taylorParabolaTF$$, 
                    Style[
                    "\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`taylorParabolaColor$$\
, Bold], " "]], 
                    Tooltip[" Taylor parabolas     ", 
                    Style[" family of second order Taylor approximations", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> Column[{
                    Grid[{{"show Taylor parabolas", 
                    Manipulate`Place[36]}, {"Taylor parabola count", 
                    Manipulate`Place[37]}, {"Taylor parabola thickness", 
                    Manipulate`Place[38]}, {"Taylor parabola color", 
                    Manipulate`Place[39]}, {"Taylor parabola opacity", 
                    Manipulate`Place[40]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    True}}]}, Alignment -> Left], Row[{" ", 
                    Dynamic[
                    If[CalculateScan`PlotterScanner`Private`involuteTF$$, 
                    Style[
                    "\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`involuteColor$$, 
                    Bold], " "]], 
                    Tooltip[" involutes            ", 
                    Style[
                    " family of involutes (curves traced out by strings \
unwound from the curve) of the curve", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> 
                    Grid[{{"show involutes", 
                    Manipulate`Place[41]}, {"involute count", 
                    Manipulate`Place[42]}, {"involute thickness", 
                    Manipulate`Place[43]}, {"involute color", 
                    Manipulate`Place[44]}, {"involute opacity", 
                    Manipulate`Place[45]}, {"directions", 
                    Row[{"\[DoubleLongLeftArrow]", 
                    Manipulate`Place[46], "  \[DoubleLongRightArrow]", 
                    Manipulate`Place[47]}]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    True}}], Row[{" ", 
                    Dynamic[
                    If[CalculateScan`PlotterScanner`Private`evoluteTF$$, 
                    Style[
                    "\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`evoluteColor$$, 
                    Bold], " "]], 
                    Tooltip[" evolute              ", 
                    Style[
                    " the evolute of a given curve (curve of the centers of \
the osculating circles))", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> 
                    Grid[{{"show evolute", 
                    Manipulate`Place[48]}, {"evolute thickness", 
                    Manipulate`Place[49]}, {"evolute color", 
                    Manipulate`Place[50]}, {"evolute opacity", 
                    Manipulate`Place[51]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    False}}], Row[{" ", 
                    Dynamic[
                    If[CalculateScan`PlotterScanner`Private`offsetCurveTF$$, 
                    Style[
                    "\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`offsetCurveColor$$, 
                    Bold], " "]], 
                    Tooltip[" offset curves        ", 
                    Style[
                    " family of offset curves (curves shifted a fixed \
distance perpendicular to each point of the original curve) ", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> 
                    Grid[{{"show offset curves", 
                    Manipulate`Place[52]}, {"offset curve distance", 
                    Manipulate`Place[53]}, {"offset curve count", 
                    Manipulate`Place[54]}, {"offset curve thickness", 
                    Manipulate`Place[55]}, {"offset curve color", 
                    Manipulate`Place[56]}, {"offset curve opacity", 
                    Manipulate`Place[57]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    False}}], Row[{" ", 
                    Dynamic[
                    If[
                    CalculateScan`PlotterScanner`Private`tiltedOffsetCurveTF$$\
, 
                    Style["\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveColor$$, Bold], " "]], 
                    Tooltip[" tilted offset curves ", 
                    Style[
                    " family of tilted offset curves (curves shifted a fixed \
distance in a direction with a fixed angle \n                                 \
     to the local normal to each point of the original curve) ", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> 
                    Grid[{{"show tilted offset curves", 
                    Manipulate`Place[58]}, {"tilted offset curve angle", 
                    Manipulate`Place[59]}, {"tilted offset curve distance", 
                    Manipulate`Place[60]}, {"tilted offset curve count", 
                    Manipulate`Place[61]}, {"tilted offset curve thickness", 
                    Manipulate`Place[62]}, {"tilted offset curve color", 
                    Manipulate`Place[63]}, {"tilted offset curve opacity", 
                    Manipulate`Place[64]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    False}}], Row[{" ", 
                    Dynamic[
                    If[CalculateScan`PlotterScanner`Private`pedalCurveTF$$, 
                    Style[
                    "\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`pedalCurveColor$$, 
                    Bold], " "]], 
                    Tooltip[" pedal curves         ", 
                    Style[
                    " family of pedal curves (curves on the tangents of the \
given curve perpendicular to a given point) ", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> 
                    Grid[{{"show pedal curves", 
                    Manipulate`Place[65]}, {"pedal curve count", 
                    Manipulate`Place[66]}, {"pedal curve thickness", 
                    Manipulate`Place[67]}, {"pedal curve color", 
                    Manipulate`Place[68]}, {"pedal curve opacity", 
                    Manipulate`Place[69]}, {"pedal points", 
                    Manipulate`Place[70]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    True}}], Row[{" ", 
                    Dynamic[
                    If[
                    CalculateScan`PlotterScanner`Private`negativePedalCurveTF$\
$, 
                    Style["\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurveColor$$, Bold], " "]], 
                    Tooltip[" negative pedal curves", 
                    Style[
                    " family of negative pedal curves (envelope curves of \
lines perpendicular to the given curve and a given point) ", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> 
                    Grid[{{"show negative pedal curves", 
                    Manipulate`Place[71]}, {"negative pedal curve count", 
                    Manipulate`Place[72]}, {
                    "negative pedal curve thickness", 
                    Manipulate`Place[73]}, {"negative pedal curve color", 
                    Manipulate`Place[74]}, {"negative pedal curve opacity", 
                    Manipulate`Place[75]}, {"negative pedal points", 
                    Manipulate`Place[76]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    False}}], Row[{" ", 
                    Dynamic[
                    If[
                    CalculateScan`PlotterScanner`Private`contraPedalCurveTF$$, 
                    Style[
                    "\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurveColor$$, Bold], " "]], 
                    Tooltip[" contrapedal curves   ", 
                    Style[
                    " family of contrapedal curves (curves on the normals of \
the given curve perpendicular to a given point) ", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> 
                    Grid[{{"show contrapedal curves", 
                    Manipulate`Place[77]}, {"contrapedal curve count", 
                    Manipulate`Place[78]}, {"contrapedal curve thickness", 
                    Manipulate`Place[79]}, {"contrapedal curve color", 
                    Manipulate`Place[80]}, {"contrapedal curve opacity", 
                    Manipulate`Place[81]}, {"contrapedal pedal points", 
                    Manipulate`Place[82]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    False}}], Row[{" ", 
                    Dynamic[
                    If[CalculateScan`PlotterScanner`Private`dualCurveTF$$, 
                    Style[
                    "\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`dualCurveColor$$, 
                    Bold], " "]], 
                    Tooltip[" dual curves          ", 
                    Style[
                    " dual curve of the given curve (the dual curbe maps \
inflection points to cusps) ", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> 
                    Grid[{{"show dual curves", 
                    Manipulate`Place[83]}, {"dual curve count", 
                    Manipulate`Place[84]}, {"dual curve thickness", 
                    Manipulate`Place[85]}, {"dual curve color", 
                    Manipulate`Place[86]}, {"dual curve opacity", 
                    Manipulate`Place[87]}, {"dual curve points", 
                    Manipulate`Place[88]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    False}}], Row[{" ", 
                    Dynamic[
                    If[
                    CalculateScan`PlotterScanner`Private`inverseCurveTF$$, 
                    Style[
                    "\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`inverseCurveColor$$, 
                    Bold], " "]], 
                    Tooltip[" inverse curves       ", 
                    Style[
                    " inverse curves (curves resulting from carrying of an \
inversion on circles) ", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> 
                    Grid[{{"show inverse curves", 
                    Manipulate`Place[89]}, {"inverse curve count", 
                    Manipulate`Place[90]}, {"inverse curve thickness", 
                    Manipulate`Place[91]}, {"inverse curve color", 
                    Manipulate`Place[92]}, {"inverse curve opacity", 
                    Manipulate`Place[93]}, {"inversion curve points", 
                    Manipulate`Place[94]}, {"inversion circle radius", 
                    Manipulate`Place[95]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    False}}], Row[{" ", 
                    Dynamic[
                    If[
                    CalculateScan`PlotterScanner`Private`isopticCurveTF$$, 
                    Style["\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`isopticCurveColor$$, 
                    Bold], " "]], 
                    Tooltip[" isoptic curves       ", 
                    Style[
                    " inverse curves (points on isoptic curves have two \
tangents with the given curve and the two tangents meet with the specified \
angle)) ", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> Column[{
                    Grid[{{"show isoptic curves", 
                    Manipulate`Place[96]}, {"isoptic curve angle", 
                    Manipulate`Place[97]}, {"isoptic curve thickness", 
                    Manipulate`Place[98]}, {"isoptic curve color", 
                    Manipulate`Place[99]}, {"isoptic curve opacity", 
                    Manipulate`Place[100]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    False}}], 
                    Dynamic[
                    Style[
                    If[
                    TrueQ[
                    And[
                    CalculateScan`PlotterScanner`Private`isopticCurveTF$$, 
                    CalculateScan`PlotterScanner`Private`x1x2SCPCurves === \
{}]], "(note than the set of isoptic curves for a given angle can be empty)", 
                    ""]], 
                    RGBColor[
                    0.6666666666666666, 0.6666666666666666, 
                    0.6666666666666666]]}, Alignment -> Left], Row[{" ", 
                    Dynamic[
                    If[
                    CalculateScan`PlotterScanner`Private`orthotomicCurveTF$$, 
                    
                    Style[
                    "\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`orthotomicCurveColor$\
$, Bold], " "]], 
                    Tooltip[" orthotomic curves    ", 
                    Style[
                    " orthotomic curves (points of reflections of a given \
point on curve tangents)) ", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> 
                    Grid[{{"show orthotomic curves", 
                    Manipulate`Place[101]}, {"orthotomic curve angle", 
                    Manipulate`Place[102]}, {"orthotomic curve count", 
                    Manipulate`Place[103]}, {"orthotomic curve thickness", 
                    Manipulate`Place[104]}, {"orthotomic curve color", 
                    Manipulate`Place[105]}, {"orthotomic curve opacity", 
                    Manipulate`Place[106]}, {"orthotomic curve points", 
                    Manipulate`Place[107]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    False}}]}, 2, ImageSize -> {All, Automatic}, 
                    ControlPlacement -> Left]}, 
                    Dividers -> {None, {False, True, True, True}}, Spacings -> 
                    1], ItemSize -> Scaled[1], 
                    Frame -> {None, None, True, None}]}}, FrameStyle -> 
                    GrayLevel[0.9], Alignment -> Left, Spacings -> {0, 0.8}], 
                    False -> Button[
                    Row[{
                    RawBoxes[
                    GraphicsBox[
                    TagBox[
                    
                    RasterBox[{{{255, 255, 255}, {255, 255, 255}, {255, 132, 
                    0}, {255, 132, 0}, {255, 255, 255}, {255, 255, 255}}, {{
                    255, 255, 255}, {255, 255, 255}, {255, 132, 0}, {255, 132,
                     0}, {255, 255, 255}, {255, 255, 255}}, {{255, 132, 0}, {
                    255, 132, 0}, {255, 132, 0}, {255, 132, 0}, {255, 132, 
                    0}, {255, 132, 0}}, {{255, 132, 0}, {255, 132, 0}, {255, 
                    132, 0}, {255, 132, 0}, {255, 132, 0}, {255, 132, 0}}, {{
                    255, 255, 255}, {255, 255, 255}, {255, 132, 0}, {255, 132,
                     0}, {255, 255, 255}, {255, 255, 255}}, {{255, 255, 
                    255}, {255, 255, 255}, {255, 132, 0}, {255, 132, 0}, {255,
                     255, 255}, {255, 255, 255}}}, {{0, 6}, {6, 0}}, {0, 255},
                     ColorFunction -> RGBColor], 
                    BoxForm`ImageTag[
                    "Byte", ColorSpace -> "RGB", Interleaving -> True], 
                    Selectable -> False], BaseStyle -> "ImageGraphics", 
                    ImageSize -> Magnification[1], ImageSizeRaw -> {6, 6}, 
                    BaselinePosition -> (Scaled[0.3] -> Center), 
                    PlotRange -> {{0, 6}, {0, 6}}]], " More controls"}], 
                    CalculateUtilities`GraphicsUtilities`Private`more$$ = 
                    True, Appearance -> None, BaseStyle -> {}]}, 
                    Dynamic[
                    CalculateUtilities`GraphicsUtilities`Private`more$$], 
                    ImageSize -> Automatic]}], 
                    ImageMargins -> {{20, 30}, {10, 10}}]}, {1, 2}, 2, 
                    Alignment -> {Left, Top}]]], 
                    Manipulate`Dump`ThisIsNotAControl}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleLastParamaters$$], {}}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`osculatingCircles$$],\
 {}}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
taylorParabolaLastParamaters$$], {}}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`taylorParabolas$$], \
{}}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
offsetCurveLastParamaters$$], {}}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
offsetCurvePlotCurves$$], {}}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveLastParamaters$$], {}}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurvePlotCurves$$], {}}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
pedalCurveLastParamaters$$], {}}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`pedalCurvePlotCurves$\
$], {}}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurveLastParamaters$$], {}}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurvePlotCurves$$], {}}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurveLastParamaters$$], {}}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurvePlotCurves$$], {}}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
dualCurveLastParamaters$$], {}}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`dualCurvePlotCurves$$\
], {}}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
inverseLastParamaters$$], {}}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
inverseCurvePlotCurves$$], {}}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
orthotomicLastParamaters$$], {}}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
orthotomicCurvePlotCurves$$], {}}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
isopticLastParamaters$$], {}}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
isopticCurvePlotCurves$$], {}}}}, Typeset`size$$ = Automatic, 
                 Typeset`update$$ = 0, Typeset`initDone$$ = False, 
                 Typeset`skipInitDone$$ = False, 
                 CalculateUtilities`GraphicsUtilities`Private`more$388300$$ = 
                 False, CalculateScan`PlotterScanner`Private`x1$388305$$ = 0, 
                 CalculateScan`PlotterScanner`Private`x2$388306$$ = 0, 
                 CalculateScan`PlotterScanner`Private`symmxQ$388307$$ = False,
                  CalculateScan`PlotterScanner`Private`fy1$388308$$ = 0, 
                 CalculateScan`PlotterScanner`Private`fy2$388309$$ = 0, 
                 CalculateScan`PlotterScanner`Private`symmyQ$388310$$ = False,
                  CalculateScan`PlotterScanner`Private`sqPRQ$388311$$ = False,
                  CalculateScan`PlotterScanner`Private`ar$388312$$ = 0, 
                 CalculateScan`PlotterScanner`Private`tangentCount$388313$$ = 
                 0, CalculateScan`PlotterScanner`Private`tangentLength$388314$\
$ = 0, CalculateScan`PlotterScanner`Private`tangentThickness$388315$$ = 0, 
                 CalculateScan`PlotterScanner`Private`tangentOpacity$388316$$ = 
                 0, CalculateScan`PlotterScanner`Private`normalCount$388317$$ = 
                 0}, 
                DynamicBox[
                 Manipulate`ManipulateBoxes[
                 2, TraditionalForm, 
                  "Variables" :> {
                   CalculateScan`PlotterScanner`Private`ar$$ = 1, 
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurveColor$$ = RGBColor[0.7464574, 0.2952580000000001, 0.2454606], 
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurveCountFactor$$ = 0.3, 
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurveLastParamaters$$ = {}, 
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurveOpacity$$ = 0.8, 
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurvePlotCurves$$ = {}, 
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurvePoints$$ = "curve", 
                    CalculateScan`PlotterScanner`Private`contraPedalCurveTF$$ = 
                    False, CalculateScan`PlotterScanner`Private`\
contraPedalCurveThickness$$ = -3., 
                    CalculateScan`PlotterScanner`Private`dualCurveColor$$ = 
                    RGBColor[0.2860602, 0.4663408, 0.29410879999999995`], 
                    CalculateScan`PlotterScanner`Private`dualCurveCountFactor$\
$ = 0.3, CalculateScan`PlotterScanner`Private`dualCurveLastParamaters$$ = {}, 
                    CalculateScan`PlotterScanner`Private`dualCurveOpacity$$ = 
                    0.8, CalculateScan`PlotterScanner`Private`\
dualCurvePlotCurves$$ = {}, 
                    CalculateScan`PlotterScanner`Private`dualCurveTF$$ = 
                    False, CalculateScan`PlotterScanner`Private`\
dualCurveThickness$$ = -3., 
                    CalculateScan`PlotterScanner`Private`dualPedalCurvePoints$\
$ = "curve", CalculateScan`PlotterScanner`Private`evoluteColor$$ = 
                    RGBColor[0.813033, 0.766292, 0.303458], 
                    CalculateScan`PlotterScanner`Private`evoluteOpacity$$ = 
                    0.8, CalculateScan`PlotterScanner`Private`evoluteTF$$ = 
                    False, CalculateScan`PlotterScanner`Private`\
evoluteThickness$$ = -3., CalculateScan`PlotterScanner`Private`fy1$$ = 
                    0.982793723247329, 
                    CalculateScan`PlotterScanner`Private`fy2$$ = 
                    0.982793723247329, 
                    CalculateScan`PlotterScanner`Private`\
inverseCurveCircleRadiusFactor$$ = 0.4636476090008061, 
                    CalculateScan`PlotterScanner`Private`inverseCurveColor$$ = 
                    RGBColor[0.2860602, 0.4663408, 0.29410879999999995`], 
                    CalculateScan`PlotterScanner`Private`\
inverseCurveCountFactor$$ = 0.3, 
                    CalculateScan`PlotterScanner`Private`inverseCurveOpacity$$\
 = 0.8, CalculateScan`PlotterScanner`Private`inverseCurvePlotCurves$$ = {}, 
                    CalculateScan`PlotterScanner`Private`inverseCurvePoints$$ = 
                    "grid", 
                    CalculateScan`PlotterScanner`Private`inverseCurveTF$$ = 
                    False, CalculateScan`PlotterScanner`Private`\
inverseCurveThickness$$ = -3., 
                    CalculateScan`PlotterScanner`Private`\
inverseLastParamaters$$ = {}, 
                    CalculateScan`PlotterScanner`Private`involuteColor$$ = 
                    RGBColor[0.49978279999999997`, 0.6025278, 0.2508104], 
                    CalculateScan`PlotterScanner`Private`involuteCount$$ = 60,
                     CalculateScan`PlotterScanner`Private`involuteOpacity$$ = 
                    0.8, CalculateScan`PlotterScanner`Private`involutesLeftTF$\
$ = False, CalculateScan`PlotterScanner`Private`involutesRightTF$$ = True, 
                    CalculateScan`PlotterScanner`Private`involuteTF$$ = False,
                     CalculateScan`PlotterScanner`Private`involuteThickness$$ = \
-3., CalculateScan`PlotterScanner`Private`isopticCurveAngle$$ = 
                    Rational[1, 3] Pi, 
                    CalculateScan`PlotterScanner`Private`isopticCurveColor$$ = 
                    RGBColor[
                    0.8519382, 0.7451437999999999, 0.31752080000000005`], 
                    CalculateScan`PlotterScanner`Private`isopticCurveOpacity$$\
 = 0.8, CalculateScan`PlotterScanner`Private`isopticCurvePlotCurves$$ = {}, 
                    CalculateScan`PlotterScanner`Private`isopticCurveTF$$ = 
                    False, CalculateScan`PlotterScanner`Private`\
isopticCurveThickness$$ = -3., 
                    CalculateScan`PlotterScanner`Private`\
isopticLastParamaters$$ = {}, 
                    CalculateUtilities`GraphicsUtilities`Private`more$$ = 
                    False, CalculateScan`PlotterScanner`Private`\
negativePedalCurveColor$$ = 
                    RGBColor[0.7464574, 0.2952580000000001, 0.2454606], 
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurveCountFactor$$ = 0.3, 
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurveLastParamaters$$ = {}, 
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurveOpacity$$ = 0.8, 
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurvePlotCurves$$ = {}, 
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurvePoints$$ = "curve", 
                    CalculateScan`PlotterScanner`Private`negativePedalCurveTF$\
$ = False, 
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurveThickness$$ = -3., 
                    CalculateScan`PlotterScanner`Private`normalColor$$ = 
                    RGBColor[0.237, 0.34, 0.575], 
                    CalculateScan`PlotterScanner`Private`normalCount$$ = 120, 
                    CalculateScan`PlotterScanner`Private`normalLength$$ = 
                    0.24934835901117428`, 
                    CalculateScan`PlotterScanner`Private`normalOpacity$$ = 
                    0.8, CalculateScan`PlotterScanner`Private`normalTF$$ = 
                    True, CalculateScan`PlotterScanner`Private`\
normalThickness$$ = -3., 
                    CalculateScan`PlotterScanner`Private`offsetCurveColor$$ = 
                    RGBColor[0.877875, 0.731045, 0.326896], 
                    CalculateScan`PlotterScanner`Private`offsetCurveCount$$ = 
                    12, CalculateScan`PlotterScanner`Private`\
offsetCurveDistance$$ = 0.24934835901117428`, 
                    CalculateScan`PlotterScanner`Private`\
offsetCurveLastParamaters$$ = {}, 
                    CalculateScan`PlotterScanner`Private`offsetCurveOpacity$$ = 
                    0.8, CalculateScan`PlotterScanner`Private`\
offsetCurvePlotCurves$$ = {}, 
                    CalculateScan`PlotterScanner`Private`offsetCurveTF$$ = 
                    False, CalculateScan`PlotterScanner`Private`\
offsetCurveThickness$$ = -3., 
                    CalculateScan`PlotterScanner`Private`orthotomicCurveAngle$\
$ = Rational[1, 3] Pi, 
                    CalculateScan`PlotterScanner`Private`orthotomicCurveColor$\
$ = RGBColor[0.8519382, 0.7451437999999999, 0.31752080000000005`], 
                    CalculateScan`PlotterScanner`Private`\
orthotomicCurveCountFactor$$ = 0.3, 
                    CalculateScan`PlotterScanner`Private`\
orthotomicCurveOpacity$$ = 0.8, 
                    CalculateScan`PlotterScanner`Private`\
orthotomicCurvePlotCurves$$ = {}, 
                    CalculateScan`PlotterScanner`Private`\
orthotomicCurvePoints$$ = "curve", 
                    CalculateScan`PlotterScanner`Private`orthotomicCurveTF$$ = 
                    False, CalculateScan`PlotterScanner`Private`\
orthotomicCurveThickness$$ = -3., 
                    CalculateScan`PlotterScanner`Private`\
orthotomicLastParamaters$$ = {}, 
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleColor$$ = 
                    RGBColor[0.2752426, 0.4446824, 0.33950440000000004`], 
                    
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleCount$$ = 60, 
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleLastParamaters$$ = {}, 
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleOpacity$$ = 0.8, 
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleRadiiTF$$ = False, 
                    CalculateScan`PlotterScanner`Private`osculatingCircles$$ = \
{}, CalculateScan`PlotterScanner`Private`osculatingCircleTF$$ = False, 
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleThickness$$ = -3., 
                    CalculateScan`PlotterScanner`Private`pedalCurveColor$$ = 
                    RGBColor[0.32894650000000003`, 0.5006225, 0.2625337], 
                    CalculateScan`PlotterScanner`Private`\
pedalCurveCountFactor$$ = 0.3, 
                    CalculateScan`PlotterScanner`Private`\
pedalCurveLastParamaters$$ = {}, 
                    CalculateScan`PlotterScanner`Private`pedalCurveOpacity$$ = 
                    0.8, CalculateScan`PlotterScanner`Private`\
pedalCurvePlotCurves$$ = {}, 
                    CalculateScan`PlotterScanner`Private`pedalCurvePoints$$ = 
                    "curve", 
                    CalculateScan`PlotterScanner`Private`pedalCurveTF$$ = 
                    False, CalculateScan`PlotterScanner`Private`\
pedalCurveThickness$$ = -3., CalculateScan`PlotterScanner`Private`sa$$ = 
                    False, CalculateScan`PlotterScanner`Private`sqPRQ$$ = 
                    False, CalculateScan`PlotterScanner`Private`st$$ = False, 
                    CalculateScan`PlotterScanner`Private`symmxQ$$ = False, 
                    CalculateScan`PlotterScanner`Private`symmyQ$$ = True, 
                    CalculateScan`PlotterScanner`Private`tangentColor$$ = 
                    RGBColor[0.237736, 0.340215, 0.575113], 
                    CalculateScan`PlotterScanner`Private`tangentCount$$ = 60, 
                    CalculateScan`PlotterScanner`Private`tangentLength$$ = 
                    0.24934835901117428`, 
                    CalculateScan`PlotterScanner`Private`tangentOpacity$$ = 
                    0.8, CalculateScan`PlotterScanner`Private`tangentTF$$ = 
                    False, CalculateScan`PlotterScanner`Private`\
tangentThickness$$ = -3., 
                    CalculateScan`PlotterScanner`Private`taylorParabolaColor$$\
 = RGBColor[0.7189495000000001, 0.719797, 0.283877], 
                    CalculateScan`PlotterScanner`Private`taylorParabolaCount$$\
 = 36, CalculateScan`PlotterScanner`Private`taylorParabolaLastParamaters$$ = \
{}, CalculateScan`PlotterScanner`Private`taylorParabolaOpacity$$ = 0.8, 
                    CalculateScan`PlotterScanner`Private`taylorParabolas$$ = \
{}, CalculateScan`PlotterScanner`Private`taylorParabolaTF$$ = False, 
                    CalculateScan`PlotterScanner`Private`\
taylorParabolaThickness$$ = -3., 
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveAngle$$ = Rational[1, 4] Pi, 
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveColor$$ = 
                    RGBColor[0.49978279999999997`, 0.6025278, 0.2508104], 
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveCount$$ = 12, 
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveDistance$$ = 0.24934835901117428`, 
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveLastParamaters$$ = {}, 
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveOpacity$$ = 0.8, 
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurvePlotCurves$$ = {}, 
                    CalculateScan`PlotterScanner`Private`tiltedOffsetCurveTF$$\
 = False, 
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveThickness$$ = -3., 
                    CalculateScan`PlotterScanner`Private`tiltedTangentAngle$$ = 
                    Rational[1, 4] Pi, 
                    CalculateScan`PlotterScanner`Private`tiltedTangentColor$$ = 
                    RGBColor[
                    0.2622702, 0.40739780000000003`, 0.41955020000000004`], 
                    CalculateScan`PlotterScanner`Private`tiltedTangentCount$$ = 
                    60, CalculateScan`PlotterScanner`Private`\
tiltedTangentLength$$ = 0.24934835901117428`, 
                    CalculateScan`PlotterScanner`Private`tiltedTangentOpacity$\
$ = 0.8, CalculateScan`PlotterScanner`Private`tiltedTangentTF$$ = False, 
                    CalculateScan`PlotterScanner`Private`\
tiltedTangentThickness$$ = -3., 
                    CalculateScan`PlotterScanner`Private`x1$$ = \
-0.7853981633974483, CalculateScan`PlotterScanner`Private`x2$$ = 
                    0.7853981633974483}, "ControllerVariables" :> {
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`more$$, 
                    CalculateUtilities`GraphicsUtilities`Private`more$388300$$\
, False], 
                    Hold[
                    CalculateScan`PlotterScanner`Private`x1$$, 
                    CalculateScan`PlotterScanner`Private`x1$388305$$, 0], 
                    Hold[
                    CalculateScan`PlotterScanner`Private`x2$$, 
                    CalculateScan`PlotterScanner`Private`x2$388306$$, 0], 
                    Hold[
                    CalculateScan`PlotterScanner`Private`symmxQ$$, 
                    CalculateScan`PlotterScanner`Private`symmxQ$388307$$, 
                    False], 
                    Hold[
                    CalculateScan`PlotterScanner`Private`fy1$$, 
                    CalculateScan`PlotterScanner`Private`fy1$388308$$, 0], 
                    Hold[
                    CalculateScan`PlotterScanner`Private`fy2$$, 
                    CalculateScan`PlotterScanner`Private`fy2$388309$$, 0], 
                    Hold[
                    CalculateScan`PlotterScanner`Private`symmyQ$$, 
                    CalculateScan`PlotterScanner`Private`symmyQ$388310$$, 
                    False], 
                    Hold[
                    CalculateScan`PlotterScanner`Private`sqPRQ$$, 
                    CalculateScan`PlotterScanner`Private`sqPRQ$388311$$, 
                    False], 
                    Hold[
                    CalculateScan`PlotterScanner`Private`ar$$, 
                    CalculateScan`PlotterScanner`Private`ar$388312$$, 0], 
                    Hold[
                    CalculateScan`PlotterScanner`Private`tangentCount$$, 
                    CalculateScan`PlotterScanner`Private`tangentCount$388313$$\
, 0], 
                    Hold[
                    CalculateScan`PlotterScanner`Private`tangentLength$$, 
                    CalculateScan`PlotterScanner`Private`tangentLength$388314$\
$, 0], 
                    Hold[
                    CalculateScan`PlotterScanner`Private`tangentThickness$$, 
                    CalculateScan`PlotterScanner`Private`tangentThickness$\
388315$$, 0], 
                    Hold[
                    CalculateScan`PlotterScanner`Private`tangentOpacity$$, 
                    CalculateScan`PlotterScanner`Private`tangentOpacity$\
388316$$, 0], 
                    Hold[
                    CalculateScan`PlotterScanner`Private`normalCount$$, 
                    CalculateScan`PlotterScanner`Private`normalCount$388317$$,
                     0]}, "OtherVariables" :> {
                   Typeset`show$$, Typeset`bookmarkList$$, 
                    Typeset`bookmarkMode$$, Typeset`animator$$, 
                    Typeset`animvar$$, Typeset`name$$, Typeset`specs$$, 
                    Typeset`size$$, Typeset`update$$, Typeset`initDone$$, 
                    Typeset`skipInitDone$$}, "Body" :> Quiet[
                    
                    Module[{
                    CalculateScan`PlotterScanner`Private`x1Old$, 
                    CalculateScan`PlotterScanner`Private`x2Old$, 
                    CalculateScan`PlotterScanner`Private`fy1Old$, 
                    CalculateScan`PlotterScanner`Private`fy2Old$, 
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$, 
                    CalculateScan`PlotterScanner`Private`singularities$, 
                    CalculateScan`PlotterScanner`Private`ts$, 
                    CalculateScan`PlotterScanner`Private`xL$, 
                    CalculateScan`PlotterScanner`Private`xU$, 
                    CalculateScan`PlotterScanner`Private`yL$, 
                    CalculateScan`PlotterScanner`Private`yU$, 
                    CalculateScan`PlotterScanner`Private`pRX$, 
                    CalculateScan`PlotterScanner`Private`\[CapitalDelta]X$, 
                    CalculateScan`PlotterScanner`Private`\[CapitalDelta]y$, 
                    CalculateScan`PlotterScanner`Private`Y1$, 
                    CalculateScan`PlotterScanner`Private`Y2$, 
                    CalculateScan`PlotterScanner`Private`pRY$, 
                    CalculateScan`PlotterScanner`Private`originalCurvePlot0$, 
                    CalculateScan`PlotterScanner`Private`originalCurvePlot$, 
                    CalculateScan`PlotterScanner`Private`tangentsLines$, 
                    CalculateScan`PlotterScanner`Private`tangentLinePlot$, 
                    CalculateScan`PlotterScanner`Private`normalLines$, 
                    CalculateScan`PlotterScanner`Private`normalLinePlot$, 
                    CalculateScan`PlotterScanner`Private`tiltedTangentLines$, 
                    CalculateScan`PlotterScanner`Private`\
tiltedTangentLinePlot$, 
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleRadii$, 
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleLastParamaters$, 
                    CalculateScan`PlotterScanner`Private`osculatingCirclePlot$\
, CalculateScan`PlotterScanner`Private`taylorParabolaPlot$, 
                    CalculateScan`PlotterScanner`Private`evolutePlot$, 
                    CalculateScan`PlotterScanner`Private`involutePlotCurves$, 
                    CalculateScan`PlotterScanner`Private`\
involutePlotCurveLastParamaters$, 
                    CalculateScan`PlotterScanner`Private`involutePlot$, 
                    CalculateScan`PlotterScanner`Private`iTab$, 
                    CalculateScan`PlotterScanner`Private`xLi$, 
                    CalculateScan`PlotterScanner`Private`xUi$, 
                    CalculateScan`PlotterScanner`Private`arcLength$, 
                    CalculateScan`PlotterScanner`Private`arcL$, 
                    CalculateScan`PlotterScanner`Private`xi1$, 
                    CalculateScan`PlotterScanner`Private`xi2$, 
                    CalculateScan`PlotterScanner`Private`lineSegments$, 
                    CalculateScan`PlotterScanner`Private`baseSegments$, 
                    CalculateScan`PlotterScanner`Private`oSegments$, 
                    CalculateScan`PlotterScanner`Private`arcFactors$, 
                    CalculateScan`PlotterScanner`Private`iTabRight$, 
                    CalculateScan`PlotterScanner`Private`iTabLeft$, 
                    CalculateScan`PlotterScanner`Private`signedArcFactors$, 
                    CalculateScan`PlotterScanner`Private`curvePoints$}, If[
                    And[
                    CalculateScan`PlotterScanner`Private`sa$$ === False, 
                    CalculateScan`PlotterScanner`Private`st$$ == True], 
                    CalculateScan`PlotterScanner`Private`st$$ = False]; 
                    If[CalculateScan`PlotterScanner`Private`symmxQ$$, 
                    If[
                    And[
                    CalculateScan`PlotterScanner`Private`x1$$ == 
                    CalculateScan`PlotterScanner`Private`x1Old$, 
                    CalculateScan`PlotterScanner`Private`x2$$ != 
                    CalculateScan`PlotterScanner`Private`x2Old$], 
                    CalculateScan`PlotterScanner`Private`x1$$ = -
                    CalculateScan`PlotterScanner`Private`x2$$, 
                    CalculateScan`PlotterScanner`Private`x2$$ = -
                    CalculateScan`PlotterScanner`Private`x1$$]]; 
                    CalculateScan`PlotterScanner`Private`x1Old$ = 
                    CalculateScan`PlotterScanner`Private`x1$$; 
                    CalculateScan`PlotterScanner`Private`x2Old$ = 
                    CalculateScan`PlotterScanner`Private`x2$$; 
                    If[CalculateScan`PlotterScanner`Private`symmyQ$$, 
                    If[
                    And[
                    CalculateScan`PlotterScanner`Private`fy1$$ == 
                    CalculateScan`PlotterScanner`Private`fy1Old$, 
                    CalculateScan`PlotterScanner`Private`fy2$$ != 
                    CalculateScan`PlotterScanner`Private`fy2Old$], 
                    CalculateScan`PlotterScanner`Private`fy1$$ = 
                    CalculateScan`PlotterScanner`Private`fy2$$, 
                    CalculateScan`PlotterScanner`Private`fy2$$ = 
                    CalculateScan`PlotterScanner`Private`fy1$$]]; 
                    CalculateScan`PlotterScanner`Private`fy1Old$ = 
                    CalculateScan`PlotterScanner`Private`fy1$$; 
                    CalculateScan`PlotterScanner`Private`fy2Old$ = 
                    CalculateScan`PlotterScanner`Private`fy2$$; 
                    If[CalculateScan`PlotterScanner`Private`x1$$ == 
                    CalculateScan`PlotterScanner`Private`x2$$, 
                    CalculateScan`PlotterScanner`Private`x2$$ = 
                    CalculateScan`PlotterScanner`Private`x1$$ + 
                    7.853981633974483/100]; {
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$} = Sort[
                    N[{
                    
                    Function[{
                    CalculateScan`PlotterScanner`Private`y, 
                    CalculateScan`PlotterScanner`Private`L}, (
                    Sign[CalculateScan`PlotterScanner`Private`y] 
                    CalculateScan`PlotterScanner`Private`L) Tan[
                    Abs[CalculateScan`PlotterScanner`Private`y]]^1][
                    CalculateScan`PlotterScanner`Private`x1$$, 
                    3.9269908169872414`], 
                    
                    Function[{
                    CalculateScan`PlotterScanner`Private`y, 
                    CalculateScan`PlotterScanner`Private`L}, (
                    Sign[CalculateScan`PlotterScanner`Private`y] 
                    CalculateScan`PlotterScanner`Private`L) Tan[
                    Abs[CalculateScan`PlotterScanner`Private`y]]^1][
                    CalculateScan`PlotterScanner`Private`x2$$, 
                    3.9269908169872414`]}]]; 
                    CalculateScan`PlotterScanner`Private`singularities$ = (
                    CalculateScan`PlotterScanner`Private`ts$ = 
                    TimeConstrained[
                    CalculateScan`PlotterScanner`Private`red = Reduce[
                    And[
                    1/((-Cos[4 Global`x] - (4 (-7 + Global`x)) 
                    Sin[4 Global`x])/16) == 0, 
                    CalculateScan`PlotterScanner`Private`X1$ < Global`x < 
                    CalculateScan`PlotterScanner`Private`X2$], Global`x, 
                    Reals], 0.2, False]; 
                    If[CalculateScan`PlotterScanner`Private`ts$ === False, {}, 
                    Cases[
                    ReplaceAll[Global`x, {
                    ToRules[CalculateScan`PlotterScanner`Private`ts$]}], 
                    Blank[Real]]]); 
                    CalculateScan`PlotterScanner`Private`originalCurvePlot0$ = 
                    Plot[
                    CompiledFunction[{8, 8., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    6}}, {{0.0625, {3, 0, 2}}, {-4, {2, 0, 1}}, {
                    4, {2, 0, 0}}, {-7, {2, 0, 2}}}, {0, 3, 7, 0, 
                    0}, {{10, 0, 1}, {16, 1, 0, 1}, {40, 2, 3, 0, 1, 3, 0, 
                    3}, {19, 3, 4}, {10, 2, 3}, {13, 3, 0, 3}, {40, 1, 3, 0, 
                    1, 3, 0, 5}, {10, 1, 6}, {16, 6, 3, 5, 6}, {13, 4, 6, 
                    4}, {16, 2, 4, 6}, {1}}, 
                    Function[{Global`x}, 
                    
                    Block[{Compile`$167}, 
                    Compile`$167 = 
                    4 Global`x; (-Cos[Compile`$167] - (4 (-7 + Global`x)) 
                    Sin[Compile`$167])/16]], Evaluate][Global`x], {
                    Global`x, CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$}, PlotStyle -> 
                    Directive[Black, Thick], Evaluated -> False, Exclusions -> 
                    CalculateScan`PlotterScanner`Private`singularities$]; {{
                    CalculateScan`PlotterScanner`Private`xL$, 
                    CalculateScan`PlotterScanner`Private`xU$}, {
                    CalculateScan`PlotterScanner`Private`yL$, 
                    CalculateScan`PlotterScanner`Private`yU$}} = 
                    FullOptions[
                    CalculateScan`PlotterScanner`Private`originalCurvePlot0$, 
                    PlotRange]; CalculateScan`PlotterScanner`Private`pRX$ = {
                    Min[
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$], 
                    Max[
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$]}; 
                    CalculateScan`PlotterScanner`Private`\[CapitalDelta]X$ = 
                    Abs[CalculateScan`PlotterScanner`Private`X2$ - 
                    CalculateScan`PlotterScanner`Private`X1$]; 
                    CalculateScan`PlotterScanner`Private`\[CapitalDelta]y$ = 
                    CalculateScan`PlotterScanner`Private`yU$ - 
                    CalculateScan`PlotterScanner`Private`yL$; If[
                    And[
                    CalculateScan`PlotterScanner`Private`sqPRQ$$, 
                    CalculateScan`PlotterScanner`Private`symmyQ$$, 
                    Sign[CalculateScan`PlotterScanner`Private`X1$] === -
                    Sign[CalculateScan`PlotterScanner`Private`X2$], 
                    Abs[1 - CalculateScan`PlotterScanner`Private`fy1$$/
                    CalculateScan`PlotterScanner`Private`fy2$$] < 10^(-3)], 
                    CalculateScan`PlotterScanner`Private`fy1$$ = 
                    ArcTan[((-100) CalculateScan`PlotterScanner`Private`xL$ - 
                    100 CalculateScan`PlotterScanner`Private`yL$ + 
                    CalculateScan`PlotterScanner`Private`\[CapitalDelta]y$)/(
                    100 CalculateScan`PlotterScanner`Private`\[CapitalDelta]y$\
)]; CalculateScan`PlotterScanner`Private`fy2$$ = 
                    CalculateScan`PlotterScanner`Private`fy1$$; Null]; {
                    CalculateScan`PlotterScanner`Private`Y1$, 
                    CalculateScan`PlotterScanner`Private`Y2$} = {
                    CalculateScan`PlotterScanner`Private`yL$ - 
                    CalculateScan`PlotterScanner`Private`\[CapitalDelta]y$/
                    100 - Function[{
                    CalculateScan`PlotterScanner`Private`y, 
                    CalculateScan`PlotterScanner`Private`L}, (
                    Sign[CalculateScan`PlotterScanner`Private`y] 
                    CalculateScan`PlotterScanner`Private`L) Tan[
                    Abs[CalculateScan`PlotterScanner`Private`y]]^1][
                    CalculateScan`PlotterScanner`Private`fy1$$, 1] 
                    CalculateScan`PlotterScanner`Private`\[CapitalDelta]y$, 
                    CalculateScan`PlotterScanner`Private`yU$ + 
                    CalculateScan`PlotterScanner`Private`\[CapitalDelta]y$/
                    100 + Function[{
                    CalculateScan`PlotterScanner`Private`y, 
                    CalculateScan`PlotterScanner`Private`L}, (
                    Sign[CalculateScan`PlotterScanner`Private`y] 
                    CalculateScan`PlotterScanner`Private`L) Tan[
                    Abs[CalculateScan`PlotterScanner`Private`y]]^1][
                    CalculateScan`PlotterScanner`Private`fy2$$, 1] 
                    CalculateScan`PlotterScanner`Private`\[CapitalDelta]y$}; 
                    CalculateScan`PlotterScanner`Private`pRY$ = {
                    CalculateScan`PlotterScanner`Private`Y1$, 
                    CalculateScan`PlotterScanner`Private`Y2$}; 
                    CalculateScan`PlotterScanner`Private`originalCurvePlot$ = 
                    Plot[
                    CompiledFunction[{8, 8., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    6}}, {{0.0625, {3, 0, 2}}, {-4, {2, 0, 1}}, {
                    4, {2, 0, 0}}, {-7, {2, 0, 2}}}, {0, 3, 7, 0, 
                    0}, {{10, 0, 1}, {16, 1, 0, 1}, {40, 2, 3, 0, 1, 3, 0, 
                    3}, {19, 3, 4}, {10, 2, 3}, {13, 3, 0, 3}, {40, 1, 3, 0, 
                    1, 3, 0, 5}, {10, 1, 6}, {16, 6, 3, 5, 6}, {13, 4, 6, 
                    4}, {16, 2, 4, 6}, {1}}, 
                    Function[{Global`x}, 
                    
                    Block[{Compile`$167}, 
                    Compile`$167 = 
                    4 Global`x; (-Cos[Compile`$167] - (4 (-7 + Global`x)) 
                    Sin[Compile`$167])/16]], Evaluate][Global`x], {
                    Global`x, CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$}, PlotStyle -> 
                    Directive[Black, Thick], PlotRange -> 
                    CalculateScan`PlotterScanner`Private`pRY$, Evaluated -> 
                    False, Exclusions -> 
                    CalculateScan`PlotterScanner`Private`singularities$]; 
                    CalculateScan`PlotterScanner`Private`tangentsLines$ = 
                    If[CalculateScan`PlotterScanner`Private`tangentTF$$, 
                    CalculateScan`PlotterScanner`Private`addTangents[{
                    CompiledFunction[{8, 8., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    6}}, {{0.0625, {3, 0, 2}}, {-4, {2, 0, 1}}, {
                    4, {2, 0, 0}}, {-7, {2, 0, 2}}}, {0, 3, 7, 0, 
                    0}, {{10, 0, 1}, {16, 1, 0, 1}, {40, 2, 3, 0, 1, 3, 0, 
                    3}, {19, 3, 4}, {10, 2, 3}, {13, 3, 0, 3}, {40, 1, 3, 0, 
                    1, 3, 0, 5}, {10, 1, 6}, {16, 6, 3, 5, 6}, {13, 4, 6, 
                    4}, {16, 2, 4, 6}, {1}}, 
                    Function[{Global`x}, 
                    
                    Block[{Compile`$167}, 
                    Compile`$167 = 
                    4 Global`x; (-Cos[Compile`$167] - (4 (-7 + Global`x)) 
                    Sin[Compile`$167])/16]], Evaluate], 
                    CompiledFunction[{8, 8., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    3}}, {{4, {2, 0, 1}}, {-7, {2, 0, 0}}}, {0, 2, 4, 0, 
                    0}, {{10, 0, 1}, {13, 1, 0, 1}, {10, 1, 2}, {16, 2, 0, 
                    2}, {40, 2, 3, 0, 2, 3, 0, 3}, {16, 1, 3, 1}, {19, 1, 
                    3}, {1}}, 
                    Function[{Global`x}, -((-7 + Global`x) Cos[4 Global`x])], 
                    Evaluate]}, {
                    Global`x, CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$}, 
                    CalculateScan`PlotterScanner`Private`tangentCount$$, 
                    "LengthFactor" -> 
                    Function[{
                    CalculateScan`PlotterScanner`Private`y, 
                    CalculateScan`PlotterScanner`Private`L}, (
                    Sign[CalculateScan`PlotterScanner`Private`y] 
                    CalculateScan`PlotterScanner`Private`L) Tan[
                    Abs[CalculateScan`PlotterScanner`Private`y]]^1][
                    CalculateScan`PlotterScanner`Private`tangentLength$$, 
                    3.9269908169872414`]], {}]; 
                    CalculateScan`PlotterScanner`Private`tangentLinePlot$ = 
                    Graphics[{
                    Directive[
                    CalculateScan`PlotterScanner`Private`tangentColor$$, 
                    Opacity[
                    CalculateScan`PlotterScanner`Private`tangentOpacity$$], 
                    Thickness[
                    10^CalculateScan`PlotterScanner`Private`tangentThickness$$\
]], CalculateScan`PlotterScanner`Private`tangentsLines$}]; 
                    CalculateScan`PlotterScanner`Private`normalLines$ = 
                    If[CalculateScan`PlotterScanner`Private`normalTF$$, 
                    CalculateScan`PlotterScanner`Private`addTangents[{
                    CompiledFunction[{8, 8., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    6}}, {{0.0625, {3, 0, 2}}, {-4, {2, 0, 1}}, {
                    4, {2, 0, 0}}, {-7, {2, 0, 2}}}, {0, 3, 7, 0, 
                    0}, {{10, 0, 1}, {16, 1, 0, 1}, {40, 2, 3, 0, 1, 3, 0, 
                    3}, {19, 3, 4}, {10, 2, 3}, {13, 3, 0, 3}, {40, 1, 3, 0, 
                    1, 3, 0, 5}, {10, 1, 6}, {16, 6, 3, 5, 6}, {13, 4, 6, 
                    4}, {16, 2, 4, 6}, {1}}, 
                    Function[{Global`x}, 
                    
                    Block[{Compile`$167}, 
                    Compile`$167 = 
                    4 Global`x; (-Cos[Compile`$167] - (4 (-7 + Global`x)) 
                    Sin[Compile`$167])/16]], Evaluate], 
                    CompiledFunction[{8, 8., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    3}}, {{4, {2, 0, 1}}, {-7, {2, 0, 0}}}, {0, 2, 4, 0, 
                    0}, {{10, 0, 1}, {13, 1, 0, 1}, {10, 1, 2}, {16, 2, 0, 
                    2}, {40, 2, 3, 0, 2, 3, 0, 3}, {16, 1, 3, 1}, {19, 1, 
                    3}, {1}}, 
                    Function[{Global`x}, -((-7 + Global`x) Cos[4 Global`x])], 
                    Evaluate]}, {Global`x, 
                    Min[
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$], 
                    Max[
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$]}, 
                    CalculateScan`PlotterScanner`Private`normalCount$$, 
                    "LengthFactor" -> 
                    Function[{
                    CalculateScan`PlotterScanner`Private`y, 
                    CalculateScan`PlotterScanner`Private`L}, (
                    Sign[CalculateScan`PlotterScanner`Private`y] 
                    CalculateScan`PlotterScanner`Private`L) Tan[
                    Abs[CalculateScan`PlotterScanner`Private`y]]^1][
                    CalculateScan`PlotterScanner`Private`normalLength$$, 
                    3.9269908169872414`], "TiltAngle" -> Pi/2], {}]; 
                    CalculateScan`PlotterScanner`Private`normalLinePlot$ = 
                    Graphics[{
                    Directive[
                    CalculateScan`PlotterScanner`Private`normalColor$$, 
                    Opacity[
                    CalculateScan`PlotterScanner`Private`normalOpacity$$], 
                    Thickness[
                    10^CalculateScan`PlotterScanner`Private`normalThickness$$]\
], CalculateScan`PlotterScanner`Private`normalLines$}]; 
                    CalculateScan`PlotterScanner`Private`tiltedTangentLines$ = 
                    If[CalculateScan`PlotterScanner`Private`tiltedTangentTF$$, 
                    CalculateScan`PlotterScanner`Private`addTangents[{
                    CompiledFunction[{8, 8., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    6}}, {{0.0625, {3, 0, 2}}, {-4, {2, 0, 1}}, {
                    4, {2, 0, 0}}, {-7, {2, 0, 2}}}, {0, 3, 7, 0, 
                    0}, {{10, 0, 1}, {16, 1, 0, 1}, {40, 2, 3, 0, 1, 3, 0, 
                    3}, {19, 3, 4}, {10, 2, 3}, {13, 3, 0, 3}, {40, 1, 3, 0, 
                    1, 3, 0, 5}, {10, 1, 6}, {16, 6, 3, 5, 6}, {13, 4, 6, 
                    4}, {16, 2, 4, 6}, {1}}, 
                    Function[{Global`x}, 
                    
                    Block[{Compile`$167}, 
                    Compile`$167 = 
                    4 Global`x; (-Cos[Compile`$167] - (4 (-7 + Global`x)) 
                    Sin[Compile`$167])/16]], Evaluate], 
                    CompiledFunction[{8, 8., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    3}}, {{4, {2, 0, 1}}, {-7, {2, 0, 0}}}, {0, 2, 4, 0, 
                    0}, {{10, 0, 1}, {13, 1, 0, 1}, {10, 1, 2}, {16, 2, 0, 
                    2}, {40, 2, 3, 0, 2, 3, 0, 3}, {16, 1, 3, 1}, {19, 1, 
                    3}, {1}}, 
                    Function[{Global`x}, -((-7 + Global`x) Cos[4 Global`x])], 
                    Evaluate]}, {Global`x, 
                    Min[
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$], 
                    Max[
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$]}, 
                    CalculateScan`PlotterScanner`Private`tiltedTangentCount$$,
                     "LengthFactor" -> 
                    Function[{
                    CalculateScan`PlotterScanner`Private`y, 
                    CalculateScan`PlotterScanner`Private`L}, (
                    Sign[CalculateScan`PlotterScanner`Private`y] 
                    CalculateScan`PlotterScanner`Private`L) Tan[
                    Abs[CalculateScan`PlotterScanner`Private`y]]^1][
                    CalculateScan`PlotterScanner`Private`tiltedTangentLength$$\
, 3.9269908169872414`], "TiltAngle" -> 
                    CalculateScan`PlotterScanner`Private`tiltedTangentAngle$$]\
, {}]; CalculateScan`PlotterScanner`Private`tiltedTangentLinePlot$ = Graphics[{
                    Directive[
                    CalculateScan`PlotterScanner`Private`tiltedTangentColor$$, 
                    Opacity[
                    CalculateScan`PlotterScanner`Private`tiltedTangentOpacity$\
$], 
                    Thickness[
                    10^CalculateScan`PlotterScanner`Private`\
tiltedTangentThickness$$]], 
                    CalculateScan`PlotterScanner`Private`tiltedTangentLines$}]\
; If[
                    And[
                    CalculateScan`PlotterScanner`Private`osculatingCircleTF$$,
                     CalculateScan`PlotterScanner`Private`\
osculatingCircleLastParamaters$ =!= {{
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$}, 
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleCount$$}], 
                    CalculateScan`PlotterScanner`Private`osculatingCircles$$ = 
                    If[CalculateScan`PlotterScanner`Private`\
osculatingCircleTF$$, 
                    CalculateScan`PlotterScanner`Private`addOsculatingCircles[{
                    CompiledFunction[{8, 8., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    6}}, {{0.0625, {3, 0, 2}}, {-4, {2, 0, 1}}, {
                    4, {2, 0, 0}}, {-7, {2, 0, 2}}}, {0, 3, 7, 0, 
                    0}, {{10, 0, 1}, {16, 1, 0, 1}, {40, 2, 3, 0, 1, 3, 0, 
                    3}, {19, 3, 4}, {10, 2, 3}, {13, 3, 0, 3}, {40, 1, 3, 0, 
                    1, 3, 0, 5}, {10, 1, 6}, {16, 6, 3, 5, 6}, {13, 4, 6, 
                    4}, {16, 2, 4, 6}, {1}}, 
                    Function[{Global`x}, 
                    
                    Block[{Compile`$167}, 
                    Compile`$167 = 
                    4 Global`x; (-Cos[Compile`$167] - (4 (-7 + Global`x)) 
                    Sin[Compile`$167])/16]], Evaluate], 
                    CompiledFunction[{8, 8., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    3}}, {{4, {2, 0, 1}}, {-7, {2, 0, 0}}}, {0, 2, 4, 0, 
                    0}, {{10, 0, 1}, {13, 1, 0, 1}, {10, 1, 2}, {16, 2, 0, 
                    2}, {40, 2, 3, 0, 2, 3, 0, 3}, {16, 1, 3, 1}, {19, 1, 
                    3}, {1}}, 
                    Function[{Global`x}, -((-7 + Global`x) Cos[4 Global`x])], 
                    Evaluate], 
                    CompiledFunction[{8, 8., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    3}}, {{4, {2, 0, 0}}, {-7, {2, 0, 1}}}, {0, 2, 6, 0, 
                    0}, {{10, 0, 1}, {16, 1, 0, 1}, {40, 2, 3, 0, 1, 3, 0, 
                    2}, {19, 2, 3}, {10, 1, 2}, {13, 2, 0, 2}, {40, 1, 3, 0, 
                    1, 3, 0, 4}, {10, 0, 5}, {16, 5, 2, 4, 5}, {13, 3, 5, 
                    3}, {1}}, 
                    Function[{Global`x}, 
                    
                    Block[{Compile`$343}, 
                    Compile`$343 = 
                    4 Global`x; -Cos[Compile`$343] + (4 (-7 + Global`x)) 
                    Sin[Compile`$343]]], Evaluate]}, {Global`x, 
                    Min[
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$], 
                    Max[
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$]}, 
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleCount$$], {}]; 
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleRadii$ = If[
                    And[
                    CalculateScan`PlotterScanner`Private`osculatingCircleTF$$,
                     CalculateScan`PlotterScanner`Private`\
osculatingCircleRadiiTF$$], 
                    
                    CalculateScan`PlotterScanner`Private`\
addOsculatingCircleRadii[{
                    CompiledFunction[{8, 8., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    6}}, {{0.0625, {3, 0, 2}}, {-4, {2, 0, 1}}, {
                    4, {2, 0, 0}}, {-7, {2, 0, 2}}}, {0, 3, 7, 0, 
                    0}, {{10, 0, 1}, {16, 1, 0, 1}, {40, 2, 3, 0, 1, 3, 0, 
                    3}, {19, 3, 4}, {10, 2, 3}, {13, 3, 0, 3}, {40, 1, 3, 0, 
                    1, 3, 0, 5}, {10, 1, 6}, {16, 6, 3, 5, 6}, {13, 4, 6, 
                    4}, {16, 2, 4, 6}, {1}}, 
                    Function[{Global`x}, 
                    
                    Block[{Compile`$167}, 
                    Compile`$167 = 
                    4 Global`x; (-Cos[Compile`$167] - (4 (-7 + Global`x)) 
                    Sin[Compile`$167])/16]], Evaluate], 
                    CompiledFunction[{8, 8., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    3}}, {{4, {2, 0, 1}}, {-7, {2, 0, 0}}}, {0, 2, 4, 0, 
                    0}, {{10, 0, 1}, {13, 1, 0, 1}, {10, 1, 2}, {16, 2, 0, 
                    2}, {40, 2, 3, 0, 2, 3, 0, 3}, {16, 1, 3, 1}, {19, 1, 
                    3}, {1}}, 
                    Function[{Global`x}, -((-7 + Global`x) Cos[4 Global`x])], 
                    Evaluate], 
                    CompiledFunction[{8, 8., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    3}}, {{4, {2, 0, 0}}, {-7, {2, 0, 1}}}, {0, 2, 6, 0, 
                    0}, {{10, 0, 1}, {16, 1, 0, 1}, {40, 2, 3, 0, 1, 3, 0, 
                    2}, {19, 2, 3}, {10, 1, 2}, {13, 2, 0, 2}, {40, 1, 3, 0, 
                    1, 3, 0, 4}, {10, 0, 5}, {16, 5, 2, 4, 5}, {13, 3, 5, 
                    3}, {1}}, 
                    Function[{Global`x}, 
                    
                    Block[{Compile`$343}, 
                    Compile`$343 = 
                    4 Global`x; -Cos[Compile`$343] + (4 (-7 + Global`x)) 
                    Sin[Compile`$343]]], Evaluate]}, {Global`x, 
                    Min[CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$], 
                    Max[
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$]}, 
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleCount$$], {}]; 
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleLastParamaters$ = {{
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$}, 
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleCount$$}]; 
                    CalculateScan`PlotterScanner`Private`osculatingCirclePlot$\
 = Graphics[{
                    Directive[
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleColor$$, 
                    Opacity[
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleOpacity$$], 
                    Thickness[
                    10^CalculateScan`PlotterScanner`Private`\
osculatingCircleThickness$$]], 
                    If[
                    CalculateScan`PlotterScanner`Private`osculatingCircleTF$$,
                     CalculateScan`PlotterScanner`Private`osculatingCircles$$,\
 {}], 
                    If[
                    And[
                    CalculateScan`PlotterScanner`Private`osculatingCircleTF$$,
                     CalculateScan`PlotterScanner`Private`\
osculatingCircleRadiiTF$$], 
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleRadii$, {}]}]; If[
                    And[
                    CalculateScan`PlotterScanner`Private`taylorParabolaTF$$, 
                    CalculateScan`PlotterScanner`Private`\
taylorParabolaLastParamaters$$ =!= {{
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$}, 
                    CalculateScan`PlotterScanner`Private`taylorParabolaCount$$\
}], CalculateScan`PlotterScanner`Private`taylorParabolas$$ = 
                    If[CalculateScan`PlotterScanner`Private`taylorParabolaTF$$\
, 
                    CalculateScan`PlotterScanner`Private`addTaylorParabolas[{
                    CompiledFunction[{8, 8., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    6}}, {{0.0625, {3, 0, 2}}, {-4, {2, 0, 1}}, {
                    4, {2, 0, 0}}, {-7, {2, 0, 2}}}, {0, 3, 7, 0, 
                    0}, {{10, 0, 1}, {16, 1, 0, 1}, {40, 2, 3, 0, 1, 3, 0, 
                    3}, {19, 3, 4}, {10, 2, 3}, {13, 3, 0, 3}, {40, 1, 3, 0, 
                    1, 3, 0, 5}, {10, 1, 6}, {16, 6, 3, 5, 6}, {13, 4, 6, 
                    4}, {16, 2, 4, 6}, {1}}, 
                    Function[{Global`x}, 
                    
                    Block[{Compile`$167}, 
                    Compile`$167 = 
                    4 Global`x; (-Cos[Compile`$167] - (4 (-7 + Global`x)) 
                    Sin[Compile`$167])/16]], Evaluate], 
                    CompiledFunction[{8, 8., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    3}}, {{4, {2, 0, 1}}, {-7, {2, 0, 0}}}, {0, 2, 4, 0, 
                    0}, {{10, 0, 1}, {13, 1, 0, 1}, {10, 1, 2}, {16, 2, 0, 
                    2}, {40, 2, 3, 0, 2, 3, 0, 3}, {16, 1, 3, 1}, {19, 1, 
                    3}, {1}}, 
                    Function[{Global`x}, -((-7 + Global`x) Cos[4 Global`x])], 
                    Evaluate], 
                    CompiledFunction[{8, 8., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    3}}, {{4, {2, 0, 0}}, {-7, {2, 0, 1}}}, {0, 2, 6, 0, 
                    0}, {{10, 0, 1}, {16, 1, 0, 1}, {40, 2, 3, 0, 1, 3, 0, 
                    2}, {19, 2, 3}, {10, 1, 2}, {13, 2, 0, 2}, {40, 1, 3, 0, 
                    1, 3, 0, 4}, {10, 0, 5}, {16, 5, 2, 4, 5}, {13, 3, 5, 
                    3}, {1}}, 
                    Function[{Global`x}, 
                    
                    Block[{Compile`$343}, 
                    Compile`$343 = 
                    4 Global`x; -Cos[Compile`$343] + (4 (-7 + Global`x)) 
                    Sin[Compile`$343]]], Evaluate]}, {Global`x, 
                    Min[
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$], 
                    Max[
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$]}, 
                    CalculateScan`PlotterScanner`Private`taylorParabolaCount$$\
], {}]; CalculateScan`PlotterScanner`Private`taylorParabolaLastParamaters$$ = \
{{CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$}, 
                    CalculateScan`PlotterScanner`Private`taylorParabolaCount$$\
}]; CalculateScan`PlotterScanner`Private`taylorParabolaPlot$ = Graphics[{
                    Directive[
                    CalculateScan`PlotterScanner`Private`taylorParabolaColor$$\
, 
                    Opacity[
                    CalculateScan`PlotterScanner`Private`\
taylorParabolaOpacity$$], 
                    Thickness[
                    10^CalculateScan`PlotterScanner`Private`\
taylorParabolaThickness$$]], 
                    If[
                    CalculateScan`PlotterScanner`Private`taylorParabolaTF$$, 
                    CalculateScan`PlotterScanner`Private`taylorParabolas$$, \
{}]}]; CalculateScan`PlotterScanner`Private`evolutePlot$ = 
                    If[CalculateScan`PlotterScanner`Private`evoluteTF$$, 
                    ParametricPlot[{Global`x, 
                    CompiledFunction[{8, 8., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    6}}, {{0.0625, {3, 0, 2}}, {-4, {2, 0, 1}}, {
                    4, {2, 0, 0}}, {-7, {2, 0, 2}}}, {0, 3, 7, 0, 
                    0}, {{10, 0, 1}, {16, 1, 0, 1}, {40, 2, 3, 0, 1, 3, 0, 
                    3}, {19, 3, 4}, {10, 2, 3}, {13, 3, 0, 3}, {40, 1, 3, 0, 
                    1, 3, 0, 5}, {10, 1, 6}, {16, 6, 3, 5, 6}, {13, 4, 6, 
                    4}, {16, 2, 4, 6}, {1}}, 
                    Function[{Global`x}, 
                    
                    Block[{Compile`$167}, 
                    Compile`$167 = 
                    4 Global`x; (-Cos[Compile`$167] - (4 (-7 + Global`x)) 
                    Sin[Compile`$167])/16]], Evaluate][
                    Global`x]} + ({-CompiledFunction[{8, 8., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    3}}, {{4, {2, 0, 1}}, {-7, {2, 0, 0}}}, {0, 2, 4, 0, 
                    0}, {{10, 0, 1}, {13, 1, 0, 1}, {10, 1, 2}, {16, 2, 0, 
                    2}, {40, 2, 3, 0, 2, 3, 0, 3}, {16, 1, 3, 1}, {19, 1, 
                    3}, {1}}, 
                    Function[{Global`x}, -((-7 + Global`x) Cos[4 Global`x])], 
                    Evaluate][Global`x], 1} (1 + 
                    CompiledFunction[{8, 8., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    3}}, {{4, {2, 0, 1}}, {-7, {2, 0, 0}}}, {0, 2, 4, 0, 
                    0}, {{10, 0, 1}, {13, 1, 0, 1}, {10, 1, 2}, {16, 2, 0, 
                    2}, {40, 2, 3, 0, 2, 3, 0, 3}, {16, 1, 3, 1}, {19, 1, 
                    3}, {1}}, 
                    Function[{Global`x}, -((-7 + Global`x) Cos[4 Global`x])], 
                    Evaluate][Global`x]^2))/CompiledFunction[{8, 8., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    3}}, {{4, {2, 0, 0}}, {-7, {2, 0, 1}}}, {0, 2, 6, 0, 
                    0}, {{10, 0, 1}, {16, 1, 0, 1}, {40, 2, 3, 0, 1, 3, 0, 
                    2}, {19, 2, 3}, {10, 1, 2}, {13, 2, 0, 2}, {40, 1, 3, 0, 
                    1, 3, 0, 4}, {10, 0, 5}, {16, 5, 2, 4, 5}, {13, 3, 5, 
                    3}, {1}}, 
                    Function[{Global`x}, 
                    
                    Block[{Compile`$343}, 
                    Compile`$343 = 
                    4 Global`x; -Cos[Compile`$343] + (4 (-7 + Global`x)) 
                    Sin[Compile`$343]]], Evaluate][Global`x], {
                    Global`x, 
                    Min[CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$] - 
                    CalculateScan`PlotterScanner`Private`\[CapitalDelta]X$/2, 
                    Max[CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$] + 
                    CalculateScan`PlotterScanner`Private`\[CapitalDelta]X$/2},
                     PlotStyle -> Directive[
                    Opacity[
                    CalculateScan`PlotterScanner`Private`evoluteOpacity$$], 
                    CalculateScan`PlotterScanner`Private`evoluteColor$$, 
                    Thickness[
                    10^CalculateScan`PlotterScanner`Private`evoluteThickness$$\
]], PlotRange -> CalculateScan`PlotterScanner`Private`pRY$, Evaluated -> 
                    False, Exclusions -> {
                    CalculateScan`PlotterScanner`Private`functionD[Global`x] == 
                    0}], {}]; If[
                    And[
                    CalculateScan`PlotterScanner`Private`involuteTF$$, 
                    CalculateScan`PlotterScanner`Private`\
involutePlotCurveLastParamaters$ =!= {{
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$}, 
                    CalculateScan`PlotterScanner`Private`involuteCount$$}], 
                    CalculateScan`PlotterScanner`Private`involutePlotCurves$ = 
                    If[CalculateScan`PlotterScanner`Private`involuteTF$$, 
                    CalculateScan`PlotterScanner`Private`singularities$ = 
                    TimeConstrained[
                    Reduce[
                    1/((-Cos[4 Global`x] - (4 (-7 + Global`x)) 
                    Sin[4 Global`x])/16) == 0, Global`x, Reals], 1, False]; 
                    CalculateScan`PlotterScanner`Private`domainsAndCounts = If[
                    Or[
                    CalculateScan`PlotterScanner`Private`singularities$ === 
                    False, Head[
                    CalculateScan`PlotterScanner`Private`singularities$] === 
                    Reduce], {{{
                    CalculateScan`PlotterScanner`Private`xL$, 
                    CalculateScan`PlotterScanner`Private`xU$}, 
                    CalculateScan`PlotterScanner`Private`involuteCount$$}}, 
                    CalculateScan`PlotterScanner`Private`singularityPoints = 
                    Cases[
                    Chop[
                    N[
                    ReplaceAll[Global`x, {
                    ToRules[
                    CalculateScan`PlotterScanner`Private`singularities$]}]]], 
                    
                    Blank[Real]]; 
                    CalculateScan`PlotterScanner`Private`\
singularityPointsRelevant = Sort[
                    Select[
                    CalculateScan`PlotterScanner`Private`singularityPoints, 
                    CalculateScan`PlotterScanner`Private`xL$ < # < 
                    CalculateScan`PlotterScanner`Private`xU$& ], Less]; 
                    CalculateScan`PlotterScanner`Private`pureDomains = 
                    Partition[{CalculateScan`PlotterScanner`Private`xL$, 
                    Apply[
                    Sequence, 
                    CalculateScan`PlotterScanner`Private`\
singularityPointsRelevant], CalculateScan`PlotterScanner`Private`xU$}, 2, 1]; 
                    Table[CalculateScan`PlotterScanner`Private`iLength = Abs[
                    Apply[Subtract, 
                    Part[
                    CalculateScan`PlotterScanner`Private`pureDomains, 
                    CalculateScan`PlotterScanner`Private`i]]]; 
                    CalculateScan`PlotterScanner`Private`involuteCounti = 
                    Ceiling[(CalculateScan`PlotterScanner`Private`iLength 
                    CalculateScan`PlotterScanner`Private`involuteCount$$)/(
                    CalculateScan`PlotterScanner`Private`xU$ - 
                    CalculateScan`PlotterScanner`Private`xL$)]; 
                    CalculateScan`PlotterScanner`Private`iScale = 
                    CalculateScan`PlotterScanner`Private`iLength/
                    CalculateScan`PlotterScanner`Private`involuteCounti; {{
                    Part[CalculateScan`PlotterScanner`Private`pureDomains, 
                    CalculateScan`PlotterScanner`Private`i, 1] + 
                    CalculateScan`PlotterScanner`Private`iScale/4, 
                    Part[CalculateScan`PlotterScanner`Private`pureDomains, 
                    CalculateScan`PlotterScanner`Private`i, 2] - 
                    CalculateScan`PlotterScanner`Private`iScale/4}, 
                    CalculateScan`PlotterScanner`Private`involuteCounti}, {
                    CalculateScan`PlotterScanner`Private`i, 
                    Length[
                    CalculateScan`PlotterScanner`Private`pureDomains]}]]; 
                    CalculateScan`PlotterScanner`Private`iTab$ = Transpose[
                    
                    Table[{{CalculateScan`PlotterScanner`Private`xLi$, 
                    CalculateScan`PlotterScanner`Private`xUi$}, 
                    CalculateScan`PlotterScanner`Private`involuteCounti} = 
                    Part[CalculateScan`PlotterScanner`Private`\
domainsAndCounts, CalculateScan`PlotterScanner`Private`i]; 
                    CalculateScan`PlotterScanner`Private`arcLength$ = Part[
                    
                    NDSolve[{Derivative[1][
                    CalculateScan`PlotterScanner`Private`arcL$][Global`x] == 
                    Sqrt[1 + D[(-Cos[4 Global`x] - (4 (-7 + Global`x)) 
                    Sin[4 Global`x])/16, Global`x]^2], 
                    CalculateScan`PlotterScanner`Private`arcL$[
                    CalculateScan`PlotterScanner`Private`xLi$] == 0}, 
                    CalculateScan`PlotterScanner`Private`arcL$, {
                    Global`x, CalculateScan`PlotterScanner`Private`xLi$, 
                    CalculateScan`PlotterScanner`Private`xUi$}], 1, 1, 2]; {
                    CalculateScan`PlotterScanner`Private`xi1$, 
                    CalculateScan`PlotterScanner`Private`xi2$} = 
                    Part[CalculateScan`PlotterScanner`Private`arcLength$, 1, 
                    1]; CalculateScan`PlotterScanner`Private`oCurve = 
                    ParametricPlot3D[
                    Prepend[
                    Normalize[{1, 
                    CompiledFunction[{8, 8., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    3}}, {{4, {2, 0, 1}}, {-7, {2, 0, 0}}}, {0, 2, 4, 0, 
                    0}, {{10, 0, 1}, {13, 1, 0, 1}, {10, 1, 2}, {16, 2, 0, 
                    2}, {40, 2, 3, 0, 2, 3, 0, 3}, {16, 1, 3, 1}, {19, 1, 
                    3}, {1}}, 
                    Function[{Global`x}, -((-7 + Global`x) Cos[4 Global`x])], 
                    Evaluate][Global`x]}], Global`x], {
                    Global`x, CalculateScan`PlotterScanner`Private`xLi$, 
                    CalculateScan`PlotterScanner`Private`xUi$}, PlotRange -> 
                    All, Evaluated -> False, MaxRecursion -> 4]; 
                    CalculateScan`PlotterScanner`Private`lineSegments$ = 
                    Select[
                    Map[First, 
                    Cases[
                    Normal[CalculateScan`PlotterScanner`Private`oCurve], 
                    Blank[Line], Infinity]], Length[#] > 3& ]; 
                    CalculateScan`PlotterScanner`Private`baseSegments$ = 
                    Map[{
                    Part[#, 1], 
                    CompiledFunction[{8, 8., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    6}}, {{0.0625, {3, 0, 2}}, {-4, {2, 0, 1}}, {
                    4, {2, 0, 0}}, {-7, {2, 0, 2}}}, {0, 3, 7, 0, 
                    0}, {{10, 0, 1}, {16, 1, 0, 1}, {40, 2, 3, 0, 1, 3, 0, 
                    3}, {19, 3, 4}, {10, 2, 3}, {13, 3, 0, 3}, {40, 1, 3, 0, 
                    1, 3, 0, 5}, {10, 1, 6}, {16, 6, 3, 5, 6}, {13, 4, 6, 
                    4}, {16, 2, 4, 6}, {1}}, 
                    Function[{Global`x}, 
                    
                    Block[{Compile`$167}, 
                    Compile`$167 = 4 Global`x; (-Cos[Compile`$167] - (
                    4 (-7 + Global`x)) Sin[Compile`$167])/16]], Evaluate][
                    Part[#, 1]]}& , 
                    CalculateScan`PlotterScanner`Private`lineSegments$, {-2}]; 
                    CalculateScan`PlotterScanner`Private`oSegments$ = 
                    Map[Rest, 
                    CalculateScan`PlotterScanner`Private`lineSegments$, {-2}]; 
                    CalculateScan`PlotterScanner`Private`arcFactors$ = 
                    Map[CalculateScan`PlotterScanner`Private`arcLength$[
                    Part[#, 1]]& , 
                    CalculateScan`PlotterScanner`Private`lineSegments$, {-2}]; 
                    CalculateScan`PlotterScanner`Private`iTabRight$ = If[True, 
                    Table[
                    CalculateScan`PlotterScanner`Private`x0 = 
                    CalculateScan`PlotterScanner`Private`xi1$ + (
                    CalculateScan`PlotterScanner`Private`jk (
                    CalculateScan`PlotterScanner`Private`xi2$ - 
                    CalculateScan`PlotterScanner`Private`xi1$))/(
                    CalculateScan`PlotterScanner`Private`involuteCounti + 1); 
                    CalculateScan`PlotterScanner`Private`signedArcFactors$ = 
                    Map[Map[Max[#, 0]& , #]& , 
                    CalculateScan`PlotterScanner`Private`arcFactors$ - 
                    CalculateScan`PlotterScanner`Private`arcLength$[
                    CalculateScan`PlotterScanner`Private`x0]]; 
                    CalculateScan`PlotterScanner`Private`curvePoints$ = 
                    CalculateScan`PlotterScanner`Private`baseSegments$ + 
                    CalculateScan`PlotterScanner`Private`signedArcFactors$ 
                    CalculateScan`PlotterScanner`Private`oSegments$; If[
                    MemberQ[CalculateScan`PlotterScanner`Private`curvePoints$, 
                    Blank[Complex], {0, Infinity}], {}, 
                    Map[
                    BSplineCurve, 
                    CalculateScan`PlotterScanner`Private`curvePoints$]], {
                    CalculateScan`PlotterScanner`Private`jk, 1, 
                    CalculateScan`PlotterScanner`Private`involuteCounti}], \
{}]; CalculateScan`PlotterScanner`Private`iTabLeft$ = If[True, 
                    Table[
                    CalculateScan`PlotterScanner`Private`x0 = 
                    CalculateScan`PlotterScanner`Private`xi2$ + (
                    CalculateScan`PlotterScanner`Private`jk (
                    CalculateScan`PlotterScanner`Private`xi1$ - 
                    CalculateScan`PlotterScanner`Private`xi2$))/(
                    CalculateScan`PlotterScanner`Private`involuteCounti + 1); 
                    CalculateScan`PlotterScanner`Private`signedArcFactors$ = 
                    Map[Map[Min[#, 0]& , #]& , 
                    CalculateScan`PlotterScanner`Private`arcFactors$ - (
                    CalculateScan`PlotterScanner`Private`arcLength$[
                    CalculateScan`PlotterScanner`Private`xi2$] - 
                    CalculateScan`PlotterScanner`Private`arcLength$[
                    CalculateScan`PlotterScanner`Private`x0])]; 
                    CalculateScan`PlotterScanner`Private`curvePoints$ = 
                    CalculateScan`PlotterScanner`Private`baseSegments$ + 
                    CalculateScan`PlotterScanner`Private`signedArcFactors$ 
                    CalculateScan`PlotterScanner`Private`oSegments$; If[
                    MemberQ[CalculateScan`PlotterScanner`Private`curvePoints$, 
                    Blank[Complex], {0, Infinity}], {}, 
                    Map[
                    BSplineCurve, 
                    CalculateScan`PlotterScanner`Private`curvePoints$]], {
                    CalculateScan`PlotterScanner`Private`jk, 1, 
                    CalculateScan`PlotterScanner`Private`involuteCounti}], \
{}]; {CalculateScan`PlotterScanner`Private`iTabRight$, 
                    CalculateScan`PlotterScanner`Private`iTabLeft$}, {
                    CalculateScan`PlotterScanner`Private`i, 
                    Length[
                    CalculateScan`PlotterScanner`Private`domainsAndCounts]}]]; 
                    CalculateScan`PlotterScanner`Private`iTab$, {}]; 
                    CalculateScan`PlotterScanner`Private`\
involutePlotCurveLastParamaters$ = {{
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$}, 
                    CalculateScan`PlotterScanner`Private`involuteCount$$}; 
                    Null]; CalculateScan`PlotterScanner`Private`involutePlot$ = 
                    Graphics[{
                    Directive[
                    CalculateScan`PlotterScanner`Private`involuteColor$$, 
                    Opacity[
                    CalculateScan`PlotterScanner`Private`involuteOpacity$$], 
                    Thickness[
                    10^CalculateScan`PlotterScanner`Private`involuteThickness$\
$]], 
                    If[
                    And[
                    CalculateScan`PlotterScanner`Private`involuteTF$$, 
                    CalculateScan`PlotterScanner`Private`involutesRightTF$$], 
                    
                    Part[
                    CalculateScan`PlotterScanner`Private`involutePlotCurves$, 
                    1], {}], 
                    If[
                    And[
                    CalculateScan`PlotterScanner`Private`involuteTF$$, 
                    CalculateScan`PlotterScanner`Private`involutesLeftTF$$], 
                    Part[
                    CalculateScan`PlotterScanner`Private`involutePlotCurves$, 
                    2], {}]}]; If[
                    And[
                    CalculateScan`PlotterScanner`Private`offsetCurveTF$$, 
                    CalculateScan`PlotterScanner`Private`\
offsetCurveLastParamaters$$ =!= {{
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$}, 
                    CalculateScan`PlotterScanner`Private`offsetCurveCount$$}],
                     CalculateScan`PlotterScanner`Private`\
offsetCurvePlotCurves$$ = 
                    If[CalculateScan`PlotterScanner`Private`offsetCurveTF$$, 
                    With[{CalculateScan`PlotterScanner`Private`maxDist$ = 
                    Function[{CalculateScan`PlotterScanner`Private`y, 
                    CalculateScan`PlotterScanner`Private`L}, (
                    Sign[CalculateScan`PlotterScanner`Private`y] 
                    CalculateScan`PlotterScanner`Private`L) Tan[
                    Abs[CalculateScan`PlotterScanner`Private`y]]^1][
                    CalculateScan`PlotterScanner`Private`offsetCurveDistance$$\
, 3.9269908169872414`]}, CalculateScan`PlotterScanner`Private`oCurve = 
                    ParametricPlot3D[
                    Prepend[
                    Normalize[{-CompiledFunction[{8, 8., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    3}}, {{4, {2, 0, 1}}, {-7, {2, 0, 0}}}, {0, 2, 4, 0, 
                    0}, {{10, 0, 1}, {13, 1, 0, 1}, {10, 1, 2}, {16, 2, 0, 
                    2}, {40, 2, 3, 0, 2, 3, 0, 3}, {16, 1, 3, 1}, {19, 1, 
                    3}, {1}}, 
                    Function[{Global`x}, -((-7 + Global`x) Cos[4 Global`x])], 
                    Evaluate][Global`x], 1}], Global`x], {
                    Global`x, Min[
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$] - 
                    CalculateScan`PlotterScanner`Private`\[CapitalDelta]X$/2, 
                    Max[CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$] + 
                    CalculateScan`PlotterScanner`Private`\[CapitalDelta]X$/2},
                     PlotRange -> All, Evaluated -> False, MaxRecursion -> 5]; 
                    CalculateScan`PlotterScanner`Private`lineSegments$ = 
                    Select[
                    Map[First, 
                    Cases[
                    Normal[CalculateScan`PlotterScanner`Private`oCurve], 
                    Blank[Line], Infinity]], Length[#] > 3& ]; 
                    CalculateScan`PlotterScanner`Private`baseSegments$ = 
                    Map[{
                    Part[#, 1], 
                    CompiledFunction[{8, 8., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    6}}, {{0.0625, {3, 0, 2}}, {-4, {2, 0, 1}}, {
                    4, {2, 0, 0}}, {-7, {2, 0, 2}}}, {0, 3, 7, 0, 
                    0}, {{10, 0, 1}, {16, 1, 0, 1}, {40, 2, 3, 0, 1, 3, 0, 
                    3}, {19, 3, 4}, {10, 2, 3}, {13, 3, 0, 3}, {40, 1, 3, 0, 
                    1, 3, 0, 5}, {10, 1, 6}, {16, 6, 3, 5, 6}, {13, 4, 6, 
                    4}, {16, 2, 4, 6}, {1}}, 
                    Function[{Global`x}, 
                    
                    Block[{Compile`$167}, 
                    Compile`$167 = 4 
                    Global`x; (-Cos[Compile`$167] - (4 (-7 + Global`x)) 
                    Sin[Compile`$167])/16]], Evaluate][
                    Part[#, 1]]}& , 
                    CalculateScan`PlotterScanner`Private`lineSegments$, {-2}]; 
                    CalculateScan`PlotterScanner`Private`oSegments$ = 
                    Map[Rest, 
                    CalculateScan`PlotterScanner`Private`lineSegments$, {-2}]; 
                    Table[{
                    Map[
                    BSplineCurve, 
                    CalculateScan`PlotterScanner`Private`baseSegments$ + ((
                    CalculateScan`PlotterScanner`Private`j 
                    CalculateScan`PlotterScanner`Private`maxDist$) 
                    CalculateScan`PlotterScanner`Private`oSegments$)/
                    CalculateScan`PlotterScanner`Private`offsetCurveCount$$], 
                    
                    Map[
                    BSplineCurve, 
                    CalculateScan`PlotterScanner`Private`baseSegments$ - ((
                    CalculateScan`PlotterScanner`Private`j 
                    CalculateScan`PlotterScanner`Private`maxDist$) 
                    CalculateScan`PlotterScanner`Private`oSegments$)/
                    CalculateScan`PlotterScanner`Private`offsetCurveCount$$]},\
 {CalculateScan`PlotterScanner`Private`j, 
                    CalculateScan`PlotterScanner`Private`offsetCurveCount$$}]]\
, {}]; CalculateScan`PlotterScanner`Private`offsetCurveLastParamaters$$ =!= {{
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$}, 
                    CalculateScan`PlotterScanner`Private`offsetCurveCount$$}]; 
                    CalculateScan`PlotterScanner`Private`offsetCurvePlot = 
                    Graphics[{
                    Directive[
                    CalculateScan`PlotterScanner`Private`offsetCurveColor$$, 
                    Opacity[
                    CalculateScan`PlotterScanner`Private`offsetCurveOpacity$$]\
, 
                    Thickness[
                    10^CalculateScan`PlotterScanner`Private`\
offsetCurveThickness$$]], 
                    If[
                    CalculateScan`PlotterScanner`Private`offsetCurveTF$$, 
                    
                    CalculateScan`PlotterScanner`Private`\
offsetCurvePlotCurves$$, {}]}]; If[
                    And[
                    CalculateScan`PlotterScanner`Private`tiltedOffsetCurveTF$$\
, CalculateScan`PlotterScanner`Private`tiltedOffsetCurveLastParamaters$$ =!= \
{{CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$}, 
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveCount$$, 
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveAngle$$}], 
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurvePlotCurves$$ = 
                    If[CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveTF$$, 
                    
                    With[{CalculateScan`PlotterScanner`Private`maxDist$ = 
                    Function[{CalculateScan`PlotterScanner`Private`y, 
                    CalculateScan`PlotterScanner`Private`L}, (
                    Sign[CalculateScan`PlotterScanner`Private`y] 
                    CalculateScan`PlotterScanner`Private`L) Tan[
                    Abs[CalculateScan`PlotterScanner`Private`y]]^1][
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveDistance$$, 3.9269908169872414`], 
                    CalculateScan`PlotterScanner`Private`M$ = {{
                    Cos[
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveAngle$$], 
                    Sin[
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveAngle$$]}, {-Sin[
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveAngle$$], 
                    Cos[
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveAngle$$]}}}, 
                    CalculateScan`PlotterScanner`Private`oCurve = 
                    ParametricPlot3D[
                    Prepend[
                    Dot[CalculateScan`PlotterScanner`Private`M$, 
                    Normalize[{-CompiledFunction[{8, 8., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    3}}, {{4, {2, 0, 1}}, {-7, {2, 0, 0}}}, {0, 2, 4, 0, 
                    0}, {{10, 0, 1}, {13, 1, 0, 1}, {10, 1, 2}, {16, 2, 0, 
                    2}, {40, 2, 3, 0, 2, 3, 0, 3}, {16, 1, 3, 1}, {19, 1, 
                    3}, {1}}, 
                    Function[{Global`x}, -((-7 + Global`x) Cos[4 Global`x])], 
                    Evaluate][Global`x], 1}]], Global`x], {
                    Global`x, Min[
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$] - 
                    CalculateScan`PlotterScanner`Private`\[CapitalDelta]X$/2, 
                    Max[CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$] + 
                    CalculateScan`PlotterScanner`Private`\[CapitalDelta]X$/2},
                     PlotRange -> All, Evaluated -> False, MaxRecursion -> 5]; 
                    CalculateScan`PlotterScanner`Private`lineSegments$ = 
                    Select[
                    Map[First, 
                    Cases[
                    Normal[CalculateScan`PlotterScanner`Private`oCurve], 
                    Blank[Line], Infinity]], Length[#] > 3& ]; 
                    CalculateScan`PlotterScanner`Private`baseSegments$ = 
                    Map[{
                    Part[#, 1], 
                    CompiledFunction[{8, 8., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    6}}, {{0.0625, {3, 0, 2}}, {-4, {2, 0, 1}}, {
                    4, {2, 0, 0}}, {-7, {2, 0, 2}}}, {0, 3, 7, 0, 
                    0}, {{10, 0, 1}, {16, 1, 0, 1}, {40, 2, 3, 0, 1, 3, 0, 
                    3}, {19, 3, 4}, {10, 2, 3}, {13, 3, 0, 3}, {40, 1, 3, 0, 
                    1, 3, 0, 5}, {10, 1, 6}, {16, 6, 3, 5, 6}, {13, 4, 6, 
                    4}, {16, 2, 4, 6}, {1}}, 
                    Function[{Global`x}, 
                    
                    Block[{Compile`$167}, 
                    Compile`$167 = 4 
                    Global`x; (-Cos[Compile`$167] - (4 (-7 + Global`x)) 
                    Sin[Compile`$167])/16]], Evaluate][
                    Part[#, 1]]}& , 
                    CalculateScan`PlotterScanner`Private`lineSegments$, {-2}]; 
                    CalculateScan`PlotterScanner`Private`oSegments$ = 
                    Map[Rest, 
                    CalculateScan`PlotterScanner`Private`lineSegments$, {-2}]; 
                    Table[{
                    Map[
                    BSplineCurve, 
                    CalculateScan`PlotterScanner`Private`baseSegments$ + ((
                    CalculateScan`PlotterScanner`Private`j 
                    CalculateScan`PlotterScanner`Private`maxDist$) 
                    CalculateScan`PlotterScanner`Private`oSegments$)/
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveCount$$], 
                    Map[
                    BSplineCurve, 
                    CalculateScan`PlotterScanner`Private`baseSegments$ - ((
                    CalculateScan`PlotterScanner`Private`j 
                    CalculateScan`PlotterScanner`Private`maxDist$) 
                    CalculateScan`PlotterScanner`Private`oSegments$)/
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveCount$$]}, {
                    CalculateScan`PlotterScanner`Private`j, 
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveCount$$}]], {}]; 
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveLastParamaters$$ =!= {{
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$}, 
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveCount$$, 
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveAngle$$}]; 
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurvePlot = Graphics[{
                    Directive[
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveColor$$, 
                    Opacity[
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveOpacity$$], 
                    Thickness[
                    10^CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveThickness$$]], 
                    If[
                    CalculateScan`PlotterScanner`Private`tiltedOffsetCurveTF$$\
, CalculateScan`PlotterScanner`Private`tiltedOffsetCurvePlotCurves$$, {}]}]; 
                    If[
                    And[
                    CalculateScan`PlotterScanner`Private`pedalCurveTF$$, 
                    CalculateScan`PlotterScanner`Private`\
pedalCurveLastParamaters$$ =!= {{
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$}, 
                    CalculateScan`PlotterScanner`Private`\
pedalCurveCountFactor$$, 
                    CalculateScan`PlotterScanner`Private`\
pedalCurveCountFactor$$}], 
                    CalculateScan`PlotterScanner`Private`pedalCurvePlotCurves$\
$ = If[CalculateScan`PlotterScanner`Private`pedalCurveTF$$, 
                    
                    With[{CalculateScan`PlotterScanner`Private`\
pedalCurveCount$ = If[CalculateScan`PlotterScanner`Private`pedalCurvePoints$$ === 
                    "grid", 
                    Max[1, 
                    Round[
                    16 CalculateScan`PlotterScanner`Private`\
pedalCurveCountFactor$$]], 
                    Max[1, 
                    Round[
                    120 CalculateScan`PlotterScanner`Private`\
pedalCurveCountFactor$$]]]}, 
                    (Cases[
                    Normal[#], 
                    Blank[Line], {0, Infinity}]& )[
                    If[
                    CalculateScan`PlotterScanner`Private`pedalCurvePoints$$ === 
                    "grid", 
                    Table[
                    
                    With[{CalculateScan`PlotterScanner`Private`px$ = 
                    CalculateScan`PlotterScanner`Private`px, 
                    CalculateScan`PlotterScanner`Private`py$ = 
                    CalculateScan`PlotterScanner`Private`py}, 
                    ParametricPlot[{Global`x, 
                    CompiledFunction[{8, 8., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    6}}, {{0.0625, {3, 0, 2}}, {-4, {2, 0, 1}}, {
                    4, {2, 0, 0}}, {-7, {2, 0, 2}}}, {0, 3, 7, 0, 
                    0}, {{10, 0, 1}, {16, 1, 0, 1}, {40, 2, 3, 0, 1, 3, 0, 
                    3}, {19, 3, 4}, {10, 2, 3}, {13, 3, 0, 3}, {40, 1, 3, 0, 
                    1, 3, 0, 5}, {10, 1, 6}, {16, 6, 3, 5, 6}, {13, 4, 6, 
                    4}, {16, 2, 4, 6}, {1}}, 
                    Function[{Global`x}, 
                    
                    Block[{Compile`$167}, 
                    Compile`$167 = 4 Global`x; (-Cos[Compile`$167] - (
                    4 (-7 + Global`x)) Sin[Compile`$167])/16]], Evaluate][
                    Global`x]} + ((1 (
                    CalculateScan`PlotterScanner`Private`px$ - Global`x) + 
                    CompiledFunction[{8, 8., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    3}}, {{4, {2, 0, 1}}, {-7, {2, 0, 0}}}, {0, 2, 4, 0, 
                    0}, {{10, 0, 1}, {13, 1, 0, 1}, {10, 1, 2}, {16, 2, 0, 
                    2}, {40, 2, 3, 0, 2, 3, 0, 3}, {16, 1, 3, 1}, {19, 1, 
                    3}, {1}}, 
                    Function[{Global`x}, -((-7 + Global`x) Cos[4 Global`x])], 
                    Evaluate][Global`x] (
                    CalculateScan`PlotterScanner`Private`py$ - 
                    CompiledFunction[{8, 8., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    6}}, {{0.0625, {3, 0, 2}}, {-4, {2, 0, 1}}, {
                    4, {2, 0, 0}}, {-7, {2, 0, 2}}}, {0, 3, 7, 0, 
                    0}, {{10, 0, 1}, {16, 1, 0, 1}, {40, 2, 3, 0, 1, 3, 0, 
                    3}, {19, 3, 4}, {10, 2, 3}, {13, 3, 0, 3}, {40, 1, 3, 0, 
                    1, 3, 0, 5}, {10, 1, 6}, {16, 6, 3, 5, 6}, {13, 4, 6, 
                    4}, {16, 2, 4, 6}, {1}}, 
                    Function[{Global`x}, 
                    
                    Block[{Compile`$167}, 
                    Compile`$167 = 4 Global`x; (-Cos[Compile`$167] - (
                    4 (-7 + Global`x)) Sin[Compile`$167])/16]], Evaluate][
                    Global`x])) {1, 
                    CompiledFunction[{8, 8., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    6}}, {{0.0625, {3, 0, 2}}, {-4, {2, 0, 1}}, {
                    4, {2, 0, 0}}, {-7, {2, 0, 2}}}, {0, 3, 7, 0, 
                    0}, {{10, 0, 1}, {16, 1, 0, 1}, {40, 2, 3, 0, 1, 3, 0, 
                    3}, {19, 3, 4}, {10, 2, 3}, {13, 3, 0, 3}, {40, 1, 3, 0, 
                    1, 3, 0, 5}, {10, 1, 6}, {16, 6, 3, 5, 6}, {13, 4, 6, 
                    4}, {16, 2, 4, 6}, {1}}, 
                    Function[{Global`x}, 
                    
                    Block[{Compile`$167}, 
                    Compile`$167 = 4 Global`x; (-Cos[Compile`$167] - (
                    4 (-7 + Global`x)) Sin[Compile`$167])/16]], Evaluate][
                    Global`x]})/(1 + CompiledFunction[{8, 8., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    3}}, {{4, {2, 0, 1}}, {-7, {2, 0, 0}}}, {0, 2, 4, 0, 
                    0}, {{10, 0, 1}, {13, 1, 0, 1}, {10, 1, 2}, {16, 2, 0, 
                    2}, {40, 2, 3, 0, 2, 3, 0, 3}, {16, 1, 3, 1}, {19, 1, 
                    3}, {1}}, 
                    Function[{Global`x}, -((-7 + Global`x) Cos[4 Global`x])], 
                    Evaluate][Global`x]^2), {
                    Global`x, CalculateScan`PlotterScanner`Private`xL$, 
                    CalculateScan`PlotterScanner`Private`xU$}, 
                    PlotRange -> {
                    CalculateScan`PlotterScanner`Private`pRX$, 
                    CalculateScan`PlotterScanner`Private`pRY$}, Evaluated -> 
                    False]], {CalculateScan`PlotterScanner`Private`px, 
                    CalculateScan`PlotterScanner`Private`xL$, 
                    CalculateScan`PlotterScanner`Private`xU$, (
                    CalculateScan`PlotterScanner`Private`xU$ - 
                    CalculateScan`PlotterScanner`Private`xL$)/
                    CalculateScan`PlotterScanner`Private`pedalCurveCount$}, {
                    CalculateScan`PlotterScanner`Private`py, 
                    CalculateScan`PlotterScanner`Private`yL$, 
                    CalculateScan`PlotterScanner`Private`yU$, (
                    CalculateScan`PlotterScanner`Private`yU$ - 
                    CalculateScan`PlotterScanner`Private`yL$)/
                    CalculateScan`PlotterScanner`Private`pedalCurveCount$}], 
                    Table[
                    
                    With[{CalculateScan`PlotterScanner`Private`px$ = 
                    CalculateScan`PlotterScanner`Private`px, 
                    CalculateScan`PlotterScanner`Private`py$ = 
                    CompiledFunction[{8, 8., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    6}}, {{0.0625, {3, 0, 2}}, {-4, {2, 0, 1}}, {
                    4, {2, 0, 0}}, {-7, {2, 0, 2}}}, {0, 3, 7, 0, 
                    0}, {{10, 0, 1}, {16, 1, 0, 1}, {40, 2, 3, 0, 1, 3, 0, 
                    3}, {19, 3, 4}, {10, 2, 3}, {13, 3, 0, 3}, {40, 1, 3, 0, 
                    1, 3, 0, 5}, {10, 1, 6}, {16, 6, 3, 5, 6}, {13, 4, 6, 
                    4}, {16, 2, 4, 6}, {1}}, 
                    Function[{Global`x}, 
                    
                    Block[{Compile`$167}, 
                    Compile`$167 = 4 Global`x; (-Cos[Compile`$167] - (
                    4 (-7 + Global`x)) Sin[Compile`$167])/16]], Evaluate][
                    CalculateScan`PlotterScanner`Private`px]}, 
                    ParametricPlot[{Global`x, 
                    CompiledFunction[{8, 8., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    6}}, {{0.0625, {3, 0, 2}}, {-4, {2, 0, 1}}, {
                    4, {2, 0, 0}}, {-7, {2, 0, 2}}}, {0, 3, 7, 0, 
                    0}, {{10, 0, 1}, {16, 1, 0, 1}, {40, 2, 3, 0, 1, 3, 0, 
                    3}, {19, 3, 4}, {10, 2, 3}, {13, 3, 0, 3}, {40, 1, 3, 0, 
                    1, 3, 0, 5}, {10, 1, 6}, {16, 6, 3, 5, 6}, {13, 4, 6, 
                    4}, {16, 2, 4, 6}, {1}}, 
                    Function[{Global`x}, 
                    
                    Block[{Compile`$167}, 
                    Compile`$167 = 4 Global`x; (-Cos[Compile`$167] - (
                    4 (-7 + Global`x)) Sin[Compile`$167])/16]], Evaluate][
                    Global`x]} + ((1 (
                    CalculateScan`PlotterScanner`Private`px$ - Global`x) + 
                    CompiledFunction[{8, 8., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    3}}, {{4, {2, 0, 1}}, {-7, {2, 0, 0}}}, {0, 2, 4, 0, 
                    0}, {{10, 0, 1}, {13, 1, 0, 1}, {10, 1, 2}, {16, 2, 0, 
                    2}, {40, 2, 3, 0, 2, 3, 0, 3}, {16, 1, 3, 1}, {19, 1, 
                    3}, {1}}, 
                    Function[{Global`x}, -((-7 + Global`x) Cos[4 Global`x])], 
                    Evaluate][Global`x] (
                    CalculateScan`PlotterScanner`Private`py$ - 
                    CompiledFunction[{8, 8., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    6}}, {{0.0625, {3, 0, 2}}, {-4, {2, 0, 1}}, {
                    4, {2, 0, 0}}, {-7, {2, 0, 2}}}, {0, 3, 7, 0, 
                    0}, {{10, 0, 1}, {16, 1, 0, 1}, {40, 2, 3, 0, 1, 3, 0, 
                    3}, {19, 3, 4}, {10, 2, 3}, {13, 3, 0, 3}, {40, 1, 3, 0, 
                    1, 3, 0, 5}, {10, 1, 6}, {16, 6, 3, 5, 6}, {13, 4, 6, 
                    4}, {16, 2, 4, 6}, {1}}, 
                    Function[{Global`x}, 
                    
                    Block[{Compile`$167}, 
                    Compile`$167 = 4 Global`x; (-Cos[Compile`$167] - (
                    4 (-7 + Global`x)) Sin[Compile`$167])/16]], Evaluate][
                    Global`x])) {1, 
                    CompiledFunction[{8, 8., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    6}}, {{0.0625, {3, 0, 2}}, {-4, {2, 0, 1}}, {
                    4, {2, 0, 0}}, {-7, {2, 0, 2}}}, {0, 3, 7, 0, 
                    0}, {{10, 0, 1}, {16, 1, 0, 1}, {40, 2, 3, 0, 1, 3, 0, 
                    3}, {19, 3, 4}, {10, 2, 3}, {13, 3, 0, 3}, {40, 1, 3, 0, 
                    1, 3, 0, 5}, {10, 1, 6}, {16, 6, 3, 5, 6}, {13, 4, 6, 
                    4}, {16, 2, 4, 6}, {1}}, 
                    Function[{Global`x}, 
                    
                    Block[{Compile`$167}, 
                    Compile`$167 = 4 Global`x; (-Cos[Compile`$167] - (
                    4 (-7 + Global`x)) Sin[Compile`$167])/16]], Evaluate][
                    Global`x]})/(1 + CompiledFunction[{8, 8., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    3}}, {{4, {2, 0, 1}}, {-7, {2, 0, 0}}}, {0, 2, 4, 0, 
                    0}, {{10, 0, 1}, {13, 1, 0, 1}, {10, 1, 2}, {16, 2, 0, 
                    2}, {40, 2, 3, 0, 2, 3, 0, 3}, {16, 1, 3, 1}, {19, 1, 
                    3}, {1}}, 
                    Function[{Global`x}, -((-7 + Global`x) Cos[4 Global`x])], 
                    Evaluate][Global`x]^2), {
                    Global`x, CalculateScan`PlotterScanner`Private`xL$, 
                    CalculateScan`PlotterScanner`Private`xU$}, 
                    PlotRange -> {
                    CalculateScan`PlotterScanner`Private`pRX$, 
                    CalculateScan`PlotterScanner`Private`pRY$}, Evaluated -> 
                    False]], {CalculateScan`PlotterScanner`Private`px, 
                    CalculateScan`PlotterScanner`Private`xL$, 
                    CalculateScan`PlotterScanner`Private`xU$, (
                    CalculateScan`PlotterScanner`Private`xU$ - 
                    CalculateScan`PlotterScanner`Private`xL$)/
                    CalculateScan`PlotterScanner`Private`pedalCurveCount$}]]]]\
, {}]; CalculateScan`PlotterScanner`Private`pedalCurveLastParamaters$$ =!= {{
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$}, 
                    CalculateScan`PlotterScanner`Private`\
pedalCurveCountFactor$$, 
                    CalculateScan`PlotterScanner`Private`pedalCurvePoints$$}]; 
                    CalculateScan`PlotterScanner`Private`pedalCurvePlot = 
                    Graphics[{
                    Directive[
                    CalculateScan`PlotterScanner`Private`pedalCurveColor$$, 
                    Opacity[
                    CalculateScan`PlotterScanner`Private`pedalCurveOpacity$$], 
                    Thickness[
                    10^CalculateScan`PlotterScanner`Private`\
pedalCurveThickness$$]], 
                    If[
                    CalculateScan`PlotterScanner`Private`pedalCurveTF$$, 
                    CalculateScan`PlotterScanner`Private`pedalCurvePlotCurves$\
$, {}]}]; If[
                    And[
                    CalculateScan`PlotterScanner`Private`negativePedalCurveTF$\
$, CalculateScan`PlotterScanner`Private`negativePedalCurveLastParamaters$$ =!= \
{{CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$}, 
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurveCountFactor$$, 
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurvePoints$$}], 
                    If[CalculateScan`PlotterScanner`Private`\
negativePedalCurveTF$$, 
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurvePlotCurves$$ = 
                    With[{CalculateScan`PlotterScanner`Private`\
negativePedalCurveCount$ = 
                    If[CalculateScan`PlotterScanner`Private`\
negativePedalCurvePoints$$ === "grid", 
                    Max[1, 
                    Round[
                    16 CalculateScan`PlotterScanner`Private`\
negativePedalCurveCountFactor$$]], 
                    Max[1, 
                    Round[
                    120 CalculateScan`PlotterScanner`Private`\
negativePedalCurveCountFactor$$]]]}, 
                    (Cases[
                    Normal[#], 
                    Blank[Line], {0, Infinity}]& )[
                    If[
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurvePoints$$ === "grid", 
                    Table[
                    
                    With[{CalculateScan`PlotterScanner`Private`px$ = 
                    CalculateScan`PlotterScanner`Private`px, 
                    CalculateScan`PlotterScanner`Private`py$ = 
                    CalculateScan`PlotterScanner`Private`py}, 
                    
                    ParametricPlot[{-((
                    CalculateScan`PlotterScanner`Private`px$ - 2 Global`x) (
                    CalculateScan`PlotterScanner`Private`py$ - 
                    CompiledFunction[{8, 8., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    6}}, {{0.0625, {3, 0, 2}}, {-4, {2, 0, 1}}, {
                    4, {2, 0, 0}}, {-7, {2, 0, 2}}}, {0, 3, 7, 0, 
                    0}, {{10, 0, 1}, {16, 1, 0, 1}, {40, 2, 3, 0, 1, 3, 0, 
                    3}, {19, 3, 4}, {10, 2, 3}, {13, 3, 0, 3}, {40, 1, 3, 0, 
                    1, 3, 0, 5}, {10, 1, 6}, {16, 6, 3, 5, 6}, {13, 4, 6, 
                    4}, {16, 2, 4, 6}, {1}}, 
                    Function[{Global`x}, 
                    
                    Block[{Compile`$167}, 
                    Compile`$167 = 4 Global`x; (-Cos[Compile`$167] - (
                    4 (-7 + Global`x)) Sin[Compile`$167])/16]], Evaluate][
                    Global`x])) - ((CalculateScan`PlotterScanner`Private`px$ - 
                    Global`x) Global`x + (
                    CalculateScan`PlotterScanner`Private`py$ - 
                    CompiledFunction[{8, 8., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    6}}, {{0.0625, {3, 0, 2}}, {-4, {2, 0, 1}}, {
                    4, {2, 0, 0}}, {-7, {2, 0, 2}}}, {0, 3, 7, 0, 
                    0}, {{10, 0, 1}, {16, 1, 0, 1}, {40, 2, 3, 0, 1, 3, 0, 
                    3}, {19, 3, 4}, {10, 2, 3}, {13, 3, 0, 3}, {40, 1, 3, 0, 
                    1, 3, 0, 5}, {10, 1, 6}, {16, 6, 3, 5, 6}, {13, 4, 6, 
                    4}, {16, 2, 4, 6}, {1}}, 
                    Function[{Global`x}, 
                    
                    Block[{Compile`$167}, 
                    Compile`$167 = 4 Global`x; (-Cos[Compile`$167] - (
                    4 (-7 + Global`x)) Sin[Compile`$167])/16]], Evaluate][
                    Global`x])^2) CompiledFunction[{8, 8., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    3}}, {{4, {2, 0, 1}}, {-7, {2, 0, 0}}}, {0, 2, 4, 0, 
                    0}, {{10, 0, 1}, {13, 1, 0, 1}, {10, 1, 2}, {16, 2, 0, 
                    2}, {40, 2, 3, 0, 2, 3, 0, 3}, {16, 1, 3, 1}, {19, 1, 
                    3}, {1}}, 
                    Function[{Global`x}, -((-7 + Global`x) Cos[4 Global`x])], 
                    Evaluate][Global`x], (
                    CalculateScan`PlotterScanner`Private`px$ - Global`x)^2 + 
                    CalculateScan`PlotterScanner`Private`py$ 
                    CompiledFunction[{8, 8., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    6}}, {{0.0625, {3, 0, 2}}, {-4, {2, 0, 1}}, {
                    4, {2, 0, 0}}, {-7, {2, 0, 2}}}, {0, 3, 7, 0, 
                    0}, {{10, 0, 1}, {16, 1, 0, 1}, {40, 2, 3, 0, 1, 3, 0, 
                    3}, {19, 3, 4}, {10, 2, 3}, {13, 3, 0, 3}, {40, 1, 3, 0, 
                    1, 3, 0, 5}, {10, 1, 6}, {16, 6, 3, 5, 6}, {13, 4, 6, 
                    4}, {16, 2, 4, 6}, {1}}, 
                    Function[{Global`x}, 
                    
                    Block[{Compile`$167}, 
                    Compile`$167 = 4 Global`x; (-Cos[Compile`$167] - (
                    4 (-7 + Global`x)) Sin[Compile`$167])/16]], Evaluate][
                    Global`x] - CompiledFunction[{8, 8., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    6}}, {{0.0625, {3, 0, 2}}, {-4, {2, 0, 1}}, {
                    4, {2, 0, 0}}, {-7, {2, 0, 2}}}, {0, 3, 7, 0, 
                    0}, {{10, 0, 1}, {16, 1, 0, 1}, {40, 2, 3, 0, 1, 3, 0, 
                    3}, {19, 3, 4}, {10, 2, 3}, {13, 3, 0, 3}, {40, 1, 3, 0, 
                    1, 3, 0, 5}, {10, 1, 6}, {16, 6, 3, 5, 6}, {13, 4, 6, 
                    4}, {16, 2, 4, 6}, {1}}, 
                    Function[{Global`x}, 
                    
                    Block[{Compile`$167}, 
                    Compile`$167 = 4 Global`x; (-Cos[Compile`$167] - (
                    4 (-7 + Global`x)) Sin[Compile`$167])/16]], Evaluate][
                    Global`x]^2 + ((CalculateScan`PlotterScanner`Private`px$ - 
                    Global`x) (CalculateScan`PlotterScanner`Private`py$ - 2 
                    CompiledFunction[{8, 8., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    6}}, {{0.0625, {3, 0, 2}}, {-4, {2, 0, 1}}, {
                    4, {2, 0, 0}}, {-7, {2, 0, 2}}}, {0, 3, 7, 0, 
                    0}, {{10, 0, 1}, {16, 1, 0, 1}, {40, 2, 3, 0, 1, 3, 0, 
                    3}, {19, 3, 4}, {10, 2, 3}, {13, 3, 0, 3}, {40, 1, 3, 0, 
                    1, 3, 0, 5}, {10, 1, 6}, {16, 6, 3, 5, 6}, {13, 4, 6, 
                    4}, {16, 2, 4, 6}, {1}}, 
                    Function[{Global`x}, 
                    
                    Block[{Compile`$167}, 
                    Compile`$167 = 4 Global`x; (-Cos[Compile`$167] - (
                    4 (-7 + Global`x)) Sin[Compile`$167])/16]], Evaluate][
                    Global`x])) CompiledFunction[{8, 8., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    3}}, {{4, {2, 0, 1}}, {-7, {2, 0, 0}}}, {0, 2, 4, 0, 
                    0}, {{10, 0, 1}, {13, 1, 0, 1}, {10, 1, 2}, {16, 2, 0, 
                    2}, {40, 2, 3, 0, 2, 3, 0, 3}, {16, 1, 3, 1}, {19, 1, 
                    3}, {1}}, 
                    Function[{Global`x}, -((-7 + Global`x) Cos[4 Global`x])], 
                    Evaluate][Global`x]}/(
                    CalculateScan`PlotterScanner`Private`py$ - 
                    CompiledFunction[{8, 8., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    6}}, {{0.0625, {3, 0, 2}}, {-4, {2, 0, 1}}, {
                    4, {2, 0, 0}}, {-7, {2, 0, 2}}}, {0, 3, 7, 0, 
                    0}, {{10, 0, 1}, {16, 1, 0, 1}, {40, 2, 3, 0, 1, 3, 0, 
                    3}, {19, 3, 4}, {10, 2, 3}, {13, 3, 0, 3}, {40, 1, 3, 0, 
                    1, 3, 0, 5}, {10, 1, 6}, {16, 6, 3, 5, 6}, {13, 4, 6, 
                    4}, {16, 2, 4, 6}, {1}}, 
                    Function[{Global`x}, 
                    
                    Block[{Compile`$167}, 
                    Compile`$167 = 4 Global`x; (-Cos[Compile`$167] - (
                    4 (-7 + Global`x)) Sin[Compile`$167])/16]], Evaluate][
                    Global`x] + (-CalculateScan`PlotterScanner`Private`px$ + 
                    Global`x) CompiledFunction[{8, 8., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    3}}, {{4, {2, 0, 1}}, {-7, {2, 0, 0}}}, {0, 2, 4, 0, 
                    0}, {{10, 0, 1}, {13, 1, 0, 1}, {10, 1, 2}, {16, 2, 0, 
                    2}, {40, 2, 3, 0, 2, 3, 0, 3}, {16, 1, 3, 1}, {19, 1, 
                    3}, {1}}, 
                    Function[{Global`x}, -((-7 + Global`x) Cos[4 Global`x])], 
                    Evaluate][Global`x]), {
                    Global`x, CalculateScan`PlotterScanner`Private`xL$, 
                    CalculateScan`PlotterScanner`Private`xU$}, 
                    PlotRange -> {
                    CalculateScan`PlotterScanner`Private`pRX$, 
                    CalculateScan`PlotterScanner`Private`pRY$}, Evaluated -> 
                    False]], {CalculateScan`PlotterScanner`Private`px, 
                    CalculateScan`PlotterScanner`Private`xL$, 
                    CalculateScan`PlotterScanner`Private`xU$, (
                    CalculateScan`PlotterScanner`Private`xU$ - 
                    CalculateScan`PlotterScanner`Private`xL$)/
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurveCount$}, {CalculateScan`PlotterScanner`Private`py, 
                    CalculateScan`PlotterScanner`Private`yL$, 
                    CalculateScan`PlotterScanner`Private`yU$, (
                    CalculateScan`PlotterScanner`Private`yU$ - 
                    CalculateScan`PlotterScanner`Private`yL$)/
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurveCount$}], 
                    Table[
                    
                    With[{CalculateScan`PlotterScanner`Private`px$ = 
                    CalculateScan`PlotterScanner`Private`px, 
                    CalculateScan`PlotterScanner`Private`py$ = 
                    CompiledFunction[{8, 8., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    6}}, {{0.0625, {3, 0, 2}}, {-4, {2, 0, 1}}, {
                    4, {2, 0, 0}}, {-7, {2, 0, 2}}}, {0, 3, 7, 0, 
                    0}, {{10, 0, 1}, {16, 1, 0, 1}, {40, 2, 3, 0, 1, 3, 0, 
                    3}, {19, 3, 4}, {10, 2, 3}, {13, 3, 0, 3}, {40, 1, 3, 0, 
                    1, 3, 0, 5}, {10, 1, 6}, {16, 6, 3, 5, 6}, {13, 4, 6, 
                    4}, {16, 2, 4, 6}, {1}}, 
                    Function[{Global`x}, 
                    
                    Block[{Compile`$167}, 
                    Compile`$167 = 4 Global`x; (-Cos[Compile`$167] - (
                    4 (-7 + Global`x)) Sin[Compile`$167])/16]], Evaluate][
                    CalculateScan`PlotterScanner`Private`px]}, 
                    
                    ParametricPlot[{-((
                    CalculateScan`PlotterScanner`Private`px$ - 2 Global`x) (
                    CalculateScan`PlotterScanner`Private`py$ - 
                    CompiledFunction[{8, 8., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    6}}, {{0.0625, {3, 0, 2}}, {-4, {2, 0, 1}}, {
                    4, {2, 0, 0}}, {-7, {2, 0, 2}}}, {0, 3, 7, 0, 
                    0}, {{10, 0, 1}, {16, 1, 0, 1}, {40, 2, 3, 0, 1, 3, 0, 
                    3}, {19, 3, 4}, {10, 2, 3}, {13, 3, 0, 3}, {40, 1, 3, 0, 
                    1, 3, 0, 5}, {10, 1, 6}, {16, 6, 3, 5, 6}, {13, 4, 6, 
                    4}, {16, 2, 4, 6}, {1}}, 
                    Function[{Global`x}, 
                    
                    Block[{Compile`$167}, 
                    Compile`$167 = 4 Global`x; (-Cos[Compile`$167] - (
                    4 (-7 + Global`x)) Sin[Compile`$167])/16]], Evaluate][
                    Global`x])) - ((CalculateScan`PlotterScanner`Private`px$ - 
                    Global`x) Global`x + (
                    CalculateScan`PlotterScanner`Private`py$ - 
                    CompiledFunction[{8, 8., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    6}}, {{0.0625, {3, 0, 2}}, {-4, {2, 0, 1}}, {
                    4, {2, 0, 0}}, {-7, {2, 0, 2}}}, {0, 3, 7, 0, 
                    0}, {{10, 0, 1}, {16, 1, 0, 1}, {40, 2, 3, 0, 1, 3, 0, 
                    3}, {19, 3, 4}, {10, 2, 3}, {13, 3, 0, 3}, {40, 1, 3, 0, 
                    1, 3, 0, 5}, {10, 1, 6}, {16, 6, 3, 5, 6}, {13, 4, 6, 
                    4}, {16, 2, 4, 6}, {1}}, 
                    Function[{Global`x}, 
                    
                    Block[{Compile`$167}, 
                    Compile`$167 = 4 Global`x; (-Cos[Compile`$167] - (
                    4 (-7 + Global`x)) Sin[Compile`$167])/16]], Evaluate][
                    Global`x])^2) CompiledFunction[{8, 8., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    3}}, {{4, {2, 0, 1}}, {-7, {2, 0, 0}}}, {0, 2, 4, 0, 
                    0}, {{10, 0, 1}, {13, 1, 0, 1}, {10, 1, 2}, {16, 2, 0, 
                    2}, {40, 2, 3, 0, 2, 3, 0, 3}, {16, 1, 3, 1}, {19, 1, 
                    3}, {1}}, 
                    Function[{Global`x}, -((-7 + Global`x) Cos[4 Global`x])], 
                    Evaluate][Global`x], (
                    CalculateScan`PlotterScanner`Private`px$ - Global`x)^2 + 
                    CalculateScan`PlotterScanner`Private`py$ 
                    CompiledFunction[{8, 8., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    6}}, {{0.0625, {3, 0, 2}}, {-4, {2, 0, 1}}, {
                    4, {2, 0, 0}}, {-7, {2, 0, 2}}}, {0, 3, 7, 0, 
                    0}, {{10, 0, 1}, {16, 1, 0, 1}, {40, 2, 3, 0, 1, 3, 0, 
                    3}, {19, 3, 4}, {10, 2, 3}, {13, 3, 0, 3}, {40, 1, 3, 0, 
                    1, 3, 0, 5}, {10, 1, 6}, {16, 6, 3, 5, 6}, {13, 4, 6, 
                    4}, {16, 2, 4, 6}, {1}}, 
                    Function[{Global`x}, 
                    
                    Block[{Compile`$167}, 
                    Compile`$167 = 4 Global`x; (-Cos[Compile`$167] - (
                    4 (-7 + Global`x)) Sin[Compile`$167])/16]], Evaluate][
                    Global`x] - CompiledFunction[{8, 8., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    6}}, {{0.0625, {3, 0, 2}}, {-4, {2, 0, 1}}, {
                    4, {2, 0, 0}}, {-7, {2, 0, 2}}}, {0, 3, 7, 0, 
                    0}, {{10, 0, 1}, {16, 1, 0, 1}, {40, 2, 3, 0, 1, 3, 0, 
                    3}, {19, 3, 4}, {10, 2, 3}, {13, 3, 0, 3}, {40, 1, 3, 0, 
                    1, 3, 0, 5}, {10, 1, 6}, {16, 6, 3, 5, 6}, {13, 4, 6, 
                    4}, {16, 2, 4, 6}, {1}}, 
                    Function[{Global`x}, 
                    
                    Block[{Compile`$167}, 
                    Compile`$167 = 4 Global`x; (-Cos[Compile`$167] - (
                    4 (-7 + Global`x)) Sin[Compile`$167])/16]], Evaluate][
                    Global`x]^2 + ((CalculateScan`PlotterScanner`Private`px$ - 
                    Global`x) (CalculateScan`PlotterScanner`Private`py$ - 2 
                    CompiledFunction[{8, 8., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    6}}, {{0.0625, {3, 0, 2}}, {-4, {2, 0, 1}}, {
                    4, {2, 0, 0}}, {-7, {2, 0, 2}}}, {0, 3, 7, 0, 
                    0}, {{10, 0, 1}, {16, 1, 0, 1}, {40, 2, 3, 0, 1, 3, 0, 
                    3}, {19, 3, 4}, {10, 2, 3}, {13, 3, 0, 3}, {40, 1, 3, 0, 
                    1, 3, 0, 5}, {10, 1, 6}, {16, 6, 3, 5, 6}, {13, 4, 6, 
                    4}, {16, 2, 4, 6}, {1}}, 
                    Function[{Global`x}, 
                    
                    Block[{Compile`$167}, 
                    Compile`$167 = 4 Global`x; (-Cos[Compile`$167] - (
                    4 (-7 + Global`x)) Sin[Compile`$167])/16]], Evaluate][
                    Global`x])) CompiledFunction[{8, 8., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    3}}, {{4, {2, 0, 1}}, {-7, {2, 0, 0}}}, {0, 2, 4, 0, 
                    0}, {{10, 0, 1}, {13, 1, 0, 1}, {10, 1, 2}, {16, 2, 0, 
                    2}, {40, 2, 3, 0, 2, 3, 0, 3}, {16, 1, 3, 1}, {19, 1, 
                    3}, {1}}, 
                    Function[{Global`x}, -((-7 + Global`x) Cos[4 Global`x])], 
                    Evaluate][Global`x]}/(
                    CalculateScan`PlotterScanner`Private`py$ - 
                    CompiledFunction[{8, 8., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    6}}, {{0.0625, {3, 0, 2}}, {-4, {2, 0, 1}}, {
                    4, {2, 0, 0}}, {-7, {2, 0, 2}}}, {0, 3, 7, 0, 
                    0}, {{10, 0, 1}, {16, 1, 0, 1}, {40, 2, 3, 0, 1, 3, 0, 
                    3}, {19, 3, 4}, {10, 2, 3}, {13, 3, 0, 3}, {40, 1, 3, 0, 
                    1, 3, 0, 5}, {10, 1, 6}, {16, 6, 3, 5, 6}, {13, 4, 6, 
                    4}, {16, 2, 4, 6}, {1}}, 
                    Function[{Global`x}, 
                    
                    Block[{Compile`$167}, 
                    Compile`$167 = 4 Global`x; (-Cos[Compile`$167] - (
                    4 (-7 + Global`x)) Sin[Compile`$167])/16]], Evaluate][
                    Global`x] + (-CalculateScan`PlotterScanner`Private`px$ + 
                    Global`x) CompiledFunction[{8, 8., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    3}}, {{4, {2, 0, 1}}, {-7, {2, 0, 0}}}, {0, 2, 4, 0, 
                    0}, {{10, 0, 1}, {13, 1, 0, 1}, {10, 1, 2}, {16, 2, 0, 
                    2}, {40, 2, 3, 0, 2, 3, 0, 3}, {16, 1, 3, 1}, {19, 1, 
                    3}, {1}}, 
                    Function[{Global`x}, -((-7 + Global`x) Cos[4 Global`x])], 
                    Evaluate][Global`x]), {
                    Global`x, CalculateScan`PlotterScanner`Private`xL$, 
                    CalculateScan`PlotterScanner`Private`xU$}, 
                    PlotRange -> {
                    CalculateScan`PlotterScanner`Private`pRX$, 
                    CalculateScan`PlotterScanner`Private`pRY$}, Evaluated -> 
                    False]], {CalculateScan`PlotterScanner`Private`px, 
                    CalculateScan`PlotterScanner`Private`xL$, 
                    CalculateScan`PlotterScanner`Private`xU$, (
                    CalculateScan`PlotterScanner`Private`xU$ - 
                    CalculateScan`PlotterScanner`Private`xL$)/
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurveCount$}]]]], {}]; 
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurveLastParamaters$$ = {{
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$}, 
                    
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurveCountFactor$$, 
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurvePoints$$}]; 
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurvePlot = Graphics[{
                    Directive[
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurveColor$$, 
                    Opacity[
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurveOpacity$$], 
                    Thickness[
                    10^CalculateScan`PlotterScanner`Private`\
negativePedalCurveThickness$$]], 
                    If[
                    CalculateScan`PlotterScanner`Private`negativePedalCurveTF$\
$, CalculateScan`PlotterScanner`Private`negativePedalCurvePlotCurves$$, {}]}]; 
                    If[
                    And[
                    CalculateScan`PlotterScanner`Private`contraPedalCurveTF$$,
                     CalculateScan`PlotterScanner`Private`\
contraPedalCurveLastParamaters$$ =!= {{
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$}, 
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurveCountFactor$$, 
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurvePoints$$}], 
                    If[CalculateScan`PlotterScanner`Private`\
contraPedalCurveTF$$, 
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurvePlotCurves$$ = 
                    With[{CalculateScan`PlotterScanner`Private`\
contraPedalCurveCount$ = 
                    If[CalculateScan`PlotterScanner`Private`\
contraPedalCurvePoints$$ === "grid", 
                    Max[1, 
                    Round[
                    16 CalculateScan`PlotterScanner`Private`\
contraPedalCurveCountFactor$$]], 
                    Max[1, 
                    Round[
                    120 CalculateScan`PlotterScanner`Private`\
contraPedalCurveCountFactor$$]]]}, 
                    (Cases[
                    Normal[#], 
                    Blank[Line], {0, Infinity}]& )[
                    If[
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurvePoints$$ === "grid", 
                    Table[
                    
                    With[{CalculateScan`PlotterScanner`Private`px$ = 
                    CalculateScan`PlotterScanner`Private`px, 
                    CalculateScan`PlotterScanner`Private`py$ = 
                    CalculateScan`PlotterScanner`Private`py}, 
                    ParametricPlot[{Global`x, 
                    CompiledFunction[{8, 8., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    6}}, {{0.0625, {3, 0, 2}}, {-4, {2, 0, 1}}, {
                    4, {2, 0, 0}}, {-7, {2, 0, 2}}}, {0, 3, 7, 0, 
                    0}, {{10, 0, 1}, {16, 1, 0, 1}, {40, 2, 3, 0, 1, 3, 0, 
                    3}, {19, 3, 4}, {10, 2, 3}, {13, 3, 0, 3}, {40, 1, 3, 0, 
                    1, 3, 0, 5}, {10, 1, 6}, {16, 6, 3, 5, 6}, {13, 4, 6, 
                    4}, {16, 2, 4, 6}, {1}}, 
                    Function[{Global`x}, 
                    
                    Block[{Compile`$167}, 
                    Compile`$167 = 4 Global`x; (-Cos[Compile`$167] - (
                    4 (-7 + Global`x)) Sin[Compile`$167])/16]], Evaluate][
                    Global`x]} + ((1 (
                    CalculateScan`PlotterScanner`Private`py$ - 
                    CompiledFunction[{8, 8., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    6}}, {{0.0625, {3, 0, 2}}, {-4, {2, 0, 1}}, {
                    4, {2, 0, 0}}, {-7, {2, 0, 2}}}, {0, 3, 7, 0, 
                    0}, {{10, 0, 1}, {16, 1, 0, 1}, {40, 2, 3, 0, 1, 3, 0, 
                    3}, {19, 3, 4}, {10, 2, 3}, {13, 3, 0, 3}, {40, 1, 3, 0, 
                    1, 3, 0, 5}, {10, 1, 6}, {16, 6, 3, 5, 6}, {13, 4, 6, 
                    4}, {16, 2, 4, 6}, {1}}, 
                    Function[{Global`x}, 
                    
                    Block[{Compile`$167}, 
                    Compile`$167 = 4 Global`x; (-Cos[Compile`$167] - (
                    4 (-7 + Global`x)) Sin[Compile`$167])/16]], Evaluate][
                    Global`x]) + CompiledFunction[{8, 8., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    3}}, {{4, {2, 0, 1}}, {-7, {2, 0, 0}}}, {0, 2, 4, 0, 
                    0}, {{10, 0, 1}, {13, 1, 0, 1}, {10, 1, 2}, {16, 2, 0, 
                    2}, {40, 2, 3, 0, 2, 3, 0, 3}, {16, 1, 3, 1}, {19, 1, 
                    3}, {1}}, 
                    Function[{Global`x}, -((-7 + Global`x) Cos[4 Global`x])], 
                    Evaluate][Global`x] (-
                    CalculateScan`PlotterScanner`Private`px$ + Global`x)) {-
                    CompiledFunction[{8, 8., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    6}}, {{0.0625, {3, 0, 2}}, {-4, {2, 0, 1}}, {
                    4, {2, 0, 0}}, {-7, {2, 0, 2}}}, {0, 3, 7, 0, 
                    0}, {{10, 0, 1}, {16, 1, 0, 1}, {40, 2, 3, 0, 1, 3, 0, 
                    3}, {19, 3, 4}, {10, 2, 3}, {13, 3, 0, 3}, {40, 1, 3, 0, 
                    1, 3, 0, 5}, {10, 1, 6}, {16, 6, 3, 5, 6}, {13, 4, 6, 
                    4}, {16, 2, 4, 6}, {1}}, 
                    Function[{Global`x}, 
                    
                    Block[{Compile`$167}, 
                    Compile`$167 = 4 Global`x; (-Cos[Compile`$167] - (
                    4 (-7 + Global`x)) Sin[Compile`$167])/16]], Evaluate][
                    Global`x], 1})/(1 + CompiledFunction[{8, 8., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    3}}, {{4, {2, 0, 1}}, {-7, {2, 0, 0}}}, {0, 2, 4, 0, 
                    0}, {{10, 0, 1}, {13, 1, 0, 1}, {10, 1, 2}, {16, 2, 0, 
                    2}, {40, 2, 3, 0, 2, 3, 0, 3}, {16, 1, 3, 1}, {19, 1, 
                    3}, {1}}, 
                    Function[{Global`x}, -((-7 + Global`x) Cos[4 Global`x])], 
                    Evaluate][Global`x]^2), {
                    Global`x, CalculateScan`PlotterScanner`Private`xL$, 
                    CalculateScan`PlotterScanner`Private`xU$}, 
                    PlotRange -> {
                    CalculateScan`PlotterScanner`Private`pRX$, 
                    CalculateScan`PlotterScanner`Private`pRY$}, Evaluated -> 
                    False]], {CalculateScan`PlotterScanner`Private`px, 
                    CalculateScan`PlotterScanner`Private`xL$, 
                    CalculateScan`PlotterScanner`Private`xU$, (
                    CalculateScan`PlotterScanner`Private`xU$ - 
                    CalculateScan`PlotterScanner`Private`xL$)/
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurveCount$}, {CalculateScan`PlotterScanner`Private`py, 
                    CalculateScan`PlotterScanner`Private`yL$, 
                    CalculateScan`PlotterScanner`Private`yU$, (
                    CalculateScan`PlotterScanner`Private`yU$ - 
                    CalculateScan`PlotterScanner`Private`yL$)/
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurveCount$}], 
                    Table[
                    
                    With[{CalculateScan`PlotterScanner`Private`px$ = 
                    CalculateScan`PlotterScanner`Private`px, 
                    CalculateScan`PlotterScanner`Private`py$ = 
                    CompiledFunction[{8, 8., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    6}}, {{0.0625, {3, 0, 2}}, {-4, {2, 0, 1}}, {
                    4, {2, 0, 0}}, {-7, {2, 0, 2}}}, {0, 3, 7, 0, 
                    0}, {{10, 0, 1}, {16, 1, 0, 1}, {40, 2, 3, 0, 1, 3, 0, 
                    3}, {19, 3, 4}, {10, 2, 3}, {13, 3, 0, 3}, {40, 1, 3, 0, 
                    1, 3, 0, 5}, {10, 1, 6}, {16, 6, 3, 5, 6}, {13, 4, 6, 
                    4}, {16, 2, 4, 6}, {1}}, 
                    Function[{Global`x}, 
                    
                    Block[{Compile`$167}, 
                    Compile`$167 = 4 Global`x; (-Cos[Compile`$167] - (
                    4 (-7 + Global`x)) Sin[Compile`$167])/16]], Evaluate][
                    CalculateScan`PlotterScanner`Private`px]}, 
                    ParametricPlot[{Global`x, 
                    CompiledFunction[{8, 8., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    6}}, {{0.0625, {3, 0, 2}}, {-4, {2, 0, 1}}, {
                    4, {2, 0, 0}}, {-7, {2, 0, 2}}}, {0, 3, 7, 0, 
                    0}, {{10, 0, 1}, {16, 1, 0, 1}, {40, 2, 3, 0, 1, 3, 0, 
                    3}, {19, 3, 4}, {10, 2, 3}, {13, 3, 0, 3}, {40, 1, 3, 0, 
                    1, 3, 0, 5}, {10, 1, 6}, {16, 6, 3, 5, 6}, {13, 4, 6, 
                    4}, {16, 2, 4, 6}, {1}}, 
                    Function[{Global`x}, 
                    
                    Block[{Compile`$167}, 
                    Compile`$167 = 4 Global`x; (-Cos[Compile`$167] - (
                    4 (-7 + Global`x)) Sin[Compile`$167])/16]], Evaluate][
                    Global`x]} + ((1 (
                    CalculateScan`PlotterScanner`Private`py$ - 
                    CompiledFunction[{8, 8., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    6}}, {{0.0625, {3, 0, 2}}, {-4, {2, 0, 1}}, {
                    4, {2, 0, 0}}, {-7, {2, 0, 2}}}, {0, 3, 7, 0, 
                    0}, {{10, 0, 1}, {16, 1, 0, 1}, {40, 2, 3, 0, 1, 3, 0, 
                    3}, {19, 3, 4}, {10, 2, 3}, {13, 3, 0, 3}, {40, 1, 3, 0, 
                    1, 3, 0, 5}, {10, 1, 6}, {16, 6, 3, 5, 6}, {13, 4, 6, 
                    4}, {16, 2, 4, 6}, {1}}, 
                    Function[{Global`x}, 
                    
                    Block[{Compile`$167}, 
                    Compile`$167 = 4 Global`x; (-Cos[Compile`$167] - (
                    4 (-7 + Global`x)) Sin[Compile`$167])/16]], Evaluate][
                    Global`x]) + CompiledFunction[{8, 8., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    3}}, {{4, {2, 0, 1}}, {-7, {2, 0, 0}}}, {0, 2, 4, 0, 
                    0}, {{10, 0, 1}, {13, 1, 0, 1}, {10, 1, 2}, {16, 2, 0, 
                    2}, {40, 2, 3, 0, 2, 3, 0, 3}, {16, 1, 3, 1}, {19, 1, 
                    3}, {1}}, 
                    Function[{Global`x}, -((-7 + Global`x) Cos[4 Global`x])], 
                    Evaluate][Global`x] (-
                    CalculateScan`PlotterScanner`Private`px$ + Global`x)) {-
                    CompiledFunction[{8, 8., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    6}}, {{0.0625, {3, 0, 2}}, {-4, {2, 0, 1}}, {
                    4, {2, 0, 0}}, {-7, {2, 0, 2}}}, {0, 3, 7, 0, 
                    0}, {{10, 0, 1}, {16, 1, 0, 1}, {40, 2, 3, 0, 1, 3, 0, 
                    3}, {19, 3, 4}, {10, 2, 3}, {13, 3, 0, 3}, {40, 1, 3, 0, 
                    1, 3, 0, 5}, {10, 1, 6}, {16, 6, 3, 5, 6}, {13, 4, 6, 
                    4}, {16, 2, 4, 6}, {1}}, 
                    Function[{Global`x}, 
                    
                    Block[{Compile`$167}, 
                    Compile`$167 = 4 Global`x; (-Cos[Compile`$167] - (
                    4 (-7 + Global`x)) Sin[Compile`$167])/16]], Evaluate][
                    Global`x], 1})/(1 + CompiledFunction[{8, 8., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    3}}, {{4, {2, 0, 1}}, {-7, {2, 0, 0}}}, {0, 2, 4, 0, 
                    0}, {{10, 0, 1}, {13, 1, 0, 1}, {10, 1, 2}, {16, 2, 0, 
                    2}, {40, 2, 3, 0, 2, 3, 0, 3}, {16, 1, 3, 1}, {19, 1, 
                    3}, {1}}, 
                    Function[{Global`x}, -((-7 + Global`x) Cos[4 Global`x])], 
                    Evaluate][Global`x]^2), {
                    Global`x, CalculateScan`PlotterScanner`Private`xL$, 
                    CalculateScan`PlotterScanner`Private`xU$}, 
                    PlotRange -> {
                    CalculateScan`PlotterScanner`Private`pRX$, 
                    CalculateScan`PlotterScanner`Private`pRY$}, Evaluated -> 
                    False]], {CalculateScan`PlotterScanner`Private`px, 
                    CalculateScan`PlotterScanner`Private`xL$, 
                    CalculateScan`PlotterScanner`Private`xU$, (
                    CalculateScan`PlotterScanner`Private`xU$ - 
                    CalculateScan`PlotterScanner`Private`xL$)/
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurveCount$}]]]], {}]; 
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurveLastParamaters$$ = {{
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$}, 
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurveCountFactor$$, 
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurvePoints$$}]; 
                    CalculateScan`PlotterScanner`Private`contraPedalCurvePlot = 
                    Graphics[{
                    Directive[
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurveColor$$, 
                    Opacity[
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurveOpacity$$], 
                    Thickness[
                    10^CalculateScan`PlotterScanner`Private`\
contraPedalCurveThickness$$]], 
                    If[
                    CalculateScan`PlotterScanner`Private`contraPedalCurveTF$$,
                     CalculateScan`PlotterScanner`Private`\
contraPedalCurvePlotCurves$$, {}]}]; If[
                    And[
                    CalculateScan`PlotterScanner`Private`dualCurveTF$$, 
                    CalculateScan`PlotterScanner`Private`\
dualCurveLastParamaters$$ =!= {{
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$}, 
                    CalculateScan`PlotterScanner`Private`dualCurveCountFactor$\
$, CalculateScan`PlotterScanner`Private`dualCurvePoints}], 
                    If[CalculateScan`PlotterScanner`Private`dualCurveTF$$, 
                    CalculateScan`PlotterScanner`Private`dualCurvePlotCurves$$\
 = With[{CalculateScan`PlotterScanner`Private`dualCurveCount$ = 
                    If[CalculateScan`PlotterScanner`Private`dualCurvePoints === 
                    "grid", 
                    Max[1, 
                    Round[
                    16 CalculateScan`PlotterScanner`Private`\
dualCurveCountFactor$$]], 
                    Max[1, 
                    Round[
                    120 CalculateScan`PlotterScanner`Private`\
dualCurveCountFactor$$]]]}, 
                    (Cases[
                    Normal[#], 
                    Blank[Line], {0, Infinity}]& )[
                    If[
                    CalculateScan`PlotterScanner`Private`dualCurvePoints === 
                    "grid", 
                    Table[
                    
                    With[{CalculateScan`PlotterScanner`Private`px$ = 
                    CalculateScan`PlotterScanner`Private`px, 
                    CalculateScan`PlotterScanner`Private`py$ = 
                    CalculateScan`PlotterScanner`Private`py}, 
                    ParametricPlot[{-CompiledFunction[{8, 8., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    3}}, {{4, {2, 0, 1}}, {-7, {2, 0, 0}}}, {0, 2, 4, 0, 
                    0}, {{10, 0, 1}, {13, 1, 0, 1}, {10, 1, 2}, {16, 2, 0, 
                    2}, {40, 2, 3, 0, 2, 3, 0, 3}, {16, 1, 3, 1}, {19, 1, 
                    3}, {1}}, 
                    Function[{Global`x}, -((-7 + Global`x) Cos[4 Global`x])], 
                    Evaluate][Global`x], 1}/((Global`x + 
                    CalculateScan`PlotterScanner`Private`px$) 
                    CompiledFunction[{8, 8., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    3}}, {{4, {2, 0, 1}}, {-7, {2, 0, 0}}}, {0, 2, 4, 0, 
                    0}, {{10, 0, 1}, {13, 1, 0, 1}, {10, 1, 2}, {16, 2, 0, 
                    2}, {40, 2, 3, 0, 2, 3, 0, 3}, {16, 1, 3, 1}, {19, 1, 
                    3}, {1}}, 
                    Function[{Global`x}, -((-7 + Global`x) Cos[4 Global`x])], 
                    Evaluate][Global`x] - 
                    1 (CompiledFunction[{8, 8., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    6}}, {{0.0625, {3, 0, 2}}, {-4, {2, 0, 1}}, {
                    4, {2, 0, 0}}, {-7, {2, 0, 2}}}, {0, 3, 7, 0, 
                    0}, {{10, 0, 1}, {16, 1, 0, 1}, {40, 2, 3, 0, 1, 3, 0, 
                    3}, {19, 3, 4}, {10, 2, 3}, {13, 3, 0, 3}, {40, 1, 3, 0, 
                    1, 3, 0, 5}, {10, 1, 6}, {16, 6, 3, 5, 6}, {13, 4, 6, 
                    4}, {16, 2, 4, 6}, {1}}, 
                    Function[{Global`x}, 
                    
                    Block[{Compile`$167}, 
                    Compile`$167 = 4 Global`x; (-Cos[Compile`$167] - (
                    4 (-7 + Global`x)) Sin[Compile`$167])/16]], Evaluate][
                    Global`x] + CalculateScan`PlotterScanner`Private`py$)), {
                    Global`x, Min[CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$] - 
                    CalculateScan`PlotterScanner`Private`\[CapitalDelta]X$/2, 
                    Max[CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$] + 
                    CalculateScan`PlotterScanner`Private`\[CapitalDelta]X$/2},
                     PlotStyle -> Directive[
                    Opacity[
                    CalculateScan`PlotterScanner`Private`dualCurveOpacity$$], 
                    CalculateScan`PlotterScanner`Private`dualCurveColor$$, 
                    Thickness[
                    10^CalculateScan`PlotterScanner`Private`\
dualCurveThickness$$]], PlotRange -> 
                    CalculateScan`PlotterScanner`Private`pRY$, Evaluated -> 
                    False, Exclusions -> {(Global`x + 
                    CalculateScan`PlotterScanner`Private`px$) 
                    CompiledFunction[{8, 8., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    3}}, {{4, {2, 0, 1}}, {-7, {2, 0, 0}}}, {0, 2, 4, 0, 
                    0}, {{10, 0, 1}, {13, 1, 0, 1}, {10, 1, 2}, {16, 2, 0, 
                    2}, {40, 2, 3, 0, 2, 3, 0, 3}, {16, 1, 3, 1}, {19, 1, 
                    3}, {1}}, 
                    Function[{Global`x}, -((-7 + Global`x) Cos[4 Global`x])], 
                    Evaluate][Global`x] - 
                    1 (CompiledFunction[{8, 8., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    6}}, {{0.0625, {3, 0, 2}}, {-4, {2, 0, 1}}, {
                    4, {2, 0, 0}}, {-7, {2, 0, 2}}}, {0, 3, 7, 0, 
                    0}, {{10, 0, 1}, {16, 1, 0, 1}, {40, 2, 3, 0, 1, 3, 0, 
                    3}, {19, 3, 4}, {10, 2, 3}, {13, 3, 0, 3}, {40, 1, 3, 0, 
                    1, 3, 0, 5}, {10, 1, 6}, {16, 6, 3, 5, 6}, {13, 4, 6, 
                    4}, {16, 2, 4, 6}, {1}}, 
                    Function[{Global`x}, 
                    
                    Block[{Compile`$167}, 
                    Compile`$167 = 4 Global`x; (-Cos[Compile`$167] - (
                    4 (-7 + Global`x)) Sin[Compile`$167])/16]], Evaluate][
                    Global`x] + CalculateScan`PlotterScanner`Private`py$) == 
                    0}]], {CalculateScan`PlotterScanner`Private`px, 
                    CalculateScan`PlotterScanner`Private`xL$, 
                    CalculateScan`PlotterScanner`Private`xU$, (
                    CalculateScan`PlotterScanner`Private`xU$ - 
                    CalculateScan`PlotterScanner`Private`xL$)/
                    CalculateScan`PlotterScanner`Private`dualCurveCount$}, {
                    CalculateScan`PlotterScanner`Private`py, 
                    CalculateScan`PlotterScanner`Private`yL$, 
                    CalculateScan`PlotterScanner`Private`yU$, (
                    CalculateScan`PlotterScanner`Private`yU$ - 
                    CalculateScan`PlotterScanner`Private`yL$)/
                    CalculateScan`PlotterScanner`Private`dualCurveCount$}], 
                    Table[
                    
                    With[{CalculateScan`PlotterScanner`Private`px$ = 
                    CalculateScan`PlotterScanner`Private`px, 
                    CalculateScan`PlotterScanner`Private`py$ = 
                    CompiledFunction[{8, 8., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    6}}, {{0.0625, {3, 0, 2}}, {-4, {2, 0, 1}}, {
                    4, {2, 0, 0}}, {-7, {2, 0, 2}}}, {0, 3, 7, 0, 
                    0}, {{10, 0, 1}, {16, 1, 0, 1}, {40, 2, 3, 0, 1, 3, 0, 
                    3}, {19, 3, 4}, {10, 2, 3}, {13, 3, 0, 3}, {40, 1, 3, 0, 
                    1, 3, 0, 5}, {10, 1, 6}, {16, 6, 3, 5, 6}, {13, 4, 6, 
                    4}, {16, 2, 4, 6}, {1}}, 
                    Function[{Global`x}, 
                    
                    Block[{Compile`$167}, 
                    Compile`$167 = 4 Global`x; (-Cos[Compile`$167] - (
                    4 (-7 + Global`x)) Sin[Compile`$167])/16]], Evaluate][
                    CalculateScan`PlotterScanner`Private`px]}, 
                    ParametricPlot[{-CompiledFunction[{8, 8., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    3}}, {{4, {2, 0, 1}}, {-7, {2, 0, 0}}}, {0, 2, 4, 0, 
                    0}, {{10, 0, 1}, {13, 1, 0, 1}, {10, 1, 2}, {16, 2, 0, 
                    2}, {40, 2, 3, 0, 2, 3, 0, 3}, {16, 1, 3, 1}, {19, 1, 
                    3}, {1}}, 
                    Function[{Global`x}, -((-7 + Global`x) Cos[4 Global`x])], 
                    Evaluate][Global`x], 1}/((Global`x + 
                    CalculateScan`PlotterScanner`Private`px$) 
                    CompiledFunction[{8, 8., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    3}}, {{4, {2, 0, 1}}, {-7, {2, 0, 0}}}, {0, 2, 4, 0, 
                    0}, {{10, 0, 1}, {13, 1, 0, 1}, {10, 1, 2}, {16, 2, 0, 
                    2}, {40, 2, 3, 0, 2, 3, 0, 3}, {16, 1, 3, 1}, {19, 1, 
                    3}, {1}}, 
                    Function[{Global`x}, -((-7 + Global`x) Cos[4 Global`x])], 
                    Evaluate][Global`x] - 
                    1 (CompiledFunction[{8, 8., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    6}}, {{0.0625, {3, 0, 2}}, {-4, {2, 0, 1}}, {
                    4, {2, 0, 0}}, {-7, {2, 0, 2}}}, {0, 3, 7, 0, 
                    0}, {{10, 0, 1}, {16, 1, 0, 1}, {40, 2, 3, 0, 1, 3, 0, 
                    3}, {19, 3, 4}, {10, 2, 3}, {13, 3, 0, 3}, {40, 1, 3, 0, 
                    1, 3, 0, 5}, {10, 1, 6}, {16, 6, 3, 5, 6}, {13, 4, 6, 
                    4}, {16, 2, 4, 6}, {1}}, 
                    Function[{Global`x}, 
                    
                    Block[{Compile`$167}, 
                    Compile`$167 = 4 Global`x; (-Cos[Compile`$167] - (
                    4 (-7 + Global`x)) Sin[Compile`$167])/16]], Evaluate][
                    Global`x] + CalculateScan`PlotterScanner`Private`py$)), {
                    Global`x, Min[CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$] - 
                    CalculateScan`PlotterScanner`Private`\[CapitalDelta]X$/2, 
                    Max[CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$] + 
                    CalculateScan`PlotterScanner`Private`\[CapitalDelta]X$/2},
                     PlotStyle -> Directive[
                    Opacity[
                    CalculateScan`PlotterScanner`Private`dualCurveOpacity$$], 
                    CalculateScan`PlotterScanner`Private`dualCurveColor$$, 
                    Thickness[
                    10^CalculateScan`PlotterScanner`Private`\
dualCurveThickness$$]], PlotRange -> 
                    CalculateScan`PlotterScanner`Private`pRY$, Evaluated -> 
                    False, Exclusions -> {(Global`x + 
                    CalculateScan`PlotterScanner`Private`px$) 
                    CompiledFunction[{8, 8., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    3}}, {{4, {2, 0, 1}}, {-7, {2, 0, 0}}}, {0, 2, 4, 0, 
                    0}, {{10, 0, 1}, {13, 1, 0, 1}, {10, 1, 2}, {16, 2, 0, 
                    2}, {40, 2, 3, 0, 2, 3, 0, 3}, {16, 1, 3, 1}, {19, 1, 
                    3}, {1}}, 
                    Function[{Global`x}, -((-7 + Global`x) Cos[4 Global`x])], 
                    Evaluate][Global`x] - 
                    1 (CompiledFunction[{8, 8., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    6}}, {{0.0625, {3, 0, 2}}, {-4, {2, 0, 1}}, {
                    4, {2, 0, 0}}, {-7, {2, 0, 2}}}, {0, 3, 7, 0, 
                    0}, {{10, 0, 1}, {16, 1, 0, 1}, {40, 2, 3, 0, 1, 3, 0, 
                    3}, {19, 3, 4}, {10, 2, 3}, {13, 3, 0, 3}, {40, 1, 3, 0, 
                    1, 3, 0, 5}, {10, 1, 6}, {16, 6, 3, 5, 6}, {13, 4, 6, 
                    4}, {16, 2, 4, 6}, {1}}, 
                    Function[{Global`x}, 
                    Block[{Compile`$167}, 
                    Compile`$167 = 4 Global`x; (-Cos[Compile`$167] - (
                    4 (-7 + Global`x)) Sin[Compile`$167])/16]], Evaluate][
                    Global`x] + CalculateScan`PlotterScanner`Private`py$) == 
                    0}]], {CalculateScan`PlotterScanner`Private`px, 
                    CalculateScan`PlotterScanner`Private`xL$, 
                    CalculateScan`PlotterScanner`Private`xU$, (
                    CalculateScan`PlotterScanner`Private`xU$ - 
                    CalculateScan`PlotterScanner`Private`xL$)/
                    CalculateScan`PlotterScanner`Private`dualCurveCount$}]]]],\
 {}]; CalculateScan`PlotterScanner`Private`dualCurveLastParamaters$$ = {{
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$}, 
                    CalculateScan`PlotterScanner`Private`dualCurveCountFactor$\
$, CalculateScan`PlotterScanner`Private`dualCurvePoints}]; 
                    CalculateScan`PlotterScanner`Private`dualCurvePlot = 
                    Graphics[{
                    Directive[
                    Opacity[
                    CalculateScan`PlotterScanner`Private`dualCurveOpacity$$], 
                    CalculateScan`PlotterScanner`Private`dualCurveColor$$, 
                    Thickness[
                    10^CalculateScan`PlotterScanner`Private`\
dualCurveThickness$$]], 
                    If[
                    CalculateScan`PlotterScanner`Private`dualCurveTF$$, 
                    CalculateScan`PlotterScanner`Private`dualCurvePlotCurves$$\
, {}]}]; If[
                    And[
                    CalculateScan`PlotterScanner`Private`inverseCurveTF$$, 
                    CalculateScan`PlotterScanner`Private`\
inverseLastParamaters$$ =!= {{
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$}, 
                    CalculateScan`PlotterScanner`Private`\
inverseCurveCountFactor$$, 
                    CalculateScan`PlotterScanner`Private`inverseCurvePoints$$,
                     CalculateScan`PlotterScanner`Private`\
inverseCurveCountFactor$$, 
                    CalculateScan`PlotterScanner`Private`\
inverseCurveCircleRadiusFactor$$}], 
                    If[CalculateScan`PlotterScanner`Private`inverseCurveTF$$, 
                    CalculateScan`PlotterScanner`Private`\
inverseCurvePlotCurves$$ = (Cases[
                    Normal[#], 
                    Blank[Line], {0, Infinity}]& )[
                    
                    With[{CalculateScan`PlotterScanner`Private`\
inverseCurveCount$ = 
                    If[CalculateScan`PlotterScanner`Private`\
inverseCurvePoints$$ === "grid", 
                    Max[1, 
                    Round[
                    16 CalculateScan`PlotterScanner`Private`\
inverseCurveCountFactor$$]], 
                    Max[1, 
                    Round[
                    120 CalculateScan`PlotterScanner`Private`\
inverseCurveCountFactor$$]]], CalculateScan`PlotterScanner`Private`R$ = 
                    Function[{CalculateScan`PlotterScanner`Private`y, 
                    CalculateScan`PlotterScanner`Private`L}, (
                    Sign[CalculateScan`PlotterScanner`Private`y] 
                    CalculateScan`PlotterScanner`Private`L) Tan[
                    Abs[CalculateScan`PlotterScanner`Private`y]]^1][
                    CalculateScan`PlotterScanner`Private`\
inverseCurveCircleRadiusFactor$$, 1] 
                    Abs[CalculateScan`PlotterScanner`Private`X2$ - 
                    CalculateScan`PlotterScanner`Private`X1$]}, 
                    If[
                    CalculateScan`PlotterScanner`Private`inverseCurvePoints$$ === 
                    "grid", 
                    Table[
                    
                    With[{CalculateScan`PlotterScanner`Private`px$ = 
                    CalculateScan`PlotterScanner`Private`px, 
                    CalculateScan`PlotterScanner`Private`py$ = 
                    CalculateScan`PlotterScanner`Private`py}, 
                    
                    ParametricPlot[{
                    CalculateScan`PlotterScanner`Private`px$, 
                    CalculateScan`PlotterScanner`Private`py$} + (
                    CalculateScan`PlotterScanner`Private`R$^2 {
                    Global`x - CalculateScan`PlotterScanner`Private`px$, 
                    CompiledFunction[{8, 8., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    6}}, {{0.0625, {3, 0, 2}}, {-4, {2, 0, 1}}, {
                    4, {2, 0, 0}}, {-7, {2, 0, 2}}}, {0, 3, 7, 0, 
                    0}, {{10, 0, 1}, {16, 1, 0, 1}, {40, 2, 3, 0, 1, 3, 0, 
                    3}, {19, 3, 4}, {10, 2, 3}, {13, 3, 0, 3}, {40, 1, 3, 0, 
                    1, 3, 0, 5}, {10, 1, 6}, {16, 6, 3, 5, 6}, {13, 4, 6, 
                    4}, {16, 2, 4, 6}, {1}}, 
                    Function[{Global`x}, 
                    
                    Block[{Compile`$167}, 
                    Compile`$167 = 4 Global`x; (-Cos[Compile`$167] - (
                    4 (-7 + Global`x)) Sin[Compile`$167])/16]], Evaluate][
                    Global`x] - CalculateScan`PlotterScanner`Private`py$})/((
                    Global`x - CalculateScan`PlotterScanner`Private`px$)^2 + (
                    CompiledFunction[{8, 8., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    6}}, {{0.0625, {3, 0, 2}}, {-4, {2, 0, 1}}, {
                    4, {2, 0, 0}}, {-7, {2, 0, 2}}}, {0, 3, 7, 0, 
                    0}, {{10, 0, 1}, {16, 1, 0, 1}, {40, 2, 3, 0, 1, 3, 0, 
                    3}, {19, 3, 4}, {10, 2, 3}, {13, 3, 0, 3}, {40, 1, 3, 0, 
                    1, 3, 0, 5}, {10, 1, 6}, {16, 6, 3, 5, 6}, {13, 4, 6, 
                    4}, {16, 2, 4, 6}, {1}}, 
                    Function[{Global`x}, 
                    
                    Block[{Compile`$167}, 
                    Compile`$167 = 4 Global`x; (-Cos[Compile`$167] - (
                    4 (-7 + Global`x)) Sin[Compile`$167])/16]], Evaluate][
                    Global`x] - 
                    CalculateScan`PlotterScanner`Private`py$)^2), {
                    Global`x, Min[CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$] - 
                    CalculateScan`PlotterScanner`Private`\[CapitalDelta]X$/2, 
                    Max[CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$] + 
                    CalculateScan`PlotterScanner`Private`\[CapitalDelta]X$/2},
                     PlotRange -> CalculateScan`PlotterScanner`Private`pRY$, 
                    Evaluated -> False]], {
                    CalculateScan`PlotterScanner`Private`px, 
                    CalculateScan`PlotterScanner`Private`xL$, 
                    CalculateScan`PlotterScanner`Private`xU$, (
                    CalculateScan`PlotterScanner`Private`xU$ - 
                    CalculateScan`PlotterScanner`Private`xL$)/
                    CalculateScan`PlotterScanner`Private`inverseCurveCount$}, \
{CalculateScan`PlotterScanner`Private`py, 
                    CalculateScan`PlotterScanner`Private`yL$, 
                    CalculateScan`PlotterScanner`Private`yU$, (
                    CalculateScan`PlotterScanner`Private`yU$ - 
                    CalculateScan`PlotterScanner`Private`yL$)/
                    CalculateScan`PlotterScanner`Private`inverseCurveCount$}], 
                    Table[
                    With[{CalculateScan`PlotterScanner`Private`px$ = 
                    CalculateScan`PlotterScanner`Private`px, 
                    CalculateScan`PlotterScanner`Private`py$ = 
                    CompiledFunction[{8, 8., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    6}}, {{0.0625, {3, 0, 2}}, {-4, {2, 0, 1}}, {
                    4, {2, 0, 0}}, {-7, {2, 0, 2}}}, {0, 3, 7, 0, 
                    0}, {{10, 0, 1}, {16, 1, 0, 1}, {40, 2, 3, 0, 1, 3, 0, 
                    3}, {19, 3, 4}, {10, 2, 3}, {13, 3, 0, 3}, {40, 1, 3, 0, 
                    1, 3, 0, 5}, {10, 1, 6}, {16, 6, 3, 5, 6}, {13, 4, 6, 
                    4}, {16, 2, 4, 6}, {1}}, 
                    Function[{Global`x}, 
                    
                    Block[{Compile`$167}, 
                    Compile`$167 = 4 Global`x; (-Cos[Compile`$167] - (
                    4 (-7 + Global`x)) Sin[Compile`$167])/16]], Evaluate][
                    CalculateScan`PlotterScanner`Private`px]}, 
                    
                    ParametricPlot[{
                    CalculateScan`PlotterScanner`Private`px$, 
                    CalculateScan`PlotterScanner`Private`py$} + (
                    CalculateScan`PlotterScanner`Private`R$^2 {
                    Global`x - CalculateScan`PlotterScanner`Private`px$, 
                    CompiledFunction[{8, 8., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    6}}, {{0.0625, {3, 0, 2}}, {-4, {2, 0, 1}}, {
                    4, {2, 0, 0}}, {-7, {2, 0, 2}}}, {0, 3, 7, 0, 
                    0}, {{10, 0, 1}, {16, 1, 0, 1}, {40, 2, 3, 0, 1, 3, 0, 
                    3}, {19, 3, 4}, {10, 2, 3}, {13, 3, 0, 3}, {40, 1, 3, 0, 
                    1, 3, 0, 5}, {10, 1, 6}, {16, 6, 3, 5, 6}, {13, 4, 6, 
                    4}, {16, 2, 4, 6}, {1}}, 
                    Function[{Global`x}, 
                    
                    Block[{Compile`$167}, 
                    Compile`$167 = 4 Global`x; (-Cos[Compile`$167] - (
                    4 (-7 + Global`x)) Sin[Compile`$167])/16]], Evaluate][
                    Global`x] - CalculateScan`PlotterScanner`Private`py$})/((
                    Global`x - CalculateScan`PlotterScanner`Private`px$)^2 + (
                    CompiledFunction[{8, 8., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    6}}, {{0.0625, {3, 0, 2}}, {-4, {2, 0, 1}}, {
                    4, {2, 0, 0}}, {-7, {2, 0, 2}}}, {0, 3, 7, 0, 
                    0}, {{10, 0, 1}, {16, 1, 0, 1}, {40, 2, 3, 0, 1, 3, 0, 
                    3}, {19, 3, 4}, {10, 2, 3}, {13, 3, 0, 3}, {40, 1, 3, 0, 
                    1, 3, 0, 5}, {10, 1, 6}, {16, 6, 3, 5, 6}, {13, 4, 6, 
                    4}, {16, 2, 4, 6}, {1}}, 
                    Function[{Global`x}, 
                    
                    Block[{Compile`$167}, 
                    Compile`$167 = 4 Global`x; (-Cos[Compile`$167] - (
                    4 (-7 + Global`x)) Sin[Compile`$167])/16]], Evaluate][
                    Global`x] - 
                    CalculateScan`PlotterScanner`Private`py$)^2), {
                    Global`x, Min[CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$] - 
                    CalculateScan`PlotterScanner`Private`\[CapitalDelta]X$/2, 
                    Max[CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$] + 
                    CalculateScan`PlotterScanner`Private`\[CapitalDelta]X$/2},
                     PlotRange -> CalculateScan`PlotterScanner`Private`pRY$, 
                    Evaluated -> False]], {
                    CalculateScan`PlotterScanner`Private`px, 
                    CalculateScan`PlotterScanner`Private`xL$, 
                    CalculateScan`PlotterScanner`Private`xU$, (
                    CalculateScan`PlotterScanner`Private`xU$ - 
                    CalculateScan`PlotterScanner`Private`xL$)/
                    CalculateScan`PlotterScanner`Private`inverseCurveCount$}]]\
]], {}]; CalculateScan`PlotterScanner`Private`inverseLastParamaters$$ = {{
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$}, 
                    CalculateScan`PlotterScanner`Private`\
inverseCurveCountFactor$$, 
                    CalculateScan`PlotterScanner`Private`inverseCurvePoints$$,
                     CalculateScan`PlotterScanner`Private`\
inverseCurveCountFactor$$, 
                    CalculateScan`PlotterScanner`Private`\
inverseCurveCircleRadiusFactor$$}]; 
                    CalculateScan`PlotterScanner`Private`inverseCurvePlot = 
                    Graphics[{
                    Directive[
                    Opacity[
                    CalculateScan`PlotterScanner`Private`inverseCurveOpacity$$\
], CalculateScan`PlotterScanner`Private`inverseCurveColor$$, 
                    Thickness[
                    10^CalculateScan`PlotterScanner`Private`\
inverseCurveThickness$$]], 
                    If[
                    CalculateScan`PlotterScanner`Private`inverseCurveTF$$, 
                    
                    CalculateScan`PlotterScanner`Private`\
inverseCurvePlotCurves$$, {}]}]; If[
                    And[
                    CalculateScan`PlotterScanner`Private`orthotomicCurveTF$$, 
                    CalculateScan`PlotterScanner`Private`\
orthotomicLastParamaters$$ =!= {{
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$}, 
                    CalculateScan`PlotterScanner`Private`\
orthotomicCurveCountFactor$$, 
                    CalculateScan`PlotterScanner`Private`\
orthotomicCurvePoints$$}], 
                    If[CalculateScan`PlotterScanner`Private`orthotomicCurveTF$\
$, CalculateScan`PlotterScanner`Private`orthotomicCurvePlotCurves$$ = (Cases[
                    Normal[#], 
                    Blank[Line], {0, Infinity}]& )[
                    
                    With[{CalculateScan`PlotterScanner`Private`\
orthotomicCurveCount$ = 
                    If[CalculateScan`PlotterScanner`Private`\
orthotomicCurvePoints$$ === "grid", 
                    Max[1, 
                    Round[
                    16 CalculateScan`PlotterScanner`Private`\
orthotomicCurveCountFactor$$]], 
                    Max[1, 
                    Round[
                    120 CalculateScan`PlotterScanner`Private`\
orthotomicCurveCountFactor$$]]]}, 
                    If[
                    CalculateScan`PlotterScanner`Private`\
orthotomicCurvePoints$$ === "grid", 
                    Table[
                    
                    With[{CalculateScan`PlotterScanner`Private`px$ = 
                    CalculateScan`PlotterScanner`Private`px, 
                    CalculateScan`PlotterScanner`Private`py$ = 
                    CalculateScan`PlotterScanner`Private`py}, 
                    ParametricPlot[{Global`x, 
                    CompiledFunction[{8, 8., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    6}}, {{0.0625, {3, 0, 2}}, {-4, {2, 0, 1}}, {
                    4, {2, 0, 0}}, {-7, {2, 0, 2}}}, {0, 3, 7, 0, 
                    0}, {{10, 0, 1}, {16, 1, 0, 1}, {40, 2, 3, 0, 1, 3, 0, 
                    3}, {19, 3, 4}, {10, 2, 3}, {13, 3, 0, 3}, {40, 1, 3, 0, 
                    1, 3, 0, 5}, {10, 1, 6}, {16, 6, 3, 5, 6}, {13, 4, 6, 
                    4}, {16, 2, 4, 6}, {1}}, 
                    Function[{Global`x}, 
                    
                    Block[{Compile`$167}, 
                    Compile`$167 = 4 Global`x; (-Cos[Compile`$167] - (
                    4 (-7 + Global`x)) Sin[Compile`$167])/16]], Evaluate][
                    Global`x]} + {((-2) CompiledFunction[{8, 8., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    3}}, {{4, {2, 0, 1}}, {-7, {2, 0, 0}}}, {0, 2, 4, 0, 
                    0}, {{10, 0, 1}, {13, 1, 0, 1}, {10, 1, 2}, {16, 2, 0, 
                    2}, {40, 2, 3, 0, 2, 3, 0, 3}, {16, 1, 3, 1}, {19, 1, 
                    3}, {1}}, 
                    Function[{Global`x}, -((-7 + Global`x) Cos[4 Global`x])], 
                    Evaluate][Global`x]) (
                    1 (CompiledFunction[{8, 8., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    6}}, {{0.0625, {3, 0, 2}}, {-4, {2, 0, 1}}, {
                    4, {2, 0, 0}}, {-7, {2, 0, 2}}}, {0, 3, 7, 0, 
                    0}, {{10, 0, 1}, {16, 1, 0, 1}, {40, 2, 3, 0, 1, 3, 0, 
                    3}, {19, 3, 4}, {10, 2, 3}, {13, 3, 0, 3}, {40, 1, 3, 0, 
                    1, 3, 0, 5}, {10, 1, 6}, {16, 6, 3, 5, 6}, {13, 4, 6, 
                    4}, {16, 2, 4, 6}, {1}}, 
                    Function[{Global`x}, 
                    
                    Block[{Compile`$167}, Compile`$167 = 
                    4 Global`x; (-Cos[Compile`$167] - (4 (-7 + Global`x)) 
                    Sin[Compile`$167])/16]], Evaluate][Global`x] - 
                    CalculateScan`PlotterScanner`Private`py$) - 
                    CompiledFunction[{8, 8., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    3}}, {{4, {2, 0, 1}}, {-7, {2, 0, 0}}}, {0, 2, 4, 0, 
                    0}, {{10, 0, 1}, {13, 1, 0, 1}, {10, 1, 2}, {16, 2, 0, 
                    2}, {40, 2, 3, 0, 2, 3, 0, 3}, {16, 1, 3, 1}, {19, 1, 
                    3}, {1}}, 
                    Function[{Global`x}, -((-7 + Global`x) Cos[4 Global`x])], 
                    Evaluate][Global`x] (Global`x - 
                    CalculateScan`PlotterScanner`Private`px$)), (2 1) (
                    1 (CompiledFunction[{8, 8., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    6}}, {{0.0625, {3, 0, 2}}, {-4, {2, 0, 1}}, {
                    4, {2, 0, 0}}, {-7, {2, 0, 2}}}, {0, 3, 7, 0, 
                    0}, {{10, 0, 1}, {16, 1, 0, 1}, {40, 2, 3, 0, 1, 3, 0, 
                    3}, {19, 3, 4}, {10, 2, 3}, {13, 3, 0, 3}, {40, 1, 3, 0, 
                    1, 3, 0, 5}, {10, 1, 6}, {16, 6, 3, 5, 6}, {13, 4, 6, 
                    4}, {16, 2, 4, 6}, {1}}, 
                    Function[{Global`x}, 
                    
                    Block[{Compile`$167}, Compile`$167 = 
                    4 Global`x; (-Cos[Compile`$167] - (4 (-7 + Global`x)) 
                    Sin[Compile`$167])/16]], Evaluate][Global`x] - 
                    CalculateScan`PlotterScanner`Private`py$) - 
                    CompiledFunction[{8, 8., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    3}}, {{4, {2, 0, 1}}, {-7, {2, 0, 0}}}, {0, 2, 4, 0, 
                    0}, {{10, 0, 1}, {13, 1, 0, 1}, {10, 1, 2}, {16, 2, 0, 
                    2}, {40, 2, 3, 0, 2, 3, 0, 3}, {16, 1, 3, 1}, {19, 1, 
                    3}, {1}}, 
                    Function[{Global`x}, -((-7 + Global`x) Cos[4 Global`x])], 
                    Evaluate][Global`x] (Global`x - 
                    CalculateScan`PlotterScanner`Private`px$))}/(1 + 
                    CompiledFunction[{8, 8., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    3}}, {{4, {2, 0, 1}}, {-7, {2, 0, 0}}}, {0, 2, 4, 0, 
                    0}, {{10, 0, 1}, {13, 1, 0, 1}, {10, 1, 2}, {16, 2, 0, 
                    2}, {40, 2, 3, 0, 2, 3, 0, 3}, {16, 1, 3, 1}, {19, 1, 
                    3}, {1}}, 
                    Function[{Global`x}, -((-7 + Global`x) Cos[4 Global`x])], 
                    Evaluate][Global`x]^2), {
                    Global`x, CalculateScan`PlotterScanner`Private`xL$, 
                    CalculateScan`PlotterScanner`Private`xU$}, 
                    PlotRange -> {
                    CalculateScan`PlotterScanner`Private`pRX$, 
                    CalculateScan`PlotterScanner`Private`pRY$}, Evaluated -> 
                    False]], {CalculateScan`PlotterScanner`Private`px, 
                    CalculateScan`PlotterScanner`Private`xL$, 
                    CalculateScan`PlotterScanner`Private`xU$, (
                    CalculateScan`PlotterScanner`Private`xU$ - 
                    CalculateScan`PlotterScanner`Private`xL$)/
                    CalculateScan`PlotterScanner`Private`orthotomicCurveCount$\
}, {CalculateScan`PlotterScanner`Private`py, 
                    CalculateScan`PlotterScanner`Private`yL$, 
                    CalculateScan`PlotterScanner`Private`yU$, (
                    CalculateScan`PlotterScanner`Private`yU$ - 
                    CalculateScan`PlotterScanner`Private`yL$)/
                    CalculateScan`PlotterScanner`Private`orthotomicCurveCount$\
}], 
                    Table[
                    
                    With[{CalculateScan`PlotterScanner`Private`px$ = 
                    CalculateScan`PlotterScanner`Private`px, 
                    CalculateScan`PlotterScanner`Private`py$ = 
                    CompiledFunction[{8, 8., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    6}}, {{0.0625, {3, 0, 2}}, {-4, {2, 0, 1}}, {
                    4, {2, 0, 0}}, {-7, {2, 0, 2}}}, {0, 3, 7, 0, 
                    0}, {{10, 0, 1}, {16, 1, 0, 1}, {40, 2, 3, 0, 1, 3, 0, 
                    3}, {19, 3, 4}, {10, 2, 3}, {13, 3, 0, 3}, {40, 1, 3, 0, 
                    1, 3, 0, 5}, {10, 1, 6}, {16, 6, 3, 5, 6}, {13, 4, 6, 
                    4}, {16, 2, 4, 6}, {1}}, 
                    Function[{Global`x}, 
                    
                    Block[{Compile`$167}, 
                    Compile`$167 = 4 Global`x; (-Cos[Compile`$167] - (
                    4 (-7 + Global`x)) Sin[Compile`$167])/16]], Evaluate][
                    Global`x]}, 
                    ParametricPlot[{Global`x, 
                    CompiledFunction[{8, 8., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    6}}, {{0.0625, {3, 0, 2}}, {-4, {2, 0, 1}}, {
                    4, {2, 0, 0}}, {-7, {2, 0, 2}}}, {0, 3, 7, 0, 
                    0}, {{10, 0, 1}, {16, 1, 0, 1}, {40, 2, 3, 0, 1, 3, 0, 
                    3}, {19, 3, 4}, {10, 2, 3}, {13, 3, 0, 3}, {40, 1, 3, 0, 
                    1, 3, 0, 5}, {10, 1, 6}, {16, 6, 3, 5, 6}, {13, 4, 6, 
                    4}, {16, 2, 4, 6}, {1}}, 
                    Function[{Global`x}, 
                    
                    Block[{Compile`$167}, 
                    Compile`$167 = 4 Global`x; (-Cos[Compile`$167] - (
                    4 (-7 + Global`x)) Sin[Compile`$167])/16]], Evaluate][
                    Global`x]} + {((-2) CompiledFunction[{8, 8., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    3}}, {{4, {2, 0, 1}}, {-7, {2, 0, 0}}}, {0, 2, 4, 0, 
                    0}, {{10, 0, 1}, {13, 1, 0, 1}, {10, 1, 2}, {16, 2, 0, 
                    2}, {40, 2, 3, 0, 2, 3, 0, 3}, {16, 1, 3, 1}, {19, 1, 
                    3}, {1}}, 
                    Function[{Global`x}, -((-7 + Global`x) Cos[4 Global`x])], 
                    Evaluate][Global`x]) (
                    1 (CompiledFunction[{8, 8., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    6}}, {{0.0625, {3, 0, 2}}, {-4, {2, 0, 1}}, {
                    4, {2, 0, 0}}, {-7, {2, 0, 2}}}, {0, 3, 7, 0, 
                    0}, {{10, 0, 1}, {16, 1, 0, 1}, {40, 2, 3, 0, 1, 3, 0, 
                    3}, {19, 3, 4}, {10, 2, 3}, {13, 3, 0, 3}, {40, 1, 3, 0, 
                    1, 3, 0, 5}, {10, 1, 6}, {16, 6, 3, 5, 6}, {13, 4, 6, 
                    4}, {16, 2, 4, 6}, {1}}, 
                    Function[{Global`x}, 
                    
                    Block[{Compile`$167}, Compile`$167 = 
                    4 Global`x; (-Cos[Compile`$167] - (4 (-7 + Global`x)) 
                    Sin[Compile`$167])/16]], Evaluate][Global`x] - 
                    CalculateScan`PlotterScanner`Private`py$) - 
                    CompiledFunction[{8, 8., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    3}}, {{4, {2, 0, 1}}, {-7, {2, 0, 0}}}, {0, 2, 4, 0, 
                    0}, {{10, 0, 1}, {13, 1, 0, 1}, {10, 1, 2}, {16, 2, 0, 
                    2}, {40, 2, 3, 0, 2, 3, 0, 3}, {16, 1, 3, 1}, {19, 1, 
                    3}, {1}}, 
                    Function[{Global`x}, -((-7 + Global`x) Cos[4 Global`x])], 
                    Evaluate][Global`x] (Global`x - 
                    CalculateScan`PlotterScanner`Private`px$)), (2 1) (
                    1 (CompiledFunction[{8, 8., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    6}}, {{0.0625, {3, 0, 2}}, {-4, {2, 0, 1}}, {
                    4, {2, 0, 0}}, {-7, {2, 0, 2}}}, {0, 3, 7, 0, 
                    0}, {{10, 0, 1}, {16, 1, 0, 1}, {40, 2, 3, 0, 1, 3, 0, 
                    3}, {19, 3, 4}, {10, 2, 3}, {13, 3, 0, 3}, {40, 1, 3, 0, 
                    1, 3, 0, 5}, {10, 1, 6}, {16, 6, 3, 5, 6}, {13, 4, 6, 
                    4}, {16, 2, 4, 6}, {1}}, 
                    Function[{Global`x}, 
                    
                    Block[{Compile`$167}, Compile`$167 = 
                    4 Global`x; (-Cos[Compile`$167] - (4 (-7 + Global`x)) 
                    Sin[Compile`$167])/16]], Evaluate][Global`x] - 
                    CalculateScan`PlotterScanner`Private`py$) - 
                    CompiledFunction[{8, 8., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    3}}, {{4, {2, 0, 1}}, {-7, {2, 0, 0}}}, {0, 2, 4, 0, 
                    0}, {{10, 0, 1}, {13, 1, 0, 1}, {10, 1, 2}, {16, 2, 0, 
                    2}, {40, 2, 3, 0, 2, 3, 0, 3}, {16, 1, 3, 1}, {19, 1, 
                    3}, {1}}, 
                    Function[{Global`x}, -((-7 + Global`x) Cos[4 Global`x])], 
                    Evaluate][Global`x] (Global`x - 
                    CalculateScan`PlotterScanner`Private`px$))}/(1 + 
                    CompiledFunction[{8, 8., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    3}}, {{4, {2, 0, 1}}, {-7, {2, 0, 0}}}, {0, 2, 4, 0, 
                    0}, {{10, 0, 1}, {13, 1, 0, 1}, {10, 1, 2}, {16, 2, 0, 
                    2}, {40, 2, 3, 0, 2, 3, 0, 3}, {16, 1, 3, 1}, {19, 1, 
                    3}, {1}}, 
                    Function[{Global`x}, -((-7 + Global`x) Cos[4 Global`x])], 
                    Evaluate][Global`x]^2), {
                    Global`x, CalculateScan`PlotterScanner`Private`xL$, 
                    CalculateScan`PlotterScanner`Private`xU$}, 
                    PlotRange -> {
                    CalculateScan`PlotterScanner`Private`pRX$, 
                    CalculateScan`PlotterScanner`Private`pRY$}, Evaluated -> 
                    False]], {CalculateScan`PlotterScanner`Private`px, 
                    CalculateScan`PlotterScanner`Private`xL$, 
                    CalculateScan`PlotterScanner`Private`xU$, (
                    CalculateScan`PlotterScanner`Private`xU$ - 
                    CalculateScan`PlotterScanner`Private`xL$)/
                    CalculateScan`PlotterScanner`Private`orthotomicCurveCount$\
}]]]], {}]; 
                    CalculateScan`PlotterScanner`Private`\
orthotomicLastParamaters$$ = {{
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$}, 
                    CalculateScan`PlotterScanner`Private`\
orthotomicCurveCountFactor$$, 
                    CalculateScan`PlotterScanner`Private`\
orthotomicCurvePoints$$}]; 
                    CalculateScan`PlotterScanner`Private`orthotomicCurvePlot = 
                    Graphics[{
                    Directive[
                    CalculateScan`PlotterScanner`Private`orthotomicCurveColor$\
$, 
                    Opacity[
                    CalculateScan`PlotterScanner`Private`\
orthotomicCurveOpacity$$], 
                    Thickness[
                    10^CalculateScan`PlotterScanner`Private`\
orthotomicCurveThickness$$]], 
                    If[
                    CalculateScan`PlotterScanner`Private`orthotomicCurveTF$$, 
                    CalculateScan`PlotterScanner`Private`\
orthotomicCurvePlotCurves$$, {}]}]; 
                    CalculateScan`PlotterScanner`Private`getSplineSegments[
                    Line[
                    Pattern[CalculateScan`PlotterScanner`Private`l, 
                    Blank[]]]] := 
                    Module[{}, 
                    CalculateScan`PlotterScanner`Private`posis = 
                    Position[CalculateScan`PlotterScanner`Private`l, 
                    Except[{
                    Blank[Real], 
                    Blank[Real]}], {1}, Heads -> False]; 
                    If[CalculateScan`PlotterScanner`Private`posis === {}, 
                    BSplineCurve[CalculateScan`PlotterScanner`Private`l], 
                    Map[BSplineCurve, 
                    Select[
                    Map[DeleteCases[
                    Take[CalculateScan`PlotterScanner`Private`l, #], 
                    Except[{
                    Blank[Real], 
                    Blank[Real]}]]& , 
                    Partition[
                    Flatten[{1, 
                    
                    Map[{# - 1, # + 1}& , 
                    CalculateScan`PlotterScanner`Private`posis], 
                    Length[CalculateScan`PlotterScanner`Private`l]}], 2]], 
                    Length[#] >= 3& ]]]]; If[
                    And[
                    CalculateScan`PlotterScanner`Private`isopticCurveTF$$, 
                    CalculateScan`PlotterScanner`Private`\
isopticLastParamaters$$ =!= {{
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$}, 
                    CalculateScan`PlotterScanner`Private`isopticCurveAngle$$}]\
, CalculateScan`PlotterScanner`Private`isopticCurvePlotCurves$$ = Quiet[
                    If[
                    CalculateScan`PlotterScanner`Private`isopticCurveTF$$, 
                    
                    With[{CalculateScan`PlotterScanner`Private`\[Alpha]$ = 
                    CalculateScan`PlotterScanner`Private`isopticCurveAngle$$},
                     CalculateScan`PlotterScanner`Private`cpIsoptic = 
                    ContourPlot[(1 + CompiledFunction[{8, 8., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    3}}, {{4, {2, 0, 1}}, {-7, {2, 0, 0}}}, {0, 2, 4, 0, 
                    0}, {{10, 0, 1}, {13, 1, 0, 1}, {10, 1, 2}, {16, 2, 0, 
                    2}, {40, 2, 3, 0, 2, 3, 0, 3}, {16, 1, 3, 1}, {19, 1, 
                    3}, {1}}, 
                    Function[{Global`x}, -((-7 + Global`x) Cos[4 Global`x])], 
                    Evaluate][CalculateScan`PlotterScanner`Private`x1$$] 
                    CompiledFunction[{8, 8., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    3}}, {{4, {2, 0, 1}}, {-7, {2, 0, 0}}}, {0, 2, 4, 0, 
                    0}, {{10, 0, 1}, {13, 1, 0, 1}, {10, 1, 2}, {16, 2, 0, 
                    2}, {40, 2, 3, 0, 2, 3, 0, 3}, {16, 1, 3, 1}, {19, 1, 
                    3}, {1}}, 
                    Function[{Global`x}, -((-7 + Global`x) Cos[4 Global`x])], 
                    Evaluate][CalculateScan`PlotterScanner`Private`x2$$])/
                    Sqrt[(1 + CompiledFunction[{8, 8., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    3}}, {{4, {2, 0, 1}}, {-7, {2, 0, 0}}}, {0, 2, 4, 0, 
                    0}, {{10, 0, 1}, {13, 1, 0, 1}, {10, 1, 2}, {16, 2, 0, 
                    2}, {40, 2, 3, 0, 2, 3, 0, 3}, {16, 1, 3, 1}, {19, 1, 
                    3}, {1}}, 
                    Function[{Global`x}, -((-7 + Global`x) Cos[4 Global`x])], 
                    Evaluate][CalculateScan`PlotterScanner`Private`x1$$]^2) (
                    1 + CompiledFunction[{8, 8., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    3}}, {{4, {2, 0, 1}}, {-7, {2, 0, 0}}}, {0, 2, 4, 0, 
                    0}, {{10, 0, 1}, {13, 1, 0, 1}, {10, 1, 2}, {16, 2, 0, 
                    2}, {40, 2, 3, 0, 2, 3, 0, 3}, {16, 1, 3, 1}, {19, 1, 
                    3}, {1}}, 
                    Function[{Global`x}, -((-7 + Global`x) Cos[4 Global`x])], 
                    Evaluate][CalculateScan`PlotterScanner`Private`x2$$]^2)] == 
                    Cos[CalculateScan`PlotterScanner`Private`\[Alpha]$], {
                    CalculateScan`PlotterScanner`Private`x1$$, (-2) Pi, 2 
                    Pi}, {CalculateScan`PlotterScanner`Private`x2$$, (-2) Pi, 
                    2 Pi}, Exclusions -> {
                    Function[{Global`x}, -((-7 + Global`x) Cos[4 Global`x])][
                    CalculateScan`PlotterScanner`Private`x1$$] - 
                    Function[{Global`x}, -((-7 + Global`x) Cos[4 Global`x])][
                    CalculateScan`PlotterScanner`Private`x2$$] == 0}, 
                    Evaluated -> False]; 
                    CalculateScan`PlotterScanner`Private`x1x2SCPCurves = Cases[
                    Normal[CalculateScan`PlotterScanner`Private`cpIsoptic], 
                    Blank[Line], Infinity]; 
                    If[
                    CalculateScan`PlotterScanner`Private`x1x2SCPCurves === \
{}, {}, 
                    Map[
                    CalculateScan`PlotterScanner`Private`getSplineSegments, 
                    Map[
                    CalculateScan`PlotterScanner`Private`\
tangentIntersectionPoint[#, {
                    CompiledFunction[{8, 8., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    6}}, {{0.0625, {3, 0, 2}}, {-4, {2, 0, 1}}, {
                    4, {2, 0, 0}}, {-7, {2, 0, 2}}}, {0, 3, 7, 0, 
                    0}, {{10, 0, 1}, {16, 1, 0, 1}, {40, 2, 3, 0, 1, 3, 0, 
                    3}, {19, 3, 4}, {10, 2, 3}, {13, 3, 0, 3}, {40, 1, 3, 0, 
                    1, 3, 0, 5}, {10, 1, 6}, {16, 6, 3, 5, 6}, {13, 4, 6, 
                    4}, {16, 2, 4, 6}, {1}}, 
                    Function[{Global`x}, 
                    
                    Block[{Compile`$167}, 
                    Compile`$167 = 4 Global`x; (-Cos[Compile`$167] - (
                    4 (-7 + Global`x)) Sin[Compile`$167])/16]], Evaluate], 
                    CompiledFunction[{8, 8., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    3}}, {{4, {2, 0, 1}}, {-7, {2, 0, 0}}}, {0, 2, 4, 0, 
                    0}, {{10, 0, 1}, {13, 1, 0, 1}, {10, 1, 2}, {16, 2, 0, 
                    2}, {40, 2, 3, 0, 2, 3, 0, 3}, {16, 1, 3, 1}, {19, 1, 
                    3}, {1}}, 
                    Function[{Global`x}, -((-7 + Global`x) Cos[4 Global`x])], 
                    Evaluate]}]& , 
                    CalculateScan`PlotterScanner`Private`x1x2SCPCurves, \
{-2}]]]], {}]]; 
                    CalculateScan`PlotterScanner`Private`\
isopticLastParamaters$$ =!= {{
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$}, 
                    CalculateScan`PlotterScanner`Private`isopticCurveAngle$$}]\
; CalculateScan`PlotterScanner`Private`isopticCurvePlot = Graphics[{
                    Directive[
                    CalculateScan`PlotterScanner`Private`isopticCurveColor$$, 
                    
                    Opacity[
                    CalculateScan`PlotterScanner`Private`isopticCurveOpacity$$\
], 
                    Thickness[
                    10^CalculateScan`PlotterScanner`Private`\
isopticCurveThickness$$]], 
                    If[
                    CalculateScan`PlotterScanner`Private`isopticCurveTF$$, 
                    
                    CalculateScan`PlotterScanner`Private`\
isopticCurvePlotCurves$$, {}]}]; 
                    CalculateScan`PlotterScanner`Private`annotatedPlotList = {
                    "tangentLinePlot" -> 
                    CalculateScan`PlotterScanner`Private`tangentLinePlot$, 
                    "normalLinePlot" -> 
                    CalculateScan`PlotterScanner`Private`normalLinePlot$, 
                    "tiltedTangentLinePlot" -> 
                    CalculateScan`PlotterScanner`Private`\
tiltedTangentLinePlot$, "osculatingCirclePlot" -> 
                    CalculateScan`PlotterScanner`Private`osculatingCirclePlot$\
, "taylorParabolaPlot" -> 
                    CalculateScan`PlotterScanner`Private`taylorParabolaPlot$, 
                    "involutePlot" -> 
                    CalculateScan`PlotterScanner`Private`involutePlot$, 
                    "evolutePlot" -> 
                    CalculateScan`PlotterScanner`Private`evolutePlot$, 
                    "dualCurvePlot" -> 
                    CalculateScan`PlotterScanner`Private`dualCurvePlot, 
                    "offsetCurvePlot" -> 
                    CalculateScan`PlotterScanner`Private`offsetCurvePlot, 
                    "tiltedOffsetCurvePlot" -> 
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurvePlot, "pedalCurvePlot" -> 
                    CalculateScan`PlotterScanner`Private`pedalCurvePlot, 
                    "negativePedalCurvePlot" -> 
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurvePlot, "contraPedalCurvePlot" -> 
                    CalculateScan`PlotterScanner`Private`contraPedalCurvePlot,
                     "inverseCurvePlot" -> 
                    CalculateScan`PlotterScanner`Private`inverseCurvePlot, 
                    "isopticCurvePlot" -> 
                    CalculateScan`PlotterScanner`Private`isopticCurvePlot, 
                    "orthotomicCurvePlot" -> 
                    CalculateScan`PlotterScanner`Private`orthotomicCurvePlot, 
                    "originalCurvePlot" -> 
                    CalculateScan`PlotterScanner`Private`originalCurvePlot$}; 
                    CalculateScan`PlotterScanner`Private`labelGrid = (
                    DeleteCases[#, {}]& )[{
                    If[
                    TrueQ[True], {
                    RawBoxes[
                    FormBox[
                    RowBox[{
                    FractionBox["1", "16"], " ", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"-", 
                    RowBox[{"4", " ", 
                    RowBox[{"(", 
                    RowBox[{"x", "-", "7"}], ")"}], " ", 
                    RowBox[{"sin", "(", 
                    RowBox[{"4", " ", "x"}], ")"}]}]}], "-", 
                    RowBox[{"cos", "(", 
                    RowBox[{"4", " ", "x"}], ")"}]}], ")"}]}], 
                    TraditionalForm]], 
                    Style["\[LongDash]", Bold, Black]}, {}], 
                    If[
                    TrueQ[CalculateScan`PlotterScanner`Private`tangentTF$$], {
                    "tangents", 
                    Style[
                    "\[LongDash]", Bold, 
                    CalculateScan`PlotterScanner`Private`tangentColor$$]}, \
{}], 
                    If[
                    TrueQ[CalculateScan`PlotterScanner`Private`normalTF$$], {
                    "normals", 
                    Style[
                    "\[LongDash]", Bold, 
                    CalculateScan`PlotterScanner`Private`normalColor$$]}, {}], 
                    If[
                    TrueQ[
                    CalculateScan`PlotterScanner`Private`tiltedTangentTF$$], {
                    "tilted tangents", 
                    Style[
                    "\[LongDash]", Bold, 
                    CalculateScan`PlotterScanner`Private`tiltedTangentColor$$]\
}, {}], 
                    If[
                    TrueQ[
                    CalculateScan`PlotterScanner`Private`osculatingCircleTF$$]\
, {"osculating circles", 
                    Style[
                    "\[LongDash]", Bold, 
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleColor$$]}, {}], 
                    If[
                    TrueQ[
                    CalculateScan`PlotterScanner`Private`taylorParabolaTF$$], \
{"Taylor parabolas", 
                    Style[
                    "\[LongDash]", Bold, 
                    CalculateScan`PlotterScanner`Private`taylorParabolaColor$$\
]}, {}], 
                    If[
                    TrueQ[
                    CalculateScan`PlotterScanner`Private`involuteTF$$], {
                    "involutes", 
                    Style[
                    "\[LongDash]", Bold, 
                    CalculateScan`PlotterScanner`Private`involuteColor$$]}, \
{}], 
                    If[
                    TrueQ[CalculateScan`PlotterScanner`Private`evoluteTF$$], {
                    "evolute", 
                    Style[
                    "\[LongDash]", Bold, 
                    CalculateScan`PlotterScanner`Private`evoluteColor$$]}, \
{}], 
                    If[
                    TrueQ[
                    CalculateScan`PlotterScanner`Private`offsetCurveTF$$], {
                    "offset curves", 
                    Style[
                    "\[LongDash]", Bold, 
                    CalculateScan`PlotterScanner`Private`offsetCurveColor$$]},\
 {}], 
                    If[
                    TrueQ[
                    CalculateScan`PlotterScanner`Private`tiltedOffsetCurveTF$$\
], {"tilted offset curves", 
                    Style[
                    "\[LongDash]", Bold, 
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveColor$$]}, {}], 
                    If[
                    TrueQ[
                    CalculateScan`PlotterScanner`Private`negativePedalCurveTF$\
$], {"contrapedal curves", 
                    Style[
                    "\[LongDash]", Bold, 
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurveColor$$]}, {}], 
                    If[
                    TrueQ[
                    CalculateScan`PlotterScanner`Private`contraPedalCurveTF$$]\
, {"normals", 
                    Style[
                    "\[LongDash]", Bold, 
                    CalculateScan`PlotterScanner`Private`tiltedTangentColor$$]\
}, {}], 
                    If[
                    TrueQ[
                    CalculateScan`PlotterScanner`Private`dualCurveTF$$], {
                    "dual curves", 
                    Style[
                    "\[LongDash]", Bold, 
                    CalculateScan`PlotterScanner`Private`dualCurveColor$$]}, \
{}], 
                    If[
                    TrueQ[
                    CalculateScan`PlotterScanner`Private`inverseCurveTF$$], {
                    "inverse curves", 
                    Style[
                    "\[LongDash]", Bold, 
                    CalculateScan`PlotterScanner`Private`inverseCurveColor$$]}\
, {}], 
                    If[
                    TrueQ[
                    CalculateScan`PlotterScanner`Private`isopticCurveTF$$], {
                    "isoptic curves", 
                    Style[
                    "\[LongDash]", Bold, 
                    CalculateScan`PlotterScanner`Private`isopticCurveColor$$]}\
, {}], 
                    If[
                    TrueQ[
                    CalculateScan`PlotterScanner`Private`orthotomicCurveTF$$],\
 {"orthotomic curves", 
                    Style[
                    "\[LongDash]", Bold, 
                    CalculateScan`PlotterScanner`Private`orthotomicCurveColor$\
$]}, {}]}]; Column[{
                    Show[
                    Map[
                    Last, CalculateScan`PlotterScanner`Private`\
annotatedPlotList], PlotRange -> {
                    CalculateScan`PlotterScanner`Private`pRX$, 
                    CalculateScan`PlotterScanner`Private`pRY$}, ImageSize -> 
                    300, ImagePadding -> 5, AspectRatio -> 
                    CalculateScan`PlotterScanner`Private`ar$$, 
                    If[CalculateScan`PlotterScanner`Private`sa$$, 
                    Apply[
                    Sequence, {
                    Axes -> True, AxesOrigin -> {0, 0}, AxesStyle -> 
                    Lighter[Gray]}], 
                    Apply[Sequence, {}]], 
                    If[CalculateScan`PlotterScanner`Private`st$$, 
                    Apply[Sequence, {Ticks -> Automatic}], 
                    Apply[Sequence, {Ticks -> None}]]], 
                    Grid[{
                    Map[Grid[
                    Map[Reverse, #], Alignment -> Left]& , 
                    
                    With[{CalculateScan`PlotterScanner`Private`\[Lambda]T = 
                    Max[
                    Floor[
                    Length[CalculateScan`PlotterScanner`Private`labelGrid]/2],
                     1]}, 
                    Partition[
                    CalculateScan`PlotterScanner`Private`labelGrid, 
                    CalculateScan`PlotterScanner`Private`\[Lambda]T, 
                    CalculateScan`PlotterScanner`Private`\[Lambda]T, 
                    1, {}]]]}, Dividers -> {False, False}, 
                    Spacings -> {4, Automatic}]}]]], 
                  "Specifications" :> {{
                    CalculateUtilities`GraphicsUtilities`Private`more$$, {
                    False, True}, ControlType -> None}, {{
                    CalculateScan`PlotterScanner`Private`x1$$, \
-0.7853981633974483, 
                    Subscript[
                    Style["x", Italic], "min"]}, -1.5393804002589986`, 
                    1.5393804002589986`, ImageSize -> Small, ControlPlacement -> 
                    1}, {{CalculateScan`PlotterScanner`Private`x2$$, 
                    0.7853981633974483, 
                    Subscript[
                    Style["x", Italic], "max"]}, -1.5393804002589986`, 
                    1.5393804002589986`, ImageSize -> Small, ControlPlacement -> 
                    2}, {{CalculateScan`PlotterScanner`Private`symmxQ$$, 
                    False, "symmetric"}, {True, False}, ControlPlacement -> 
                    3}, {{CalculateScan`PlotterScanner`Private`fy1$$, 
                    0.982793723247329, 
                    Subscript["y", "min"]}, 0, 1.5393804002589986`, ImageSize -> 
                    Small, ControlPlacement -> 4}, {{
                    CalculateScan`PlotterScanner`Private`fy2$$, 
                    0.982793723247329, 
                    Subscript["y", "max"]}, 0, 1.5393804002589986`, ImageSize -> 
                    Small, ControlPlacement -> 5}, {{
                    CalculateScan`PlotterScanner`Private`symmyQ$$, True, 
                    "symmetric"}, {True, False}, ControlPlacement -> 6}, {{
                    CalculateScan`PlotterScanner`Private`sqPRQ$$, False, 
                    Dynamic[
                    Style["same as horizontal-range", 
                    If[
                    CalculateScan`PlotterScanner`Private`symmxQ$$, Black, 
                    Gray]]]}, {True, False}, ImageSize -> Small, 
                    ControlPlacement -> 7}, {{
                    CalculateScan`PlotterScanner`Private`sa$$, False, 
                    "show axes"}, {True, False}, ImageSize -> Small, 
                    ControlPlacement -> 8}, {{
                    CalculateScan`PlotterScanner`Private`st$$, False, 
                    Dynamic[
                    Style["show ticks", 
                    If[
                    CalculateScan`PlotterScanner`Private`sa$$ === True, Black,
                     Gray]]]}, {True, False}, ImageSize -> Small, 
                    ControlPlacement -> 9}, {{
                    CalculateScan`PlotterScanner`Private`ar$$, 1, 
                    "aspect ratio"}, 
                    Rational[1, 4], 4, ImageSize -> Small, ControlPlacement -> 
                    10}, {{CalculateScan`PlotterScanner`Private`tangentTF$$, 
                    False, ""}, {True, False}, ControlPlacement -> 11}, {{
                    CalculateScan`PlotterScanner`Private`tangentCount$$, 60, 
                    ""}, 2, 360, 1, ImageSize -> Small, ControlPlacement -> 
                    12}, {{CalculateScan`PlotterScanner`Private`tangentLength$\
$, 0.24934835901117428`, ""}, 0, 1.5393804002589986`, ImageSize -> Small, 
                    ControlPlacement -> 13}, {{
                    CalculateScan`PlotterScanner`Private`tangentThickness$$, \
-3., ""}, -4, -0.5, ImageSize -> Small, ControlPlacement -> 14}, {{
                    CalculateScan`PlotterScanner`Private`tangentColor$$, 
                    RGBColor[0.237736, 0.340215, 0.575113], ""}, 
                    RGBColor[1, 0, 0], ImageSize -> Tiny, AppearanceElements -> 
                    "Spectrum", ControlPlacement -> 15}, {{
                    CalculateScan`PlotterScanner`Private`tangentOpacity$$, 
                    0.8, ""}, 0, 1, ImageSize -> Small, ControlPlacement -> 
                    16}, {{CalculateScan`PlotterScanner`Private`normalTF$$, 
                    True, ""}, {True, False}, ControlPlacement -> 17}, {{
                    CalculateScan`PlotterScanner`Private`normalCount$$, 120, 
                    ""}, 2, 360, 1, ImageSize -> Small, ControlPlacement -> 
                    18}, {{CalculateScan`PlotterScanner`Private`normalLength$$\
, 0.24934835901117428`, ""}, 0, 1.5393804002589986`, ImageSize -> Small, 
                    ControlPlacement -> 19}, {{
                    CalculateScan`PlotterScanner`Private`normalThickness$$, \
-3., ""}, -4, -0.5, ImageSize -> Small, ControlPlacement -> 20}, {{
                    CalculateScan`PlotterScanner`Private`normalColor$$, 
                    RGBColor[0.237, 0.34, 0.575], ""}, 
                    RGBColor[1, 0, 0], ImageSize -> Tiny, AppearanceElements -> 
                    "Spectrum", ControlPlacement -> 21}, {{
                    CalculateScan`PlotterScanner`Private`normalOpacity$$, 0.8,
                     ""}, 0, 1, ImageSize -> Small, ControlPlacement -> 
                    22}, {{CalculateScan`PlotterScanner`Private`\
tiltedTangentTF$$, False, ""}, {True, False}, ControlPlacement -> 23}, {{
                    CalculateScan`PlotterScanner`Private`tiltedTangentAngle$$,
                     Rational[1, 4] Pi, ""}, -Pi, Pi, ImageSize -> Small, 
                    ControlPlacement -> 24}, {{
                    CalculateScan`PlotterScanner`Private`tiltedTangentCount$$,
                     60, ""}, 2, 360, 1, ImageSize -> Small, ControlPlacement -> 
                    25}, {{CalculateScan`PlotterScanner`Private`\
tiltedTangentLength$$, 0.24934835901117428`, ""}, 0, 1.5393804002589986`, 
                    ImageSize -> Small, ControlPlacement -> 26}, {{
                    CalculateScan`PlotterScanner`Private`\
tiltedTangentThickness$$, -3., ""}, -4, -0.5, ImageSize -> Small, 
                    ControlPlacement -> 27}, {{
                    CalculateScan`PlotterScanner`Private`tiltedTangentColor$$, 
                    RGBColor[
                    0.2622702, 0.40739780000000003`, 0.41955020000000004`], 
                    ""}, 
                    RGBColor[1, 0, 0], ImageSize -> Tiny, AppearanceElements -> 
                    "Spectrum", ControlPlacement -> 28}, {{
                    CalculateScan`PlotterScanner`Private`tiltedTangentOpacity$\
$, 0.8, ""}, 0, 1, ImageSize -> Small, ControlPlacement -> 29}, {{
                    CalculateScan`PlotterScanner`Private`osculatingCircleTF$$,
                     False, ""}, {True, False}, ControlPlacement -> 30}, {{
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleCount$$, 60, ""}, 2, 360, 1, ImageSize -> Small, 
                    ControlPlacement -> 31}, {{
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleThickness$$, -3., ""}, -4, -0.5, ImageSize -> Small, 
                    ControlPlacement -> 32}, {{
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleColor$$, 
                    RGBColor[0.2752426, 0.4446824, 0.33950440000000004`], ""}, 
                    RGBColor[1, 0, 0], ImageSize -> Tiny, AppearanceElements -> 
                    "Spectrum", ControlPlacement -> 33}, {{
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleOpacity$$, 0.8, ""}, 0, 1, ImageSize -> Small, 
                    ControlPlacement -> 34}, {{
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleRadiiTF$$, False, ""}, {True, False}, ImageSize -> Small, 
                    ControlPlacement -> 35}, {{
                    CalculateScan`PlotterScanner`Private`taylorParabolaTF$$, 
                    False, ""}, {True, False}, ControlPlacement -> 36}, {{
                    CalculateScan`PlotterScanner`Private`taylorParabolaCount$$\
, 36, ""}, 2, 120, 1, ImageSize -> Small, ControlPlacement -> 37}, {{
                    CalculateScan`PlotterScanner`Private`\
taylorParabolaThickness$$, -3., ""}, -4, -0.5, ImageSize -> Small, 
                    ControlPlacement -> 38}, {{
                    CalculateScan`PlotterScanner`Private`taylorParabolaColor$$\
, 
                    RGBColor[0.7189495000000001, 0.719797, 0.283877], ""}, 
                    RGBColor[1, 0, 0], ImageSize -> Tiny, AppearanceElements -> 
                    "Spectrum", ControlPlacement -> 39}, {{
                    CalculateScan`PlotterScanner`Private`\
taylorParabolaOpacity$$, 0.8, ""}, 0, 1, ImageSize -> Small, ControlPlacement -> 
                    40}, {{CalculateScan`PlotterScanner`Private`involuteTF$$, 
                    False, ""}, {True, False}, ControlPlacement -> 41}, {{
                    CalculateScan`PlotterScanner`Private`involuteCount$$, 60, 
                    ""}, 1, 120, 1, ImageSize -> Small, ControlPlacement -> 
                    42}, {{CalculateScan`PlotterScanner`Private`\
involuteThickness$$, -3., ""}, -4, -0.5, ImageSize -> Small, ControlPlacement -> 
                    43}, {{CalculateScan`PlotterScanner`Private`involuteColor$\
$, 
                    RGBColor[0.49978279999999997`, 0.6025278, 0.2508104], ""}, 
                    RGBColor[1, 0, 0], ImageSize -> Tiny, AppearanceElements -> 
                    "Spectrum", ControlPlacement -> 44}, {{
                    CalculateScan`PlotterScanner`Private`involuteOpacity$$, 
                    0.8, ""}, 0, 1, ImageSize -> Small, ControlPlacement -> 
                    45}, {{CalculateScan`PlotterScanner`Private`\
involutesLeftTF$$, False, ""}, {True, False}, ControlPlacement -> 46}, {{
                    CalculateScan`PlotterScanner`Private`involutesRightTF$$, 
                    True, ""}, {True, False}, ControlPlacement -> 47}, {{
                    CalculateScan`PlotterScanner`Private`evoluteTF$$, False, 
                    ""}, {True, False}, ControlPlacement -> 48}, {{
                    CalculateScan`PlotterScanner`Private`evoluteThickness$$, \
-3., ""}, -4, -0.5, ImageSize -> Small, ControlPlacement -> 49}, {{
                    CalculateScan`PlotterScanner`Private`evoluteColor$$, 
                    RGBColor[0.813033, 0.766292, 0.303458], ""}, 
                    RGBColor[1, 0, 0], ImageSize -> Tiny, AppearanceElements -> 
                    "Spectrum", ControlPlacement -> 50}, {{
                    CalculateScan`PlotterScanner`Private`evoluteOpacity$$, 
                    0.8, ""}, 0, 1, ImageSize -> Small, ControlPlacement -> 
                    51}, {{CalculateScan`PlotterScanner`Private`offsetCurveTF$\
$, False, ""}, {True, False}, ControlPlacement -> 52}, {{
                    CalculateScan`PlotterScanner`Private`offsetCurveDistance$$\
, 0.24934835901117428`, ""}, 0, 1.5393804002589986`, ImageSize -> Small, 
                    ControlPlacement -> 53}, {{
                    CalculateScan`PlotterScanner`Private`offsetCurveCount$$, 
                    12, ""}, 1, 60, 1, ImageSize -> Small, ControlPlacement -> 
                    54}, {{CalculateScan`PlotterScanner`Private`\
offsetCurveThickness$$, -3., ""}, -4, -0.5, ImageSize -> Small, 
                    ControlPlacement -> 55}, {{
                    CalculateScan`PlotterScanner`Private`offsetCurveColor$$, 
                    RGBColor[0.877875, 0.731045, 0.326896], ""}, 
                    RGBColor[1, 0, 0], ImageSize -> Tiny, AppearanceElements -> 
                    "Spectrum", ControlPlacement -> 56}, {{
                    CalculateScan`PlotterScanner`Private`offsetCurveOpacity$$,
                     0.8, ""}, 0, 1, ImageSize -> Small, ControlPlacement -> 
                    57}, {{CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveTF$$, False, ""}, {True, False}, ControlPlacement -> 58}, {{
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveAngle$$, Rational[1, 4] Pi, ""}, -Pi, Pi, ImageSize -> Small,
                     ControlPlacement -> 59}, {{
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveDistance$$, 0.24934835901117428`, ""}, 0, 
                    1.5393804002589986`, ImageSize -> Small, ControlPlacement -> 
                    60}, {{CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveCount$$, 12, ""}, 1, 60, 1, ImageSize -> Small, 
                    ControlPlacement -> 61}, {{
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveThickness$$, -3., ""}, -4, -0.5, ImageSize -> Small, 
                    ControlPlacement -> 62}, {{
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveColor$$, 
                    RGBColor[0.49978279999999997`, 0.6025278, 0.2508104], ""}, 
                    RGBColor[1, 0, 0], ImageSize -> Tiny, AppearanceElements -> 
                    "Spectrum", ControlPlacement -> 63}, {{
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveOpacity$$, 0.8, ""}, 0, 1, ImageSize -> Small, 
                    ControlPlacement -> 64}, {{
                    CalculateScan`PlotterScanner`Private`pedalCurveTF$$, 
                    False, ""}, {True, False}, ControlPlacement -> 65}, {{
                    CalculateScan`PlotterScanner`Private`\
pedalCurveCountFactor$$, 0.3, ""}, 0, 1, ImageSize -> Small, ControlPlacement -> 
                    66}, {{CalculateScan`PlotterScanner`Private`\
pedalCurveThickness$$, -3., ""}, -4, -0.5, ImageSize -> Small, 
                    ControlPlacement -> 67}, {{
                    CalculateScan`PlotterScanner`Private`pedalCurveColor$$, 
                    RGBColor[0.32894650000000003`, 0.5006225, 0.2625337], ""}, 
                    RGBColor[1, 0, 0], ImageSize -> Tiny, AppearanceElements -> 
                    "Spectrum", ControlPlacement -> 68}, {{
                    CalculateScan`PlotterScanner`Private`pedalCurveOpacity$$, 
                    0.8, ""}, 0, 1, ImageSize -> Small, ControlPlacement -> 
                    69}, {{CalculateScan`PlotterScanner`Private`\
pedalCurvePoints$$, "curve", ""}, {"grid", "curve"}, ImageSize -> Small, 
                    ControlPlacement -> 70}, {{
                    CalculateScan`PlotterScanner`Private`negativePedalCurveTF$\
$, False, ""}, {True, False}, ControlPlacement -> 71}, {{
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurveCountFactor$$, 0.3, ""}, 0, 1, ImageSize -> Small, 
                    ControlPlacement -> 72}, {{
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurveThickness$$, -3., ""}, -4, -0.5, ImageSize -> Small, 
                    ControlPlacement -> 73}, {{
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurveColor$$, 
                    RGBColor[0.7464574, 0.2952580000000001, 0.2454606], ""}, 
                    RGBColor[1, 0, 0], ImageSize -> Tiny, AppearanceElements -> 
                    "Spectrum", ControlPlacement -> 74}, {{
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurveOpacity$$, 0.8, ""}, 0, 1, ImageSize -> Small, 
                    ControlPlacement -> 75}, {{
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurvePoints$$, "curve", ""}, {"curve", "grid"}, ImageSize -> 
                    Small, ControlPlacement -> 76}, {{
                    CalculateScan`PlotterScanner`Private`contraPedalCurveTF$$,
                     False, ""}, {True, False}, ControlPlacement -> 77}, {{
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurveCountFactor$$, 0.3, ""}, 0, 1, ImageSize -> Small, 
                    ControlPlacement -> 78}, {{
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurveThickness$$, -3., ""}, -4, -0.5, ImageSize -> Small, 
                    ControlPlacement -> 79}, {{
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurveColor$$, 
                    RGBColor[0.7464574, 0.2952580000000001, 0.2454606], ""}, 
                    RGBColor[1, 0, 0], ImageSize -> Tiny, AppearanceElements -> 
                    "Spectrum", ControlPlacement -> 80}, {{
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurveOpacity$$, 0.8, ""}, 0, 1, ImageSize -> Small, 
                    ControlPlacement -> 81}, {{
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurvePoints$$, "curve", ""}, {"curve", "grid"}, ImageSize -> Small,
                     ControlPlacement -> 82}, {{
                    CalculateScan`PlotterScanner`Private`dualCurveTF$$, False,
                     ""}, {True, False}, ControlPlacement -> 83}, {{
                    CalculateScan`PlotterScanner`Private`dualCurveCountFactor$\
$, 0.3, ""}, 0, 1, ImageSize -> Small, ControlPlacement -> 84}, {{
                    CalculateScan`PlotterScanner`Private`dualCurveThickness$$,\
 -3., ""}, -4, -0.5, ImageSize -> Small, ControlPlacement -> 85}, {{
                    CalculateScan`PlotterScanner`Private`dualCurveColor$$, 
                    RGBColor[0.2860602, 0.4663408, 0.29410879999999995`], ""}, 
                    RGBColor[1, 0, 0], ImageSize -> Tiny, AppearanceElements -> 
                    "Spectrum", ControlPlacement -> 86}, {{
                    CalculateScan`PlotterScanner`Private`dualCurveOpacity$$, 
                    0.8, ""}, 0, 1, ImageSize -> Small, ControlPlacement -> 
                    87}, {{CalculateScan`PlotterScanner`Private`\
dualPedalCurvePoints$$, "curve", ""}, {"curve", "grid"}, ImageSize -> Small, 
                    ControlPlacement -> 88}, {{
                    CalculateScan`PlotterScanner`Private`inverseCurveTF$$, 
                    False, ""}, {True, False}, ControlPlacement -> 89}, {{
                    CalculateScan`PlotterScanner`Private`\
inverseCurveCountFactor$$, 0.3, ""}, 0, 1, ImageSize -> Small, 
                    ControlPlacement -> 90}, {{
                    CalculateScan`PlotterScanner`Private`\
inverseCurveThickness$$, -3., ""}, -4, -0.5, ImageSize -> Small, 
                    ControlPlacement -> 91}, {{
                    CalculateScan`PlotterScanner`Private`inverseCurveColor$$, 
                    
                    RGBColor[0.2860602, 0.4663408, 0.29410879999999995`], ""}, 
                    RGBColor[1, 0, 0], ImageSize -> Tiny, AppearanceElements -> 
                    "Spectrum", ControlPlacement -> 92}, {{
                    CalculateScan`PlotterScanner`Private`inverseCurveOpacity$$\
, 0.8, ""}, 0, 1, ImageSize -> Small, ControlPlacement -> 93}, {{
                    CalculateScan`PlotterScanner`Private`inverseCurvePoints$$,
                     "grid", ""}, {"curve", "grid"}, ImageSize -> Small, 
                    ControlPlacement -> 94}, {{
                    CalculateScan`PlotterScanner`Private`\
inverseCurveCircleRadiusFactor$$, 0.4636476090008061, ""}, 0, 1, ImageSize -> 
                    Small, ControlPlacement -> 95}, {{
                    CalculateScan`PlotterScanner`Private`isopticCurveTF$$, 
                    False, ""}, {True, False}, ControlPlacement -> 96}, {{
                    CalculateScan`PlotterScanner`Private`isopticCurveAngle$$, 
                    Rational[1, 3] Pi, ""}, 0, Pi, ImageSize -> Small, 
                    ControlPlacement -> 97}, {{
                    CalculateScan`PlotterScanner`Private`\
isopticCurveThickness$$, -3., ""}, -4, -0.5, ImageSize -> Small, 
                    ControlPlacement -> 98}, {{
                    CalculateScan`PlotterScanner`Private`isopticCurveColor$$, 
                    
                    RGBColor[
                    0.8519382, 0.7451437999999999, 0.31752080000000005`], ""}, 
                    RGBColor[1, 0, 0], ImageSize -> Tiny, AppearanceElements -> 
                    "Spectrum", ControlPlacement -> 99}, {{
                    CalculateScan`PlotterScanner`Private`isopticCurveOpacity$$\
, 0.8, ""}, 0, 1, ImageSize -> Small, ControlPlacement -> 100}, {{
                    CalculateScan`PlotterScanner`Private`orthotomicCurveTF$$, 
                    False, ""}, {True, False}, ControlPlacement -> 101}, {{
                    CalculateScan`PlotterScanner`Private`orthotomicCurveAngle$\
$, Rational[1, 3] Pi, ""}, 0, Pi, ImageSize -> Small, ControlPlacement -> 
                    102}, {{
                    CalculateScan`PlotterScanner`Private`\
orthotomicCurveCountFactor$$, 0.3, ""}, 0, 1, ImageSize -> Small, 
                    ControlPlacement -> 103}, {{
                    CalculateScan`PlotterScanner`Private`\
orthotomicCurveThickness$$, -3., ""}, -4, -0.5, ImageSize -> Small, 
                    ControlPlacement -> 104}, {{
                    CalculateScan`PlotterScanner`Private`orthotomicCurveColor$\
$, 
                    RGBColor[
                    0.8519382, 0.7451437999999999, 0.31752080000000005`], ""}, 
                    RGBColor[1, 0, 0], ImageSize -> Tiny, AppearanceElements -> 
                    "Spectrum", ControlPlacement -> 105}, {{
                    CalculateScan`PlotterScanner`Private`\
orthotomicCurveOpacity$$, 0.8, ""}, 0, 1, ImageSize -> Small, 
                    ControlPlacement -> 106}, {{
                    CalculateScan`PlotterScanner`Private`\
orthotomicCurvePoints$$, "curve", ""}, {"curve", "grid"}, ImageSize -> Small, 
                    ControlPlacement -> 107}, 
                    Style[
                    Overlay[{
                    RawBoxes[
                    PaneBox[
                    GraphicsBox[
                    
                    RasterBox[{{{0, 0, 0, 24}}, {{0, 0, 0, 9}}, {{0, 0, 0, 
                    10}}, {{0, 0, 0, 10}}, {{0, 0, 0, 9}}, {{0, 0, 0, 9}}, {{
                    0, 0, 0, 8}}, {{0, 0, 0, 8}}, {{0, 0, 0, 9}}, {{0, 0, 0, 
                    8}}, {{0, 0, 0, 7}}, {{0, 0, 0, 7}}, {{0, 0, 0, 8}}, {{0, 
                    0, 0, 6}}, {{0, 0, 0, 6}}, {{0, 0, 0, 6}}, {{0, 0, 0, 
                    6}}, {{0, 0, 0, 5}}, {{0, 0, 0, 6}}, {{0, 0, 0, 5}}, {{0, 
                    0, 0, 4}}, {{0, 0, 0, 4}}, {{0, 0, 0, 5}}, {{0, 0, 0, 
                    5}}, {{0, 0, 0, 3}}, {{0, 0, 0, 4}}, {{0, 0, 0, 3}}, {{0, 
                    0, 0, 3}}, {{0, 0, 0, 3}}, {{0, 0, 0, 3}}, {{0, 0, 0, 
                    2}}, {{0, 0, 0, 2}}, {{0, 0, 0, 2}}, {{0, 0, 0, 2}}, {{0, 
                    0, 0, 1}}, {{0, 0, 0, 2}}, {{0, 0, 0, 2}}, {{0, 0, 0, 
                    0}}, {{0, 0, 0, 1}}, {{255, 255, 255, 0}}, {{255, 255, 
                    255, 0}}, {{255, 255, 255, 0}}, {{255, 255, 255, 0}}, {{
                    255, 255, 255, 0}}, {{255, 255, 255, 0}}}, {{0, 45}, {
                    2500, 0}}, {0, 255}, ColorFunction -> RGBColor], 
                    ImageSize -> {2500, 45}, 
                    PlotRange -> {{0, 2500}, {0, 45}}], ImageSize -> 
                    Scaled[1], ScrollPosition -> {0., 0.}]], 
                    Pane[
                    Column[{
                    Row[{
                    Invisible[
                    RawBoxes[
                    GraphicsBox[
                    TagBox[
                    
                    RasterBox[{{{255, 132, 0}, {255, 132, 0}, {255, 132, 0}, {
                    255, 132, 0}, {255, 132, 0}, {255, 132, 0}}, {{255, 132, 
                    0}, {255, 132, 0}, {255, 132, 0}, {255, 132, 0}, {255, 
                    132, 0}, {255, 132, 0}}}, {{0, 2}, {6, 0}}, {0, 255}, 
                    ColorFunction -> RGBColor], 
                    BoxForm`ImageTag[
                    "Byte", ColorSpace -> "RGB", Interleaving -> True], 
                    Selectable -> False], BaseStyle -> "ImageGraphics", 
                    ImageSize -> Magnification[1], ImageSizeRaw -> {6, 2}, 
                    BaselinePosition -> (Scaled[0] -> Center), 
                    PlotRange -> {{0, 6}, {0, 2}}]]], " ", 
                    Column[{"Horizontal plot range:", 
                    Row[{
                    Manipulate`Place[1], "  ", 
                    Manipulate`Place[2], "  ", 
                    Manipulate`Place[3]}]}]}], 
                    PaneSelector[{True -> Grid[{{
                    Button[
                    Row[{
                    RawBoxes[
                    GraphicsBox[
                    TagBox[
                    
                    RasterBox[{{{255, 132, 0}, {255, 132, 0}, {255, 132, 0}, {
                    255, 132, 0}, {255, 132, 0}, {255, 132, 0}}, {{255, 132, 
                    0}, {255, 132, 0}, {255, 132, 0}, {255, 132, 0}, {255, 
                    132, 0}, {255, 132, 0}}}, {{0, 2}, {6, 0}}, {0, 255}, 
                    ColorFunction -> RGBColor], 
                    BoxForm`ImageTag[
                    "Byte", ColorSpace -> "RGB", Interleaving -> True], 
                    Selectable -> False], BaseStyle -> "ImageGraphics", 
                    ImageSize -> Magnification[1], ImageSizeRaw -> {6, 2}, 
                    BaselinePosition -> (Scaled[0] -> Center), 
                    PlotRange -> {{0, 6}, {0, 2}}]], " "}], 
                    CalculateUtilities`GraphicsUtilities`Private`more$$ = 
                    False, Appearance -> None, BaseStyle -> {}], 
                    Button["Fewer controls", 
                    CalculateUtilities`GraphicsUtilities`Private`more$$ = 
                    False, Appearance -> None, BaseStyle -> {}]}, {"", 
                    Item[
                    Column[{
                    Column[{"Vertical plot range:", 
                    Row[{
                    Manipulate`Place[4], "  ", 
                    Manipulate`Place[5], "  ", 
                    Manipulate`Place[6]}], 
                    Manipulate`Place[7]}], 
                    Column[{
                    Row[{
                    Manipulate`Place[8], "  ", 
                    Manipulate`Place[9]}], 
                    Row[{
                    Manipulate`Place[10], "   settings: ", 
                    Button[
                    "1", CalculateScan`PlotterScanner`Private`ar$$ = 1, 
                    ImageSize -> Small, Appearance -> "Palette", 
                    BaseStyle -> {}], "  ", 
                    Button["unscaled axes", 
                    (If[
                    1/4 <= # <= 4, 
                    CalculateScan`PlotterScanner`Private`ar$$ = #]& )[Abs[
                    Apply[
                    Subtract, CalculateScan`PlotterScanner`Private`pRY]]/Abs[
                    Apply[
                    Subtract, CalculateScan`PlotterScanner`Private`pRX]]], 
                    ImageSize -> Small, Appearance -> "Palette", 
                    BaseStyle -> {}]}]}], 
                    TabView[{Row[{" ", 
                    Dynamic[
                    If[CalculateScan`PlotterScanner`Private`tangentTF$$, 
                    Style[
                    "\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`tangentColor$$, 
                    Bold], " "]], 
                    Tooltip[" tangents             ", 
                    Style[" family of tangents at points along the curve ", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> 
                    Grid[{{"show tangents", 
                    Manipulate`Place[11]}, {"tangent count", 
                    Manipulate`Place[12]}, {"tangent length", 
                    Manipulate`Place[13]}, {"tangent thickness", 
                    Manipulate`Place[14]}, {"tangent color", 
                    Manipulate`Place[15]}, {"tangent opacity", 
                    Manipulate`Place[16]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    False}}], Row[{" ", 
                    Dynamic[
                    If[CalculateScan`PlotterScanner`Private`normalTF$$, 
                    Style[
                    "\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`normalColor$$, Bold],
                     " "]], 
                    Tooltip[" normals              ", 
                    Style[" family of normals at points along the curve ", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> 
                    Grid[{{"show normals", 
                    Manipulate`Place[17]}, {"normal count", 
                    Manipulate`Place[18]}, {"normal length", 
                    Manipulate`Place[19]}, {"normal thickness", 
                    Manipulate`Place[20]}, {"normal color", 
                    Manipulate`Place[21]}, {"normal opacity", 
                    Manipulate`Place[22]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    False}}], Row[{" ", 
                    Dynamic[
                    If[CalculateScan`PlotterScanner`Private`tiltedTangentTF$$, 
                    Style[
                    "\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`tiltedTangentColor$$,
                     Bold], " "]], 
                    Tooltip[" tilted tangents      ", 
                    Style[
                    " family of tilted tangents at points along the curve ", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> 
                    Grid[{{"show tilted tangents", 
                    Manipulate`Place[23]}, {"tilted tangent angle", 
                    Manipulate`Place[24]}, {"tilted tangent count", 
                    Manipulate`Place[25]}, {"tilted tangent length", 
                    Manipulate`Place[26]}, {"tilted tangent thickness", 
                    Manipulate`Place[27]}, {"tilted tangent color", 
                    Manipulate`Place[28]}, {"tilted tangent opacity", 
                    Manipulate`Place[29]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    False}}], Row[{" ", 
                    Dynamic[
                    If[
                    CalculateScan`PlotterScanner`Private`osculatingCircleTF$$, 
                    Style[
                    "\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleColor$$, Bold], " "]], 
                    Tooltip[" osculating circles   ", 
                    Style[
                    " family of osculating circles (circles that are tangent \
to the curve) at points along the curve", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> Column[{
                    Grid[{{"show osculating circles", 
                    Manipulate`Place[30]}, {"osculating circle count", 
                    Manipulate`Place[31]}, {"osculating circle thickness", 
                    Manipulate`Place[32]}, {"osculating circle color", 
                    Manipulate`Place[33]}, {"osculating circle opacity", 
                    Manipulate`Place[34]}, {"show circle radii", 
                    Manipulate`Place[35]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    True}}], 
                    Dynamic[
                    Style[
                    If[
                    And[
                    CalculateScan`PlotterScanner`Private`osculatingCircleTF$$, 
                    Not[
                    0.98 < CalculateScan`PlotterScanner`Private`ar$$ < 1.02]],
                     "(note than circles appear as ellipses for unequally\n\
scaled horizontal and vertical axes)", ""]], 
                    RGBColor[
                    0.6666666666666666, 0.6666666666666666, 
                    0.6666666666666666]]}, Alignment -> Left], Row[{" ", 
                    Dynamic[
                    If[
                    CalculateScan`PlotterScanner`Private`taylorParabolaTF$$, 
                    Style["\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`taylorParabolaColor$$\
, Bold], " "]], 
                    Tooltip[" Taylor parabolas     ", 
                    Style[" family of second order Taylor approximations", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> Column[{
                    Grid[{{"show Taylor parabolas", 
                    Manipulate`Place[36]}, {"Taylor parabola count", 
                    Manipulate`Place[37]}, {"Taylor parabola thickness", 
                    Manipulate`Place[38]}, {"Taylor parabola color", 
                    Manipulate`Place[39]}, {"Taylor parabola opacity", 
                    Manipulate`Place[40]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    True}}]}, Alignment -> Left], Row[{" ", 
                    Dynamic[
                    If[CalculateScan`PlotterScanner`Private`involuteTF$$, 
                    Style[
                    "\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`involuteColor$$, 
                    Bold], " "]], 
                    Tooltip[" involutes            ", 
                    Style[
                    " family of involutes (curves traced out by strings \
unwound from the curve) of the curve", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> 
                    Grid[{{"show involutes", 
                    Manipulate`Place[41]}, {"involute count", 
                    Manipulate`Place[42]}, {"involute thickness", 
                    Manipulate`Place[43]}, {"involute color", 
                    Manipulate`Place[44]}, {"involute opacity", 
                    Manipulate`Place[45]}, {"directions", 
                    Row[{"\[DoubleLongLeftArrow]", 
                    Manipulate`Place[46], "  \[DoubleLongRightArrow]", 
                    Manipulate`Place[47]}]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    True}}], Row[{" ", 
                    Dynamic[
                    If[CalculateScan`PlotterScanner`Private`evoluteTF$$, 
                    Style[
                    "\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`evoluteColor$$, 
                    Bold], " "]], 
                    Tooltip[" evolute              ", 
                    Style[
                    " the evolute of a given curve (curve of the centers of \
the osculating circles))", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> 
                    Grid[{{"show evolute", 
                    Manipulate`Place[48]}, {"evolute thickness", 
                    Manipulate`Place[49]}, {"evolute color", 
                    Manipulate`Place[50]}, {"evolute opacity", 
                    Manipulate`Place[51]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    False}}], Row[{" ", 
                    Dynamic[
                    If[CalculateScan`PlotterScanner`Private`offsetCurveTF$$, 
                    Style[
                    "\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`offsetCurveColor$$, 
                    Bold], " "]], 
                    Tooltip[" offset curves        ", 
                    Style[
                    " family of offset curves (curves shifted a fixed \
distance perpendicular to each point of the original curve) ", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> 
                    Grid[{{"show offset curves", 
                    Manipulate`Place[52]}, {"offset curve distance", 
                    Manipulate`Place[53]}, {"offset curve count", 
                    Manipulate`Place[54]}, {"offset curve thickness", 
                    Manipulate`Place[55]}, {"offset curve color", 
                    Manipulate`Place[56]}, {"offset curve opacity", 
                    Manipulate`Place[57]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    False}}], Row[{" ", 
                    Dynamic[
                    If[
                    CalculateScan`PlotterScanner`Private`tiltedOffsetCurveTF$$\
, 
                    Style["\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveColor$$, Bold], " "]], 
                    Tooltip[" tilted offset curves ", 
                    Style[
                    " family of tilted offset curves (curves shifted a fixed \
distance in a direction with a fixed angle \n                                 \
     to the local normal to each point of the original curve) ", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> 
                    Grid[{{"show tilted offset curves", 
                    Manipulate`Place[58]}, {"tilted offset curve angle", 
                    Manipulate`Place[59]}, {"tilted offset curve distance", 
                    Manipulate`Place[60]}, {"tilted offset curve count", 
                    Manipulate`Place[61]}, {"tilted offset curve thickness", 
                    Manipulate`Place[62]}, {"tilted offset curve color", 
                    Manipulate`Place[63]}, {"tilted offset curve opacity", 
                    Manipulate`Place[64]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    False}}], Row[{" ", 
                    Dynamic[
                    If[CalculateScan`PlotterScanner`Private`pedalCurveTF$$, 
                    Style[
                    "\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`pedalCurveColor$$, 
                    Bold], " "]], 
                    Tooltip[" pedal curves         ", 
                    Style[
                    " family of pedal curves (curves on the tangents of the \
given curve perpendicular to a given point) ", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> 
                    Grid[{{"show pedal curves", 
                    Manipulate`Place[65]}, {"pedal curve count", 
                    Manipulate`Place[66]}, {"pedal curve thickness", 
                    Manipulate`Place[67]}, {"pedal curve color", 
                    Manipulate`Place[68]}, {"pedal curve opacity", 
                    Manipulate`Place[69]}, {"pedal points", 
                    Manipulate`Place[70]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    True}}], Row[{" ", 
                    Dynamic[
                    If[
                    CalculateScan`PlotterScanner`Private`negativePedalCurveTF$\
$, 
                    Style["\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurveColor$$, Bold], " "]], 
                    Tooltip[" negative pedal curves", 
                    Style[
                    " family of negative pedal curves (envelope curves of \
lines perpendicular to the given curve and a given point) ", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> 
                    Grid[{{"show negative pedal curves", 
                    Manipulate`Place[71]}, {"negative pedal curve count", 
                    Manipulate`Place[72]}, {
                    "negative pedal curve thickness", 
                    Manipulate`Place[73]}, {"negative pedal curve color", 
                    Manipulate`Place[74]}, {"negative pedal curve opacity", 
                    Manipulate`Place[75]}, {"negative pedal points", 
                    Manipulate`Place[76]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    False}}], Row[{" ", 
                    Dynamic[
                    If[
                    CalculateScan`PlotterScanner`Private`contraPedalCurveTF$$, 
                    Style[
                    "\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurveColor$$, Bold], " "]], 
                    Tooltip[" contrapedal curves   ", 
                    Style[
                    " family of contrapedal curves (curves on the normals of \
the given curve perpendicular to a given point) ", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> 
                    Grid[{{"show contrapedal curves", 
                    Manipulate`Place[77]}, {"contrapedal curve count", 
                    Manipulate`Place[78]}, {"contrapedal curve thickness", 
                    Manipulate`Place[79]}, {"contrapedal curve color", 
                    Manipulate`Place[80]}, {"contrapedal curve opacity", 
                    Manipulate`Place[81]}, {"contrapedal pedal points", 
                    Manipulate`Place[82]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    False}}], Row[{" ", 
                    Dynamic[
                    If[CalculateScan`PlotterScanner`Private`dualCurveTF$$, 
                    Style[
                    "\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`dualCurveColor$$, 
                    Bold], " "]], 
                    Tooltip[" dual curves          ", 
                    Style[
                    " dual curve of the given curve (the dual curbe maps \
inflection points to cusps) ", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> 
                    Grid[{{"show dual curves", 
                    Manipulate`Place[83]}, {"dual curve count", 
                    Manipulate`Place[84]}, {"dual curve thickness", 
                    Manipulate`Place[85]}, {"dual curve color", 
                    Manipulate`Place[86]}, {"dual curve opacity", 
                    Manipulate`Place[87]}, {"dual curve points", 
                    Manipulate`Place[88]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    False}}], Row[{" ", 
                    Dynamic[
                    If[
                    CalculateScan`PlotterScanner`Private`inverseCurveTF$$, 
                    Style[
                    "\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`inverseCurveColor$$, 
                    Bold], " "]], 
                    Tooltip[" inverse curves       ", 
                    Style[
                    " inverse curves (curves resulting from carrying of an \
inversion on circles) ", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> 
                    Grid[{{"show inverse curves", 
                    Manipulate`Place[89]}, {"inverse curve count", 
                    Manipulate`Place[90]}, {"inverse curve thickness", 
                    Manipulate`Place[91]}, {"inverse curve color", 
                    Manipulate`Place[92]}, {"inverse curve opacity", 
                    Manipulate`Place[93]}, {"inversion curve points", 
                    Manipulate`Place[94]}, {"inversion circle radius", 
                    Manipulate`Place[95]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    False}}], Row[{" ", 
                    Dynamic[
                    If[
                    CalculateScan`PlotterScanner`Private`isopticCurveTF$$, 
                    Style[
                    "\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`isopticCurveColor$$, 
                    Bold], " "]], 
                    Tooltip[" isoptic curves       ", 
                    Style[
                    " inverse curves (points on isoptic curves have two \
tangents with the given curve and the two tangents meet with the specified \
angle)) ", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> Column[{
                    Grid[{{"show isoptic curves", 
                    Manipulate`Place[96]}, {"isoptic curve angle", 
                    Manipulate`Place[97]}, {"isoptic curve thickness", 
                    Manipulate`Place[98]}, {"isoptic curve color", 
                    Manipulate`Place[99]}, {"isoptic curve opacity", 
                    Manipulate`Place[100]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    False}}], 
                    Dynamic[
                    Style[
                    If[
                    TrueQ[
                    And[
                    CalculateScan`PlotterScanner`Private`isopticCurveTF$$, 
                    CalculateScan`PlotterScanner`Private`x1x2SCPCurves === \
{}]], "(note than the set of isoptic curves for a given angle can be empty)", 
                    ""]], 
                    RGBColor[
                    0.6666666666666666, 0.6666666666666666, 
                    0.6666666666666666]]}, Alignment -> Left], Row[{" ", 
                    Dynamic[
                    If[
                    CalculateScan`PlotterScanner`Private`orthotomicCurveTF$$, 
                    
                    Style[
                    "\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`orthotomicCurveColor$\
$, Bold], " "]], 
                    Tooltip[" orthotomic curves    ", 
                    Style[
                    " orthotomic curves (points of reflections of a given \
point on curve tangents)) ", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> 
                    Grid[{{"show orthotomic curves", 
                    Manipulate`Place[101]}, {"orthotomic curve angle", 
                    Manipulate`Place[102]}, {"orthotomic curve count", 
                    Manipulate`Place[103]}, {"orthotomic curve thickness", 
                    Manipulate`Place[104]}, {"orthotomic curve color", 
                    Manipulate`Place[105]}, {"orthotomic curve opacity", 
                    Manipulate`Place[106]}, {"orthotomic curve points", 
                    Manipulate`Place[107]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    False}}]}, 2, ImageSize -> {All, Automatic}, 
                    ControlPlacement -> Left]}, 
                    Dividers -> {None, {False, True, True, True}}, Spacings -> 
                    1], ItemSize -> Scaled[1], 
                    Frame -> {None, None, True, None}]}}, FrameStyle -> 
                    GrayLevel[0.9], Alignment -> Left, Spacings -> {0, 0.8}], 
                    False -> Button[
                    Row[{
                    RawBoxes[
                    GraphicsBox[
                    TagBox[
                    
                    RasterBox[{{{255, 255, 255}, {255, 255, 255}, {255, 132, 
                    0}, {255, 132, 0}, {255, 255, 255}, {255, 255, 255}}, {{
                    255, 255, 255}, {255, 255, 255}, {255, 132, 0}, {255, 132,
                     0}, {255, 255, 255}, {255, 255, 255}}, {{255, 132, 0}, {
                    255, 132, 0}, {255, 132, 0}, {255, 132, 0}, {255, 132, 
                    0}, {255, 132, 0}}, {{255, 132, 0}, {255, 132, 0}, {255, 
                    132, 0}, {255, 132, 0}, {255, 132, 0}, {255, 132, 0}}, {{
                    255, 255, 255}, {255, 255, 255}, {255, 132, 0}, {255, 132,
                     0}, {255, 255, 255}, {255, 255, 255}}, {{255, 255, 
                    255}, {255, 255, 255}, {255, 132, 0}, {255, 132, 0}, {255,
                     255, 255}, {255, 255, 255}}}, {{0, 6}, {6, 0}}, {0, 255},
                     ColorFunction -> RGBColor], 
                    BoxForm`ImageTag[
                    "Byte", ColorSpace -> "RGB", Interleaving -> True], 
                    Selectable -> False], BaseStyle -> "ImageGraphics", 
                    ImageSize -> Magnification[1], ImageSizeRaw -> {6, 6}, 
                    BaselinePosition -> (Scaled[0.3] -> Center), 
                    PlotRange -> {{0, 6}, {0, 6}}]], " More controls"}], 
                    CalculateUtilities`GraphicsUtilities`Private`more$$ = 
                    True, Appearance -> None, BaseStyle -> {}]}, 
                    Dynamic[
                    CalculateUtilities`GraphicsUtilities`Private`more$$], 
                    ImageSize -> Automatic]}], 
                    ImageMargins -> {{20, 30}, {10, 10}}]}, {1, 2}, 2, 
                    Alignment -> {Left, Top}]], {{
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleLastParamaters$$, {}}, ControlType -> None}, {{
                    CalculateScan`PlotterScanner`Private`osculatingCircles$$, \
{}}, ControlType -> None}, {{
                    CalculateScan`PlotterScanner`Private`\
taylorParabolaLastParamaters$$, {}}, ControlType -> None}, {{
                    CalculateScan`PlotterScanner`Private`taylorParabolas$$, \
{}}, ControlType -> None}, {{
                    CalculateScan`PlotterScanner`Private`\
offsetCurveLastParamaters$$, {}}, ControlType -> None}, {{
                    CalculateScan`PlotterScanner`Private`\
offsetCurvePlotCurves$$, {}}, ControlType -> None}, {{
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveLastParamaters$$, {}}, ControlType -> None}, {{
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurvePlotCurves$$, {}}, ControlType -> None}, {{
                    CalculateScan`PlotterScanner`Private`\
pedalCurveLastParamaters$$, {}}, ControlType -> None}, {{
                    CalculateScan`PlotterScanner`Private`pedalCurvePlotCurves$\
$, {}}, ControlType -> None}, {{
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurveLastParamaters$$, {}}, ControlType -> None}, {{
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurvePlotCurves$$, {}}, ControlType -> None}, {{
                    
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurveLastParamaters$$, {}}, ControlType -> None}, {{
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurvePlotCurves$$, {}}, ControlType -> None}, {{
                    CalculateScan`PlotterScanner`Private`\
dualCurveLastParamaters$$, {}}, ControlType -> None}, {{
                    CalculateScan`PlotterScanner`Private`dualCurvePlotCurves$$\
, {}}, ControlType -> None}, {{
                    CalculateScan`PlotterScanner`Private`\
inverseLastParamaters$$, {}}, ControlType -> None}, {{
                    CalculateScan`PlotterScanner`Private`\
inverseCurvePlotCurves$$, {}}, ControlType -> None}, {{
                    CalculateScan`PlotterScanner`Private`\
orthotomicLastParamaters$$, {}}, ControlType -> None}, {{
                    CalculateScan`PlotterScanner`Private`\
orthotomicCurvePlotCurves$$, {}}, ControlType -> None}, {{
                    CalculateScan`PlotterScanner`Private`\
isopticLastParamaters$$, {}}, ControlType -> None}, {{
                    CalculateScan`PlotterScanner`Private`\
isopticCurvePlotCurves$$, {}}, ControlType -> None}}, 
                  "Options" :> {
                   ControlPlacement -> {
                    Bottom, Bottom, Bottom, Bottom, Bottom, Bottom, Bottom, 
                    Bottom, Bottom, Bottom, Bottom, Bottom, Bottom, Bottom, 
                    Bottom, Bottom, Bottom, Bottom, Bottom, Bottom}, 
                    TrackedSymbols :> Manipulate, Paneled -> False, 
                    ControlPlacement -> Bottom, 
                    FrameMargins -> {{0, 0}, {0, 10}}, Paneled -> False, 
                    AppearanceElements -> {}, 
                    LabelStyle -> {
                    "DialogStyle", FontColor -> GrayLevel[0.25]}}, 
                  "DefaultOptions" :> {}], SingleEvaluation -> True], 
                Initialization :> ({
                  Attributes[CalculateScan`PlotterScanner`Private`x1Old$] = {
                    Temporary}, 
                   Attributes[CalculateScan`PlotterScanner`Private`x2Old$] = {
                    Temporary}, 
                   Attributes[
                    CalculateScan`PlotterScanner`Private`fy1Old$] = {
                    Temporary}, 
                   Attributes[
                    CalculateScan`PlotterScanner`Private`fy2Old$] = {
                    Temporary}, 
                   Attributes[CalculateScan`PlotterScanner`Private`X1$] = {
                    Temporary}, 
                   Attributes[CalculateScan`PlotterScanner`Private`X2$] = {
                    Temporary}, 
                   Attributes[
                    CalculateScan`PlotterScanner`Private`singularities$] = {
                    Temporary}, 
                   Attributes[CalculateScan`PlotterScanner`Private`ts$] = {
                    Temporary}, 
                   Attributes[CalculateScan`PlotterScanner`Private`xL$] = {
                    Temporary}, 
                   Attributes[CalculateScan`PlotterScanner`Private`xU$] = {
                    Temporary}, 
                   Attributes[CalculateScan`PlotterScanner`Private`yL$] = {
                    Temporary}, 
                   Attributes[CalculateScan`PlotterScanner`Private`yU$] = {
                    Temporary}, 
                   Attributes[CalculateScan`PlotterScanner`Private`pRX$] = {
                    Temporary}, 
                   Attributes[
                    CalculateScan`PlotterScanner`Private`\[CapitalDelta]X$] = \
{Temporary}, Attributes[
                    CalculateScan`PlotterScanner`Private`\[CapitalDelta]y$] = \
{Temporary}, Attributes[CalculateScan`PlotterScanner`Private`Y1$] = {
                    Temporary}, 
                   Attributes[CalculateScan`PlotterScanner`Private`Y2$] = {
                    Temporary}, 
                   Attributes[CalculateScan`PlotterScanner`Private`pRY$] = {
                    Temporary}, 
                   Attributes[
                    CalculateScan`PlotterScanner`Private`originalCurvePlot0$] = \
{Temporary}, Attributes[
                    CalculateScan`PlotterScanner`Private`originalCurvePlot$] = \
{Temporary}, Attributes[
                    CalculateScan`PlotterScanner`Private`tangentsLines$] = {
                    Temporary}, 
                   Attributes[
                    CalculateScan`PlotterScanner`Private`tangentLinePlot$] = {
                    Temporary}, 
                   Attributes[
                    CalculateScan`PlotterScanner`Private`normalLines$] = {
                    Temporary}, 
                   Attributes[
                    CalculateScan`PlotterScanner`Private`normalLinePlot$] = {
                    Temporary}, 
                   Attributes[
                    CalculateScan`PlotterScanner`Private`tiltedTangentLines$] = \
{Temporary}, Attributes[
                    CalculateScan`PlotterScanner`Private`\
tiltedTangentLinePlot$] = {Temporary}, 
                   Attributes[
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleRadii$] = {Temporary}, 
                   Attributes[
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleLastParamaters$] = {Temporary}, 
                   Attributes[
                    CalculateScan`PlotterScanner`Private`osculatingCirclePlot$\
] = {Temporary}, Attributes[
                    CalculateScan`PlotterScanner`Private`taylorParabolaPlot$] = \
{Temporary}, Attributes[CalculateScan`PlotterScanner`Private`evolutePlot$] = {
                    Temporary}, 
                   Attributes[
                    CalculateScan`PlotterScanner`Private`involutePlotCurves$] = \
{Temporary}, Attributes[
                    CalculateScan`PlotterScanner`Private`\
involutePlotCurveLastParamaters$] = {Temporary}, 
                   Attributes[
                    CalculateScan`PlotterScanner`Private`involutePlot$] = {
                    Temporary}, 
                   Attributes[CalculateScan`PlotterScanner`Private`iTab$] = {
                    Temporary}, 
                   Attributes[CalculateScan`PlotterScanner`Private`xLi$] = {
                    Temporary}, 
                   Attributes[CalculateScan`PlotterScanner`Private`xUi$] = {
                    Temporary}, 
                   Attributes[
                    CalculateScan`PlotterScanner`Private`arcLength$] = {
                    Temporary}, 
                   Attributes[CalculateScan`PlotterScanner`Private`arcL$] = {
                    Temporary}, 
                   Attributes[CalculateScan`PlotterScanner`Private`xi1$] = {
                    Temporary}, 
                   Attributes[CalculateScan`PlotterScanner`Private`xi2$] = {
                    Temporary}, 
                   Attributes[
                    CalculateScan`PlotterScanner`Private`lineSegments$] = {
                    Temporary}, 
                   Attributes[
                    CalculateScan`PlotterScanner`Private`baseSegments$] = {
                    Temporary}, 
                   Attributes[
                    CalculateScan`PlotterScanner`Private`oSegments$] = {
                    Temporary}, 
                   Attributes[
                    CalculateScan`PlotterScanner`Private`arcFactors$] = {
                    Temporary}, 
                   Attributes[
                    CalculateScan`PlotterScanner`Private`iTabRight$] = {
                    Temporary}, 
                   Attributes[
                    CalculateScan`PlotterScanner`Private`iTabLeft$] = {
                    Temporary}, 
                   Attributes[
                    CalculateScan`PlotterScanner`Private`signedArcFactors$] = \
{Temporary}, Attributes[CalculateScan`PlotterScanner`Private`curvePoints$] = {
                    Temporary}, CalculateScan`PlotterScanner`Private`red = 
                   Reduce[(-Cos[4 Removed["x"]] - (4 (-7 + Removed["x"])) 
                    Sin[4 Removed["x"]])/16 == 
                    CalculateScan`PlotterScanner`Private`y$, 
                    Removed["x"]], 
                   Attributes[CalculateScan`PlotterScanner`Private`y$] = {
                    Temporary}, Attributes[Compile`$167] = {Temporary}, 
                   CalculateScan`PlotterScanner`Private`addTangents[{
                    Pattern[CalculateScan`PlotterScanner`Private`fD0, 
                    Blank[]], 
                    Pattern[CalculateScan`PlotterScanner`Private`fD1, 
                    Blank[]]}, {
                    Pattern[CalculateScan`PlotterScanner`Private`x, 
                    Blank[]], 
                    Pattern[CalculateScan`PlotterScanner`Private`xMin, 
                    Blank[]], 
                    Pattern[CalculateScan`PlotterScanner`Private`xMax, 
                    Blank[]]}, 
                    Pattern[CalculateScan`PlotterScanner`Private`n, 
                    Blank[]], 
                    Pattern[CalculateScan`PlotterScanner`Private`opts, 
                    OptionsPattern[]]] := Quiet[
                    
                    Module[{}, 
                    CalculateScan`PlotterScanner`Private`\[Alpha] = 
                    OptionValue["TiltAngle"]; 
                    CalculateScan`PlotterScanner`Private`f = 
                    OptionValue["LengthFactor"]; 
                    CalculateScan`PlotterScanner`Private`bdq = 
                    OptionValue["Bidirectional"]; 
                    CalculateScan`PlotterScanner`Private`L = 
                    CalculateScan`PlotterScanner`Private`xMax - 
                    CalculateScan`PlotterScanner`Private`xMin; 
                    CalculateScan`PlotterScanner`Private`M = {{
                    Cos[CalculateScan`PlotterScanner`Private`\[Alpha]], 
                    Sin[CalculateScan`PlotterScanner`Private`\[Alpha]]}, {-
                    Sin[CalculateScan`PlotterScanner`Private`\[Alpha]], 
                    Cos[CalculateScan`PlotterScanner`Private`\[Alpha]]}}; 
                    CalculateScan`PlotterScanner`Private`pointsAndDirections = 
                    Cases[
                    Chop[
                    N[
                    Table[{{CalculateScan`PlotterScanner`Private`x, 
                    CalculateScan`PlotterScanner`Private`fD0[
                    CalculateScan`PlotterScanner`Private`x]}, (
                    CalculateScan`PlotterScanner`Private`f 
                    CalculateScan`PlotterScanner`Private`L) 
                    Dot[CalculateScan`PlotterScanner`Private`M, 
                    Normalize[{1, 
                    CalculateScan`PlotterScanner`Private`fD1[
                    CalculateScan`PlotterScanner`Private`x]}]]}, {
                    CalculateScan`PlotterScanner`Private`x, 
                    CalculateScan`PlotterScanner`Private`xMin, 
                    CalculateScan`PlotterScanner`Private`xMax, (
                    CalculateScan`PlotterScanner`Private`xMax - 
                    CalculateScan`PlotterScanner`Private`xMin)/
                    CalculateScan`PlotterScanner`Private`n}]]], {{
                    Blank[Real], 
                    Blank[Real]}, {
                    Blank[Real], 
                    Blank[Real]}}]; 
                    If[CalculateScan`PlotterScanner`Private`bdq === False, 
                    Line[
                    
                    Apply[{#, # + #2}& , 
                    CalculateScan`PlotterScanner`Private`pointsAndDirections, \
{1}]], 
                    Line[
                    
                    Apply[{# - #2, # + #2}& , 
                    CalculateScan`PlotterScanner`Private`pointsAndDirections, \
{1}]]]]], Options[CalculateScan`PlotterScanner`Private`addTangents] = {
                    "TiltAngle" -> 0, "LengthFactor" -> 1, "Bidirectional" -> 
                    True}, CalculateScan`PlotterScanner`Private`fD0 = 
                   CompiledFunction[{8, 8., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    6}}, {{0.0625, {3, 0, 2}}, {-4, {2, 0, 1}}, {
                    4, {2, 0, 0}}, {-7, {2, 0, 2}}}, {0, 3, 7, 0, 
                    0}, {{10, 0, 1}, {16, 1, 0, 1}, {40, 2, 3, 0, 1, 3, 0, 
                    3}, {19, 3, 4}, {10, 2, 3}, {13, 3, 0, 3}, {40, 1, 3, 0, 
                    1, 3, 0, 5}, {10, 1, 6}, {16, 6, 3, 5, 6}, {13, 4, 6, 
                    4}, {16, 2, 4, 6}, {1}}, 
                    Function[{
                    Removed["x"]}, 
                    
                    Block[{Compile`$236}, 
                    Compile`$236 = 
                    4 Removed["x"]; (-Cos[Compile`$236] - (
                    4 (-7 + Removed["x"])) Sin[Compile`$236])/16]], Evaluate],
                    Attributes[Compile`$236] = {Temporary}, 
                   CalculateScan`PlotterScanner`Private`fD1 = 
                   CompiledFunction[{8, 8., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    3}}, {{4, {2, 0, 1}}, {-7, {2, 0, 0}}}, {0, 2, 4, 0, 
                    0}, {{10, 0, 1}, {13, 1, 0, 1}, {10, 1, 2}, {16, 2, 0, 
                    2}, {40, 2, 3, 0, 2, 3, 0, 3}, {16, 1, 3, 1}, {19, 1, 
                    3}, {1}}, 
                    Function[{
                    Removed["x"]}, -((-7 + Removed["x"]) 
                    Cos[4 Removed["x"]])], Evaluate], 
                   CalculateScan`PlotterScanner`Private`xMin = \
-1.5707963267948966`, CalculateScan`PlotterScanner`Private`xMax = 
                   1.5707963267948966`, 
                   CalculateScan`PlotterScanner`Private`addOsculatingCircles[{
                    
                    Pattern[CalculateScan`PlotterScanner`Private`fD0, 
                    Blank[]], 
                    Pattern[CalculateScan`PlotterScanner`Private`fD1, 
                    Blank[]], 
                    Pattern[CalculateScan`PlotterScanner`Private`fD2, 
                    Blank[]]}, {
                    Pattern[CalculateScan`PlotterScanner`Private`x, 
                    Blank[]], 
                    Pattern[CalculateScan`PlotterScanner`Private`xMin, 
                    Blank[]], 
                    Pattern[CalculateScan`PlotterScanner`Private`xMax, 
                    Blank[]]}, 
                    Pattern[CalculateScan`PlotterScanner`Private`n, 
                    Blank[]]] := Quiet[
                    
                    Module[{}, 
                    CalculateScan`PlotterScanner`Private`centersAndRadii = 
                    Cases[
                    N[
                    Chop[
                    N[
                    Table[{{CalculateScan`PlotterScanner`Private`x, 
                    CalculateScan`PlotterScanner`Private`fD0[
                    CalculateScan`PlotterScanner`Private`x]} + ({-
                    CalculateScan`PlotterScanner`Private`fD1[
                    CalculateScan`PlotterScanner`Private`x], 1} (1 + 
                    CalculateScan`PlotterScanner`Private`fD1[
                    CalculateScan`PlotterScanner`Private`x]^2))/
                    CalculateScan`PlotterScanner`Private`fD2[
                    CalculateScan`PlotterScanner`Private`x], 
                    Abs[
                    1/(CalculateScan`PlotterScanner`Private`fD2[
                    CalculateScan`PlotterScanner`Private`x]/(1 + 
                    CalculateScan`PlotterScanner`Private`fD1[
                    CalculateScan`PlotterScanner`Private`x]^2)^(3/2))]}, {
                    CalculateScan`PlotterScanner`Private`x, 
                    CalculateScan`PlotterScanner`Private`xMin, 
                    CalculateScan`PlotterScanner`Private`xMax, (
                    CalculateScan`PlotterScanner`Private`xMax - 
                    CalculateScan`PlotterScanner`Private`xMin)/
                    CalculateScan`PlotterScanner`Private`n}]]]], {{
                    Blank[Real], 
                    Blank[Real]}, 
                    Blank[Real]}]; 
                    Apply[Circle, 
                    CalculateScan`PlotterScanner`Private`centersAndRadii, {
                    1}]]], CalculateScan`PlotterScanner`Private`fD2 = 
                   CompiledFunction[{8, 8., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    3}}, {{4, {2, 0, 0}}, {-7, {2, 0, 1}}}, {0, 2, 6, 0, 
                    0}, {{10, 0, 1}, {16, 1, 0, 1}, {40, 2, 3, 0, 1, 3, 0, 
                    2}, {19, 2, 3}, {10, 1, 2}, {13, 2, 0, 2}, {40, 1, 3, 0, 
                    1, 3, 0, 4}, {10, 0, 5}, {16, 5, 2, 4, 5}, {13, 3, 5, 
                    3}, {1}}, 
                    Function[{
                    Removed["x"]}, 
                    
                    Block[{Compile`$285}, 
                    Compile`$285 = 
                    4 Removed["x"]; -
                    Cos[Compile`$285] + (4 (-7 + Removed["x"])) 
                    Sin[Compile`$285]]], Evaluate], 
                   Attributes[Compile`$285] = {Temporary}, 
                   Attributes[Compile`$343] = {Temporary}, 
                   CalculateScan`PlotterScanner`Private`\
addOsculatingCircleRadii[{
                    Pattern[CalculateScan`PlotterScanner`Private`fD0, 
                    Blank[]], 
                    Pattern[CalculateScan`PlotterScanner`Private`fD1, 
                    Blank[]], 
                    Pattern[CalculateScan`PlotterScanner`Private`fD2, 
                    Blank[]]}, {
                    Pattern[CalculateScan`PlotterScanner`Private`x, 
                    Blank[]], 
                    Pattern[CalculateScan`PlotterScanner`Private`xMin, 
                    Blank[]], 
                    Pattern[CalculateScan`PlotterScanner`Private`xMax, 
                    Blank[]]}, 
                    Pattern[CalculateScan`PlotterScanner`Private`n, 
                    Blank[]]] := Quiet[
                    Module[{}, 
                    CalculateScan`PlotterScanner`Private`\
touchPointsAndCenters = Cases[
                    Chop[
                    N[
                    Table[{{CalculateScan`PlotterScanner`Private`x, 
                    CalculateScan`PlotterScanner`Private`fD0[
                    CalculateScan`PlotterScanner`Private`x]}, {
                    CalculateScan`PlotterScanner`Private`x, 
                    CalculateScan`PlotterScanner`Private`fD0[
                    CalculateScan`PlotterScanner`Private`x]} + ({-
                    CalculateScan`PlotterScanner`Private`fD1[
                    CalculateScan`PlotterScanner`Private`x], 1} (1 + 
                    CalculateScan`PlotterScanner`Private`fD1[
                    CalculateScan`PlotterScanner`Private`x]^2))/
                    CalculateScan`PlotterScanner`Private`fD2[
                    CalculateScan`PlotterScanner`Private`x]}, {
                    CalculateScan`PlotterScanner`Private`x, 
                    CalculateScan`PlotterScanner`Private`xMin, 
                    CalculateScan`PlotterScanner`Private`xMax, (
                    CalculateScan`PlotterScanner`Private`xMax - 
                    CalculateScan`PlotterScanner`Private`xMin)/
                    CalculateScan`PlotterScanner`Private`n}]]], {{
                    Blank[Real], 
                    Blank[Real]}, {
                    Blank[Real], 
                    Blank[Real]}}]; 
                    Line[CalculateScan`PlotterScanner`Private`\
touchPointsAndCenters]]], 
                   CalculateScan`PlotterScanner`Private`addTaylorParabolas[{
                    Pattern[CalculateScan`PlotterScanner`Private`fD0, 
                    Blank[]], 
                    Pattern[CalculateScan`PlotterScanner`Private`fD1, 
                    Blank[]], 
                    Pattern[CalculateScan`PlotterScanner`Private`fD2, 
                    Blank[]]}, {
                    Pattern[CalculateScan`PlotterScanner`Private`x, 
                    Blank[]], 
                    Pattern[CalculateScan`PlotterScanner`Private`xMin, 
                    Blank[]], 
                    Pattern[CalculateScan`PlotterScanner`Private`xMax, 
                    Blank[]]}, 
                    Pattern[CalculateScan`PlotterScanner`Private`n, 
                    Blank[]]] := Quiet[
                    
                    Module[{}, 
                    CalculateScan`PlotterScanner`Private`parabolas = 
                    Table[CalculateScan`PlotterScanner`Private`fD0[
                    CalculateScan`PlotterScanner`Private`y] + 
                    CalculateScan`PlotterScanner`Private`fD1[
                    CalculateScan`PlotterScanner`Private`y] (
                    CalculateScan`PlotterScanner`Private`x - 
                    CalculateScan`PlotterScanner`Private`y) + (
                    CalculateScan`PlotterScanner`Private`fD2[
                    CalculateScan`PlotterScanner`Private`y] (
                    CalculateScan`PlotterScanner`Private`x - 
                    CalculateScan`PlotterScanner`Private`y)^2)/2, {
                    CalculateScan`PlotterScanner`Private`y, 
                    CalculateScan`PlotterScanner`Private`xMin, 
                    CalculateScan`PlotterScanner`Private`xMax, (
                    CalculateScan`PlotterScanner`Private`xMax - 
                    CalculateScan`PlotterScanner`Private`xMin)/
                    CalculateScan`PlotterScanner`Private`n}]; Cases[
                    Plot[
                    Evaluate[
                    CalculateScan`PlotterScanner`Private`parabolas], {
                    CalculateScan`PlotterScanner`Private`x, 
                    CalculateScan`PlotterScanner`Private`xMin, 
                    CalculateScan`PlotterScanner`Private`xMax}], 
                    Blank[Line], Infinity]]], 
                   Attributes[Derivative] = {NHoldAll, ReadProtected}, 
                   CalculateScan`PlotterScanner`Private`x0 = 0, 
                   Attributes[
                    CalculateScan`PlotterScanner`Private`maxDist$] = {
                    Temporary}, 
                   Attributes[CalculateScan`PlotterScanner`Private`M$] = {
                    Temporary}, 
                   Attributes[
                    CalculateScan`PlotterScanner`Private`pedalCurveCount$] = {
                    Temporary}, 
                   Attributes[CalculateScan`PlotterScanner`Private`px$] = {
                    Temporary}, 
                   Attributes[CalculateScan`PlotterScanner`Private`py$] = {
                    Temporary}, 
                   Attributes[
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurveCount$] = {Temporary}, 
                   Attributes[
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurveCount$] = {Temporary}, 
                   Attributes[
                    CalculateScan`PlotterScanner`Private`dualCurveCount$] = {
                    Temporary}, 
                   Attributes[
                    CalculateScan`PlotterScanner`Private`inverseCurveCount$] = \
{Temporary}, Attributes[CalculateScan`PlotterScanner`Private`R$] = {
                    Temporary}, 
                   Attributes[
                    CalculateScan`PlotterScanner`Private`orthotomicCurveCount$\
] = {Temporary}, Attributes[
                    CalculateScan`PlotterScanner`Private`\[Alpha]$] = {
                    Temporary}, 
                   CalculateScan`PlotterScanner`Private`\
tangentIntersectionPoint[{
                    Pattern[CalculateScan`PlotterScanner`Private`x1, 
                    Blank[]], 
                    Pattern[CalculateScan`PlotterScanner`Private`x2, 
                    Blank[]]}, {
                    Pattern[CalculateScan`PlotterScanner`Private`fD0, 
                    Blank[]], 
                    Pattern[CalculateScan`PlotterScanner`Private`fD1, 
                    Blank[]]}] := {(-
                    CalculateScan`PlotterScanner`Private`fD0[
                    CalculateScan`PlotterScanner`Private`x1] + 
                    CalculateScan`PlotterScanner`Private`fD0[
                    CalculateScan`PlotterScanner`Private`x2] + 
                    CalculateScan`PlotterScanner`Private`x1 
                    CalculateScan`PlotterScanner`Private`fD1[
                    CalculateScan`PlotterScanner`Private`x1] - 
                    CalculateScan`PlotterScanner`Private`x2 
                    CalculateScan`PlotterScanner`Private`fD1[
                    CalculateScan`PlotterScanner`Private`x2])/(
                    CalculateScan`PlotterScanner`Private`fD1[
                    CalculateScan`PlotterScanner`Private`x1] - 
                    CalculateScan`PlotterScanner`Private`fD1[
                    CalculateScan`PlotterScanner`Private`x2]), 
                    CalculateScan`PlotterScanner`Private`fD0[
                    CalculateScan`PlotterScanner`Private`x1] + (
                    CalculateScan`PlotterScanner`Private`fD1[
                    CalculateScan`PlotterScanner`Private`x1] (-
                    CalculateScan`PlotterScanner`Private`fD0[
                    CalculateScan`PlotterScanner`Private`x1] + 
                    CalculateScan`PlotterScanner`Private`fD0[
                    CalculateScan`PlotterScanner`Private`x2] + (
                    CalculateScan`PlotterScanner`Private`x1 - 
                    CalculateScan`PlotterScanner`Private`x2) 
                    CalculateScan`PlotterScanner`Private`fD1[
                    CalculateScan`PlotterScanner`Private`x2]))/(
                    CalculateScan`PlotterScanner`Private`fD1[
                    CalculateScan`PlotterScanner`Private`x1] - 
                    CalculateScan`PlotterScanner`Private`fD1[
                    CalculateScan`PlotterScanner`Private`x2])}, 
                   Attributes[RawBoxes] = {ReadProtected}, 
                   Attributes[Subscript] = {NHoldRest}}; 
                 Typeset`initDone$$ = True), DynamicModuleValues :> {}, 
                Deinitialization :> None, 
                UntrackedVariables :> {Typeset`size$$}, 
                SynchronousInitialization -> True, 
                UnsavedVariables :> {Typeset`initDone$$}], "Manipulate", 
               Deployed -> True, StripOnInput -> False], TraditionalForm], 
             Manipulate`InterpretManipulate[1]], TraditionalForm]], 
          "Output"]}], 
       XMLElement["dataformats", {}, {}]}], 
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["cell", {"compressed" -> True, "string" -> False}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             FormBox[
              StyleBox[
               
               DynamicModuleBox[{
                CalculateUtilities`GraphicsUtilities`Private`more$$ = False, 
                 CalculateScan`PlotterScanner`Private`Sa$$ = True, 
                 CalculateScan`PlotterScanner`Private`Sat$$ = False, 
                 CalculateScan`PlotterScanner`Private`SC$$ = True, 
                 Global`sc1$$ = -ArcTan[
                    Rational[1, 32]], Global`sc1max$$ = ArcTan[
                   Rational[15, 16]], Global`sc1min$$ = -ArcTan[
                    Rational[17, 16]], Global`sc2$$ = 0, Global`sc2max$$ = 
                 Rational[1, 4] Pi, Global`sc2min$$ = Rational[-1, 4] Pi, 
                 Global`sc3$$ = ArcTan[
                   Rational[7, 8]], Global`sc3max$$ = ArcTan[
                   Rational[11, 4]], Global`sc3min$$ = ArcTan[
                   Rational[3, 4]], Global`sc4$$ = -ArcTan[
                    Rational[1, 8]], Global`sc4max$$ = ArcTan[
                   Rational[3, 4]], Global`sc4min$$ = -ArcTan[
                    Rational[5, 4]], Global`scColor1$$ = 
                 RGBColor[0.237736, 0.340215, 0.575113], Global`scColor2$$ = 
                 RGBColor[
                  0.33311066666666667`, 0.5032283333333333, 
                   0.26154733333333335`], Global`scColor3$$ = 
                 RGBColor[0.8562609999999999, 0.742794, 0.31908333333333333`],
                  Global`scColor4$$ = RGBColor[0.72987, 0.239399, 0.230961], 
                 Global`scCount1$$ = 12, Global`scCount2$$ = 12, 
                 Global`scCount3$$ = 12, Global`scCount4$$ = 12, 
                 Global`scTF1$$ = True, Global`scTF2$$ = False, 
                 Global`scTF3$$ = False, Global`scTF4$$ = False, 
                 CalculateScan`PlotterScanner`Private`x1$$ = \
-0.7853981633974483, CalculateScan`PlotterScanner`Private`x2$$ = 
                 0.7853981633974483, Typeset`show$$ = True, 
                 Typeset`bookmarkList$$ = {}, Typeset`bookmarkMode$$ = "Menu",
                  Typeset`animator$$, Typeset`animvar$$ = 1, Typeset`name$$ = 
                 "\"untitled\"", Typeset`specs$$ = {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`more$$], {
                    False, True}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`x1$$], \
-0.7853981633974483, 
                    Subscript[
                    Style["x", Italic], "min"]}, -1.5692255304681018`, 
                    1.5692255304681018`}, {{
                    Hold[CalculateScan`PlotterScanner`Private`x2$$], 
                    0.7853981633974483, 
                    Subscript[
                    Style["x", Italic], "max"]}, -1.5692255304681018`, 
                    1.5692255304681018`}, {{
                    Hold[CalculateScan`PlotterScanner`Private`Sa$$], True, 
                    "show axes"}, {True, False}}, {{
                    Hold[CalculateScan`PlotterScanner`Private`Sat$$], False, 
                    "show ticks"}, {True, False}}, {{
                    Hold[Global`sc1$$], -ArcTan[
                    Rational[1, 32]], 
                    Row[{
                    Subscript[
                    RawBoxes["c"], 1], " value"}]}, -1.5692255304681018`, 
                    1.5692255304681018`}, {{
                    Hold[Global`sc2$$], 0, 
                    Row[{
                    Subscript[
                    RawBoxes["c"], 2], " value"}]}, -1.5692255304681018`, 
                    1.5692255304681018`}, {{
                    Hold[Global`sc3$$], 
                    ArcTan[
                    Rational[7, 8]], 
                    Row[{
                    Subscript[
                    RawBoxes["c"], 3], " value"}]}, -1.5692255304681018`, 
                    1.5692255304681018`}, {{
                    Hold[Global`sc4$$], -ArcTan[
                    Rational[1, 8]], 
                    Row[{
                    Subscript[
                    RawBoxes["c"], 4], " value"}]}, -1.5692255304681018`, 
                    1.5692255304681018`}, {{
                    Hold[CalculateScan`PlotterScanner`Private`SC$$], True, 
                    "show single curve"}, {True, False}}, {{
                    Hold[Global`scTF1$$], True, 
                    Row[{"show ", 
                    Subscript[
                    RawBoxes["c"], 1], " family"}]}, {True, False}}, {{
                    Hold[Global`scColor1$$], 
                    RGBColor[0.237736, 0.340215, 0.575113], " color"}, 
                    RGBColor[1, 0, 0]}, {{
                    Hold[Global`sc1min$$], -ArcTan[
                    Rational[17, 16]], 
                    Subscript[
                    RawBoxes["c"], 1, "min"]}, -1.5692255304681018`, 
                    1.5692255304681018`}, {{
                    Hold[Global`sc1max$$], 
                    ArcTan[
                    Rational[15, 16]], 
                    Subscript[
                    RawBoxes["c"], 1, "max"]}, -1.5692255304681018`, 
                    1.5692255304681018`}, {{
                    Hold[Global`scCount1$$], 12, " curve count"}, 2, 60, 1}, {{
                    Hold[Global`scTF2$$], False, 
                    Row[{"show ", 
                    Subscript[
                    RawBoxes["c"], 2], " family"}]}, {True, False}}, {{
                    Hold[Global`scColor2$$], 
                    RGBColor[
                    0.33311066666666667`, 0.5032283333333333, 
                    0.26154733333333335`], " color"}, 
                    RGBColor[1, 0, 0]}, {{
                    Hold[Global`sc2min$$], Rational[-1, 4] Pi, 
                    Subscript[
                    RawBoxes["c"], 2, "min"]}, -1.5692255304681018`, 
                    1.5692255304681018`}, {{
                    Hold[Global`sc2max$$], Rational[1, 4] Pi, 
                    Subscript[
                    RawBoxes["c"], 2, "max"]}, -1.5692255304681018`, 
                    1.5692255304681018`}, {{
                    Hold[Global`scCount2$$], 12, " curve count"}, 2, 60, 1}, {{
                    Hold[Global`scTF3$$], False, 
                    Row[{"show ", 
                    Subscript[
                    RawBoxes["c"], 3], " family"}]}, {True, False}}, {{
                    Hold[Global`scColor3$$], 
                    RGBColor[
                    0.8562609999999999, 0.742794, 0.31908333333333333`], 
                    " color"}, 
                    RGBColor[1, 0, 0]}, {{
                    Hold[Global`sc3min$$], 
                    ArcTan[
                    Rational[3, 4]], 
                    Subscript[
                    RawBoxes["c"], 3, "min"]}, -1.5692255304681018`, 
                    1.5692255304681018`}, {{
                    Hold[Global`sc3max$$], 
                    ArcTan[
                    Rational[11, 4]], 
                    Subscript[
                    RawBoxes["c"], 3, "max"]}, -1.5692255304681018`, 
                    1.5692255304681018`}, {{
                    Hold[Global`scCount3$$], 12, " curve count"}, 2, 60, 1}, {{
                    Hold[Global`scTF4$$], False, 
                    Row[{"show ", 
                    Subscript[
                    RawBoxes["c"], 4], " family"}]}, {True, False}}, {{
                    Hold[Global`scColor4$$], 
                    RGBColor[0.72987, 0.239399, 0.230961], " color"}, 
                    RGBColor[1, 0, 0]}, {{
                    Hold[Global`sc4min$$], -ArcTan[
                    Rational[5, 4]], 
                    Subscript[
                    RawBoxes["c"], 4, "min"]}, -1.5692255304681018`, 
                    1.5692255304681018`}, {{
                    Hold[Global`sc4max$$], 
                    ArcTan[
                    Rational[3, 4]], 
                    Subscript[
                    RawBoxes["c"], 4, "max"]}, -1.5692255304681018`, 
                    1.5692255304681018`}, {{
                    Hold[Global`scCount4$$], 12, " curve count"}, 2, 60, 1}, {
                   
                    Hold[
                    Style[
                    Overlay[{
                    RawBoxes[
                    PaneBox[
                    GraphicsBox[
                    
                    RasterBox[{{{0, 0, 0, 24}}, {{0, 0, 0, 9}}, {{0, 0, 0, 
                    10}}, {{0, 0, 0, 10}}, {{0, 0, 0, 9}}, {{0, 0, 0, 9}}, {{
                    0, 0, 0, 8}}, {{0, 0, 0, 8}}, {{0, 0, 0, 9}}, {{0, 0, 0, 
                    8}}, {{0, 0, 0, 7}}, {{0, 0, 0, 7}}, {{0, 0, 0, 8}}, {{0, 
                    0, 0, 6}}, {{0, 0, 0, 6}}, {{0, 0, 0, 6}}, {{0, 0, 0, 
                    6}}, {{0, 0, 0, 5}}, {{0, 0, 0, 6}}, {{0, 0, 0, 5}}, {{0, 
                    0, 0, 4}}, {{0, 0, 0, 4}}, {{0, 0, 0, 5}}, {{0, 0, 0, 
                    5}}, {{0, 0, 0, 3}}, {{0, 0, 0, 4}}, {{0, 0, 0, 3}}, {{0, 
                    0, 0, 3}}, {{0, 0, 0, 3}}, {{0, 0, 0, 3}}, {{0, 0, 0, 
                    2}}, {{0, 0, 0, 2}}, {{0, 0, 0, 2}}, {{0, 0, 0, 2}}, {{0, 
                    0, 0, 1}}, {{0, 0, 0, 2}}, {{0, 0, 0, 2}}, {{0, 0, 0, 
                    0}}, {{0, 0, 0, 1}}, {{255, 255, 255, 0}}, {{255, 255, 
                    255, 0}}, {{255, 255, 255, 0}}, {{255, 255, 255, 0}}, {{
                    255, 255, 255, 0}}, {{255, 255, 255, 0}}}, {{0, 45}, {
                    2500, 0}}, {0, 255}, ColorFunction -> RGBColor], 
                    ImageSize -> {2500, 45}, 
                    PlotRange -> {{0, 2500}, {0, 45}}], ImageSize -> 
                    Scaled[1], ScrollPosition -> {0., 0.}]], 
                    Pane[
                    Column[{
                    Row[{
                    Invisible[
                    RawBoxes[
                    GraphicsBox[
                    TagBox[
                    
                    RasterBox[{{{255, 132, 0}, {255, 132, 0}, {255, 132, 0}, {
                    255, 132, 0}, {255, 132, 0}, {255, 132, 0}}, {{255, 132, 
                    0}, {255, 132, 0}, {255, 132, 0}, {255, 132, 0}, {255, 
                    132, 0}, {255, 132, 0}}}, {{0, 2}, {6, 0}}, {0, 255}, 
                    ColorFunction -> RGBColor], 
                    BoxForm`ImageTag[
                    "Byte", ColorSpace -> "RGB", Interleaving -> True], 
                    Selectable -> False], BaseStyle -> "ImageGraphics", 
                    ImageSize -> Magnification[1], ImageSizeRaw -> {6, 2}, 
                    BaselinePosition -> (Scaled[0] -> Center), 
                    PlotRange -> {{0, 6}, {0, 2}}]]], " ", 
                    Column[{"Horizontal plot range", 
                    Row[{
                    Manipulate`Place[1], "  ", 
                    Manipulate`Place[2]}], 
                    Row[{
                    Manipulate`Place[3], "  ", 
                    Manipulate`Place[4]}]}]}], 
                    PaneSelector[{True -> Grid[{{
                    Button[
                    Row[{
                    RawBoxes[
                    GraphicsBox[
                    TagBox[
                    
                    RasterBox[{{{255, 132, 0}, {255, 132, 0}, {255, 132, 0}, {
                    255, 132, 0}, {255, 132, 0}, {255, 132, 0}}, {{255, 132, 
                    0}, {255, 132, 0}, {255, 132, 0}, {255, 132, 0}, {255, 
                    132, 0}, {255, 132, 0}}}, {{0, 2}, {6, 0}}, {0, 255}, 
                    ColorFunction -> RGBColor], 
                    BoxForm`ImageTag[
                    "Byte", ColorSpace -> "RGB", Interleaving -> True], 
                    Selectable -> False], BaseStyle -> "ImageGraphics", 
                    ImageSize -> Magnification[1], ImageSizeRaw -> {6, 2}, 
                    BaselinePosition -> (Scaled[0] -> Center), 
                    PlotRange -> {{0, 6}, {0, 2}}]], " "}], 
                    CalculateUtilities`GraphicsUtilities`Private`more$$ = 
                    False, Appearance -> None, BaseStyle -> {}], 
                    Button[
                    "Fewer controls", 
                    CalculateUtilities`GraphicsUtilities`Private`more$$ = 
                    False, Appearance -> None, BaseStyle -> {}]}, {"", 
                    Item[
                    Column[{
                    Style["Curve parameters", Plain], 
                    Column[{
                    Manipulate`Place[5], 
                    Manipulate`Place[6], 
                    Manipulate`Place[7], 
                    Manipulate`Place[8]}], 
                    Manipulate`Place[9], 
                    Style["Show curve families", Plain], 
                    Column[{
                    Row[{
                    Manipulate`Place[10], " | ", 
                    Manipulate`Place[11]}], 
                    Row[{
                    Manipulate`Place[12], "  ", 
                    Manipulate`Place[13], "  ", 
                    Manipulate`Place[14]}], 
                    Row[{
                    Manipulate`Place[15], " | ", 
                    Manipulate`Place[16]}], 
                    Row[{
                    Manipulate`Place[17], "  ", 
                    Manipulate`Place[18], "  ", 
                    Manipulate`Place[19]}], 
                    Row[{
                    Manipulate`Place[20], " | ", 
                    Manipulate`Place[21]}], 
                    Row[{
                    Manipulate`Place[22], "  ", 
                    Manipulate`Place[23], "  ", 
                    Manipulate`Place[24]}], 
                    Row[{
                    Manipulate`Place[25], " | ", 
                    Manipulate`Place[26]}], 
                    Row[{
                    Manipulate`Place[27], "  ", 
                    Manipulate`Place[28], "  ", 
                    Manipulate`Place[29]}]}]}], ItemSize -> Scaled[1], 
                    Frame -> {None, None, True, None}]}}, FrameStyle -> 
                    GrayLevel[0.9], Alignment -> Left, Spacings -> {0, 0.8}], 
                    False -> Button[
                    Row[{
                    RawBoxes[
                    GraphicsBox[
                    TagBox[
                    
                    RasterBox[{{{255, 255, 255}, {255, 255, 255}, {255, 132, 
                    0}, {255, 132, 0}, {255, 255, 255}, {255, 255, 255}}, {{
                    255, 255, 255}, {255, 255, 255}, {255, 132, 0}, {255, 132,
                     0}, {255, 255, 255}, {255, 255, 255}}, {{255, 132, 0}, {
                    255, 132, 0}, {255, 132, 0}, {255, 132, 0}, {255, 132, 
                    0}, {255, 132, 0}}, {{255, 132, 0}, {255, 132, 0}, {255, 
                    132, 0}, {255, 132, 0}, {255, 132, 0}, {255, 132, 0}}, {{
                    255, 255, 255}, {255, 255, 255}, {255, 132, 0}, {255, 132,
                     0}, {255, 255, 255}, {255, 255, 255}}, {{255, 255, 
                    255}, {255, 255, 255}, {255, 132, 0}, {255, 132, 0}, {255,
                     255, 255}, {255, 255, 255}}}, {{0, 6}, {6, 0}}, {0, 255},
                     ColorFunction -> RGBColor], 
                    BoxForm`ImageTag[
                    "Byte", ColorSpace -> "RGB", Interleaving -> True], 
                    Selectable -> False], BaseStyle -> "ImageGraphics", 
                    ImageSize -> Magnification[1], ImageSizeRaw -> {6, 6}, 
                    BaselinePosition -> (Scaled[0.3] -> Center), 
                    PlotRange -> {{0, 6}, {0, 6}}]], " More controls"}], 
                    CalculateUtilities`GraphicsUtilities`Private`more$$ = 
                    True, Appearance -> None, BaseStyle -> {}]}, 
                    Dynamic[
                    CalculateUtilities`GraphicsUtilities`Private`more$$], 
                    ImageSize -> Automatic]}], 
                    ImageMargins -> {{20, 30}, {10, 10}}]}, {1, 2}, 2, 
                    Alignment -> {Left, Top}]]], 
                    Manipulate`Dump`ThisIsNotAControl}}, Typeset`size$$ = 
                 Automatic, Typeset`update$$ = 0, Typeset`initDone$$ = False, 
                 Typeset`skipInitDone$$ = False, 
                 CalculateUtilities`GraphicsUtilities`Private`more$388622$$ = 
                 False, CalculateScan`PlotterScanner`Private`x1$388623$$ = 0, 
                 CalculateScan`PlotterScanner`Private`x2$388624$$ = 0, 
                 CalculateScan`PlotterScanner`Private`Sa$388625$$ = False, 
                 CalculateScan`PlotterScanner`Private`Sat$388626$$ = False, 
                 Global`sc1$388627$$ = 0, Global`sc2$388628$$ = 0, 
                 Global`sc3$388629$$ = 0, Global`sc4$388630$$ = 0, 
                 CalculateScan`PlotterScanner`Private`SC$388631$$ = False, 
                 Global`sc1min$388632$$ = 0, Global`sc1max$388633$$ = 0, 
                 Global`scCount1$388634$$ = 0, Global`sc2min$388635$$ = 0}, 
                DynamicBox[
                 Manipulate`ManipulateBoxes[
                 2, TraditionalForm, 
                  "Variables" :> {
                   CalculateUtilities`GraphicsUtilities`Private`more$$ = 
                    False, CalculateScan`PlotterScanner`Private`Sa$$ = True, 
                    CalculateScan`PlotterScanner`Private`Sat$$ = False, 
                    CalculateScan`PlotterScanner`Private`SC$$ = True, 
                    Global`sc1$$ = -ArcTan[
                    Rational[1, 32]], Global`sc1max$$ = ArcTan[
                    Rational[15, 16]], Global`sc1min$$ = -ArcTan[
                    Rational[17, 16]], Global`sc2$$ = 0, Global`sc2max$$ = 
                    Rational[1, 4] Pi, Global`sc2min$$ = Rational[-1, 4] Pi, 
                    Global`sc3$$ = ArcTan[
                    Rational[7, 8]], Global`sc3max$$ = ArcTan[
                    Rational[11, 4]], Global`sc3min$$ = ArcTan[
                    Rational[3, 4]], Global`sc4$$ = -ArcTan[
                    Rational[1, 8]], Global`sc4max$$ = ArcTan[
                    Rational[3, 4]], Global`sc4min$$ = -ArcTan[
                    Rational[5, 4]], Global`scColor1$$ = 
                    RGBColor[0.237736, 0.340215, 0.575113], Global`scColor2$$ = 
                    RGBColor[
                    0.33311066666666667`, 0.5032283333333333, 
                    0.26154733333333335`], Global`scColor3$$ = 
                    RGBColor[
                    0.8562609999999999, 0.742794, 0.31908333333333333`], 
                    Global`scColor4$$ = RGBColor[0.72987, 0.239399, 0.230961],
                     Global`scCount1$$ = 12, Global`scCount2$$ = 12, 
                    Global`scCount3$$ = 12, Global`scCount4$$ = 12, 
                    Global`scTF1$$ = True, Global`scTF2$$ = False, 
                    Global`scTF3$$ = False, Global`scTF4$$ = False, 
                    CalculateScan`PlotterScanner`Private`x1$$ = \
-0.7853981633974483, CalculateScan`PlotterScanner`Private`x2$$ = 
                    0.7853981633974483}, "ControllerVariables" :> {
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`more$$, 
                    CalculateUtilities`GraphicsUtilities`Private`more$388622$$\
, False], 
                    Hold[
                    CalculateScan`PlotterScanner`Private`x1$$, 
                    CalculateScan`PlotterScanner`Private`x1$388623$$, 0], 
                    Hold[
                    CalculateScan`PlotterScanner`Private`x2$$, 
                    CalculateScan`PlotterScanner`Private`x2$388624$$, 0], 
                    Hold[
                    CalculateScan`PlotterScanner`Private`Sa$$, 
                    CalculateScan`PlotterScanner`Private`Sa$388625$$, False], 
                    
                    Hold[
                    CalculateScan`PlotterScanner`Private`Sat$$, 
                    CalculateScan`PlotterScanner`Private`Sat$388626$$, False], 
                    Hold[Global`sc1$$, Global`sc1$388627$$, 0], 
                    Hold[Global`sc2$$, Global`sc2$388628$$, 0], 
                    Hold[Global`sc3$$, Global`sc3$388629$$, 0], 
                    Hold[Global`sc4$$, Global`sc4$388630$$, 0], 
                    Hold[
                    CalculateScan`PlotterScanner`Private`SC$$, 
                    CalculateScan`PlotterScanner`Private`SC$388631$$, False], 
                    
                    Hold[Global`sc1min$$, Global`sc1min$388632$$, 0], 
                    Hold[Global`sc1max$$, Global`sc1max$388633$$, 0], 
                    Hold[Global`scCount1$$, Global`scCount1$388634$$, 0], 
                    Hold[Global`sc2min$$, Global`sc2min$388635$$, 0]}, 
                  "OtherVariables" :> {
                   Typeset`show$$, Typeset`bookmarkList$$, 
                    Typeset`bookmarkMode$$, Typeset`animator$$, 
                    Typeset`animvar$$, Typeset`name$$, Typeset`specs$$, 
                    Typeset`size$$, Typeset`update$$, Typeset`initDone$$, 
                    Typeset`skipInitDone$$}, "Body" :> 
                  Module[{
                    CalculateScan`PlotterScanner`Private`x1L$, 
                    CalculateScan`PlotterScanner`Private`x2L$, 
                    CalculateScan`PlotterScanner`Private`xL$, 
                    CalculateScan`PlotterScanner`Private`xU$, 
                    CalculateScan`PlotterScanner`Private`yL$, 
                    CalculateScan`PlotterScanner`Private`yU$, 
                    CalculateScan`PlotterScanner`Private`\[CapitalDelta]y$, 
                    CalculateScan`PlotterScanner`Private`pRY$, 
                    CalculateScan`PlotterScanner`Private`originalCurvePlot$, 
                    CalculateScan`PlotterScanner`Private`\
curveParametersAndColorsToPlot$, 
                    CalculateScan`PlotterScanner`Private`embeddingCurvePlots$,
                     CalculateScan`PlotterScanner`Private`curveParameterLists$\
, CalculateScan`PlotterScanner`Private`colorLists$, 
                    CalculateScan`PlotterScanner`Private`\
functionsToPlotHeldList$}, 
                    CalculateScan`PlotterScanner`Private`\
curveParametersAndColorsToPlot$ = Flatten[
                    N[
                    Join[
                    If[
                    CalculateScan`PlotterScanner`Private`SC$$ === True, {
                    Tan[{Global`sc1$$, Global`sc2$$, Global`sc3$$, 
                    Global`sc4$$}] -> Directive[Gray]}, {}], 
                    Table[
                    If[
                    Part[{Global`scTF1$$, Global`scTF2$$, Global`scTF3$$, 
                    Global`scTF4$$}, CalculateScan`PlotterScanner`Private`j] === 
                    True, 
                    Table[MapAt[Tan[
                    
                    Part[{{Global`sc1min$$, Global`sc1max$$}, {
                    Global`sc2min$$, Global`sc2max$$}, {
                    Global`sc3min$$, Global`sc3max$$}, {
                    Global`sc4min$$, Global`sc4max$$}}, 
                    CalculateScan`PlotterScanner`Private`j, 1]] + ((
                    CalculateScan`PlotterScanner`Private`i - 1) (Tan[
                    
                    Part[{{Global`sc1min$$, Global`sc1max$$}, {
                    Global`sc2min$$, Global`sc2max$$}, {
                    Global`sc3min$$, Global`sc3max$$}, {
                    Global`sc4min$$, Global`sc4max$$}}, 
                    CalculateScan`PlotterScanner`Private`j, 2]] - Tan[
                    
                    Part[{{Global`sc1min$$, Global`sc1max$$}, {
                    Global`sc2min$$, Global`sc2max$$}, {
                    Global`sc3min$$, Global`sc3max$$}, {
                    Global`sc4min$$, Global`sc4max$$}}, 
                    CalculateScan`PlotterScanner`Private`j, 1]]))/(
                    Part[{Global`scCount1$$, Global`scCount2$$, 
                    Global`scCount3$$, Global`scCount4$$}, 
                    CalculateScan`PlotterScanner`Private`j] - 1)& , {
                    Global`sc1$$, Global`sc2$$, Global`sc3$$, Global`sc4$$}, 
                    CalculateScan`PlotterScanner`Private`j] -> 
                    Part[{Global`scColor1$$, Global`scColor2$$, 
                    Global`scColor3$$, Global`scColor4$$}, 
                    CalculateScan`PlotterScanner`Private`j], {
                    CalculateScan`PlotterScanner`Private`i, 1, 
                    Part[{Global`scCount1$$, Global`scCount2$$, 
                    Global`scCount3$$, Global`scCount4$$}, 
                    CalculateScan`PlotterScanner`Private`j] - 1}], {}], {
                    CalculateScan`PlotterScanner`Private`j, 4}]]]]; 
                    If[
                    CalculateScan`PlotterScanner`Private`\
curveParametersAndColorsToPlot$ === {}, 
                    CalculateScan`PlotterScanner`Private`embeddingCurvePlots$ = \
{}, {CalculateScan`PlotterScanner`Private`curveParameterLists$, 
                    CalculateScan`PlotterScanner`Private`colorLists$} = 
                    Transpose[
                    ReplaceAll[
                    Flatten[
                    CalculateScan`PlotterScanner`Private`\
curveParametersAndColorsToPlot$], Rule -> List]]; 
                    CalculateScan`PlotterScanner`Private`x1L$ = 
                    CalculateScan`PlotterScanner`Private`x1$$; 
                    CalculateScan`PlotterScanner`Private`x2L$ = 
                    If[CalculateScan`PlotterScanner`Private`x1$$ == 
                    CalculateScan`PlotterScanner`Private`x2$$, 
                    If[
                    CalculateScan`PlotterScanner`Private`x1$$ >= 0, 
                    CalculateScan`PlotterScanner`Private`x2$$ - 0.01, 
                    CalculateScan`PlotterScanner`Private`x2$$ + 0.01], 
                    CalculateScan`PlotterScanner`Private`x2$$]; 
                    CalculateScan`PlotterScanner`Private`originalCurvePlot$ = 
                    Plot[
                    CompiledFunction[{8, 8., 5468}, {
                    Blank[Real], 
                    Blank[Real], 
                    Blank[Real], 
                    Blank[Real], 
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 1}, {3, 0, 2}, {3, 0, 
                    3}, {3, 0, 4}, {3, 0, 8}}, {{4, {2, 0, 0}}}, {0, 1, 12, 0,
                     0}, {{10, 0, 5}, {16, 5, 0, 5}, {40, 2, 3, 0, 5, 3, 0, 
                    6}, {40, 1, 3, 0, 5, 3, 0, 7}, {16, 1, 6, 8}, {16, 0, 2, 
                    6, 9}, {16, 3, 7, 10}, {16, 0, 4, 7, 11}, {13, 8, 9, 10, 
                    11, 8}, {1}}, 
                    
                    Function[{
                    Global`x, Global`C$789383, Global`C$789384, 
                    Global`C$789385, Global`C$789386}, 
                    
                    Block[{Compile`$199, Compile`$236, Compile`$931}, 
                    Compile`$199 = 4 Global`x; 
                    Compile`$236 = Cos[Compile`$199]; 
                    Compile`$931 = Sin[Compile`$199]; 
                    Global`C$789383 Compile`$236 + (Global`x Global`C$789384) 
                    Compile`$236 + 
                    Global`C$789385 Compile`$931 + (Global`x Global`C$789386) 
                    Compile`$931]], Evaluate][Global`x, 
                    Apply[Sequence, {(-1)/16, 0, 7/4, (-1)/4}]], {Global`x, 
                    
                    Function[{
                    CalculateScan`PlotterScanner`Private`y, 
                    CalculateScan`PlotterScanner`Private`L}, (
                    Sign[CalculateScan`PlotterScanner`Private`y] 
                    CalculateScan`PlotterScanner`Private`L) Tan[
                    Abs[CalculateScan`PlotterScanner`Private`y]]^1][
                    CalculateScan`PlotterScanner`Private`x1L$, 
                    1.5707963267948966`], 
                    
                    Function[{
                    CalculateScan`PlotterScanner`Private`y, 
                    CalculateScan`PlotterScanner`Private`L}, (
                    Sign[CalculateScan`PlotterScanner`Private`y] 
                    CalculateScan`PlotterScanner`Private`L) Tan[
                    Abs[CalculateScan`PlotterScanner`Private`y]]^1][
                    CalculateScan`PlotterScanner`Private`x2L$, 
                    1.5707963267948966`]}, PlotStyle -> 
                    Directive[Black, Thick]]; {{
                    CalculateScan`PlotterScanner`Private`xL$, 
                    CalculateScan`PlotterScanner`Private`xU$}, {
                    CalculateScan`PlotterScanner`Private`yL$, 
                    CalculateScan`PlotterScanner`Private`yU$}} = 
                    FullOptions[
                    CalculateScan`PlotterScanner`Private`originalCurvePlot$, 
                    PlotRange]; 
                    CalculateScan`PlotterScanner`Private`\[CapitalDelta]y$ = 
                    CalculateScan`PlotterScanner`Private`yU$ - 
                    CalculateScan`PlotterScanner`Private`yL$; 
                    CalculateScan`PlotterScanner`Private`pRY$ = {
                    CalculateScan`PlotterScanner`Private`yL$ - 
                    CalculateScan`PlotterScanner`Private`\[CapitalDelta]y$, 
                    CalculateScan`PlotterScanner`Private`yU$ + 
                    CalculateScan`PlotterScanner`Private`\[CapitalDelta]y$}; 
                    CalculateScan`PlotterScanner`Private`originalCurvePlot$ = 
                    Plot[
                    CompiledFunction[{8, 8., 5468}, {
                    Blank[Real], 
                    Blank[Real], 
                    Blank[Real], 
                    Blank[Real], 
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 1}, {3, 0, 2}, {3, 0, 
                    3}, {3, 0, 4}, {3, 0, 8}}, {{4, {2, 0, 0}}}, {0, 1, 12, 0,
                     0}, {{10, 0, 5}, {16, 5, 0, 5}, {40, 2, 3, 0, 5, 3, 0, 
                    6}, {40, 1, 3, 0, 5, 3, 0, 7}, {16, 1, 6, 8}, {16, 0, 2, 
                    6, 9}, {16, 3, 7, 10}, {16, 0, 4, 7, 11}, {13, 8, 9, 10, 
                    11, 8}, {1}}, 
                    
                    Function[{
                    Global`x, Global`C$789383, Global`C$789384, 
                    Global`C$789385, Global`C$789386}, 
                    
                    Block[{Compile`$199, Compile`$236, Compile`$931}, 
                    Compile`$199 = 4 Global`x; 
                    Compile`$236 = Cos[Compile`$199]; 
                    Compile`$931 = Sin[Compile`$199]; 
                    Global`C$789383 Compile`$236 + (Global`x Global`C$789384) 
                    Compile`$236 + 
                    Global`C$789385 Compile`$931 + (Global`x Global`C$789386) 
                    Compile`$931]], Evaluate][Global`x, 
                    Apply[Sequence, {(-1)/16, 0, 7/4, (-1)/4}]], {Global`x, 
                    
                    Function[{
                    CalculateScan`PlotterScanner`Private`y, 
                    CalculateScan`PlotterScanner`Private`L}, (
                    Sign[CalculateScan`PlotterScanner`Private`y] 
                    CalculateScan`PlotterScanner`Private`L) Tan[
                    Abs[CalculateScan`PlotterScanner`Private`y]]^1][
                    CalculateScan`PlotterScanner`Private`x1L$, 
                    1.5707963267948966`], 
                    
                    Function[{
                    CalculateScan`PlotterScanner`Private`y, 
                    CalculateScan`PlotterScanner`Private`L}, (
                    Sign[CalculateScan`PlotterScanner`Private`y] 
                    CalculateScan`PlotterScanner`Private`L) Tan[
                    Abs[CalculateScan`PlotterScanner`Private`y]]^1][
                    CalculateScan`PlotterScanner`Private`x2L$, 
                    1.5707963267948966`]}, PlotStyle -> 
                    Directive[Black, Thick], PlotRange -> 
                    CalculateScan`PlotterScanner`Private`pRY$]; 
                    CalculateScan`PlotterScanner`Private`\
functionsToPlotHeldList$ = ReplaceAll[
                    Apply[Hold, {
                    Map[CalculateScan`PlotterScanner`Private`FED0[Global`x, 
                    Apply[Sequence, #]]& , 
                    CalculateScan`PlotterScanner`Private`curveParameterLists$]\
}], CalculateScan`PlotterScanner`Private`FED0 -> 
                    CompiledFunction[{8, 8., 5468}, {
                    Blank[Real], 
                    Blank[Real], 
                    Blank[Real], 
                    Blank[Real], 
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 1}, {3, 0, 2}, {3, 0, 
                    3}, {3, 0, 4}, {3, 0, 8}}, {{4, {2, 0, 0}}}, {0, 1, 12, 0,
                     0}, {{10, 0, 5}, {16, 5, 0, 5}, {40, 2, 3, 0, 5, 3, 0, 
                    6}, {40, 1, 3, 0, 5, 3, 0, 7}, {16, 1, 6, 8}, {16, 0, 2, 
                    6, 9}, {16, 3, 7, 10}, {16, 0, 4, 7, 11}, {13, 8, 9, 10, 
                    11, 8}, {1}}, 
                    
                    Function[{
                    Global`x, Global`C$789383, Global`C$789384, 
                    Global`C$789385, Global`C$789386}, 
                    
                    Block[{Compile`$199, Compile`$236, Compile`$931}, 
                    Compile`$199 = 4 Global`x; 
                    Compile`$236 = Cos[Compile`$199]; 
                    Compile`$931 = Sin[Compile`$199]; 
                    Global`C$789383 Compile`$236 + (Global`x Global`C$789384) 
                    Compile`$236 + 
                    Global`C$789385 Compile`$931 + (Global`x Global`C$789386) 
                    Compile`$931]], Evaluate]]; 
                    CalculateScan`PlotterScanner`Private`embeddingCurvePlots$ = 
                    Apply[
                    Function[
                    CalculateScan`PlotterScanner`Private`curveList$, 
                    Plot[
                    CalculateScan`PlotterScanner`Private`curveList$, {
                    Global`x, 
                    
                    Function[{
                    CalculateScan`PlotterScanner`Private`y, 
                    CalculateScan`PlotterScanner`Private`L}, (
                    Sign[CalculateScan`PlotterScanner`Private`y] 
                    CalculateScan`PlotterScanner`Private`L) Tan[
                    Abs[CalculateScan`PlotterScanner`Private`y]]^1][
                    CalculateScan`PlotterScanner`Private`x1L$, 
                    1.5707963267948966`], 
                    
                    Function[{
                    CalculateScan`PlotterScanner`Private`y, 
                    CalculateScan`PlotterScanner`Private`L}, (
                    Sign[CalculateScan`PlotterScanner`Private`y] 
                    CalculateScan`PlotterScanner`Private`L) Tan[
                    Abs[CalculateScan`PlotterScanner`Private`y]]^1][
                    CalculateScan`PlotterScanner`Private`x2L$, 
                    1.5707963267948966`]}, 
                    Evaluate[PlotStyle -> Map[Directive[#, 
                    AbsoluteThickness[1]]& , 
                    CalculateScan`PlotterScanner`Private`colorLists$], 
                    PlotRange -> 
                    CalculateScan`PlotterScanner`Private`pRY$]], {HoldAll}], 
                    CalculateScan`PlotterScanner`Private`\
functionsToPlotHeldList$]; Null]; ReplaceAll[
                    Column[{
                    Grid[{{
                    Style["embedding function", 
                    GrayLevel[0.3]], 
                    ReplaceAll[
                    C[1] Cos[4 Global`x] + (Global`x C[2]) Cos[4 Global`x] + 
                    C[3] Sin[4 Global`x] + (Global`x C[4]) Sin[4 Global`x], 
                    C[
                    Pattern[CalculateScan`PlotterScanner`Private`i, 
                    Blank[]]] :> Subscript[
                    RawBoxes["c"], CalculateScan`PlotterScanner`Private`i]]}, {
                    Style["embedding ODE", 
                    GrayLevel[0.3]], 
                    Part[
                    
                    Flatten[{256 Global`y[Global`x] + 
                    32 Derivative[2][Global`y][Global`x] + 
                    Derivative[4][Global`y][Global`x] == 0}], 1]}}, Alignment -> 
                    Left], 
                    If[
                    And[
                    CalculateScan`PlotterScanner`Private`SC$$ === False, 
                    CalculateScan`PlotterScanner`Private`embeddingCurvePlots$ === \
{}], 
                    Style["no curves to show", Gray], 
                    
                    Show[{CalculateScan`PlotterScanner`Private`\
embeddingCurvePlots$, 
                    CalculateScan`PlotterScanner`Private`originalCurvePlot$}, 
                    PlotRange -> {
                    Automatic, CalculateScan`PlotterScanner`Private`pRY$}, 
                    ImageSize -> 360, ImagePadding -> 12, 
                    If[CalculateScan`PlotterScanner`Private`Sa$$, 
                    Apply[Sequence, {Axes -> True, AxesStyle -> Gray}], 
                    Apply[Sequence, {Axes -> False}]], 
                    If[CalculateScan`PlotterScanner`Private`Sat$$, 
                    Apply[Sequence, {Ticks -> True}], 
                    Apply[Sequence, {Ticks -> False}]]]], 
                    If[
                    And[
                    CalculateScan`PlotterScanner`Private`SC$$ === False, 
                    
                    CalculateScan`PlotterScanner`Private`embeddingCurvePlots$ === \
{}], 
                    Apply[Sequence, {}], 
                    Grid[{{
                    Style["\[LongDash]", Bold, Black], 
                    Style["original function", 
                    GrayLevel[0.3]], 
                    ReplaceAll[
                    C[1] Cos[4 Global`x] + (Global`x C[2]) Cos[4 Global`x] + 
                    C[3] Sin[4 Global`x] + (Global`x C[4]) Sin[4 Global`x], {
                    C[1] -> (-1)/16, C[2] -> 0, C[3] -> 7/4, 
                    C[4] -> (-1)/4}]}, 
                    If[CalculateScan`PlotterScanner`Private`SC$$ === True, {
                    Style["\[LongDash]", Bold, Gray], 
                    Style[
                    Row[{
                    Subscript[
                    RawBoxes["c"], 
                    RawBoxes["j"]], "\[Hyphen]values function"}], 
                    GrayLevel[0.3]], 
                    ReplaceAll[
                    C[1] Cos[4 Global`x] + (Global`x C[2]) Cos[4 Global`x] + 
                    C[3] Sin[4 Global`x] + (Global`x C[4]) Sin[4 Global`x], 
                    Apply[Rule, 
                    Transpose[{{
                    C[1], 
                    C[2], 
                    C[3], 
                    C[4]}, 
                    
                    Tan[{Global`sc1$$, Global`sc2$$, Global`sc3$$, 
                    Global`sc4$$}]}], {1}]]}, 
                    Apply[Sequence, {}]], 
                    Apply[Sequence, 
                    DeleteCases[
                    Table[
                    If[
                    Part[{Global`scTF1$$, Global`scTF2$$, Global`scTF3$$, 
                    Global`scTF4$$}, CalculateScan`PlotterScanner`Private`j] === 
                    True, {
                    Style["\[LongDash]", Bold, 
                    
                    Part[{Global`scColor1$$, Global`scColor2$$, 
                    Global`scColor3$$, Global`scColor4$$}, 
                    CalculateScan`PlotterScanner`Private`j]], 
                    Style[
                    Row[{
                    Subscript[
                    RawBoxes["c"], CalculateScan`PlotterScanner`Private`j], 
                    "\[Hyphen]family"}], 
                    GrayLevel[0.3]], 
                    ReplaceAll[
                    HoldForm[
                    C[1] Cos[4 Global`x] + (Global`x C[2]) Cos[4 Global`x] + 
                    C[3] Sin[4 Global`x] + (Global`x C[4]) Sin[4 Global`x]], 
                    Apply[Rule, 
                    Transpose[{{
                    C[1], 
                    C[2], 
                    C[3], 
                    C[4]}, 
                    MapAt[Subscript[
                    RawBoxes["c"], CalculateScan`PlotterScanner`Private`j]& , 
                    
                    
                    Tan[{Global`sc1$$, Global`sc2$$, Global`sc3$$, 
                    Global`sc4$$}], 
                    CalculateScan`PlotterScanner`Private`j]}], {1}]]}, {}], {
                    CalculateScan`PlotterScanner`Private`j, 4}], {}]]}, 
                    Alignment -> Left]]}, 
                    Dividers -> {False, {False, False, False}}], Global`x -> 
                    Global`x934]], 
                  "Specifications" :> {{
                    CalculateUtilities`GraphicsUtilities`Private`more$$, {
                    False, True}, ControlType -> None}, {{
                    CalculateScan`PlotterScanner`Private`x1$$, \
-0.7853981633974483, 
                    Subscript[
                    Style["x", Italic], "min"]}, -1.5692255304681018`, 
                    1.5692255304681018`, ImageSize -> Small, ControlPlacement -> 
                    1}, {{CalculateScan`PlotterScanner`Private`x2$$, 
                    0.7853981633974483, 
                    Subscript[
                    Style["x", Italic], "max"]}, -1.5692255304681018`, 
                    1.5692255304681018`, ImageSize -> Small, ControlPlacement -> 
                    2}, {{CalculateScan`PlotterScanner`Private`Sa$$, True, 
                    "show axes"}, {True, False}, ControlPlacement -> 3}, {{
                    CalculateScan`PlotterScanner`Private`Sat$$, False, 
                    "show ticks"}, {True, False}, ControlPlacement -> 4}, {{
                    Global`sc1$$, -ArcTan[
                    Rational[1, 32]], 
                    Row[{
                    Subscript[
                    RawBoxes["c"], 1], " value"}]}, -1.5692255304681018`, 
                    1.5692255304681018`, ImageSize -> Small, ControlPlacement -> 
                    5}, {{Global`sc2$$, 0, 
                    Row[{
                    Subscript[
                    RawBoxes["c"], 2], " value"}]}, -1.5692255304681018`, 
                    1.5692255304681018`, ImageSize -> Small, ControlPlacement -> 
                    6}, {{Global`sc3$$, 
                    ArcTan[
                    Rational[7, 8]], 
                    Row[{
                    Subscript[
                    RawBoxes["c"], 3], " value"}]}, -1.5692255304681018`, 
                    1.5692255304681018`, ImageSize -> Small, ControlPlacement -> 
                    7}, {{Global`sc4$$, -ArcTan[
                    Rational[1, 8]], 
                    Row[{
                    Subscript[
                    RawBoxes["c"], 4], " value"}]}, -1.5692255304681018`, 
                    1.5692255304681018`, ImageSize -> Small, ControlPlacement -> 
                    8}, {{CalculateScan`PlotterScanner`Private`SC$$, True, 
                    "show single curve"}, {True, False}, ControlPlacement -> 
                    9}, {{Global`scTF1$$, True, 
                    Row[{"show ", 
                    Subscript[
                    RawBoxes["c"], 1], " family"}]}, {True, False}, 
                    ControlPlacement -> 10}, {{Global`scColor1$$, 
                    RGBColor[0.237736, 0.340215, 0.575113], " color"}, 
                    RGBColor[1, 0, 0], ImageSize -> Tiny, ControlPlacement -> 
                    11}, {{Global`sc1min$$, -ArcTan[
                    Rational[17, 16]], 
                    Subscript[
                    RawBoxes["c"], 1, "min"]}, -1.5692255304681018`, 
                    1.5692255304681018`, ImageSize -> Tiny, ControlPlacement -> 
                    12}, {{Global`sc1max$$, 
                    ArcTan[
                    Rational[15, 16]], 
                    Subscript[
                    RawBoxes["c"], 1, "max"]}, -1.5692255304681018`, 
                    1.5692255304681018`, ImageSize -> Tiny, ControlPlacement -> 
                    13}, {{Global`scCount1$$, 12, " curve count"}, 2, 60, 1, 
                    ImageSize -> Tiny, ControlPlacement -> 14}, {{
                    Global`scTF2$$, False, 
                    Row[{"show ", 
                    Subscript[
                    RawBoxes["c"], 2], " family"}]}, {True, False}, 
                    ControlPlacement -> 15}, {{Global`scColor2$$, 
                    RGBColor[
                    0.33311066666666667`, 0.5032283333333333, 
                    0.26154733333333335`], " color"}, 
                    RGBColor[1, 0, 0], ImageSize -> Tiny, ControlPlacement -> 
                    16}, {{Global`sc2min$$, Rational[-1, 4] Pi, 
                    Subscript[
                    RawBoxes["c"], 2, "min"]}, -1.5692255304681018`, 
                    1.5692255304681018`, ImageSize -> Tiny, ControlPlacement -> 
                    17}, {{Global`sc2max$$, Rational[1, 4] Pi, 
                    Subscript[
                    RawBoxes["c"], 2, "max"]}, -1.5692255304681018`, 
                    1.5692255304681018`, ImageSize -> Tiny, ControlPlacement -> 
                    18}, {{Global`scCount2$$, 12, " curve count"}, 2, 60, 1, 
                    ImageSize -> Tiny, ControlPlacement -> 19}, {{
                    Global`scTF3$$, False, 
                    Row[{"show ", 
                    Subscript[
                    RawBoxes["c"], 3], " family"}]}, {True, False}, 
                    ControlPlacement -> 20}, {{Global`scColor3$$, 
                    RGBColor[
                    0.8562609999999999, 0.742794, 0.31908333333333333`], 
                    " color"}, 
                    RGBColor[1, 0, 0], ImageSize -> Tiny, ControlPlacement -> 
                    21}, {{Global`sc3min$$, 
                    ArcTan[
                    Rational[3, 4]], 
                    Subscript[
                    RawBoxes["c"], 3, "min"]}, -1.5692255304681018`, 
                    1.5692255304681018`, ImageSize -> Tiny, ControlPlacement -> 
                    22}, {{Global`sc3max$$, 
                    ArcTan[
                    Rational[11, 4]], 
                    Subscript[
                    RawBoxes["c"], 3, "max"]}, -1.5692255304681018`, 
                    1.5692255304681018`, ImageSize -> Tiny, ControlPlacement -> 
                    23}, {{Global`scCount3$$, 12, " curve count"}, 2, 60, 1, 
                    ImageSize -> Tiny, ControlPlacement -> 24}, {{
                    Global`scTF4$$, False, 
                    Row[{"show ", 
                    Subscript[
                    RawBoxes["c"], 4], " family"}]}, {True, False}, 
                    ControlPlacement -> 25}, {{Global`scColor4$$, 
                    RGBColor[0.72987, 0.239399, 0.230961], " color"}, 
                    RGBColor[1, 0, 0], ImageSize -> Tiny, ControlPlacement -> 
                    26}, {{Global`sc4min$$, -ArcTan[
                    Rational[5, 4]], 
                    Subscript[
                    RawBoxes["c"], 4, "min"]}, -1.5692255304681018`, 
                    1.5692255304681018`, ImageSize -> Tiny, ControlPlacement -> 
                    27}, {{Global`sc4max$$, 
                    ArcTan[
                    Rational[3, 4]], 
                    Subscript[
                    RawBoxes["c"], 4, "max"]}, -1.5692255304681018`, 
                    1.5692255304681018`, ImageSize -> Tiny, ControlPlacement -> 
                    28}, {{Global`scCount4$$, 12, " curve count"}, 2, 60, 1, 
                    ImageSize -> Tiny, ControlPlacement -> 29}, 
                    Style[
                    Overlay[{
                    RawBoxes[
                    PaneBox[
                    GraphicsBox[
                    
                    RasterBox[{{{0, 0, 0, 24}}, {{0, 0, 0, 9}}, {{0, 0, 0, 
                    10}}, {{0, 0, 0, 10}}, {{0, 0, 0, 9}}, {{0, 0, 0, 9}}, {{
                    0, 0, 0, 8}}, {{0, 0, 0, 8}}, {{0, 0, 0, 9}}, {{0, 0, 0, 
                    8}}, {{0, 0, 0, 7}}, {{0, 0, 0, 7}}, {{0, 0, 0, 8}}, {{0, 
                    0, 0, 6}}, {{0, 0, 0, 6}}, {{0, 0, 0, 6}}, {{0, 0, 0, 
                    6}}, {{0, 0, 0, 5}}, {{0, 0, 0, 6}}, {{0, 0, 0, 5}}, {{0, 
                    0, 0, 4}}, {{0, 0, 0, 4}}, {{0, 0, 0, 5}}, {{0, 0, 0, 
                    5}}, {{0, 0, 0, 3}}, {{0, 0, 0, 4}}, {{0, 0, 0, 3}}, {{0, 
                    0, 0, 3}}, {{0, 0, 0, 3}}, {{0, 0, 0, 3}}, {{0, 0, 0, 
                    2}}, {{0, 0, 0, 2}}, {{0, 0, 0, 2}}, {{0, 0, 0, 2}}, {{0, 
                    0, 0, 1}}, {{0, 0, 0, 2}}, {{0, 0, 0, 2}}, {{0, 0, 0, 
                    0}}, {{0, 0, 0, 1}}, {{255, 255, 255, 0}}, {{255, 255, 
                    255, 0}}, {{255, 255, 255, 0}}, {{255, 255, 255, 0}}, {{
                    255, 255, 255, 0}}, {{255, 255, 255, 0}}}, {{0, 45}, {
                    2500, 0}}, {0, 255}, ColorFunction -> RGBColor], 
                    ImageSize -> {2500, 45}, 
                    PlotRange -> {{0, 2500}, {0, 45}}], ImageSize -> 
                    Scaled[1], ScrollPosition -> {0., 0.}]], 
                    Pane[
                    Column[{
                    Row[{
                    Invisible[
                    RawBoxes[
                    GraphicsBox[
                    TagBox[
                    
                    RasterBox[{{{255, 132, 0}, {255, 132, 0}, {255, 132, 0}, {
                    255, 132, 0}, {255, 132, 0}, {255, 132, 0}}, {{255, 132, 
                    0}, {255, 132, 0}, {255, 132, 0}, {255, 132, 0}, {255, 
                    132, 0}, {255, 132, 0}}}, {{0, 2}, {6, 0}}, {0, 255}, 
                    ColorFunction -> RGBColor], 
                    BoxForm`ImageTag[
                    "Byte", ColorSpace -> "RGB", Interleaving -> True], 
                    Selectable -> False], BaseStyle -> "ImageGraphics", 
                    ImageSize -> Magnification[1], ImageSizeRaw -> {6, 2}, 
                    BaselinePosition -> (Scaled[0] -> Center), 
                    PlotRange -> {{0, 6}, {0, 2}}]]], " ", 
                    Column[{"Horizontal plot range", 
                    Row[{
                    Manipulate`Place[1], "  ", 
                    Manipulate`Place[2]}], 
                    Row[{
                    Manipulate`Place[3], "  ", 
                    Manipulate`Place[4]}]}]}], 
                    PaneSelector[{True -> Grid[{{
                    Button[
                    Row[{
                    RawBoxes[
                    GraphicsBox[
                    TagBox[
                    
                    RasterBox[{{{255, 132, 0}, {255, 132, 0}, {255, 132, 0}, {
                    255, 132, 0}, {255, 132, 0}, {255, 132, 0}}, {{255, 132, 
                    0}, {255, 132, 0}, {255, 132, 0}, {255, 132, 0}, {255, 
                    132, 0}, {255, 132, 0}}}, {{0, 2}, {6, 0}}, {0, 255}, 
                    ColorFunction -> RGBColor], 
                    BoxForm`ImageTag[
                    "Byte", ColorSpace -> "RGB", Interleaving -> True], 
                    Selectable -> False], BaseStyle -> "ImageGraphics", 
                    ImageSize -> Magnification[1], ImageSizeRaw -> {6, 2}, 
                    BaselinePosition -> (Scaled[0] -> Center), 
                    PlotRange -> {{0, 6}, {0, 2}}]], " "}], 
                    CalculateUtilities`GraphicsUtilities`Private`more$$ = 
                    False, Appearance -> None, BaseStyle -> {}], 
                    Button[
                    "Fewer controls", 
                    CalculateUtilities`GraphicsUtilities`Private`more$$ = 
                    False, Appearance -> None, BaseStyle -> {}]}, {"", 
                    Item[
                    Column[{
                    Style["Curve parameters", Plain], 
                    Column[{
                    Manipulate`Place[5], 
                    Manipulate`Place[6], 
                    Manipulate`Place[7], 
                    Manipulate`Place[8]}], 
                    Manipulate`Place[9], 
                    Style["Show curve families", Plain], 
                    Column[{
                    Row[{
                    Manipulate`Place[10], " | ", 
                    Manipulate`Place[11]}], 
                    Row[{
                    Manipulate`Place[12], "  ", 
                    Manipulate`Place[13], "  ", 
                    Manipulate`Place[14]}], 
                    Row[{
                    Manipulate`Place[15], " | ", 
                    Manipulate`Place[16]}], 
                    Row[{
                    Manipulate`Place[17], "  ", 
                    Manipulate`Place[18], "  ", 
                    Manipulate`Place[19]}], 
                    Row[{
                    Manipulate`Place[20], " | ", 
                    Manipulate`Place[21]}], 
                    Row[{
                    Manipulate`Place[22], "  ", 
                    Manipulate`Place[23], "  ", 
                    Manipulate`Place[24]}], 
                    Row[{
                    Manipulate`Place[25], " | ", 
                    Manipulate`Place[26]}], 
                    Row[{
                    Manipulate`Place[27], "  ", 
                    Manipulate`Place[28], "  ", 
                    Manipulate`Place[29]}]}]}], ItemSize -> Scaled[1], 
                    Frame -> {None, None, True, None}]}}, FrameStyle -> 
                    GrayLevel[0.9], Alignment -> Left, Spacings -> {0, 0.8}], 
                    False -> Button[
                    Row[{
                    RawBoxes[
                    GraphicsBox[
                    TagBox[
                    
                    RasterBox[{{{255, 255, 255}, {255, 255, 255}, {255, 132, 
                    0}, {255, 132, 0}, {255, 255, 255}, {255, 255, 255}}, {{
                    255, 255, 255}, {255, 255, 255}, {255, 132, 0}, {255, 132,
                     0}, {255, 255, 255}, {255, 255, 255}}, {{255, 132, 0}, {
                    255, 132, 0}, {255, 132, 0}, {255, 132, 0}, {255, 132, 
                    0}, {255, 132, 0}}, {{255, 132, 0}, {255, 132, 0}, {255, 
                    132, 0}, {255, 132, 0}, {255, 132, 0}, {255, 132, 0}}, {{
                    255, 255, 255}, {255, 255, 255}, {255, 132, 0}, {255, 132,
                     0}, {255, 255, 255}, {255, 255, 255}}, {{255, 255, 
                    255}, {255, 255, 255}, {255, 132, 0}, {255, 132, 0}, {255,
                     255, 255}, {255, 255, 255}}}, {{0, 6}, {6, 0}}, {0, 255},
                     ColorFunction -> RGBColor], 
                    BoxForm`ImageTag[
                    "Byte", ColorSpace -> "RGB", Interleaving -> True], 
                    Selectable -> False], BaseStyle -> "ImageGraphics", 
                    ImageSize -> Magnification[1], ImageSizeRaw -> {6, 6}, 
                    BaselinePosition -> (Scaled[0.3] -> Center), 
                    PlotRange -> {{0, 6}, {0, 6}}]], " More controls"}], 
                    CalculateUtilities`GraphicsUtilities`Private`more$$ = 
                    True, Appearance -> None, BaseStyle -> {}]}, 
                    Dynamic[
                    CalculateUtilities`GraphicsUtilities`Private`more$$], 
                    ImageSize -> Automatic]}], 
                    ImageMargins -> {{20, 30}, {10, 10}}]}, {1, 2}, 2, 
                    Alignment -> {Left, Top}]]}, 
                  "Options" :> {
                   ControlPlacement -> Bottom, TrackedSymbols :> Manipulate, 
                    Paneled -> False, ControlPlacement -> Bottom, 
                    FrameMargins -> {{0, 0}, {0, 10}}, Paneled -> False, 
                    AppearanceElements -> {}, 
                    LabelStyle -> {
                    "DialogStyle", FontColor -> GrayLevel[0.25]}}, 
                  "DefaultOptions" :> {}], SingleEvaluation -> True], 
                Initialization :> ({{
                    Attributes[CalculateScan`PlotterScanner`Private`x1L$] = {
                    Temporary}, 
                    Attributes[CalculateScan`PlotterScanner`Private`x2L$] = {
                    Temporary}, 
                    Attributes[CalculateScan`PlotterScanner`Private`xL$] = {
                    Temporary}, 
                    Attributes[CalculateScan`PlotterScanner`Private`xU$] = {
                    Temporary}, 
                    Attributes[CalculateScan`PlotterScanner`Private`yL$] = {
                    Temporary}, 
                    Attributes[CalculateScan`PlotterScanner`Private`yU$] = {
                    Temporary}, 
                    Attributes[
                    CalculateScan`PlotterScanner`Private`\[CapitalDelta]y$] = \
{Temporary}, Attributes[CalculateScan`PlotterScanner`Private`pRY$] = {
                    Temporary}, 
                    Attributes[
                    CalculateScan`PlotterScanner`Private`originalCurvePlot$] = \
{Temporary}, Attributes[
                    CalculateScan`PlotterScanner`Private`\
curveParametersAndColorsToPlot$] = {Temporary}, 
                    Attributes[
                    CalculateScan`PlotterScanner`Private`embeddingCurvePlots$]\
 = {Temporary}, Attributes[
                    CalculateScan`PlotterScanner`Private`curveParameterLists$]\
 = {Temporary}, Attributes[
                    CalculateScan`PlotterScanner`Private`colorLists$] = {
                    Temporary}, 
                    Attributes[
                    CalculateScan`PlotterScanner`Private`\
functionsToPlotHeldList$] = {Temporary}, 
                    Attributes[Compile`$199] = {Temporary}, 
                    Attributes[Compile`$236] = {Temporary}, 
                    Attributes[Compile`$931] = {Temporary}, 
                    Attributes[
                    CalculateScan`PlotterScanner`Private`curveList$] = {
                    Temporary}, Attributes[Subscript] = {NHoldRest}, 
                    Attributes[RawBoxes] = {ReadProtected}, 
                    Attributes[Derivative] = {NHoldAll, ReadProtected}}; {
                    MakeBoxes[Global`x934, 
                    Pattern[CalculateScan`PlotterScanner`Private`form$, 
                    Blank[]]] := "x"}}; Typeset`initDone$$ = True), 
                DynamicModuleValues :> {}, Deinitialization :> None, 
                UntrackedVariables :> {Typeset`size$$}, 
                SynchronousInitialization -> True, 
                UnsavedVariables :> {Typeset`initDone$$}], "Manipulate", 
               Deployed -> True, StripOnInput -> False], TraditionalForm], 
             Manipulate`InterpretManipulate[1]], TraditionalForm]], 
          "Output"]}], 
       XMLElement["dataformats", {}, {}]}]}], Typeset`pod3$$ = XMLElement[
   "pod", {"title" -> "Alternate forms of the integral", "scanner" -> 
     "Integral", "id" -> "AlternateForm", "position" -> "300", "error" -> 
     "false", "numsubpods" -> "3"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {
        "PowerExpand[(-Cos[4 x] - 4 (-7 + x) Sin[4 x])/16, Assumptions -> \
{}]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            StyleBox[
             RowBox[{
               StyleBox[
                RowBox[{
                  RowBox[{"-", 
                    RowBox[{
                    FractionBox["1", "4"], " ", 
                    RowBox[{"(", 
                    RowBox[{"x", "-", "7"}], ")"}], " ", 
                    RowBox[{"sin", "(", 
                    RowBox[{"4", " ", "x"}], ")"}]}]}], "-", 
                  RowBox[{
                    RowBox[{
                    FractionBox["1", "16"]}], " ", 
                    RowBox[{"cos", "(", 
                    RowBox[{"4", " ", "x"}], ")"}]}]}], 
                GrayLevel[0]], "+", 
               StyleBox[
               "constant", FontFamily -> "Helvetica", Magnification -> 
                0.9 Inherited]}], 
             GrayLevel[0.6]], TraditionalForm]], "Output"]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata,formuladata"}]}\
], 
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {"TrigFactor[(-Cos[4 x] - 4 (-7 + x) Sin[4 x])/16]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            StyleBox[
             RowBox[{
               StyleBox[
                RowBox[{
                  FractionBox["1", "16"], " ", 
                  RowBox[{"(", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"28", "-", 
                    RowBox[{"4", " ", "x"}]}], ")"}], " ", 
                    RowBox[{"sin", "(", 
                    RowBox[{"4", " ", "x"}], ")"}]}], "-", 
                    RowBox[{"cos", "(", 
                    RowBox[{"4", " ", "x"}], ")"}]}], ")"}]}], 
                GrayLevel[0]], "+", 
               StyleBox[
               "constant", FontFamily -> "Helvetica", Magnification -> 
                0.9 Inherited]}], 
             GrayLevel[0.6]], TraditionalForm]], "Output"]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata,formuladata"}]}\
], 
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            StyleBox[
             RowBox[{
               StyleBox[
                RowBox[{
                  RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    FractionBox["7", "4"], "-", 
                    FractionBox["x", "4"]}], ")"}], " ", 
                    RowBox[{"sin", "(", 
                    RowBox[{"4", " ", "x"}], ")"}]}], "-", 
                  RowBox[{
                    FractionBox["1", "16"], " ", 
                    RowBox[{"cos", "(", 
                    RowBox[{"4", " ", "x"}], ")"}]}]}], 
                GrayLevel[0]], "+", 
               StyleBox[
               "constant", FontFamily -> "Helvetica", Magnification -> 
                0.9 Inherited]}], 
             GrayLevel[0.6]], TraditionalForm]], "Output"]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,moutput,computabledata,formatteddata,formuladata"}]}], 
     XMLElement["states", {"count" -> "1"}, {
       XMLElement[
       "state", {"name" -> "More", "input" -> "AlternateForm__More"}, {}]}]}],
    Typeset`pod4$$ = XMLElement[
   "pod", {"title" -> "Expanded form", "scanner" -> "Integral", "id" -> 
     "ExpandedForm", "position" -> "400", "error" -> "false", "numsubpods" -> 
     "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {"Expand[(-Cos[4 x] - 4 (-7 + x) Sin[4 x])/16]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            StyleBox[
             RowBox[{
               StyleBox[
                RowBox[{
                  RowBox[{"-", 
                    RowBox[{
                    FractionBox["1", "4"], " ", "x", " ", 
                    RowBox[{"sin", "(", 
                    RowBox[{"4", " ", "x"}], ")"}]}]}], "+", 
                  RowBox[{
                    FractionBox["7", "4"], " ", 
                    RowBox[{"sin", "(", 
                    RowBox[{"4", " ", "x"}], ")"}]}], "-", 
                  RowBox[{
                    RowBox[{
                    FractionBox["1", "16"]}], " ", 
                    RowBox[{"cos", "(", 
                    RowBox[{"4", " ", "x"}], ")"}]}]}], 
                GrayLevel[0]], "+", 
               StyleBox[
               "constant", FontFamily -> "Helvetica", Magnification -> 
                0.9 Inherited]}], 
             GrayLevel[0.6]], TraditionalForm]], "Output"]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,computabledata,formatteddata,formuladata"}]}], 
     XMLElement["states", {"count" -> "1"}, {
       XMLElement[
       "state", {
        "name" -> "Show steps", "input" -> 
         "ExpandedForm__Show steps"}, {}]}]}], Typeset`pod5$$ = XMLElement[
   "pod", {"title" -> "Series expansion of the integral at x=0", "scanner" -> 
     "Series", "id" -> "SeriesExpansionOfTheIntegralAtX=0", "position" -> 
     "500", "error" -> "false", "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {
        "Series[(-Cos[4 x] - 4 (-7 + x) Sin[4 x])/16, {x, 0, 6}]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            InterpretationBox[
             RowBox[{
               RowBox[{"-", 
                 FractionBox["1", "16"]}], "+", 
               RowBox[{"7", " ", "x"}], "-", 
               FractionBox[
                SuperscriptBox["x", "2"], "2"], "-", 
               FractionBox[
                RowBox[{"56", " ", 
                  SuperscriptBox["x", "3"]}], "3"], "+", 
               RowBox[{"2", " ", 
                 SuperscriptBox["x", "4"]}], "+", 
               FractionBox[
                RowBox[{"224", " ", 
                  SuperscriptBox["x", "5"]}], "15"], "-", 
               FractionBox[
                RowBox[{"16", " ", 
                  SuperscriptBox["x", "6"]}], "9"], "+", 
               InterpretationBox[
                RowBox[{"O", "(", 
                  SuperscriptBox["x", "7"], ")"}], 
                SeriesData[$CellContext`x, 0, {}, 0, 7, 1], Editable -> 
                False]}], 
             SeriesData[$CellContext`x, 0, {
               Rational[-1, 16], 7, 
               Rational[-1, 2], 
               Rational[-56, 3], 2, 
               Rational[224, 15], 
               Rational[-16, 9]}, 0, 7, 1], Editable -> False], 
            TraditionalForm]], "Output"]}], 
       XMLElement["dataformats", {}, {"plaintext,minput,moutput"}]}], 
     XMLElement["states", {"count" -> "1"}, {
       XMLElement[
       "state", {
        "name" -> "More terms", "input" -> 
         "SeriesExpansionOfTheIntegralAtX=0__More terms"}, {}]}]}], 
   Typeset`pod6$$ = XMLElement[
   "pod", {"title" -> "Series expansion of the integral at x=\[Infinity]", 
     "scanner" -> "Series", "id" -> 
     "SeriesExpansionOfTheIntegralAtX=Infinity", "position" -> "550", "error" -> 
     "false", "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {
        "Series[(-Cos[4 x] - 4 (-7 + x) Sin[4 x])/16, {x, Infinity, 7}]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            RowBox[{
              FractionBox["1", "16"], " ", 
              RowBox[{"(", 
                RowBox[{
                  RowBox[{
                    RowBox[{"(", 
                    RowBox[{"28", "-", 
                    RowBox[{"4", " ", "x"}]}], ")"}], " ", 
                    RowBox[{"sin", "(", 
                    RowBox[{"4", " ", "x"}], ")"}]}], "-", 
                  RowBox[{"cos", "(", 
                    RowBox[{"4", " ", "x"}], ")"}]}], ")"}]}], 
            TraditionalForm]], "Output"]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata,formuladata"}]}\
]}], Typeset`pod7$$ = XMLElement[
   "pod", {"title" -> "Definite integrals", "scanner" -> "Integral", "id" -> 
     "DefiniteIntegral", "position" -> "600", "error" -> "false", 
     "numsubpods" -> "2"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {"Integrate[(7 - x) Cos[4 x], {x, -Pi/8, Pi/8}]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            RowBox[{
              TagBox[
               RowBox[{
                 SubsuperscriptBox["\[Integral]", 
                  RowBox[{"-", 
                    FractionBox["\[Pi]", "8"]}], 
                  FractionBox["\[Pi]", "8"]], 
                 RowBox[{
                   RowBox[{
                    RowBox[{"(", 
                    RowBox[{"7", "-", "x"}], ")"}], " ", 
                    RowBox[{"cos", "(", 
                    RowBox[{"4", " ", "x"}], ")"}]}], 
                   RowBox[{"\[DifferentialD]", "x"}]}]}], HoldForm], 
              "\[LongEqual]", 
              FractionBox["7", "2"]}], TraditionalForm]], "Output"]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata,formuladata"}]}\
], 
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {"N[Integrate[(7 - x) Cos[4 x], {x, Pi/8, 7}]]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            RowBox[{
              TagBox[
               RowBox[{
                 SubsuperscriptBox["\[Integral]", 
                  FractionBox["\[Pi]", "8"], "7"], 
                 RowBox[{
                   RowBox[{
                    RowBox[{"(", 
                    RowBox[{"7", "-", "x"}], ")"}], " ", 
                    RowBox[{"cos", "(", 
                    RowBox[{"4", " ", "x"}], ")"}]}], 
                   RowBox[{"\[DifferentialD]", "x"}]}]}], HoldForm], 
              "\[LongEqual]", 
              RowBox[{
                FractionBox["1", "32"], " ", 
                RowBox[{"(", 
                  RowBox[{
                    RowBox[{"-", 
                    RowBox[{"56"}]}], "+", "\[Pi]", "-", 
                    RowBox[{"2", " ", 
                    RowBox[{"cos", "(", "28", ")"}]}]}], ")"}]}], 
              "\[TildeTilde]", 
              RowBox[{"-", "1.591662362930721`"}]}], TraditionalForm]], 
          "Output"]}], 
       XMLElement["dataformats", {}, {"plaintext,minput,moutput"}], 
       XMLElement["states", {"count" -> "1"}, {
         XMLElement[
         "state", {
          "name" -> "More digits", "input" -> 
           "DefiniteIntegral___More digits"}, {}]}]}]}], Typeset`pod8$$, 
   Typeset`pod9$$, Typeset`pod10$$, Typeset`pod11$$, Typeset`pod12$$, 
   Typeset`pod13$$, Typeset`pod14$$, Typeset`pod15$$, Typeset`pod16$$, 
   Typeset`pod17$$, Typeset`pod18$$, Typeset`pod19$$, Typeset`pod20$$, 
   Typeset`pod21$$, Typeset`pod22$$, Typeset`pod23$$, Typeset`pod24$$, 
   Typeset`pod25$$, Typeset`pod26$$, Typeset`pod27$$, Typeset`pod28$$, 
   Typeset`pod29$$, Typeset`pod30$$, Typeset`pod31$$, Typeset`pod32$$, 
   Typeset`pod33$$, Typeset`pod34$$, Typeset`pod35$$, Typeset`pod36$$, 
   Typeset`aux1$$ = {True, False, {False, False}, True}, Typeset`aux2$$ = {
   True, False, {False, False, False, False}, True}, Typeset`aux3$$ = {
   True, False, {False, False, False}, True}, Typeset`aux4$$ = {
   True, False, {False}, True}, Typeset`aux5$$ = {True, False, {False}, True},
    Typeset`aux6$$ = {True, False, {False, False}, True}, Typeset`aux7$$ = {
   True, False, {False, False}, True}, Typeset`aux8$$ = {
   True, False, {False}, True}, Typeset`aux9$$ = {True, False, {False}, True},
    Typeset`aux10$$ = {True, False, {False}, True}, Typeset`aux11$$ = {
   True, False, {False}, True}, Typeset`aux12$$ = {
   True, False, {False}, True}, Typeset`aux13$$ = {
   True, False, {False}, True}, Typeset`aux14$$ = {
   True, False, {False}, True}, Typeset`aux15$$ = {
   True, False, {False}, True}, Typeset`aux16$$ = {
   True, False, {False}, True}, Typeset`aux17$$ = {
   True, False, {False}, True}, Typeset`aux18$$ = {
   True, False, {False}, True}, Typeset`aux19$$ = {
   True, False, {False}, True}, Typeset`aux20$$ = {
   True, False, {False}, True}, Typeset`aux21$$ = {
   True, False, {False}, True}, Typeset`aux22$$ = {
   True, False, {False}, True}, Typeset`aux23$$ = {
   True, False, {False}, True}, Typeset`aux24$$ = {
   True, False, {False}, True}, Typeset`aux25$$ = {
   True, False, {False}, True}, Typeset`aux26$$ = {
   True, False, {False}, True}, Typeset`aux27$$ = {
   True, False, {False}, True}, Typeset`aux28$$ = {
   True, False, {False}, True}, Typeset`aux29$$ = {
   True, False, {False}, True}, Typeset`aux30$$ = {
   True, False, {False}, True}, Typeset`aux31$$ = {
   True, False, {False}, True}, Typeset`aux32$$ = {
   True, False, {False}, True}, Typeset`aux33$$ = {
   True, False, {False}, True}, Typeset`aux34$$ = {
   True, False, {False}, True}, Typeset`aux35$$ = {
   True, False, {False}, True}, Typeset`aux36$$ = {
   True, False, {False}, True}, Typeset`asyncpods$$ = {}, 
   Typeset`nonpods$$ = {}, Typeset`initdone$$ = True, 
   Typeset`queryinfo$$ = {{
    "success" -> "true", "error" -> "false", "numpods" -> "6", "datatypes" -> 
     "", "timedout" -> "Integral,Series,Plot,Plotter,Simplification,Sequence",
      "timing" -> "4.344", "parsetiming" -> "0.293", "parsetimedout" -> 
     "false", "recalculate" -> 
     "http://www4c.wolframalpha.com/api/v2/recalc.jsp?id=\
MSP120819h2g631ggbbch0200002dh8a6igab69e93f&s=6", "id" -> 
     "MSP120919h2g631ggbbch02000064a1f0d301f74b06&s=6", "related" -> 
     "http://www4c.wolframalpha.com/api/v2/relatedQueries.jsp?id=\
MSP121019h2g631ggbbch02000020d3dcbih6a6caeh&s=6", "version" -> "2.1"}, {
    "success" -> "true", "error" -> "false", "numpods" -> "2", "datatypes" -> 
     "", "timedout" -> "Integral", "timing" -> "4.532", "parsetiming" -> "0.",
      "parsetimedout" -> "false", "recalculate" -> "", "id" -> "", "related" -> 
     "", "version" -> "2.1"}}, Typeset`sessioninfo$$ = {
   "TimeZone" -> -6., 
    "Date" -> {2011, 8, 31, 10, 6, 36.852497`8.31904189885156}, "Line" -> 6, 
    "SessionID" -> 23093400895694277690}, Typeset`showpods$$ = {1, 2, 3, 4, 5,
    6, 7}, Typeset`failedpods$$ = {8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 
   19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36}, 
   Typeset`chosen$$ = {}, Typeset`open$$ = False, Typeset`newq$$ = 
   "Integrate[(7-x) * Cos[4x],x]"}, 
   DynamicBox[ToBoxes[
     AlphaIntegration`FormatAlphaResults[
      Dynamic[{
       2, {Typeset`pod1$$, Typeset`pod2$$, Typeset`pod3$$, Typeset`pod4$$, 
         Typeset`pod5$$, Typeset`pod6$$, Typeset`pod7$$, Typeset`pod8$$, 
         Typeset`pod9$$, Typeset`pod10$$, Typeset`pod11$$, Typeset`pod12$$, 
         Typeset`pod13$$, Typeset`pod14$$, Typeset`pod15$$, Typeset`pod16$$, 
         Typeset`pod17$$, Typeset`pod18$$, Typeset`pod19$$, Typeset`pod20$$, 
         Typeset`pod21$$, Typeset`pod22$$, Typeset`pod23$$, Typeset`pod24$$, 
         Typeset`pod25$$, Typeset`pod26$$, Typeset`pod27$$, Typeset`pod28$$, 
         Typeset`pod29$$, Typeset`pod30$$, Typeset`pod31$$, Typeset`pod32$$, 
         Typeset`pod33$$, Typeset`pod34$$, Typeset`pod35$$, 
         Typeset`pod36$$}, {
        Typeset`aux1$$, Typeset`aux2$$, Typeset`aux3$$, Typeset`aux4$$, 
         Typeset`aux5$$, Typeset`aux6$$, Typeset`aux7$$, Typeset`aux8$$, 
         Typeset`aux9$$, Typeset`aux10$$, Typeset`aux11$$, Typeset`aux12$$, 
         Typeset`aux13$$, Typeset`aux14$$, Typeset`aux15$$, Typeset`aux16$$, 
         Typeset`aux17$$, Typeset`aux18$$, Typeset`aux19$$, Typeset`aux20$$, 
         Typeset`aux21$$, Typeset`aux22$$, Typeset`aux23$$, Typeset`aux24$$, 
         Typeset`aux25$$, Typeset`aux26$$, Typeset`aux27$$, Typeset`aux28$$, 
         Typeset`aux29$$, Typeset`aux30$$, Typeset`aux31$$, Typeset`aux32$$, 
         Typeset`aux33$$, Typeset`aux34$$, Typeset`aux35$$, Typeset`aux36$$}, 
        Typeset`chosen$$, Typeset`open$$, Typeset`elements$$, Typeset`q$$, 
        Typeset`opts$$, Typeset`nonpods$$, Typeset`queryinfo$$, 
        Typeset`sessioninfo$$, Typeset`showpods$$, Typeset`failedpods$$, 
        Typeset`newq$$}]], StandardForm],
    ImageSizeCache->{680., {1337., 1342.}},
    TrackedSymbols:>{Typeset`showpods$$, Typeset`failedpods$$}],
   DynamicModuleValues:>{},
   Initialization:>If[
     Not[Typeset`initdone$$], AlphaIntegration`DoAsyncInitialization[
       Hold[{
        2, {Typeset`pod1$$, Typeset`pod2$$, Typeset`pod3$$, Typeset`pod4$$, 
          Typeset`pod5$$, Typeset`pod6$$, Typeset`pod7$$, Typeset`pod8$$, 
          Typeset`pod9$$, Typeset`pod10$$, Typeset`pod11$$, Typeset`pod12$$, 
          Typeset`pod13$$, Typeset`pod14$$, Typeset`pod15$$, Typeset`pod16$$, 
          Typeset`pod17$$, Typeset`pod18$$, Typeset`pod19$$, Typeset`pod20$$, 
          Typeset`pod21$$, Typeset`pod22$$, Typeset`pod23$$, Typeset`pod24$$, 
          Typeset`pod25$$, Typeset`pod26$$, Typeset`pod27$$, Typeset`pod28$$, 
          Typeset`pod29$$, Typeset`pod30$$, Typeset`pod31$$, Typeset`pod32$$, 
          Typeset`pod33$$, Typeset`pod34$$, Typeset`pod35$$, 
          Typeset`pod36$$}, {
         Typeset`aux1$$, Typeset`aux2$$, Typeset`aux3$$, Typeset`aux4$$, 
          Typeset`aux5$$, Typeset`aux6$$, Typeset`aux7$$, Typeset`aux8$$, 
          Typeset`aux9$$, Typeset`aux10$$, Typeset`aux11$$, Typeset`aux12$$, 
          Typeset`aux13$$, Typeset`aux14$$, Typeset`aux15$$, Typeset`aux16$$, 
          Typeset`aux17$$, Typeset`aux18$$, Typeset`aux19$$, Typeset`aux20$$, 
          Typeset`aux21$$, Typeset`aux22$$, Typeset`aux23$$, Typeset`aux24$$, 
          Typeset`aux25$$, Typeset`aux26$$, Typeset`aux27$$, Typeset`aux28$$, 
          Typeset`aux29$$, Typeset`aux30$$, Typeset`aux31$$, Typeset`aux32$$, 
          Typeset`aux33$$, Typeset`aux34$$, Typeset`aux35$$, Typeset`aux36$$},
          Typeset`chosen$$, Typeset`open$$, Typeset`elements$$, Typeset`q$$, 
         Typeset`opts$$, Typeset`nonpods$$, Typeset`queryinfo$$, 
         Typeset`sessioninfo$$, Typeset`showpods$$, Typeset`failedpods$$, 
         Typeset`newq$$, 
         "http://www4c.wolframalpha.com/api/v2/recalc.jsp?id=\
MSP120819h2g631ggbbch0200002dh8a6igab69e93f&s=6", Typeset`asyncpods$$}]]; 
     Typeset`asyncpods$$ = {}; Typeset`initdone$$ = True],
   SynchronousInitialization->False],
  BaseStyle->{Deployed -> True},
  DeleteWithContents->True,
  Editable->False,
  SelectWithContents->True]], "Print",
 CellMargins->{{20, 10}, {Inherited, Inherited}},
 CellChangeTimes->{3.523795597476433*^9}]
}, Closed]],

Cell[CellGroupData[{

Cell[BoxData[
 NamespaceBox["WolframAlphaQueryResults",
  DynamicModuleBox[{Typeset`q$$ = "Integrate[ E^(2*x) Sin[2 x],x]", 
   Typeset`opts$$ = {
   AppearanceElements -> {"Extrusion", "Warnings", "Assumptions", "Pods"}, 
    Asynchronous -> All, 
    Method -> {
     "ExtrusionChosen" -> {
       "Fast parse", "Fast parse", 1, 0, "Input", 
        "Integrate[E^(2*x)*Sin[2*x], x]"}, "ExtrusionOpen" -> False, 
      "Formats" -> {"cell", "minput", "moutput", "msound", "dataformats"}}, 
    PodStates -> {"IndefiniteIntegral__Show steps"}}, Typeset`elements$$ = {
   "Extrusion", "Warnings", "Assumptions", "Pods"}, Typeset`pod1$$ = 
   XMLElement[
   "pod", {"title" -> "Indefinite integrals", "scanner" -> "Integral", "id" -> 
     "IndefiniteIntegral", "position" -> "100", "error" -> "false", 
     "numsubpods" -> "2", "primary" -> "true"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["minput", {}, {"Integrate[E^(2 x) Sin[2 x], x]"}], 
       XMLElement["moutput", {}, {"(E^(2 x) (-Cos[2 x] + Sin[2 x]))/4"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            RowBox[{
              TagBox[
               TagBox[
                RowBox[{"\[Integral]", 
                  RowBox[{
                    RowBox[{
                    SuperscriptBox["\[ExponentialE]", 
                    RowBox[{"2", " ", "x"}]], " ", 
                    RowBox[{"sin", "(", 
                    RowBox[{"2", " ", "x"}], ")"}]}], 
                    RowBox[{"\[DifferentialD]", "x"}]}]}], HoldForm], 
               PolynomialForm[#, TraditionalOrder -> False]& ], 
              "\[LongEqual]", 
              StyleBox[
               RowBox[{
                 StyleBox[
                  RowBox[{
                    FractionBox["1", "4"], " ", 
                    SuperscriptBox["\[ExponentialE]", 
                    RowBox[{"2", " ", "x"}]], " ", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"sin", "(", 
                    RowBox[{"2", " ", "x"}], ")"}], "-", 
                    RowBox[{"cos", "(", 
                    RowBox[{"2", " ", "x"}], ")"}]}], ")"}]}], 
                  GrayLevel[0]], "+", 
                 StyleBox[
                 "constant", FontFamily -> "Helvetica", Magnification -> 
                  0.9 Inherited]}], 
               GrayLevel[0.6]]}], TraditionalForm]], "Output"]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata,formuladata"}]}\
], 
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["cell", {"compressed" -> True, "string" -> False}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             GridBox[{{
                StyleBox[
                 StyleBox[
                 "\"Possible intermediate steps:\"", 
                  LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                  0, StripOnInput -> False], FontColor -> GrayLevel[0.5], 
                 FontSize -> Smaller, StripOnInput -> False]}, {
                InterpretationBox[
                 Cell[
                  BoxData[
                   FormBox[
                    TagBox[
                    RowBox[{"\[Integral]", 
                    RowBox[{
                    RowBox[{
                    SuperscriptBox["\[ExponentialE]", 
                    RowBox[{"2", " ", "x"}]], " ", 
                    RowBox[{"sin", "(", 
                    RowBox[{"2", " ", "x"}], ")"}]}], 
                    RowBox[{"\[DifferentialD]", "x"}]}]}], HoldForm], 
                    TraditionalForm]]], 
                 ExpressionCell[
                  HoldForm[
                   Integrate[E^(2 Global`x) Sin[2 Global`x], Global`x]]]]}, {
                StyleBox[
                 StyleBox[
                  TemplateBox[{"\"For the integrand \"", 
                    InterpretationBox[
                    Cell[
                    BoxData[
                    FormBox[
                    RowBox[{
                    SuperscriptBox["\[ExponentialE]", 
                    RowBox[{"2", " ", "x"}]], " ", 
                    RowBox[{"sin", "(", 
                    RowBox[{"2", " ", "x"}], ")"}]}], TraditionalForm]]], 
                    ExpressionCell[E^(2 Global`x) Sin[2 Global`x]]], 
                    "\", substitute \"", 
                    InterpretationBox[
                    Cell[
                    BoxData[
                    FormBox[
                    RowBox[{"u", "\[LongEqual]", 
                    RowBox[{"2", " ", "x"}]}], TraditionalForm]]], 
                    ExpressionCell[Global`u == 2 Global`x]], "\" and \"", 
                    InterpretationBox[
                    Cell[
                    BoxData[
                    FormBox[
                    RowBox[{
                    
                    RowBox[{
                    "\[DifferentialD]", "\[NegativeVeryThinSpace]", "u"}], 
                    "\[LongEqual]", "2"}], TraditionalForm]]], 
                    ExpressionCell[
                    CalculateScan`StepByStepIntegrate`CommonFunctions`dd[
                    Global`u] == 2]], 
                    InterpretationBox[
                    Cell[
                    BoxData[
                    FormBox[
                    
                    RowBox[{
                    "\[DifferentialD]", "\[NegativeVeryThinSpace]", "x"}], 
                    TraditionalForm]]], 
                    ExpressionCell[
                    CalculateScan`StepByStepIntegrate`CommonFunctions`dd[
                    Global`x]]], "\":\""}, "Row", 
                   DisplayFunction -> (
                    RowBox[{#, "\[InvisibleSpace]", #2, 
                    "\[InvisibleSpace]", #3, "\[InvisibleSpace]", #4, 
                    "\[InvisibleSpace]", #5, "\[InvisibleSpace]", #6, 
                    "\[InvisibleSpace]", #7, "\[InvisibleSpace]", #8}]& ), 
                   InterpretationFunction -> (RowBox[{
                    StyleBox[
                    "Row", FontFamily -> "Bitstream Vera Sans", 
                    FontSize -> -1 + Inherited], "[", 
                    RowBox[{"{", 
                    RowBox[{#, ",", #2, ",", #3, ",", #4, ",", #5, ",", #6, 
                    ",", #7, ",", #8}], "}"}], "]"}]& )], 
                  LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                  0, StripOnInput -> False], FontColor -> GrayLevel[0.5], 
                 FontSize -> Smaller, StripOnInput -> False]}, {
                InterpretationBox[
                 Cell[
                  BoxData[
                   FormBox[
                    RowBox[{
                    TagBox["\"\"", HoldForm], "\[LongEqual]", 
                    RowBox[{
                    FractionBox["1", "2"], 
                    RowBox[{"\[Integral]", 
                    RowBox[{
                    RowBox[{
                    SuperscriptBox["\[ExponentialE]", "u"], " ", 
                    RowBox[{"sin", "(", "u", ")"}]}], 
                    RowBox[{"\[DifferentialD]", "u"}]}]}]}]}], 
                    TraditionalForm]]], 
                 ExpressionCell[
                 HoldForm[""] == 
                  Rational[1, 2] 
                   CalculateScan`StepByStepIntegrate`CommonFunctions`IntRun[
                    E^Global`u Sin[Global`u], Global`u]]]}, {
                StyleBox[
                 StyleBox[
                  TemplateBox[{"\"For the integrand \"", 
                    InterpretationBox[
                    Cell[
                    BoxData[
                    FormBox[
                    RowBox[{
                    SuperscriptBox["\[ExponentialE]", "u"], " ", 
                    RowBox[{"sin", "(", "u", ")"}]}], TraditionalForm]]], 
                    ExpressionCell[E^Global`u Sin[Global`u]]], 
                    "\", use the formula \"", 
                    RowBox[{
                    TagBox[
                    RowBox[{"\[Integral]", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"exp", "(", 
                    RowBox[{"\[Alpha]", " ", "u"}], ")"}], " ", 
                    RowBox[{"sin", "(", 
                    RowBox[{"\[Beta]", " ", "u"}], ")"}]}], 
                    RowBox[{"\[DifferentialD]", "u"}]}]}], HoldForm], 
                    "\[LongEqual]", 
                    TagBox[
                    FractionBox[
                    RowBox[{
                    RowBox[{"exp", "(", 
                    RowBox[{"\[Alpha]", " ", "u"}], ")"}], " ", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"-", "\[Beta]"}], " ", 
                    RowBox[{"cos", "(", 
                    RowBox[{"\[Beta]", " ", "u"}], ")"}]}], "+", 
                    RowBox[{"\[Alpha]", " ", 
                    RowBox[{"sin", "(", 
                    RowBox[{"\[Beta]", " ", "u"}], ")"}]}]}], ")"}]}], 
                    RowBox[{
                    SuperscriptBox["\[Alpha]", "2"], "+", 
                    SuperscriptBox["\[Beta]", "2"]}]], HoldForm]}], "\":\""}, 
                   "Row", DisplayFunction -> (
                    RowBox[{#, "\[InvisibleSpace]", #2, 
                    "\[InvisibleSpace]", #3, "\[InvisibleSpace]", #4, 
                    "\[InvisibleSpace]", #5}]& ), 
                   InterpretationFunction -> (RowBox[{
                    StyleBox[
                    "Row", FontFamily -> "Bitstream Vera Sans", 
                    FontSize -> -1 + Inherited], "[", 
                    RowBox[{"{", 
                    RowBox[{#, ",", #2, ",", #3, ",", #4, ",", #5}], "}"}], 
                    "]"}]& )], LinebreakAdjustments -> {1, 100, 1, 0, 100}, 
                  LineIndent -> 0, StripOnInput -> False], FontColor -> 
                 GrayLevel[0.5], FontSize -> Smaller, StripOnInput -> 
                 False]}, {
                InterpretationBox[
                 Cell[
                  BoxData[
                   FormBox[
                    RowBox[{
                    TagBox["\"\"", HoldForm], "\[LongEqual]", 
                    StyleBox[
                    RowBox[{
                    StyleBox[
                    RowBox[{
                    RowBox[{
                    FractionBox["1", "4"], " ", 
                    SuperscriptBox["\[ExponentialE]", "u"], " ", 
                    RowBox[{"sin", "(", "u", ")"}]}], "-", 
                    RowBox[{
                    FractionBox["1", "4"], " ", 
                    SuperscriptBox["\[ExponentialE]", "u"], " ", 
                    RowBox[{"cos", "(", "u", ")"}]}]}], 
                    GrayLevel[0]], "+", 
                    StyleBox[
                    "constant", FontFamily -> "Helvetica", Magnification -> 
                    0.9 Inherited]}], 
                    GrayLevel[0.6]]}], TraditionalForm]]], 
                 ExpressionCell[
                 HoldForm[""] == 
                  CalculateScan`StepByStepIntegrate`integralPlusC[(
                    Rational[-1, 4] E^Global`u) 
                    Cos[Global`u] + (Rational[1, 4] E^Global`u) 
                    Sin[Global`u]]]]}, {
                StyleBox[
                 StyleBox[
                  TemplateBox[{"\"Substitute back for \"", 
                    InterpretationBox[
                    Cell[
                    BoxData[
                    FormBox[
                    RowBox[{"u", "\[LongEqual]", 
                    RowBox[{"2", " ", "x"}]}], TraditionalForm]]], 
                    ExpressionCell[Global`u == 2 Global`x]], "\":\""}, "Row", 
                   DisplayFunction -> (
                    RowBox[{#, "\[InvisibleSpace]", #2, 
                    "\[InvisibleSpace]", #3}]& ), 
                   InterpretationFunction -> (RowBox[{
                    StyleBox[
                    "Row", FontFamily -> "Bitstream Vera Sans", 
                    FontSize -> -1 + Inherited], "[", 
                    RowBox[{"{", 
                    RowBox[{#, ",", #2, ",", #3}], "}"}], "]"}]& )], 
                  LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                  0, StripOnInput -> False], FontColor -> GrayLevel[0.5], 
                 FontSize -> Smaller, StripOnInput -> False]}, {
                InterpretationBox[
                 Cell[
                  BoxData[
                   FormBox[
                    RowBox[{
                    TagBox["\"\"", HoldForm], "\[LongEqual]", 
                    StyleBox[
                    RowBox[{
                    StyleBox[
                    RowBox[{
                    RowBox[{
                    FractionBox["1", "4"], " ", 
                    SuperscriptBox["\[ExponentialE]", 
                    RowBox[{"2", " ", "x"}]], " ", 
                    RowBox[{"sin", "(", 
                    RowBox[{"2", " ", "x"}], ")"}]}], "-", 
                    RowBox[{
                    FractionBox["1", "4"], " ", 
                    SuperscriptBox["\[ExponentialE]", 
                    RowBox[{"2", " ", "x"}]], " ", 
                    RowBox[{"cos", "(", 
                    RowBox[{"2", " ", "x"}], ")"}]}]}], 
                    GrayLevel[0]], "+", 
                    StyleBox[
                    "constant", FontFamily -> "Helvetica", Magnification -> 
                    0.9 Inherited]}], 
                    GrayLevel[0.6]]}], TraditionalForm]]], 
                 ExpressionCell[
                 HoldForm[""] == 
                  CalculateScan`StepByStepIntegrate`integralPlusC[(
                    Rational[-1, 4] E^(2 Global`x)) 
                    Cos[2 Global`x] + (Rational[1, 4] E^(2 Global`x)) 
                    Sin[2 Global`x]]]]}, {
                StyleBox[
                 StyleBox[
                 "\"Which is equal to:\"", 
                  LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                  0, StripOnInput -> False], FontColor -> GrayLevel[0.5], 
                 FontSize -> Smaller, StripOnInput -> False]}, {
                InterpretationBox[
                 Cell[
                  BoxData[
                   FormBox[
                    RowBox[{
                    TagBox["\"\"", HoldForm], "\[LongEqual]", 
                    StyleBox[
                    RowBox[{
                    StyleBox[
                    RowBox[{
                    FractionBox["1", "4"], " ", 
                    SuperscriptBox["\[ExponentialE]", 
                    RowBox[{"2", " ", "x"}]], " ", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"sin", "(", 
                    RowBox[{"2", " ", "x"}], ")"}], "-", 
                    RowBox[{"cos", "(", 
                    RowBox[{"2", " ", "x"}], ")"}]}], ")"}]}], 
                    GrayLevel[0]], "+", 
                    StyleBox[
                    "constant", FontFamily -> "Helvetica", Magnification -> 
                    0.9 Inherited]}], 
                    GrayLevel[0.6]]}], TraditionalForm]]], 
                 ExpressionCell[
                 HoldForm[""] == 
                  CalculateScan`StepByStepIntegrate`integralPlusC[(
                    Rational[1, 4] E^(2 Global`x)) (-Cos[2 Global`x] + 
                    Sin[2 Global`x])]]]}}, 
              GridBoxAlignment -> {"Columns" -> {{Left}}}, 
              GridBoxItemSize -> {
               "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
              GridBoxSpacings -> {
               "Columns" -> {{None}}, "Rows" -> {None, {Plain, 1}}}], 
             "Column"], TraditionalForm]], "Output"]}], 
       XMLElement[
       "dataformats", {}, {"plaintext,computabledata,formatteddata"}]}], 
     XMLElement["states", {"count" -> "1"}, {
       XMLElement[
       "state", {
        "name" -> "Hide steps", "input" -> 
         "IndefiniteIntegral__Hide steps"}, {}]}]}], Typeset`pod2$$ = 
   XMLElement[
   "pod", {"title" -> "Plots of the integral", "scanner" -> "Integral", "id" -> 
     "Plot of the integral", "position" -> "200", "error" -> "false", 
     "numsubpods" -> "4"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {
        "Plot[(E^(2 x) (-Cos[2 x] + Sin[2 x]))/4, {x, -2.3, 2.3}]"}], 
       XMLElement["cell", {"compressed" -> True, "string" -> False}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             FormBox[
              StyleBox[
               
               DynamicModuleBox[{
                Global`max83$$ = 0.5, Global`min82$$ = -0.5, 
                 CalculateUtilities`GraphicsUtilities`Private`more$$ = False, 
                 Typeset`show$$ = True, Typeset`bookmarkList$$ = {}, 
                 Typeset`bookmarkMode$$ = "Menu", Typeset`animator$$, 
                 Typeset`animvar$$ = 1, Typeset`name$$ = "\"untitled\"", 
                 Typeset`specs$$ = {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`more$$], {
                    False, True}}, {{
                    Hold[Global`min82$$], -0.5, "min"}, -1, 1}, {{
                    Hold[Global`max83$$], 0.5, "max"}, -1, 1}, {
                    Hold[
                    Style[
                    Overlay[{
                    RawBoxes[
                    PaneBox[
                    GraphicsBox[
                    
                    RasterBox[{{{0, 0, 0, 24}}, {{0, 0, 0, 9}}, {{0, 0, 0, 
                    10}}, {{0, 0, 0, 10}}, {{0, 0, 0, 9}}, {{0, 0, 0, 9}}, {{
                    0, 0, 0, 8}}, {{0, 0, 0, 8}}, {{0, 0, 0, 9}}, {{0, 0, 0, 
                    8}}, {{0, 0, 0, 7}}, {{0, 0, 0, 7}}, {{0, 0, 0, 8}}, {{0, 
                    0, 0, 6}}, {{0, 0, 0, 6}}, {{0, 0, 0, 6}}, {{0, 0, 0, 
                    6}}, {{0, 0, 0, 5}}, {{0, 0, 0, 6}}, {{0, 0, 0, 5}}, {{0, 
                    0, 0, 4}}, {{0, 0, 0, 4}}, {{0, 0, 0, 5}}, {{0, 0, 0, 
                    5}}, {{0, 0, 0, 3}}, {{0, 0, 0, 4}}, {{0, 0, 0, 3}}, {{0, 
                    0, 0, 3}}, {{0, 0, 0, 3}}, {{0, 0, 0, 3}}, {{0, 0, 0, 
                    2}}, {{0, 0, 0, 2}}, {{0, 0, 0, 2}}, {{0, 0, 0, 2}}, {{0, 
                    0, 0, 1}}, {{0, 0, 0, 2}}, {{0, 0, 0, 2}}, {{0, 0, 0, 
                    0}}, {{0, 0, 0, 1}}, {{255, 255, 255, 0}}, {{255, 255, 
                    255, 0}}, {{255, 255, 255, 0}}, {{255, 255, 255, 0}}, {{
                    255, 255, 255, 0}}, {{255, 255, 255, 0}}}, {{0, 45}, {
                    2500, 0}}, {0, 255}, ColorFunction -> RGBColor], 
                    ImageSize -> {2500, 45}, 
                    PlotRange -> {{0, 2500}, {0, 45}}], ImageSize -> 
                    Scaled[1], ScrollPosition -> {0., 0.}]], 
                    Pane[
                    Column[{
                    Grid[{{
                    Manipulate`Place[1], 
                    Manipulate`Place[2]}}]}], 
                    ImageMargins -> {{20, 30}, {10, 10}}]}, {1, 2}, 2, 
                    Alignment -> {Left, Top}]]], 
                    Manipulate`Dump`ThisIsNotAControl}}, Typeset`size$$ = 
                 Automatic, Typeset`update$$ = 0, Typeset`initDone$$ = False, 
                 Typeset`skipInitDone$$ = False, 
                 CalculateUtilities`GraphicsUtilities`Private`more$135311$$ = 
                 False, Global`min82$135316$$ = 0, Global`max83$135317$$ = 0}, 
                DynamicBox[
                 Manipulate`ManipulateBoxes[
                 2, TraditionalForm, 
                  "Variables" :> {
                   Global`max83$$ = 0.5, Global`min82$$ = -0.5, 
                    CalculateUtilities`GraphicsUtilities`Private`more$$ = 
                    False}, "ControllerVariables" :> {
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`more$$, 
                    CalculateUtilities`GraphicsUtilities`Private`more$135311$$\
, False], 
                    Hold[Global`min82$$, Global`min82$135316$$, 0], 
                    Hold[Global`max83$$, Global`max83$135317$$, 0]}, 
                  "OtherVariables" :> {
                   Typeset`show$$, Typeset`bookmarkList$$, 
                    Typeset`bookmarkMode$$, Typeset`animator$$, 
                    Typeset`animvar$$, Typeset`name$$, Typeset`specs$$, 
                    Typeset`size$$, Typeset`update$$, Typeset`initDone$$, 
                    Typeset`skipInitDone$$}, "Body" :> Function[Null, 
                    CalculateUtilities`GraphicsUtilities`Private`post$135303[
                    Plot[
                    SlotSequence[1]]], 
                    HoldAll][(Rational[1, 4] 
                    E^(2 Global`x)) (-Cos[2 Global`x] + Sin[2 Global`x]), {
                    Global`x, 0. + 
                    2.4810356340999866` 
                    Tan[1.5040801783846716` Global`min82$$], 0. + 
                    2.4810356340999866` 
                    Tan[1.5040801783846716` 
                    If[Global`min82$$ == Global`max83$$, 
                    Global`min82$$ + (2.3207963267948966` - 
                    2.3207963267948966`)/1000, Global`max83$$]]}, 
                    LabelStyle -> {FontFamily -> "Bitstream Charter"}, 
                    WorkingPrecision -> MachinePrecision, 
                    PlotRange -> {Automatic, Automatic}, Ticks -> Automatic, 
                    ImageSize -> 200, AxesLabel -> {
                    RawBoxes[
                    FormBox["x", TraditionalForm]], None}], 
                  "Specifications" :> {{
                    CalculateUtilities`GraphicsUtilities`Private`more$$, {
                    False, True}, ControlType -> None}, {{
                    Global`min82$$, -0.5, "min"}, -1, 1, ImageSize -> Tiny, 
                    ControlPlacement -> 1}, {{Global`max83$$, 0.5, "max"}, -1,
                     1, ImageSize -> Tiny, ControlPlacement -> 2}, 
                    Style[
                    Overlay[{
                    RawBoxes[
                    PaneBox[
                    GraphicsBox[
                    
                    RasterBox[{{{0, 0, 0, 24}}, {{0, 0, 0, 9}}, {{0, 0, 0, 
                    10}}, {{0, 0, 0, 10}}, {{0, 0, 0, 9}}, {{0, 0, 0, 9}}, {{
                    0, 0, 0, 8}}, {{0, 0, 0, 8}}, {{0, 0, 0, 9}}, {{0, 0, 0, 
                    8}}, {{0, 0, 0, 7}}, {{0, 0, 0, 7}}, {{0, 0, 0, 8}}, {{0, 
                    0, 0, 6}}, {{0, 0, 0, 6}}, {{0, 0, 0, 6}}, {{0, 0, 0, 
                    6}}, {{0, 0, 0, 5}}, {{0, 0, 0, 6}}, {{0, 0, 0, 5}}, {{0, 
                    0, 0, 4}}, {{0, 0, 0, 4}}, {{0, 0, 0, 5}}, {{0, 0, 0, 
                    5}}, {{0, 0, 0, 3}}, {{0, 0, 0, 4}}, {{0, 0, 0, 3}}, {{0, 
                    0, 0, 3}}, {{0, 0, 0, 3}}, {{0, 0, 0, 3}}, {{0, 0, 0, 
                    2}}, {{0, 0, 0, 2}}, {{0, 0, 0, 2}}, {{0, 0, 0, 2}}, {{0, 
                    0, 0, 1}}, {{0, 0, 0, 2}}, {{0, 0, 0, 2}}, {{0, 0, 0, 
                    0}}, {{0, 0, 0, 1}}, {{255, 255, 255, 0}}, {{255, 255, 
                    255, 0}}, {{255, 255, 255, 0}}, {{255, 255, 255, 0}}, {{
                    255, 255, 255, 0}}, {{255, 255, 255, 0}}}, {{0, 45}, {
                    2500, 0}}, {0, 255}, ColorFunction -> RGBColor], 
                    ImageSize -> {2500, 45}, 
                    PlotRange -> {{0, 2500}, {0, 45}}], ImageSize -> 
                    Scaled[1], ScrollPosition -> {0., 0.}]], 
                    Pane[
                    Column[{
                    Grid[{{
                    Manipulate`Place[1], 
                    Manipulate`Place[2]}}]}], 
                    ImageMargins -> {{20, 30}, {10, 10}}]}, {1, 2}, 2, 
                    Alignment -> {Left, Top}]]}, 
                  "Options" :> {
                   TrackedSymbols -> True, ControlPlacement -> Bottom, 
                    FrameMargins -> {{0, 0}, {0, 10}}, Paneled -> False, 
                    AppearanceElements -> {}, 
                    LabelStyle -> {
                    "DialogStyle", FontColor -> GrayLevel[0.25]}}, 
                  "DefaultOptions" :> {}], SingleEvaluation -> True], 
                Initialization :> (ReleaseHold[
                   Hold[
                   CalculateUtilities`GraphicsUtilities`Private`WACleanTicks[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Blank[]]] := 
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`res, 
                    CalculateUtilities`GraphicsUtilities`Private`unitformat}, 
                    CalculateUtilities`GraphicsUtilities`Private`res = 
                    ReplaceAll[
                    ReplaceAll[
                    Part[
                    DeleteCases[
                    ReplaceAll[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Alternatives[
                    Style, Global`UnitNumberForm, NumberForm] -> (#& )], {
                    Blank[], "", 
                    BlankNullSequence[]}], All, 
                    Span[1, 2]], Superscript[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[Integer]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`p, 
                    Blank[Integer]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`b^
                    CalculateUtilities`GraphicsUtilities`Private`p], Row[{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    BlankSequence[]]}, "\[Times]"] :> 
                    Times[CalculateUtilities`GraphicsUtilities`Private`a]]; If[
                    MatchQ[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, All, 2], 
                    Condition[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`quants, {
                    Alternatives[
                    BlankSequence[Global`ShortQuantity], 
                    BlankSequence[Global`Quantity]]}], Length[
                    Union[
                    Map[
                    Global`UnitObjectPart, 
                    CalculateUtilities`GraphicsUtilities`Private`quants]]] == 
                    1]], CalculateUtilities`GraphicsUtilities`Private`\
unitformat = Global`ToCDFQuantityFunction[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, 1, 2]]; 
                    CalculateUtilities`GraphicsUtilities`Private`unitformat -> 
                    Thread[{
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, All, 1], 
                    Global`QuantityPart[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, All, 2], 
                    Global`UnitObjectPart[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, 1, 
                    2]]]}], 
                    CalculateUtilities`GraphicsUtilities`Private`res]]; 
                    Options[
                    CalculateUtilities`GraphicsUtilities`Private`post$135303] = \
{"ReturnInteractiveTypes" -> False, "Nearest" -> Automatic}; 
                    CalculateUtilities`GraphicsUtilities`Private`post$135303[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Blank[Graphics]], 
                    OptionsPattern[]] := 
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`lines, 
                    CalculateUtilities`GraphicsUtilities`Private`pts, 
                    CalculateUtilities`GraphicsUtilities`Private`gg, 
                    CalculateUtilities`GraphicsUtilities`Private`type, 
                    CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r, 
                    CalculateUtilities`GraphicsUtilities`Private`oldepilog, 
                    CalculateUtilities`GraphicsUtilities`Private`range, 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines, 
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines,
                     CalculateUtilities`GraphicsUtilities`Private`\
neareststyle = OptionValue["Nearest"]}, 
                    CalculateUtilities`GraphicsUtilities`Private`oldepilog = 
                    Replace[
                    ReplaceAll[Epilog, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]], 
                    Epilog -> Sequence[]]; Switch[
                    ReplaceAll[{Frame, Axes}, 
                    Options[
                    CalculateUtilities`GraphicsUtilities`Private`g]], {True, 
                    Blank[]}, 
                    CalculateUtilities`GraphicsUtilities`Private`type = 
                    Frame; {
                    CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r} = 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, 
                    ReplaceAll[FrameTicks, 
                    Options[
                    CalculateUtilities`GraphicsUtilities`Private`g]]], {
                    Blank[], True}, 
                    CalculateUtilities`GraphicsUtilities`Private`type = 
                    Axes; {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l} = 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, 
                    ReplaceAll[Ticks, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]]], 
                    Blank[], 
                    CalculateUtilities`GraphicsUtilities`Private`type = None]; 
                    If[
                    And[
                    CalculateUtilities`GraphicsUtilities`Private`type === 
                    Frame, 
                    Or[
                    Not[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`t === None, 
                    CalculateUtilities`GraphicsUtilities`Private`b === 
                    CalculateUtilities`GraphicsUtilities`Private`t]], 
                    Not[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`r === None, 
                    CalculateUtilities`GraphicsUtilities`Private`l === 
                    CalculateUtilities`GraphicsUtilities`Private`r]]]], 
                    CalculateUtilities`GraphicsUtilities`Private`type = None]; 
                    If[
                    TrueQ[
                    OptionValue["ReturnInteractiveTypes"]], 
                    Which[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`type === 
                    None, CalculateUtilities`GraphicsUtilities`Private`b === 
                    None, CalculateUtilities`GraphicsUtilities`Private`l === 
                    None], {}, 
                    FreeQ[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Alternatives[Line, Point]], {}, True, {
                    "Tooltips", "Coordinates"}], If[
                    FreeQ[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Alternatives[Line, Point]], 
                    Return[CalculateUtilities`GraphicsUtilities`Private`g]]; 
                    CalculateUtilities`GraphicsUtilities`Private`gg = 
                    Normal[CalculateUtilities`GraphicsUtilities`Private`g]; 
                    CalculateUtilities`GraphicsUtilities`Private`pts = 
                    Partition[
                    Flatten[
                    Cases[
                    Part[CalculateUtilities`GraphicsUtilities`Private`gg, 1], 
                    Point[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Blank[]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`a, 
                    Infinity]], 2]; 
                    If[Length[
                    CalculateUtilities`GraphicsUtilities`Private`pts] < 2, 
                    CalculateUtilities`GraphicsUtilities`Private`lines = Cases[
                    Part[CalculateUtilities`GraphicsUtilities`Private`gg, 1], 
                    
                    Blank[Line], Infinity]; 
                    If[CalculateUtilities`GraphicsUtilities`Private`lines === \
{}, 
                    Return[CalculateUtilities`GraphicsUtilities`Private`g]]; 
                    CalculateUtilities`GraphicsUtilities`Private`pts = Flatten[
                    Cases[
                    CalculateUtilities`GraphicsUtilities`Private`lines, Line[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Blank[]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`a, Infinity],
                     1]; If[
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle === 
                    Automatic, If[
                    CalculateUtilities`GraphicsUtilities`Private`orderedLines[
                    CalculateUtilities`GraphicsUtilities`Private`lines], 
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle = 
                    "1D", CalculateUtilities`GraphicsUtilities`Private`\
neareststyle = "2D"]; Null], 
                    If[
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle === 
                    Automatic, 
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle = 
                    "2D"]]; 
                    CalculateUtilities`GraphicsUtilities`Private`range = 
                    Replace[
                    ReplaceAll[PlotRange, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]], 
                    Except[{{
                    PatternTest[
                    Blank[], NumberQ], 
                    PatternTest[
                    Blank[], NumberQ]}, {
                    PatternTest[
                    Blank[], NumberQ], 
                    PatternTest[
                    Blank[], NumberQ]}}] :> {
                    Through[
                    {Min, Max}[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    1]]], 
                    Through[
                    {Min, Max}[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    2]]]}]; CalculateUtilities`GraphicsUtilities`Private`b = 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[CalculateUtilities`GraphicsUtilities`Private`b, 
                    First[CalculateUtilities`GraphicsUtilities`Private`range], 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    1]]; CalculateUtilities`GraphicsUtilities`Private`l = 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[CalculateUtilities`GraphicsUtilities`Private`l, 
                    Last[CalculateUtilities`GraphicsUtilities`Private`range], 
                    
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    2]]; CalculateUtilities`GraphicsUtilities`Private`\
oldgridlines = ReplaceAll[GridLines, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]]; 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines = 
                    With[{CalculateUtilities`GraphicsUtilities`Private`gray = 
                    GrayLevel[0.7]}, 
                    Replace[
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines,\
 {Pattern[CalculateUtilities`GraphicsUtilities`Private`a, {
                    Blank[List], 
                    Blank[List]}] :> Dynamic[
                    Join[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Replace[
                    MousePosition[{"Graphics", Graphics}, None], {
                    None -> {{}, {}}, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`x, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`y, 
                    Blank[]]} :> {{{
                    CalculateUtilities`GraphicsUtilities`Private`x, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}, {{
                    CalculateUtilities`GraphicsUtilities`Private`y, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}}}], 
                    2]], {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Blank[List]], Automatic} :> 
                    With[{CalculateUtilities`GraphicsUtilities`Private`\
divisions = {CalculateUtilities`GraphicsUtilities`Private`a, 
                    FindDivisions[
                    Last[CalculateUtilities`GraphicsUtilities`Private`range], 
                    7]}}, 
                    Dynamic[
                    Join[
                    CalculateUtilities`GraphicsUtilities`Private`divisions, 
                    Replace[
                    MousePosition[{"Graphics", Graphics}, None], {
                    None -> {{}, {}}, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`x, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`y, 
                    Blank[]]} :> {{{
                    CalculateUtilities`GraphicsUtilities`Private`x, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}, {{
                    CalculateUtilities`GraphicsUtilities`Private`y, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}}}], 
                    2]]], Blank[] -> Dynamic[
                    
                    Map[{{#, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}& , 
                    MousePosition[{"Graphics", Graphics}, None]]]}]]; If[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`type === 
                    None, CalculateUtilities`GraphicsUtilities`Private`b === 
                    None, CalculateUtilities`GraphicsUtilities`Private`l === 
                    None], 
                    Show[
                    CalculateUtilities`GraphicsUtilities`Private`g, GridLines -> 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines, 
                    If[
                    MatchQ[
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines, 
                    Alternatives[None, GridLines]], 
                    Method -> {"GridLinesInFront" -> True}, 
                    Apply[Sequence, {}]]], 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`nf = 
                    If[CalculateUtilities`GraphicsUtilities`Private`\
neareststyle === "1D", 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`n = 
                    Nearest[Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 1] -> 
                    CalculateUtilities`GraphicsUtilities`Private`pts]}, 
                    CalculateUtilities`GraphicsUtilities`Private`n[
                    Part[#, 1]]& ], 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`n = 
                    Nearest[Transpose[
                    Transpose[
                    CalculateUtilities`GraphicsUtilities`Private`pts]/Abs[
                    Apply[
                    Subtract, 
                    CalculateUtilities`GraphicsUtilities`Private`range, {
                    1}]]] -> 
                    CalculateUtilities`GraphicsUtilities`Private`pts], 
                    CalculateUtilities`GraphicsUtilities`Private`scale = Abs[
                    Apply[
                    Subtract, 
                    CalculateUtilities`GraphicsUtilities`Private`range, {
                    1}]]}, CalculateUtilities`GraphicsUtilities`Private`n[#/
                    CalculateUtilities`GraphicsUtilities`Private`scale]& ]], 
                    CalculateUtilities`GraphicsUtilities`Private`left = 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`bottom = 
                    CalculateUtilities`GraphicsUtilities`Private`b}, 
                    Show[
                    CalculateUtilities`GraphicsUtilities`Private`g, GridLines -> 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines, 
                    If[
                    MatchQ[
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines, 
                    Alternatives[None, GridLines]], 
                    Method -> {"GridLinesInFront" -> True}, 
                    Apply[Sequence, {}]], 
                    Epilog -> {
                    CalculateUtilities`GraphicsUtilities`Private`oldepilog, 
                    Dynamic[
                    
                    DynamicModule[{
                    CalculateUtilities`GraphicsUtilities`Private`pt = 
                    CalculateUtilities`GraphicsUtilities`Private`nf[
                    MousePosition[{"Graphics", Graphics}, {0, 0}]], 
                    CalculateUtilities`GraphicsUtilities`Private`scaled = 
                    MousePosition[{"GraphicsScaled", Graphics}, None]}, 
                    If[
                    CalculateUtilities`GraphicsUtilities`Private`scaled === 
                    None, {}, {
                    Text[
                    Style[
                    Row[{
                    CalculateUtilities`GraphicsUtilities`Private`bottom[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pt, 1, 1]], 
                    CalculateUtilities`GraphicsUtilities`Private`left[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pt, 1, 2]]}, 
                    ","], 12], 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pt, 1], {
                    1.5 Sign[Part[
                    CalculateUtilities`GraphicsUtilities`Private`scaled, 1] - 
                    0.5], 0}, Background -> White], 
                    AbsolutePointSize[7], 
                    Point[CalculateUtilities`GraphicsUtilities`Private`pt], 
                    White, 
                    AbsolutePointSize[5], 
                    Point[
                    CalculateUtilities`GraphicsUtilities`Private`pt]}]]]}]]]]]\
; CalculateUtilities`GraphicsUtilities`Private`post$135303[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Blank[]], 
                    BlankNullSequence[]] := 
                    CalculateUtilities`GraphicsUtilities`Private`g; 
                    CalculateUtilities`GraphicsUtilities`Private`orderedLines[{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`l, 
                    BlankSequence[Line]]}] := 
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`ordered, 
                    CalculateUtilities`GraphicsUtilities`Private`intervals}, 
                    CalculateUtilities`GraphicsUtilities`Private`ordered = 
                    Apply[And, 
                    Map[OrderedQ[
                    Part[#, 1, All, 1]]& , 
                    Hold[CalculateUtilities`GraphicsUtilities`Private`l]]]; If[
                    Not[
                    TrueQ[
                    CalculateUtilities`GraphicsUtilities`Private`ordered]], 
                    Return[False]]; 
                    CalculateUtilities`GraphicsUtilities`Private`intervals = 
                    Part[{CalculateUtilities`GraphicsUtilities`Private`l}, 
                    All, 1, {1, -1}, 1]; Length[
                    Apply[
                    Interval, 
                    CalculateUtilities`GraphicsUtilities`Private`intervals]] === 
                    Length[CalculateUtilities`GraphicsUtilities`Private`\
intervals]]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, 
                    Alternatives[Automatic, FrameTicks]] = {
                    Identity, Identity, Identity, Identity}; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`l, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`t, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`r, 
                    Blank[]]}] := 
                    Map[CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction, {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r}]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, {{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`l, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`r, 
                    Blank[]]}, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`t, 
                    Blank[]]}}] := 
                    Map[CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction, {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r}]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, 
                    Blank[]] = {None, None, None, None}; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, 
                    Alternatives[Automatic, Ticks]] = {Identity, Identity}; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`h, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`v, 
                    Blank[]]}] := 
                    Map[CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction, {CalculateUtilities`GraphicsUtilities`Private`h, 
                    CalculateUtilities`GraphicsUtilities`Private`v}]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, 
                    Blank[]] = {None, None}; 
                    CalculateUtilities`GraphicsUtilities`Private`CDFCleanTicks[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Blank[]]] := ReplaceAll[
                    ReplaceAll[
                    Part[
                    DeleteCases[
                    ReplaceAll[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Alternatives[Style, NumberForm] -> (#& )], {
                    Blank[], "", 
                    BlankNullSequence[]}], All, 
                    Span[1, 2]], Superscript[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[Integer]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`p, 
                    Blank[Integer]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`b^
                    CalculateUtilities`GraphicsUtilities`Private`p], Row[{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    BlankSequence[]]}, "\[Times]"] :> 
                    Times[CalculateUtilities`GraphicsUtilities`Private`a]]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks$, 
                    Blank[]]] := 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    CalculateUtilities`GraphicsUtilities`Private`WACleanTicks[
                    CalculateUtilities`GraphicsUtilities`Private`ticks$]]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[None] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[True] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[Automatic] = Identity; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[All] = Identity; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[Pattern[CalculateUtilities`GraphicsUtilities`Private`func, 
                    Blank[]] -> 
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Blank[]]] := Replace[
                    
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[CalculateUtilities`GraphicsUtilities`Private`ticks], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`f, 
                    Except[None]] :> 
                    Composition[
                    CalculateUtilities`GraphicsUtilities`Private`func, 
                    CalculateUtilities`GraphicsUtilities`Private`f]]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[{}] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {
                    Repeated[{
                    Blank[Integer], 
                    Blank[String]}]}]] := Which[
                    Quiet[
                    MatchQ[
                    Apply[SameQ, 
                    Map[Part[
                    DateList[#], 
                    Span[2, All]]& , 
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {
                    2}], {1}], {
                    Repeated[True]}]], DateString, 
                    Apply[And, 
                    StringMatchQ[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, All, 
                    2], NumberString]], 
                    
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Transpose[{
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, All, 
                    1], 
                    ToExpression[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, All, 
                    2]]}]], True, None]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {
                    Repeated[{
                    PatternTest[
                    Blank[], NumericQ], 
                    PatternTest[
                    Blank[], NumericQ]}]}]] := Which[
                    MatchQ[
                    Apply[
                    Equal, CalculateUtilities`GraphicsUtilities`Private`ticks,\
 {1}], {
                    Repeated[True]}], Identity, 
                    MatchQ[
                    
                    Apply[# == Log[#2]& , 
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {1}], {
                    Repeated[True]}], Exp, 
                    TrueQ[
                    Quiet[
                    Apply[Equal, 
                    Apply[Divide, Transpose[
                    Rest[CalculateUtilities`GraphicsUtilities`Private`ticks]] - 
                    Part[CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    1]]]]], 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`slope = 
                    Apply[Divide, 
                    Apply[Subtract, 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {-1, 
                    1}]]]}, 
                    SetPrecision[(# - Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 1, 
                    1])/CalculateUtilities`GraphicsUtilities`Private`slope + 
                    Part[CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    1, 2], 3]& ], True, None]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Blank[]] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`type, 
                    Blank[]], 
                    BlankNullSequence[]] := 
                    CalculateUtilities`GraphicsUtilities`Private`type; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[Identity, {
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`min, 
                    Blank[]], 
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`max, 
                    Blank[]]}, 
                    Blank[]] := 
                    With[{CalculateUtilities`GraphicsUtilities`Private`nf = 
                    CalculateUtilities`GraphicsUtilities`Private`numberForm, 
                    CalculateUtilities`GraphicsUtilities`Private`acc = 
                    Floor[Max[
                    Ceiling[Log[10, 
                    Max[
                    
                    Abs[{CalculateUtilities`GraphicsUtilities`Private`min, 
                    CalculateUtilities`GraphicsUtilities`Private`max}]]] - 
                    Log[10, (CalculateUtilities`GraphicsUtilities`Private`max - 
                    CalculateUtilities`GraphicsUtilities`Private`min)/100]], 
                    3] - RealExponent[
                    Max[
                    
                    Abs[{CalculateUtilities`GraphicsUtilities`Private`min, 
                    CalculateUtilities`GraphicsUtilities`Private`max}]]]]}, 
                    CalculateUtilities`GraphicsUtilities`Private`nf[#, 
                    CalculateUtilities`GraphicsUtilities`Private`acc]& ]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[Exp, {
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`min, 
                    Blank[]], 
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`max, 
                    Blank[]]}, 
                    Blank[]] := 
                    With[{CalculateUtilities`GraphicsUtilities`Private`prec = 
                    Max[
                    Ceiling[Log[10, 
                    Max[
                    
                    Abs[{CalculateUtilities`GraphicsUtilities`Private`min, 
                    CalculateUtilities`GraphicsUtilities`Private`max}]]] - 
                    Log[10, (CalculateUtilities`GraphicsUtilities`Private`max - 
                    CalculateUtilities`GraphicsUtilities`Private`min)/100]], 
                    3]}, Quiet[
                    RawBoxes[
                    ToBoxes[
                    NumberForm[
                    Exp[#], 
                    CalculateUtilities`GraphicsUtilities`Private`prec]]]]& ]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[DateString, {
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`min, 
                    Blank[]], 
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`max, 
                    Blank[]]}, 
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`pts, 
                    Blank[]]] := 
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`dates, 
                    CalculateUtilities`GraphicsUtilities`Private`spec}, 
                    CalculateUtilities`GraphicsUtilities`Private`dates = 
                    Map[DateList, 
                    CalculateUtilities`GraphicsUtilities`Private`pts]; 
                    CalculateUtilities`GraphicsUtilities`Private`spec = Switch[
                    Map[Length, 
                    Map[Union, 
                    Transpose[
                    CalculateUtilities`GraphicsUtilities`Private`dates]]], {
                    Blank[], 1, 1, 
                    BlankSequence[]}, {"Year"}, {
                    Blank[], 
                    Blank[], 1, 
                    BlankSequence[]}, {"MonthNameShort", " ", "Year"}, 
                    Blank[], {
                    "DayShort", " ", "MonthNameShort", " ", "Year"}]; 
                    If[(CalculateUtilities`GraphicsUtilities`Private`max - 
                    CalculateUtilities`GraphicsUtilities`Private`min)/
                    31536000 > 25, 
                    CalculateUtilities`GraphicsUtilities`Private`spec = {
                    "Year"}]; 
                    With[{CalculateUtilities`GraphicsUtilities`Private`s = 
                    CalculateUtilities`GraphicsUtilities`Private`spec}, 
                    DateString[#, 
                    CalculateUtilities`GraphicsUtilities`Private`s]& ]]; 
                    CalculateUtilities`GraphicsUtilities`Private`numberForm = 
                    Function[{
                    CalculateUtilities`GraphicsUtilities`Private`a, 
                    CalculateUtilities`GraphicsUtilities`Private`acc}, 
                    Quiet[
                    RawBoxes[
                    ToBoxes[
                    NumberForm[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Max[1, 
                    Ceiling[
                    RealExponent[
                    CalculateUtilities`GraphicsUtilities`Private`a] + 
                    CalculateUtilities`GraphicsUtilities`Private`acc]], 
                    ExponentFunction -> (Null& ), 
                    NumberFormat -> (StringReplace[#, StringExpression[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`s, 
                    BlankSequence[]], ".", EndOfString] -> 
                    CalculateUtilities`GraphicsUtilities`Private`s]& )]]]]]]]; 
                 Typeset`initDone$$ = True), DynamicModuleValues :> {}, 
                Deinitialization :> None, 
                UntrackedVariables :> {Typeset`size$$}, 
                SynchronousInitialization -> True, 
                UnsavedVariables :> {Typeset`initDone$$}], "Manipulate", 
               Deployed -> True, StripOnInput -> False], TraditionalForm], 
             Manipulate`InterpretManipulate[1]], TraditionalForm]], 
          "Output"]}], 
       XMLElement["dataformats", {}, {"minput"}]}], 
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {
        "Plot[(E^(2 x) (-Cos[2 x] + Sin[2 x]))/4, {x, -14, 14}]"}], 
       XMLElement["cell", {"compressed" -> True, "string" -> False}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             FormBox[
              StyleBox[
               
               DynamicModuleBox[{
                Global`max85$$ = 0.5, Global`min84$$ = -0.5, 
                 CalculateUtilities`GraphicsUtilities`Private`more$$ = False, 
                 Typeset`show$$ = True, Typeset`bookmarkList$$ = {}, 
                 Typeset`bookmarkMode$$ = "Menu", Typeset`animator$$, 
                 Typeset`animvar$$ = 1, Typeset`name$$ = "\"untitled\"", 
                 Typeset`specs$$ = {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`more$$], {
                    False, True}}, {{
                    Hold[Global`min84$$], -0.5, "min"}, -1, 1}, {{
                    Hold[Global`max85$$], 0.5, "max"}, -1, 1}, {
                    Hold[
                    Style[
                    Overlay[{
                    RawBoxes[
                    PaneBox[
                    GraphicsBox[
                    
                    RasterBox[{{{0, 0, 0, 24}}, {{0, 0, 0, 9}}, {{0, 0, 0, 
                    10}}, {{0, 0, 0, 10}}, {{0, 0, 0, 9}}, {{0, 0, 0, 9}}, {{
                    0, 0, 0, 8}}, {{0, 0, 0, 8}}, {{0, 0, 0, 9}}, {{0, 0, 0, 
                    8}}, {{0, 0, 0, 7}}, {{0, 0, 0, 7}}, {{0, 0, 0, 8}}, {{0, 
                    0, 0, 6}}, {{0, 0, 0, 6}}, {{0, 0, 0, 6}}, {{0, 0, 0, 
                    6}}, {{0, 0, 0, 5}}, {{0, 0, 0, 6}}, {{0, 0, 0, 5}}, {{0, 
                    0, 0, 4}}, {{0, 0, 0, 4}}, {{0, 0, 0, 5}}, {{0, 0, 0, 
                    5}}, {{0, 0, 0, 3}}, {{0, 0, 0, 4}}, {{0, 0, 0, 3}}, {{0, 
                    0, 0, 3}}, {{0, 0, 0, 3}}, {{0, 0, 0, 3}}, {{0, 0, 0, 
                    2}}, {{0, 0, 0, 2}}, {{0, 0, 0, 2}}, {{0, 0, 0, 2}}, {{0, 
                    0, 0, 1}}, {{0, 0, 0, 2}}, {{0, 0, 0, 2}}, {{0, 0, 0, 
                    0}}, {{0, 0, 0, 1}}, {{255, 255, 255, 0}}, {{255, 255, 
                    255, 0}}, {{255, 255, 255, 0}}, {{255, 255, 255, 0}}, {{
                    255, 255, 255, 0}}, {{255, 255, 255, 0}}}, {{0, 45}, {
                    2500, 0}}, {0, 255}, ColorFunction -> RGBColor], 
                    ImageSize -> {2500, 45}, 
                    PlotRange -> {{0, 2500}, {0, 45}}], ImageSize -> 
                    Scaled[1], ScrollPosition -> {0., 0.}]], 
                    Pane[
                    Column[{
                    Grid[{{
                    Manipulate`Place[1], 
                    Manipulate`Place[2]}}]}], 
                    ImageMargins -> {{20, 30}, {10, 10}}]}, {1, 2}, 2, 
                    Alignment -> {Left, Top}]]], 
                    Manipulate`Dump`ThisIsNotAControl}}, Typeset`size$$ = 
                 Automatic, Typeset`update$$ = 0, Typeset`initDone$$ = False, 
                 Typeset`skipInitDone$$ = False, 
                 CalculateUtilities`GraphicsUtilities`Private`more$135369$$ = 
                 False, Global`min84$135370$$ = 0, Global`max85$135371$$ = 0}, 
                DynamicBox[
                 Manipulate`ManipulateBoxes[
                 2, TraditionalForm, 
                  "Variables" :> {
                   Global`max85$$ = 0.5, Global`min84$$ = -0.5, 
                    CalculateUtilities`GraphicsUtilities`Private`more$$ = 
                    False}, "ControllerVariables" :> {
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`more$$, 
                    CalculateUtilities`GraphicsUtilities`Private`more$135369$$\
, False], 
                    Hold[Global`min84$$, Global`min84$135370$$, 0], 
                    Hold[Global`max85$$, Global`max85$135371$$, 0]}, 
                  "OtherVariables" :> {
                   Typeset`show$$, Typeset`bookmarkList$$, 
                    Typeset`bookmarkMode$$, Typeset`animator$$, 
                    Typeset`animvar$$, Typeset`name$$, Typeset`specs$$, 
                    Typeset`size$$, Typeset`update$$, Typeset`initDone$$, 
                    Typeset`skipInitDone$$}, "Body" :> Function[Null, 
                    CalculateUtilities`GraphicsUtilities`Private`post$135361[
                    Plot[
                    SlotSequence[1]]], 
                    HoldAll][(Rational[1, 4] 
                    E^(2 Global`x)) (-Cos[2 Global`x] + Sin[2 Global`x]), {
                    Global`x, 0. + 
                    14.88621380459992 Tan[1.5040801783846716` Global`min84$$],
                     0. + 14.88621380459992 
                    Tan[1.5040801783846716` 
                    If[Global`min84$$ == Global`max85$$, 
                    Global`min84$$ + (13.92477796076938 - 13.92477796076938)/
                    1000, Global`max85$$]]}, 
                    LabelStyle -> {FontFamily -> "Bitstream Charter"}, 
                    WorkingPrecision -> MachinePrecision, 
                    PlotRange -> {Automatic, Automatic}, Ticks -> Automatic, 
                    ImageSize -> 200, AxesLabel -> {
                    RawBoxes[
                    FormBox["x", TraditionalForm]], None}], 
                  "Specifications" :> {{
                    CalculateUtilities`GraphicsUtilities`Private`more$$, {
                    False, True}, ControlType -> None}, {{
                    Global`min84$$, -0.5, "min"}, -1, 1, ImageSize -> Tiny, 
                    ControlPlacement -> 1}, {{Global`max85$$, 0.5, "max"}, -1,
                     1, ImageSize -> Tiny, ControlPlacement -> 2}, 
                    Style[
                    Overlay[{
                    RawBoxes[
                    PaneBox[
                    GraphicsBox[
                    
                    RasterBox[{{{0, 0, 0, 24}}, {{0, 0, 0, 9}}, {{0, 0, 0, 
                    10}}, {{0, 0, 0, 10}}, {{0, 0, 0, 9}}, {{0, 0, 0, 9}}, {{
                    0, 0, 0, 8}}, {{0, 0, 0, 8}}, {{0, 0, 0, 9}}, {{0, 0, 0, 
                    8}}, {{0, 0, 0, 7}}, {{0, 0, 0, 7}}, {{0, 0, 0, 8}}, {{0, 
                    0, 0, 6}}, {{0, 0, 0, 6}}, {{0, 0, 0, 6}}, {{0, 0, 0, 
                    6}}, {{0, 0, 0, 5}}, {{0, 0, 0, 6}}, {{0, 0, 0, 5}}, {{0, 
                    0, 0, 4}}, {{0, 0, 0, 4}}, {{0, 0, 0, 5}}, {{0, 0, 0, 
                    5}}, {{0, 0, 0, 3}}, {{0, 0, 0, 4}}, {{0, 0, 0, 3}}, {{0, 
                    0, 0, 3}}, {{0, 0, 0, 3}}, {{0, 0, 0, 3}}, {{0, 0, 0, 
                    2}}, {{0, 0, 0, 2}}, {{0, 0, 0, 2}}, {{0, 0, 0, 2}}, {{0, 
                    0, 0, 1}}, {{0, 0, 0, 2}}, {{0, 0, 0, 2}}, {{0, 0, 0, 
                    0}}, {{0, 0, 0, 1}}, {{255, 255, 255, 0}}, {{255, 255, 
                    255, 0}}, {{255, 255, 255, 0}}, {{255, 255, 255, 0}}, {{
                    255, 255, 255, 0}}, {{255, 255, 255, 0}}}, {{0, 45}, {
                    2500, 0}}, {0, 255}, ColorFunction -> RGBColor], 
                    ImageSize -> {2500, 45}, 
                    PlotRange -> {{0, 2500}, {0, 45}}], ImageSize -> 
                    Scaled[1], ScrollPosition -> {0., 0.}]], 
                    Pane[
                    Column[{
                    Grid[{{
                    Manipulate`Place[1], 
                    Manipulate`Place[2]}}]}], 
                    ImageMargins -> {{20, 30}, {10, 10}}]}, {1, 2}, 2, 
                    Alignment -> {Left, Top}]]}, 
                  "Options" :> {
                   TrackedSymbols -> True, ControlPlacement -> Bottom, 
                    FrameMargins -> {{0, 0}, {0, 10}}, Paneled -> False, 
                    AppearanceElements -> {}, 
                    LabelStyle -> {
                    "DialogStyle", FontColor -> GrayLevel[0.25]}}, 
                  "DefaultOptions" :> {}], SingleEvaluation -> True], 
                Initialization :> (ReleaseHold[
                   Hold[
                   CalculateUtilities`GraphicsUtilities`Private`WACleanTicks[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Blank[]]] := 
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`res, 
                    CalculateUtilities`GraphicsUtilities`Private`unitformat}, 
                    CalculateUtilities`GraphicsUtilities`Private`res = 
                    ReplaceAll[
                    ReplaceAll[
                    Part[
                    DeleteCases[
                    ReplaceAll[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Alternatives[
                    Style, Global`UnitNumberForm, NumberForm] -> (#& )], {
                    Blank[], "", 
                    BlankNullSequence[]}], All, 
                    Span[1, 2]], Superscript[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[Integer]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`p, 
                    Blank[Integer]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`b^
                    CalculateUtilities`GraphicsUtilities`Private`p], Row[{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    BlankSequence[]]}, "\[Times]"] :> 
                    Times[CalculateUtilities`GraphicsUtilities`Private`a]]; If[
                    MatchQ[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, All, 2], 
                    Condition[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`quants, {
                    Alternatives[
                    BlankSequence[Global`ShortQuantity], 
                    BlankSequence[Global`Quantity]]}], Length[
                    Union[
                    Map[
                    Global`UnitObjectPart, 
                    CalculateUtilities`GraphicsUtilities`Private`quants]]] == 
                    1]], CalculateUtilities`GraphicsUtilities`Private`\
unitformat = Global`ToCDFQuantityFunction[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, 1, 2]]; 
                    CalculateUtilities`GraphicsUtilities`Private`unitformat -> 
                    Thread[{
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, All, 1], 
                    Global`QuantityPart[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, All, 2], 
                    Global`UnitObjectPart[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, 1, 
                    2]]]}], 
                    CalculateUtilities`GraphicsUtilities`Private`res]]; 
                    Options[
                    CalculateUtilities`GraphicsUtilities`Private`post$135361] = \
{"ReturnInteractiveTypes" -> False, "Nearest" -> Automatic}; 
                    CalculateUtilities`GraphicsUtilities`Private`post$135361[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Blank[Graphics]], 
                    OptionsPattern[]] := 
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`lines, 
                    CalculateUtilities`GraphicsUtilities`Private`pts, 
                    CalculateUtilities`GraphicsUtilities`Private`gg, 
                    CalculateUtilities`GraphicsUtilities`Private`type, 
                    CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r, 
                    CalculateUtilities`GraphicsUtilities`Private`oldepilog, 
                    CalculateUtilities`GraphicsUtilities`Private`range, 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines, 
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines,
                     CalculateUtilities`GraphicsUtilities`Private`\
neareststyle = OptionValue["Nearest"]}, 
                    CalculateUtilities`GraphicsUtilities`Private`oldepilog = 
                    Replace[
                    ReplaceAll[Epilog, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]], 
                    Epilog -> Sequence[]]; Switch[
                    ReplaceAll[{Frame, Axes}, 
                    Options[
                    CalculateUtilities`GraphicsUtilities`Private`g]], {True, 
                    Blank[]}, 
                    CalculateUtilities`GraphicsUtilities`Private`type = 
                    Frame; {
                    CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r} = 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, 
                    ReplaceAll[FrameTicks, 
                    Options[
                    CalculateUtilities`GraphicsUtilities`Private`g]]], {
                    Blank[], True}, 
                    CalculateUtilities`GraphicsUtilities`Private`type = 
                    Axes; {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l} = 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, 
                    ReplaceAll[Ticks, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]]], 
                    Blank[], 
                    CalculateUtilities`GraphicsUtilities`Private`type = None]; 
                    If[
                    And[
                    CalculateUtilities`GraphicsUtilities`Private`type === 
                    Frame, 
                    Or[
                    Not[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`t === None, 
                    CalculateUtilities`GraphicsUtilities`Private`b === 
                    CalculateUtilities`GraphicsUtilities`Private`t]], 
                    Not[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`r === None, 
                    CalculateUtilities`GraphicsUtilities`Private`l === 
                    CalculateUtilities`GraphicsUtilities`Private`r]]]], 
                    CalculateUtilities`GraphicsUtilities`Private`type = None]; 
                    If[
                    TrueQ[
                    OptionValue["ReturnInteractiveTypes"]], 
                    Which[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`type === 
                    None, CalculateUtilities`GraphicsUtilities`Private`b === 
                    None, CalculateUtilities`GraphicsUtilities`Private`l === 
                    None], {}, 
                    FreeQ[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Alternatives[Line, Point]], {}, True, {
                    "Tooltips", "Coordinates"}], If[
                    FreeQ[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Alternatives[Line, Point]], 
                    Return[CalculateUtilities`GraphicsUtilities`Private`g]]; 
                    CalculateUtilities`GraphicsUtilities`Private`gg = 
                    Normal[CalculateUtilities`GraphicsUtilities`Private`g]; 
                    CalculateUtilities`GraphicsUtilities`Private`pts = 
                    Partition[
                    Flatten[
                    Cases[
                    Part[CalculateUtilities`GraphicsUtilities`Private`gg, 1], 
                    Point[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Blank[]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`a, 
                    Infinity]], 2]; 
                    If[Length[
                    CalculateUtilities`GraphicsUtilities`Private`pts] < 2, 
                    CalculateUtilities`GraphicsUtilities`Private`lines = Cases[
                    Part[CalculateUtilities`GraphicsUtilities`Private`gg, 1], 
                    
                    Blank[Line], Infinity]; 
                    If[CalculateUtilities`GraphicsUtilities`Private`lines === \
{}, 
                    Return[CalculateUtilities`GraphicsUtilities`Private`g]]; 
                    CalculateUtilities`GraphicsUtilities`Private`pts = Flatten[
                    Cases[
                    CalculateUtilities`GraphicsUtilities`Private`lines, Line[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Blank[]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`a, Infinity],
                     1]; If[
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle === 
                    Automatic, If[
                    CalculateUtilities`GraphicsUtilities`Private`orderedLines[
                    CalculateUtilities`GraphicsUtilities`Private`lines], 
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle = 
                    "1D", CalculateUtilities`GraphicsUtilities`Private`\
neareststyle = "2D"]; Null], 
                    If[
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle === 
                    Automatic, 
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle = 
                    "2D"]]; 
                    CalculateUtilities`GraphicsUtilities`Private`range = 
                    Replace[
                    ReplaceAll[PlotRange, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]], 
                    Except[{{
                    PatternTest[
                    Blank[], NumberQ], 
                    PatternTest[
                    Blank[], NumberQ]}, {
                    PatternTest[
                    Blank[], NumberQ], 
                    PatternTest[
                    Blank[], NumberQ]}}] :> {
                    Through[
                    {Min, Max}[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    1]]], 
                    Through[
                    {Min, Max}[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    2]]]}]; CalculateUtilities`GraphicsUtilities`Private`b = 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[CalculateUtilities`GraphicsUtilities`Private`b, 
                    First[CalculateUtilities`GraphicsUtilities`Private`range], 
                    Part[CalculateUtilities`GraphicsUtilities`Private`pts, 
                    All, 1]]; 
                    CalculateUtilities`GraphicsUtilities`Private`l = 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[CalculateUtilities`GraphicsUtilities`Private`l, 
                    Last[CalculateUtilities`GraphicsUtilities`Private`range], 
                    
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    2]]; CalculateUtilities`GraphicsUtilities`Private`\
oldgridlines = ReplaceAll[GridLines, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]]; 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines = 
                    With[{CalculateUtilities`GraphicsUtilities`Private`gray = 
                    GrayLevel[0.7]}, 
                    Replace[
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines,\
 {Pattern[CalculateUtilities`GraphicsUtilities`Private`a, {
                    Blank[List], 
                    Blank[List]}] :> Dynamic[
                    Join[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Replace[
                    MousePosition[{"Graphics", Graphics}, None], {
                    None -> {{}, {}}, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`x, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`y, 
                    Blank[]]} :> {{{
                    CalculateUtilities`GraphicsUtilities`Private`x, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}, {{
                    CalculateUtilities`GraphicsUtilities`Private`y, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}}}], 
                    2]], {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Blank[List]], Automatic} :> 
                    With[{CalculateUtilities`GraphicsUtilities`Private`\
divisions = {CalculateUtilities`GraphicsUtilities`Private`a, 
                    FindDivisions[
                    Last[CalculateUtilities`GraphicsUtilities`Private`range], 
                    7]}}, 
                    Dynamic[
                    Join[
                    CalculateUtilities`GraphicsUtilities`Private`divisions, 
                    Replace[
                    MousePosition[{"Graphics", Graphics}, None], {
                    None -> {{}, {}}, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`x, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`y, 
                    Blank[]]} :> {{{
                    CalculateUtilities`GraphicsUtilities`Private`x, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}, {{
                    CalculateUtilities`GraphicsUtilities`Private`y, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}}}], 
                    2]]], Blank[] -> Dynamic[
                    
                    Map[{{#, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}& , 
                    MousePosition[{"Graphics", Graphics}, None]]]}]]; If[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`type === 
                    None, CalculateUtilities`GraphicsUtilities`Private`b === 
                    None, CalculateUtilities`GraphicsUtilities`Private`l === 
                    None], 
                    Show[
                    CalculateUtilities`GraphicsUtilities`Private`g, GridLines -> 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines, 
                    If[
                    MatchQ[
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines, 
                    Alternatives[None, GridLines]], 
                    Method -> {"GridLinesInFront" -> True}, 
                    Apply[Sequence, {}]]], 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`nf = 
                    If[CalculateUtilities`GraphicsUtilities`Private`\
neareststyle === "1D", 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`n = 
                    Nearest[Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 1] -> 
                    CalculateUtilities`GraphicsUtilities`Private`pts]}, 
                    CalculateUtilities`GraphicsUtilities`Private`n[
                    Part[#, 1]]& ], 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`n = 
                    Nearest[Transpose[
                    Transpose[
                    CalculateUtilities`GraphicsUtilities`Private`pts]/Abs[
                    Apply[
                    Subtract, 
                    CalculateUtilities`GraphicsUtilities`Private`range, {
                    1}]]] -> 
                    CalculateUtilities`GraphicsUtilities`Private`pts], 
                    CalculateUtilities`GraphicsUtilities`Private`scale = Abs[
                    Apply[
                    Subtract, 
                    CalculateUtilities`GraphicsUtilities`Private`range, {
                    1}]]}, CalculateUtilities`GraphicsUtilities`Private`n[#/
                    CalculateUtilities`GraphicsUtilities`Private`scale]& ]], 
                    CalculateUtilities`GraphicsUtilities`Private`left = 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`bottom = 
                    CalculateUtilities`GraphicsUtilities`Private`b}, 
                    Show[
                    CalculateUtilities`GraphicsUtilities`Private`g, GridLines -> 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines, 
                    If[
                    MatchQ[
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines, 
                    Alternatives[None, GridLines]], 
                    Method -> {"GridLinesInFront" -> True}, 
                    Apply[Sequence, {}]], 
                    Epilog -> {
                    CalculateUtilities`GraphicsUtilities`Private`oldepilog, 
                    Dynamic[
                    
                    DynamicModule[{
                    CalculateUtilities`GraphicsUtilities`Private`pt = 
                    CalculateUtilities`GraphicsUtilities`Private`nf[
                    MousePosition[{"Graphics", Graphics}, {0, 0}]], 
                    CalculateUtilities`GraphicsUtilities`Private`scaled = 
                    MousePosition[{"GraphicsScaled", Graphics}, None]}, 
                    If[
                    CalculateUtilities`GraphicsUtilities`Private`scaled === 
                    None, {}, {
                    Text[
                    Style[
                    Row[{
                    CalculateUtilities`GraphicsUtilities`Private`bottom[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pt, 1, 1]], 
                    CalculateUtilities`GraphicsUtilities`Private`left[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pt, 1, 2]]}, 
                    ","], 12], 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pt, 1], {
                    1.5 Sign[Part[
                    CalculateUtilities`GraphicsUtilities`Private`scaled, 1] - 
                    0.5], 0}, Background -> White], 
                    AbsolutePointSize[7], 
                    Point[CalculateUtilities`GraphicsUtilities`Private`pt], 
                    White, 
                    AbsolutePointSize[5], 
                    Point[
                    CalculateUtilities`GraphicsUtilities`Private`pt]}]]]}]]]]]\
; CalculateUtilities`GraphicsUtilities`Private`post$135361[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Blank[]], 
                    BlankNullSequence[]] := 
                    CalculateUtilities`GraphicsUtilities`Private`g; 
                    CalculateUtilities`GraphicsUtilities`Private`orderedLines[{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`l, 
                    BlankSequence[Line]]}] := 
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`ordered, 
                    CalculateUtilities`GraphicsUtilities`Private`intervals}, 
                    CalculateUtilities`GraphicsUtilities`Private`ordered = 
                    Apply[And, 
                    Map[OrderedQ[
                    Part[#, 1, All, 1]]& , 
                    Hold[CalculateUtilities`GraphicsUtilities`Private`l]]]; If[
                    Not[
                    TrueQ[
                    CalculateUtilities`GraphicsUtilities`Private`ordered]], 
                    Return[False]]; 
                    CalculateUtilities`GraphicsUtilities`Private`intervals = 
                    Part[{CalculateUtilities`GraphicsUtilities`Private`l}, 
                    All, 1, {1, -1}, 1]; Length[
                    Apply[
                    Interval, 
                    CalculateUtilities`GraphicsUtilities`Private`intervals]] === 
                    Length[CalculateUtilities`GraphicsUtilities`Private`\
intervals]]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, 
                    Alternatives[Automatic, FrameTicks]] = {
                    Identity, Identity, Identity, Identity}; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`l, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`t, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`r, 
                    Blank[]]}] := 
                    Map[CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction, {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r}]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, {{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`l, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`r, 
                    Blank[]]}, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`t, 
                    Blank[]]}}] := 
                    Map[CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction, {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r}]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, 
                    Blank[]] = {None, None, None, None}; 
                    
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, 
                    Alternatives[Automatic, Ticks]] = {Identity, Identity}; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`h, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`v, 
                    Blank[]]}] := 
                    Map[CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction, {CalculateUtilities`GraphicsUtilities`Private`h, 
                    CalculateUtilities`GraphicsUtilities`Private`v}]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, 
                    Blank[]] = {None, None}; 
                    CalculateUtilities`GraphicsUtilities`Private`CDFCleanTicks[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Blank[]]] := ReplaceAll[
                    ReplaceAll[
                    Part[
                    DeleteCases[
                    ReplaceAll[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Alternatives[Style, NumberForm] -> (#& )], {
                    Blank[], "", 
                    BlankNullSequence[]}], All, 
                    Span[1, 2]], Superscript[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[Integer]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`p, 
                    Blank[Integer]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`b^
                    CalculateUtilities`GraphicsUtilities`Private`p], Row[{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    BlankSequence[]]}, "\[Times]"] :> 
                    Times[CalculateUtilities`GraphicsUtilities`Private`a]]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks$, 
                    Blank[]]] := 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    CalculateUtilities`GraphicsUtilities`Private`WACleanTicks[
                    CalculateUtilities`GraphicsUtilities`Private`ticks$]]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[None] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[True] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[Automatic] = Identity; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[All] = Identity; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[Pattern[CalculateUtilities`GraphicsUtilities`Private`func, 
                    Blank[]] -> 
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Blank[]]] := Replace[
                    
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[CalculateUtilities`GraphicsUtilities`Private`ticks], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`f, 
                    Except[None]] :> 
                    Composition[
                    CalculateUtilities`GraphicsUtilities`Private`func, 
                    CalculateUtilities`GraphicsUtilities`Private`f]]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[{}] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {
                    Repeated[{
                    Blank[Integer], 
                    Blank[String]}]}]] := Which[
                    Quiet[
                    MatchQ[
                    Apply[SameQ, 
                    Map[Part[
                    DateList[#], 
                    Span[2, All]]& , 
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {
                    2}], {1}], {
                    Repeated[True]}]], DateString, 
                    Apply[And, 
                    StringMatchQ[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, All, 
                    2], NumberString]], 
                    
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Transpose[{
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, All, 
                    1], 
                    ToExpression[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, All, 
                    2]]}]], True, None]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {
                    Repeated[{
                    PatternTest[
                    Blank[], NumericQ], 
                    PatternTest[
                    Blank[], NumericQ]}]}]] := Which[
                    MatchQ[
                    Apply[
                    Equal, CalculateUtilities`GraphicsUtilities`Private`ticks,\
 {1}], {
                    Repeated[True]}], Identity, 
                    MatchQ[
                    
                    Apply[# == Log[#2]& , 
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {1}], {
                    Repeated[True]}], Exp, 
                    TrueQ[
                    Quiet[
                    Apply[Equal, 
                    Apply[Divide, Transpose[
                    Rest[CalculateUtilities`GraphicsUtilities`Private`ticks]] - 
                    Part[CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    1]]]]], 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`slope = 
                    Apply[Divide, 
                    Apply[Subtract, 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {-1, 
                    1}]]]}, 
                    SetPrecision[(# - Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 1, 
                    1])/CalculateUtilities`GraphicsUtilities`Private`slope + 
                    Part[CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    1, 2], 3]& ], True, None]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Blank[]] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`type, 
                    Blank[]], 
                    BlankNullSequence[]] := 
                    CalculateUtilities`GraphicsUtilities`Private`type; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[Identity, {
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`min, 
                    Blank[]], 
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`max, 
                    Blank[]]}, 
                    Blank[]] := 
                    With[{CalculateUtilities`GraphicsUtilities`Private`nf = 
                    CalculateUtilities`GraphicsUtilities`Private`numberForm, 
                    CalculateUtilities`GraphicsUtilities`Private`acc = 
                    Floor[Max[
                    Ceiling[Log[10, 
                    Max[
                    
                    Abs[{CalculateUtilities`GraphicsUtilities`Private`min, 
                    CalculateUtilities`GraphicsUtilities`Private`max}]]] - 
                    Log[10, (CalculateUtilities`GraphicsUtilities`Private`max - 
                    CalculateUtilities`GraphicsUtilities`Private`min)/100]], 
                    3] - RealExponent[
                    Max[
                    
                    Abs[{CalculateUtilities`GraphicsUtilities`Private`min, 
                    CalculateUtilities`GraphicsUtilities`Private`max}]]]]}, 
                    CalculateUtilities`GraphicsUtilities`Private`nf[#, 
                    CalculateUtilities`GraphicsUtilities`Private`acc]& ]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[Exp, {
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`min, 
                    Blank[]], 
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`max, 
                    Blank[]]}, 
                    Blank[]] := 
                    With[{CalculateUtilities`GraphicsUtilities`Private`prec = 
                    Max[
                    Ceiling[Log[10, 
                    Max[
                    
                    Abs[{CalculateUtilities`GraphicsUtilities`Private`min, 
                    CalculateUtilities`GraphicsUtilities`Private`max}]]] - 
                    Log[10, (CalculateUtilities`GraphicsUtilities`Private`max - 
                    CalculateUtilities`GraphicsUtilities`Private`min)/100]], 
                    3]}, Quiet[
                    RawBoxes[
                    ToBoxes[
                    NumberForm[
                    Exp[#], 
                    CalculateUtilities`GraphicsUtilities`Private`prec]]]]& ]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[DateString, {
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`min, 
                    Blank[]], 
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`max, 
                    Blank[]]}, 
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`pts, 
                    Blank[]]] := 
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`dates, 
                    CalculateUtilities`GraphicsUtilities`Private`spec}, 
                    CalculateUtilities`GraphicsUtilities`Private`dates = 
                    Map[DateList, 
                    CalculateUtilities`GraphicsUtilities`Private`pts]; 
                    CalculateUtilities`GraphicsUtilities`Private`spec = Switch[
                    Map[Length, 
                    Map[Union, 
                    Transpose[
                    CalculateUtilities`GraphicsUtilities`Private`dates]]], {
                    Blank[], 1, 1, 
                    BlankSequence[]}, {"Year"}, {
                    Blank[], 
                    Blank[], 1, 
                    BlankSequence[]}, {"MonthNameShort", " ", "Year"}, 
                    Blank[], {
                    "DayShort", " ", "MonthNameShort", " ", "Year"}]; 
                    If[(CalculateUtilities`GraphicsUtilities`Private`max - 
                    CalculateUtilities`GraphicsUtilities`Private`min)/
                    31536000 > 25, 
                    CalculateUtilities`GraphicsUtilities`Private`spec = {
                    "Year"}]; 
                    With[{CalculateUtilities`GraphicsUtilities`Private`s = 
                    CalculateUtilities`GraphicsUtilities`Private`spec}, 
                    DateString[#, 
                    CalculateUtilities`GraphicsUtilities`Private`s]& ]]; 
                    CalculateUtilities`GraphicsUtilities`Private`numberForm = 
                    Function[{
                    CalculateUtilities`GraphicsUtilities`Private`a, 
                    CalculateUtilities`GraphicsUtilities`Private`acc}, 
                    Quiet[
                    RawBoxes[
                    ToBoxes[
                    NumberForm[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Max[1, 
                    Ceiling[
                    RealExponent[
                    CalculateUtilities`GraphicsUtilities`Private`a] + 
                    CalculateUtilities`GraphicsUtilities`Private`acc]], 
                    ExponentFunction -> (Null& ), 
                    NumberFormat -> (StringReplace[#, StringExpression[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`s, 
                    BlankSequence[]], ".", EndOfString] -> 
                    CalculateUtilities`GraphicsUtilities`Private`s]& )]]]]]]]; 
                 Typeset`initDone$$ = True), DynamicModuleValues :> {}, 
                Deinitialization :> None, 
                UntrackedVariables :> {Typeset`size$$}, 
                SynchronousInitialization -> True, 
                UnsavedVariables :> {Typeset`initDone$$}], "Manipulate", 
               Deployed -> True, StripOnInput -> False], TraditionalForm], 
             Manipulate`InterpretManipulate[1]], TraditionalForm]], 
          "Output"]}], 
       XMLElement["dataformats", {}, {"minput"}]}], 
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["cell", {"compressed" -> True, "string" -> False}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             FormBox[
              StyleBox[
               
               DynamicModuleBox[{
                CalculateScan`PlotterScanner`Private`ar$$ = 1, 
                 CalculateScan`PlotterScanner`Private`contraPedalCurveColor$$ = 
                 RGBColor[0.7464574, 0.2952580000000001, 0.2454606], 
                 CalculateScan`PlotterScanner`Private`\
contraPedalCurveCountFactor$$ = 0.3, 
                 CalculateScan`PlotterScanner`Private`\
contraPedalCurveLastParamaters$$ = {}, 
                 CalculateScan`PlotterScanner`Private`contraPedalCurveOpacity$\
$ = 0.8, CalculateScan`PlotterScanner`Private`contraPedalCurvePlotCurves$$ = \
{}, CalculateScan`PlotterScanner`Private`contraPedalCurvePoints$$ = "curve", 
                 CalculateScan`PlotterScanner`Private`contraPedalCurveTF$$ = 
                 False, CalculateScan`PlotterScanner`Private`\
contraPedalCurveThickness$$ = -3., 
                 CalculateScan`PlotterScanner`Private`dualCurveColor$$ = 
                 RGBColor[0.2860602, 0.4663408, 0.29410879999999995`], 
                 CalculateScan`PlotterScanner`Private`dualCurveCountFactor$$ = 
                 0.3, CalculateScan`PlotterScanner`Private`\
dualCurveLastParamaters$$ = {}, 
                 CalculateScan`PlotterScanner`Private`dualCurveOpacity$$ = 
                 0.8, CalculateScan`PlotterScanner`Private`\
dualCurvePlotCurves$$ = {}, 
                 CalculateScan`PlotterScanner`Private`dualCurveTF$$ = False, 
                 CalculateScan`PlotterScanner`Private`dualCurveThickness$$ = \
-3., CalculateScan`PlotterScanner`Private`dualPedalCurvePoints$$ = "curve", 
                 CalculateScan`PlotterScanner`Private`evoluteColor$$ = 
                 RGBColor[0.813033, 0.766292, 0.303458], 
                 CalculateScan`PlotterScanner`Private`evoluteOpacity$$ = 0.8, 
                 CalculateScan`PlotterScanner`Private`evoluteTF$$ = False, 
                 CalculateScan`PlotterScanner`Private`evoluteThickness$$ = \
-3., CalculateScan`PlotterScanner`Private`fy1$$ = 0.982793723247329, 
                 CalculateScan`PlotterScanner`Private`fy2$$ = 
                 0.982793723247329, 
                 CalculateScan`PlotterScanner`Private`\
inverseCurveCircleRadiusFactor$$ = 0.4636476090008061, 
                 CalculateScan`PlotterScanner`Private`inverseCurveColor$$ = 
                 RGBColor[0.2860602, 0.4663408, 0.29410879999999995`], 
                 CalculateScan`PlotterScanner`Private`inverseCurveCountFactor$\
$ = 0.3, CalculateScan`PlotterScanner`Private`inverseCurveOpacity$$ = 0.8, 
                 CalculateScan`PlotterScanner`Private`inverseCurvePlotCurves$$\
 = {}, CalculateScan`PlotterScanner`Private`inverseCurvePoints$$ = "grid", 
                 CalculateScan`PlotterScanner`Private`inverseCurveTF$$ = 
                 False, 
                 CalculateScan`PlotterScanner`Private`inverseCurveThickness$$ = \
-3., CalculateScan`PlotterScanner`Private`inverseLastParamaters$$ = {}, 
                 CalculateScan`PlotterScanner`Private`involuteColor$$ = 
                 RGBColor[0.49978279999999997`, 0.6025278, 0.2508104], 
                 CalculateScan`PlotterScanner`Private`involuteCount$$ = 60, 
                 CalculateScan`PlotterScanner`Private`involuteOpacity$$ = 0.8,
                  CalculateScan`PlotterScanner`Private`involutesLeftTF$$ = 
                 False, CalculateScan`PlotterScanner`Private`involutesRightTF$\
$ = True, CalculateScan`PlotterScanner`Private`involuteTF$$ = False, 
                 CalculateScan`PlotterScanner`Private`involuteThickness$$ = \
-3., CalculateScan`PlotterScanner`Private`isopticCurveAngle$$ = 
                 Rational[1, 3] Pi, 
                 CalculateScan`PlotterScanner`Private`isopticCurveColor$$ = 
                 RGBColor[
                  0.8519382, 0.7451437999999999, 0.31752080000000005`], 
                 CalculateScan`PlotterScanner`Private`isopticCurveOpacity$$ = 
                 0.8, CalculateScan`PlotterScanner`Private`\
isopticCurvePlotCurves$$ = {}, 
                 CalculateScan`PlotterScanner`Private`isopticCurveTF$$ = 
                 False, CalculateScan`PlotterScanner`Private`\
isopticCurveThickness$$ = -3., 
                 CalculateScan`PlotterScanner`Private`isopticLastParamaters$$ = \
{}, CalculateUtilities`GraphicsUtilities`Private`more$$ = False, 
                 CalculateScan`PlotterScanner`Private`negativePedalCurveColor$\
$ = RGBColor[0.7464574, 0.2952580000000001, 0.2454606], 
                 CalculateScan`PlotterScanner`Private`\
negativePedalCurveCountFactor$$ = 0.3, 
                 CalculateScan`PlotterScanner`Private`\
negativePedalCurveLastParamaters$$ = {}, 
                 CalculateScan`PlotterScanner`Private`\
negativePedalCurveOpacity$$ = 0.8, 
                 CalculateScan`PlotterScanner`Private`\
negativePedalCurvePlotCurves$$ = {}, 
                 CalculateScan`PlotterScanner`Private`\
negativePedalCurvePoints$$ = "curve", 
                 CalculateScan`PlotterScanner`Private`negativePedalCurveTF$$ = 
                 False, CalculateScan`PlotterScanner`Private`\
negativePedalCurveThickness$$ = -3., 
                 CalculateScan`PlotterScanner`Private`normalColor$$ = 
                 RGBColor[0.237, 0.34, 0.575], 
                 CalculateScan`PlotterScanner`Private`normalCount$$ = 120, 
                 CalculateScan`PlotterScanner`Private`normalLength$$ = 
                 0.17067775900425536`, 
                 CalculateScan`PlotterScanner`Private`normalOpacity$$ = 0.8, 
                 CalculateScan`PlotterScanner`Private`normalTF$$ = True, 
                 CalculateScan`PlotterScanner`Private`normalThickness$$ = -3.,
                  CalculateScan`PlotterScanner`Private`offsetCurveColor$$ = 
                 RGBColor[0.877875, 0.731045, 0.326896], 
                 CalculateScan`PlotterScanner`Private`offsetCurveCount$$ = 12,
                  CalculateScan`PlotterScanner`Private`offsetCurveDistance$$ = 
                 0.17067775900425536`, 
                 CalculateScan`PlotterScanner`Private`\
offsetCurveLastParamaters$$ = {}, 
                 CalculateScan`PlotterScanner`Private`offsetCurveOpacity$$ = 
                 0.8, CalculateScan`PlotterScanner`Private`\
offsetCurvePlotCurves$$ = {}, 
                 CalculateScan`PlotterScanner`Private`offsetCurveTF$$ = False,
                  CalculateScan`PlotterScanner`Private`offsetCurveThickness$$ = \
-3., CalculateScan`PlotterScanner`Private`orthotomicCurveAngle$$ = 
                 Rational[1, 3] Pi, 
                 CalculateScan`PlotterScanner`Private`orthotomicCurveColor$$ = 
                 RGBColor[
                  0.8519382, 0.7451437999999999, 0.31752080000000005`], 
                 CalculateScan`PlotterScanner`Private`\
orthotomicCurveCountFactor$$ = 0.3, 
                 CalculateScan`PlotterScanner`Private`orthotomicCurveOpacity$$\
 = 0.8, CalculateScan`PlotterScanner`Private`orthotomicCurvePlotCurves$$ = {},
                  CalculateScan`PlotterScanner`Private`orthotomicCurvePoints$$\
 = "curve", CalculateScan`PlotterScanner`Private`orthotomicCurveTF$$ = False, 
                 CalculateScan`PlotterScanner`Private`\
orthotomicCurveThickness$$ = -3., 
                 CalculateScan`PlotterScanner`Private`\
orthotomicLastParamaters$$ = {}, 
                 CalculateScan`PlotterScanner`Private`osculatingCircleColor$$ = 
                 RGBColor[0.2752426, 0.4446824, 0.33950440000000004`], 
                 CalculateScan`PlotterScanner`Private`osculatingCircleCount$$ = 
                 60, 
                 CalculateScan`PlotterScanner`Private`\
osculatingCircleLastParamaters$$ = {}, 
                 CalculateScan`PlotterScanner`Private`osculatingCircleOpacity$\
$ = 0.8, CalculateScan`PlotterScanner`Private`osculatingCircleRadiiTF$$ = 
                 False, CalculateScan`PlotterScanner`Private`\
osculatingCircles$$ = {}, 
                 CalculateScan`PlotterScanner`Private`osculatingCircleTF$$ = 
                 False, CalculateScan`PlotterScanner`Private`\
osculatingCircleThickness$$ = -3., 
                 CalculateScan`PlotterScanner`Private`pedalCurveColor$$ = 
                 RGBColor[0.32894650000000003`, 0.5006225, 0.2625337], 
                 CalculateScan`PlotterScanner`Private`pedalCurveCountFactor$$ = 
                 0.3, CalculateScan`PlotterScanner`Private`\
pedalCurveLastParamaters$$ = {}, 
                 CalculateScan`PlotterScanner`Private`pedalCurveOpacity$$ = 
                 0.8, CalculateScan`PlotterScanner`Private`\
pedalCurvePlotCurves$$ = {}, 
                 CalculateScan`PlotterScanner`Private`pedalCurvePoints$$ = 
                 "curve", CalculateScan`PlotterScanner`Private`pedalCurveTF$$ = 
                 False, CalculateScan`PlotterScanner`Private`\
pedalCurveThickness$$ = -3., CalculateScan`PlotterScanner`Private`sa$$ = 
                 False, CalculateScan`PlotterScanner`Private`sqPRQ$$ = False, 
                 CalculateScan`PlotterScanner`Private`st$$ = False, 
                 CalculateScan`PlotterScanner`Private`symmxQ$$ = False, 
                 CalculateScan`PlotterScanner`Private`symmyQ$$ = True, 
                 CalculateScan`PlotterScanner`Private`tangentColor$$ = 
                 RGBColor[0.237736, 0.340215, 0.575113], 
                 CalculateScan`PlotterScanner`Private`tangentCount$$ = 60, 
                 CalculateScan`PlotterScanner`Private`tangentLength$$ = 
                 0.17067775900425536`, 
                 CalculateScan`PlotterScanner`Private`tangentOpacity$$ = 0.8, 
                 CalculateScan`PlotterScanner`Private`tangentTF$$ = False, 
                 CalculateScan`PlotterScanner`Private`tangentThickness$$ = \
-3., CalculateScan`PlotterScanner`Private`taylorParabolaColor$$ = 
                 RGBColor[0.7189495000000001, 0.719797, 0.283877], 
                 CalculateScan`PlotterScanner`Private`taylorParabolaCount$$ = 
                 36, CalculateScan`PlotterScanner`Private`\
taylorParabolaLastParamaters$$ = {}, 
                 CalculateScan`PlotterScanner`Private`taylorParabolaOpacity$$ = 
                 0.8, CalculateScan`PlotterScanner`Private`taylorParabolas$$ = \
{}, CalculateScan`PlotterScanner`Private`taylorParabolaTF$$ = False, 
                 CalculateScan`PlotterScanner`Private`taylorParabolaThickness$\
$ = -3., CalculateScan`PlotterScanner`Private`tiltedOffsetCurveAngle$$ = 
                 Rational[1, 4] Pi, 
                 CalculateScan`PlotterScanner`Private`tiltedOffsetCurveColor$$\
 = RGBColor[0.49978279999999997`, 0.6025278, 0.2508104], 
                 CalculateScan`PlotterScanner`Private`tiltedOffsetCurveCount$$\
 = 12, CalculateScan`PlotterScanner`Private`tiltedOffsetCurveDistance$$ = 
                 0.17067775900425536`, 
                 CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveLastParamaters$$ = {}, 
                 CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveOpacity$$ = 0.8, 
                 CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurvePlotCurves$$ = {}, 
                 CalculateScan`PlotterScanner`Private`tiltedOffsetCurveTF$$ = 
                 False, CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveThickness$$ = -3., 
                 CalculateScan`PlotterScanner`Private`tiltedTangentAngle$$ = 
                 Rational[1, 4] Pi, 
                 CalculateScan`PlotterScanner`Private`tiltedTangentColor$$ = 
                 RGBColor[
                  0.2622702, 0.40739780000000003`, 0.41955020000000004`], 
                 CalculateScan`PlotterScanner`Private`tiltedTangentCount$$ = 
                 60, CalculateScan`PlotterScanner`Private`tiltedTangentLength$\
$ = 0.17067775900425536`, 
                 CalculateScan`PlotterScanner`Private`tiltedTangentOpacity$$ = 
                 0.8, CalculateScan`PlotterScanner`Private`tiltedTangentTF$$ = 
                 False, CalculateScan`PlotterScanner`Private`\
tiltedTangentThickness$$ = -3., 
                 CalculateScan`PlotterScanner`Private`x1$$ = \
-0.7853981633974483, CalculateScan`PlotterScanner`Private`x2$$ = 
                 0.7853981633974483, Typeset`show$$ = True, 
                 Typeset`bookmarkList$$ = {}, Typeset`bookmarkMode$$ = "Menu",
                  Typeset`animator$$, Typeset`animvar$$ = 1, Typeset`name$$ = 
                 "\"untitled\"", Typeset`specs$$ = {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`more$$], {
                    False, True}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`x1$$], \
-0.7853981633974483, 
                    Subscript[
                    Style["x", Italic], "min"]}, -1.5393804002589986`, 
                    1.5393804002589986`}, {{
                    Hold[CalculateScan`PlotterScanner`Private`x2$$], 
                    0.7853981633974483, 
                    Subscript[
                    Style["x", Italic], "max"]}, -1.5393804002589986`, 
                    1.5393804002589986`}, {{
                    Hold[CalculateScan`PlotterScanner`Private`symmxQ$$], 
                    False, "symmetric"}, {True, False}}, {{
                    Hold[CalculateScan`PlotterScanner`Private`fy1$$], 
                    0.982793723247329, 
                    Subscript["y", "min"]}, 0, 1.5393804002589986`}, {{
                    Hold[CalculateScan`PlotterScanner`Private`fy2$$], 
                    0.982793723247329, 
                    Subscript["y", "max"]}, 0, 1.5393804002589986`}, {{
                    Hold[CalculateScan`PlotterScanner`Private`symmyQ$$], True,
                     "symmetric"}, {True, False}}, {{
                    Hold[CalculateScan`PlotterScanner`Private`sqPRQ$$], False, 
                    Dynamic[
                    Style["same as horizontal-range", 
                    If[
                    CalculateScan`PlotterScanner`Private`symmxQ$$, Black, 
                    Gray]]]}, {True, False}}, {{
                    Hold[CalculateScan`PlotterScanner`Private`sa$$], False, 
                    "show axes"}, {True, False}}, {{
                    Hold[CalculateScan`PlotterScanner`Private`st$$], False, 
                    Dynamic[
                    Style["show ticks", 
                    If[
                    CalculateScan`PlotterScanner`Private`sa$$ === True, Black,
                     Gray]]]}, {True, False}}, {{
                    Hold[CalculateScan`PlotterScanner`Private`ar$$], 1, 
                    "aspect ratio"}, 
                    Rational[1, 4], 4}, {{
                    Hold[CalculateScan`PlotterScanner`Private`tangentTF$$], 
                    False, ""}, {True, False}}, {{
                    Hold[CalculateScan`PlotterScanner`Private`tangentCount$$],
                     60, ""}, 2, 360, 1}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`tangentLength$$], 
                    0.17067775900425536`, ""}, 0, 1.5393804002589986`}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`tangentThickness$$], \
-3., ""}, -4, -0.5}, {{
                    Hold[CalculateScan`PlotterScanner`Private`tangentColor$$], 
                    RGBColor[0.237736, 0.340215, 0.575113], ""}, 
                    RGBColor[1, 0, 0]}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`tangentOpacity$$], 
                    0.8, ""}, 0, 1}, {{
                    Hold[CalculateScan`PlotterScanner`Private`normalTF$$], 
                    True, ""}, {True, False}}, {{
                    Hold[CalculateScan`PlotterScanner`Private`normalCount$$], 
                    120, ""}, 2, 360, 1}, {{
                    Hold[CalculateScan`PlotterScanner`Private`normalLength$$],
                     0.17067775900425536`, ""}, 0, 1.5393804002589986`}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`normalThickness$$], \
-3., ""}, -4, -0.5}, {{
                    Hold[CalculateScan`PlotterScanner`Private`normalColor$$], 
                    
                    RGBColor[0.237, 0.34, 0.575], ""}, 
                    RGBColor[1, 0, 0]}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`normalOpacity$$], 
                    0.8, ""}, 0, 1}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`tiltedTangentTF$$], 
                    False, ""}, {True, False}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`tiltedTangentAngle$$]\
, Rational[1, 4] Pi, ""}, -Pi, Pi}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`tiltedTangentCount$$]\
, 60, ""}, 2, 360, 1}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`tiltedTangentLength$$\
], 0.17067775900425536`, ""}, 0, 1.5393804002589986`}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
tiltedTangentThickness$$], -3., ""}, -4, -0.5}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`tiltedTangentColor$$]\
, 
                    RGBColor[
                    0.2622702, 0.40739780000000003`, 0.41955020000000004`], 
                    ""}, 
                    RGBColor[1, 0, 0]}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`tiltedTangentOpacity$\
$], 0.8, ""}, 0, 1}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`osculatingCircleTF$$]\
, False, ""}, {True, False}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleCount$$], 60, ""}, 2, 360, 1}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleThickness$$], -3., ""}, -4, -0.5}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleColor$$], 
                    RGBColor[0.2752426, 0.4446824, 0.33950440000000004`], ""}, 
                    RGBColor[1, 0, 0]}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleOpacity$$], 0.8, ""}, 0, 1}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleRadiiTF$$], False, ""}, {True, False}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`taylorParabolaTF$$], 
                    False, ""}, {True, False}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`taylorParabolaCount$$\
], 36, ""}, 2, 120, 1}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
taylorParabolaThickness$$], -3., ""}, -4, -0.5}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`taylorParabolaColor$$\
], 
                    RGBColor[0.7189495000000001, 0.719797, 0.283877], ""}, 
                    RGBColor[1, 0, 0]}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
taylorParabolaOpacity$$], 0.8, ""}, 0, 1}, {{
                    Hold[CalculateScan`PlotterScanner`Private`involuteTF$$], 
                    False, ""}, {True, False}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`involuteCount$$], 60,
                     ""}, 1, 120, 1}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`involuteThickness$$],\
 -3., ""}, -4, -0.5}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`involuteColor$$], 
                    RGBColor[0.49978279999999997`, 0.6025278, 0.2508104], ""}, 
                    RGBColor[1, 0, 0]}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`involuteOpacity$$], 
                    0.8, ""}, 0, 1}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`involutesLeftTF$$], 
                    False, ""}, {True, False}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`involutesRightTF$$], 
                    True, ""}, {True, False}}, {{
                    Hold[CalculateScan`PlotterScanner`Private`evoluteTF$$], 
                    False, ""}, {True, False}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`evoluteThickness$$], \
-3., ""}, -4, -0.5}, {{
                    Hold[CalculateScan`PlotterScanner`Private`evoluteColor$$], 
                    RGBColor[0.813033, 0.766292, 0.303458], ""}, 
                    RGBColor[1, 0, 0]}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`evoluteOpacity$$], 
                    0.8, ""}, 0, 1}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`offsetCurveTF$$], 
                    False, ""}, {True, False}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`offsetCurveDistance$$\
], 0.17067775900425536`, ""}, 0, 1.5393804002589986`}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`offsetCurveCount$$], 
                    12, ""}, 1, 60, 1}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`offsetCurveThickness$\
$], -3., ""}, -4, -0.5}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`offsetCurveColor$$], 
                    
                    RGBColor[0.877875, 0.731045, 0.326896], ""}, 
                    RGBColor[1, 0, 0]}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`offsetCurveOpacity$$]\
, 0.8, ""}, 0, 1}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`tiltedOffsetCurveTF$$\
], False, ""}, {True, False}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveAngle$$], Rational[1, 4] Pi, ""}, -Pi, Pi}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveDistance$$], 0.17067775900425536`, ""}, 0, 
                    1.5393804002589986`}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveCount$$], 12, ""}, 1, 60, 1}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveThickness$$], -3., ""}, -4, -0.5}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveColor$$], 
                    RGBColor[0.49978279999999997`, 0.6025278, 0.2508104], ""}, 
                    RGBColor[1, 0, 0]}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveOpacity$$], 0.8, ""}, 0, 1}, {{
                    Hold[CalculateScan`PlotterScanner`Private`pedalCurveTF$$],
                     False, ""}, {True, False}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
pedalCurveCountFactor$$], 0.3, ""}, 0, 1}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`pedalCurveThickness$$\
], -3., ""}, -4, -0.5}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`pedalCurveColor$$], 
                    RGBColor[0.32894650000000003`, 0.5006225, 0.2625337], ""}, 
                    RGBColor[1, 0, 0]}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`pedalCurveOpacity$$],
                     0.8, ""}, 0, 1}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`pedalCurvePoints$$], 
                    "curve", ""}, {"grid", "curve"}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`negativePedalCurveTF$\
$], False, ""}, {True, False}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurveCountFactor$$], 0.3, ""}, 0, 1}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurveThickness$$], -3., ""}, -4, -0.5}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurveColor$$], 
                    RGBColor[0.7464574, 0.2952580000000001, 0.2454606], ""}, 
                    RGBColor[1, 0, 0]}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurveOpacity$$], 0.8, ""}, 0, 1}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurvePoints$$], "curve", ""}, {"curve", "grid"}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`contraPedalCurveTF$$]\
, False, ""}, {True, False}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurveCountFactor$$], 0.3, ""}, 0, 1}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurveThickness$$], -3., ""}, -4, -0.5}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurveColor$$], 
                    RGBColor[0.7464574, 0.2952580000000001, 0.2454606], ""}, 
                    RGBColor[1, 0, 0]}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurveOpacity$$], 0.8, ""}, 0, 1}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurvePoints$$], "curve", ""}, {"curve", "grid"}}, {{
                    Hold[CalculateScan`PlotterScanner`Private`dualCurveTF$$], 
                    False, ""}, {True, False}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`dualCurveCountFactor$\
$], 0.3, ""}, 0, 1}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`dualCurveThickness$$]\
, -3., ""}, -4, -0.5}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`dualCurveColor$$], 
                    RGBColor[0.2860602, 0.4663408, 0.29410879999999995`], ""}, 
                    RGBColor[1, 0, 0]}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`dualCurveOpacity$$], 
                    0.8, ""}, 0, 1}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`dualPedalCurvePoints$\
$], "curve", ""}, {"curve", "grid"}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`inverseCurveTF$$], 
                    False, ""}, {True, False}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
inverseCurveCountFactor$$], 0.3, ""}, 0, 1}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
inverseCurveThickness$$], -3., ""}, -4, -0.5}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`inverseCurveColor$$], 
                    RGBColor[0.2860602, 0.4663408, 0.29410879999999995`], ""}, 
                    RGBColor[1, 0, 0]}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`inverseCurveOpacity$$\
], 0.8, ""}, 0, 1}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`inverseCurvePoints$$]\
, "grid", ""}, {"curve", "grid"}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
inverseCurveCircleRadiusFactor$$], 0.4636476090008061, ""}, 0, 1}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`isopticCurveTF$$], 
                    False, ""}, {True, False}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`isopticCurveAngle$$],
                     Rational[1, 3] Pi, ""}, 0, Pi}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
isopticCurveThickness$$], -3., ""}, -4, -0.5}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`isopticCurveColor$$], 
                    RGBColor[
                    0.8519382, 0.7451437999999999, 0.31752080000000005`], ""}, 
                    RGBColor[1, 0, 0]}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`isopticCurveOpacity$$\
], 0.8, ""}, 0, 1}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`orthotomicCurveTF$$],
                     False, ""}, {True, False}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`orthotomicCurveAngle$\
$], Rational[1, 3] Pi, ""}, 0, Pi}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
orthotomicCurveCountFactor$$], 0.3, ""}, 0, 1}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
orthotomicCurveThickness$$], -3., ""}, -4, -0.5}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`orthotomicCurveColor$\
$], 
                    RGBColor[
                    0.8519382, 0.7451437999999999, 0.31752080000000005`], ""}, 
                    RGBColor[1, 0, 0]}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
orthotomicCurveOpacity$$], 0.8, ""}, 0, 1}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
orthotomicCurvePoints$$], "curve", ""}, {"curve", "grid"}}, {
                    Hold[
                    Style[
                    Overlay[{
                    RawBoxes[
                    PaneBox[
                    GraphicsBox[
                    
                    RasterBox[{{{0, 0, 0, 24}}, {{0, 0, 0, 9}}, {{0, 0, 0, 
                    10}}, {{0, 0, 0, 10}}, {{0, 0, 0, 9}}, {{0, 0, 0, 9}}, {{
                    0, 0, 0, 8}}, {{0, 0, 0, 8}}, {{0, 0, 0, 9}}, {{0, 0, 0, 
                    8}}, {{0, 0, 0, 7}}, {{0, 0, 0, 7}}, {{0, 0, 0, 8}}, {{0, 
                    0, 0, 6}}, {{0, 0, 0, 6}}, {{0, 0, 0, 6}}, {{0, 0, 0, 
                    6}}, {{0, 0, 0, 5}}, {{0, 0, 0, 6}}, {{0, 0, 0, 5}}, {{0, 
                    0, 0, 4}}, {{0, 0, 0, 4}}, {{0, 0, 0, 5}}, {{0, 0, 0, 
                    5}}, {{0, 0, 0, 3}}, {{0, 0, 0, 4}}, {{0, 0, 0, 3}}, {{0, 
                    0, 0, 3}}, {{0, 0, 0, 3}}, {{0, 0, 0, 3}}, {{0, 0, 0, 
                    2}}, {{0, 0, 0, 2}}, {{0, 0, 0, 2}}, {{0, 0, 0, 2}}, {{0, 
                    0, 0, 1}}, {{0, 0, 0, 2}}, {{0, 0, 0, 2}}, {{0, 0, 0, 
                    0}}, {{0, 0, 0, 1}}, {{255, 255, 255, 0}}, {{255, 255, 
                    255, 0}}, {{255, 255, 255, 0}}, {{255, 255, 255, 0}}, {{
                    255, 255, 255, 0}}, {{255, 255, 255, 0}}}, {{0, 45}, {
                    2500, 0}}, {0, 255}, ColorFunction -> RGBColor], 
                    ImageSize -> {2500, 45}, 
                    PlotRange -> {{0, 2500}, {0, 45}}], ImageSize -> 
                    Scaled[1], ScrollPosition -> {0., 0.}]], 
                    Pane[
                    Column[{
                    Row[{
                    Invisible[
                    RawBoxes[
                    GraphicsBox[
                    TagBox[
                    
                    RasterBox[{{{255, 132, 0}, {255, 132, 0}, {255, 132, 0}, {
                    255, 132, 0}, {255, 132, 0}, {255, 132, 0}}, {{255, 132, 
                    0}, {255, 132, 0}, {255, 132, 0}, {255, 132, 0}, {255, 
                    132, 0}, {255, 132, 0}}}, {{0, 2}, {6, 0}}, {0, 255}, 
                    ColorFunction -> RGBColor], 
                    BoxForm`ImageTag[
                    "Byte", ColorSpace -> "RGB", Interleaving -> True], 
                    Selectable -> False], BaseStyle -> "ImageGraphics", 
                    ImageSize -> Magnification[1], ImageSizeRaw -> {6, 2}, 
                    BaselinePosition -> (Scaled[0] -> Center), 
                    PlotRange -> {{0, 6}, {0, 2}}]]], " ", 
                    Column[{"Horizontal plot range:", 
                    Row[{
                    Manipulate`Place[1], "  ", 
                    Manipulate`Place[2], "  ", 
                    Manipulate`Place[3]}]}]}], 
                    PaneSelector[{True -> Grid[{{
                    Button[
                    Row[{
                    RawBoxes[
                    GraphicsBox[
                    TagBox[
                    
                    RasterBox[{{{255, 132, 0}, {255, 132, 0}, {255, 132, 0}, {
                    255, 132, 0}, {255, 132, 0}, {255, 132, 0}}, {{255, 132, 
                    0}, {255, 132, 0}, {255, 132, 0}, {255, 132, 0}, {255, 
                    132, 0}, {255, 132, 0}}}, {{0, 2}, {6, 0}}, {0, 255}, 
                    ColorFunction -> RGBColor], 
                    BoxForm`ImageTag["Byte", ColorSpace -> "RGB", 
                    Interleaving -> True], Selectable -> False], BaseStyle -> 
                    "ImageGraphics", ImageSize -> Magnification[1], 
                    ImageSizeRaw -> {6, 2}, 
                    BaselinePosition -> (Scaled[0] -> Center), 
                    PlotRange -> {{0, 6}, {0, 2}}]], " "}], 
                    CalculateUtilities`GraphicsUtilities`Private`more$$ = 
                    False, Appearance -> None, BaseStyle -> {}], 
                    Button[
                    "Fewer controls", 
                    CalculateUtilities`GraphicsUtilities`Private`more$$ = 
                    False, Appearance -> None, BaseStyle -> {}]}, {"", 
                    Item[
                    Column[{
                    Column[{"Vertical plot range:", 
                    Row[{
                    Manipulate`Place[4], "  ", 
                    Manipulate`Place[5], "  ", 
                    Manipulate`Place[6]}], 
                    Manipulate`Place[7]}], 
                    Column[{
                    Row[{
                    Manipulate`Place[8], "  ", 
                    Manipulate`Place[9]}], 
                    Row[{
                    Manipulate`Place[10], "   settings: ", 
                    Button[
                    "1", CalculateScan`PlotterScanner`Private`ar$$ = 1, 
                    ImageSize -> Small, Appearance -> "Palette", 
                    BaseStyle -> {}], "  ", 
                    Button["unscaled axes", 
                    (If[
                    1/4 <= # <= 4, 
                    CalculateScan`PlotterScanner`Private`ar$$ = #]& )[Abs[
                    Apply[
                    Subtract, CalculateScan`PlotterScanner`Private`pRY]]/Abs[
                    Apply[
                    Subtract, CalculateScan`PlotterScanner`Private`pRX]]], 
                    ImageSize -> Small, Appearance -> "Palette", 
                    BaseStyle -> {}]}]}], 
                    TabView[{Row[{" ", 
                    Dynamic[
                    If[CalculateScan`PlotterScanner`Private`tangentTF$$, 
                    Style[
                    "\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`tangentColor$$, 
                    Bold], " "]], 
                    Tooltip[" tangents             ", 
                    Style[" family of tangents at points along the curve ", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> 
                    Grid[{{"show tangents", 
                    Manipulate`Place[11]}, {"tangent count", 
                    Manipulate`Place[12]}, {"tangent length", 
                    Manipulate`Place[13]}, {"tangent thickness", 
                    Manipulate`Place[14]}, {"tangent color", 
                    Manipulate`Place[15]}, {"tangent opacity", 
                    Manipulate`Place[16]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    False}}], Row[{" ", 
                    Dynamic[
                    If[CalculateScan`PlotterScanner`Private`normalTF$$, 
                    Style[
                    "\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`normalColor$$, Bold],
                     " "]], 
                    Tooltip[" normals              ", 
                    Style[" family of normals at points along the curve ", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> 
                    Grid[{{"show normals", 
                    Manipulate`Place[17]}, {"normal count", 
                    Manipulate`Place[18]}, {"normal length", 
                    Manipulate`Place[19]}, {"normal thickness", 
                    Manipulate`Place[20]}, {"normal color", 
                    Manipulate`Place[21]}, {"normal opacity", 
                    Manipulate`Place[22]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    False}}], Row[{" ", 
                    Dynamic[
                    If[CalculateScan`PlotterScanner`Private`tiltedTangentTF$$, 
                    Style[
                    "\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`tiltedTangentColor$$,
                     Bold], " "]], 
                    Tooltip[" tilted tangents      ", 
                    Style[
                    " family of tilted tangents at points along the curve ", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> 
                    Grid[{{"show tilted tangents", 
                    Manipulate`Place[23]}, {"tilted tangent angle", 
                    Manipulate`Place[24]}, {"tilted tangent count", 
                    Manipulate`Place[25]}, {"tilted tangent length", 
                    Manipulate`Place[26]}, {"tilted tangent thickness", 
                    Manipulate`Place[27]}, {"tilted tangent color", 
                    Manipulate`Place[28]}, {"tilted tangent opacity", 
                    Manipulate`Place[29]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    False}}], Row[{" ", 
                    Dynamic[
                    If[
                    CalculateScan`PlotterScanner`Private`osculatingCircleTF$$, 
                    Style[
                    "\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleColor$$, Bold], " "]], 
                    Tooltip[" osculating circles   ", 
                    Style[
                    " family of osculating circles (circles that are tangent \
to the curve) at points along the curve", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> Column[{
                    Grid[{{"show osculating circles", 
                    Manipulate`Place[30]}, {"osculating circle count", 
                    Manipulate`Place[31]}, {"osculating circle thickness", 
                    Manipulate`Place[32]}, {"osculating circle color", 
                    Manipulate`Place[33]}, {"osculating circle opacity", 
                    Manipulate`Place[34]}, {"show circle radii", 
                    Manipulate`Place[35]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    True}}], 
                    Dynamic[
                    Style[
                    If[
                    And[
                    CalculateScan`PlotterScanner`Private`osculatingCircleTF$$, 
                    Not[
                    0.98 < CalculateScan`PlotterScanner`Private`ar$$ < 1.02]],
                     "(note than circles appear as ellipses for unequally\n\
scaled horizontal and vertical axes)", ""]], 
                    RGBColor[
                    0.6666666666666666, 0.6666666666666666, 
                    0.6666666666666666]]}, Alignment -> Left], Row[{" ", 
                    Dynamic[
                    If[
                    CalculateScan`PlotterScanner`Private`taylorParabolaTF$$, 
                    Style[
                    "\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`taylorParabolaColor$$\
, Bold], " "]], 
                    Tooltip[" Taylor parabolas     ", 
                    Style[" family of second order Taylor approximations", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> Column[{
                    Grid[{{"show Taylor parabolas", 
                    Manipulate`Place[36]}, {"Taylor parabola count", 
                    Manipulate`Place[37]}, {"Taylor parabola thickness", 
                    Manipulate`Place[38]}, {"Taylor parabola color", 
                    Manipulate`Place[39]}, {"Taylor parabola opacity", 
                    Manipulate`Place[40]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    True}}]}, Alignment -> Left], Row[{" ", 
                    Dynamic[
                    If[CalculateScan`PlotterScanner`Private`involuteTF$$, 
                    Style[
                    "\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`involuteColor$$, 
                    Bold], " "]], 
                    Tooltip[" involutes            ", 
                    Style[
                    " family of involutes (curves traced out by strings \
unwound from the curve) of the curve", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> 
                    Grid[{{"show involutes", 
                    Manipulate`Place[41]}, {"involute count", 
                    Manipulate`Place[42]}, {"involute thickness", 
                    Manipulate`Place[43]}, {"involute color", 
                    Manipulate`Place[44]}, {"involute opacity", 
                    Manipulate`Place[45]}, {"directions", 
                    Row[{"\[DoubleLongLeftArrow]", 
                    Manipulate`Place[46], "  \[DoubleLongRightArrow]", 
                    Manipulate`Place[47]}]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    True}}], Row[{" ", 
                    Dynamic[
                    If[CalculateScan`PlotterScanner`Private`evoluteTF$$, 
                    Style[
                    "\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`evoluteColor$$, 
                    Bold], " "]], 
                    Tooltip[" evolute              ", 
                    Style[
                    " the evolute of a given curve (curve of the centers of \
the osculating circles))", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> 
                    Grid[{{"show evolute", 
                    Manipulate`Place[48]}, {"evolute thickness", 
                    Manipulate`Place[49]}, {"evolute color", 
                    Manipulate`Place[50]}, {"evolute opacity", 
                    Manipulate`Place[51]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    False}}], Row[{" ", 
                    Dynamic[
                    If[CalculateScan`PlotterScanner`Private`offsetCurveTF$$, 
                    Style[
                    "\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`offsetCurveColor$$, 
                    Bold], " "]], 
                    Tooltip[" offset curves        ", 
                    Style[
                    " family of offset curves (curves shifted a fixed \
distance perpendicular to each point of the original curve) ", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> 
                    Grid[{{"show offset curves", 
                    Manipulate`Place[52]}, {"offset curve distance", 
                    Manipulate`Place[53]}, {"offset curve count", 
                    Manipulate`Place[54]}, {"offset curve thickness", 
                    Manipulate`Place[55]}, {"offset curve color", 
                    Manipulate`Place[56]}, {"offset curve opacity", 
                    Manipulate`Place[57]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    False}}], Row[{" ", 
                    Dynamic[
                    If[
                    CalculateScan`PlotterScanner`Private`tiltedOffsetCurveTF$$\
, 
                    Style["\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveColor$$, Bold], " "]], 
                    Tooltip[" tilted offset curves ", 
                    Style[
                    " family of tilted offset curves (curves shifted a fixed \
distance in a direction with a fixed angle \n                                 \
     to the local normal to each point of the original curve) ", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> 
                    Grid[{{"show tilted offset curves", 
                    Manipulate`Place[58]}, {"tilted offset curve angle", 
                    Manipulate`Place[59]}, {"tilted offset curve distance", 
                    Manipulate`Place[60]}, {"tilted offset curve count", 
                    Manipulate`Place[61]}, {"tilted offset curve thickness", 
                    Manipulate`Place[62]}, {"tilted offset curve color", 
                    Manipulate`Place[63]}, {"tilted offset curve opacity", 
                    Manipulate`Place[64]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    False}}], Row[{" ", 
                    Dynamic[
                    If[CalculateScan`PlotterScanner`Private`pedalCurveTF$$, 
                    Style[
                    "\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`pedalCurveColor$$, 
                    Bold], " "]], 
                    Tooltip[" pedal curves         ", 
                    Style[
                    " family of pedal curves (curves on the tangents of the \
given curve perpendicular to a given point) ", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> 
                    Grid[{{"show pedal curves", 
                    Manipulate`Place[65]}, {"pedal curve count", 
                    Manipulate`Place[66]}, {"pedal curve thickness", 
                    Manipulate`Place[67]}, {"pedal curve color", 
                    Manipulate`Place[68]}, {"pedal curve opacity", 
                    Manipulate`Place[69]}, {"pedal points", 
                    Manipulate`Place[70]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    True}}], Row[{" ", 
                    Dynamic[
                    If[
                    CalculateScan`PlotterScanner`Private`negativePedalCurveTF$\
$, 
                    Style["\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurveColor$$, Bold], " "]], 
                    Tooltip[" negative pedal curves", 
                    Style[
                    " family of negative pedal curves (envelope curves of \
lines perpendicular to the given curve and a given point) ", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> 
                    Grid[{{"show negative pedal curves", 
                    Manipulate`Place[71]}, {"negative pedal curve count", 
                    Manipulate`Place[72]}, {
                    "negative pedal curve thickness", 
                    Manipulate`Place[73]}, {"negative pedal curve color", 
                    Manipulate`Place[74]}, {"negative pedal curve opacity", 
                    Manipulate`Place[75]}, {"negative pedal points", 
                    Manipulate`Place[76]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    False}}], Row[{" ", 
                    Dynamic[
                    If[
                    CalculateScan`PlotterScanner`Private`contraPedalCurveTF$$, 
                    Style[
                    "\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurveColor$$, Bold], " "]], 
                    Tooltip[" contrapedal curves   ", 
                    Style[
                    " family of contrapedal curves (curves on the normals of \
the given curve perpendicular to a given point) ", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> 
                    Grid[{{"show contrapedal curves", 
                    Manipulate`Place[77]}, {"contrapedal curve count", 
                    Manipulate`Place[78]}, {"contrapedal curve thickness", 
                    Manipulate`Place[79]}, {"contrapedal curve color", 
                    Manipulate`Place[80]}, {"contrapedal curve opacity", 
                    Manipulate`Place[81]}, {"contrapedal pedal points", 
                    Manipulate`Place[82]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    False}}], Row[{" ", 
                    Dynamic[
                    If[CalculateScan`PlotterScanner`Private`dualCurveTF$$, 
                    Style[
                    "\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`dualCurveColor$$, 
                    Bold], " "]], 
                    Tooltip[" dual curves          ", 
                    Style[
                    " dual curve of the given curve (the dual curbe maps \
inflection points to cusps) ", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> 
                    Grid[{{"show dual curves", 
                    Manipulate`Place[83]}, {"dual curve count", 
                    Manipulate`Place[84]}, {"dual curve thickness", 
                    Manipulate`Place[85]}, {"dual curve color", 
                    Manipulate`Place[86]}, {"dual curve opacity", 
                    Manipulate`Place[87]}, {"dual curve points", 
                    Manipulate`Place[88]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    False}}], Row[{" ", 
                    Dynamic[
                    If[
                    CalculateScan`PlotterScanner`Private`inverseCurveTF$$, 
                    Style[
                    "\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`inverseCurveColor$$, 
                    Bold], " "]], 
                    Tooltip[" inverse curves       ", 
                    Style[
                    " inverse curves (curves resulting from carrying of an \
inversion on circles) ", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> 
                    Grid[{{"show inverse curves", 
                    Manipulate`Place[89]}, {"inverse curve count", 
                    Manipulate`Place[90]}, {"inverse curve thickness", 
                    Manipulate`Place[91]}, {"inverse curve color", 
                    Manipulate`Place[92]}, {"inverse curve opacity", 
                    Manipulate`Place[93]}, {"inversion curve points", 
                    Manipulate`Place[94]}, {"inversion circle radius", 
                    Manipulate`Place[95]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    False}}], Row[{" ", 
                    Dynamic[
                    If[
                    CalculateScan`PlotterScanner`Private`isopticCurveTF$$, 
                    Style[
                    "\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`isopticCurveColor$$, 
                    Bold], " "]], 
                    Tooltip[" isoptic curves       ", 
                    Style[
                    " inverse curves (points on isoptic curves have two \
tangents with the given curve and the two tangents meet with the specified \
angle)) ", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> Column[{
                    Grid[{{"show isoptic curves", 
                    Manipulate`Place[96]}, {"isoptic curve angle", 
                    Manipulate`Place[97]}, {"isoptic curve thickness", 
                    Manipulate`Place[98]}, {"isoptic curve color", 
                    Manipulate`Place[99]}, {"isoptic curve opacity", 
                    Manipulate`Place[100]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    False}}], 
                    Dynamic[
                    Style[
                    If[
                    TrueQ[
                    And[
                    CalculateScan`PlotterScanner`Private`isopticCurveTF$$, 
                    CalculateScan`PlotterScanner`Private`x1x2SCPCurves === \
{}]], "(note than the set of isoptic curves for a given angle can be empty)", 
                    ""]], 
                    RGBColor[
                    0.6666666666666666, 0.6666666666666666, 
                    0.6666666666666666]]}, Alignment -> Left], Row[{" ", 
                    Dynamic[
                    If[
                    CalculateScan`PlotterScanner`Private`orthotomicCurveTF$$, 
                    
                    Style[
                    "\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`orthotomicCurveColor$\
$, Bold], " "]], 
                    Tooltip[" orthotomic curves    ", 
                    Style[
                    " orthotomic curves (points of reflections of a given \
point on curve tangents)) ", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> 
                    Grid[{{"show orthotomic curves", 
                    Manipulate`Place[101]}, {"orthotomic curve angle", 
                    Manipulate`Place[102]}, {"orthotomic curve count", 
                    Manipulate`Place[103]}, {"orthotomic curve thickness", 
                    Manipulate`Place[104]}, {"orthotomic curve color", 
                    Manipulate`Place[105]}, {"orthotomic curve opacity", 
                    Manipulate`Place[106]}, {"orthotomic curve points", 
                    Manipulate`Place[107]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    False}}]}, 2, ImageSize -> {All, Automatic}, 
                    ControlPlacement -> Left]}, 
                    Dividers -> {None, {False, True, True, True}}, Spacings -> 
                    1], ItemSize -> Scaled[1], 
                    Frame -> {None, None, True, None}]}}, FrameStyle -> 
                    GrayLevel[0.9], Alignment -> Left, Spacings -> {0, 0.8}], 
                    False -> Button[
                    Row[{
                    RawBoxes[
                    GraphicsBox[
                    TagBox[
                    RasterBox[{{{255, 255, 255}, {255, 255, 255}, {255, 132, 
                    0}, {255, 132, 0}, {255, 255, 255}, {255, 255, 255}}, {{
                    255, 255, 255}, {255, 255, 255}, {255, 132, 0}, {255, 132,
                     0}, {255, 255, 255}, {255, 255, 255}}, {{255, 132, 0}, {
                    255, 132, 0}, {255, 132, 0}, {255, 132, 0}, {255, 132, 
                    0}, {255, 132, 0}}, {{255, 132, 0}, {255, 132, 0}, {255, 
                    132, 0}, {255, 132, 0}, {255, 132, 0}, {255, 132, 0}}, {{
                    255, 255, 255}, {255, 255, 255}, {255, 132, 0}, {255, 132,
                     0}, {255, 255, 255}, {255, 255, 255}}, {{255, 255, 
                    255}, {255, 255, 255}, {255, 132, 0}, {255, 132, 0}, {255,
                     255, 255}, {255, 255, 255}}}, {{0, 6}, {6, 0}}, {0, 255},
                     ColorFunction -> RGBColor], 
                    BoxForm`ImageTag[
                    "Byte", ColorSpace -> "RGB", Interleaving -> True], 
                    Selectable -> False], BaseStyle -> "ImageGraphics", 
                    ImageSize -> Magnification[1], ImageSizeRaw -> {6, 6}, 
                    BaselinePosition -> (Scaled[0.3] -> Center), 
                    PlotRange -> {{0, 6}, {0, 6}}]], " More controls"}], 
                    CalculateUtilities`GraphicsUtilities`Private`more$$ = 
                    True, Appearance -> None, BaseStyle -> {}]}, 
                    Dynamic[
                    CalculateUtilities`GraphicsUtilities`Private`more$$], 
                    ImageSize -> Automatic]}], 
                    ImageMargins -> {{20, 30}, {10, 10}}]}, {1, 2}, 2, 
                    Alignment -> {Left, Top}]]], 
                    Manipulate`Dump`ThisIsNotAControl}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleLastParamaters$$], {}}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`osculatingCircles$$],\
 {}}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
taylorParabolaLastParamaters$$], {}}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`taylorParabolas$$], \
{}}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
offsetCurveLastParamaters$$], {}}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
offsetCurvePlotCurves$$], {}}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveLastParamaters$$], {}}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurvePlotCurves$$], {}}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
pedalCurveLastParamaters$$], {}}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`pedalCurvePlotCurves$\
$], {}}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurveLastParamaters$$], {}}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurvePlotCurves$$], {}}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurveLastParamaters$$], {}}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurvePlotCurves$$], {}}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
dualCurveLastParamaters$$], {}}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`dualCurvePlotCurves$$\
], {}}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
inverseLastParamaters$$], {}}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
inverseCurvePlotCurves$$], {}}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
orthotomicLastParamaters$$], {}}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
orthotomicCurvePlotCurves$$], {}}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
isopticLastParamaters$$], {}}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
isopticCurvePlotCurves$$], {}}}}, Typeset`size$$ = Automatic, 
                 Typeset`update$$ = 0, Typeset`initDone$$ = False, 
                 Typeset`skipInitDone$$ = False, 
                 CalculateUtilities`GraphicsUtilities`Private`more$135404$$ = 
                 False, CalculateScan`PlotterScanner`Private`x1$135405$$ = 0, 
                 CalculateScan`PlotterScanner`Private`x2$135406$$ = 0, 
                 CalculateScan`PlotterScanner`Private`symmxQ$135407$$ = False,
                  CalculateScan`PlotterScanner`Private`fy1$135408$$ = 0, 
                 CalculateScan`PlotterScanner`Private`fy2$135409$$ = 0, 
                 CalculateScan`PlotterScanner`Private`symmyQ$135410$$ = False,
                  CalculateScan`PlotterScanner`Private`sqPRQ$135411$$ = False,
                  CalculateScan`PlotterScanner`Private`ar$135412$$ = 0, 
                 CalculateScan`PlotterScanner`Private`tangentCount$135413$$ = 
                 0, CalculateScan`PlotterScanner`Private`tangentLength$135414$\
$ = 0, CalculateScan`PlotterScanner`Private`tangentThickness$135415$$ = 0, 
                 CalculateScan`PlotterScanner`Private`tangentOpacity$135416$$ = 
                 0, CalculateScan`PlotterScanner`Private`normalCount$135417$$ = 
                 0}, 
                DynamicBox[
                 Manipulate`ManipulateBoxes[
                 2, TraditionalForm, 
                  "Variables" :> {
                   CalculateScan`PlotterScanner`Private`ar$$ = 1, 
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurveColor$$ = RGBColor[0.7464574, 0.2952580000000001, 0.2454606], 
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurveCountFactor$$ = 0.3, 
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurveLastParamaters$$ = {}, 
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurveOpacity$$ = 0.8, 
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurvePlotCurves$$ = {}, 
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurvePoints$$ = "curve", 
                    CalculateScan`PlotterScanner`Private`contraPedalCurveTF$$ = 
                    False, CalculateScan`PlotterScanner`Private`\
contraPedalCurveThickness$$ = -3., 
                    CalculateScan`PlotterScanner`Private`dualCurveColor$$ = 
                    RGBColor[0.2860602, 0.4663408, 0.29410879999999995`], 
                    CalculateScan`PlotterScanner`Private`dualCurveCountFactor$\
$ = 0.3, CalculateScan`PlotterScanner`Private`dualCurveLastParamaters$$ = {}, 
                    CalculateScan`PlotterScanner`Private`dualCurveOpacity$$ = 
                    0.8, CalculateScan`PlotterScanner`Private`\
dualCurvePlotCurves$$ = {}, 
                    CalculateScan`PlotterScanner`Private`dualCurveTF$$ = 
                    False, CalculateScan`PlotterScanner`Private`\
dualCurveThickness$$ = -3., 
                    CalculateScan`PlotterScanner`Private`dualPedalCurvePoints$\
$ = "curve", CalculateScan`PlotterScanner`Private`evoluteColor$$ = 
                    RGBColor[0.813033, 0.766292, 0.303458], 
                    CalculateScan`PlotterScanner`Private`evoluteOpacity$$ = 
                    0.8, CalculateScan`PlotterScanner`Private`evoluteTF$$ = 
                    False, CalculateScan`PlotterScanner`Private`\
evoluteThickness$$ = -3., CalculateScan`PlotterScanner`Private`fy1$$ = 
                    0.982793723247329, 
                    CalculateScan`PlotterScanner`Private`fy2$$ = 
                    0.982793723247329, 
                    CalculateScan`PlotterScanner`Private`\
inverseCurveCircleRadiusFactor$$ = 0.4636476090008061, 
                    CalculateScan`PlotterScanner`Private`inverseCurveColor$$ = 
                    RGBColor[0.2860602, 0.4663408, 0.29410879999999995`], 
                    CalculateScan`PlotterScanner`Private`\
inverseCurveCountFactor$$ = 0.3, 
                    CalculateScan`PlotterScanner`Private`inverseCurveOpacity$$\
 = 0.8, CalculateScan`PlotterScanner`Private`inverseCurvePlotCurves$$ = {}, 
                    CalculateScan`PlotterScanner`Private`inverseCurvePoints$$ = 
                    "grid", 
                    CalculateScan`PlotterScanner`Private`inverseCurveTF$$ = 
                    False, CalculateScan`PlotterScanner`Private`\
inverseCurveThickness$$ = -3., 
                    CalculateScan`PlotterScanner`Private`\
inverseLastParamaters$$ = {}, 
                    CalculateScan`PlotterScanner`Private`involuteColor$$ = 
                    RGBColor[0.49978279999999997`, 0.6025278, 0.2508104], 
                    CalculateScan`PlotterScanner`Private`involuteCount$$ = 60,
                     CalculateScan`PlotterScanner`Private`involuteOpacity$$ = 
                    0.8, CalculateScan`PlotterScanner`Private`involutesLeftTF$\
$ = False, CalculateScan`PlotterScanner`Private`involutesRightTF$$ = True, 
                    CalculateScan`PlotterScanner`Private`involuteTF$$ = False,
                     CalculateScan`PlotterScanner`Private`involuteThickness$$ = \
-3., CalculateScan`PlotterScanner`Private`isopticCurveAngle$$ = 
                    Rational[1, 3] Pi, 
                    CalculateScan`PlotterScanner`Private`isopticCurveColor$$ = 
                    RGBColor[
                    0.8519382, 0.7451437999999999, 0.31752080000000005`], 
                    CalculateScan`PlotterScanner`Private`isopticCurveOpacity$$\
 = 0.8, CalculateScan`PlotterScanner`Private`isopticCurvePlotCurves$$ = {}, 
                    CalculateScan`PlotterScanner`Private`isopticCurveTF$$ = 
                    False, CalculateScan`PlotterScanner`Private`\
isopticCurveThickness$$ = -3., 
                    CalculateScan`PlotterScanner`Private`\
isopticLastParamaters$$ = {}, 
                    CalculateUtilities`GraphicsUtilities`Private`more$$ = 
                    False, CalculateScan`PlotterScanner`Private`\
negativePedalCurveColor$$ = 
                    RGBColor[0.7464574, 0.2952580000000001, 0.2454606], 
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurveCountFactor$$ = 0.3, 
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurveLastParamaters$$ = {}, 
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurveOpacity$$ = 0.8, 
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurvePlotCurves$$ = {}, 
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurvePoints$$ = "curve", 
                    CalculateScan`PlotterScanner`Private`negativePedalCurveTF$\
$ = False, 
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurveThickness$$ = -3., 
                    CalculateScan`PlotterScanner`Private`normalColor$$ = 
                    RGBColor[0.237, 0.34, 0.575], 
                    CalculateScan`PlotterScanner`Private`normalCount$$ = 120, 
                    CalculateScan`PlotterScanner`Private`normalLength$$ = 
                    0.17067775900425536`, 
                    CalculateScan`PlotterScanner`Private`normalOpacity$$ = 
                    0.8, CalculateScan`PlotterScanner`Private`normalTF$$ = 
                    True, CalculateScan`PlotterScanner`Private`\
normalThickness$$ = -3., 
                    CalculateScan`PlotterScanner`Private`offsetCurveColor$$ = 
                    RGBColor[0.877875, 0.731045, 0.326896], 
                    CalculateScan`PlotterScanner`Private`offsetCurveCount$$ = 
                    12, CalculateScan`PlotterScanner`Private`\
offsetCurveDistance$$ = 0.17067775900425536`, 
                    CalculateScan`PlotterScanner`Private`\
offsetCurveLastParamaters$$ = {}, 
                    CalculateScan`PlotterScanner`Private`offsetCurveOpacity$$ = 
                    0.8, 
                    CalculateScan`PlotterScanner`Private`\
offsetCurvePlotCurves$$ = {}, 
                    CalculateScan`PlotterScanner`Private`offsetCurveTF$$ = 
                    False, CalculateScan`PlotterScanner`Private`\
offsetCurveThickness$$ = -3., 
                    CalculateScan`PlotterScanner`Private`orthotomicCurveAngle$\
$ = Rational[1, 3] Pi, 
                    CalculateScan`PlotterScanner`Private`orthotomicCurveColor$\
$ = RGBColor[0.8519382, 0.7451437999999999, 0.31752080000000005`], 
                    CalculateScan`PlotterScanner`Private`\
orthotomicCurveCountFactor$$ = 0.3, 
                    CalculateScan`PlotterScanner`Private`\
orthotomicCurveOpacity$$ = 0.8, 
                    CalculateScan`PlotterScanner`Private`\
orthotomicCurvePlotCurves$$ = {}, 
                    CalculateScan`PlotterScanner`Private`\
orthotomicCurvePoints$$ = "curve", 
                    CalculateScan`PlotterScanner`Private`orthotomicCurveTF$$ = 
                    False, CalculateScan`PlotterScanner`Private`\
orthotomicCurveThickness$$ = -3., 
                    CalculateScan`PlotterScanner`Private`\
orthotomicLastParamaters$$ = {}, 
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleColor$$ = 
                    RGBColor[0.2752426, 0.4446824, 0.33950440000000004`], 
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleCount$$ = 60, 
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleLastParamaters$$ = {}, 
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleOpacity$$ = 0.8, 
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleRadiiTF$$ = False, 
                    CalculateScan`PlotterScanner`Private`osculatingCircles$$ = \
{}, CalculateScan`PlotterScanner`Private`osculatingCircleTF$$ = False, 
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleThickness$$ = -3., 
                    CalculateScan`PlotterScanner`Private`pedalCurveColor$$ = 
                    RGBColor[0.32894650000000003`, 0.5006225, 0.2625337], 
                    CalculateScan`PlotterScanner`Private`\
pedalCurveCountFactor$$ = 0.3, 
                    CalculateScan`PlotterScanner`Private`\
pedalCurveLastParamaters$$ = {}, 
                    CalculateScan`PlotterScanner`Private`pedalCurveOpacity$$ = 
                    0.8, CalculateScan`PlotterScanner`Private`\
pedalCurvePlotCurves$$ = {}, 
                    CalculateScan`PlotterScanner`Private`pedalCurvePoints$$ = 
                    "curve", 
                    CalculateScan`PlotterScanner`Private`pedalCurveTF$$ = 
                    False, CalculateScan`PlotterScanner`Private`\
pedalCurveThickness$$ = -3., CalculateScan`PlotterScanner`Private`sa$$ = 
                    False, CalculateScan`PlotterScanner`Private`sqPRQ$$ = 
                    False, CalculateScan`PlotterScanner`Private`st$$ = False, 
                    CalculateScan`PlotterScanner`Private`symmxQ$$ = False, 
                    CalculateScan`PlotterScanner`Private`symmyQ$$ = True, 
                    CalculateScan`PlotterScanner`Private`tangentColor$$ = 
                    RGBColor[0.237736, 0.340215, 0.575113], 
                    CalculateScan`PlotterScanner`Private`tangentCount$$ = 60, 
                    CalculateScan`PlotterScanner`Private`tangentLength$$ = 
                    0.17067775900425536`, 
                    CalculateScan`PlotterScanner`Private`tangentOpacity$$ = 
                    0.8, CalculateScan`PlotterScanner`Private`tangentTF$$ = 
                    False, CalculateScan`PlotterScanner`Private`\
tangentThickness$$ = -3., 
                    CalculateScan`PlotterScanner`Private`taylorParabolaColor$$\
 = RGBColor[0.7189495000000001, 0.719797, 0.283877], 
                    CalculateScan`PlotterScanner`Private`taylorParabolaCount$$\
 = 36, CalculateScan`PlotterScanner`Private`taylorParabolaLastParamaters$$ = \
{}, CalculateScan`PlotterScanner`Private`taylorParabolaOpacity$$ = 0.8, 
                    CalculateScan`PlotterScanner`Private`taylorParabolas$$ = \
{}, CalculateScan`PlotterScanner`Private`taylorParabolaTF$$ = False, 
                    CalculateScan`PlotterScanner`Private`\
taylorParabolaThickness$$ = -3., 
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveAngle$$ = Rational[1, 4] Pi, 
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveColor$$ = 
                    RGBColor[0.49978279999999997`, 0.6025278, 0.2508104], 
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveCount$$ = 12, 
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveDistance$$ = 0.17067775900425536`, 
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveLastParamaters$$ = {}, 
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveOpacity$$ = 0.8, 
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurvePlotCurves$$ = {}, 
                    CalculateScan`PlotterScanner`Private`tiltedOffsetCurveTF$$\
 = False, 
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveThickness$$ = -3., 
                    CalculateScan`PlotterScanner`Private`tiltedTangentAngle$$ = 
                    Rational[1, 4] Pi, 
                    CalculateScan`PlotterScanner`Private`tiltedTangentColor$$ = 
                    RGBColor[
                    0.2622702, 0.40739780000000003`, 0.41955020000000004`], 
                    CalculateScan`PlotterScanner`Private`tiltedTangentCount$$ = 
                    60, CalculateScan`PlotterScanner`Private`\
tiltedTangentLength$$ = 0.17067775900425536`, 
                    CalculateScan`PlotterScanner`Private`tiltedTangentOpacity$\
$ = 0.8, CalculateScan`PlotterScanner`Private`tiltedTangentTF$$ = False, 
                    CalculateScan`PlotterScanner`Private`\
tiltedTangentThickness$$ = -3., 
                    CalculateScan`PlotterScanner`Private`x1$$ = \
-0.7853981633974483, CalculateScan`PlotterScanner`Private`x2$$ = 
                    0.7853981633974483}, "ControllerVariables" :> {
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`more$$, 
                    CalculateUtilities`GraphicsUtilities`Private`more$135404$$\
, False], 
                    Hold[
                    CalculateScan`PlotterScanner`Private`x1$$, 
                    CalculateScan`PlotterScanner`Private`x1$135405$$, 0], 
                    Hold[
                    CalculateScan`PlotterScanner`Private`x2$$, 
                    CalculateScan`PlotterScanner`Private`x2$135406$$, 0], 
                    Hold[
                    CalculateScan`PlotterScanner`Private`symmxQ$$, 
                    CalculateScan`PlotterScanner`Private`symmxQ$135407$$, 
                    False], 
                    Hold[
                    CalculateScan`PlotterScanner`Private`fy1$$, 
                    CalculateScan`PlotterScanner`Private`fy1$135408$$, 0], 
                    Hold[
                    CalculateScan`PlotterScanner`Private`fy2$$, 
                    CalculateScan`PlotterScanner`Private`fy2$135409$$, 0], 
                    Hold[
                    CalculateScan`PlotterScanner`Private`symmyQ$$, 
                    CalculateScan`PlotterScanner`Private`symmyQ$135410$$, 
                    False], 
                    Hold[
                    CalculateScan`PlotterScanner`Private`sqPRQ$$, 
                    CalculateScan`PlotterScanner`Private`sqPRQ$135411$$, 
                    False], 
                    Hold[
                    CalculateScan`PlotterScanner`Private`ar$$, 
                    CalculateScan`PlotterScanner`Private`ar$135412$$, 0], 
                    Hold[
                    CalculateScan`PlotterScanner`Private`tangentCount$$, 
                    CalculateScan`PlotterScanner`Private`tangentCount$135413$$\
, 0], 
                    Hold[
                    CalculateScan`PlotterScanner`Private`tangentLength$$, 
                    CalculateScan`PlotterScanner`Private`tangentLength$135414$\
$, 0], 
                    Hold[
                    CalculateScan`PlotterScanner`Private`tangentThickness$$, 
                    CalculateScan`PlotterScanner`Private`tangentThickness$\
135415$$, 0], 
                    Hold[
                    CalculateScan`PlotterScanner`Private`tangentOpacity$$, 
                    CalculateScan`PlotterScanner`Private`tangentOpacity$\
135416$$, 0], 
                    Hold[
                    CalculateScan`PlotterScanner`Private`normalCount$$, 
                    CalculateScan`PlotterScanner`Private`normalCount$135417$$,
                     0]}, "OtherVariables" :> {
                   Typeset`show$$, Typeset`bookmarkList$$, 
                    Typeset`bookmarkMode$$, Typeset`animator$$, 
                    Typeset`animvar$$, Typeset`name$$, Typeset`specs$$, 
                    Typeset`size$$, Typeset`update$$, Typeset`initDone$$, 
                    Typeset`skipInitDone$$}, "Body" :> Quiet[
                    
                    Module[{
                    CalculateScan`PlotterScanner`Private`x1Old$, 
                    CalculateScan`PlotterScanner`Private`x2Old$, 
                    CalculateScan`PlotterScanner`Private`fy1Old$, 
                    CalculateScan`PlotterScanner`Private`fy2Old$, 
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$, 
                    CalculateScan`PlotterScanner`Private`singularities$, 
                    CalculateScan`PlotterScanner`Private`ts$, 
                    CalculateScan`PlotterScanner`Private`xL$, 
                    CalculateScan`PlotterScanner`Private`xU$, 
                    CalculateScan`PlotterScanner`Private`yL$, 
                    CalculateScan`PlotterScanner`Private`yU$, 
                    CalculateScan`PlotterScanner`Private`pRX$, 
                    CalculateScan`PlotterScanner`Private`\[CapitalDelta]X$, 
                    CalculateScan`PlotterScanner`Private`\[CapitalDelta]y$, 
                    CalculateScan`PlotterScanner`Private`Y1$, 
                    CalculateScan`PlotterScanner`Private`Y2$, 
                    CalculateScan`PlotterScanner`Private`pRY$, 
                    CalculateScan`PlotterScanner`Private`originalCurvePlot0$, 
                    CalculateScan`PlotterScanner`Private`originalCurvePlot$, 
                    CalculateScan`PlotterScanner`Private`tangentsLines$, 
                    CalculateScan`PlotterScanner`Private`tangentLinePlot$, 
                    CalculateScan`PlotterScanner`Private`normalLines$, 
                    CalculateScan`PlotterScanner`Private`normalLinePlot$, 
                    CalculateScan`PlotterScanner`Private`tiltedTangentLines$, 
                    CalculateScan`PlotterScanner`Private`\
tiltedTangentLinePlot$, 
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleRadii$, 
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleLastParamaters$, 
                    CalculateScan`PlotterScanner`Private`osculatingCirclePlot$\
, CalculateScan`PlotterScanner`Private`taylorParabolaPlot$, 
                    CalculateScan`PlotterScanner`Private`evolutePlot$, 
                    CalculateScan`PlotterScanner`Private`involutePlotCurves$, 
                    CalculateScan`PlotterScanner`Private`\
involutePlotCurveLastParamaters$, 
                    CalculateScan`PlotterScanner`Private`involutePlot$, 
                    CalculateScan`PlotterScanner`Private`iTab$, 
                    CalculateScan`PlotterScanner`Private`xLi$, 
                    CalculateScan`PlotterScanner`Private`xUi$, 
                    CalculateScan`PlotterScanner`Private`arcLength$, 
                    CalculateScan`PlotterScanner`Private`arcL$, 
                    CalculateScan`PlotterScanner`Private`xi1$, 
                    CalculateScan`PlotterScanner`Private`xi2$, 
                    CalculateScan`PlotterScanner`Private`lineSegments$, 
                    CalculateScan`PlotterScanner`Private`baseSegments$, 
                    CalculateScan`PlotterScanner`Private`oSegments$, 
                    CalculateScan`PlotterScanner`Private`arcFactors$, 
                    CalculateScan`PlotterScanner`Private`iTabRight$, 
                    CalculateScan`PlotterScanner`Private`iTabLeft$, 
                    CalculateScan`PlotterScanner`Private`signedArcFactors$, 
                    CalculateScan`PlotterScanner`Private`curvePoints$}, If[
                    And[CalculateScan`PlotterScanner`Private`sa$$ === False, 
                    CalculateScan`PlotterScanner`Private`st$$ == True], 
                    CalculateScan`PlotterScanner`Private`st$$ = False]; 
                    If[CalculateScan`PlotterScanner`Private`symmxQ$$, 
                    If[
                    And[
                    CalculateScan`PlotterScanner`Private`x1$$ == 
                    CalculateScan`PlotterScanner`Private`x1Old$, 
                    CalculateScan`PlotterScanner`Private`x2$$ != 
                    CalculateScan`PlotterScanner`Private`x2Old$], 
                    CalculateScan`PlotterScanner`Private`x1$$ = -
                    CalculateScan`PlotterScanner`Private`x2$$, 
                    CalculateScan`PlotterScanner`Private`x2$$ = -
                    CalculateScan`PlotterScanner`Private`x1$$]]; 
                    CalculateScan`PlotterScanner`Private`x1Old$ = 
                    CalculateScan`PlotterScanner`Private`x1$$; 
                    CalculateScan`PlotterScanner`Private`x2Old$ = 
                    CalculateScan`PlotterScanner`Private`x2$$; 
                    If[CalculateScan`PlotterScanner`Private`symmyQ$$, 
                    If[
                    And[
                    CalculateScan`PlotterScanner`Private`fy1$$ == 
                    CalculateScan`PlotterScanner`Private`fy1Old$, 
                    CalculateScan`PlotterScanner`Private`fy2$$ != 
                    CalculateScan`PlotterScanner`Private`fy2Old$], 
                    CalculateScan`PlotterScanner`Private`fy1$$ = 
                    CalculateScan`PlotterScanner`Private`fy2$$, 
                    CalculateScan`PlotterScanner`Private`fy2$$ = 
                    CalculateScan`PlotterScanner`Private`fy1$$]]; 
                    CalculateScan`PlotterScanner`Private`fy1Old$ = 
                    CalculateScan`PlotterScanner`Private`fy1$$; 
                    CalculateScan`PlotterScanner`Private`fy2Old$ = 
                    CalculateScan`PlotterScanner`Private`fy2$$; 
                    If[CalculateScan`PlotterScanner`Private`x1$$ == 
                    CalculateScan`PlotterScanner`Private`x2$$, 
                    CalculateScan`PlotterScanner`Private`x2$$ = 
                    CalculateScan`PlotterScanner`Private`x1$$ + 
                    11.603981633974483`/100]; {
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$} = Sort[
                    N[{
                    
                    Function[{
                    CalculateScan`PlotterScanner`Private`y, 
                    CalculateScan`PlotterScanner`Private`L}, (
                    Sign[CalculateScan`PlotterScanner`Private`y] 
                    CalculateScan`PlotterScanner`Private`L) Tan[
                    Abs[CalculateScan`PlotterScanner`Private`y]]^1][
                    CalculateScan`PlotterScanner`Private`x1$$, 
                    5.801990816987241], 
                    
                    Function[{
                    CalculateScan`PlotterScanner`Private`y, 
                    CalculateScan`PlotterScanner`Private`L}, (
                    Sign[CalculateScan`PlotterScanner`Private`y] 
                    CalculateScan`PlotterScanner`Private`L) Tan[
                    Abs[CalculateScan`PlotterScanner`Private`y]]^1][
                    CalculateScan`PlotterScanner`Private`x2$$, 
                    5.801990816987241]}]]; 
                    CalculateScan`PlotterScanner`Private`singularities$ = (
                    CalculateScan`PlotterScanner`Private`ts$ = 
                    TimeConstrained[
                    CalculateScan`PlotterScanner`Private`red = Reduce[
                    And[
                    1/((E^(2 Global`x) (-Cos[2 Global`x] + Sin[2 Global`x]))/
                    4) == 0, CalculateScan`PlotterScanner`Private`X1$ < 
                    Global`x < CalculateScan`PlotterScanner`Private`X2$], 
                    Global`x, Reals], 0.2, False]; 
                    If[CalculateScan`PlotterScanner`Private`ts$ === False, {}, 
                    Cases[
                    ReplaceAll[Global`x, {
                    ToRules[CalculateScan`PlotterScanner`Private`ts$]}], 
                    Blank[Real]]]); 
                    CalculateScan`PlotterScanner`Private`originalCurvePlot0$ = 
                    Plot[
                    CompiledFunction[{8, 8., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    4}}, {{0.25, {3, 0, 2}}, {2, {2, 0, 0}}}, {0, 1, 6, 0, 
                    0}, {{10, 0, 1}, {16, 1, 0, 1}, {40, 34, 3, 0, 1, 3, 0, 
                    3}, {40, 2, 3, 0, 1, 3, 0, 4}, {19, 4, 5}, {40, 1, 3, 0, 
                    1, 3, 0, 4}, {13, 5, 4, 5}, {16, 2, 3, 5, 4}, {1}}, 
                    Function[{Global`x}, 
                    
                    Block[{Compile`$673}, 
                    Compile`$673 = 
                    2 Global`x; (
                    E^Compile`$673 (-Cos[Compile`$673] + Sin[Compile`$673]))/
                    4]], Evaluate][Global`x], {
                    Global`x, CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$}, PlotStyle -> 
                    Directive[Black, Thick], Evaluated -> False, Exclusions -> 
                    CalculateScan`PlotterScanner`Private`singularities$]; {{
                    CalculateScan`PlotterScanner`Private`xL$, 
                    CalculateScan`PlotterScanner`Private`xU$}, {
                    CalculateScan`PlotterScanner`Private`yL$, 
                    CalculateScan`PlotterScanner`Private`yU$}} = 
                    FullOptions[
                    CalculateScan`PlotterScanner`Private`originalCurvePlot0$, 
                    PlotRange]; CalculateScan`PlotterScanner`Private`pRX$ = {
                    Min[
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$], 
                    Max[
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$]}; 
                    CalculateScan`PlotterScanner`Private`\[CapitalDelta]X$ = 
                    Abs[CalculateScan`PlotterScanner`Private`X2$ - 
                    CalculateScan`PlotterScanner`Private`X1$]; 
                    CalculateScan`PlotterScanner`Private`\[CapitalDelta]y$ = 
                    CalculateScan`PlotterScanner`Private`yU$ - 
                    CalculateScan`PlotterScanner`Private`yL$; If[
                    And[
                    CalculateScan`PlotterScanner`Private`sqPRQ$$, 
                    CalculateScan`PlotterScanner`Private`symmyQ$$, 
                    Sign[CalculateScan`PlotterScanner`Private`X1$] === -
                    Sign[CalculateScan`PlotterScanner`Private`X2$], 
                    Abs[1 - CalculateScan`PlotterScanner`Private`fy1$$/
                    CalculateScan`PlotterScanner`Private`fy2$$] < 10^(-3)], 
                    CalculateScan`PlotterScanner`Private`fy1$$ = 
                    ArcTan[((-100) CalculateScan`PlotterScanner`Private`xL$ - 
                    100 CalculateScan`PlotterScanner`Private`yL$ + 
                    CalculateScan`PlotterScanner`Private`\[CapitalDelta]y$)/(
                    100 CalculateScan`PlotterScanner`Private`\[CapitalDelta]y$\
)]; CalculateScan`PlotterScanner`Private`fy2$$ = 
                    CalculateScan`PlotterScanner`Private`fy1$$; Null]; {
                    CalculateScan`PlotterScanner`Private`Y1$, 
                    CalculateScan`PlotterScanner`Private`Y2$} = {
                    CalculateScan`PlotterScanner`Private`yL$ - 
                    CalculateScan`PlotterScanner`Private`\[CapitalDelta]y$/
                    100 - Function[{
                    CalculateScan`PlotterScanner`Private`y, 
                    CalculateScan`PlotterScanner`Private`L}, (
                    Sign[CalculateScan`PlotterScanner`Private`y] 
                    CalculateScan`PlotterScanner`Private`L) Tan[
                    Abs[CalculateScan`PlotterScanner`Private`y]]^1][
                    CalculateScan`PlotterScanner`Private`fy1$$, 1] 
                    CalculateScan`PlotterScanner`Private`\[CapitalDelta]y$, 
                    CalculateScan`PlotterScanner`Private`yU$ + 
                    CalculateScan`PlotterScanner`Private`\[CapitalDelta]y$/
                    100 + Function[{
                    CalculateScan`PlotterScanner`Private`y, 
                    CalculateScan`PlotterScanner`Private`L}, (
                    Sign[CalculateScan`PlotterScanner`Private`y] 
                    CalculateScan`PlotterScanner`Private`L) Tan[
                    Abs[CalculateScan`PlotterScanner`Private`y]]^1][
                    CalculateScan`PlotterScanner`Private`fy2$$, 1] 
                    CalculateScan`PlotterScanner`Private`\[CapitalDelta]y$}; 
                    CalculateScan`PlotterScanner`Private`pRY$ = {
                    CalculateScan`PlotterScanner`Private`Y1$, 
                    CalculateScan`PlotterScanner`Private`Y2$}; 
                    CalculateScan`PlotterScanner`Private`originalCurvePlot$ = 
                    Plot[
                    CompiledFunction[{8, 8., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    4}}, {{0.25, {3, 0, 2}}, {2, {2, 0, 0}}}, {0, 1, 6, 0, 
                    0}, {{10, 0, 1}, {16, 1, 0, 1}, {40, 34, 3, 0, 1, 3, 0, 
                    3}, {40, 2, 3, 0, 1, 3, 0, 4}, {19, 4, 5}, {40, 1, 3, 0, 
                    1, 3, 0, 4}, {13, 5, 4, 5}, {16, 2, 3, 5, 4}, {1}}, 
                    Function[{Global`x}, 
                    
                    Block[{Compile`$673}, 
                    Compile`$673 = 
                    2 Global`x; (
                    E^Compile`$673 (-Cos[Compile`$673] + Sin[Compile`$673]))/
                    4]], Evaluate][Global`x], {
                    Global`x, CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$}, PlotStyle -> 
                    Directive[Black, Thick], PlotRange -> 
                    CalculateScan`PlotterScanner`Private`pRY$, Evaluated -> 
                    False, Exclusions -> 
                    CalculateScan`PlotterScanner`Private`singularities$]; 
                    CalculateScan`PlotterScanner`Private`tangentsLines$ = 
                    If[CalculateScan`PlotterScanner`Private`tangentTF$$, 
                    CalculateScan`PlotterScanner`Private`addTangents[{
                    CompiledFunction[{8, 8., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    4}}, {{0.25, {3, 0, 2}}, {2, {2, 0, 0}}}, {0, 1, 6, 0, 
                    0}, {{10, 0, 1}, {16, 1, 0, 1}, {40, 34, 3, 0, 1, 3, 0, 
                    3}, {40, 2, 3, 0, 1, 3, 0, 4}, {19, 4, 5}, {40, 1, 3, 0, 
                    1, 3, 0, 4}, {13, 5, 4, 5}, {16, 2, 3, 5, 4}, {1}}, 
                    Function[{Global`x}, 
                    
                    Block[{Compile`$673}, 
                    Compile`$673 = 
                    2 Global`x; (
                    E^Compile`$673 (-Cos[Compile`$673] + Sin[Compile`$673]))/
                    4]], Evaluate], 
                    CompiledFunction[{8, 8., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    7}}, {{0.25, {3, 0, 8}}, {2, {2, 0, 0}}, {
                    0.5, {3, 0, 5}}}, {0, 1, 10, 0, 
                    0}, {{10, 0, 1}, {16, 1, 0, 1}, {40, 34, 3, 0, 1, 3, 0, 
                    2}, {40, 2, 3, 0, 1, 3, 0, 3}, {40, 1, 3, 0, 1, 3, 0, 
                    4}, {19, 3, 6}, {13, 6, 4, 6}, {16, 5, 2, 6, 7}, {10, 0, 
                    6}, {16, 6, 3, 6}, {10, 0, 9}, {16, 9, 4, 9}, {13, 6, 9, 
                    6}, {16, 8, 2, 6, 9}, {13, 7, 9, 7}, {1}}, 
                    Function[{Global`x}, 
                    
                    Block[{Compile`$806, Compile`$809, Compile`$921, 
                    Compile`$928}, Compile`$806 = 2 Global`x; 
                    Compile`$809 = E^Compile`$806; 
                    Compile`$921 = Cos[Compile`$806]; 
                    Compile`$928 = 
                    Sin[Compile`$806]; (
                    Compile`$809 (-Compile`$921 + Compile`$928))/
                    2 + (Compile`$809 (2 Compile`$921 + 2 Compile`$928))/4]], 
                    Evaluate]}, {
                    Global`x, CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$}, 
                    CalculateScan`PlotterScanner`Private`tangentCount$$, 
                    "LengthFactor" -> 
                    Function[{
                    CalculateScan`PlotterScanner`Private`y, 
                    CalculateScan`PlotterScanner`Private`L}, (
                    Sign[CalculateScan`PlotterScanner`Private`y] 
                    CalculateScan`PlotterScanner`Private`L) Tan[
                    Abs[CalculateScan`PlotterScanner`Private`y]]^1][
                    CalculateScan`PlotterScanner`Private`tangentLength$$, 
                    5.801990816987241]], {}]; 
                    CalculateScan`PlotterScanner`Private`tangentLinePlot$ = 
                    Graphics[{
                    Directive[
                    CalculateScan`PlotterScanner`Private`tangentColor$$, 
                    Opacity[
                    CalculateScan`PlotterScanner`Private`tangentOpacity$$], 
                    Thickness[
                    10^CalculateScan`PlotterScanner`Private`tangentThickness$$\
]], CalculateScan`PlotterScanner`Private`tangentsLines$}]; 
                    CalculateScan`PlotterScanner`Private`normalLines$ = 
                    If[CalculateScan`PlotterScanner`Private`normalTF$$, 
                    CalculateScan`PlotterScanner`Private`addTangents[{
                    CompiledFunction[{8, 8., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    4}}, {{0.25, {3, 0, 2}}, {2, {2, 0, 0}}}, {0, 1, 6, 0, 
                    0}, {{10, 0, 1}, {16, 1, 0, 1}, {40, 34, 3, 0, 1, 3, 0, 
                    3}, {40, 2, 3, 0, 1, 3, 0, 4}, {19, 4, 5}, {40, 1, 3, 0, 
                    1, 3, 0, 4}, {13, 5, 4, 5}, {16, 2, 3, 5, 4}, {1}}, 
                    Function[{Global`x}, 
                    
                    Block[{Compile`$673}, 
                    Compile`$673 = 
                    2 Global`x; (
                    E^Compile`$673 (-Cos[Compile`$673] + Sin[Compile`$673]))/
                    4]], Evaluate], 
                    CompiledFunction[{8, 8., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    7}}, {{0.25, {3, 0, 8}}, {2, {2, 0, 0}}, {
                    0.5, {3, 0, 5}}}, {0, 1, 10, 0, 
                    0}, {{10, 0, 1}, {16, 1, 0, 1}, {40, 34, 3, 0, 1, 3, 0, 
                    2}, {40, 2, 3, 0, 1, 3, 0, 3}, {40, 1, 3, 0, 1, 3, 0, 
                    4}, {19, 3, 6}, {13, 6, 4, 6}, {16, 5, 2, 6, 7}, {10, 0, 
                    6}, {16, 6, 3, 6}, {10, 0, 9}, {16, 9, 4, 9}, {13, 6, 9, 
                    6}, {16, 8, 2, 6, 9}, {13, 7, 9, 7}, {1}}, 
                    Function[{Global`x}, 
                    
                    Block[{Compile`$806, Compile`$809, Compile`$921, 
                    Compile`$928}, Compile`$806 = 2 Global`x; 
                    Compile`$809 = E^Compile`$806; 
                    Compile`$921 = Cos[Compile`$806]; 
                    Compile`$928 = 
                    Sin[Compile`$806]; (
                    Compile`$809 (-Compile`$921 + Compile`$928))/
                    2 + (Compile`$809 (2 Compile`$921 + 2 Compile`$928))/4]], 
                    Evaluate]}, {Global`x, 
                    Min[
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$], 
                    Max[
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$]}, 
                    CalculateScan`PlotterScanner`Private`normalCount$$, 
                    "LengthFactor" -> 
                    Function[{
                    CalculateScan`PlotterScanner`Private`y, 
                    CalculateScan`PlotterScanner`Private`L}, (
                    Sign[CalculateScan`PlotterScanner`Private`y] 
                    CalculateScan`PlotterScanner`Private`L) Tan[
                    Abs[CalculateScan`PlotterScanner`Private`y]]^1][
                    CalculateScan`PlotterScanner`Private`normalLength$$, 
                    5.801990816987241], "TiltAngle" -> Pi/2], {}]; 
                    CalculateScan`PlotterScanner`Private`normalLinePlot$ = 
                    Graphics[{
                    Directive[
                    CalculateScan`PlotterScanner`Private`normalColor$$, 
                    Opacity[
                    CalculateScan`PlotterScanner`Private`normalOpacity$$], 
                    Thickness[
                    10^CalculateScan`PlotterScanner`Private`normalThickness$$]\
], CalculateScan`PlotterScanner`Private`normalLines$}]; 
                    CalculateScan`PlotterScanner`Private`tiltedTangentLines$ = 
                    If[CalculateScan`PlotterScanner`Private`tiltedTangentTF$$, 
                    CalculateScan`PlotterScanner`Private`addTangents[{
                    CompiledFunction[{8, 8., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    4}}, {{0.25, {3, 0, 2}}, {2, {2, 0, 0}}}, {0, 1, 6, 0, 
                    0}, {{10, 0, 1}, {16, 1, 0, 1}, {40, 34, 3, 0, 1, 3, 0, 
                    3}, {40, 2, 3, 0, 1, 3, 0, 4}, {19, 4, 5}, {40, 1, 3, 0, 
                    1, 3, 0, 4}, {13, 5, 4, 5}, {16, 2, 3, 5, 4}, {1}}, 
                    Function[{Global`x}, 
                    
                    Block[{Compile`$673}, 
                    Compile`$673 = 
                    2 Global`x; (
                    E^Compile`$673 (-Cos[Compile`$673] + Sin[Compile`$673]))/
                    4]], Evaluate], 
                    CompiledFunction[{8, 8., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    7}}, {{0.25, {3, 0, 8}}, {2, {2, 0, 0}}, {
                    0.5, {3, 0, 5}}}, {0, 1, 10, 0, 
                    0}, {{10, 0, 1}, {16, 1, 0, 1}, {40, 34, 3, 0, 1, 3, 0, 
                    2}, {40, 2, 3, 0, 1, 3, 0, 3}, {40, 1, 3, 0, 1, 3, 0, 
                    4}, {19, 3, 6}, {13, 6, 4, 6}, {16, 5, 2, 6, 7}, {10, 0, 
                    6}, {16, 6, 3, 6}, {10, 0, 9}, {16, 9, 4, 9}, {13, 6, 9, 
                    6}, {16, 8, 2, 6, 9}, {13, 7, 9, 7}, {1}}, 
                    Function[{Global`x}, 
                    
                    Block[{Compile`$806, Compile`$809, Compile`$921, 
                    Compile`$928}, Compile`$806 = 2 Global`x; 
                    Compile`$809 = E^Compile`$806; 
                    Compile`$921 = Cos[Compile`$806]; 
                    Compile`$928 = 
                    Sin[Compile`$806]; (
                    Compile`$809 (-Compile`$921 + Compile`$928))/
                    2 + (Compile`$809 (2 Compile`$921 + 2 Compile`$928))/4]], 
                    Evaluate]}, {Global`x, 
                    Min[
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$], 
                    Max[
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$]}, 
                    CalculateScan`PlotterScanner`Private`tiltedTangentCount$$,
                     "LengthFactor" -> 
                    Function[{
                    CalculateScan`PlotterScanner`Private`y, 
                    CalculateScan`PlotterScanner`Private`L}, (
                    Sign[CalculateScan`PlotterScanner`Private`y] 
                    CalculateScan`PlotterScanner`Private`L) Tan[
                    Abs[CalculateScan`PlotterScanner`Private`y]]^1][
                    CalculateScan`PlotterScanner`Private`tiltedTangentLength$$\
, 5.801990816987241], "TiltAngle" -> 
                    CalculateScan`PlotterScanner`Private`tiltedTangentAngle$$]\
, {}]; CalculateScan`PlotterScanner`Private`tiltedTangentLinePlot$ = Graphics[{
                    Directive[
                    CalculateScan`PlotterScanner`Private`tiltedTangentColor$$, 
                    Opacity[
                    CalculateScan`PlotterScanner`Private`tiltedTangentOpacity$\
$], 
                    Thickness[
                    10^CalculateScan`PlotterScanner`Private`\
tiltedTangentThickness$$]], 
                    CalculateScan`PlotterScanner`Private`tiltedTangentLines$}]\
; If[
                    And[
                    CalculateScan`PlotterScanner`Private`osculatingCircleTF$$,
                     CalculateScan`PlotterScanner`Private`\
osculatingCircleLastParamaters$ =!= {{
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$}, 
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleCount$$}], 
                    CalculateScan`PlotterScanner`Private`osculatingCircles$$ = 
                    If[CalculateScan`PlotterScanner`Private`\
osculatingCircleTF$$, 
                    CalculateScan`PlotterScanner`Private`addOsculatingCircles[{
                    CompiledFunction[{8, 8., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    4}}, {{0.25, {3, 0, 2}}, {2, {2, 0, 0}}}, {0, 1, 6, 0, 
                    0}, {{10, 0, 1}, {16, 1, 0, 1}, {40, 34, 3, 0, 1, 3, 0, 
                    3}, {40, 2, 3, 0, 1, 3, 0, 4}, {19, 4, 5}, {40, 1, 3, 0, 
                    1, 3, 0, 4}, {13, 5, 4, 5}, {16, 2, 3, 5, 4}, {1}}, 
                    Function[{Global`x}, 
                    
                    Block[{Compile`$673}, 
                    Compile`$673 = 
                    2 Global`x; (E^Compile`$673 (-Cos[Compile`$673] + 
                    Sin[Compile`$673]))/4]], Evaluate], 
                    CompiledFunction[{8, 8., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    7}}, {{0.25, {3, 0, 8}}, {2, {2, 0, 0}}, {
                    0.5, {3, 0, 5}}}, {0, 1, 10, 0, 
                    0}, {{10, 0, 1}, {16, 1, 0, 1}, {40, 34, 3, 0, 1, 3, 0, 
                    2}, {40, 2, 3, 0, 1, 3, 0, 3}, {40, 1, 3, 0, 1, 3, 0, 
                    4}, {19, 3, 6}, {13, 6, 4, 6}, {16, 5, 2, 6, 7}, {10, 0, 
                    6}, {16, 6, 3, 6}, {10, 0, 9}, {16, 9, 4, 9}, {13, 6, 9, 
                    6}, {16, 8, 2, 6, 9}, {13, 7, 9, 7}, {1}}, 
                    Function[{Global`x}, 
                    
                    Block[{Compile`$806, Compile`$809, Compile`$921, 
                    Compile`$928}, Compile`$806 = 2 Global`x; 
                    Compile`$809 = E^Compile`$806; 
                    Compile`$921 = Cos[Compile`$806]; 
                    Compile`$928 = 
                    Sin[Compile`$806]; (
                    Compile`$809 (-Compile`$921 + Compile`$928))/
                    2 + (Compile`$809 (2 Compile`$921 + 2 Compile`$928))/4]], 
                    Evaluate], 
                    CompiledFunction[{8, 8., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    7}}, {{-4, {2, 0, 2}}, {0.25, {3, 0, 5}}, {
                    2, {2, 0, 0}}, {4, {2, 0, 1}}}, {0, 3, 10, 0, 
                    0}, {{10, 0, 1}, {16, 1, 0, 1}, {40, 34, 3, 0, 1, 3, 0, 
                    2}, {40, 2, 3, 0, 1, 3, 0, 3}, {40, 1, 3, 0, 1, 3, 0, 
                    4}, {10, 1, 6}, {16, 6, 3, 6}, {10, 2, 7}, {16, 7, 4, 
                    7}, {13, 6, 7, 6}, {16, 5, 2, 6, 7}, {19, 3, 6}, {13, 6, 
                    4, 6}, {16, 2, 6, 8}, {10, 0, 6}, {16, 6, 3, 6}, {10, 0, 
                    9}, {16, 9, 4, 9}, {13, 6, 9, 6}, {16, 2, 6, 9}, {13, 7, 
                    8, 9, 7}, {1}}, 
                    Function[{Global`x}, 
                    
                    Block[{Compile`$922, Compile`$944, Compile`$948, 
                    Compile`$950}, Compile`$922 = 2 Global`x; 
                    Compile`$944 = E^Compile`$922; 
                    Compile`$948 = Cos[Compile`$922]; 
                    Compile`$950 = 
                    Sin[Compile`$922]; (
                    Compile`$944 (4 Compile`$948 - 4 Compile`$950))/4 + 
                    Compile`$944 (-Compile`$948 + Compile`$950) + 
                    Compile`$944 (2 Compile`$948 + 2 Compile`$950)]], 
                    Evaluate]}, {Global`x, 
                    Min[
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$], 
                    Max[
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$]}, 
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleCount$$], {}]; 
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleRadii$ = If[
                    And[
                    CalculateScan`PlotterScanner`Private`osculatingCircleTF$$,
                     CalculateScan`PlotterScanner`Private`\
osculatingCircleRadiiTF$$], 
                    
                    CalculateScan`PlotterScanner`Private`\
addOsculatingCircleRadii[{
                    CompiledFunction[{8, 8., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    4}}, {{0.25, {3, 0, 2}}, {2, {2, 0, 0}}}, {0, 1, 6, 0, 
                    0}, {{10, 0, 1}, {16, 1, 0, 1}, {40, 34, 3, 0, 1, 3, 0, 
                    3}, {40, 2, 3, 0, 1, 3, 0, 4}, {19, 4, 5}, {40, 1, 3, 0, 
                    1, 3, 0, 4}, {13, 5, 4, 5}, {16, 2, 3, 5, 4}, {1}}, 
                    Function[{Global`x}, 
                    Block[{Compile`$673}, 
                    Compile`$673 = 
                    2 Global`x; (E^Compile`$673 (-Cos[Compile`$673] + 
                    Sin[Compile`$673]))/4]], Evaluate], 
                    CompiledFunction[{8, 8., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    7}}, {{0.25, {3, 0, 8}}, {2, {2, 0, 0}}, {
                    0.5, {3, 0, 5}}}, {0, 1, 10, 0, 
                    0}, {{10, 0, 1}, {16, 1, 0, 1}, {40, 34, 3, 0, 1, 3, 0, 
                    2}, {40, 2, 3, 0, 1, 3, 0, 3}, {40, 1, 3, 0, 1, 3, 0, 
                    4}, {19, 3, 6}, {13, 6, 4, 6}, {16, 5, 2, 6, 7}, {10, 0, 
                    6}, {16, 6, 3, 6}, {10, 0, 9}, {16, 9, 4, 9}, {13, 6, 9, 
                    6}, {16, 8, 2, 6, 9}, {13, 7, 9, 7}, {1}}, 
                    Function[{Global`x}, 
                    
                    Block[{Compile`$806, Compile`$809, Compile`$921, 
                    Compile`$928}, Compile`$806 = 2 Global`x; 
                    Compile`$809 = E^Compile`$806; 
                    Compile`$921 = Cos[Compile`$806]; 
                    Compile`$928 = 
                    Sin[Compile`$806]; (
                    Compile`$809 (-Compile`$921 + Compile`$928))/
                    2 + (Compile`$809 (2 Compile`$921 + 2 Compile`$928))/4]], 
                    Evaluate], 
                    CompiledFunction[{8, 8., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    7}}, {{-4, {2, 0, 2}}, {0.25, {3, 0, 5}}, {
                    2, {2, 0, 0}}, {4, {2, 0, 1}}}, {0, 3, 10, 0, 
                    0}, {{10, 0, 1}, {16, 1, 0, 1}, {40, 34, 3, 0, 1, 3, 0, 
                    2}, {40, 2, 3, 0, 1, 3, 0, 3}, {40, 1, 3, 0, 1, 3, 0, 
                    4}, {10, 1, 6}, {16, 6, 3, 6}, {10, 2, 7}, {16, 7, 4, 
                    7}, {13, 6, 7, 6}, {16, 5, 2, 6, 7}, {19, 3, 6}, {13, 6, 
                    4, 6}, {16, 2, 6, 8}, {10, 0, 6}, {16, 6, 3, 6}, {10, 0, 
                    9}, {16, 9, 4, 9}, {13, 6, 9, 6}, {16, 2, 6, 9}, {13, 7, 
                    8, 9, 7}, {1}}, 
                    Function[{Global`x}, 
                    
                    Block[{Compile`$922, Compile`$944, Compile`$948, 
                    Compile`$950}, Compile`$922 = 2 Global`x; 
                    Compile`$944 = E^Compile`$922; 
                    Compile`$948 = Cos[Compile`$922]; 
                    Compile`$950 = 
                    Sin[Compile`$922]; (
                    Compile`$944 (4 Compile`$948 - 4 Compile`$950))/4 + 
                    Compile`$944 (-Compile`$948 + Compile`$950) + 
                    Compile`$944 (2 Compile`$948 + 2 Compile`$950)]], 
                    Evaluate]}, {Global`x, 
                    Min[
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$], 
                    Max[
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$]}, 
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleCount$$], {}]; 
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleLastParamaters$ = {{
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$}, 
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleCount$$}]; 
                    CalculateScan`PlotterScanner`Private`osculatingCirclePlot$\
 = Graphics[{
                    Directive[
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleColor$$, 
                    Opacity[
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleOpacity$$], 
                    Thickness[
                    10^CalculateScan`PlotterScanner`Private`\
osculatingCircleThickness$$]], 
                    If[
                    CalculateScan`PlotterScanner`Private`osculatingCircleTF$$,
                     CalculateScan`PlotterScanner`Private`osculatingCircles$$,\
 {}], 
                    If[
                    And[
                    CalculateScan`PlotterScanner`Private`osculatingCircleTF$$,
                     CalculateScan`PlotterScanner`Private`\
osculatingCircleRadiiTF$$], 
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleRadii$, {}]}]; If[
                    And[
                    CalculateScan`PlotterScanner`Private`taylorParabolaTF$$, 
                    CalculateScan`PlotterScanner`Private`\
taylorParabolaLastParamaters$$ =!= {{
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$}, 
                    CalculateScan`PlotterScanner`Private`taylorParabolaCount$$\
}], CalculateScan`PlotterScanner`Private`taylorParabolas$$ = 
                    If[CalculateScan`PlotterScanner`Private`taylorParabolaTF$$\
, 
                    CalculateScan`PlotterScanner`Private`addTaylorParabolas[{
                    CompiledFunction[{8, 8., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    4}}, {{0.25, {3, 0, 2}}, {2, {2, 0, 0}}}, {0, 1, 6, 0, 
                    0}, {{10, 0, 1}, {16, 1, 0, 1}, {40, 34, 3, 0, 1, 3, 0, 
                    3}, {40, 2, 3, 0, 1, 3, 0, 4}, {19, 4, 5}, {40, 1, 3, 0, 
                    1, 3, 0, 4}, {13, 5, 4, 5}, {16, 2, 3, 5, 4}, {1}}, 
                    Function[{Global`x}, 
                    
                    Block[{Compile`$673}, 
                    Compile`$673 = 
                    2 Global`x; (E^Compile`$673 (-Cos[Compile`$673] + 
                    Sin[Compile`$673]))/4]], Evaluate], 
                    CompiledFunction[{8, 8., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    7}}, {{0.25, {3, 0, 8}}, {2, {2, 0, 0}}, {
                    0.5, {3, 0, 5}}}, {0, 1, 10, 0, 
                    0}, {{10, 0, 1}, {16, 1, 0, 1}, {40, 34, 3, 0, 1, 3, 0, 
                    2}, {40, 2, 3, 0, 1, 3, 0, 3}, {40, 1, 3, 0, 1, 3, 0, 
                    4}, {19, 3, 6}, {13, 6, 4, 6}, {16, 5, 2, 6, 7}, {10, 0, 
                    6}, {16, 6, 3, 6}, {10, 0, 9}, {16, 9, 4, 9}, {13, 6, 9, 
                    6}, {16, 8, 2, 6, 9}, {13, 7, 9, 7}, {1}}, 
                    Function[{Global`x}, 
                    
                    Block[{Compile`$806, Compile`$809, Compile`$921, 
                    Compile`$928}, Compile`$806 = 2 Global`x; 
                    Compile`$809 = E^Compile`$806; 
                    Compile`$921 = Cos[Compile`$806]; 
                    Compile`$928 = 
                    Sin[Compile`$806]; (
                    Compile`$809 (-Compile`$921 + Compile`$928))/
                    2 + (Compile`$809 (2 Compile`$921 + 2 Compile`$928))/4]], 
                    Evaluate], 
                    CompiledFunction[{8, 8., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    7}}, {{-4, {2, 0, 2}}, {0.25, {3, 0, 5}}, {
                    2, {2, 0, 0}}, {4, {2, 0, 1}}}, {0, 3, 10, 0, 
                    0}, {{10, 0, 1}, {16, 1, 0, 1}, {40, 34, 3, 0, 1, 3, 0, 
                    2}, {40, 2, 3, 0, 1, 3, 0, 3}, {40, 1, 3, 0, 1, 3, 0, 
                    4}, {10, 1, 6}, {16, 6, 3, 6}, {10, 2, 7}, {16, 7, 4, 
                    7}, {13, 6, 7, 6}, {16, 5, 2, 6, 7}, {19, 3, 6}, {13, 6, 
                    4, 6}, {16, 2, 6, 8}, {10, 0, 6}, {16, 6, 3, 6}, {10, 0, 
                    9}, {16, 9, 4, 9}, {13, 6, 9, 6}, {16, 2, 6, 9}, {13, 7, 
                    8, 9, 7}, {1}}, 
                    Function[{Global`x}, 
                    Block[{Compile`$922, Compile`$944, Compile`$948, 
                    Compile`$950}, Compile`$922 = 2 Global`x; 
                    Compile`$944 = E^Compile`$922; 
                    Compile`$948 = Cos[Compile`$922]; 
                    Compile`$950 = 
                    Sin[Compile`$922]; (
                    Compile`$944 (4 Compile`$948 - 4 Compile`$950))/4 + 
                    Compile`$944 (-Compile`$948 + Compile`$950) + 
                    Compile`$944 (2 Compile`$948 + 2 Compile`$950)]], 
                    Evaluate]}, {Global`x, 
                    Min[
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$], 
                    Max[
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$]}, 
                    CalculateScan`PlotterScanner`Private`taylorParabolaCount$$\
], {}]; CalculateScan`PlotterScanner`Private`taylorParabolaLastParamaters$$ = \
{{CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$}, 
                    CalculateScan`PlotterScanner`Private`taylorParabolaCount$$\
}]; CalculateScan`PlotterScanner`Private`taylorParabolaPlot$ = Graphics[{
                    Directive[
                    CalculateScan`PlotterScanner`Private`taylorParabolaColor$$\
, 
                    Opacity[
                    CalculateScan`PlotterScanner`Private`\
taylorParabolaOpacity$$], 
                    Thickness[
                    10^CalculateScan`PlotterScanner`Private`\
taylorParabolaThickness$$]], 
                    If[
                    CalculateScan`PlotterScanner`Private`taylorParabolaTF$$, 
                    CalculateScan`PlotterScanner`Private`taylorParabolas$$, \
{}]}]; CalculateScan`PlotterScanner`Private`evolutePlot$ = 
                    If[CalculateScan`PlotterScanner`Private`evoluteTF$$, 
                    ParametricPlot[{Global`x, 
                    CompiledFunction[{8, 8., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    4}}, {{0.25, {3, 0, 2}}, {2, {2, 0, 0}}}, {0, 1, 6, 0, 
                    0}, {{10, 0, 1}, {16, 1, 0, 1}, {40, 34, 3, 0, 1, 3, 0, 
                    3}, {40, 2, 3, 0, 1, 3, 0, 4}, {19, 4, 5}, {40, 1, 3, 0, 
                    1, 3, 0, 4}, {13, 5, 4, 5}, {16, 2, 3, 5, 4}, {1}}, 
                    Function[{Global`x}, 
                    
                    Block[{Compile`$673}, 
                    Compile`$673 = 
                    2 Global`x; (
                    E^Compile`$673 (-Cos[Compile`$673] + Sin[Compile`$673]))/
                    4]], Evaluate][
                    Global`x]} + ({-CompiledFunction[{8, 8., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    7}}, {{0.25, {3, 0, 8}}, {2, {2, 0, 0}}, {
                    0.5, {3, 0, 5}}}, {0, 1, 10, 0, 
                    0}, {{10, 0, 1}, {16, 1, 0, 1}, {40, 34, 3, 0, 1, 3, 0, 
                    2}, {40, 2, 3, 0, 1, 3, 0, 3}, {40, 1, 3, 0, 1, 3, 0, 
                    4}, {19, 3, 6}, {13, 6, 4, 6}, {16, 5, 2, 6, 7}, {10, 0, 
                    6}, {16, 6, 3, 6}, {10, 0, 9}, {16, 9, 4, 9}, {13, 6, 9, 
                    6}, {16, 8, 2, 6, 9}, {13, 7, 9, 7}, {1}}, 
                    Function[{Global`x}, 
                    
                    Block[{Compile`$806, Compile`$809, Compile`$921, 
                    Compile`$928}, Compile`$806 = 2 Global`x; 
                    Compile`$809 = E^Compile`$806; 
                    Compile`$921 = Cos[Compile`$806]; 
                    Compile`$928 = Sin[
                    Compile`$806]; (Compile`$809 (-Compile`$921 + 
                    Compile`$928))/2 + (
                    Compile`$809 (2 Compile`$921 + 2 Compile`$928))/4]], 
                    Evaluate][Global`x], 1} (1 + 
                    CompiledFunction[{8, 8., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    7}}, {{0.25, {3, 0, 8}}, {2, {2, 0, 0}}, {
                    0.5, {3, 0, 5}}}, {0, 1, 10, 0, 
                    0}, {{10, 0, 1}, {16, 1, 0, 1}, {40, 34, 3, 0, 1, 3, 0, 
                    2}, {40, 2, 3, 0, 1, 3, 0, 3}, {40, 1, 3, 0, 1, 3, 0, 
                    4}, {19, 3, 6}, {13, 6, 4, 6}, {16, 5, 2, 6, 7}, {10, 0, 
                    6}, {16, 6, 3, 6}, {10, 0, 9}, {16, 9, 4, 9}, {13, 6, 9, 
                    6}, {16, 8, 2, 6, 9}, {13, 7, 9, 7}, {1}}, 
                    Function[{Global`x}, 
                    
                    Block[{Compile`$806, Compile`$809, Compile`$921, 
                    Compile`$928}, Compile`$806 = 2 Global`x; 
                    Compile`$809 = E^Compile`$806; 
                    Compile`$921 = Cos[Compile`$806]; 
                    Compile`$928 = Sin[
                    Compile`$806]; (Compile`$809 (-Compile`$921 + 
                    Compile`$928))/2 + (
                    Compile`$809 (2 Compile`$921 + 2 Compile`$928))/4]], 
                    Evaluate][Global`x]^2))/CompiledFunction[{8, 8., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    7}}, {{-4, {2, 0, 2}}, {0.25, {3, 0, 5}}, {
                    2, {2, 0, 0}}, {4, {2, 0, 1}}}, {0, 3, 10, 0, 
                    0}, {{10, 0, 1}, {16, 1, 0, 1}, {40, 34, 3, 0, 1, 3, 0, 
                    2}, {40, 2, 3, 0, 1, 3, 0, 3}, {40, 1, 3, 0, 1, 3, 0, 
                    4}, {10, 1, 6}, {16, 6, 3, 6}, {10, 2, 7}, {16, 7, 4, 
                    7}, {13, 6, 7, 6}, {16, 5, 2, 6, 7}, {19, 3, 6}, {13, 6, 
                    4, 6}, {16, 2, 6, 8}, {10, 0, 6}, {16, 6, 3, 6}, {10, 0, 
                    9}, {16, 9, 4, 9}, {13, 6, 9, 6}, {16, 2, 6, 9}, {13, 7, 
                    8, 9, 7}, {1}}, 
                    Function[{Global`x}, 
                    
                    Block[{Compile`$922, Compile`$944, Compile`$948, 
                    Compile`$950}, Compile`$922 = 2 Global`x; 
                    Compile`$944 = E^Compile`$922; 
                    Compile`$948 = Cos[Compile`$922]; 
                    Compile`$950 = 
                    Sin[Compile`$922]; (
                    Compile`$944 (4 Compile`$948 - 4 Compile`$950))/4 + 
                    Compile`$944 (-Compile`$948 + Compile`$950) + 
                    Compile`$944 (2 Compile`$948 + 2 Compile`$950)]], 
                    Evaluate][Global`x], {
                    Global`x, 
                    Min[CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$] - 
                    CalculateScan`PlotterScanner`Private`\[CapitalDelta]X$/2, 
                    Max[CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$] + 
                    CalculateScan`PlotterScanner`Private`\[CapitalDelta]X$/2},
                     PlotStyle -> Directive[
                    Opacity[
                    CalculateScan`PlotterScanner`Private`evoluteOpacity$$], 
                    CalculateScan`PlotterScanner`Private`evoluteColor$$, 
                    Thickness[
                    10^CalculateScan`PlotterScanner`Private`evoluteThickness$$\
]], PlotRange -> CalculateScan`PlotterScanner`Private`pRY$, Evaluated -> 
                    False, Exclusions -> {
                    CalculateScan`PlotterScanner`Private`functionD[Global`x] == 
                    0}], {}]; If[
                    And[
                    CalculateScan`PlotterScanner`Private`involuteTF$$, 
                    CalculateScan`PlotterScanner`Private`\
involutePlotCurveLastParamaters$ =!= {{
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$}, 
                    CalculateScan`PlotterScanner`Private`involuteCount$$}], 
                    CalculateScan`PlotterScanner`Private`involutePlotCurves$ = 
                    If[CalculateScan`PlotterScanner`Private`involuteTF$$, 
                    CalculateScan`PlotterScanner`Private`singularities$ = 
                    TimeConstrained[
                    Reduce[
                    1/((E^(2 Global`x) (-Cos[2 Global`x] + Sin[2 Global`x]))/
                    4) == 0, Global`x, Reals], 1, False]; 
                    CalculateScan`PlotterScanner`Private`domainsAndCounts = If[
                    Or[
                    CalculateScan`PlotterScanner`Private`singularities$ === 
                    False, Head[
                    CalculateScan`PlotterScanner`Private`singularities$] === 
                    Reduce], {{{
                    CalculateScan`PlotterScanner`Private`xL$, 
                    CalculateScan`PlotterScanner`Private`xU$}, 
                    CalculateScan`PlotterScanner`Private`involuteCount$$}}, 
                    CalculateScan`PlotterScanner`Private`singularityPoints = 
                    Cases[
                    Chop[
                    N[
                    ReplaceAll[Global`x, {
                    ToRules[
                    CalculateScan`PlotterScanner`Private`singularities$]}]]], 
                    
                    Blank[Real]]; 
                    CalculateScan`PlotterScanner`Private`\
singularityPointsRelevant = Sort[
                    Select[
                    CalculateScan`PlotterScanner`Private`singularityPoints, 
                    CalculateScan`PlotterScanner`Private`xL$ < # < 
                    CalculateScan`PlotterScanner`Private`xU$& ], Less]; 
                    CalculateScan`PlotterScanner`Private`pureDomains = 
                    Partition[{CalculateScan`PlotterScanner`Private`xL$, 
                    Apply[
                    Sequence, 
                    CalculateScan`PlotterScanner`Private`\
singularityPointsRelevant], CalculateScan`PlotterScanner`Private`xU$}, 2, 1]; 
                    Table[CalculateScan`PlotterScanner`Private`iLength = Abs[
                    Apply[Subtract, 
                    Part[
                    CalculateScan`PlotterScanner`Private`pureDomains, 
                    CalculateScan`PlotterScanner`Private`i]]]; 
                    CalculateScan`PlotterScanner`Private`involuteCounti = 
                    Ceiling[(CalculateScan`PlotterScanner`Private`iLength 
                    CalculateScan`PlotterScanner`Private`involuteCount$$)/(
                    CalculateScan`PlotterScanner`Private`xU$ - 
                    CalculateScan`PlotterScanner`Private`xL$)]; 
                    CalculateScan`PlotterScanner`Private`iScale = 
                    CalculateScan`PlotterScanner`Private`iLength/
                    CalculateScan`PlotterScanner`Private`involuteCounti; {{
                    Part[CalculateScan`PlotterScanner`Private`pureDomains, 
                    CalculateScan`PlotterScanner`Private`i, 1] + 
                    CalculateScan`PlotterScanner`Private`iScale/4, 
                    Part[CalculateScan`PlotterScanner`Private`pureDomains, 
                    CalculateScan`PlotterScanner`Private`i, 2] - 
                    CalculateScan`PlotterScanner`Private`iScale/4}, 
                    CalculateScan`PlotterScanner`Private`involuteCounti}, {
                    CalculateScan`PlotterScanner`Private`i, 
                    Length[
                    CalculateScan`PlotterScanner`Private`pureDomains]}]]; 
                    CalculateScan`PlotterScanner`Private`iTab$ = Transpose[
                    
                    Table[{{CalculateScan`PlotterScanner`Private`xLi$, 
                    CalculateScan`PlotterScanner`Private`xUi$}, 
                    CalculateScan`PlotterScanner`Private`involuteCounti} = 
                    Part[CalculateScan`PlotterScanner`Private`\
domainsAndCounts, CalculateScan`PlotterScanner`Private`i]; 
                    CalculateScan`PlotterScanner`Private`arcLength$ = Part[
                    
                    NDSolve[{Derivative[1][
                    CalculateScan`PlotterScanner`Private`arcL$][Global`x] == 
                    Sqrt[1 + D[(E^(2 Global`x) (-Cos[2 Global`x] + 
                    Sin[2 Global`x]))/4, Global`x]^2], 
                    CalculateScan`PlotterScanner`Private`arcL$[
                    CalculateScan`PlotterScanner`Private`xLi$] == 0}, 
                    CalculateScan`PlotterScanner`Private`arcL$, {
                    Global`x, CalculateScan`PlotterScanner`Private`xLi$, 
                    CalculateScan`PlotterScanner`Private`xUi$}], 1, 1, 2]; {
                    CalculateScan`PlotterScanner`Private`xi1$, 
                    CalculateScan`PlotterScanner`Private`xi2$} = 
                    Part[CalculateScan`PlotterScanner`Private`arcLength$, 1, 
                    1]; CalculateScan`PlotterScanner`Private`oCurve = 
                    ParametricPlot3D[
                    Prepend[
                    Normalize[{1, 
                    CompiledFunction[{8, 8., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    7}}, {{0.25, {3, 0, 8}}, {2, {2, 0, 0}}, {
                    0.5, {3, 0, 5}}}, {0, 1, 10, 0, 
                    0}, {{10, 0, 1}, {16, 1, 0, 1}, {40, 34, 3, 0, 1, 3, 0, 
                    2}, {40, 2, 3, 0, 1, 3, 0, 3}, {40, 1, 3, 0, 1, 3, 0, 
                    4}, {19, 3, 6}, {13, 6, 4, 6}, {16, 5, 2, 6, 7}, {10, 0, 
                    6}, {16, 6, 3, 6}, {10, 0, 9}, {16, 9, 4, 9}, {13, 6, 9, 
                    6}, {16, 8, 2, 6, 9}, {13, 7, 9, 7}, {1}}, 
                    Function[{Global`x}, 
                    
                    Block[{Compile`$806, Compile`$809, Compile`$921, 
                    Compile`$928}, Compile`$806 = 2 Global`x; 
                    Compile`$809 = E^Compile`$806; 
                    Compile`$921 = Cos[Compile`$806]; 
                    Compile`$928 = Sin[Compile`$806]; (
                    Compile`$809 (-Compile`$921 + Compile`$928))/
                    2 + (Compile`$809 (2 Compile`$921 + 2 Compile`$928))/4]], 
                    Evaluate][Global`x]}], Global`x], {
                    Global`x, CalculateScan`PlotterScanner`Private`xLi$, 
                    CalculateScan`PlotterScanner`Private`xUi$}, PlotRange -> 
                    All, Evaluated -> False, MaxRecursion -> 4]; 
                    CalculateScan`PlotterScanner`Private`lineSegments$ = 
                    Select[
                    Map[First, 
                    Cases[
                    Normal[CalculateScan`PlotterScanner`Private`oCurve], 
                    Blank[Line], Infinity]], Length[#] > 3& ]; 
                    CalculateScan`PlotterScanner`Private`baseSegments$ = 
                    Map[{
                    Part[#, 1], 
                    CompiledFunction[{8, 8., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    4}}, {{0.25, {3, 0, 2}}, {2, {2, 0, 0}}}, {0, 1, 6, 0, 
                    0}, {{10, 0, 1}, {16, 1, 0, 1}, {40, 34, 3, 0, 1, 3, 0, 
                    3}, {40, 2, 3, 0, 1, 3, 0, 4}, {19, 4, 5}, {40, 1, 3, 0, 
                    1, 3, 0, 4}, {13, 5, 4, 5}, {16, 2, 3, 5, 4}, {1}}, 
                    Function[{Global`x}, 
                    
                    Block[{Compile`$673}, 
                    Compile`$673 = 2 Global`x; (
                    E^Compile`$673 (-Cos[Compile`$673] + Sin[Compile`$673]))/
                    4]], Evaluate][
                    Part[#, 1]]}& , 
                    CalculateScan`PlotterScanner`Private`lineSegments$, {-2}]; 
                    CalculateScan`PlotterScanner`Private`oSegments$ = 
                    Map[Rest, 
                    CalculateScan`PlotterScanner`Private`lineSegments$, {-2}]; 
                    CalculateScan`PlotterScanner`Private`arcFactors$ = 
                    Map[CalculateScan`PlotterScanner`Private`arcLength$[
                    Part[#, 1]]& , 
                    CalculateScan`PlotterScanner`Private`lineSegments$, {-2}]; 
                    CalculateScan`PlotterScanner`Private`iTabRight$ = If[True, 
                    Table[
                    CalculateScan`PlotterScanner`Private`x0 = 
                    CalculateScan`PlotterScanner`Private`xi1$ + (
                    CalculateScan`PlotterScanner`Private`jk (
                    CalculateScan`PlotterScanner`Private`xi2$ - 
                    CalculateScan`PlotterScanner`Private`xi1$))/(
                    CalculateScan`PlotterScanner`Private`involuteCounti + 1); 
                    CalculateScan`PlotterScanner`Private`signedArcFactors$ = 
                    Map[Map[Max[#, 0]& , #]& , 
                    CalculateScan`PlotterScanner`Private`arcFactors$ - 
                    CalculateScan`PlotterScanner`Private`arcLength$[
                    CalculateScan`PlotterScanner`Private`x0]]; 
                    CalculateScan`PlotterScanner`Private`curvePoints$ = 
                    CalculateScan`PlotterScanner`Private`baseSegments$ + 
                    CalculateScan`PlotterScanner`Private`signedArcFactors$ 
                    CalculateScan`PlotterScanner`Private`oSegments$; If[
                    MemberQ[CalculateScan`PlotterScanner`Private`curvePoints$, 
                    Blank[Complex], {0, Infinity}], {}, 
                    Map[
                    BSplineCurve, 
                    CalculateScan`PlotterScanner`Private`curvePoints$]], {
                    CalculateScan`PlotterScanner`Private`jk, 1, 
                    CalculateScan`PlotterScanner`Private`involuteCounti}], \
{}]; CalculateScan`PlotterScanner`Private`iTabLeft$ = If[True, 
                    Table[
                    CalculateScan`PlotterScanner`Private`x0 = 
                    CalculateScan`PlotterScanner`Private`xi2$ + (
                    CalculateScan`PlotterScanner`Private`jk (
                    CalculateScan`PlotterScanner`Private`xi1$ - 
                    CalculateScan`PlotterScanner`Private`xi2$))/(
                    CalculateScan`PlotterScanner`Private`involuteCounti + 1); 
                    CalculateScan`PlotterScanner`Private`signedArcFactors$ = 
                    Map[Map[Min[#, 0]& , #]& , 
                    CalculateScan`PlotterScanner`Private`arcFactors$ - (
                    CalculateScan`PlotterScanner`Private`arcLength$[
                    CalculateScan`PlotterScanner`Private`xi2$] - 
                    CalculateScan`PlotterScanner`Private`arcLength$[
                    CalculateScan`PlotterScanner`Private`x0])]; 
                    CalculateScan`PlotterScanner`Private`curvePoints$ = 
                    CalculateScan`PlotterScanner`Private`baseSegments$ + 
                    CalculateScan`PlotterScanner`Private`signedArcFactors$ 
                    CalculateScan`PlotterScanner`Private`oSegments$; If[
                    MemberQ[CalculateScan`PlotterScanner`Private`curvePoints$, 
                    Blank[Complex], {0, Infinity}], {}, 
                    Map[
                    BSplineCurve, 
                    CalculateScan`PlotterScanner`Private`curvePoints$]], {
                    CalculateScan`PlotterScanner`Private`jk, 1, 
                    CalculateScan`PlotterScanner`Private`involuteCounti}], \
{}]; {CalculateScan`PlotterScanner`Private`iTabRight$, 
                    CalculateScan`PlotterScanner`Private`iTabLeft$}, {
                    CalculateScan`PlotterScanner`Private`i, 
                    Length[
                    CalculateScan`PlotterScanner`Private`domainsAndCounts]}]]; 
                    CalculateScan`PlotterScanner`Private`iTab$, {}]; 
                    CalculateScan`PlotterScanner`Private`\
involutePlotCurveLastParamaters$ = {{
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$}, 
                    CalculateScan`PlotterScanner`Private`involuteCount$$}; 
                    Null]; CalculateScan`PlotterScanner`Private`involutePlot$ = 
                    Graphics[{
                    Directive[
                    CalculateScan`PlotterScanner`Private`involuteColor$$, 
                    Opacity[
                    CalculateScan`PlotterScanner`Private`involuteOpacity$$], 
                    Thickness[
                    10^CalculateScan`PlotterScanner`Private`involuteThickness$\
$]], 
                    If[
                    And[
                    CalculateScan`PlotterScanner`Private`involuteTF$$, 
                    CalculateScan`PlotterScanner`Private`involutesRightTF$$], 
                    
                    Part[
                    CalculateScan`PlotterScanner`Private`involutePlotCurves$, 
                    1], {}], 
                    If[
                    And[
                    CalculateScan`PlotterScanner`Private`involuteTF$$, 
                    CalculateScan`PlotterScanner`Private`involutesLeftTF$$], 
                    Part[
                    CalculateScan`PlotterScanner`Private`involutePlotCurves$, 
                    2], {}]}]; If[
                    And[
                    CalculateScan`PlotterScanner`Private`offsetCurveTF$$, 
                    CalculateScan`PlotterScanner`Private`\
offsetCurveLastParamaters$$ =!= {{
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$}, 
                    CalculateScan`PlotterScanner`Private`offsetCurveCount$$}],
                     CalculateScan`PlotterScanner`Private`\
offsetCurvePlotCurves$$ = 
                    If[CalculateScan`PlotterScanner`Private`offsetCurveTF$$, 
                    
                    With[{CalculateScan`PlotterScanner`Private`maxDist$ = 
                    Function[{CalculateScan`PlotterScanner`Private`y, 
                    CalculateScan`PlotterScanner`Private`L}, (
                    Sign[CalculateScan`PlotterScanner`Private`y] 
                    CalculateScan`PlotterScanner`Private`L) Tan[
                    Abs[CalculateScan`PlotterScanner`Private`y]]^1][
                    CalculateScan`PlotterScanner`Private`offsetCurveDistance$$\
, 5.801990816987241]}, CalculateScan`PlotterScanner`Private`oCurve = 
                    ParametricPlot3D[
                    Prepend[
                    Normalize[{-CompiledFunction[{8, 8., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    7}}, {{0.25, {3, 0, 8}}, {2, {2, 0, 0}}, {
                    0.5, {3, 0, 5}}}, {0, 1, 10, 0, 
                    0}, {{10, 0, 1}, {16, 1, 0, 1}, {40, 34, 3, 0, 1, 3, 0, 
                    2}, {40, 2, 3, 0, 1, 3, 0, 3}, {40, 1, 3, 0, 1, 3, 0, 
                    4}, {19, 3, 6}, {13, 6, 4, 6}, {16, 5, 2, 6, 7}, {10, 0, 
                    6}, {16, 6, 3, 6}, {10, 0, 9}, {16, 9, 4, 9}, {13, 6, 9, 
                    6}, {16, 8, 2, 6, 9}, {13, 7, 9, 7}, {1}}, 
                    Function[{Global`x}, 
                    
                    Block[{Compile`$806, Compile`$809, Compile`$921, 
                    Compile`$928}, Compile`$806 = 2 Global`x; 
                    Compile`$809 = E^Compile`$806; 
                    Compile`$921 = Cos[Compile`$806]; 
                    Compile`$928 = Sin[Compile`$806]; (
                    Compile`$809 (-Compile`$921 + Compile`$928))/
                    2 + (Compile`$809 (2 Compile`$921 + 2 Compile`$928))/4]], 
                    Evaluate][Global`x], 1}], Global`x], {
                    Global`x, Min[
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$] - 
                    CalculateScan`PlotterScanner`Private`\[CapitalDelta]X$/2, 
                    Max[CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$] + 
                    CalculateScan`PlotterScanner`Private`\[CapitalDelta]X$/2},
                     PlotRange -> All, Evaluated -> False, MaxRecursion -> 5]; 
                    CalculateScan`PlotterScanner`Private`lineSegments$ = 
                    Select[
                    Map[First, 
                    Cases[
                    Normal[CalculateScan`PlotterScanner`Private`oCurve], 
                    Blank[Line], Infinity]], Length[#] > 3& ]; 
                    CalculateScan`PlotterScanner`Private`baseSegments$ = 
                    Map[{
                    Part[#, 1], 
                    CompiledFunction[{8, 8., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    4}}, {{0.25, {3, 0, 2}}, {2, {2, 0, 0}}}, {0, 1, 6, 0, 
                    0}, {{10, 0, 1}, {16, 1, 0, 1}, {40, 34, 3, 0, 1, 3, 0, 
                    3}, {40, 2, 3, 0, 1, 3, 0, 4}, {19, 4, 5}, {40, 1, 3, 0, 
                    1, 3, 0, 4}, {13, 5, 4, 5}, {16, 2, 3, 5, 4}, {1}}, 
                    Function[{Global`x}, 
                    
                    Block[{Compile`$673}, 
                    Compile`$673 = 2 Global`x; (
                    E^Compile`$673 (-Cos[Compile`$673] + Sin[Compile`$673]))/
                    4]], Evaluate][
                    Part[#, 1]]}& , 
                    CalculateScan`PlotterScanner`Private`lineSegments$, {-2}]; 
                    CalculateScan`PlotterScanner`Private`oSegments$ = 
                    Map[Rest, 
                    CalculateScan`PlotterScanner`Private`lineSegments$, {-2}]; 
                    Table[{
                    Map[
                    BSplineCurve, 
                    CalculateScan`PlotterScanner`Private`baseSegments$ + ((
                    CalculateScan`PlotterScanner`Private`j 
                    CalculateScan`PlotterScanner`Private`maxDist$) 
                    CalculateScan`PlotterScanner`Private`oSegments$)/
                    CalculateScan`PlotterScanner`Private`offsetCurveCount$$], 
                    
                    Map[
                    BSplineCurve, 
                    CalculateScan`PlotterScanner`Private`baseSegments$ - ((
                    CalculateScan`PlotterScanner`Private`j 
                    CalculateScan`PlotterScanner`Private`maxDist$) 
                    CalculateScan`PlotterScanner`Private`oSegments$)/
                    CalculateScan`PlotterScanner`Private`offsetCurveCount$$]},\
 {CalculateScan`PlotterScanner`Private`j, 
                    CalculateScan`PlotterScanner`Private`offsetCurveCount$$}]]\
, {}]; CalculateScan`PlotterScanner`Private`offsetCurveLastParamaters$$ =!= {{
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$}, 
                    CalculateScan`PlotterScanner`Private`offsetCurveCount$$}]; 
                    CalculateScan`PlotterScanner`Private`offsetCurvePlot = 
                    Graphics[{
                    Directive[
                    CalculateScan`PlotterScanner`Private`offsetCurveColor$$, 
                    Opacity[
                    CalculateScan`PlotterScanner`Private`offsetCurveOpacity$$]\
, 
                    Thickness[
                    10^CalculateScan`PlotterScanner`Private`\
offsetCurveThickness$$]], 
                    If[
                    CalculateScan`PlotterScanner`Private`offsetCurveTF$$, 
                    CalculateScan`PlotterScanner`Private`\
offsetCurvePlotCurves$$, {}]}]; If[
                    And[
                    CalculateScan`PlotterScanner`Private`tiltedOffsetCurveTF$$\
, CalculateScan`PlotterScanner`Private`tiltedOffsetCurveLastParamaters$$ =!= \
{{CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$}, 
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveCount$$, 
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveAngle$$}], 
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurvePlotCurves$$ = 
                    If[CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveTF$$, 
                    
                    With[{CalculateScan`PlotterScanner`Private`maxDist$ = 
                    Function[{CalculateScan`PlotterScanner`Private`y, 
                    CalculateScan`PlotterScanner`Private`L}, (
                    Sign[CalculateScan`PlotterScanner`Private`y] 
                    CalculateScan`PlotterScanner`Private`L) Tan[
                    Abs[CalculateScan`PlotterScanner`Private`y]]^1][
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveDistance$$, 5.801990816987241], 
                    CalculateScan`PlotterScanner`Private`M$ = {{
                    Cos[
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveAngle$$], 
                    Sin[
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveAngle$$]}, {-Sin[
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveAngle$$], 
                    Cos[
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveAngle$$]}}}, 
                    CalculateScan`PlotterScanner`Private`oCurve = 
                    ParametricPlot3D[
                    Prepend[
                    Dot[CalculateScan`PlotterScanner`Private`M$, 
                    Normalize[{-CompiledFunction[{8, 8., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    7}}, {{0.25, {3, 0, 8}}, {2, {2, 0, 0}}, {
                    0.5, {3, 0, 5}}}, {0, 1, 10, 0, 
                    0}, {{10, 0, 1}, {16, 1, 0, 1}, {40, 34, 3, 0, 1, 3, 0, 
                    2}, {40, 2, 3, 0, 1, 3, 0, 3}, {40, 1, 3, 0, 1, 3, 0, 
                    4}, {19, 3, 6}, {13, 6, 4, 6}, {16, 5, 2, 6, 7}, {10, 0, 
                    6}, {16, 6, 3, 6}, {10, 0, 9}, {16, 9, 4, 9}, {13, 6, 9, 
                    6}, {16, 8, 2, 6, 9}, {13, 7, 9, 7}, {1}}, 
                    Function[{Global`x}, 
                    
                    Block[{Compile`$806, Compile`$809, Compile`$921, 
                    Compile`$928}, Compile`$806 = 2 Global`x; 
                    Compile`$809 = E^Compile`$806; 
                    Compile`$921 = Cos[Compile`$806]; 
                    Compile`$928 = Sin[Compile`$806]; (
                    Compile`$809 (-Compile`$921 + Compile`$928))/
                    2 + (Compile`$809 (2 Compile`$921 + 2 Compile`$928))/4]], 
                    Evaluate][Global`x], 1}]], Global`x], {
                    Global`x, Min[
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$] - 
                    CalculateScan`PlotterScanner`Private`\[CapitalDelta]X$/2, 
                    Max[CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$] + 
                    CalculateScan`PlotterScanner`Private`\[CapitalDelta]X$/2},
                     PlotRange -> All, Evaluated -> False, MaxRecursion -> 5]; 
                    CalculateScan`PlotterScanner`Private`lineSegments$ = 
                    Select[
                    Map[First, 
                    Cases[
                    Normal[CalculateScan`PlotterScanner`Private`oCurve], 
                    Blank[Line], Infinity]], Length[#] > 3& ]; 
                    CalculateScan`PlotterScanner`Private`baseSegments$ = 
                    Map[{
                    Part[#, 1], 
                    CompiledFunction[{8, 8., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    4}}, {{0.25, {3, 0, 2}}, {2, {2, 0, 0}}}, {0, 1, 6, 0, 
                    0}, {{10, 0, 1}, {16, 1, 0, 1}, {40, 34, 3, 0, 1, 3, 0, 
                    3}, {40, 2, 3, 0, 1, 3, 0, 4}, {19, 4, 5}, {40, 1, 3, 0, 
                    1, 3, 0, 4}, {13, 5, 4, 5}, {16, 2, 3, 5, 4}, {1}}, 
                    Function[{Global`x}, 
                    
                    Block[{Compile`$673}, 
                    Compile`$673 = 2 Global`x; (
                    E^Compile`$673 (-Cos[Compile`$673] + Sin[Compile`$673]))/
                    4]], Evaluate][
                    Part[#, 1]]}& , 
                    CalculateScan`PlotterScanner`Private`lineSegments$, {-2}]; 
                    CalculateScan`PlotterScanner`Private`oSegments$ = 
                    Map[Rest, 
                    CalculateScan`PlotterScanner`Private`lineSegments$, {-2}]; 
                    Table[{
                    Map[
                    BSplineCurve, 
                    CalculateScan`PlotterScanner`Private`baseSegments$ + ((
                    CalculateScan`PlotterScanner`Private`j 
                    CalculateScan`PlotterScanner`Private`maxDist$) 
                    CalculateScan`PlotterScanner`Private`oSegments$)/
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveCount$$], 
                    Map[
                    BSplineCurve, 
                    CalculateScan`PlotterScanner`Private`baseSegments$ - ((
                    CalculateScan`PlotterScanner`Private`j 
                    CalculateScan`PlotterScanner`Private`maxDist$) 
                    CalculateScan`PlotterScanner`Private`oSegments$)/
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveCount$$]}, {
                    CalculateScan`PlotterScanner`Private`j, 
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveCount$$}]], {}]; 
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveLastParamaters$$ =!= {{
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$}, 
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveCount$$, 
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveAngle$$}]; 
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurvePlot = Graphics[{
                    Directive[
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveColor$$, 
                    Opacity[
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveOpacity$$], 
                    Thickness[
                    10^CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveThickness$$]], 
                    If[
                    CalculateScan`PlotterScanner`Private`tiltedOffsetCurveTF$$\
, CalculateScan`PlotterScanner`Private`tiltedOffsetCurvePlotCurves$$, {}]}]; 
                    If[
                    And[
                    CalculateScan`PlotterScanner`Private`pedalCurveTF$$, 
                    CalculateScan`PlotterScanner`Private`\
pedalCurveLastParamaters$$ =!= {{
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$}, 
                    CalculateScan`PlotterScanner`Private`\
pedalCurveCountFactor$$, 
                    CalculateScan`PlotterScanner`Private`\
pedalCurveCountFactor$$}], 
                    CalculateScan`PlotterScanner`Private`pedalCurvePlotCurves$\
$ = If[CalculateScan`PlotterScanner`Private`pedalCurveTF$$, 
                    
                    With[{CalculateScan`PlotterScanner`Private`\
pedalCurveCount$ = If[CalculateScan`PlotterScanner`Private`pedalCurvePoints$$ === 
                    "grid", 
                    Max[1, 
                    Round[
                    16 CalculateScan`PlotterScanner`Private`\
pedalCurveCountFactor$$]], 
                    Max[1, 
                    Round[
                    120 CalculateScan`PlotterScanner`Private`\
pedalCurveCountFactor$$]]]}, 
                    (Cases[
                    Normal[#], 
                    Blank[Line], {0, Infinity}]& )[
                    If[
                    CalculateScan`PlotterScanner`Private`pedalCurvePoints$$ === 
                    "grid", 
                    Table[
                    
                    With[{CalculateScan`PlotterScanner`Private`px$ = 
                    CalculateScan`PlotterScanner`Private`px, 
                    CalculateScan`PlotterScanner`Private`py$ = 
                    CalculateScan`PlotterScanner`Private`py}, 
                    ParametricPlot[{Global`x, 
                    CompiledFunction[{8, 8., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    4}}, {{0.25, {3, 0, 2}}, {2, {2, 0, 0}}}, {0, 1, 6, 0, 
                    0}, {{10, 0, 1}, {16, 1, 0, 1}, {40, 34, 3, 0, 1, 3, 0, 
                    3}, {40, 2, 3, 0, 1, 3, 0, 4}, {19, 4, 5}, {40, 1, 3, 0, 
                    1, 3, 0, 4}, {13, 5, 4, 5}, {16, 2, 3, 5, 4}, {1}}, 
                    Function[{Global`x}, 
                    
                    Block[{Compile`$673}, 
                    Compile`$673 = 2 Global`x; (
                    E^Compile`$673 (-Cos[Compile`$673] + Sin[Compile`$673]))/
                    4]], Evaluate][
                    Global`x]} + ((1 (
                    CalculateScan`PlotterScanner`Private`px$ - Global`x) + 
                    CompiledFunction[{8, 8., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    7}}, {{0.25, {3, 0, 8}}, {2, {2, 0, 0}}, {
                    0.5, {3, 0, 5}}}, {0, 1, 10, 0, 
                    0}, {{10, 0, 1}, {16, 1, 0, 1}, {40, 34, 3, 0, 1, 3, 0, 
                    2}, {40, 2, 3, 0, 1, 3, 0, 3}, {40, 1, 3, 0, 1, 3, 0, 
                    4}, {19, 3, 6}, {13, 6, 4, 6}, {16, 5, 2, 6, 7}, {10, 0, 
                    6}, {16, 6, 3, 6}, {10, 0, 9}, {16, 9, 4, 9}, {13, 6, 9, 
                    6}, {16, 8, 2, 6, 9}, {13, 7, 9, 7}, {1}}, 
                    Function[{Global`x}, 
                    
                    Block[{Compile`$806, Compile`$809, Compile`$921, 
                    Compile`$928}, Compile`$806 = 2 Global`x; 
                    Compile`$809 = E^Compile`$806; 
                    Compile`$921 = Cos[Compile`$806]; 
                    Compile`$928 = Sin[Compile`$806]; (
                    Compile`$809 (-Compile`$921 + Compile`$928))/
                    2 + (Compile`$809 (2 Compile`$921 + 2 Compile`$928))/4]], 
                    Evaluate][Global`x] (
                    CalculateScan`PlotterScanner`Private`py$ - 
                    CompiledFunction[{8, 8., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    4}}, {{0.25, {3, 0, 2}}, {2, {2, 0, 0}}}, {0, 1, 6, 0, 
                    0}, {{10, 0, 1}, {16, 1, 0, 1}, {40, 34, 3, 0, 1, 3, 0, 
                    3}, {40, 2, 3, 0, 1, 3, 0, 4}, {19, 4, 5}, {40, 1, 3, 0, 
                    1, 3, 0, 4}, {13, 5, 4, 5}, {16, 2, 3, 5, 4}, {1}}, 
                    Function[{Global`x}, 
                    
                    Block[{Compile`$673}, 
                    Compile`$673 = 2 Global`x; (
                    E^Compile`$673 (-Cos[Compile`$673] + Sin[Compile`$673]))/
                    4]], Evaluate][Global`x])) {1, 
                    CompiledFunction[{8, 8., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    4}}, {{0.25, {3, 0, 2}}, {2, {2, 0, 0}}}, {0, 1, 6, 0, 
                    0}, {{10, 0, 1}, {16, 1, 0, 1}, {40, 34, 3, 0, 1, 3, 0, 
                    3}, {40, 2, 3, 0, 1, 3, 0, 4}, {19, 4, 5}, {40, 1, 3, 0, 
                    1, 3, 0, 4}, {13, 5, 4, 5}, {16, 2, 3, 5, 4}, {1}}, 
                    Function[{Global`x}, 
                    
                    Block[{Compile`$673}, 
                    Compile`$673 = 2 Global`x; (
                    E^Compile`$673 (-Cos[Compile`$673] + Sin[Compile`$673]))/
                    4]], Evaluate][Global`x]})/(1 + 
                    CompiledFunction[{8, 8., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    7}}, {{0.25, {3, 0, 8}}, {2, {2, 0, 0}}, {
                    0.5, {3, 0, 5}}}, {0, 1, 10, 0, 
                    0}, {{10, 0, 1}, {16, 1, 0, 1}, {40, 34, 3, 0, 1, 3, 0, 
                    2}, {40, 2, 3, 0, 1, 3, 0, 3}, {40, 1, 3, 0, 1, 3, 0, 
                    4}, {19, 3, 6}, {13, 6, 4, 6}, {16, 5, 2, 6, 7}, {10, 0, 
                    6}, {16, 6, 3, 6}, {10, 0, 9}, {16, 9, 4, 9}, {13, 6, 9, 
                    6}, {16, 8, 2, 6, 9}, {13, 7, 9, 7}, {1}}, 
                    Function[{Global`x}, 
                    
                    Block[{Compile`$806, Compile`$809, Compile`$921, 
                    Compile`$928}, Compile`$806 = 2 Global`x; 
                    Compile`$809 = E^Compile`$806; 
                    Compile`$921 = Cos[Compile`$806]; 
                    Compile`$928 = Sin[Compile`$806]; (
                    Compile`$809 (-Compile`$921 + Compile`$928))/
                    2 + (Compile`$809 (2 Compile`$921 + 2 Compile`$928))/4]], 
                    Evaluate][Global`x]^2), {
                    Global`x, CalculateScan`PlotterScanner`Private`xL$, 
                    CalculateScan`PlotterScanner`Private`xU$}, 
                    PlotRange -> {
                    CalculateScan`PlotterScanner`Private`pRX$, 
                    CalculateScan`PlotterScanner`Private`pRY$}, Evaluated -> 
                    False]], {CalculateScan`PlotterScanner`Private`px, 
                    CalculateScan`PlotterScanner`Private`xL$, 
                    CalculateScan`PlotterScanner`Private`xU$, (
                    CalculateScan`PlotterScanner`Private`xU$ - 
                    CalculateScan`PlotterScanner`Private`xL$)/
                    CalculateScan`PlotterScanner`Private`pedalCurveCount$}, {
                    CalculateScan`PlotterScanner`Private`py, 
                    CalculateScan`PlotterScanner`Private`yL$, 
                    CalculateScan`PlotterScanner`Private`yU$, (
                    CalculateScan`PlotterScanner`Private`yU$ - 
                    CalculateScan`PlotterScanner`Private`yL$)/
                    CalculateScan`PlotterScanner`Private`pedalCurveCount$}], 
                    Table[
                    
                    With[{CalculateScan`PlotterScanner`Private`px$ = 
                    CalculateScan`PlotterScanner`Private`px, 
                    CalculateScan`PlotterScanner`Private`py$ = 
                    CompiledFunction[{8, 8., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    4}}, {{0.25, {3, 0, 2}}, {2, {2, 0, 0}}}, {0, 1, 6, 0, 
                    0}, {{10, 0, 1}, {16, 1, 0, 1}, {40, 34, 3, 0, 1, 3, 0, 
                    3}, {40, 2, 3, 0, 1, 3, 0, 4}, {19, 4, 5}, {40, 1, 3, 0, 
                    1, 3, 0, 4}, {13, 5, 4, 5}, {16, 2, 3, 5, 4}, {1}}, 
                    Function[{Global`x}, 
                    
                    Block[{Compile`$673}, 
                    Compile`$673 = 2 Global`x; (
                    E^Compile`$673 (-Cos[Compile`$673] + Sin[Compile`$673]))/
                    4]], Evaluate][CalculateScan`PlotterScanner`Private`px]}, 
                    
                    ParametricPlot[{Global`x, 
                    CompiledFunction[{8, 8., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    4}}, {{0.25, {3, 0, 2}}, {2, {2, 0, 0}}}, {0, 1, 6, 0, 
                    0}, {{10, 0, 1}, {16, 1, 0, 1}, {40, 34, 3, 0, 1, 3, 0, 
                    3}, {40, 2, 3, 0, 1, 3, 0, 4}, {19, 4, 5}, {40, 1, 3, 0, 
                    1, 3, 0, 4}, {13, 5, 4, 5}, {16, 2, 3, 5, 4}, {1}}, 
                    Function[{Global`x}, 
                    
                    Block[{Compile`$673}, 
                    Compile`$673 = 2 Global`x; (
                    E^Compile`$673 (-Cos[Compile`$673] + Sin[Compile`$673]))/
                    4]], Evaluate][
                    Global`x]} + ((1 (
                    CalculateScan`PlotterScanner`Private`px$ - Global`x) + 
                    CompiledFunction[{8, 8., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    7}}, {{0.25, {3, 0, 8}}, {2, {2, 0, 0}}, {
                    0.5, {3, 0, 5}}}, {0, 1, 10, 0, 
                    0}, {{10, 0, 1}, {16, 1, 0, 1}, {40, 34, 3, 0, 1, 3, 0, 
                    2}, {40, 2, 3, 0, 1, 3, 0, 3}, {40, 1, 3, 0, 1, 3, 0, 
                    4}, {19, 3, 6}, {13, 6, 4, 6}, {16, 5, 2, 6, 7}, {10, 0, 
                    6}, {16, 6, 3, 6}, {10, 0, 9}, {16, 9, 4, 9}, {13, 6, 9, 
                    6}, {16, 8, 2, 6, 9}, {13, 7, 9, 7}, {1}}, 
                    Function[{Global`x}, 
                    
                    Block[{Compile`$806, Compile`$809, Compile`$921, 
                    Compile`$928}, Compile`$806 = 2 Global`x; 
                    Compile`$809 = E^Compile`$806; 
                    Compile`$921 = Cos[Compile`$806]; 
                    Compile`$928 = Sin[Compile`$806]; (
                    Compile`$809 (-Compile`$921 + Compile`$928))/
                    2 + (Compile`$809 (2 Compile`$921 + 2 Compile`$928))/4]], 
                    Evaluate][Global`x] (
                    CalculateScan`PlotterScanner`Private`py$ - 
                    CompiledFunction[{8, 8., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    4}}, {{0.25, {3, 0, 2}}, {2, {2, 0, 0}}}, {0, 1, 6, 0, 
                    0}, {{10, 0, 1}, {16, 1, 0, 1}, {40, 34, 3, 0, 1, 3, 0, 
                    3}, {40, 2, 3, 0, 1, 3, 0, 4}, {19, 4, 5}, {40, 1, 3, 0, 
                    1, 3, 0, 4}, {13, 5, 4, 5}, {16, 2, 3, 5, 4}, {1}}, 
                    Function[{Global`x}, 
                    
                    Block[{Compile`$673}, 
                    Compile`$673 = 2 Global`x; (
                    E^Compile`$673 (-Cos[Compile`$673] + Sin[Compile`$673]))/
                    4]], Evaluate][Global`x])) {1, 
                    CompiledFunction[{8, 8., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    4}}, {{0.25, {3, 0, 2}}, {2, {2, 0, 0}}}, {0, 1, 6, 0, 
                    0}, {{10, 0, 1}, {16, 1, 0, 1}, {40, 34, 3, 0, 1, 3, 0, 
                    3}, {40, 2, 3, 0, 1, 3, 0, 4}, {19, 4, 5}, {40, 1, 3, 0, 
                    1, 3, 0, 4}, {13, 5, 4, 5}, {16, 2, 3, 5, 4}, {1}}, 
                    Function[{Global`x}, 
                    
                    Block[{Compile`$673}, 
                    Compile`$673 = 2 Global`x; (
                    E^Compile`$673 (-Cos[Compile`$673] + Sin[Compile`$673]))/
                    4]], Evaluate][Global`x]})/(1 + 
                    CompiledFunction[{8, 8., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    7}}, {{0.25, {3, 0, 8}}, {2, {2, 0, 0}}, {
                    0.5, {3, 0, 5}}}, {0, 1, 10, 0, 
                    0}, {{10, 0, 1}, {16, 1, 0, 1}, {40, 34, 3, 0, 1, 3, 0, 
                    2}, {40, 2, 3, 0, 1, 3, 0, 3}, {40, 1, 3, 0, 1, 3, 0, 
                    4}, {19, 3, 6}, {13, 6, 4, 6}, {16, 5, 2, 6, 7}, {10, 0, 
                    6}, {16, 6, 3, 6}, {10, 0, 9}, {16, 9, 4, 9}, {13, 6, 9, 
                    6}, {16, 8, 2, 6, 9}, {13, 7, 9, 7}, {1}}, 
                    Function[{Global`x}, 
                    
                    Block[{Compile`$806, Compile`$809, Compile`$921, 
                    Compile`$928}, Compile`$806 = 2 Global`x; 
                    Compile`$809 = E^Compile`$806; 
                    Compile`$921 = Cos[Compile`$806]; 
                    Compile`$928 = Sin[Compile`$806]; (
                    Compile`$809 (-Compile`$921 + Compile`$928))/
                    2 + (Compile`$809 (2 Compile`$921 + 2 Compile`$928))/4]], 
                    Evaluate][Global`x]^2), {
                    Global`x, CalculateScan`PlotterScanner`Private`xL$, 
                    CalculateScan`PlotterScanner`Private`xU$}, 
                    PlotRange -> {
                    CalculateScan`PlotterScanner`Private`pRX$, 
                    CalculateScan`PlotterScanner`Private`pRY$}, Evaluated -> 
                    False]], {CalculateScan`PlotterScanner`Private`px, 
                    CalculateScan`PlotterScanner`Private`xL$, 
                    CalculateScan`PlotterScanner`Private`xU$, (
                    CalculateScan`PlotterScanner`Private`xU$ - 
                    CalculateScan`PlotterScanner`Private`xL$)/
                    CalculateScan`PlotterScanner`Private`pedalCurveCount$}]]]]\
, {}]; CalculateScan`PlotterScanner`Private`pedalCurveLastParamaters$$ =!= {{
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$}, 
                    CalculateScan`PlotterScanner`Private`\
pedalCurveCountFactor$$, 
                    CalculateScan`PlotterScanner`Private`pedalCurvePoints$$}]; 
                    CalculateScan`PlotterScanner`Private`pedalCurvePlot = 
                    Graphics[{
                    Directive[
                    CalculateScan`PlotterScanner`Private`pedalCurveColor$$, 
                    Opacity[
                    CalculateScan`PlotterScanner`Private`pedalCurveOpacity$$], 
                    Thickness[
                    10^CalculateScan`PlotterScanner`Private`\
pedalCurveThickness$$]], 
                    If[
                    CalculateScan`PlotterScanner`Private`pedalCurveTF$$, 
                    CalculateScan`PlotterScanner`Private`pedalCurvePlotCurves$\
$, {}]}]; If[
                    And[
                    CalculateScan`PlotterScanner`Private`negativePedalCurveTF$\
$, CalculateScan`PlotterScanner`Private`negativePedalCurveLastParamaters$$ =!= \
{{CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$}, 
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurveCountFactor$$, 
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurvePoints$$}], 
                    If[CalculateScan`PlotterScanner`Private`\
negativePedalCurveTF$$, 
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurvePlotCurves$$ = 
                    With[{CalculateScan`PlotterScanner`Private`\
negativePedalCurveCount$ = If[
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurvePoints$$ === "grid", 
                    Max[1, 
                    Round[
                    16 CalculateScan`PlotterScanner`Private`\
negativePedalCurveCountFactor$$]], 
                    Max[1, 
                    Round[
                    120 CalculateScan`PlotterScanner`Private`\
negativePedalCurveCountFactor$$]]]}, 
                    (Cases[
                    Normal[#], 
                    Blank[Line], {0, Infinity}]& )[
                    If[
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurvePoints$$ === "grid", 
                    Table[
                    
                    With[{CalculateScan`PlotterScanner`Private`px$ = 
                    CalculateScan`PlotterScanner`Private`px, 
                    CalculateScan`PlotterScanner`Private`py$ = 
                    CalculateScan`PlotterScanner`Private`py}, 
                    
                    ParametricPlot[{-((
                    CalculateScan`PlotterScanner`Private`px$ - 2 Global`x) (
                    CalculateScan`PlotterScanner`Private`py$ - 
                    CompiledFunction[{8, 8., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    4}}, {{0.25, {3, 0, 2}}, {2, {2, 0, 0}}}, {0, 1, 6, 0, 
                    0}, {{10, 0, 1}, {16, 1, 0, 1}, {40, 34, 3, 0, 1, 3, 0, 
                    3}, {40, 2, 3, 0, 1, 3, 0, 4}, {19, 4, 5}, {40, 1, 3, 0, 
                    1, 3, 0, 4}, {13, 5, 4, 5}, {16, 2, 3, 5, 4}, {1}}, 
                    Function[{Global`x}, 
                    
                    Block[{Compile`$673}, 
                    Compile`$673 = 2 Global`x; (
                    E^Compile`$673 (-Cos[Compile`$673] + Sin[Compile`$673]))/
                    4]], Evaluate][Global`x])) - ((
                    CalculateScan`PlotterScanner`Private`px$ - Global`x) 
                    Global`x + (CalculateScan`PlotterScanner`Private`py$ - 
                    CompiledFunction[{8, 8., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    4}}, {{0.25, {3, 0, 2}}, {2, {2, 0, 0}}}, {0, 1, 6, 0, 
                    0}, {{10, 0, 1}, {16, 1, 0, 1}, {40, 34, 3, 0, 1, 3, 0, 
                    3}, {40, 2, 3, 0, 1, 3, 0, 4}, {19, 4, 5}, {40, 1, 3, 0, 
                    1, 3, 0, 4}, {13, 5, 4, 5}, {16, 2, 3, 5, 4}, {1}}, 
                    Function[{Global`x}, 
                    
                    Block[{Compile`$673}, 
                    Compile`$673 = 2 Global`x; (
                    E^Compile`$673 (-Cos[Compile`$673] + Sin[Compile`$673]))/
                    4]], Evaluate][Global`x])^2) 
                    CompiledFunction[{8, 8., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    7}}, {{0.25, {3, 0, 8}}, {2, {2, 0, 0}}, {
                    0.5, {3, 0, 5}}}, {0, 1, 10, 0, 
                    0}, {{10, 0, 1}, {16, 1, 0, 1}, {40, 34, 3, 0, 1, 3, 0, 
                    2}, {40, 2, 3, 0, 1, 3, 0, 3}, {40, 1, 3, 0, 1, 3, 0, 
                    4}, {19, 3, 6}, {13, 6, 4, 6}, {16, 5, 2, 6, 7}, {10, 0, 
                    6}, {16, 6, 3, 6}, {10, 0, 9}, {16, 9, 4, 9}, {13, 6, 9, 
                    6}, {16, 8, 2, 6, 9}, {13, 7, 9, 7}, {1}}, 
                    Function[{Global`x}, 
                    
                    Block[{Compile`$806, Compile`$809, Compile`$921, 
                    Compile`$928}, Compile`$806 = 2 Global`x; 
                    Compile`$809 = E^Compile`$806; 
                    Compile`$921 = Cos[Compile`$806]; 
                    Compile`$928 = Sin[Compile`$806]; (
                    Compile`$809 (-Compile`$921 + Compile`$928))/
                    2 + (Compile`$809 (2 Compile`$921 + 2 Compile`$928))/4]], 
                    Evaluate][Global`x], (
                    CalculateScan`PlotterScanner`Private`px$ - Global`x)^2 + 
                    CalculateScan`PlotterScanner`Private`py$ 
                    CompiledFunction[{8, 8., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    4}}, {{0.25, {3, 0, 2}}, {2, {2, 0, 0}}}, {0, 1, 6, 0, 
                    0}, {{10, 0, 1}, {16, 1, 0, 1}, {40, 34, 3, 0, 1, 3, 0, 
                    3}, {40, 2, 3, 0, 1, 3, 0, 4}, {19, 4, 5}, {40, 1, 3, 0, 
                    1, 3, 0, 4}, {13, 5, 4, 5}, {16, 2, 3, 5, 4}, {1}}, 
                    Function[{Global`x}, 
                    
                    Block[{Compile`$673}, 
                    Compile`$673 = 2 Global`x; (
                    E^Compile`$673 (-Cos[Compile`$673] + Sin[Compile`$673]))/
                    4]], Evaluate][Global`x] - 
                    CompiledFunction[{8, 8., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    4}}, {{0.25, {3, 0, 2}}, {2, {2, 0, 0}}}, {0, 1, 6, 0, 
                    0}, {{10, 0, 1}, {16, 1, 0, 1}, {40, 34, 3, 0, 1, 3, 0, 
                    3}, {40, 2, 3, 0, 1, 3, 0, 4}, {19, 4, 5}, {40, 1, 3, 0, 
                    1, 3, 0, 4}, {13, 5, 4, 5}, {16, 2, 3, 5, 4}, {1}}, 
                    Function[{Global`x}, 
                    
                    Block[{Compile`$673}, 
                    Compile`$673 = 2 Global`x; (
                    E^Compile`$673 (-Cos[Compile`$673] + Sin[Compile`$673]))/
                    4]], Evaluate][Global`x]^2 + ((
                    CalculateScan`PlotterScanner`Private`px$ - Global`x) (
                    CalculateScan`PlotterScanner`Private`py$ - 2 
                    CompiledFunction[{8, 8., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    4}}, {{0.25, {3, 0, 2}}, {2, {2, 0, 0}}}, {0, 1, 6, 0, 
                    0}, {{10, 0, 1}, {16, 1, 0, 1}, {40, 34, 3, 0, 1, 3, 0, 
                    3}, {40, 2, 3, 0, 1, 3, 0, 4}, {19, 4, 5}, {40, 1, 3, 0, 
                    1, 3, 0, 4}, {13, 5, 4, 5}, {16, 2, 3, 5, 4}, {1}}, 
                    Function[{Global`x}, 
                    
                    Block[{Compile`$673}, 
                    Compile`$673 = 2 Global`x; (
                    E^Compile`$673 (-Cos[Compile`$673] + Sin[Compile`$673]))/
                    4]], Evaluate][Global`x])) 
                    CompiledFunction[{8, 8., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    7}}, {{0.25, {3, 0, 8}}, {2, {2, 0, 0}}, {
                    0.5, {3, 0, 5}}}, {0, 1, 10, 0, 
                    0}, {{10, 0, 1}, {16, 1, 0, 1}, {40, 34, 3, 0, 1, 3, 0, 
                    2}, {40, 2, 3, 0, 1, 3, 0, 3}, {40, 1, 3, 0, 1, 3, 0, 
                    4}, {19, 3, 6}, {13, 6, 4, 6}, {16, 5, 2, 6, 7}, {10, 0, 
                    6}, {16, 6, 3, 6}, {10, 0, 9}, {16, 9, 4, 9}, {13, 6, 9, 
                    6}, {16, 8, 2, 6, 9}, {13, 7, 9, 7}, {1}}, 
                    Function[{Global`x}, 
                    
                    Block[{Compile`$806, Compile`$809, Compile`$921, 
                    Compile`$928}, Compile`$806 = 2 Global`x; 
                    Compile`$809 = E^Compile`$806; 
                    Compile`$921 = Cos[Compile`$806]; 
                    Compile`$928 = Sin[Compile`$806]; (
                    Compile`$809 (-Compile`$921 + Compile`$928))/
                    2 + (Compile`$809 (2 Compile`$921 + 2 Compile`$928))/4]], 
                    Evaluate][Global`x]}/(
                    CalculateScan`PlotterScanner`Private`py$ - 
                    CompiledFunction[{8, 8., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    4}}, {{0.25, {3, 0, 2}}, {2, {2, 0, 0}}}, {0, 1, 6, 0, 
                    0}, {{10, 0, 1}, {16, 1, 0, 1}, {40, 34, 3, 0, 1, 3, 0, 
                    3}, {40, 2, 3, 0, 1, 3, 0, 4}, {19, 4, 5}, {40, 1, 3, 0, 
                    1, 3, 0, 4}, {13, 5, 4, 5}, {16, 2, 3, 5, 4}, {1}}, 
                    Function[{Global`x}, 
                    
                    Block[{Compile`$673}, 
                    Compile`$673 = 2 Global`x; (
                    E^Compile`$673 (-Cos[Compile`$673] + Sin[Compile`$673]))/
                    4]], Evaluate][
                    Global`x] + (-CalculateScan`PlotterScanner`Private`px$ + 
                    Global`x) CompiledFunction[{8, 8., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    7}}, {{0.25, {3, 0, 8}}, {2, {2, 0, 0}}, {
                    0.5, {3, 0, 5}}}, {0, 1, 10, 0, 
                    0}, {{10, 0, 1}, {16, 1, 0, 1}, {40, 34, 3, 0, 1, 3, 0, 
                    2}, {40, 2, 3, 0, 1, 3, 0, 3}, {40, 1, 3, 0, 1, 3, 0, 
                    4}, {19, 3, 6}, {13, 6, 4, 6}, {16, 5, 2, 6, 7}, {10, 0, 
                    6}, {16, 6, 3, 6}, {10, 0, 9}, {16, 9, 4, 9}, {13, 6, 9, 
                    6}, {16, 8, 2, 6, 9}, {13, 7, 9, 7}, {1}}, 
                    Function[{Global`x}, 
                    
                    Block[{Compile`$806, Compile`$809, Compile`$921, 
                    Compile`$928}, Compile`$806 = 2 Global`x; 
                    Compile`$809 = E^Compile`$806; 
                    Compile`$921 = Cos[Compile`$806]; 
                    Compile`$928 = Sin[Compile`$806]; (
                    Compile`$809 (-Compile`$921 + Compile`$928))/
                    2 + (Compile`$809 (2 Compile`$921 + 2 Compile`$928))/4]], 
                    Evaluate][Global`x]), {
                    Global`x, CalculateScan`PlotterScanner`Private`xL$, 
                    CalculateScan`PlotterScanner`Private`xU$}, 
                    PlotRange -> {
                    CalculateScan`PlotterScanner`Private`pRX$, 
                    CalculateScan`PlotterScanner`Private`pRY$}, Evaluated -> 
                    False]], {CalculateScan`PlotterScanner`Private`px, 
                    CalculateScan`PlotterScanner`Private`xL$, 
                    CalculateScan`PlotterScanner`Private`xU$, (
                    CalculateScan`PlotterScanner`Private`xU$ - 
                    CalculateScan`PlotterScanner`Private`xL$)/
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurveCount$}, {CalculateScan`PlotterScanner`Private`py, 
                    CalculateScan`PlotterScanner`Private`yL$, 
                    CalculateScan`PlotterScanner`Private`yU$, (
                    CalculateScan`PlotterScanner`Private`yU$ - 
                    CalculateScan`PlotterScanner`Private`yL$)/
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurveCount$}], 
                    Table[
                    
                    With[{CalculateScan`PlotterScanner`Private`px$ = 
                    CalculateScan`PlotterScanner`Private`px, 
                    CalculateScan`PlotterScanner`Private`py$ = 
                    CompiledFunction[{8, 8., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    4}}, {{0.25, {3, 0, 2}}, {2, {2, 0, 0}}}, {0, 1, 6, 0, 
                    0}, {{10, 0, 1}, {16, 1, 0, 1}, {40, 34, 3, 0, 1, 3, 0, 
                    3}, {40, 2, 3, 0, 1, 3, 0, 4}, {19, 4, 5}, {40, 1, 3, 0, 
                    1, 3, 0, 4}, {13, 5, 4, 5}, {16, 2, 3, 5, 4}, {1}}, 
                    Function[{Global`x}, 
                    
                    Block[{Compile`$673}, 
                    Compile`$673 = 2 Global`x; (
                    E^Compile`$673 (-Cos[Compile`$673] + Sin[Compile`$673]))/
                    4]], Evaluate][CalculateScan`PlotterScanner`Private`px]}, 
                    
                    
                    ParametricPlot[{-((
                    CalculateScan`PlotterScanner`Private`px$ - 2 Global`x) (
                    CalculateScan`PlotterScanner`Private`py$ - 
                    CompiledFunction[{8, 8., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    4}}, {{0.25, {3, 0, 2}}, {2, {2, 0, 0}}}, {0, 1, 6, 0, 
                    0}, {{10, 0, 1}, {16, 1, 0, 1}, {40, 34, 3, 0, 1, 3, 0, 
                    3}, {40, 2, 3, 0, 1, 3, 0, 4}, {19, 4, 5}, {40, 1, 3, 0, 
                    1, 3, 0, 4}, {13, 5, 4, 5}, {16, 2, 3, 5, 4}, {1}}, 
                    Function[{Global`x}, 
                    
                    Block[{Compile`$673}, 
                    Compile`$673 = 2 Global`x; (
                    E^Compile`$673 (-Cos[Compile`$673] + Sin[Compile`$673]))/
                    4]], Evaluate][Global`x])) - ((
                    CalculateScan`PlotterScanner`Private`px$ - Global`x) 
                    Global`x + (CalculateScan`PlotterScanner`Private`py$ - 
                    CompiledFunction[{8, 8., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    4}}, {{0.25, {3, 0, 2}}, {2, {2, 0, 0}}}, {0, 1, 6, 0, 
                    0}, {{10, 0, 1}, {16, 1, 0, 1}, {40, 34, 3, 0, 1, 3, 0, 
                    3}, {40, 2, 3, 0, 1, 3, 0, 4}, {19, 4, 5}, {40, 1, 3, 0, 
                    1, 3, 0, 4}, {13, 5, 4, 5}, {16, 2, 3, 5, 4}, {1}}, 
                    Function[{Global`x}, 
                    
                    Block[{Compile`$673}, 
                    Compile`$673 = 2 Global`x; (
                    E^Compile`$673 (-Cos[Compile`$673] + Sin[Compile`$673]))/
                    4]], Evaluate][Global`x])^2) 
                    CompiledFunction[{8, 8., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    7}}, {{0.25, {3, 0, 8}}, {2, {2, 0, 0}}, {
                    0.5, {3, 0, 5}}}, {0, 1, 10, 0, 
                    0}, {{10, 0, 1}, {16, 1, 0, 1}, {40, 34, 3, 0, 1, 3, 0, 
                    2}, {40, 2, 3, 0, 1, 3, 0, 3}, {40, 1, 3, 0, 1, 3, 0, 
                    4}, {19, 3, 6}, {13, 6, 4, 6}, {16, 5, 2, 6, 7}, {10, 0, 
                    6}, {16, 6, 3, 6}, {10, 0, 9}, {16, 9, 4, 9}, {13, 6, 9, 
                    6}, {16, 8, 2, 6, 9}, {13, 7, 9, 7}, {1}}, 
                    Function[{Global`x}, 
                    
                    Block[{Compile`$806, Compile`$809, Compile`$921, 
                    Compile`$928}, Compile`$806 = 2 Global`x; 
                    Compile`$809 = E^Compile`$806; 
                    Compile`$921 = Cos[Compile`$806]; 
                    Compile`$928 = Sin[Compile`$806]; (
                    Compile`$809 (-Compile`$921 + Compile`$928))/
                    2 + (Compile`$809 (2 Compile`$921 + 2 Compile`$928))/4]], 
                    Evaluate][Global`x], (
                    CalculateScan`PlotterScanner`Private`px$ - Global`x)^2 + 
                    CalculateScan`PlotterScanner`Private`py$ 
                    CompiledFunction[{8, 8., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    4}}, {{0.25, {3, 0, 2}}, {2, {2, 0, 0}}}, {0, 1, 6, 0, 
                    0}, {{10, 0, 1}, {16, 1, 0, 1}, {40, 34, 3, 0, 1, 3, 0, 
                    3}, {40, 2, 3, 0, 1, 3, 0, 4}, {19, 4, 5}, {40, 1, 3, 0, 
                    1, 3, 0, 4}, {13, 5, 4, 5}, {16, 2, 3, 5, 4}, {1}}, 
                    Function[{Global`x}, 
                    
                    Block[{Compile`$673}, 
                    Compile`$673 = 2 Global`x; (
                    E^Compile`$673 (-Cos[Compile`$673] + Sin[Compile`$673]))/
                    4]], Evaluate][Global`x] - 
                    CompiledFunction[{8, 8., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    4}}, {{0.25, {3, 0, 2}}, {2, {2, 0, 0}}}, {0, 1, 6, 0, 
                    0}, {{10, 0, 1}, {16, 1, 0, 1}, {40, 34, 3, 0, 1, 3, 0, 
                    3}, {40, 2, 3, 0, 1, 3, 0, 4}, {19, 4, 5}, {40, 1, 3, 0, 
                    1, 3, 0, 4}, {13, 5, 4, 5}, {16, 2, 3, 5, 4}, {1}}, 
                    Function[{Global`x}, 
                    
                    Block[{Compile`$673}, 
                    Compile`$673 = 2 Global`x; (
                    E^Compile`$673 (-Cos[Compile`$673] + Sin[Compile`$673]))/
                    4]], Evaluate][Global`x]^2 + ((
                    CalculateScan`PlotterScanner`Private`px$ - Global`x) (
                    CalculateScan`PlotterScanner`Private`py$ - 2 
                    CompiledFunction[{8, 8., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    4}}, {{0.25, {3, 0, 2}}, {2, {2, 0, 0}}}, {0, 1, 6, 0, 
                    0}, {{10, 0, 1}, {16, 1, 0, 1}, {40, 34, 3, 0, 1, 3, 0, 
                    3}, {40, 2, 3, 0, 1, 3, 0, 4}, {19, 4, 5}, {40, 1, 3, 0, 
                    1, 3, 0, 4}, {13, 5, 4, 5}, {16, 2, 3, 5, 4}, {1}}, 
                    Function[{Global`x}, 
                    
                    Block[{Compile`$673}, 
                    Compile`$673 = 2 Global`x; (
                    E^Compile`$673 (-Cos[Compile`$673] + Sin[Compile`$673]))/
                    4]], Evaluate][Global`x])) 
                    CompiledFunction[{8, 8., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    7}}, {{0.25, {3, 0, 8}}, {2, {2, 0, 0}}, {
                    0.5, {3, 0, 5}}}, {0, 1, 10, 0, 
                    0}, {{10, 0, 1}, {16, 1, 0, 1}, {40, 34, 3, 0, 1, 3, 0, 
                    2}, {40, 2, 3, 0, 1, 3, 0, 3}, {40, 1, 3, 0, 1, 3, 0, 
                    4}, {19, 3, 6}, {13, 6, 4, 6}, {16, 5, 2, 6, 7}, {10, 0, 
                    6}, {16, 6, 3, 6}, {10, 0, 9}, {16, 9, 4, 9}, {13, 6, 9, 
                    6}, {16, 8, 2, 6, 9}, {13, 7, 9, 7}, {1}}, 
                    Function[{Global`x}, 
                    
                    Block[{Compile`$806, Compile`$809, Compile`$921, 
                    Compile`$928}, Compile`$806 = 2 Global`x; 
                    Compile`$809 = E^Compile`$806; 
                    Compile`$921 = Cos[Compile`$806]; 
                    Compile`$928 = Sin[Compile`$806]; (
                    Compile`$809 (-Compile`$921 + Compile`$928))/
                    2 + (Compile`$809 (2 Compile`$921 + 2 Compile`$928))/4]], 
                    Evaluate][Global`x]}/(
                    CalculateScan`PlotterScanner`Private`py$ - 
                    CompiledFunction[{8, 8., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    4}}, {{0.25, {3, 0, 2}}, {2, {2, 0, 0}}}, {0, 1, 6, 0, 
                    0}, {{10, 0, 1}, {16, 1, 0, 1}, {40, 34, 3, 0, 1, 3, 0, 
                    3}, {40, 2, 3, 0, 1, 3, 0, 4}, {19, 4, 5}, {40, 1, 3, 0, 
                    1, 3, 0, 4}, {13, 5, 4, 5}, {16, 2, 3, 5, 4}, {1}}, 
                    Function[{Global`x}, 
                    
                    Block[{Compile`$673}, 
                    Compile`$673 = 2 Global`x; (
                    E^Compile`$673 (-Cos[Compile`$673] + Sin[Compile`$673]))/
                    4]], Evaluate][
                    Global`x] + (-CalculateScan`PlotterScanner`Private`px$ + 
                    Global`x) CompiledFunction[{8, 8., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    7}}, {{0.25, {3, 0, 8}}, {2, {2, 0, 0}}, {
                    0.5, {3, 0, 5}}}, {0, 1, 10, 0, 
                    0}, {{10, 0, 1}, {16, 1, 0, 1}, {40, 34, 3, 0, 1, 3, 0, 
                    2}, {40, 2, 3, 0, 1, 3, 0, 3}, {40, 1, 3, 0, 1, 3, 0, 
                    4}, {19, 3, 6}, {13, 6, 4, 6}, {16, 5, 2, 6, 7}, {10, 0, 
                    6}, {16, 6, 3, 6}, {10, 0, 9}, {16, 9, 4, 9}, {13, 6, 9, 
                    6}, {16, 8, 2, 6, 9}, {13, 7, 9, 7}, {1}}, 
                    Function[{Global`x}, 
                    
                    Block[{Compile`$806, Compile`$809, Compile`$921, 
                    Compile`$928}, Compile`$806 = 2 Global`x; 
                    Compile`$809 = E^Compile`$806; 
                    Compile`$921 = Cos[Compile`$806]; 
                    Compile`$928 = Sin[Compile`$806]; (
                    Compile`$809 (-Compile`$921 + Compile`$928))/
                    2 + (Compile`$809 (2 Compile`$921 + 2 Compile`$928))/4]], 
                    Evaluate][Global`x]), {
                    Global`x, CalculateScan`PlotterScanner`Private`xL$, 
                    CalculateScan`PlotterScanner`Private`xU$}, 
                    PlotRange -> {
                    CalculateScan`PlotterScanner`Private`pRX$, 
                    CalculateScan`PlotterScanner`Private`pRY$}, Evaluated -> 
                    False]], {CalculateScan`PlotterScanner`Private`px, 
                    CalculateScan`PlotterScanner`Private`xL$, 
                    CalculateScan`PlotterScanner`Private`xU$, (
                    CalculateScan`PlotterScanner`Private`xU$ - 
                    CalculateScan`PlotterScanner`Private`xL$)/
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurveCount$}]]]], {}]; 
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurveLastParamaters$$ = {{
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$}, 
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurveCountFactor$$, 
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurvePoints$$}]; 
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurvePlot = Graphics[{
                    Directive[
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurveColor$$, 
                    Opacity[
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurveOpacity$$], 
                    Thickness[
                    10^CalculateScan`PlotterScanner`Private`\
negativePedalCurveThickness$$]], 
                    If[
                    CalculateScan`PlotterScanner`Private`negativePedalCurveTF$\
$, CalculateScan`PlotterScanner`Private`negativePedalCurvePlotCurves$$, {}]}]; 
                    If[
                    And[
                    CalculateScan`PlotterScanner`Private`contraPedalCurveTF$$,
                     CalculateScan`PlotterScanner`Private`\
contraPedalCurveLastParamaters$$ =!= {{
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$}, 
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurveCountFactor$$, 
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurvePoints$$}], 
                    If[CalculateScan`PlotterScanner`Private`\
contraPedalCurveTF$$, 
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurvePlotCurves$$ = 
                    With[{CalculateScan`PlotterScanner`Private`\
contraPedalCurveCount$ = 
                    If[CalculateScan`PlotterScanner`Private`\
contraPedalCurvePoints$$ === "grid", 
                    Max[1, 
                    Round[
                    16 CalculateScan`PlotterScanner`Private`\
contraPedalCurveCountFactor$$]], 
                    Max[1, 
                    Round[
                    120 CalculateScan`PlotterScanner`Private`\
contraPedalCurveCountFactor$$]]]}, 
                    (Cases[
                    Normal[#], 
                    Blank[Line], {0, Infinity}]& )[
                    If[
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurvePoints$$ === "grid", 
                    Table[
                    
                    With[{CalculateScan`PlotterScanner`Private`px$ = 
                    CalculateScan`PlotterScanner`Private`px, 
                    CalculateScan`PlotterScanner`Private`py$ = 
                    CalculateScan`PlotterScanner`Private`py}, 
                    ParametricPlot[{Global`x, 
                    CompiledFunction[{8, 8., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    4}}, {{0.25, {3, 0, 2}}, {2, {2, 0, 0}}}, {0, 1, 6, 0, 
                    0}, {{10, 0, 1}, {16, 1, 0, 1}, {40, 34, 3, 0, 1, 3, 0, 
                    3}, {40, 2, 3, 0, 1, 3, 0, 4}, {19, 4, 5}, {40, 1, 3, 0, 
                    1, 3, 0, 4}, {13, 5, 4, 5}, {16, 2, 3, 5, 4}, {1}}, 
                    Function[{Global`x}, 
                    
                    Block[{Compile`$673}, 
                    Compile`$673 = 2 Global`x; (
                    E^Compile`$673 (-Cos[Compile`$673] + Sin[Compile`$673]))/
                    4]], Evaluate][
                    Global`x]} + ((1 (
                    CalculateScan`PlotterScanner`Private`py$ - 
                    CompiledFunction[{8, 8., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    4}}, {{0.25, {3, 0, 2}}, {2, {2, 0, 0}}}, {0, 1, 6, 0, 
                    0}, {{10, 0, 1}, {16, 1, 0, 1}, {40, 34, 3, 0, 1, 3, 0, 
                    3}, {40, 2, 3, 0, 1, 3, 0, 4}, {19, 4, 5}, {40, 1, 3, 0, 
                    1, 3, 0, 4}, {13, 5, 4, 5}, {16, 2, 3, 5, 4}, {1}}, 
                    Function[{Global`x}, 
                    
                    Block[{Compile`$673}, 
                    Compile`$673 = 2 Global`x; (
                    E^Compile`$673 (-Cos[Compile`$673] + Sin[Compile`$673]))/
                    4]], Evaluate][Global`x]) + 
                    CompiledFunction[{8, 8., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    7}}, {{0.25, {3, 0, 8}}, {2, {2, 0, 0}}, {
                    0.5, {3, 0, 5}}}, {0, 1, 10, 0, 
                    0}, {{10, 0, 1}, {16, 1, 0, 1}, {40, 34, 3, 0, 1, 3, 0, 
                    2}, {40, 2, 3, 0, 1, 3, 0, 3}, {40, 1, 3, 0, 1, 3, 0, 
                    4}, {19, 3, 6}, {13, 6, 4, 6}, {16, 5, 2, 6, 7}, {10, 0, 
                    6}, {16, 6, 3, 6}, {10, 0, 9}, {16, 9, 4, 9}, {13, 6, 9, 
                    6}, {16, 8, 2, 6, 9}, {13, 7, 9, 7}, {1}}, 
                    Function[{Global`x}, 
                    
                    Block[{Compile`$806, Compile`$809, Compile`$921, 
                    Compile`$928}, Compile`$806 = 2 Global`x; 
                    Compile`$809 = E^Compile`$806; 
                    Compile`$921 = Cos[Compile`$806]; 
                    Compile`$928 = Sin[Compile`$806]; (
                    Compile`$809 (-Compile`$921 + Compile`$928))/
                    2 + (Compile`$809 (2 Compile`$921 + 2 Compile`$928))/4]], 
                    Evaluate][Global`x] (-
                    CalculateScan`PlotterScanner`Private`px$ + Global`x)) {-
                    CompiledFunction[{8, 8., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    4}}, {{0.25, {3, 0, 2}}, {2, {2, 0, 0}}}, {0, 1, 6, 0, 
                    0}, {{10, 0, 1}, {16, 1, 0, 1}, {40, 34, 3, 0, 1, 3, 0, 
                    3}, {40, 2, 3, 0, 1, 3, 0, 4}, {19, 4, 5}, {40, 1, 3, 0, 
                    1, 3, 0, 4}, {13, 5, 4, 5}, {16, 2, 3, 5, 4}, {1}}, 
                    Function[{Global`x}, 
                    
                    Block[{Compile`$673}, 
                    Compile`$673 = 2 Global`x; (
                    E^Compile`$673 (-Cos[Compile`$673] + Sin[Compile`$673]))/
                    4]], Evaluate][Global`x], 1})/(1 + 
                    CompiledFunction[{8, 8., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    7}}, {{0.25, {3, 0, 8}}, {2, {2, 0, 0}}, {
                    0.5, {3, 0, 5}}}, {0, 1, 10, 0, 
                    0}, {{10, 0, 1}, {16, 1, 0, 1}, {40, 34, 3, 0, 1, 3, 0, 
                    2}, {40, 2, 3, 0, 1, 3, 0, 3}, {40, 1, 3, 0, 1, 3, 0, 
                    4}, {19, 3, 6}, {13, 6, 4, 6}, {16, 5, 2, 6, 7}, {10, 0, 
                    6}, {16, 6, 3, 6}, {10, 0, 9}, {16, 9, 4, 9}, {13, 6, 9, 
                    6}, {16, 8, 2, 6, 9}, {13, 7, 9, 7}, {1}}, 
                    Function[{Global`x}, 
                    
                    Block[{Compile`$806, Compile`$809, Compile`$921, 
                    Compile`$928}, Compile`$806 = 2 Global`x; 
                    Compile`$809 = E^Compile`$806; 
                    Compile`$921 = Cos[Compile`$806]; 
                    Compile`$928 = Sin[Compile`$806]; (
                    Compile`$809 (-Compile`$921 + Compile`$928))/
                    2 + (Compile`$809 (2 Compile`$921 + 2 Compile`$928))/4]], 
                    Evaluate][Global`x]^2), {
                    Global`x, CalculateScan`PlotterScanner`Private`xL$, 
                    CalculateScan`PlotterScanner`Private`xU$}, 
                    PlotRange -> {
                    CalculateScan`PlotterScanner`Private`pRX$, 
                    CalculateScan`PlotterScanner`Private`pRY$}, Evaluated -> 
                    False]], {CalculateScan`PlotterScanner`Private`px, 
                    CalculateScan`PlotterScanner`Private`xL$, 
                    CalculateScan`PlotterScanner`Private`xU$, (
                    CalculateScan`PlotterScanner`Private`xU$ - 
                    CalculateScan`PlotterScanner`Private`xL$)/
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurveCount$}, {CalculateScan`PlotterScanner`Private`py, 
                    CalculateScan`PlotterScanner`Private`yL$, 
                    CalculateScan`PlotterScanner`Private`yU$, (
                    CalculateScan`PlotterScanner`Private`yU$ - 
                    CalculateScan`PlotterScanner`Private`yL$)/
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurveCount$}], 
                    Table[
                    
                    With[{CalculateScan`PlotterScanner`Private`px$ = 
                    CalculateScan`PlotterScanner`Private`px, 
                    CalculateScan`PlotterScanner`Private`py$ = 
                    CompiledFunction[{8, 8., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    4}}, {{0.25, {3, 0, 2}}, {2, {2, 0, 0}}}, {0, 1, 6, 0, 
                    0}, {{10, 0, 1}, {16, 1, 0, 1}, {40, 34, 3, 0, 1, 3, 0, 
                    3}, {40, 2, 3, 0, 1, 3, 0, 4}, {19, 4, 5}, {40, 1, 3, 0, 
                    1, 3, 0, 4}, {13, 5, 4, 5}, {16, 2, 3, 5, 4}, {1}}, 
                    Function[{Global`x}, 
                    
                    Block[{Compile`$673}, 
                    Compile`$673 = 2 Global`x; (
                    E^Compile`$673 (-Cos[Compile`$673] + Sin[Compile`$673]))/
                    4]], Evaluate][CalculateScan`PlotterScanner`Private`px]}, 
                    
                    ParametricPlot[{Global`x, 
                    CompiledFunction[{8, 8., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    4}}, {{0.25, {3, 0, 2}}, {2, {2, 0, 0}}}, {0, 1, 6, 0, 
                    0}, {{10, 0, 1}, {16, 1, 0, 1}, {40, 34, 3, 0, 1, 3, 0, 
                    3}, {40, 2, 3, 0, 1, 3, 0, 4}, {19, 4, 5}, {40, 1, 3, 0, 
                    1, 3, 0, 4}, {13, 5, 4, 5}, {16, 2, 3, 5, 4}, {1}}, 
                    Function[{Global`x}, 
                    
                    Block[{Compile`$673}, 
                    Compile`$673 = 2 Global`x; (
                    E^Compile`$673 (-Cos[Compile`$673] + Sin[Compile`$673]))/
                    4]], Evaluate][
                    Global`x]} + ((1 (
                    CalculateScan`PlotterScanner`Private`py$ - 
                    CompiledFunction[{8, 8., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    4}}, {{0.25, {3, 0, 2}}, {2, {2, 0, 0}}}, {0, 1, 6, 0, 
                    0}, {{10, 0, 1}, {16, 1, 0, 1}, {40, 34, 3, 0, 1, 3, 0, 
                    3}, {40, 2, 3, 0, 1, 3, 0, 4}, {19, 4, 5}, {40, 1, 3, 0, 
                    1, 3, 0, 4}, {13, 5, 4, 5}, {16, 2, 3, 5, 4}, {1}}, 
                    Function[{Global`x}, 
                    
                    Block[{Compile`$673}, 
                    Compile`$673 = 2 Global`x; (
                    E^Compile`$673 (-Cos[Compile`$673] + Sin[Compile`$673]))/
                    4]], Evaluate][Global`x]) + 
                    CompiledFunction[{8, 8., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    7}}, {{0.25, {3, 0, 8}}, {2, {2, 0, 0}}, {
                    0.5, {3, 0, 5}}}, {0, 1, 10, 0, 
                    0}, {{10, 0, 1}, {16, 1, 0, 1}, {40, 34, 3, 0, 1, 3, 0, 
                    2}, {40, 2, 3, 0, 1, 3, 0, 3}, {40, 1, 3, 0, 1, 3, 0, 
                    4}, {19, 3, 6}, {13, 6, 4, 6}, {16, 5, 2, 6, 7}, {10, 0, 
                    6}, {16, 6, 3, 6}, {10, 0, 9}, {16, 9, 4, 9}, {13, 6, 9, 
                    6}, {16, 8, 2, 6, 9}, {13, 7, 9, 7}, {1}}, 
                    Function[{Global`x}, 
                    
                    Block[{Compile`$806, Compile`$809, Compile`$921, 
                    Compile`$928}, Compile`$806 = 2 Global`x; 
                    Compile`$809 = E^Compile`$806; 
                    Compile`$921 = Cos[Compile`$806]; 
                    Compile`$928 = Sin[Compile`$806]; (
                    Compile`$809 (-Compile`$921 + Compile`$928))/
                    2 + (Compile`$809 (2 Compile`$921 + 2 Compile`$928))/4]], 
                    Evaluate][Global`x] (-
                    CalculateScan`PlotterScanner`Private`px$ + Global`x)) {-
                    CompiledFunction[{8, 8., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    4}}, {{0.25, {3, 0, 2}}, {2, {2, 0, 0}}}, {0, 1, 6, 0, 
                    0}, {{10, 0, 1}, {16, 1, 0, 1}, {40, 34, 3, 0, 1, 3, 0, 
                    3}, {40, 2, 3, 0, 1, 3, 0, 4}, {19, 4, 5}, {40, 1, 3, 0, 
                    1, 3, 0, 4}, {13, 5, 4, 5}, {16, 2, 3, 5, 4}, {1}}, 
                    Function[{Global`x}, 
                    
                    Block[{Compile`$673}, 
                    Compile`$673 = 2 Global`x; (
                    E^Compile`$673 (-Cos[Compile`$673] + Sin[Compile`$673]))/
                    4]], Evaluate][Global`x], 1})/(1 + 
                    CompiledFunction[{8, 8., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    7}}, {{0.25, {3, 0, 8}}, {2, {2, 0, 0}}, {
                    0.5, {3, 0, 5}}}, {0, 1, 10, 0, 
                    0}, {{10, 0, 1}, {16, 1, 0, 1}, {40, 34, 3, 0, 1, 3, 0, 
                    2}, {40, 2, 3, 0, 1, 3, 0, 3}, {40, 1, 3, 0, 1, 3, 0, 
                    4}, {19, 3, 6}, {13, 6, 4, 6}, {16, 5, 2, 6, 7}, {10, 0, 
                    6}, {16, 6, 3, 6}, {10, 0, 9}, {16, 9, 4, 9}, {13, 6, 9, 
                    6}, {16, 8, 2, 6, 9}, {13, 7, 9, 7}, {1}}, 
                    Function[{Global`x}, 
                    
                    Block[{Compile`$806, Compile`$809, Compile`$921, 
                    Compile`$928}, Compile`$806 = 2 Global`x; 
                    Compile`$809 = E^Compile`$806; 
                    Compile`$921 = Cos[Compile`$806]; 
                    Compile`$928 = Sin[Compile`$806]; (
                    Compile`$809 (-Compile`$921 + Compile`$928))/
                    2 + (Compile`$809 (2 Compile`$921 + 2 Compile`$928))/4]], 
                    Evaluate][Global`x]^2), {
                    Global`x, CalculateScan`PlotterScanner`Private`xL$, 
                    CalculateScan`PlotterScanner`Private`xU$}, 
                    PlotRange -> {
                    CalculateScan`PlotterScanner`Private`pRX$, 
                    CalculateScan`PlotterScanner`Private`pRY$}, Evaluated -> 
                    False]], {CalculateScan`PlotterScanner`Private`px, 
                    CalculateScan`PlotterScanner`Private`xL$, 
                    CalculateScan`PlotterScanner`Private`xU$, (
                    CalculateScan`PlotterScanner`Private`xU$ - 
                    CalculateScan`PlotterScanner`Private`xL$)/
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurveCount$}]]]], {}]; 
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurveLastParamaters$$ = {{
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$}, 
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurveCountFactor$$, 
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurvePoints$$}]; 
                    CalculateScan`PlotterScanner`Private`contraPedalCurvePlot = 
                    Graphics[{
                    Directive[
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurveColor$$, 
                    Opacity[
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurveOpacity$$], 
                    Thickness[
                    10^CalculateScan`PlotterScanner`Private`\
contraPedalCurveThickness$$]], 
                    If[
                    CalculateScan`PlotterScanner`Private`contraPedalCurveTF$$,
                     CalculateScan`PlotterScanner`Private`\
contraPedalCurvePlotCurves$$, {}]}]; If[
                    And[
                    CalculateScan`PlotterScanner`Private`dualCurveTF$$, 
                    CalculateScan`PlotterScanner`Private`\
dualCurveLastParamaters$$ =!= {{
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$}, 
                    CalculateScan`PlotterScanner`Private`dualCurveCountFactor$\
$, CalculateScan`PlotterScanner`Private`dualCurvePoints}], 
                    If[CalculateScan`PlotterScanner`Private`dualCurveTF$$, 
                    CalculateScan`PlotterScanner`Private`dualCurvePlotCurves$$\
 = With[{CalculateScan`PlotterScanner`Private`dualCurveCount$ = 
                    If[CalculateScan`PlotterScanner`Private`dualCurvePoints === 
                    "grid", 
                    Max[1, 
                    Round[
                    16 CalculateScan`PlotterScanner`Private`\
dualCurveCountFactor$$]], 
                    Max[1, 
                    Round[
                    120 CalculateScan`PlotterScanner`Private`\
dualCurveCountFactor$$]]]}, 
                    (Cases[
                    Normal[#], 
                    Blank[Line], {0, Infinity}]& )[
                    If[
                    CalculateScan`PlotterScanner`Private`dualCurvePoints === 
                    "grid", 
                    Table[
                    
                    With[{CalculateScan`PlotterScanner`Private`px$ = 
                    CalculateScan`PlotterScanner`Private`px, 
                    CalculateScan`PlotterScanner`Private`py$ = 
                    CalculateScan`PlotterScanner`Private`py}, 
                    ParametricPlot[{-CompiledFunction[{8, 8., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    7}}, {{0.25, {3, 0, 8}}, {2, {2, 0, 0}}, {
                    0.5, {3, 0, 5}}}, {0, 1, 10, 0, 
                    0}, {{10, 0, 1}, {16, 1, 0, 1}, {40, 34, 3, 0, 1, 3, 0, 
                    2}, {40, 2, 3, 0, 1, 3, 0, 3}, {40, 1, 3, 0, 1, 3, 0, 
                    4}, {19, 3, 6}, {13, 6, 4, 6}, {16, 5, 2, 6, 7}, {10, 0, 
                    6}, {16, 6, 3, 6}, {10, 0, 9}, {16, 9, 4, 9}, {13, 6, 9, 
                    6}, {16, 8, 2, 6, 9}, {13, 7, 9, 7}, {1}}, 
                    Function[{Global`x}, 
                    
                    Block[{Compile`$806, Compile`$809, Compile`$921, 
                    Compile`$928}, Compile`$806 = 2 Global`x; 
                    Compile`$809 = E^Compile`$806; 
                    Compile`$921 = Cos[Compile`$806]; 
                    Compile`$928 = Sin[Compile`$806]; (
                    Compile`$809 (-Compile`$921 + Compile`$928))/
                    2 + (Compile`$809 (2 Compile`$921 + 2 Compile`$928))/4]], 
                    Evaluate][Global`x], 1}/((Global`x + 
                    CalculateScan`PlotterScanner`Private`px$) 
                    CompiledFunction[{8, 8., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    7}}, {{0.25, {3, 0, 8}}, {2, {2, 0, 0}}, {
                    0.5, {3, 0, 5}}}, {0, 1, 10, 0, 
                    0}, {{10, 0, 1}, {16, 1, 0, 1}, {40, 34, 3, 0, 1, 3, 0, 
                    2}, {40, 2, 3, 0, 1, 3, 0, 3}, {40, 1, 3, 0, 1, 3, 0, 
                    4}, {19, 3, 6}, {13, 6, 4, 6}, {16, 5, 2, 6, 7}, {10, 0, 
                    6}, {16, 6, 3, 6}, {10, 0, 9}, {16, 9, 4, 9}, {13, 6, 9, 
                    6}, {16, 8, 2, 6, 9}, {13, 7, 9, 7}, {1}}, 
                    Function[{Global`x}, 
                    
                    Block[{Compile`$806, Compile`$809, Compile`$921, 
                    Compile`$928}, Compile`$806 = 2 Global`x; 
                    Compile`$809 = E^Compile`$806; 
                    Compile`$921 = Cos[Compile`$806]; 
                    Compile`$928 = Sin[Compile`$806]; (
                    Compile`$809 (-Compile`$921 + Compile`$928))/
                    2 + (Compile`$809 (2 Compile`$921 + 2 Compile`$928))/4]], 
                    Evaluate][Global`x] - 
                    1 (CompiledFunction[{8, 8., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    4}}, {{0.25, {3, 0, 2}}, {2, {2, 0, 0}}}, {0, 1, 6, 0, 
                    0}, {{10, 0, 1}, {16, 1, 0, 1}, {40, 34, 3, 0, 1, 3, 0, 
                    3}, {40, 2, 3, 0, 1, 3, 0, 4}, {19, 4, 5}, {40, 1, 3, 0, 
                    1, 3, 0, 4}, {13, 5, 4, 5}, {16, 2, 3, 5, 4}, {1}}, 
                    Function[{Global`x}, 
                    
                    Block[{Compile`$673}, 
                    Compile`$673 = 2 Global`x; (
                    E^Compile`$673 (-Cos[Compile`$673] + Sin[Compile`$673]))/
                    4]], Evaluate][Global`x] + 
                    CalculateScan`PlotterScanner`Private`py$)), {
                    Global`x, Min[CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$] - 
                    CalculateScan`PlotterScanner`Private`\[CapitalDelta]X$/2, 
                    Max[CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$] + 
                    CalculateScan`PlotterScanner`Private`\[CapitalDelta]X$/2},
                     PlotStyle -> Directive[
                    Opacity[
                    CalculateScan`PlotterScanner`Private`dualCurveOpacity$$], 
                    CalculateScan`PlotterScanner`Private`dualCurveColor$$, 
                    Thickness[
                    10^CalculateScan`PlotterScanner`Private`\
dualCurveThickness$$]], PlotRange -> 
                    CalculateScan`PlotterScanner`Private`pRY$, Evaluated -> 
                    False, Exclusions -> {(Global`x + 
                    CalculateScan`PlotterScanner`Private`px$) 
                    CompiledFunction[{8, 8., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    7}}, {{0.25, {3, 0, 8}}, {2, {2, 0, 0}}, {
                    0.5, {3, 0, 5}}}, {0, 1, 10, 0, 
                    0}, {{10, 0, 1}, {16, 1, 0, 1}, {40, 34, 3, 0, 1, 3, 0, 
                    2}, {40, 2, 3, 0, 1, 3, 0, 3}, {40, 1, 3, 0, 1, 3, 0, 
                    4}, {19, 3, 6}, {13, 6, 4, 6}, {16, 5, 2, 6, 7}, {10, 0, 
                    6}, {16, 6, 3, 6}, {10, 0, 9}, {16, 9, 4, 9}, {13, 6, 9, 
                    6}, {16, 8, 2, 6, 9}, {13, 7, 9, 7}, {1}}, 
                    Function[{Global`x}, 
                    
                    Block[{Compile`$806, Compile`$809, Compile`$921, 
                    Compile`$928}, Compile`$806 = 2 Global`x; 
                    Compile`$809 = E^Compile`$806; 
                    Compile`$921 = Cos[Compile`$806]; 
                    Compile`$928 = Sin[Compile`$806]; (
                    Compile`$809 (-Compile`$921 + Compile`$928))/
                    2 + (Compile`$809 (2 Compile`$921 + 2 Compile`$928))/4]], 
                    Evaluate][Global`x] - 
                    1 (CompiledFunction[{8, 8., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    4}}, {{0.25, {3, 0, 2}}, {2, {2, 0, 0}}}, {0, 1, 6, 0, 
                    0}, {{10, 0, 1}, {16, 1, 0, 1}, {40, 34, 3, 0, 1, 3, 0, 
                    3}, {40, 2, 3, 0, 1, 3, 0, 4}, {19, 4, 5}, {40, 1, 3, 0, 
                    1, 3, 0, 4}, {13, 5, 4, 5}, {16, 2, 3, 5, 4}, {1}}, 
                    Function[{Global`x}, 
                    
                    Block[{Compile`$673}, 
                    Compile`$673 = 2 Global`x; (
                    E^Compile`$673 (-Cos[Compile`$673] + Sin[Compile`$673]))/
                    4]], Evaluate][Global`x] + 
                    CalculateScan`PlotterScanner`Private`py$) == 0}]], {
                    CalculateScan`PlotterScanner`Private`px, 
                    CalculateScan`PlotterScanner`Private`xL$, 
                    CalculateScan`PlotterScanner`Private`xU$, (
                    CalculateScan`PlotterScanner`Private`xU$ - 
                    CalculateScan`PlotterScanner`Private`xL$)/
                    CalculateScan`PlotterScanner`Private`dualCurveCount$}, {
                    CalculateScan`PlotterScanner`Private`py, 
                    CalculateScan`PlotterScanner`Private`yL$, 
                    CalculateScan`PlotterScanner`Private`yU$, (
                    CalculateScan`PlotterScanner`Private`yU$ - 
                    CalculateScan`PlotterScanner`Private`yL$)/
                    CalculateScan`PlotterScanner`Private`dualCurveCount$}], 
                    Table[
                    
                    With[{CalculateScan`PlotterScanner`Private`px$ = 
                    CalculateScan`PlotterScanner`Private`px, 
                    CalculateScan`PlotterScanner`Private`py$ = 
                    CompiledFunction[{8, 8., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    4}}, {{0.25, {3, 0, 2}}, {2, {2, 0, 0}}}, {0, 1, 6, 0, 
                    0}, {{10, 0, 1}, {16, 1, 0, 1}, {40, 34, 3, 0, 1, 3, 0, 
                    3}, {40, 2, 3, 0, 1, 3, 0, 4}, {19, 4, 5}, {40, 1, 3, 0, 
                    1, 3, 0, 4}, {13, 5, 4, 5}, {16, 2, 3, 5, 4}, {1}}, 
                    Function[{Global`x}, 
                    
                    Block[{Compile`$673}, 
                    Compile`$673 = 2 Global`x; (
                    E^Compile`$673 (-Cos[Compile`$673] + Sin[Compile`$673]))/
                    4]], Evaluate][CalculateScan`PlotterScanner`Private`px]}, 
                    
                    ParametricPlot[{-CompiledFunction[{8, 8., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    7}}, {{0.25, {3, 0, 8}}, {2, {2, 0, 0}}, {
                    0.5, {3, 0, 5}}}, {0, 1, 10, 0, 
                    0}, {{10, 0, 1}, {16, 1, 0, 1}, {40, 34, 3, 0, 1, 3, 0, 
                    2}, {40, 2, 3, 0, 1, 3, 0, 3}, {40, 1, 3, 0, 1, 3, 0, 
                    4}, {19, 3, 6}, {13, 6, 4, 6}, {16, 5, 2, 6, 7}, {10, 0, 
                    6}, {16, 6, 3, 6}, {10, 0, 9}, {16, 9, 4, 9}, {13, 6, 9, 
                    6}, {16, 8, 2, 6, 9}, {13, 7, 9, 7}, {1}}, 
                    Function[{Global`x}, 
                    
                    Block[{Compile`$806, Compile`$809, Compile`$921, 
                    Compile`$928}, Compile`$806 = 2 Global`x; 
                    Compile`$809 = E^Compile`$806; 
                    Compile`$921 = Cos[Compile`$806]; 
                    Compile`$928 = Sin[Compile`$806]; (
                    Compile`$809 (-Compile`$921 + Compile`$928))/
                    2 + (Compile`$809 (2 Compile`$921 + 2 Compile`$928))/4]], 
                    Evaluate][Global`x], 1}/((Global`x + 
                    CalculateScan`PlotterScanner`Private`px$) 
                    CompiledFunction[{8, 8., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    7}}, {{0.25, {3, 0, 8}}, {2, {2, 0, 0}}, {
                    0.5, {3, 0, 5}}}, {0, 1, 10, 0, 
                    0}, {{10, 0, 1}, {16, 1, 0, 1}, {40, 34, 3, 0, 1, 3, 0, 
                    2}, {40, 2, 3, 0, 1, 3, 0, 3}, {40, 1, 3, 0, 1, 3, 0, 
                    4}, {19, 3, 6}, {13, 6, 4, 6}, {16, 5, 2, 6, 7}, {10, 0, 
                    6}, {16, 6, 3, 6}, {10, 0, 9}, {16, 9, 4, 9}, {13, 6, 9, 
                    6}, {16, 8, 2, 6, 9}, {13, 7, 9, 7}, {1}}, 
                    Function[{Global`x}, 
                    
                    Block[{Compile`$806, Compile`$809, Compile`$921, 
                    Compile`$928}, Compile`$806 = 2 Global`x; 
                    Compile`$809 = E^Compile`$806; 
                    Compile`$921 = Cos[Compile`$806]; 
                    Compile`$928 = Sin[Compile`$806]; (
                    Compile`$809 (-Compile`$921 + Compile`$928))/
                    2 + (Compile`$809 (2 Compile`$921 + 2 Compile`$928))/4]], 
                    Evaluate][Global`x] - 
                    1 (CompiledFunction[{8, 8., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    4}}, {{0.25, {3, 0, 2}}, {2, {2, 0, 0}}}, {0, 1, 6, 0, 
                    0}, {{10, 0, 1}, {16, 1, 0, 1}, {40, 34, 3, 0, 1, 3, 0, 
                    3}, {40, 2, 3, 0, 1, 3, 0, 4}, {19, 4, 5}, {40, 1, 3, 0, 
                    1, 3, 0, 4}, {13, 5, 4, 5}, {16, 2, 3, 5, 4}, {1}}, 
                    Function[{Global`x}, 
                    
                    Block[{Compile`$673}, 
                    Compile`$673 = 2 Global`x; (
                    E^Compile`$673 (-Cos[Compile`$673] + Sin[Compile`$673]))/
                    4]], Evaluate][Global`x] + 
                    CalculateScan`PlotterScanner`Private`py$)), {
                    Global`x, Min[CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$] - 
                    CalculateScan`PlotterScanner`Private`\[CapitalDelta]X$/2, 
                    Max[CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$] + 
                    CalculateScan`PlotterScanner`Private`\[CapitalDelta]X$/2},
                     PlotStyle -> Directive[
                    Opacity[
                    CalculateScan`PlotterScanner`Private`dualCurveOpacity$$], 
                    CalculateScan`PlotterScanner`Private`dualCurveColor$$, 
                    Thickness[
                    10^CalculateScan`PlotterScanner`Private`\
dualCurveThickness$$]], PlotRange -> 
                    CalculateScan`PlotterScanner`Private`pRY$, Evaluated -> 
                    False, Exclusions -> {(Global`x + 
                    CalculateScan`PlotterScanner`Private`px$) 
                    CompiledFunction[{8, 8., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    7}}, {{0.25, {3, 0, 8}}, {2, {2, 0, 0}}, {
                    0.5, {3, 0, 5}}}, {0, 1, 10, 0, 
                    0}, {{10, 0, 1}, {16, 1, 0, 1}, {40, 34, 3, 0, 1, 3, 0, 
                    2}, {40, 2, 3, 0, 1, 3, 0, 3}, {40, 1, 3, 0, 1, 3, 0, 
                    4}, {19, 3, 6}, {13, 6, 4, 6}, {16, 5, 2, 6, 7}, {10, 0, 
                    6}, {16, 6, 3, 6}, {10, 0, 9}, {16, 9, 4, 9}, {13, 6, 9, 
                    6}, {16, 8, 2, 6, 9}, {13, 7, 9, 7}, {1}}, 
                    Function[{Global`x}, 
                    
                    Block[{Compile`$806, Compile`$809, Compile`$921, 
                    Compile`$928}, Compile`$806 = 2 Global`x; 
                    Compile`$809 = E^Compile`$806; 
                    Compile`$921 = Cos[Compile`$806]; 
                    Compile`$928 = Sin[Compile`$806]; (
                    Compile`$809 (-Compile`$921 + Compile`$928))/
                    2 + (Compile`$809 (2 Compile`$921 + 2 Compile`$928))/4]], 
                    Evaluate][Global`x] - 
                    1 (CompiledFunction[{8, 8., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    4}}, {{0.25, {3, 0, 2}}, {2, {2, 0, 0}}}, {0, 1, 6, 0, 
                    0}, {{10, 0, 1}, {16, 1, 0, 1}, {40, 34, 3, 0, 1, 3, 0, 
                    3}, {40, 2, 3, 0, 1, 3, 0, 4}, {19, 4, 5}, {40, 1, 3, 0, 
                    1, 3, 0, 4}, {13, 5, 4, 5}, {16, 2, 3, 5, 4}, {1}}, 
                    Function[{Global`x}, 
                    
                    Block[{Compile`$673}, 
                    Compile`$673 = 2 Global`x; (
                    E^Compile`$673 (-Cos[Compile`$673] + Sin[Compile`$673]))/
                    4]], Evaluate][Global`x] + 
                    CalculateScan`PlotterScanner`Private`py$) == 0}]], {
                    CalculateScan`PlotterScanner`Private`px, 
                    CalculateScan`PlotterScanner`Private`xL$, 
                    CalculateScan`PlotterScanner`Private`xU$, (
                    CalculateScan`PlotterScanner`Private`xU$ - 
                    CalculateScan`PlotterScanner`Private`xL$)/
                    CalculateScan`PlotterScanner`Private`dualCurveCount$}]]]],\
 {}]; CalculateScan`PlotterScanner`Private`dualCurveLastParamaters$$ = {{
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$}, 
                    CalculateScan`PlotterScanner`Private`dualCurveCountFactor$\
$, CalculateScan`PlotterScanner`Private`dualCurvePoints}]; 
                    CalculateScan`PlotterScanner`Private`dualCurvePlot = 
                    Graphics[{
                    Directive[
                    Opacity[
                    CalculateScan`PlotterScanner`Private`dualCurveOpacity$$], 
                    CalculateScan`PlotterScanner`Private`dualCurveColor$$, 
                    Thickness[
                    10^CalculateScan`PlotterScanner`Private`\
dualCurveThickness$$]], 
                    If[
                    CalculateScan`PlotterScanner`Private`dualCurveTF$$, 
                    
                    CalculateScan`PlotterScanner`Private`dualCurvePlotCurves$$\
, {}]}]; If[
                    And[
                    CalculateScan`PlotterScanner`Private`inverseCurveTF$$, 
                    CalculateScan`PlotterScanner`Private`\
inverseLastParamaters$$ =!= {{
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$}, 
                    CalculateScan`PlotterScanner`Private`\
inverseCurveCountFactor$$, 
                    CalculateScan`PlotterScanner`Private`inverseCurvePoints$$,
                     CalculateScan`PlotterScanner`Private`\
inverseCurveCountFactor$$, 
                    CalculateScan`PlotterScanner`Private`\
inverseCurveCircleRadiusFactor$$}], 
                    If[CalculateScan`PlotterScanner`Private`inverseCurveTF$$, 
                    CalculateScan`PlotterScanner`Private`\
inverseCurvePlotCurves$$ = (Cases[
                    Normal[#], 
                    Blank[Line], {0, Infinity}]& )[
                    
                    With[{CalculateScan`PlotterScanner`Private`\
inverseCurveCount$ = 
                    If[CalculateScan`PlotterScanner`Private`\
inverseCurvePoints$$ === "grid", 
                    Max[1, 
                    Round[
                    16 CalculateScan`PlotterScanner`Private`\
inverseCurveCountFactor$$]], 
                    Max[1, 
                    Round[
                    120 CalculateScan`PlotterScanner`Private`\
inverseCurveCountFactor$$]]], CalculateScan`PlotterScanner`Private`R$ = 
                    Function[{CalculateScan`PlotterScanner`Private`y, 
                    CalculateScan`PlotterScanner`Private`L}, (
                    Sign[CalculateScan`PlotterScanner`Private`y] 
                    CalculateScan`PlotterScanner`Private`L) Tan[
                    Abs[CalculateScan`PlotterScanner`Private`y]]^1][
                    CalculateScan`PlotterScanner`Private`\
inverseCurveCircleRadiusFactor$$, 1] 
                    Abs[CalculateScan`PlotterScanner`Private`X2$ - 
                    CalculateScan`PlotterScanner`Private`X1$]}, 
                    If[
                    CalculateScan`PlotterScanner`Private`inverseCurvePoints$$ === 
                    "grid", 
                    Table[
                    
                    With[{CalculateScan`PlotterScanner`Private`px$ = 
                    CalculateScan`PlotterScanner`Private`px, 
                    CalculateScan`PlotterScanner`Private`py$ = 
                    CalculateScan`PlotterScanner`Private`py}, 
                    
                    ParametricPlot[{
                    CalculateScan`PlotterScanner`Private`px$, 
                    CalculateScan`PlotterScanner`Private`py$} + (
                    CalculateScan`PlotterScanner`Private`R$^2 {
                    Global`x - CalculateScan`PlotterScanner`Private`px$, 
                    CompiledFunction[{8, 8., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    4}}, {{0.25, {3, 0, 2}}, {2, {2, 0, 0}}}, {0, 1, 6, 0, 
                    0}, {{10, 0, 1}, {16, 1, 0, 1}, {40, 34, 3, 0, 1, 3, 0, 
                    3}, {40, 2, 3, 0, 1, 3, 0, 4}, {19, 4, 5}, {40, 1, 3, 0, 
                    1, 3, 0, 4}, {13, 5, 4, 5}, {16, 2, 3, 5, 4}, {1}}, 
                    Function[{Global`x}, 
                    
                    Block[{Compile`$673}, 
                    Compile`$673 = 2 Global`x; (
                    E^Compile`$673 (-Cos[Compile`$673] + Sin[Compile`$673]))/
                    4]], Evaluate][Global`x] - 
                    CalculateScan`PlotterScanner`Private`py$})/((Global`x - 
                    CalculateScan`PlotterScanner`Private`px$)^2 + (
                    CompiledFunction[{8, 8., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    4}}, {{0.25, {3, 0, 2}}, {2, {2, 0, 0}}}, {0, 1, 6, 0, 
                    0}, {{10, 0, 1}, {16, 1, 0, 1}, {40, 34, 3, 0, 1, 3, 0, 
                    3}, {40, 2, 3, 0, 1, 3, 0, 4}, {19, 4, 5}, {40, 1, 3, 0, 
                    1, 3, 0, 4}, {13, 5, 4, 5}, {16, 2, 3, 5, 4}, {1}}, 
                    Function[{Global`x}, 
                    
                    Block[{Compile`$673}, 
                    Compile`$673 = 2 Global`x; (
                    E^Compile`$673 (-Cos[Compile`$673] + Sin[Compile`$673]))/
                    4]], Evaluate][Global`x] - 
                    CalculateScan`PlotterScanner`Private`py$)^2), {
                    Global`x, Min[CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$] - 
                    CalculateScan`PlotterScanner`Private`\[CapitalDelta]X$/2, 
                    Max[CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$] + 
                    CalculateScan`PlotterScanner`Private`\[CapitalDelta]X$/2},
                     PlotRange -> CalculateScan`PlotterScanner`Private`pRY$, 
                    Evaluated -> False]], {
                    CalculateScan`PlotterScanner`Private`px, 
                    CalculateScan`PlotterScanner`Private`xL$, 
                    CalculateScan`PlotterScanner`Private`xU$, (
                    CalculateScan`PlotterScanner`Private`xU$ - 
                    CalculateScan`PlotterScanner`Private`xL$)/
                    CalculateScan`PlotterScanner`Private`inverseCurveCount$}, \
{CalculateScan`PlotterScanner`Private`py, 
                    CalculateScan`PlotterScanner`Private`yL$, 
                    CalculateScan`PlotterScanner`Private`yU$, (
                    CalculateScan`PlotterScanner`Private`yU$ - 
                    CalculateScan`PlotterScanner`Private`yL$)/
                    CalculateScan`PlotterScanner`Private`inverseCurveCount$}], 
                    Table[
                    
                    With[{CalculateScan`PlotterScanner`Private`px$ = 
                    CalculateScan`PlotterScanner`Private`px, 
                    CalculateScan`PlotterScanner`Private`py$ = 
                    CompiledFunction[{8, 8., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    4}}, {{0.25, {3, 0, 2}}, {2, {2, 0, 0}}}, {0, 1, 6, 0, 
                    0}, {{10, 0, 1}, {16, 1, 0, 1}, {40, 34, 3, 0, 1, 3, 0, 
                    3}, {40, 2, 3, 0, 1, 3, 0, 4}, {19, 4, 5}, {40, 1, 3, 0, 
                    1, 3, 0, 4}, {13, 5, 4, 5}, {16, 2, 3, 5, 4}, {1}}, 
                    Function[{Global`x}, 
                    
                    Block[{Compile`$673}, 
                    Compile`$673 = 2 Global`x; (
                    E^Compile`$673 (-Cos[Compile`$673] + Sin[Compile`$673]))/
                    4]], Evaluate][CalculateScan`PlotterScanner`Private`px]}, 
                    
                    
                    ParametricPlot[{
                    CalculateScan`PlotterScanner`Private`px$, 
                    CalculateScan`PlotterScanner`Private`py$} + (
                    CalculateScan`PlotterScanner`Private`R$^2 {
                    Global`x - CalculateScan`PlotterScanner`Private`px$, 
                    CompiledFunction[{8, 8., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    4}}, {{0.25, {3, 0, 2}}, {2, {2, 0, 0}}}, {0, 1, 6, 0, 
                    0}, {{10, 0, 1}, {16, 1, 0, 1}, {40, 34, 3, 0, 1, 3, 0, 
                    3}, {40, 2, 3, 0, 1, 3, 0, 4}, {19, 4, 5}, {40, 1, 3, 0, 
                    1, 3, 0, 4}, {13, 5, 4, 5}, {16, 2, 3, 5, 4}, {1}}, 
                    Function[{Global`x}, 
                    
                    Block[{Compile`$673}, 
                    Compile`$673 = 2 Global`x; (
                    E^Compile`$673 (-Cos[Compile`$673] + Sin[Compile`$673]))/
                    4]], Evaluate][Global`x] - 
                    CalculateScan`PlotterScanner`Private`py$})/((Global`x - 
                    CalculateScan`PlotterScanner`Private`px$)^2 + (
                    CompiledFunction[{8, 8., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    4}}, {{0.25, {3, 0, 2}}, {2, {2, 0, 0}}}, {0, 1, 6, 0, 
                    0}, {{10, 0, 1}, {16, 1, 0, 1}, {40, 34, 3, 0, 1, 3, 0, 
                    3}, {40, 2, 3, 0, 1, 3, 0, 4}, {19, 4, 5}, {40, 1, 3, 0, 
                    1, 3, 0, 4}, {13, 5, 4, 5}, {16, 2, 3, 5, 4}, {1}}, 
                    Function[{Global`x}, 
                    
                    Block[{Compile`$673}, 
                    Compile`$673 = 2 Global`x; (
                    E^Compile`$673 (-Cos[Compile`$673] + Sin[Compile`$673]))/
                    4]], Evaluate][Global`x] - 
                    CalculateScan`PlotterScanner`Private`py$)^2), {
                    Global`x, Min[CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$] - 
                    CalculateScan`PlotterScanner`Private`\[CapitalDelta]X$/2, 
                    Max[CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$] + 
                    CalculateScan`PlotterScanner`Private`\[CapitalDelta]X$/2},
                     PlotRange -> CalculateScan`PlotterScanner`Private`pRY$, 
                    Evaluated -> False]], {
                    CalculateScan`PlotterScanner`Private`px, 
                    CalculateScan`PlotterScanner`Private`xL$, 
                    CalculateScan`PlotterScanner`Private`xU$, (
                    CalculateScan`PlotterScanner`Private`xU$ - 
                    CalculateScan`PlotterScanner`Private`xL$)/
                    CalculateScan`PlotterScanner`Private`inverseCurveCount$}]]\
]], {}]; CalculateScan`PlotterScanner`Private`inverseLastParamaters$$ = {{
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$}, 
                    CalculateScan`PlotterScanner`Private`\
inverseCurveCountFactor$$, 
                    CalculateScan`PlotterScanner`Private`inverseCurvePoints$$,
                     CalculateScan`PlotterScanner`Private`\
inverseCurveCountFactor$$, 
                    CalculateScan`PlotterScanner`Private`\
inverseCurveCircleRadiusFactor$$}]; 
                    CalculateScan`PlotterScanner`Private`inverseCurvePlot = 
                    Graphics[{
                    Directive[
                    Opacity[
                    CalculateScan`PlotterScanner`Private`inverseCurveOpacity$$\
], CalculateScan`PlotterScanner`Private`inverseCurveColor$$, 
                    Thickness[
                    10^CalculateScan`PlotterScanner`Private`\
inverseCurveThickness$$]], 
                    If[
                    CalculateScan`PlotterScanner`Private`inverseCurveTF$$, 
                    CalculateScan`PlotterScanner`Private`\
inverseCurvePlotCurves$$, {}]}]; If[
                    And[
                    CalculateScan`PlotterScanner`Private`orthotomicCurveTF$$, 
                    CalculateScan`PlotterScanner`Private`\
orthotomicLastParamaters$$ =!= {{
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$}, 
                    CalculateScan`PlotterScanner`Private`\
orthotomicCurveCountFactor$$, 
                    CalculateScan`PlotterScanner`Private`\
orthotomicCurvePoints$$}], 
                    If[CalculateScan`PlotterScanner`Private`orthotomicCurveTF$\
$, CalculateScan`PlotterScanner`Private`orthotomicCurvePlotCurves$$ = (Cases[
                    Normal[#], 
                    Blank[Line], {0, Infinity}]& )[
                    
                    With[{CalculateScan`PlotterScanner`Private`\
orthotomicCurveCount$ = 
                    If[CalculateScan`PlotterScanner`Private`\
orthotomicCurvePoints$$ === "grid", 
                    Max[1, 
                    Round[
                    16 CalculateScan`PlotterScanner`Private`\
orthotomicCurveCountFactor$$]], 
                    Max[1, 
                    Round[
                    120 CalculateScan`PlotterScanner`Private`\
orthotomicCurveCountFactor$$]]]}, 
                    If[
                    CalculateScan`PlotterScanner`Private`\
orthotomicCurvePoints$$ === "grid", 
                    Table[
                    
                    With[{CalculateScan`PlotterScanner`Private`px$ = 
                    CalculateScan`PlotterScanner`Private`px, 
                    CalculateScan`PlotterScanner`Private`py$ = 
                    CalculateScan`PlotterScanner`Private`py}, 
                    ParametricPlot[{Global`x, 
                    CompiledFunction[{8, 8., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    4}}, {{0.25, {3, 0, 2}}, {2, {2, 0, 0}}}, {0, 1, 6, 0, 
                    0}, {{10, 0, 1}, {16, 1, 0, 1}, {40, 34, 3, 0, 1, 3, 0, 
                    3}, {40, 2, 3, 0, 1, 3, 0, 4}, {19, 4, 5}, {40, 1, 3, 0, 
                    1, 3, 0, 4}, {13, 5, 4, 5}, {16, 2, 3, 5, 4}, {1}}, 
                    Function[{Global`x}, 
                    
                    Block[{Compile`$673}, 
                    Compile`$673 = 2 Global`x; (
                    E^Compile`$673 (-Cos[Compile`$673] + Sin[Compile`$673]))/
                    4]], Evaluate][
                    Global`x]} + {((-2) CompiledFunction[{8, 8., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    7}}, {{0.25, {3, 0, 8}}, {2, {2, 0, 0}}, {
                    0.5, {3, 0, 5}}}, {0, 1, 10, 0, 
                    0}, {{10, 0, 1}, {16, 1, 0, 1}, {40, 34, 3, 0, 1, 3, 0, 
                    2}, {40, 2, 3, 0, 1, 3, 0, 3}, {40, 1, 3, 0, 1, 3, 0, 
                    4}, {19, 3, 6}, {13, 6, 4, 6}, {16, 5, 2, 6, 7}, {10, 0, 
                    6}, {16, 6, 3, 6}, {10, 0, 9}, {16, 9, 4, 9}, {13, 6, 9, 
                    6}, {16, 8, 2, 6, 9}, {13, 7, 9, 7}, {1}}, 
                    Function[{Global`x}, 
                    
                    Block[{Compile`$806, Compile`$809, Compile`$921, 
                    Compile`$928}, Compile`$806 = 2 Global`x; 
                    Compile`$809 = E^Compile`$806; 
                    Compile`$921 = Cos[Compile`$806]; 
                    Compile`$928 = Sin[Compile`$806]; (
                    Compile`$809 (-Compile`$921 + Compile`$928))/
                    2 + (Compile`$809 (2 Compile`$921 + 2 Compile`$928))/4]], 
                    Evaluate][Global`x]) (
                    1 (CompiledFunction[{8, 8., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    4}}, {{0.25, {3, 0, 2}}, {2, {2, 0, 0}}}, {0, 1, 6, 0, 
                    0}, {{10, 0, 1}, {16, 1, 0, 1}, {40, 34, 3, 0, 1, 3, 0, 
                    3}, {40, 2, 3, 0, 1, 3, 0, 4}, {19, 4, 5}, {40, 1, 3, 0, 
                    1, 3, 0, 4}, {13, 5, 4, 5}, {16, 2, 3, 5, 4}, {1}}, 
                    Function[{Global`x}, 
                    
                    Block[{Compile`$673}, Compile`$673 = 
                    2 Global`x; (E^Compile`$673 (-Cos[Compile`$673] + 
                    Sin[Compile`$673]))/4]], Evaluate][Global`x] - 
                    CalculateScan`PlotterScanner`Private`py$) - 
                    CompiledFunction[{8, 8., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    7}}, {{0.25, {3, 0, 8}}, {2, {2, 0, 0}}, {
                    0.5, {3, 0, 5}}}, {0, 1, 10, 0, 
                    0}, {{10, 0, 1}, {16, 1, 0, 1}, {40, 34, 3, 0, 1, 3, 0, 
                    2}, {40, 2, 3, 0, 1, 3, 0, 3}, {40, 1, 3, 0, 1, 3, 0, 
                    4}, {19, 3, 6}, {13, 6, 4, 6}, {16, 5, 2, 6, 7}, {10, 0, 
                    6}, {16, 6, 3, 6}, {10, 0, 9}, {16, 9, 4, 9}, {13, 6, 9, 
                    6}, {16, 8, 2, 6, 9}, {13, 7, 9, 7}, {1}}, 
                    Function[{Global`x}, 
                    
                    Block[{Compile`$806, Compile`$809, Compile`$921, 
                    Compile`$928}, Compile`$806 = 2 Global`x; 
                    Compile`$809 = E^Compile`$806; 
                    Compile`$921 = Cos[Compile`$806]; 
                    Compile`$928 = Sin[Compile`$806]; (
                    Compile`$809 (-Compile`$921 + Compile`$928))/
                    2 + (Compile`$809 (2 Compile`$921 + 2 Compile`$928))/4]], 
                    Evaluate][Global`x] (Global`x - 
                    CalculateScan`PlotterScanner`Private`px$)), (2 1) (
                    1 (CompiledFunction[{8, 8., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    4}}, {{0.25, {3, 0, 2}}, {2, {2, 0, 0}}}, {0, 1, 6, 0, 
                    0}, {{10, 0, 1}, {16, 1, 0, 1}, {40, 34, 3, 0, 1, 3, 0, 
                    3}, {40, 2, 3, 0, 1, 3, 0, 4}, {19, 4, 5}, {40, 1, 3, 0, 
                    1, 3, 0, 4}, {13, 5, 4, 5}, {16, 2, 3, 5, 4}, {1}}, 
                    Function[{Global`x}, 
                    
                    Block[{Compile`$673}, Compile`$673 = 
                    2 Global`x; (E^Compile`$673 (-Cos[Compile`$673] + 
                    Sin[Compile`$673]))/4]], Evaluate][Global`x] - 
                    CalculateScan`PlotterScanner`Private`py$) - 
                    CompiledFunction[{8, 8., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    7}}, {{0.25, {3, 0, 8}}, {2, {2, 0, 0}}, {
                    0.5, {3, 0, 5}}}, {0, 1, 10, 0, 
                    0}, {{10, 0, 1}, {16, 1, 0, 1}, {40, 34, 3, 0, 1, 3, 0, 
                    2}, {40, 2, 3, 0, 1, 3, 0, 3}, {40, 1, 3, 0, 1, 3, 0, 
                    4}, {19, 3, 6}, {13, 6, 4, 6}, {16, 5, 2, 6, 7}, {10, 0, 
                    6}, {16, 6, 3, 6}, {10, 0, 9}, {16, 9, 4, 9}, {13, 6, 9, 
                    6}, {16, 8, 2, 6, 9}, {13, 7, 9, 7}, {1}}, 
                    Function[{Global`x}, 
                    Block[{Compile`$806, Compile`$809, Compile`$921, 
                    Compile`$928}, Compile`$806 = 2 Global`x; 
                    Compile`$809 = E^Compile`$806; 
                    Compile`$921 = Cos[Compile`$806]; 
                    Compile`$928 = Sin[Compile`$806]; (
                    Compile`$809 (-Compile`$921 + Compile`$928))/
                    2 + (Compile`$809 (2 Compile`$921 + 2 Compile`$928))/4]], 
                    Evaluate][Global`x] (Global`x - 
                    CalculateScan`PlotterScanner`Private`px$))}/(1 + 
                    CompiledFunction[{8, 8., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    7}}, {{0.25, {3, 0, 8}}, {2, {2, 0, 0}}, {
                    0.5, {3, 0, 5}}}, {0, 1, 10, 0, 
                    0}, {{10, 0, 1}, {16, 1, 0, 1}, {40, 34, 3, 0, 1, 3, 0, 
                    2}, {40, 2, 3, 0, 1, 3, 0, 3}, {40, 1, 3, 0, 1, 3, 0, 
                    4}, {19, 3, 6}, {13, 6, 4, 6}, {16, 5, 2, 6, 7}, {10, 0, 
                    6}, {16, 6, 3, 6}, {10, 0, 9}, {16, 9, 4, 9}, {13, 6, 9, 
                    6}, {16, 8, 2, 6, 9}, {13, 7, 9, 7}, {1}}, 
                    Function[{Global`x}, 
                    
                    Block[{Compile`$806, Compile`$809, Compile`$921, 
                    Compile`$928}, Compile`$806 = 2 Global`x; 
                    Compile`$809 = E^Compile`$806; 
                    Compile`$921 = Cos[Compile`$806]; 
                    Compile`$928 = Sin[Compile`$806]; (
                    Compile`$809 (-Compile`$921 + Compile`$928))/
                    2 + (Compile`$809 (2 Compile`$921 + 2 Compile`$928))/4]], 
                    Evaluate][Global`x]^2), {
                    Global`x, CalculateScan`PlotterScanner`Private`xL$, 
                    CalculateScan`PlotterScanner`Private`xU$}, 
                    PlotRange -> {
                    CalculateScan`PlotterScanner`Private`pRX$, 
                    CalculateScan`PlotterScanner`Private`pRY$}, Evaluated -> 
                    False]], {CalculateScan`PlotterScanner`Private`px, 
                    CalculateScan`PlotterScanner`Private`xL$, 
                    CalculateScan`PlotterScanner`Private`xU$, (
                    CalculateScan`PlotterScanner`Private`xU$ - 
                    CalculateScan`PlotterScanner`Private`xL$)/
                    CalculateScan`PlotterScanner`Private`orthotomicCurveCount$\
}, {CalculateScan`PlotterScanner`Private`py, 
                    CalculateScan`PlotterScanner`Private`yL$, 
                    CalculateScan`PlotterScanner`Private`yU$, (
                    CalculateScan`PlotterScanner`Private`yU$ - 
                    CalculateScan`PlotterScanner`Private`yL$)/
                    
                    CalculateScan`PlotterScanner`Private`orthotomicCurveCount$\
}], 
                    Table[
                    
                    With[{CalculateScan`PlotterScanner`Private`px$ = 
                    CalculateScan`PlotterScanner`Private`px, 
                    CalculateScan`PlotterScanner`Private`py$ = 
                    CompiledFunction[{8, 8., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    4}}, {{0.25, {3, 0, 2}}, {2, {2, 0, 0}}}, {0, 1, 6, 0, 
                    0}, {{10, 0, 1}, {16, 1, 0, 1}, {40, 34, 3, 0, 1, 3, 0, 
                    3}, {40, 2, 3, 0, 1, 3, 0, 4}, {19, 4, 5}, {40, 1, 3, 0, 
                    1, 3, 0, 4}, {13, 5, 4, 5}, {16, 2, 3, 5, 4}, {1}}, 
                    Function[{Global`x}, 
                    
                    Block[{Compile`$673}, 
                    Compile`$673 = 2 Global`x; (
                    E^Compile`$673 (-Cos[Compile`$673] + Sin[Compile`$673]))/
                    4]], Evaluate][Global`x]}, 
                    ParametricPlot[{Global`x, 
                    CompiledFunction[{8, 8., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    4}}, {{0.25, {3, 0, 2}}, {2, {2, 0, 0}}}, {0, 1, 6, 0, 
                    0}, {{10, 0, 1}, {16, 1, 0, 1}, {40, 34, 3, 0, 1, 3, 0, 
                    3}, {40, 2, 3, 0, 1, 3, 0, 4}, {19, 4, 5}, {40, 1, 3, 0, 
                    1, 3, 0, 4}, {13, 5, 4, 5}, {16, 2, 3, 5, 4}, {1}}, 
                    Function[{Global`x}, 
                    
                    Block[{Compile`$673}, 
                    Compile`$673 = 2 Global`x; (
                    E^Compile`$673 (-Cos[Compile`$673] + Sin[Compile`$673]))/
                    4]], Evaluate][
                    Global`x]} + {((-2) CompiledFunction[{8, 8., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    7}}, {{0.25, {3, 0, 8}}, {2, {2, 0, 0}}, {
                    0.5, {3, 0, 5}}}, {0, 1, 10, 0, 
                    0}, {{10, 0, 1}, {16, 1, 0, 1}, {40, 34, 3, 0, 1, 3, 0, 
                    2}, {40, 2, 3, 0, 1, 3, 0, 3}, {40, 1, 3, 0, 1, 3, 0, 
                    4}, {19, 3, 6}, {13, 6, 4, 6}, {16, 5, 2, 6, 7}, {10, 0, 
                    6}, {16, 6, 3, 6}, {10, 0, 9}, {16, 9, 4, 9}, {13, 6, 9, 
                    6}, {16, 8, 2, 6, 9}, {13, 7, 9, 7}, {1}}, 
                    Function[{Global`x}, 
                    
                    Block[{Compile`$806, Compile`$809, Compile`$921, 
                    Compile`$928}, Compile`$806 = 2 Global`x; 
                    Compile`$809 = E^Compile`$806; 
                    Compile`$921 = Cos[Compile`$806]; 
                    Compile`$928 = Sin[Compile`$806]; (
                    Compile`$809 (-Compile`$921 + Compile`$928))/
                    2 + (Compile`$809 (2 Compile`$921 + 2 Compile`$928))/4]], 
                    Evaluate][Global`x]) (
                    1 (CompiledFunction[{8, 8., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    4}}, {{0.25, {3, 0, 2}}, {2, {2, 0, 0}}}, {0, 1, 6, 0, 
                    0}, {{10, 0, 1}, {16, 1, 0, 1}, {40, 34, 3, 0, 1, 3, 0, 
                    3}, {40, 2, 3, 0, 1, 3, 0, 4}, {19, 4, 5}, {40, 1, 3, 0, 
                    1, 3, 0, 4}, {13, 5, 4, 5}, {16, 2, 3, 5, 4}, {1}}, 
                    Function[{Global`x}, 
                    
                    Block[{Compile`$673}, Compile`$673 = 
                    2 Global`x; (E^Compile`$673 (-Cos[Compile`$673] + 
                    Sin[Compile`$673]))/4]], Evaluate][Global`x] - 
                    CalculateScan`PlotterScanner`Private`py$) - 
                    CompiledFunction[{8, 8., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    7}}, {{0.25, {3, 0, 8}}, {2, {2, 0, 0}}, {
                    0.5, {3, 0, 5}}}, {0, 1, 10, 0, 
                    0}, {{10, 0, 1}, {16, 1, 0, 1}, {40, 34, 3, 0, 1, 3, 0, 
                    2}, {40, 2, 3, 0, 1, 3, 0, 3}, {40, 1, 3, 0, 1, 3, 0, 
                    4}, {19, 3, 6}, {13, 6, 4, 6}, {16, 5, 2, 6, 7}, {10, 0, 
                    6}, {16, 6, 3, 6}, {10, 0, 9}, {16, 9, 4, 9}, {13, 6, 9, 
                    6}, {16, 8, 2, 6, 9}, {13, 7, 9, 7}, {1}}, 
                    Function[{Global`x}, 
                    
                    Block[{Compile`$806, Compile`$809, Compile`$921, 
                    Compile`$928}, Compile`$806 = 2 Global`x; 
                    Compile`$809 = E^Compile`$806; 
                    Compile`$921 = Cos[Compile`$806]; 
                    Compile`$928 = Sin[Compile`$806]; (
                    Compile`$809 (-Compile`$921 + Compile`$928))/
                    2 + (Compile`$809 (2 Compile`$921 + 2 Compile`$928))/4]], 
                    Evaluate][Global`x] (Global`x - 
                    CalculateScan`PlotterScanner`Private`px$)), (2 1) (
                    1 (CompiledFunction[{8, 8., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    4}}, {{0.25, {3, 0, 2}}, {2, {2, 0, 0}}}, {0, 1, 6, 0, 
                    0}, {{10, 0, 1}, {16, 1, 0, 1}, {40, 34, 3, 0, 1, 3, 0, 
                    3}, {40, 2, 3, 0, 1, 3, 0, 4}, {19, 4, 5}, {40, 1, 3, 0, 
                    1, 3, 0, 4}, {13, 5, 4, 5}, {16, 2, 3, 5, 4}, {1}}, 
                    Function[{Global`x}, 
                    
                    Block[{Compile`$673}, Compile`$673 = 
                    2 Global`x; (E^Compile`$673 (-Cos[Compile`$673] + 
                    Sin[Compile`$673]))/4]], Evaluate][Global`x] - 
                    CalculateScan`PlotterScanner`Private`py$) - 
                    CompiledFunction[{8, 8., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    7}}, {{0.25, {3, 0, 8}}, {2, {2, 0, 0}}, {
                    0.5, {3, 0, 5}}}, {0, 1, 10, 0, 
                    0}, {{10, 0, 1}, {16, 1, 0, 1}, {40, 34, 3, 0, 1, 3, 0, 
                    2}, {40, 2, 3, 0, 1, 3, 0, 3}, {40, 1, 3, 0, 1, 3, 0, 
                    4}, {19, 3, 6}, {13, 6, 4, 6}, {16, 5, 2, 6, 7}, {10, 0, 
                    6}, {16, 6, 3, 6}, {10, 0, 9}, {16, 9, 4, 9}, {13, 6, 9, 
                    6}, {16, 8, 2, 6, 9}, {13, 7, 9, 7}, {1}}, 
                    Function[{Global`x}, 
                    
                    Block[{Compile`$806, Compile`$809, Compile`$921, 
                    Compile`$928}, Compile`$806 = 2 Global`x; 
                    Compile`$809 = E^Compile`$806; 
                    Compile`$921 = Cos[Compile`$806]; 
                    Compile`$928 = Sin[Compile`$806]; (
                    Compile`$809 (-Compile`$921 + Compile`$928))/
                    2 + (Compile`$809 (2 Compile`$921 + 2 Compile`$928))/4]], 
                    Evaluate][Global`x] (Global`x - 
                    CalculateScan`PlotterScanner`Private`px$))}/(1 + 
                    CompiledFunction[{8, 8., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    7}}, {{0.25, {3, 0, 8}}, {2, {2, 0, 0}}, {
                    0.5, {3, 0, 5}}}, {0, 1, 10, 0, 
                    0}, {{10, 0, 1}, {16, 1, 0, 1}, {40, 34, 3, 0, 1, 3, 0, 
                    2}, {40, 2, 3, 0, 1, 3, 0, 3}, {40, 1, 3, 0, 1, 3, 0, 
                    4}, {19, 3, 6}, {13, 6, 4, 6}, {16, 5, 2, 6, 7}, {10, 0, 
                    6}, {16, 6, 3, 6}, {10, 0, 9}, {16, 9, 4, 9}, {13, 6, 9, 
                    6}, {16, 8, 2, 6, 9}, {13, 7, 9, 7}, {1}}, 
                    Function[{Global`x}, 
                    
                    Block[{Compile`$806, Compile`$809, Compile`$921, 
                    Compile`$928}, Compile`$806 = 2 Global`x; 
                    Compile`$809 = E^Compile`$806; 
                    Compile`$921 = Cos[Compile`$806]; 
                    Compile`$928 = Sin[Compile`$806]; (
                    Compile`$809 (-Compile`$921 + Compile`$928))/
                    2 + (Compile`$809 (2 Compile`$921 + 2 Compile`$928))/4]], 
                    Evaluate][Global`x]^2), {
                    Global`x, CalculateScan`PlotterScanner`Private`xL$, 
                    CalculateScan`PlotterScanner`Private`xU$}, 
                    PlotRange -> {
                    CalculateScan`PlotterScanner`Private`pRX$, 
                    CalculateScan`PlotterScanner`Private`pRY$}, Evaluated -> 
                    False]], {CalculateScan`PlotterScanner`Private`px, 
                    CalculateScan`PlotterScanner`Private`xL$, 
                    CalculateScan`PlotterScanner`Private`xU$, (
                    CalculateScan`PlotterScanner`Private`xU$ - 
                    CalculateScan`PlotterScanner`Private`xL$)/
                    CalculateScan`PlotterScanner`Private`orthotomicCurveCount$\
}]]]], {}]; 
                    CalculateScan`PlotterScanner`Private`\
orthotomicLastParamaters$$ = {{
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$}, 
                    CalculateScan`PlotterScanner`Private`\
orthotomicCurveCountFactor$$, 
                    CalculateScan`PlotterScanner`Private`\
orthotomicCurvePoints$$}]; 
                    CalculateScan`PlotterScanner`Private`orthotomicCurvePlot = 
                    Graphics[{
                    Directive[
                    CalculateScan`PlotterScanner`Private`orthotomicCurveColor$\
$, 
                    Opacity[
                    CalculateScan`PlotterScanner`Private`\
orthotomicCurveOpacity$$], 
                    Thickness[
                    10^CalculateScan`PlotterScanner`Private`\
orthotomicCurveThickness$$]], 
                    If[
                    CalculateScan`PlotterScanner`Private`orthotomicCurveTF$$, 
                    CalculateScan`PlotterScanner`Private`\
orthotomicCurvePlotCurves$$, {}]}]; 
                    CalculateScan`PlotterScanner`Private`getSplineSegments[
                    Line[
                    Pattern[CalculateScan`PlotterScanner`Private`l, 
                    Blank[]]]] := 
                    Module[{}, 
                    CalculateScan`PlotterScanner`Private`posis = 
                    Position[CalculateScan`PlotterScanner`Private`l, 
                    Except[{
                    Blank[Real], 
                    Blank[Real]}], {1}, Heads -> False]; 
                    If[CalculateScan`PlotterScanner`Private`posis === {}, 
                    BSplineCurve[CalculateScan`PlotterScanner`Private`l], 
                    Map[BSplineCurve, 
                    Select[
                    Map[DeleteCases[
                    Take[CalculateScan`PlotterScanner`Private`l, #], 
                    Except[{
                    Blank[Real], 
                    Blank[Real]}]]& , 
                    Partition[
                    Flatten[{1, 
                    
                    Map[{# - 1, # + 1}& , 
                    CalculateScan`PlotterScanner`Private`posis], 
                    Length[CalculateScan`PlotterScanner`Private`l]}], 2]], 
                    Length[#] >= 3& ]]]]; If[
                    And[
                    CalculateScan`PlotterScanner`Private`isopticCurveTF$$, 
                    CalculateScan`PlotterScanner`Private`\
isopticLastParamaters$$ =!= {{
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$}, 
                    CalculateScan`PlotterScanner`Private`isopticCurveAngle$$}]\
, CalculateScan`PlotterScanner`Private`isopticCurvePlotCurves$$ = Quiet[
                    If[
                    CalculateScan`PlotterScanner`Private`isopticCurveTF$$, 
                    
                    With[{CalculateScan`PlotterScanner`Private`\[Alpha]$ = 
                    CalculateScan`PlotterScanner`Private`isopticCurveAngle$$},
                     CalculateScan`PlotterScanner`Private`cpIsoptic = 
                    ContourPlot[(1 + CompiledFunction[{8, 8., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    7}}, {{0.25, {3, 0, 8}}, {2, {2, 0, 0}}, {
                    0.5, {3, 0, 5}}}, {0, 1, 10, 0, 
                    0}, {{10, 0, 1}, {16, 1, 0, 1}, {40, 34, 3, 0, 1, 3, 0, 
                    2}, {40, 2, 3, 0, 1, 3, 0, 3}, {40, 1, 3, 0, 1, 3, 0, 
                    4}, {19, 3, 6}, {13, 6, 4, 6}, {16, 5, 2, 6, 7}, {10, 0, 
                    6}, {16, 6, 3, 6}, {10, 0, 9}, {16, 9, 4, 9}, {13, 6, 9, 
                    6}, {16, 8, 2, 6, 9}, {13, 7, 9, 7}, {1}}, 
                    Function[{Global`x}, 
                    
                    Block[{Compile`$806, Compile`$809, Compile`$921, 
                    Compile`$928}, Compile`$806 = 2 Global`x; 
                    Compile`$809 = E^Compile`$806; 
                    Compile`$921 = Cos[Compile`$806]; 
                    Compile`$928 = Sin[Compile`$806]; (
                    Compile`$809 (-Compile`$921 + Compile`$928))/
                    2 + (Compile`$809 (2 Compile`$921 + 2 Compile`$928))/4]], 
                    Evaluate][CalculateScan`PlotterScanner`Private`x1$$] 
                    CompiledFunction[{8, 8., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    7}}, {{0.25, {3, 0, 8}}, {2, {2, 0, 0}}, {
                    0.5, {3, 0, 5}}}, {0, 1, 10, 0, 
                    0}, {{10, 0, 1}, {16, 1, 0, 1}, {40, 34, 3, 0, 1, 3, 0, 
                    2}, {40, 2, 3, 0, 1, 3, 0, 3}, {40, 1, 3, 0, 1, 3, 0, 
                    4}, {19, 3, 6}, {13, 6, 4, 6}, {16, 5, 2, 6, 7}, {10, 0, 
                    6}, {16, 6, 3, 6}, {10, 0, 9}, {16, 9, 4, 9}, {13, 6, 9, 
                    6}, {16, 8, 2, 6, 9}, {13, 7, 9, 7}, {1}}, 
                    Function[{Global`x}, 
                    
                    Block[{Compile`$806, Compile`$809, Compile`$921, 
                    Compile`$928}, Compile`$806 = 2 Global`x; 
                    Compile`$809 = E^Compile`$806; 
                    Compile`$921 = Cos[Compile`$806]; 
                    Compile`$928 = Sin[Compile`$806]; (
                    Compile`$809 (-Compile`$921 + Compile`$928))/
                    2 + (Compile`$809 (2 Compile`$921 + 2 Compile`$928))/4]], 
                    Evaluate][CalculateScan`PlotterScanner`Private`x2$$])/
                    Sqrt[(1 + CompiledFunction[{8, 8., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    7}}, {{0.25, {3, 0, 8}}, {2, {2, 0, 0}}, {
                    0.5, {3, 0, 5}}}, {0, 1, 10, 0, 
                    0}, {{10, 0, 1}, {16, 1, 0, 1}, {40, 34, 3, 0, 1, 3, 0, 
                    2}, {40, 2, 3, 0, 1, 3, 0, 3}, {40, 1, 3, 0, 1, 3, 0, 
                    4}, {19, 3, 6}, {13, 6, 4, 6}, {16, 5, 2, 6, 7}, {10, 0, 
                    6}, {16, 6, 3, 6}, {10, 0, 9}, {16, 9, 4, 9}, {13, 6, 9, 
                    6}, {16, 8, 2, 6, 9}, {13, 7, 9, 7}, {1}}, 
                    Function[{Global`x}, 
                    
                    Block[{Compile`$806, Compile`$809, Compile`$921, 
                    Compile`$928}, Compile`$806 = 2 Global`x; 
                    Compile`$809 = E^Compile`$806; 
                    Compile`$921 = Cos[Compile`$806]; 
                    Compile`$928 = Sin[Compile`$806]; (
                    Compile`$809 (-Compile`$921 + Compile`$928))/
                    2 + (Compile`$809 (2 Compile`$921 + 2 Compile`$928))/4]], 
                    Evaluate][CalculateScan`PlotterScanner`Private`x1$$]^2) (
                    1 + CompiledFunction[{8, 8., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    7}}, {{0.25, {3, 0, 8}}, {2, {2, 0, 0}}, {
                    0.5, {3, 0, 5}}}, {0, 1, 10, 0, 
                    0}, {{10, 0, 1}, {16, 1, 0, 1}, {40, 34, 3, 0, 1, 3, 0, 
                    2}, {40, 2, 3, 0, 1, 3, 0, 3}, {40, 1, 3, 0, 1, 3, 0, 
                    4}, {19, 3, 6}, {13, 6, 4, 6}, {16, 5, 2, 6, 7}, {10, 0, 
                    6}, {16, 6, 3, 6}, {10, 0, 9}, {16, 9, 4, 9}, {13, 6, 9, 
                    6}, {16, 8, 2, 6, 9}, {13, 7, 9, 7}, {1}}, 
                    Function[{Global`x}, 
                    
                    Block[{Compile`$806, Compile`$809, Compile`$921, 
                    Compile`$928}, Compile`$806 = 2 Global`x; 
                    Compile`$809 = E^Compile`$806; 
                    Compile`$921 = Cos[Compile`$806]; 
                    Compile`$928 = Sin[Compile`$806]; (
                    Compile`$809 (-Compile`$921 + Compile`$928))/
                    2 + (Compile`$809 (2 Compile`$921 + 2 Compile`$928))/4]], 
                    Evaluate][CalculateScan`PlotterScanner`Private`x2$$]^2)] == 
                    Cos[CalculateScan`PlotterScanner`Private`\[Alpha]$], {
                    CalculateScan`PlotterScanner`Private`x1$$, (-2) Pi, 2 
                    Pi}, {CalculateScan`PlotterScanner`Private`x2$$, (-2) Pi, 
                    2 Pi}, Exclusions -> {
                    Function[{Global`x}, (
                    E^(2 Global`x) (-Cos[2 Global`x] + Sin[2 Global`x]))/
                    2 + (E^(2 Global`x) (2 Cos[2 Global`x] + 
                    2 Sin[2 Global`x]))/4][
                    CalculateScan`PlotterScanner`Private`x1$$] - 
                    Function[{Global`x}, (
                    E^(2 Global`x) (-Cos[2 Global`x] + Sin[2 Global`x]))/
                    2 + (E^(2 Global`x) (2 Cos[2 Global`x] + 
                    2 Sin[2 Global`x]))/4][
                    CalculateScan`PlotterScanner`Private`x2$$] == 0}, 
                    Evaluated -> False]; 
                    CalculateScan`PlotterScanner`Private`x1x2SCPCurves = Cases[
                    Normal[CalculateScan`PlotterScanner`Private`cpIsoptic], 
                    Blank[Line], Infinity]; 
                    If[CalculateScan`PlotterScanner`Private`x1x2SCPCurves === \
{}, {}, 
                    Map[
                    CalculateScan`PlotterScanner`Private`getSplineSegments, 
                    Map[
                    CalculateScan`PlotterScanner`Private`\
tangentIntersectionPoint[#, {
                    CompiledFunction[{8, 8., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    4}}, {{0.25, {3, 0, 2}}, {2, {2, 0, 0}}}, {0, 1, 6, 0, 
                    0}, {{10, 0, 1}, {16, 1, 0, 1}, {40, 34, 3, 0, 1, 3, 0, 
                    3}, {40, 2, 3, 0, 1, 3, 0, 4}, {19, 4, 5}, {40, 1, 3, 0, 
                    1, 3, 0, 4}, {13, 5, 4, 5}, {16, 2, 3, 5, 4}, {1}}, 
                    Function[{Global`x}, 
                    
                    Block[{Compile`$673}, 
                    Compile`$673 = 2 Global`x; (
                    E^Compile`$673 (-Cos[Compile`$673] + Sin[Compile`$673]))/
                    4]], Evaluate], 
                    CompiledFunction[{8, 8., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    7}}, {{0.25, {3, 0, 8}}, {2, {2, 0, 0}}, {
                    0.5, {3, 0, 5}}}, {0, 1, 10, 0, 
                    0}, {{10, 0, 1}, {16, 1, 0, 1}, {40, 34, 3, 0, 1, 3, 0, 
                    2}, {40, 2, 3, 0, 1, 3, 0, 3}, {40, 1, 3, 0, 1, 3, 0, 
                    4}, {19, 3, 6}, {13, 6, 4, 6}, {16, 5, 2, 6, 7}, {10, 0, 
                    6}, {16, 6, 3, 6}, {10, 0, 9}, {16, 9, 4, 9}, {13, 6, 9, 
                    6}, {16, 8, 2, 6, 9}, {13, 7, 9, 7}, {1}}, 
                    Function[{Global`x}, 
                    
                    Block[{Compile`$806, Compile`$809, Compile`$921, 
                    Compile`$928}, Compile`$806 = 2 Global`x; 
                    Compile`$809 = E^Compile`$806; 
                    Compile`$921 = Cos[Compile`$806]; 
                    Compile`$928 = Sin[Compile`$806]; (
                    Compile`$809 (-Compile`$921 + Compile`$928))/
                    2 + (Compile`$809 (2 Compile`$921 + 2 Compile`$928))/4]], 
                    Evaluate]}]& , 
                    CalculateScan`PlotterScanner`Private`x1x2SCPCurves, \
{-2}]]]], {}]]; 
                    CalculateScan`PlotterScanner`Private`\
isopticLastParamaters$$ =!= {{
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$}, 
                    CalculateScan`PlotterScanner`Private`isopticCurveAngle$$}]\
; CalculateScan`PlotterScanner`Private`isopticCurvePlot = Graphics[{
                    Directive[
                    CalculateScan`PlotterScanner`Private`isopticCurveColor$$, 
                    
                    Opacity[
                    CalculateScan`PlotterScanner`Private`isopticCurveOpacity$$\
], 
                    Thickness[
                    10^CalculateScan`PlotterScanner`Private`\
isopticCurveThickness$$]], 
                    If[
                    CalculateScan`PlotterScanner`Private`isopticCurveTF$$, 
                    CalculateScan`PlotterScanner`Private`\
isopticCurvePlotCurves$$, {}]}]; 
                    CalculateScan`PlotterScanner`Private`annotatedPlotList = {
                    "tangentLinePlot" -> 
                    CalculateScan`PlotterScanner`Private`tangentLinePlot$, 
                    "normalLinePlot" -> 
                    CalculateScan`PlotterScanner`Private`normalLinePlot$, 
                    "tiltedTangentLinePlot" -> 
                    CalculateScan`PlotterScanner`Private`\
tiltedTangentLinePlot$, "osculatingCirclePlot" -> 
                    CalculateScan`PlotterScanner`Private`osculatingCirclePlot$\
, "taylorParabolaPlot" -> 
                    CalculateScan`PlotterScanner`Private`taylorParabolaPlot$, 
                    "involutePlot" -> 
                    CalculateScan`PlotterScanner`Private`involutePlot$, 
                    "evolutePlot" -> 
                    CalculateScan`PlotterScanner`Private`evolutePlot$, 
                    "dualCurvePlot" -> 
                    CalculateScan`PlotterScanner`Private`dualCurvePlot, 
                    "offsetCurvePlot" -> 
                    CalculateScan`PlotterScanner`Private`offsetCurvePlot, 
                    "tiltedOffsetCurvePlot" -> 
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurvePlot, "pedalCurvePlot" -> 
                    CalculateScan`PlotterScanner`Private`pedalCurvePlot, 
                    "negativePedalCurvePlot" -> 
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurvePlot, "contraPedalCurvePlot" -> 
                    CalculateScan`PlotterScanner`Private`contraPedalCurvePlot,
                     "inverseCurvePlot" -> 
                    CalculateScan`PlotterScanner`Private`inverseCurvePlot, 
                    "isopticCurvePlot" -> 
                    CalculateScan`PlotterScanner`Private`isopticCurvePlot, 
                    "orthotomicCurvePlot" -> 
                    CalculateScan`PlotterScanner`Private`orthotomicCurvePlot, 
                    "originalCurvePlot" -> 
                    CalculateScan`PlotterScanner`Private`originalCurvePlot$}; 
                    CalculateScan`PlotterScanner`Private`labelGrid = (
                    DeleteCases[#, {}]& )[{
                    If[
                    TrueQ[True], {
                    RawBoxes[
                    FormBox[
                    RowBox[{
                    FractionBox["1", "4"], " ", 
                    SuperscriptBox["\[ExponentialE]", 
                    RowBox[{"2", " ", "x"}]], " ", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"sin", "(", 
                    RowBox[{"2", " ", "x"}], ")"}], "-", 
                    RowBox[{"cos", "(", 
                    RowBox[{"2", " ", "x"}], ")"}]}], ")"}]}], 
                    TraditionalForm]], 
                    Style["\[LongDash]", Bold, Black]}, {}], 
                    If[
                    TrueQ[CalculateScan`PlotterScanner`Private`tangentTF$$], {
                    "tangents", 
                    Style[
                    "\[LongDash]", Bold, 
                    CalculateScan`PlotterScanner`Private`tangentColor$$]}, \
{}], 
                    If[
                    TrueQ[CalculateScan`PlotterScanner`Private`normalTF$$], {
                    "normals", 
                    Style[
                    "\[LongDash]", Bold, 
                    CalculateScan`PlotterScanner`Private`normalColor$$]}, {}], 
                    If[
                    TrueQ[
                    CalculateScan`PlotterScanner`Private`tiltedTangentTF$$], {
                    "tilted tangents", 
                    Style[
                    "\[LongDash]", Bold, 
                    CalculateScan`PlotterScanner`Private`tiltedTangentColor$$]\
}, {}], 
                    If[
                    TrueQ[
                    CalculateScan`PlotterScanner`Private`osculatingCircleTF$$]\
, {"osculating circles", 
                    Style[
                    "\[LongDash]", Bold, 
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleColor$$]}, {}], 
                    If[
                    TrueQ[
                    CalculateScan`PlotterScanner`Private`taylorParabolaTF$$], \
{"Taylor parabolas", 
                    Style[
                    "\[LongDash]", Bold, 
                    CalculateScan`PlotterScanner`Private`taylorParabolaColor$$\
]}, {}], 
                    If[
                    TrueQ[
                    CalculateScan`PlotterScanner`Private`involuteTF$$], {
                    "involutes", 
                    Style[
                    "\[LongDash]", Bold, 
                    CalculateScan`PlotterScanner`Private`involuteColor$$]}, \
{}], 
                    If[
                    TrueQ[CalculateScan`PlotterScanner`Private`evoluteTF$$], {
                    "evolute", 
                    Style[
                    "\[LongDash]", Bold, 
                    CalculateScan`PlotterScanner`Private`evoluteColor$$]}, \
{}], 
                    If[
                    TrueQ[
                    CalculateScan`PlotterScanner`Private`offsetCurveTF$$], {
                    "offset curves", 
                    Style[
                    "\[LongDash]", Bold, 
                    CalculateScan`PlotterScanner`Private`offsetCurveColor$$]},\
 {}], 
                    If[
                    TrueQ[
                    CalculateScan`PlotterScanner`Private`tiltedOffsetCurveTF$$\
], {"tilted offset curves", 
                    Style[
                    "\[LongDash]", Bold, 
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveColor$$]}, {}], 
                    If[
                    TrueQ[
                    CalculateScan`PlotterScanner`Private`negativePedalCurveTF$\
$], {"contrapedal curves", 
                    Style[
                    "\[LongDash]", Bold, 
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurveColor$$]}, {}], 
                    If[
                    TrueQ[
                    CalculateScan`PlotterScanner`Private`contraPedalCurveTF$$]\
, {"normals", 
                    Style[
                    "\[LongDash]", Bold, 
                    CalculateScan`PlotterScanner`Private`tiltedTangentColor$$]\
}, {}], 
                    If[
                    TrueQ[
                    CalculateScan`PlotterScanner`Private`dualCurveTF$$], {
                    "dual curves", 
                    Style[
                    "\[LongDash]", Bold, 
                    CalculateScan`PlotterScanner`Private`dualCurveColor$$]}, \
{}], 
                    If[
                    TrueQ[
                    CalculateScan`PlotterScanner`Private`inverseCurveTF$$], {
                    "inverse curves", 
                    Style[
                    "\[LongDash]", Bold, 
                    CalculateScan`PlotterScanner`Private`inverseCurveColor$$]}\
, {}], 
                    If[
                    TrueQ[
                    CalculateScan`PlotterScanner`Private`isopticCurveTF$$], {
                    "isoptic curves", 
                    Style[
                    "\[LongDash]", Bold, 
                    CalculateScan`PlotterScanner`Private`isopticCurveColor$$]}\
, {}], 
                    If[
                    TrueQ[
                    CalculateScan`PlotterScanner`Private`orthotomicCurveTF$$],\
 {"orthotomic curves", 
                    Style[
                    "\[LongDash]", Bold, 
                    CalculateScan`PlotterScanner`Private`orthotomicCurveColor$\
$]}, {}]}]; Column[{
                    Show[
                    Map[
                    Last, CalculateScan`PlotterScanner`Private`\
annotatedPlotList], PlotRange -> {
                    CalculateScan`PlotterScanner`Private`pRX$, 
                    CalculateScan`PlotterScanner`Private`pRY$}, ImageSize -> 
                    300, ImagePadding -> 5, AspectRatio -> 
                    CalculateScan`PlotterScanner`Private`ar$$, 
                    If[CalculateScan`PlotterScanner`Private`sa$$, 
                    Apply[
                    Sequence, {
                    Axes -> True, AxesOrigin -> {0, 0}, AxesStyle -> 
                    Lighter[Gray]}], 
                    Apply[Sequence, {}]], 
                    If[CalculateScan`PlotterScanner`Private`st$$, 
                    Apply[Sequence, {Ticks -> Automatic}], 
                    Apply[Sequence, {Ticks -> None}]]], 
                    Grid[{
                    Map[Grid[
                    Map[Reverse, #], Alignment -> Left]& , 
                    
                    With[{CalculateScan`PlotterScanner`Private`\[Lambda]T = 
                    Max[
                    Floor[
                    Length[CalculateScan`PlotterScanner`Private`labelGrid]/2],
                     1]}, 
                    Partition[
                    CalculateScan`PlotterScanner`Private`labelGrid, 
                    CalculateScan`PlotterScanner`Private`\[Lambda]T, 
                    CalculateScan`PlotterScanner`Private`\[Lambda]T, 
                    1, {}]]]}, Dividers -> {False, False}, 
                    Spacings -> {4, Automatic}]}]]], 
                  "Specifications" :> {{
                    CalculateUtilities`GraphicsUtilities`Private`more$$, {
                    False, True}, ControlType -> None}, {{
                    CalculateScan`PlotterScanner`Private`x1$$, \
-0.7853981633974483, 
                    Subscript[
                    Style["x", Italic], "min"]}, -1.5393804002589986`, 
                    1.5393804002589986`, ImageSize -> Small, ControlPlacement -> 
                    1}, {{CalculateScan`PlotterScanner`Private`x2$$, 
                    0.7853981633974483, 
                    Subscript[
                    Style["x", Italic], "max"]}, -1.5393804002589986`, 
                    1.5393804002589986`, ImageSize -> Small, ControlPlacement -> 
                    2}, {{CalculateScan`PlotterScanner`Private`symmxQ$$, 
                    False, "symmetric"}, {True, False}, ControlPlacement -> 
                    3}, {{CalculateScan`PlotterScanner`Private`fy1$$, 
                    0.982793723247329, 
                    Subscript["y", "min"]}, 0, 1.5393804002589986`, ImageSize -> 
                    Small, ControlPlacement -> 4}, {{
                    CalculateScan`PlotterScanner`Private`fy2$$, 
                    0.982793723247329, 
                    Subscript["y", "max"]}, 0, 1.5393804002589986`, ImageSize -> 
                    Small, ControlPlacement -> 5}, {{
                    CalculateScan`PlotterScanner`Private`symmyQ$$, True, 
                    "symmetric"}, {True, False}, ControlPlacement -> 6}, {{
                    CalculateScan`PlotterScanner`Private`sqPRQ$$, False, 
                    Dynamic[
                    Style["same as horizontal-range", 
                    If[
                    CalculateScan`PlotterScanner`Private`symmxQ$$, Black, 
                    Gray]]]}, {True, False}, ImageSize -> Small, 
                    ControlPlacement -> 7}, {{
                    CalculateScan`PlotterScanner`Private`sa$$, False, 
                    "show axes"}, {True, False}, ImageSize -> Small, 
                    ControlPlacement -> 8}, {{
                    CalculateScan`PlotterScanner`Private`st$$, False, 
                    Dynamic[
                    Style["show ticks", 
                    If[
                    CalculateScan`PlotterScanner`Private`sa$$ === True, Black,
                     Gray]]]}, {True, False}, ImageSize -> Small, 
                    ControlPlacement -> 9}, {{
                    CalculateScan`PlotterScanner`Private`ar$$, 1, 
                    "aspect ratio"}, 
                    Rational[1, 4], 4, ImageSize -> Small, ControlPlacement -> 
                    10}, {{CalculateScan`PlotterScanner`Private`tangentTF$$, 
                    False, ""}, {True, False}, ControlPlacement -> 11}, {{
                    CalculateScan`PlotterScanner`Private`tangentCount$$, 60, 
                    ""}, 2, 360, 1, ImageSize -> Small, ControlPlacement -> 
                    12}, {{CalculateScan`PlotterScanner`Private`tangentLength$\
$, 0.17067775900425536`, ""}, 0, 1.5393804002589986`, ImageSize -> Small, 
                    ControlPlacement -> 13}, {{
                    CalculateScan`PlotterScanner`Private`tangentThickness$$, \
-3., ""}, -4, -0.5, ImageSize -> Small, ControlPlacement -> 14}, {{
                    CalculateScan`PlotterScanner`Private`tangentColor$$, 
                    RGBColor[0.237736, 0.340215, 0.575113], ""}, 
                    RGBColor[1, 0, 0], ImageSize -> Tiny, AppearanceElements -> 
                    "Spectrum", ControlPlacement -> 15}, {{
                    CalculateScan`PlotterScanner`Private`tangentOpacity$$, 
                    0.8, ""}, 0, 1, ImageSize -> Small, ControlPlacement -> 
                    16}, {{CalculateScan`PlotterScanner`Private`normalTF$$, 
                    True, ""}, {True, False}, ControlPlacement -> 17}, {{
                    CalculateScan`PlotterScanner`Private`normalCount$$, 120, 
                    ""}, 2, 360, 1, ImageSize -> Small, ControlPlacement -> 
                    18}, {{CalculateScan`PlotterScanner`Private`normalLength$$\
, 0.17067775900425536`, ""}, 0, 1.5393804002589986`, ImageSize -> Small, 
                    ControlPlacement -> 19}, {{
                    CalculateScan`PlotterScanner`Private`normalThickness$$, \
-3., ""}, -4, -0.5, ImageSize -> Small, ControlPlacement -> 20}, {{
                    CalculateScan`PlotterScanner`Private`normalColor$$, 
                    RGBColor[0.237, 0.34, 0.575], ""}, 
                    RGBColor[1, 0, 0], ImageSize -> Tiny, AppearanceElements -> 
                    "Spectrum", ControlPlacement -> 21}, {{
                    CalculateScan`PlotterScanner`Private`normalOpacity$$, 0.8,
                     ""}, 0, 1, ImageSize -> Small, ControlPlacement -> 
                    22}, {{CalculateScan`PlotterScanner`Private`\
tiltedTangentTF$$, False, ""}, {True, False}, ControlPlacement -> 23}, {{
                    CalculateScan`PlotterScanner`Private`tiltedTangentAngle$$,
                     Rational[1, 4] Pi, ""}, -Pi, Pi, ImageSize -> Small, 
                    ControlPlacement -> 24}, {{
                    CalculateScan`PlotterScanner`Private`tiltedTangentCount$$,
                     60, ""}, 2, 360, 1, ImageSize -> Small, ControlPlacement -> 
                    25}, {{CalculateScan`PlotterScanner`Private`\
tiltedTangentLength$$, 0.17067775900425536`, ""}, 0, 1.5393804002589986`, 
                    ImageSize -> Small, ControlPlacement -> 26}, {{
                    CalculateScan`PlotterScanner`Private`\
tiltedTangentThickness$$, -3., ""}, -4, -0.5, ImageSize -> Small, 
                    ControlPlacement -> 27}, {{
                    CalculateScan`PlotterScanner`Private`tiltedTangentColor$$, 
                    RGBColor[
                    0.2622702, 0.40739780000000003`, 0.41955020000000004`], 
                    ""}, 
                    RGBColor[1, 0, 0], ImageSize -> Tiny, AppearanceElements -> 
                    "Spectrum", ControlPlacement -> 28}, {{
                    CalculateScan`PlotterScanner`Private`tiltedTangentOpacity$\
$, 0.8, ""}, 0, 1, ImageSize -> Small, ControlPlacement -> 29}, {{
                    CalculateScan`PlotterScanner`Private`osculatingCircleTF$$,
                     False, ""}, {True, False}, ControlPlacement -> 30}, {{
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleCount$$, 60, ""}, 2, 360, 1, ImageSize -> Small, 
                    ControlPlacement -> 31}, {{
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleThickness$$, -3., ""}, -4, -0.5, ImageSize -> Small, 
                    ControlPlacement -> 32}, {{
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleColor$$, 
                    RGBColor[0.2752426, 0.4446824, 0.33950440000000004`], ""}, 
                    RGBColor[1, 0, 0], ImageSize -> Tiny, AppearanceElements -> 
                    "Spectrum", ControlPlacement -> 33}, {{
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleOpacity$$, 0.8, ""}, 0, 1, ImageSize -> Small, 
                    ControlPlacement -> 34}, {{
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleRadiiTF$$, False, ""}, {True, False}, ImageSize -> Small, 
                    ControlPlacement -> 35}, {{
                    CalculateScan`PlotterScanner`Private`taylorParabolaTF$$, 
                    False, ""}, {True, False}, ControlPlacement -> 36}, {{
                    CalculateScan`PlotterScanner`Private`taylorParabolaCount$$\
, 36, ""}, 2, 120, 1, ImageSize -> Small, ControlPlacement -> 37}, {{
                    CalculateScan`PlotterScanner`Private`\
taylorParabolaThickness$$, -3., ""}, -4, -0.5, ImageSize -> Small, 
                    ControlPlacement -> 38}, {{
                    CalculateScan`PlotterScanner`Private`taylorParabolaColor$$\
, 
                    RGBColor[0.7189495000000001, 0.719797, 0.283877], ""}, 
                    RGBColor[1, 0, 0], ImageSize -> Tiny, AppearanceElements -> 
                    "Spectrum", ControlPlacement -> 39}, {{
                    CalculateScan`PlotterScanner`Private`\
taylorParabolaOpacity$$, 0.8, ""}, 0, 1, ImageSize -> Small, ControlPlacement -> 
                    40}, {{CalculateScan`PlotterScanner`Private`involuteTF$$, 
                    False, ""}, {True, False}, ControlPlacement -> 41}, {{
                    CalculateScan`PlotterScanner`Private`involuteCount$$, 60, 
                    ""}, 1, 120, 1, ImageSize -> Small, ControlPlacement -> 
                    42}, {{CalculateScan`PlotterScanner`Private`\
involuteThickness$$, -3., ""}, -4, -0.5, ImageSize -> Small, ControlPlacement -> 
                    43}, {{CalculateScan`PlotterScanner`Private`involuteColor$\
$, 
                    RGBColor[0.49978279999999997`, 0.6025278, 0.2508104], ""}, 
                    RGBColor[1, 0, 0], ImageSize -> Tiny, AppearanceElements -> 
                    "Spectrum", ControlPlacement -> 44}, {{
                    CalculateScan`PlotterScanner`Private`involuteOpacity$$, 
                    0.8, ""}, 0, 1, ImageSize -> Small, ControlPlacement -> 
                    45}, {{CalculateScan`PlotterScanner`Private`\
involutesLeftTF$$, False, ""}, {True, False}, ControlPlacement -> 46}, {{
                    CalculateScan`PlotterScanner`Private`involutesRightTF$$, 
                    True, ""}, {True, False}, ControlPlacement -> 47}, {{
                    CalculateScan`PlotterScanner`Private`evoluteTF$$, False, 
                    ""}, {True, False}, ControlPlacement -> 48}, {{
                    CalculateScan`PlotterScanner`Private`evoluteThickness$$, \
-3., ""}, -4, -0.5, ImageSize -> Small, ControlPlacement -> 49}, {{
                    CalculateScan`PlotterScanner`Private`evoluteColor$$, 
                    RGBColor[0.813033, 0.766292, 0.303458], ""}, 
                    RGBColor[1, 0, 0], ImageSize -> Tiny, AppearanceElements -> 
                    "Spectrum", ControlPlacement -> 50}, {{
                    CalculateScan`PlotterScanner`Private`evoluteOpacity$$, 
                    0.8, ""}, 0, 1, ImageSize -> Small, ControlPlacement -> 
                    51}, {{CalculateScan`PlotterScanner`Private`offsetCurveTF$\
$, False, ""}, {True, False}, ControlPlacement -> 52}, {{
                    CalculateScan`PlotterScanner`Private`offsetCurveDistance$$\
, 0.17067775900425536`, ""}, 0, 1.5393804002589986`, ImageSize -> Small, 
                    ControlPlacement -> 53}, {{
                    CalculateScan`PlotterScanner`Private`offsetCurveCount$$, 
                    12, ""}, 1, 60, 1, ImageSize -> Small, ControlPlacement -> 
                    54}, {{CalculateScan`PlotterScanner`Private`\
offsetCurveThickness$$, -3., ""}, -4, -0.5, ImageSize -> Small, 
                    ControlPlacement -> 55}, {{
                    CalculateScan`PlotterScanner`Private`offsetCurveColor$$, 
                    RGBColor[0.877875, 0.731045, 0.326896], ""}, 
                    RGBColor[1, 0, 0], ImageSize -> Tiny, AppearanceElements -> 
                    "Spectrum", ControlPlacement -> 56}, {{
                    CalculateScan`PlotterScanner`Private`offsetCurveOpacity$$,
                     0.8, ""}, 0, 1, ImageSize -> Small, ControlPlacement -> 
                    57}, {{CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveTF$$, False, ""}, {True, False}, ControlPlacement -> 58}, {{
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveAngle$$, Rational[1, 4] Pi, ""}, -Pi, Pi, ImageSize -> Small,
                     ControlPlacement -> 59}, {{
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveDistance$$, 0.17067775900425536`, ""}, 0, 
                    1.5393804002589986`, ImageSize -> Small, ControlPlacement -> 
                    60}, {{CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveCount$$, 12, ""}, 1, 60, 1, ImageSize -> Small, 
                    ControlPlacement -> 61}, {{
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveThickness$$, -3., ""}, -4, -0.5, ImageSize -> Small, 
                    ControlPlacement -> 62}, {{
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveColor$$, 
                    RGBColor[0.49978279999999997`, 0.6025278, 0.2508104], ""}, 
                    RGBColor[1, 0, 0], ImageSize -> Tiny, AppearanceElements -> 
                    "Spectrum", ControlPlacement -> 63}, {{
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveOpacity$$, 0.8, ""}, 0, 1, ImageSize -> Small, 
                    ControlPlacement -> 64}, {{
                    CalculateScan`PlotterScanner`Private`pedalCurveTF$$, 
                    False, ""}, {True, False}, ControlPlacement -> 65}, {{
                    CalculateScan`PlotterScanner`Private`\
pedalCurveCountFactor$$, 0.3, ""}, 0, 1, ImageSize -> Small, ControlPlacement -> 
                    66}, {{CalculateScan`PlotterScanner`Private`\
pedalCurveThickness$$, -3., ""}, -4, -0.5, ImageSize -> Small, 
                    ControlPlacement -> 67}, {{
                    CalculateScan`PlotterScanner`Private`pedalCurveColor$$, 
                    RGBColor[0.32894650000000003`, 0.5006225, 0.2625337], ""}, 
                    RGBColor[1, 0, 0], ImageSize -> Tiny, AppearanceElements -> 
                    "Spectrum", ControlPlacement -> 68}, {{
                    CalculateScan`PlotterScanner`Private`pedalCurveOpacity$$, 
                    0.8, ""}, 0, 1, ImageSize -> Small, ControlPlacement -> 
                    69}, {{CalculateScan`PlotterScanner`Private`\
pedalCurvePoints$$, "curve", ""}, {"grid", "curve"}, ImageSize -> Small, 
                    ControlPlacement -> 70}, {{
                    CalculateScan`PlotterScanner`Private`negativePedalCurveTF$\
$, False, ""}, {True, False}, ControlPlacement -> 71}, {{
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurveCountFactor$$, 0.3, ""}, 0, 1, ImageSize -> Small, 
                    ControlPlacement -> 72}, {{
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurveThickness$$, -3., ""}, -4, -0.5, ImageSize -> Small, 
                    ControlPlacement -> 73}, {{
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurveColor$$, 
                    RGBColor[0.7464574, 0.2952580000000001, 0.2454606], ""}, 
                    RGBColor[1, 0, 0], ImageSize -> Tiny, AppearanceElements -> 
                    "Spectrum", ControlPlacement -> 74}, {{
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurveOpacity$$, 0.8, ""}, 0, 1, ImageSize -> Small, 
                    ControlPlacement -> 75}, {{
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurvePoints$$, "curve", ""}, {"curve", "grid"}, ImageSize -> 
                    Small, ControlPlacement -> 76}, {{
                    CalculateScan`PlotterScanner`Private`contraPedalCurveTF$$,
                     False, ""}, {True, False}, ControlPlacement -> 77}, {{
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurveCountFactor$$, 0.3, ""}, 0, 1, ImageSize -> Small, 
                    ControlPlacement -> 78}, {{
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurveThickness$$, -3., ""}, -4, -0.5, ImageSize -> Small, 
                    ControlPlacement -> 79}, {{
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurveColor$$, 
                    RGBColor[0.7464574, 0.2952580000000001, 0.2454606], ""}, 
                    RGBColor[1, 0, 0], ImageSize -> Tiny, AppearanceElements -> 
                    "Spectrum", ControlPlacement -> 80}, {{
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurveOpacity$$, 0.8, ""}, 0, 1, ImageSize -> Small, 
                    ControlPlacement -> 81}, {{
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurvePoints$$, "curve", ""}, {"curve", "grid"}, ImageSize -> Small,
                     ControlPlacement -> 82}, {{
                    CalculateScan`PlotterScanner`Private`dualCurveTF$$, False,
                     ""}, {True, False}, ControlPlacement -> 83}, {{
                    CalculateScan`PlotterScanner`Private`dualCurveCountFactor$\
$, 0.3, ""}, 0, 1, ImageSize -> Small, ControlPlacement -> 84}, {{
                    CalculateScan`PlotterScanner`Private`dualCurveThickness$$,\
 -3., ""}, -4, -0.5, ImageSize -> Small, ControlPlacement -> 85}, {{
                    CalculateScan`PlotterScanner`Private`dualCurveColor$$, 
                    RGBColor[0.2860602, 0.4663408, 0.29410879999999995`], ""}, 
                    RGBColor[1, 0, 0], ImageSize -> Tiny, AppearanceElements -> 
                    "Spectrum", ControlPlacement -> 86}, {{
                    CalculateScan`PlotterScanner`Private`dualCurveOpacity$$, 
                    0.8, ""}, 0, 1, ImageSize -> Small, ControlPlacement -> 
                    87}, {{CalculateScan`PlotterScanner`Private`\
dualPedalCurvePoints$$, "curve", ""}, {"curve", "grid"}, ImageSize -> Small, 
                    ControlPlacement -> 88}, {{
                    CalculateScan`PlotterScanner`Private`inverseCurveTF$$, 
                    False, ""}, {True, False}, ControlPlacement -> 89}, {{
                    CalculateScan`PlotterScanner`Private`\
inverseCurveCountFactor$$, 0.3, ""}, 0, 1, ImageSize -> Small, 
                    ControlPlacement -> 90}, {{
                    CalculateScan`PlotterScanner`Private`\
inverseCurveThickness$$, -3., ""}, -4, -0.5, ImageSize -> Small, 
                    ControlPlacement -> 91}, {{
                    CalculateScan`PlotterScanner`Private`inverseCurveColor$$, 
                    
                    RGBColor[0.2860602, 0.4663408, 0.29410879999999995`], ""}, 
                    RGBColor[1, 0, 0], ImageSize -> Tiny, AppearanceElements -> 
                    "Spectrum", ControlPlacement -> 92}, {{
                    CalculateScan`PlotterScanner`Private`inverseCurveOpacity$$\
, 0.8, ""}, 0, 1, ImageSize -> Small, ControlPlacement -> 93}, {{
                    CalculateScan`PlotterScanner`Private`inverseCurvePoints$$,
                     "grid", ""}, {"curve", "grid"}, ImageSize -> Small, 
                    ControlPlacement -> 94}, {{
                    CalculateScan`PlotterScanner`Private`\
inverseCurveCircleRadiusFactor$$, 0.4636476090008061, ""}, 0, 1, ImageSize -> 
                    Small, ControlPlacement -> 95}, {{
                    CalculateScan`PlotterScanner`Private`isopticCurveTF$$, 
                    False, ""}, {True, False}, ControlPlacement -> 96}, {{
                    CalculateScan`PlotterScanner`Private`isopticCurveAngle$$, 
                    Rational[1, 3] Pi, ""}, 0, Pi, ImageSize -> Small, 
                    ControlPlacement -> 97}, {{
                    CalculateScan`PlotterScanner`Private`\
isopticCurveThickness$$, -3., ""}, -4, -0.5, ImageSize -> Small, 
                    ControlPlacement -> 98}, {{
                    CalculateScan`PlotterScanner`Private`isopticCurveColor$$, 
                    
                    RGBColor[
                    0.8519382, 0.7451437999999999, 0.31752080000000005`], ""}, 
                    RGBColor[1, 0, 0], ImageSize -> Tiny, AppearanceElements -> 
                    "Spectrum", ControlPlacement -> 99}, {{
                    CalculateScan`PlotterScanner`Private`isopticCurveOpacity$$\
, 0.8, ""}, 0, 1, ImageSize -> Small, ControlPlacement -> 100}, {{
                    CalculateScan`PlotterScanner`Private`orthotomicCurveTF$$, 
                    False, ""}, {True, False}, ControlPlacement -> 101}, {{
                    CalculateScan`PlotterScanner`Private`orthotomicCurveAngle$\
$, Rational[1, 3] Pi, ""}, 0, Pi, ImageSize -> Small, ControlPlacement -> 
                    102}, {{
                    CalculateScan`PlotterScanner`Private`\
orthotomicCurveCountFactor$$, 0.3, ""}, 0, 1, ImageSize -> Small, 
                    ControlPlacement -> 103}, {{
                    CalculateScan`PlotterScanner`Private`\
orthotomicCurveThickness$$, -3., ""}, -4, -0.5, ImageSize -> Small, 
                    ControlPlacement -> 104}, {{
                    CalculateScan`PlotterScanner`Private`orthotomicCurveColor$\
$, 
                    RGBColor[
                    0.8519382, 0.7451437999999999, 0.31752080000000005`], ""}, 
                    RGBColor[1, 0, 0], ImageSize -> Tiny, AppearanceElements -> 
                    "Spectrum", ControlPlacement -> 105}, {{
                    CalculateScan`PlotterScanner`Private`\
orthotomicCurveOpacity$$, 0.8, ""}, 0, 1, ImageSize -> Small, 
                    ControlPlacement -> 106}, {{
                    CalculateScan`PlotterScanner`Private`\
orthotomicCurvePoints$$, "curve", ""}, {"curve", "grid"}, ImageSize -> Small, 
                    ControlPlacement -> 107}, 
                    Style[
                    Overlay[{
                    RawBoxes[
                    PaneBox[
                    GraphicsBox[
                    
                    RasterBox[{{{0, 0, 0, 24}}, {{0, 0, 0, 9}}, {{0, 0, 0, 
                    10}}, {{0, 0, 0, 10}}, {{0, 0, 0, 9}}, {{0, 0, 0, 9}}, {{
                    0, 0, 0, 8}}, {{0, 0, 0, 8}}, {{0, 0, 0, 9}}, {{0, 0, 0, 
                    8}}, {{0, 0, 0, 7}}, {{0, 0, 0, 7}}, {{0, 0, 0, 8}}, {{0, 
                    0, 0, 6}}, {{0, 0, 0, 6}}, {{0, 0, 0, 6}}, {{0, 0, 0, 
                    6}}, {{0, 0, 0, 5}}, {{0, 0, 0, 6}}, {{0, 0, 0, 5}}, {{0, 
                    0, 0, 4}}, {{0, 0, 0, 4}}, {{0, 0, 0, 5}}, {{0, 0, 0, 
                    5}}, {{0, 0, 0, 3}}, {{0, 0, 0, 4}}, {{0, 0, 0, 3}}, {{0, 
                    0, 0, 3}}, {{0, 0, 0, 3}}, {{0, 0, 0, 3}}, {{0, 0, 0, 
                    2}}, {{0, 0, 0, 2}}, {{0, 0, 0, 2}}, {{0, 0, 0, 2}}, {{0, 
                    0, 0, 1}}, {{0, 0, 0, 2}}, {{0, 0, 0, 2}}, {{0, 0, 0, 
                    0}}, {{0, 0, 0, 1}}, {{255, 255, 255, 0}}, {{255, 255, 
                    255, 0}}, {{255, 255, 255, 0}}, {{255, 255, 255, 0}}, {{
                    255, 255, 255, 0}}, {{255, 255, 255, 0}}}, {{0, 45}, {
                    2500, 0}}, {0, 255}, ColorFunction -> RGBColor], 
                    ImageSize -> {2500, 45}, 
                    PlotRange -> {{0, 2500}, {0, 45}}], ImageSize -> 
                    Scaled[1], ScrollPosition -> {0., 0.}]], 
                    Pane[
                    Column[{
                    Row[{
                    Invisible[
                    RawBoxes[
                    GraphicsBox[
                    TagBox[
                    
                    RasterBox[{{{255, 132, 0}, {255, 132, 0}, {255, 132, 0}, {
                    255, 132, 0}, {255, 132, 0}, {255, 132, 0}}, {{255, 132, 
                    0}, {255, 132, 0}, {255, 132, 0}, {255, 132, 0}, {255, 
                    132, 0}, {255, 132, 0}}}, {{0, 2}, {6, 0}}, {0, 255}, 
                    ColorFunction -> RGBColor], 
                    BoxForm`ImageTag[
                    "Byte", ColorSpace -> "RGB", Interleaving -> True], 
                    Selectable -> False], BaseStyle -> "ImageGraphics", 
                    ImageSize -> Magnification[1], ImageSizeRaw -> {6, 2}, 
                    BaselinePosition -> (Scaled[0] -> Center), 
                    PlotRange -> {{0, 6}, {0, 2}}]]], " ", 
                    Column[{"Horizontal plot range:", 
                    Row[{
                    Manipulate`Place[1], "  ", 
                    Manipulate`Place[2], "  ", 
                    Manipulate`Place[3]}]}]}], 
                    PaneSelector[{True -> Grid[{{
                    Button[
                    Row[{
                    RawBoxes[
                    GraphicsBox[
                    TagBox[
                    
                    RasterBox[{{{255, 132, 0}, {255, 132, 0}, {255, 132, 0}, {
                    255, 132, 0}, {255, 132, 0}, {255, 132, 0}}, {{255, 132, 
                    0}, {255, 132, 0}, {255, 132, 0}, {255, 132, 0}, {255, 
                    132, 0}, {255, 132, 0}}}, {{0, 2}, {6, 0}}, {0, 255}, 
                    ColorFunction -> RGBColor], 
                    BoxForm`ImageTag[
                    "Byte", ColorSpace -> "RGB", Interleaving -> True], 
                    Selectable -> False], BaseStyle -> "ImageGraphics", 
                    ImageSize -> Magnification[1], ImageSizeRaw -> {6, 2}, 
                    BaselinePosition -> (Scaled[0] -> Center), 
                    PlotRange -> {{0, 6}, {0, 2}}]], " "}], 
                    CalculateUtilities`GraphicsUtilities`Private`more$$ = 
                    False, Appearance -> None, BaseStyle -> {}], 
                    Button["Fewer controls", 
                    CalculateUtilities`GraphicsUtilities`Private`more$$ = 
                    False, Appearance -> None, BaseStyle -> {}]}, {"", 
                    Item[
                    Column[{
                    Column[{"Vertical plot range:", 
                    Row[{
                    Manipulate`Place[4], "  ", 
                    Manipulate`Place[5], "  ", 
                    Manipulate`Place[6]}], 
                    Manipulate`Place[7]}], 
                    Column[{
                    Row[{
                    Manipulate`Place[8], "  ", 
                    Manipulate`Place[9]}], 
                    Row[{
                    Manipulate`Place[10], "   settings: ", 
                    Button[
                    "1", CalculateScan`PlotterScanner`Private`ar$$ = 1, 
                    ImageSize -> Small, Appearance -> "Palette", 
                    BaseStyle -> {}], "  ", 
                    Button["unscaled axes", 
                    (If[
                    1/4 <= # <= 4, 
                    CalculateScan`PlotterScanner`Private`ar$$ = #]& )[Abs[
                    Apply[
                    Subtract, CalculateScan`PlotterScanner`Private`pRY]]/Abs[
                    Apply[
                    Subtract, CalculateScan`PlotterScanner`Private`pRX]]], 
                    ImageSize -> Small, Appearance -> "Palette", 
                    BaseStyle -> {}]}]}], 
                    TabView[{Row[{" ", 
                    Dynamic[
                    If[CalculateScan`PlotterScanner`Private`tangentTF$$, 
                    Style[
                    "\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`tangentColor$$, 
                    Bold], " "]], 
                    Tooltip[" tangents             ", 
                    Style[" family of tangents at points along the curve ", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> 
                    Grid[{{"show tangents", 
                    Manipulate`Place[11]}, {"tangent count", 
                    Manipulate`Place[12]}, {"tangent length", 
                    Manipulate`Place[13]}, {"tangent thickness", 
                    Manipulate`Place[14]}, {"tangent color", 
                    Manipulate`Place[15]}, {"tangent opacity", 
                    Manipulate`Place[16]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    False}}], Row[{" ", 
                    Dynamic[
                    If[CalculateScan`PlotterScanner`Private`normalTF$$, 
                    Style[
                    "\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`normalColor$$, Bold],
                     " "]], 
                    Tooltip[" normals              ", 
                    Style[" family of normals at points along the curve ", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> 
                    Grid[{{"show normals", 
                    Manipulate`Place[17]}, {"normal count", 
                    Manipulate`Place[18]}, {"normal length", 
                    Manipulate`Place[19]}, {"normal thickness", 
                    Manipulate`Place[20]}, {"normal color", 
                    Manipulate`Place[21]}, {"normal opacity", 
                    Manipulate`Place[22]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    False}}], Row[{" ", 
                    Dynamic[
                    If[CalculateScan`PlotterScanner`Private`tiltedTangentTF$$, 
                    Style[
                    "\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`tiltedTangentColor$$,
                     Bold], " "]], 
                    Tooltip[" tilted tangents      ", 
                    Style[
                    " family of tilted tangents at points along the curve ", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> 
                    Grid[{{"show tilted tangents", 
                    Manipulate`Place[23]}, {"tilted tangent angle", 
                    Manipulate`Place[24]}, {"tilted tangent count", 
                    Manipulate`Place[25]}, {"tilted tangent length", 
                    Manipulate`Place[26]}, {"tilted tangent thickness", 
                    Manipulate`Place[27]}, {"tilted tangent color", 
                    Manipulate`Place[28]}, {"tilted tangent opacity", 
                    Manipulate`Place[29]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    False}}], Row[{" ", 
                    Dynamic[
                    If[
                    CalculateScan`PlotterScanner`Private`osculatingCircleTF$$, 
                    Style[
                    "\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleColor$$, Bold], " "]], 
                    Tooltip[" osculating circles   ", 
                    Style[
                    " family of osculating circles (circles that are tangent \
to the curve) at points along the curve", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> Column[{
                    Grid[{{"show osculating circles", 
                    Manipulate`Place[30]}, {"osculating circle count", 
                    Manipulate`Place[31]}, {"osculating circle thickness", 
                    Manipulate`Place[32]}, {"osculating circle color", 
                    Manipulate`Place[33]}, {"osculating circle opacity", 
                    Manipulate`Place[34]}, {"show circle radii", 
                    Manipulate`Place[35]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    True}}], 
                    Dynamic[
                    Style[
                    If[
                    And[
                    CalculateScan`PlotterScanner`Private`osculatingCircleTF$$, 
                    Not[
                    0.98 < CalculateScan`PlotterScanner`Private`ar$$ < 1.02]],
                     "(note than circles appear as ellipses for unequally\n\
scaled horizontal and vertical axes)", ""]], 
                    RGBColor[
                    0.6666666666666666, 0.6666666666666666, 
                    0.6666666666666666]]}, Alignment -> Left], Row[{" ", 
                    Dynamic[
                    If[
                    CalculateScan`PlotterScanner`Private`taylorParabolaTF$$, 
                    Style["\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`taylorParabolaColor$$\
, Bold], " "]], 
                    Tooltip[" Taylor parabolas     ", 
                    Style[" family of second order Taylor approximations", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> Column[{
                    Grid[{{"show Taylor parabolas", 
                    Manipulate`Place[36]}, {"Taylor parabola count", 
                    Manipulate`Place[37]}, {"Taylor parabola thickness", 
                    Manipulate`Place[38]}, {"Taylor parabola color", 
                    Manipulate`Place[39]}, {"Taylor parabola opacity", 
                    Manipulate`Place[40]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    True}}]}, Alignment -> Left], Row[{" ", 
                    Dynamic[
                    If[CalculateScan`PlotterScanner`Private`involuteTF$$, 
                    Style[
                    "\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`involuteColor$$, 
                    Bold], " "]], 
                    Tooltip[" involutes            ", 
                    Style[
                    " family of involutes (curves traced out by strings \
unwound from the curve) of the curve", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> 
                    Grid[{{"show involutes", 
                    Manipulate`Place[41]}, {"involute count", 
                    Manipulate`Place[42]}, {"involute thickness", 
                    Manipulate`Place[43]}, {"involute color", 
                    Manipulate`Place[44]}, {"involute opacity", 
                    Manipulate`Place[45]}, {"directions", 
                    Row[{"\[DoubleLongLeftArrow]", 
                    Manipulate`Place[46], "  \[DoubleLongRightArrow]", 
                    Manipulate`Place[47]}]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    True}}], Row[{" ", 
                    Dynamic[
                    If[CalculateScan`PlotterScanner`Private`evoluteTF$$, 
                    Style[
                    "\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`evoluteColor$$, 
                    Bold], " "]], 
                    Tooltip[" evolute              ", 
                    Style[
                    " the evolute of a given curve (curve of the centers of \
the osculating circles))", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> 
                    Grid[{{"show evolute", 
                    Manipulate`Place[48]}, {"evolute thickness", 
                    Manipulate`Place[49]}, {"evolute color", 
                    Manipulate`Place[50]}, {"evolute opacity", 
                    Manipulate`Place[51]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    False}}], Row[{" ", 
                    Dynamic[
                    If[CalculateScan`PlotterScanner`Private`offsetCurveTF$$, 
                    Style[
                    "\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`offsetCurveColor$$, 
                    Bold], " "]], 
                    Tooltip[" offset curves        ", 
                    Style[
                    " family of offset curves (curves shifted a fixed \
distance perpendicular to each point of the original curve) ", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> 
                    Grid[{{"show offset curves", 
                    Manipulate`Place[52]}, {"offset curve distance", 
                    Manipulate`Place[53]}, {"offset curve count", 
                    Manipulate`Place[54]}, {"offset curve thickness", 
                    Manipulate`Place[55]}, {"offset curve color", 
                    Manipulate`Place[56]}, {"offset curve opacity", 
                    Manipulate`Place[57]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    False}}], Row[{" ", 
                    Dynamic[
                    If[
                    CalculateScan`PlotterScanner`Private`tiltedOffsetCurveTF$$\
, 
                    Style["\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveColor$$, Bold], " "]], 
                    Tooltip[" tilted offset curves ", 
                    Style[
                    " family of tilted offset curves (curves shifted a fixed \
distance in a direction with a fixed angle \n                                 \
     to the local normal to each point of the original curve) ", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> 
                    Grid[{{"show tilted offset curves", 
                    Manipulate`Place[58]}, {"tilted offset curve angle", 
                    Manipulate`Place[59]}, {"tilted offset curve distance", 
                    Manipulate`Place[60]}, {"tilted offset curve count", 
                    Manipulate`Place[61]}, {"tilted offset curve thickness", 
                    Manipulate`Place[62]}, {"tilted offset curve color", 
                    Manipulate`Place[63]}, {"tilted offset curve opacity", 
                    Manipulate`Place[64]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    False}}], Row[{" ", 
                    Dynamic[
                    If[CalculateScan`PlotterScanner`Private`pedalCurveTF$$, 
                    Style[
                    "\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`pedalCurveColor$$, 
                    Bold], " "]], 
                    Tooltip[" pedal curves         ", 
                    Style[
                    " family of pedal curves (curves on the tangents of the \
given curve perpendicular to a given point) ", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> 
                    Grid[{{"show pedal curves", 
                    Manipulate`Place[65]}, {"pedal curve count", 
                    Manipulate`Place[66]}, {"pedal curve thickness", 
                    Manipulate`Place[67]}, {"pedal curve color", 
                    Manipulate`Place[68]}, {"pedal curve opacity", 
                    Manipulate`Place[69]}, {"pedal points", 
                    Manipulate`Place[70]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    True}}], Row[{" ", 
                    Dynamic[
                    If[
                    CalculateScan`PlotterScanner`Private`negativePedalCurveTF$\
$, 
                    Style["\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurveColor$$, Bold], " "]], 
                    Tooltip[" negative pedal curves", 
                    Style[
                    " family of negative pedal curves (envelope curves of \
lines perpendicular to the given curve and a given point) ", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> 
                    Grid[{{"show negative pedal curves", 
                    Manipulate`Place[71]}, {"negative pedal curve count", 
                    Manipulate`Place[72]}, {
                    "negative pedal curve thickness", 
                    Manipulate`Place[73]}, {"negative pedal curve color", 
                    Manipulate`Place[74]}, {"negative pedal curve opacity", 
                    Manipulate`Place[75]}, {"negative pedal points", 
                    Manipulate`Place[76]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    False}}], Row[{" ", 
                    Dynamic[
                    If[
                    CalculateScan`PlotterScanner`Private`contraPedalCurveTF$$, 
                    Style[
                    "\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurveColor$$, Bold], " "]], 
                    Tooltip[" contrapedal curves   ", 
                    Style[
                    " family of contrapedal curves (curves on the normals of \
the given curve perpendicular to a given point) ", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> 
                    Grid[{{"show contrapedal curves", 
                    Manipulate`Place[77]}, {"contrapedal curve count", 
                    Manipulate`Place[78]}, {"contrapedal curve thickness", 
                    Manipulate`Place[79]}, {"contrapedal curve color", 
                    Manipulate`Place[80]}, {"contrapedal curve opacity", 
                    Manipulate`Place[81]}, {"contrapedal pedal points", 
                    Manipulate`Place[82]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    False}}], Row[{" ", 
                    Dynamic[
                    If[CalculateScan`PlotterScanner`Private`dualCurveTF$$, 
                    Style[
                    "\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`dualCurveColor$$, 
                    Bold], " "]], 
                    Tooltip[" dual curves          ", 
                    Style[
                    " dual curve of the given curve (the dual curbe maps \
inflection points to cusps) ", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> 
                    Grid[{{"show dual curves", 
                    Manipulate`Place[83]}, {"dual curve count", 
                    Manipulate`Place[84]}, {"dual curve thickness", 
                    Manipulate`Place[85]}, {"dual curve color", 
                    Manipulate`Place[86]}, {"dual curve opacity", 
                    Manipulate`Place[87]}, {"dual curve points", 
                    Manipulate`Place[88]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    False}}], Row[{" ", 
                    Dynamic[
                    If[
                    CalculateScan`PlotterScanner`Private`inverseCurveTF$$, 
                    Style[
                    "\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`inverseCurveColor$$, 
                    Bold], " "]], 
                    Tooltip[" inverse curves       ", 
                    Style[
                    " inverse curves (curves resulting from carrying of an \
inversion on circles) ", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> 
                    Grid[{{"show inverse curves", 
                    Manipulate`Place[89]}, {"inverse curve count", 
                    Manipulate`Place[90]}, {"inverse curve thickness", 
                    Manipulate`Place[91]}, {"inverse curve color", 
                    Manipulate`Place[92]}, {"inverse curve opacity", 
                    Manipulate`Place[93]}, {"inversion curve points", 
                    Manipulate`Place[94]}, {"inversion circle radius", 
                    Manipulate`Place[95]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    False}}], Row[{" ", 
                    Dynamic[
                    If[
                    CalculateScan`PlotterScanner`Private`isopticCurveTF$$, 
                    Style[
                    "\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`isopticCurveColor$$, 
                    Bold], " "]], 
                    Tooltip[" isoptic curves       ", 
                    Style[
                    " inverse curves (points on isoptic curves have two \
tangents with the given curve and the two tangents meet with the specified \
angle)) ", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> Column[{
                    Grid[{{"show isoptic curves", 
                    Manipulate`Place[96]}, {"isoptic curve angle", 
                    Manipulate`Place[97]}, {"isoptic curve thickness", 
                    Manipulate`Place[98]}, {"isoptic curve color", 
                    Manipulate`Place[99]}, {"isoptic curve opacity", 
                    Manipulate`Place[100]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    False}}], 
                    Dynamic[
                    Style[
                    If[
                    TrueQ[
                    And[
                    CalculateScan`PlotterScanner`Private`isopticCurveTF$$, 
                    CalculateScan`PlotterScanner`Private`x1x2SCPCurves === \
{}]], "(note than the set of isoptic curves for a given angle can be empty)", 
                    ""]], 
                    RGBColor[
                    0.6666666666666666, 0.6666666666666666, 
                    0.6666666666666666]]}, Alignment -> Left], Row[{" ", 
                    Dynamic[
                    If[
                    CalculateScan`PlotterScanner`Private`orthotomicCurveTF$$, 
                    
                    Style[
                    "\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`orthotomicCurveColor$\
$, Bold], " "]], 
                    Tooltip[" orthotomic curves    ", 
                    Style[
                    " orthotomic curves (points of reflections of a given \
point on curve tangents)) ", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> 
                    Grid[{{"show orthotomic curves", 
                    Manipulate`Place[101]}, {"orthotomic curve angle", 
                    Manipulate`Place[102]}, {"orthotomic curve count", 
                    Manipulate`Place[103]}, {"orthotomic curve thickness", 
                    Manipulate`Place[104]}, {"orthotomic curve color", 
                    Manipulate`Place[105]}, {"orthotomic curve opacity", 
                    Manipulate`Place[106]}, {"orthotomic curve points", 
                    Manipulate`Place[107]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    False}}]}, 2, ImageSize -> {All, Automatic}, 
                    ControlPlacement -> Left]}, 
                    Dividers -> {None, {False, True, True, True}}, Spacings -> 
                    1], ItemSize -> Scaled[1], 
                    Frame -> {None, None, True, None}]}}, FrameStyle -> 
                    GrayLevel[0.9], Alignment -> Left, Spacings -> {0, 0.8}], 
                    False -> Button[
                    Row[{
                    RawBoxes[
                    GraphicsBox[
                    TagBox[
                    
                    RasterBox[{{{255, 255, 255}, {255, 255, 255}, {255, 132, 
                    0}, {255, 132, 0}, {255, 255, 255}, {255, 255, 255}}, {{
                    255, 255, 255}, {255, 255, 255}, {255, 132, 0}, {255, 132,
                     0}, {255, 255, 255}, {255, 255, 255}}, {{255, 132, 0}, {
                    255, 132, 0}, {255, 132, 0}, {255, 132, 0}, {255, 132, 
                    0}, {255, 132, 0}}, {{255, 132, 0}, {255, 132, 0}, {255, 
                    132, 0}, {255, 132, 0}, {255, 132, 0}, {255, 132, 0}}, {{
                    255, 255, 255}, {255, 255, 255}, {255, 132, 0}, {255, 132,
                     0}, {255, 255, 255}, {255, 255, 255}}, {{255, 255, 
                    255}, {255, 255, 255}, {255, 132, 0}, {255, 132, 0}, {255,
                     255, 255}, {255, 255, 255}}}, {{0, 6}, {6, 0}}, {0, 255},
                     ColorFunction -> RGBColor], 
                    BoxForm`ImageTag[
                    "Byte", ColorSpace -> "RGB", Interleaving -> True], 
                    Selectable -> False], BaseStyle -> "ImageGraphics", 
                    ImageSize -> Magnification[1], ImageSizeRaw -> {6, 6}, 
                    BaselinePosition -> (Scaled[0.3] -> Center), 
                    PlotRange -> {{0, 6}, {0, 6}}]], " More controls"}], 
                    CalculateUtilities`GraphicsUtilities`Private`more$$ = 
                    True, Appearance -> None, BaseStyle -> {}]}, 
                    Dynamic[
                    CalculateUtilities`GraphicsUtilities`Private`more$$], 
                    ImageSize -> Automatic]}], 
                    ImageMargins -> {{20, 30}, {10, 10}}]}, {1, 2}, 2, 
                    Alignment -> {Left, Top}]], {{
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleLastParamaters$$, {}}, ControlType -> None}, {{
                    CalculateScan`PlotterScanner`Private`osculatingCircles$$, \
{}}, ControlType -> None}, {{
                    CalculateScan`PlotterScanner`Private`\
taylorParabolaLastParamaters$$, {}}, ControlType -> None}, {{
                    CalculateScan`PlotterScanner`Private`taylorParabolas$$, \
{}}, ControlType -> None}, {{
                    CalculateScan`PlotterScanner`Private`\
offsetCurveLastParamaters$$, {}}, ControlType -> None}, {{
                    CalculateScan`PlotterScanner`Private`\
offsetCurvePlotCurves$$, {}}, ControlType -> None}, {{
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveLastParamaters$$, {}}, ControlType -> None}, {{
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurvePlotCurves$$, {}}, ControlType -> None}, {{
                    CalculateScan`PlotterScanner`Private`\
pedalCurveLastParamaters$$, {}}, ControlType -> None}, {{
                    CalculateScan`PlotterScanner`Private`pedalCurvePlotCurves$\
$, {}}, ControlType -> None}, {{
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurveLastParamaters$$, {}}, ControlType -> None}, {{
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurvePlotCurves$$, {}}, ControlType -> None}, {{
                    
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurveLastParamaters$$, {}}, ControlType -> None}, {{
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurvePlotCurves$$, {}}, ControlType -> None}, {{
                    CalculateScan`PlotterScanner`Private`\
dualCurveLastParamaters$$, {}}, ControlType -> None}, {{
                    CalculateScan`PlotterScanner`Private`dualCurvePlotCurves$$\
, {}}, ControlType -> None}, {{
                    CalculateScan`PlotterScanner`Private`\
inverseLastParamaters$$, {}}, ControlType -> None}, {{
                    CalculateScan`PlotterScanner`Private`\
inverseCurvePlotCurves$$, {}}, ControlType -> None}, {{
                    CalculateScan`PlotterScanner`Private`\
orthotomicLastParamaters$$, {}}, ControlType -> None}, {{
                    CalculateScan`PlotterScanner`Private`\
orthotomicCurvePlotCurves$$, {}}, ControlType -> None}, {{
                    CalculateScan`PlotterScanner`Private`\
isopticLastParamaters$$, {}}, ControlType -> None}, {{
                    CalculateScan`PlotterScanner`Private`\
isopticCurvePlotCurves$$, {}}, ControlType -> None}}, 
                  "Options" :> {
                   ControlPlacement -> {
                    Bottom, Bottom, Bottom, Bottom, Bottom, Bottom, Bottom, 
                    Bottom, Bottom, Bottom, Bottom, Bottom, Bottom, Bottom, 
                    Bottom, Bottom, Bottom, Bottom, Bottom, Bottom}, 
                    TrackedSymbols :> Manipulate, Paneled -> False, 
                    ControlPlacement -> Bottom, 
                    FrameMargins -> {{0, 0}, {0, 10}}, Paneled -> False, 
                    AppearanceElements -> {}, 
                    LabelStyle -> {
                    "DialogStyle", FontColor -> GrayLevel[0.25]}}, 
                  "DefaultOptions" :> {}], SingleEvaluation -> True], 
                Initialization :> ({
                  Attributes[CalculateScan`PlotterScanner`Private`x1Old$] = {
                    Temporary}, 
                   Attributes[CalculateScan`PlotterScanner`Private`x2Old$] = {
                    Temporary}, 
                   Attributes[
                    CalculateScan`PlotterScanner`Private`fy1Old$] = {
                    Temporary}, 
                   Attributes[
                    CalculateScan`PlotterScanner`Private`fy2Old$] = {
                    Temporary}, 
                   Attributes[CalculateScan`PlotterScanner`Private`X1$] = {
                    Temporary}, 
                   Attributes[CalculateScan`PlotterScanner`Private`X2$] = {
                    Temporary}, 
                   Attributes[
                    CalculateScan`PlotterScanner`Private`singularities$] = {
                    Temporary}, 
                   Attributes[CalculateScan`PlotterScanner`Private`ts$] = {
                    Temporary}, 
                   Attributes[CalculateScan`PlotterScanner`Private`xL$] = {
                    Temporary}, 
                   Attributes[CalculateScan`PlotterScanner`Private`xU$] = {
                    Temporary}, 
                   Attributes[CalculateScan`PlotterScanner`Private`yL$] = {
                    Temporary}, 
                   Attributes[CalculateScan`PlotterScanner`Private`yU$] = {
                    Temporary}, 
                   Attributes[CalculateScan`PlotterScanner`Private`pRX$] = {
                    Temporary}, 
                   Attributes[
                    CalculateScan`PlotterScanner`Private`\[CapitalDelta]X$] = \
{Temporary}, Attributes[
                    CalculateScan`PlotterScanner`Private`\[CapitalDelta]y$] = \
{Temporary}, Attributes[CalculateScan`PlotterScanner`Private`Y1$] = {
                    Temporary}, 
                   Attributes[CalculateScan`PlotterScanner`Private`Y2$] = {
                    Temporary}, 
                   Attributes[CalculateScan`PlotterScanner`Private`pRY$] = {
                    Temporary}, 
                   Attributes[
                    CalculateScan`PlotterScanner`Private`originalCurvePlot0$] = \
{Temporary}, Attributes[
                    CalculateScan`PlotterScanner`Private`originalCurvePlot$] = \
{Temporary}, Attributes[
                    CalculateScan`PlotterScanner`Private`tangentsLines$] = {
                    Temporary}, 
                   Attributes[
                    CalculateScan`PlotterScanner`Private`tangentLinePlot$] = {
                    Temporary}, 
                   Attributes[
                    CalculateScan`PlotterScanner`Private`normalLines$] = {
                    Temporary}, 
                   Attributes[
                    CalculateScan`PlotterScanner`Private`normalLinePlot$] = {
                    Temporary}, 
                   Attributes[
                    CalculateScan`PlotterScanner`Private`tiltedTangentLines$] = \
{Temporary}, Attributes[
                    CalculateScan`PlotterScanner`Private`\
tiltedTangentLinePlot$] = {Temporary}, 
                   Attributes[
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleRadii$] = {Temporary}, 
                   Attributes[
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleLastParamaters$] = {Temporary}, 
                   Attributes[
                    CalculateScan`PlotterScanner`Private`osculatingCirclePlot$\
] = {Temporary}, Attributes[
                    CalculateScan`PlotterScanner`Private`taylorParabolaPlot$] = \
{Temporary}, Attributes[CalculateScan`PlotterScanner`Private`evolutePlot$] = {
                    Temporary}, 
                   Attributes[
                    CalculateScan`PlotterScanner`Private`involutePlotCurves$] = \
{Temporary}, Attributes[
                    CalculateScan`PlotterScanner`Private`\
involutePlotCurveLastParamaters$] = {Temporary}, 
                   Attributes[
                    CalculateScan`PlotterScanner`Private`involutePlot$] = {
                    Temporary}, 
                   Attributes[CalculateScan`PlotterScanner`Private`iTab$] = {
                    Temporary}, 
                   Attributes[CalculateScan`PlotterScanner`Private`xLi$] = {
                    Temporary}, 
                   Attributes[CalculateScan`PlotterScanner`Private`xUi$] = {
                    Temporary}, 
                   Attributes[
                    CalculateScan`PlotterScanner`Private`arcLength$] = {
                    Temporary}, 
                   Attributes[CalculateScan`PlotterScanner`Private`arcL$] = {
                    Temporary}, 
                   Attributes[CalculateScan`PlotterScanner`Private`xi1$] = {
                    Temporary}, 
                   Attributes[CalculateScan`PlotterScanner`Private`xi2$] = {
                    Temporary}, 
                   Attributes[
                    CalculateScan`PlotterScanner`Private`lineSegments$] = {
                    Temporary}, 
                   Attributes[
                    CalculateScan`PlotterScanner`Private`baseSegments$] = {
                    Temporary}, 
                   Attributes[
                    CalculateScan`PlotterScanner`Private`oSegments$] = {
                    Temporary}, 
                   Attributes[
                    CalculateScan`PlotterScanner`Private`arcFactors$] = {
                    Temporary}, 
                   Attributes[
                    CalculateScan`PlotterScanner`Private`iTabRight$] = {
                    Temporary}, 
                   Attributes[
                    CalculateScan`PlotterScanner`Private`iTabLeft$] = {
                    Temporary}, 
                   Attributes[
                    CalculateScan`PlotterScanner`Private`signedArcFactors$] = \
{Temporary}, Attributes[CalculateScan`PlotterScanner`Private`curvePoints$] = {
                    Temporary}, 
                   CalculateScan`PlotterScanner`Private`addTangents[{
                    Pattern[CalculateScan`PlotterScanner`Private`fD0, 
                    Blank[]], 
                    Pattern[CalculateScan`PlotterScanner`Private`fD1, 
                    Blank[]]}, {
                    Pattern[CalculateScan`PlotterScanner`Private`x, 
                    Blank[]], 
                    Pattern[CalculateScan`PlotterScanner`Private`xMin, 
                    Blank[]], 
                    Pattern[CalculateScan`PlotterScanner`Private`xMax, 
                    Blank[]]}, 
                    Pattern[CalculateScan`PlotterScanner`Private`n, 
                    Blank[]], 
                    Pattern[CalculateScan`PlotterScanner`Private`opts, 
                    OptionsPattern[]]] := Quiet[
                    
                    Module[{}, 
                    CalculateScan`PlotterScanner`Private`\[Alpha] = 
                    OptionValue["TiltAngle"]; 
                    CalculateScan`PlotterScanner`Private`f = 
                    OptionValue["LengthFactor"]; 
                    CalculateScan`PlotterScanner`Private`bdq = 
                    OptionValue["Bidirectional"]; 
                    CalculateScan`PlotterScanner`Private`L = 
                    CalculateScan`PlotterScanner`Private`xMax - 
                    CalculateScan`PlotterScanner`Private`xMin; 
                    CalculateScan`PlotterScanner`Private`M = {{
                    Cos[CalculateScan`PlotterScanner`Private`\[Alpha]], 
                    Sin[CalculateScan`PlotterScanner`Private`\[Alpha]]}, {-
                    Sin[CalculateScan`PlotterScanner`Private`\[Alpha]], 
                    Cos[CalculateScan`PlotterScanner`Private`\[Alpha]]}}; 
                    CalculateScan`PlotterScanner`Private`pointsAndDirections = 
                    Cases[
                    Chop[
                    N[
                    Table[{{CalculateScan`PlotterScanner`Private`x, 
                    CalculateScan`PlotterScanner`Private`fD0[
                    CalculateScan`PlotterScanner`Private`x]}, (
                    CalculateScan`PlotterScanner`Private`f 
                    CalculateScan`PlotterScanner`Private`L) 
                    Dot[CalculateScan`PlotterScanner`Private`M, 
                    Normalize[{1, 
                    CalculateScan`PlotterScanner`Private`fD1[
                    CalculateScan`PlotterScanner`Private`x]}]]}, {
                    CalculateScan`PlotterScanner`Private`x, 
                    CalculateScan`PlotterScanner`Private`xMin, 
                    CalculateScan`PlotterScanner`Private`xMax, (
                    CalculateScan`PlotterScanner`Private`xMax - 
                    CalculateScan`PlotterScanner`Private`xMin)/
                    CalculateScan`PlotterScanner`Private`n}]]], {{
                    Blank[Real], 
                    Blank[Real]}, {
                    Blank[Real], 
                    Blank[Real]}}]; 
                    If[CalculateScan`PlotterScanner`Private`bdq === False, 
                    Line[
                    
                    Apply[{#, # + #2}& , 
                    CalculateScan`PlotterScanner`Private`pointsAndDirections, \
{1}]], 
                    Line[
                    
                    Apply[{# - #2, # + #2}& , 
                    CalculateScan`PlotterScanner`Private`pointsAndDirections, \
{1}]]]]], Options[CalculateScan`PlotterScanner`Private`addTangents] = {
                    "TiltAngle" -> 0, "LengthFactor" -> 1, "Bidirectional" -> 
                    True}, CalculateScan`PlotterScanner`Private`\
addOsculatingCircles[{
                    Pattern[CalculateScan`PlotterScanner`Private`fD0, 
                    Blank[]], 
                    Pattern[CalculateScan`PlotterScanner`Private`fD1, 
                    Blank[]], 
                    Pattern[CalculateScan`PlotterScanner`Private`fD2, 
                    Blank[]]}, {
                    Pattern[CalculateScan`PlotterScanner`Private`x, 
                    Blank[]], 
                    Pattern[CalculateScan`PlotterScanner`Private`xMin, 
                    Blank[]], 
                    Pattern[CalculateScan`PlotterScanner`Private`xMax, 
                    Blank[]]}, 
                    Pattern[CalculateScan`PlotterScanner`Private`n, 
                    Blank[]]] := Quiet[
                    
                    Module[{}, 
                    CalculateScan`PlotterScanner`Private`centersAndRadii = 
                    Cases[
                    N[
                    Chop[
                    N[
                    Table[{{CalculateScan`PlotterScanner`Private`x, 
                    CalculateScan`PlotterScanner`Private`fD0[
                    CalculateScan`PlotterScanner`Private`x]} + ({-
                    CalculateScan`PlotterScanner`Private`fD1[
                    CalculateScan`PlotterScanner`Private`x], 1} (1 + 
                    CalculateScan`PlotterScanner`Private`fD1[
                    CalculateScan`PlotterScanner`Private`x]^2))/
                    CalculateScan`PlotterScanner`Private`fD2[
                    CalculateScan`PlotterScanner`Private`x], 
                    Abs[
                    1/(CalculateScan`PlotterScanner`Private`fD2[
                    CalculateScan`PlotterScanner`Private`x]/(1 + 
                    CalculateScan`PlotterScanner`Private`fD1[
                    CalculateScan`PlotterScanner`Private`x]^2)^(3/2))]}, {
                    CalculateScan`PlotterScanner`Private`x, 
                    CalculateScan`PlotterScanner`Private`xMin, 
                    CalculateScan`PlotterScanner`Private`xMax, (
                    CalculateScan`PlotterScanner`Private`xMax - 
                    CalculateScan`PlotterScanner`Private`xMin)/
                    CalculateScan`PlotterScanner`Private`n}]]]], {{
                    Blank[Real], 
                    Blank[Real]}, 
                    Blank[Real]}]; 
                    Apply[Circle, 
                    CalculateScan`PlotterScanner`Private`centersAndRadii, {
                    1}]]], CalculateScan`PlotterScanner`Private`\
addOsculatingCircleRadii[{
                    Pattern[CalculateScan`PlotterScanner`Private`fD0, 
                    Blank[]], 
                    Pattern[CalculateScan`PlotterScanner`Private`fD1, 
                    Blank[]], 
                    Pattern[CalculateScan`PlotterScanner`Private`fD2, 
                    Blank[]]}, {
                    Pattern[CalculateScan`PlotterScanner`Private`x, 
                    Blank[]], 
                    Pattern[CalculateScan`PlotterScanner`Private`xMin, 
                    Blank[]], 
                    Pattern[CalculateScan`PlotterScanner`Private`xMax, 
                    Blank[]]}, 
                    Pattern[CalculateScan`PlotterScanner`Private`n, 
                    Blank[]]] := Quiet[
                    
                    Module[{}, 
                    CalculateScan`PlotterScanner`Private`\
touchPointsAndCenters = Cases[
                    Chop[
                    N[
                    Table[{{CalculateScan`PlotterScanner`Private`x, 
                    CalculateScan`PlotterScanner`Private`fD0[
                    CalculateScan`PlotterScanner`Private`x]}, {
                    CalculateScan`PlotterScanner`Private`x, 
                    CalculateScan`PlotterScanner`Private`fD0[
                    CalculateScan`PlotterScanner`Private`x]} + ({-
                    CalculateScan`PlotterScanner`Private`fD1[
                    CalculateScan`PlotterScanner`Private`x], 1} (1 + 
                    CalculateScan`PlotterScanner`Private`fD1[
                    CalculateScan`PlotterScanner`Private`x]^2))/
                    CalculateScan`PlotterScanner`Private`fD2[
                    CalculateScan`PlotterScanner`Private`x]}, {
                    CalculateScan`PlotterScanner`Private`x, 
                    CalculateScan`PlotterScanner`Private`xMin, 
                    CalculateScan`PlotterScanner`Private`xMax, (
                    CalculateScan`PlotterScanner`Private`xMax - 
                    CalculateScan`PlotterScanner`Private`xMin)/
                    CalculateScan`PlotterScanner`Private`n}]]], {{
                    Blank[Real], 
                    Blank[Real]}, {
                    Blank[Real], 
                    Blank[Real]}}]; 
                    Line[CalculateScan`PlotterScanner`Private`\
touchPointsAndCenters]]], 
                   CalculateScan`PlotterScanner`Private`addTaylorParabolas[{
                    Pattern[CalculateScan`PlotterScanner`Private`fD0, 
                    Blank[]], 
                    Pattern[CalculateScan`PlotterScanner`Private`fD1, 
                    Blank[]], 
                    Pattern[CalculateScan`PlotterScanner`Private`fD2, 
                    Blank[]]}, {
                    Pattern[CalculateScan`PlotterScanner`Private`x, 
                    Blank[]], 
                    Pattern[CalculateScan`PlotterScanner`Private`xMin, 
                    Blank[]], 
                    Pattern[CalculateScan`PlotterScanner`Private`xMax, 
                    Blank[]]}, 
                    Pattern[CalculateScan`PlotterScanner`Private`n, 
                    Blank[]]] := Quiet[
                    
                    Module[{}, 
                    CalculateScan`PlotterScanner`Private`parabolas = 
                    Table[CalculateScan`PlotterScanner`Private`fD0[
                    CalculateScan`PlotterScanner`Private`y] + 
                    CalculateScan`PlotterScanner`Private`fD1[
                    CalculateScan`PlotterScanner`Private`y] (
                    CalculateScan`PlotterScanner`Private`x - 
                    CalculateScan`PlotterScanner`Private`y) + (
                    CalculateScan`PlotterScanner`Private`fD2[
                    CalculateScan`PlotterScanner`Private`y] (
                    CalculateScan`PlotterScanner`Private`x - 
                    CalculateScan`PlotterScanner`Private`y)^2)/2, {
                    CalculateScan`PlotterScanner`Private`y, 
                    CalculateScan`PlotterScanner`Private`xMin, 
                    CalculateScan`PlotterScanner`Private`xMax, (
                    CalculateScan`PlotterScanner`Private`xMax - 
                    CalculateScan`PlotterScanner`Private`xMin)/
                    CalculateScan`PlotterScanner`Private`n}]; Cases[
                    Plot[
                    Evaluate[
                    CalculateScan`PlotterScanner`Private`parabolas], {
                    CalculateScan`PlotterScanner`Private`x, 
                    CalculateScan`PlotterScanner`Private`xMin, 
                    CalculateScan`PlotterScanner`Private`xMax}], 
                    Blank[Line], Infinity]]], 
                   Attributes[Derivative] = {NHoldAll, ReadProtected}, 
                   Attributes[
                    CalculateScan`PlotterScanner`Private`maxDist$] = {
                    Temporary}, 
                   Attributes[CalculateScan`PlotterScanner`Private`M$] = {
                    Temporary}, 
                   Attributes[
                    CalculateScan`PlotterScanner`Private`pedalCurveCount$] = {
                    Temporary}, 
                   Attributes[CalculateScan`PlotterScanner`Private`px$] = {
                    Temporary}, 
                   Attributes[CalculateScan`PlotterScanner`Private`py$] = {
                    Temporary}, 
                   Attributes[
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurveCount$] = {Temporary}, 
                   Attributes[
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurveCount$] = {Temporary}, 
                   Attributes[
                    CalculateScan`PlotterScanner`Private`dualCurveCount$] = {
                    Temporary}, 
                   Attributes[
                    CalculateScan`PlotterScanner`Private`inverseCurveCount$] = \
{Temporary}, Attributes[CalculateScan`PlotterScanner`Private`R$] = {
                    Temporary}, 
                   Attributes[
                    CalculateScan`PlotterScanner`Private`orthotomicCurveCount$\
] = {Temporary}, Attributes[
                    CalculateScan`PlotterScanner`Private`\[Alpha]$] = {
                    Temporary}, 
                   CalculateScan`PlotterScanner`Private`\
tangentIntersectionPoint[{
                    Pattern[CalculateScan`PlotterScanner`Private`x1, 
                    Blank[]], 
                    Pattern[CalculateScan`PlotterScanner`Private`x2, 
                    Blank[]]}, {
                    Pattern[CalculateScan`PlotterScanner`Private`fD0, 
                    Blank[]], 
                    Pattern[CalculateScan`PlotterScanner`Private`fD1, 
                    Blank[]]}] := {(-
                    CalculateScan`PlotterScanner`Private`fD0[
                    CalculateScan`PlotterScanner`Private`x1] + 
                    CalculateScan`PlotterScanner`Private`fD0[
                    CalculateScan`PlotterScanner`Private`x2] + 
                    CalculateScan`PlotterScanner`Private`x1 
                    CalculateScan`PlotterScanner`Private`fD1[
                    CalculateScan`PlotterScanner`Private`x1] - 
                    CalculateScan`PlotterScanner`Private`x2 
                    CalculateScan`PlotterScanner`Private`fD1[
                    CalculateScan`PlotterScanner`Private`x2])/(
                    CalculateScan`PlotterScanner`Private`fD1[
                    CalculateScan`PlotterScanner`Private`x1] - 
                    CalculateScan`PlotterScanner`Private`fD1[
                    CalculateScan`PlotterScanner`Private`x2]), 
                    CalculateScan`PlotterScanner`Private`fD0[
                    CalculateScan`PlotterScanner`Private`x1] + (
                    CalculateScan`PlotterScanner`Private`fD1[
                    CalculateScan`PlotterScanner`Private`x1] (-
                    CalculateScan`PlotterScanner`Private`fD0[
                    CalculateScan`PlotterScanner`Private`x1] + 
                    CalculateScan`PlotterScanner`Private`fD0[
                    CalculateScan`PlotterScanner`Private`x2] + (
                    CalculateScan`PlotterScanner`Private`x1 - 
                    CalculateScan`PlotterScanner`Private`x2) 
                    CalculateScan`PlotterScanner`Private`fD1[
                    CalculateScan`PlotterScanner`Private`x2]))/(
                    CalculateScan`PlotterScanner`Private`fD1[
                    CalculateScan`PlotterScanner`Private`x1] - 
                    CalculateScan`PlotterScanner`Private`fD1[
                    CalculateScan`PlotterScanner`Private`x2])}, 
                   Attributes[RawBoxes] = {ReadProtected}, 
                   Attributes[Subscript] = {NHoldRest}}; 
                 Typeset`initDone$$ = True), DynamicModuleValues :> {}, 
                Deinitialization :> None, 
                UntrackedVariables :> {Typeset`size$$}, 
                SynchronousInitialization -> True, 
                UnsavedVariables :> {Typeset`initDone$$}], "Manipulate", 
               Deployed -> True, StripOnInput -> False], TraditionalForm], 
             Manipulate`InterpretManipulate[1]], TraditionalForm]], 
          "Output"]}], 
       XMLElement["dataformats", {}, {}]}], 
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["cell", {"compressed" -> True, "string" -> False}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             FormBox[
              StyleBox[
               
               DynamicModuleBox[{
                CalculateUtilities`GraphicsUtilities`Private`more$$ = False, 
                 CalculateScan`PlotterScanner`Private`Sa$$ = True, 
                 CalculateScan`PlotterScanner`Private`Sat$$ = False, 
                 CalculateScan`PlotterScanner`Private`SC$$ = True, 
                 Global`sc1$$ = ArcTan[
                   Rational[1, 8]], Global`sc1max$$ = ArcTan[
                   Rational[5, 4]], Global`sc1min$$ = -ArcTan[
                    Rational[3, 4]], Global`sc2$$ = -ArcTan[
                    Rational[1, 8]], Global`sc2max$$ = ArcTan[
                   Rational[3, 4]], Global`sc2min$$ = -ArcTan[
                    Rational[5, 4]], Global`scColor1$$ = 
                 RGBColor[0.24720000000000014`, 0.24, 0.6], Global`scColor2$$ = 
                 RGBColor[0.6, 0.24, 0.4428931686004542], Global`scCount1$$ = 
                 12, Global`scCount2$$ = 12, Global`scTF1$$ = True, 
                 Global`scTF2$$ = False, 
                 CalculateScan`PlotterScanner`Private`x1$$ = \
-0.7853981633974483, CalculateScan`PlotterScanner`Private`x2$$ = 
                 0.7853981633974483, Typeset`show$$ = True, 
                 Typeset`bookmarkList$$ = {}, Typeset`bookmarkMode$$ = "Menu",
                  Typeset`animator$$, Typeset`animvar$$ = 1, Typeset`name$$ = 
                 "\"untitled\"", Typeset`specs$$ = {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`more$$], {
                    False, True}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`x1$$], \
-0.7853981633974483, 
                    Subscript[
                    Style["x", Italic], "min"]}, -1.5692255304681018`, 
                    1.5692255304681018`}, {{
                    Hold[CalculateScan`PlotterScanner`Private`x2$$], 
                    0.7853981633974483, 
                    Subscript[
                    Style["x", Italic], "max"]}, -1.5692255304681018`, 
                    1.5692255304681018`}, {{
                    Hold[CalculateScan`PlotterScanner`Private`Sa$$], True, 
                    "show axes"}, {True, False}}, {{
                    Hold[CalculateScan`PlotterScanner`Private`Sat$$], False, 
                    "show ticks"}, {True, False}}, {{
                    Hold[Global`sc1$$], 
                    ArcTan[
                    Rational[1, 8]], 
                    Row[{
                    Subscript[
                    RawBoxes["c"], 1], " value"}]}, -1.5692255304681018`, 
                    1.5692255304681018`}, {{
                    Hold[Global`sc2$$], -ArcTan[
                    Rational[1, 8]], 
                    Row[{
                    Subscript[
                    RawBoxes["c"], 2], " value"}]}, -1.5692255304681018`, 
                    1.5692255304681018`}, {{
                    Hold[CalculateScan`PlotterScanner`Private`SC$$], True, 
                    "show single curve"}, {True, False}}, {{
                    Hold[Global`scTF1$$], True, 
                    Row[{"show ", 
                    Subscript[
                    RawBoxes["c"], 1], " family"}]}, {True, False}}, {{
                    Hold[Global`scColor1$$], 
                    RGBColor[0.24720000000000014`, 0.24, 0.6], " color"}, 
                    RGBColor[1, 0, 0]}, {{
                    Hold[Global`sc1min$$], -ArcTan[
                    Rational[3, 4]], 
                    Subscript[
                    RawBoxes["c"], 1, "min"]}, -1.5692255304681018`, 
                    1.5692255304681018`}, {{
                    Hold[Global`sc1max$$], 
                    ArcTan[
                    Rational[5, 4]], 
                    Subscript[
                    RawBoxes["c"], 1, "max"]}, -1.5692255304681018`, 
                    1.5692255304681018`}, {{
                    Hold[Global`scCount1$$], 12, " curve count"}, 2, 60, 1}, {{
                    Hold[Global`scTF2$$], False, 
                    Row[{"show ", 
                    Subscript[
                    RawBoxes["c"], 2], " family"}]}, {True, False}}, {{
                    Hold[Global`scColor2$$], 
                    RGBColor[0.6, 0.24, 0.4428931686004542], " color"}, 
                    RGBColor[1, 0, 0]}, {{
                    Hold[Global`sc2min$$], -ArcTan[
                    Rational[5, 4]], 
                    Subscript[
                    RawBoxes["c"], 2, "min"]}, -1.5692255304681018`, 
                    1.5692255304681018`}, {{
                    Hold[Global`sc2max$$], 
                    ArcTan[
                    Rational[3, 4]], 
                    Subscript[
                    RawBoxes["c"], 2, "max"]}, -1.5692255304681018`, 
                    1.5692255304681018`}, {{
                    Hold[Global`scCount2$$], 12, " curve count"}, 2, 60, 1}, {
                   
                    Hold[
                    Style[
                    Overlay[{
                    RawBoxes[
                    PaneBox[
                    GraphicsBox[
                    
                    RasterBox[{{{0, 0, 0, 24}}, {{0, 0, 0, 9}}, {{0, 0, 0, 
                    10}}, {{0, 0, 0, 10}}, {{0, 0, 0, 9}}, {{0, 0, 0, 9}}, {{
                    0, 0, 0, 8}}, {{0, 0, 0, 8}}, {{0, 0, 0, 9}}, {{0, 0, 0, 
                    8}}, {{0, 0, 0, 7}}, {{0, 0, 0, 7}}, {{0, 0, 0, 8}}, {{0, 
                    0, 0, 6}}, {{0, 0, 0, 6}}, {{0, 0, 0, 6}}, {{0, 0, 0, 
                    6}}, {{0, 0, 0, 5}}, {{0, 0, 0, 6}}, {{0, 0, 0, 5}}, {{0, 
                    0, 0, 4}}, {{0, 0, 0, 4}}, {{0, 0, 0, 5}}, {{0, 0, 0, 
                    5}}, {{0, 0, 0, 3}}, {{0, 0, 0, 4}}, {{0, 0, 0, 3}}, {{0, 
                    0, 0, 3}}, {{0, 0, 0, 3}}, {{0, 0, 0, 3}}, {{0, 0, 0, 
                    2}}, {{0, 0, 0, 2}}, {{0, 0, 0, 2}}, {{0, 0, 0, 2}}, {{0, 
                    0, 0, 1}}, {{0, 0, 0, 2}}, {{0, 0, 0, 2}}, {{0, 0, 0, 
                    0}}, {{0, 0, 0, 1}}, {{255, 255, 255, 0}}, {{255, 255, 
                    255, 0}}, {{255, 255, 255, 0}}, {{255, 255, 255, 0}}, {{
                    255, 255, 255, 0}}, {{255, 255, 255, 0}}}, {{0, 45}, {
                    2500, 0}}, {0, 255}, ColorFunction -> RGBColor], 
                    ImageSize -> {2500, 45}, 
                    PlotRange -> {{0, 2500}, {0, 45}}], ImageSize -> 
                    Scaled[1], ScrollPosition -> {0., 0.}]], 
                    Pane[
                    Column[{
                    Row[{
                    Invisible[
                    RawBoxes[
                    GraphicsBox[
                    TagBox[
                    
                    RasterBox[{{{255, 132, 0}, {255, 132, 0}, {255, 132, 0}, {
                    255, 132, 0}, {255, 132, 0}, {255, 132, 0}}, {{255, 132, 
                    0}, {255, 132, 0}, {255, 132, 0}, {255, 132, 0}, {255, 
                    132, 0}, {255, 132, 0}}}, {{0, 2}, {6, 0}}, {0, 255}, 
                    ColorFunction -> RGBColor], 
                    BoxForm`ImageTag[
                    "Byte", ColorSpace -> "RGB", Interleaving -> True], 
                    Selectable -> False], BaseStyle -> "ImageGraphics", 
                    ImageSize -> Magnification[1], ImageSizeRaw -> {6, 2}, 
                    BaselinePosition -> (Scaled[0] -> Center), 
                    PlotRange -> {{0, 6}, {0, 2}}]]], " ", 
                    Column[{"Horizontal plot range", 
                    Row[{
                    Manipulate`Place[1], "  ", 
                    Manipulate`Place[2]}], 
                    Row[{
                    Manipulate`Place[3], "  ", 
                    Manipulate`Place[4]}]}]}], 
                    PaneSelector[{True -> Grid[{{
                    Button[
                    Row[{
                    RawBoxes[
                    GraphicsBox[
                    TagBox[
                    
                    RasterBox[{{{255, 132, 0}, {255, 132, 0}, {255, 132, 0}, {
                    255, 132, 0}, {255, 132, 0}, {255, 132, 0}}, {{255, 132, 
                    0}, {255, 132, 0}, {255, 132, 0}, {255, 132, 0}, {255, 
                    132, 0}, {255, 132, 0}}}, {{0, 2}, {6, 0}}, {0, 255}, 
                    ColorFunction -> RGBColor], 
                    BoxForm`ImageTag[
                    "Byte", ColorSpace -> "RGB", Interleaving -> True], 
                    Selectable -> False], BaseStyle -> "ImageGraphics", 
                    ImageSize -> Magnification[1], ImageSizeRaw -> {6, 2}, 
                    BaselinePosition -> (Scaled[0] -> Center), 
                    PlotRange -> {{0, 6}, {0, 2}}]], " "}], 
                    CalculateUtilities`GraphicsUtilities`Private`more$$ = 
                    False, Appearance -> None, BaseStyle -> {}], 
                    Button[
                    "Fewer controls", 
                    CalculateUtilities`GraphicsUtilities`Private`more$$ = 
                    False, Appearance -> None, BaseStyle -> {}]}, {"", 
                    Item[
                    Column[{
                    Style["Curve parameters", Plain], 
                    Column[{
                    Manipulate`Place[5], 
                    Manipulate`Place[6]}], 
                    Manipulate`Place[7], 
                    Style["Show curve families", Plain], 
                    Column[{
                    Row[{
                    Manipulate`Place[8], " | ", 
                    Manipulate`Place[9]}], 
                    Row[{
                    Manipulate`Place[10], "  ", 
                    Manipulate`Place[11], "  ", 
                    Manipulate`Place[12]}], 
                    Row[{
                    Manipulate`Place[13], " | ", 
                    Manipulate`Place[14]}], 
                    Row[{
                    Manipulate`Place[15], "  ", 
                    Manipulate`Place[16], "  ", 
                    Manipulate`Place[17]}]}]}], ItemSize -> Scaled[1], 
                    Frame -> {None, None, True, None}]}}, FrameStyle -> 
                    GrayLevel[0.9], Alignment -> Left, Spacings -> {0, 0.8}], 
                    False -> Button[
                    Row[{
                    RawBoxes[
                    GraphicsBox[
                    TagBox[
                    
                    RasterBox[{{{255, 255, 255}, {255, 255, 255}, {255, 132, 
                    0}, {255, 132, 0}, {255, 255, 255}, {255, 255, 255}}, {{
                    255, 255, 255}, {255, 255, 255}, {255, 132, 0}, {255, 132,
                     0}, {255, 255, 255}, {255, 255, 255}}, {{255, 132, 0}, {
                    255, 132, 0}, {255, 132, 0}, {255, 132, 0}, {255, 132, 
                    0}, {255, 132, 0}}, {{255, 132, 0}, {255, 132, 0}, {255, 
                    132, 0}, {255, 132, 0}, {255, 132, 0}, {255, 132, 0}}, {{
                    255, 255, 255}, {255, 255, 255}, {255, 132, 0}, {255, 132,
                     0}, {255, 255, 255}, {255, 255, 255}}, {{255, 255, 
                    255}, {255, 255, 255}, {255, 132, 0}, {255, 132, 0}, {255,
                     255, 255}, {255, 255, 255}}}, {{0, 6}, {6, 0}}, {0, 255},
                     ColorFunction -> RGBColor], 
                    BoxForm`ImageTag[
                    "Byte", ColorSpace -> "RGB", Interleaving -> True], 
                    Selectable -> False], BaseStyle -> "ImageGraphics", 
                    ImageSize -> Magnification[1], ImageSizeRaw -> {6, 6}, 
                    BaselinePosition -> (Scaled[0.3] -> Center), 
                    PlotRange -> {{0, 6}, {0, 6}}]], " More controls"}], 
                    CalculateUtilities`GraphicsUtilities`Private`more$$ = 
                    True, Appearance -> None, BaseStyle -> {}]}, 
                    Dynamic[
                    CalculateUtilities`GraphicsUtilities`Private`more$$], 
                    ImageSize -> Automatic]}], 
                    ImageMargins -> {{20, 30}, {10, 10}}]}, {1, 2}, 2, 
                    Alignment -> {Left, Top}]]], 
                    Manipulate`Dump`ThisIsNotAControl}}, Typeset`size$$ = 
                 Automatic, Typeset`update$$ = 0, Typeset`initDone$$ = False, 
                 Typeset`skipInitDone$$ = False, 
                 CalculateUtilities`GraphicsUtilities`Private`more$135592$$ = 
                 False, CalculateScan`PlotterScanner`Private`x1$135593$$ = 0, 
                 CalculateScan`PlotterScanner`Private`x2$135594$$ = 0, 
                 CalculateScan`PlotterScanner`Private`Sa$135595$$ = False, 
                 CalculateScan`PlotterScanner`Private`Sat$135596$$ = False, 
                 Global`sc1$135597$$ = 0, Global`sc2$135598$$ = 0, 
                 CalculateScan`PlotterScanner`Private`SC$135599$$ = False, 
                 Global`sc1min$135600$$ = 0, Global`sc1max$135601$$ = 0, 
                 Global`scCount1$135602$$ = 0, Global`sc2min$135603$$ = 0, 
                 Global`sc2max$135604$$ = 0, Global`scCount2$135605$$ = 0}, 
                DynamicBox[
                 Manipulate`ManipulateBoxes[
                 2, TraditionalForm, 
                  "Variables" :> {
                   CalculateUtilities`GraphicsUtilities`Private`more$$ = 
                    False, CalculateScan`PlotterScanner`Private`Sa$$ = True, 
                    CalculateScan`PlotterScanner`Private`Sat$$ = False, 
                    CalculateScan`PlotterScanner`Private`SC$$ = True, 
                    Global`sc1$$ = ArcTan[
                    Rational[1, 8]], Global`sc1max$$ = ArcTan[
                    Rational[5, 4]], Global`sc1min$$ = -ArcTan[
                    Rational[3, 4]], Global`sc2$$ = -ArcTan[
                    Rational[1, 8]], Global`sc2max$$ = ArcTan[
                    Rational[3, 4]], Global`sc2min$$ = -ArcTan[
                    Rational[5, 4]], Global`scColor1$$ = 
                    RGBColor[0.24720000000000014`, 0.24, 0.6], 
                    Global`scColor2$$ = 
                    RGBColor[0.6, 0.24, 0.4428931686004542], 
                    Global`scCount1$$ = 12, Global`scCount2$$ = 12, 
                    Global`scTF1$$ = True, Global`scTF2$$ = False, 
                    CalculateScan`PlotterScanner`Private`x1$$ = \
-0.7853981633974483, CalculateScan`PlotterScanner`Private`x2$$ = 
                    0.7853981633974483}, "ControllerVariables" :> {
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`more$$, 
                    CalculateUtilities`GraphicsUtilities`Private`more$135592$$\
, False], 
                    Hold[
                    CalculateScan`PlotterScanner`Private`x1$$, 
                    CalculateScan`PlotterScanner`Private`x1$135593$$, 0], 
                    Hold[
                    CalculateScan`PlotterScanner`Private`x2$$, 
                    CalculateScan`PlotterScanner`Private`x2$135594$$, 0], 
                    Hold[
                    CalculateScan`PlotterScanner`Private`Sa$$, 
                    CalculateScan`PlotterScanner`Private`Sa$135595$$, False], 
                    
                    Hold[
                    CalculateScan`PlotterScanner`Private`Sat$$, 
                    CalculateScan`PlotterScanner`Private`Sat$135596$$, False], 
                    Hold[Global`sc1$$, Global`sc1$135597$$, 0], 
                    Hold[Global`sc2$$, Global`sc2$135598$$, 0], 
                    Hold[
                    CalculateScan`PlotterScanner`Private`SC$$, 
                    CalculateScan`PlotterScanner`Private`SC$135599$$, False], 
                    
                    Hold[Global`sc1min$$, Global`sc1min$135600$$, 0], 
                    Hold[Global`sc1max$$, Global`sc1max$135601$$, 0], 
                    Hold[Global`scCount1$$, Global`scCount1$135602$$, 0], 
                    Hold[Global`sc2min$$, Global`sc2min$135603$$, 0], 
                    Hold[Global`sc2max$$, Global`sc2max$135604$$, 0], 
                    Hold[Global`scCount2$$, Global`scCount2$135605$$, 0]}, 
                  "OtherVariables" :> {
                   Typeset`show$$, Typeset`bookmarkList$$, 
                    Typeset`bookmarkMode$$, Typeset`animator$$, 
                    Typeset`animvar$$, Typeset`name$$, Typeset`specs$$, 
                    Typeset`size$$, Typeset`update$$, Typeset`initDone$$, 
                    Typeset`skipInitDone$$}, "Body" :> 
                  Module[{
                    CalculateScan`PlotterScanner`Private`x1L$, 
                    CalculateScan`PlotterScanner`Private`x2L$, 
                    CalculateScan`PlotterScanner`Private`xL$, 
                    CalculateScan`PlotterScanner`Private`xU$, 
                    CalculateScan`PlotterScanner`Private`yL$, 
                    CalculateScan`PlotterScanner`Private`yU$, 
                    CalculateScan`PlotterScanner`Private`\[CapitalDelta]y$, 
                    CalculateScan`PlotterScanner`Private`pRY$, 
                    CalculateScan`PlotterScanner`Private`originalCurvePlot$, 
                    CalculateScan`PlotterScanner`Private`\
curveParametersAndColorsToPlot$, 
                    CalculateScan`PlotterScanner`Private`embeddingCurvePlots$,
                     CalculateScan`PlotterScanner`Private`curveParameterLists$\
, CalculateScan`PlotterScanner`Private`colorLists$, 
                    CalculateScan`PlotterScanner`Private`\
functionsToPlotHeldList$}, 
                    CalculateScan`PlotterScanner`Private`\
curveParametersAndColorsToPlot$ = Flatten[
                    N[
                    Join[
                    If[
                    CalculateScan`PlotterScanner`Private`SC$$ === True, {
                    Tan[{Global`sc1$$, Global`sc2$$}] -> 
                    Directive[Gray]}, {}], 
                    Table[
                    If[
                    Part[{Global`scTF1$$, Global`scTF2$$}, 
                    CalculateScan`PlotterScanner`Private`j] === True, 
                    Table[MapAt[Tan[
                    
                    Part[{{Global`sc1min$$, Global`sc1max$$}, {
                    Global`sc2min$$, Global`sc2max$$}}, 
                    CalculateScan`PlotterScanner`Private`j, 1]] + ((
                    CalculateScan`PlotterScanner`Private`i - 1) (Tan[
                    
                    Part[{{Global`sc1min$$, Global`sc1max$$}, {
                    Global`sc2min$$, Global`sc2max$$}}, 
                    CalculateScan`PlotterScanner`Private`j, 2]] - Tan[
                    
                    Part[{{Global`sc1min$$, Global`sc1max$$}, {
                    Global`sc2min$$, Global`sc2max$$}}, 
                    CalculateScan`PlotterScanner`Private`j, 1]]))/(
                    Part[{Global`scCount1$$, Global`scCount2$$}, 
                    CalculateScan`PlotterScanner`Private`j] - 1)& , {
                    Global`sc1$$, Global`sc2$$}, 
                    CalculateScan`PlotterScanner`Private`j] -> 
                    Part[{Global`scColor1$$, Global`scColor2$$}, 
                    CalculateScan`PlotterScanner`Private`j], {
                    CalculateScan`PlotterScanner`Private`i, 1, 
                    Part[{Global`scCount1$$, Global`scCount2$$}, 
                    CalculateScan`PlotterScanner`Private`j] - 1}], {}], {
                    CalculateScan`PlotterScanner`Private`j, 2}]]]]; 
                    If[CalculateScan`PlotterScanner`Private`\
curveParametersAndColorsToPlot$ === {}, 
                    CalculateScan`PlotterScanner`Private`embeddingCurvePlots$ = \
{}, {CalculateScan`PlotterScanner`Private`curveParameterLists$, 
                    CalculateScan`PlotterScanner`Private`colorLists$} = 
                    Transpose[
                    ReplaceAll[
                    Flatten[
                    CalculateScan`PlotterScanner`Private`\
curveParametersAndColorsToPlot$], Rule -> List]]; 
                    CalculateScan`PlotterScanner`Private`x1L$ = 
                    CalculateScan`PlotterScanner`Private`x1$$; 
                    CalculateScan`PlotterScanner`Private`x2L$ = 
                    If[CalculateScan`PlotterScanner`Private`x1$$ == 
                    CalculateScan`PlotterScanner`Private`x2$$, 
                    If[
                    CalculateScan`PlotterScanner`Private`x1$$ >= 0, 
                    CalculateScan`PlotterScanner`Private`x2$$ - 0.01, 
                    CalculateScan`PlotterScanner`Private`x2$$ + 0.01], 
                    CalculateScan`PlotterScanner`Private`x2$$]; 
                    CalculateScan`PlotterScanner`Private`originalCurvePlot$ = 
                    Plot[
                    CompiledFunction[{8, 8., 5468}, {
                    Blank[Real], 
                    Blank[Real], 
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 1}, {3, 0, 2}, {3, 0, 
                    6}}, {{2, {2, 0, 0}}}, {0, 1, 8, 0, 
                    0}, {{10, 0, 3}, {16, 3, 0, 3}, {40, 34, 3, 0, 3, 3, 0, 
                    4}, {40, 2, 3, 0, 3, 3, 0, 5}, {16, 4, 2, 5, 6}, {40, 1, 
                    3, 0, 3, 3, 0, 5}, {16, 4, 1, 5, 7}, {13, 6, 7, 6}, {1}}, 
                    
                    Function[{Global`x, Global`C$235852, Global`C$235853}, 
                    
                    Block[{Compile`$236, Compile`$285}, 
                    Compile`$236 = 2 Global`x; 
                    Compile`$285 = 
                    E^Compile`$236; (Compile`$285 Global`C$235853) 
                    Cos[Compile`$236] + (Compile`$285 Global`C$235852) 
                    Sin[Compile`$236]]], Evaluate][Global`x, 
                    Apply[Sequence, {1/4, (-1)/4}]], {Global`x, 
                    
                    Function[{
                    CalculateScan`PlotterScanner`Private`y, 
                    CalculateScan`PlotterScanner`Private`L}, (
                    Sign[CalculateScan`PlotterScanner`Private`y] 
                    CalculateScan`PlotterScanner`Private`L) Tan[
                    Abs[CalculateScan`PlotterScanner`Private`y]]^1][
                    CalculateScan`PlotterScanner`Private`x1L$, 
                    2.3207963267948966`], 
                    
                    Function[{
                    CalculateScan`PlotterScanner`Private`y, 
                    CalculateScan`PlotterScanner`Private`L}, (
                    Sign[CalculateScan`PlotterScanner`Private`y] 
                    CalculateScan`PlotterScanner`Private`L) Tan[
                    Abs[CalculateScan`PlotterScanner`Private`y]]^1][
                    CalculateScan`PlotterScanner`Private`x2L$, 
                    2.3207963267948966`]}, PlotStyle -> 
                    Directive[Black, Thick]]; {{
                    CalculateScan`PlotterScanner`Private`xL$, 
                    CalculateScan`PlotterScanner`Private`xU$}, {
                    CalculateScan`PlotterScanner`Private`yL$, 
                    CalculateScan`PlotterScanner`Private`yU$}} = 
                    FullOptions[
                    CalculateScan`PlotterScanner`Private`originalCurvePlot$, 
                    PlotRange]; 
                    CalculateScan`PlotterScanner`Private`\[CapitalDelta]y$ = 
                    CalculateScan`PlotterScanner`Private`yU$ - 
                    CalculateScan`PlotterScanner`Private`yL$; 
                    CalculateScan`PlotterScanner`Private`pRY$ = {
                    CalculateScan`PlotterScanner`Private`yL$ - 
                    CalculateScan`PlotterScanner`Private`\[CapitalDelta]y$, 
                    CalculateScan`PlotterScanner`Private`yU$ + 
                    CalculateScan`PlotterScanner`Private`\[CapitalDelta]y$}; 
                    CalculateScan`PlotterScanner`Private`originalCurvePlot$ = 
                    Plot[
                    CompiledFunction[{8, 8., 5468}, {
                    Blank[Real], 
                    Blank[Real], 
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 1}, {3, 0, 2}, {3, 0, 
                    6}}, {{2, {2, 0, 0}}}, {0, 1, 8, 0, 
                    0}, {{10, 0, 3}, {16, 3, 0, 3}, {40, 34, 3, 0, 3, 3, 0, 
                    4}, {40, 2, 3, 0, 3, 3, 0, 5}, {16, 4, 2, 5, 6}, {40, 1, 
                    3, 0, 3, 3, 0, 5}, {16, 4, 1, 5, 7}, {13, 6, 7, 6}, {1}}, 
                    
                    Function[{Global`x, Global`C$235852, Global`C$235853}, 
                    
                    Block[{Compile`$236, Compile`$285}, 
                    Compile`$236 = 2 Global`x; 
                    Compile`$285 = 
                    E^Compile`$236; (Compile`$285 Global`C$235853) 
                    Cos[Compile`$236] + (Compile`$285 Global`C$235852) 
                    Sin[Compile`$236]]], Evaluate][Global`x, 
                    Apply[Sequence, {1/4, (-1)/4}]], {Global`x, 
                    
                    Function[{
                    CalculateScan`PlotterScanner`Private`y, 
                    CalculateScan`PlotterScanner`Private`L}, (
                    Sign[CalculateScan`PlotterScanner`Private`y] 
                    CalculateScan`PlotterScanner`Private`L) Tan[
                    Abs[CalculateScan`PlotterScanner`Private`y]]^1][
                    CalculateScan`PlotterScanner`Private`x1L$, 
                    2.3207963267948966`], 
                    
                    Function[{
                    CalculateScan`PlotterScanner`Private`y, 
                    CalculateScan`PlotterScanner`Private`L}, (
                    Sign[CalculateScan`PlotterScanner`Private`y] 
                    CalculateScan`PlotterScanner`Private`L) Tan[
                    Abs[CalculateScan`PlotterScanner`Private`y]]^1][
                    CalculateScan`PlotterScanner`Private`x2L$, 
                    2.3207963267948966`]}, PlotStyle -> 
                    Directive[Black, Thick], PlotRange -> 
                    CalculateScan`PlotterScanner`Private`pRY$]; 
                    CalculateScan`PlotterScanner`Private`\
functionsToPlotHeldList$ = ReplaceAll[
                    Apply[Hold, {
                    Map[CalculateScan`PlotterScanner`Private`FED0[Global`x, 
                    Apply[Sequence, #]]& , 
                    CalculateScan`PlotterScanner`Private`curveParameterLists$]\
}], CalculateScan`PlotterScanner`Private`FED0 -> 
                    CompiledFunction[{8, 8., 5468}, {
                    Blank[Real], 
                    Blank[Real], 
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 1}, {3, 0, 2}, {3, 0, 
                    6}}, {{2, {2, 0, 0}}}, {0, 1, 8, 0, 
                    0}, {{10, 0, 3}, {16, 3, 0, 3}, {40, 34, 3, 0, 3, 3, 0, 
                    4}, {40, 2, 3, 0, 3, 3, 0, 5}, {16, 4, 2, 5, 6}, {40, 1, 
                    3, 0, 3, 3, 0, 5}, {16, 4, 1, 5, 7}, {13, 6, 7, 6}, {1}}, 
                    
                    Function[{Global`x, Global`C$235852, Global`C$235853}, 
                    
                    Block[{Compile`$236, Compile`$285}, 
                    Compile`$236 = 2 Global`x; 
                    Compile`$285 = 
                    E^Compile`$236; (Compile`$285 Global`C$235853) 
                    Cos[Compile`$236] + (Compile`$285 Global`C$235852) 
                    Sin[Compile`$236]]], Evaluate]]; 
                    CalculateScan`PlotterScanner`Private`embeddingCurvePlots$ = 
                    Apply[
                    Function[
                    CalculateScan`PlotterScanner`Private`curveList$, 
                    Plot[
                    CalculateScan`PlotterScanner`Private`curveList$, {
                    Global`x, 
                    
                    Function[{
                    CalculateScan`PlotterScanner`Private`y, 
                    CalculateScan`PlotterScanner`Private`L}, (
                    Sign[CalculateScan`PlotterScanner`Private`y] 
                    CalculateScan`PlotterScanner`Private`L) Tan[
                    Abs[CalculateScan`PlotterScanner`Private`y]]^1][
                    CalculateScan`PlotterScanner`Private`x1L$, 
                    2.3207963267948966`], 
                    
                    Function[{
                    CalculateScan`PlotterScanner`Private`y, 
                    CalculateScan`PlotterScanner`Private`L}, (
                    Sign[CalculateScan`PlotterScanner`Private`y] 
                    CalculateScan`PlotterScanner`Private`L) Tan[
                    Abs[CalculateScan`PlotterScanner`Private`y]]^1][
                    CalculateScan`PlotterScanner`Private`x2L$, 
                    2.3207963267948966`]}, 
                    Evaluate[PlotStyle -> Map[Directive[#, 
                    AbsoluteThickness[1]]& , 
                    CalculateScan`PlotterScanner`Private`colorLists$], 
                    PlotRange -> 
                    CalculateScan`PlotterScanner`Private`pRY$]], {HoldAll}], 
                    CalculateScan`PlotterScanner`Private`\
functionsToPlotHeldList$]; Null]; ReplaceAll[
                    Column[{
                    Grid[{{
                    Style["embedding function", 
                    GrayLevel[0.3]], 
                    
                    ReplaceAll[(E^(2 Global`x) C[2]) 
                    Cos[2 Global`x] + (E^(2 Global`x) C[1]) Sin[2 Global`x], C[
                    Pattern[CalculateScan`PlotterScanner`Private`i, 
                    Blank[]]] :> Subscript[
                    RawBoxes["c"], CalculateScan`PlotterScanner`Private`i]]}, {
                    Style["embedding ODE", 
                    GrayLevel[0.3]], 
                    Part[
                    
                    Flatten[{8 Global`y[Global`x] - 4 
                    Derivative[1][Global`y][Global`x] + 
                    Derivative[2][Global`y][Global`x] == 0}], 1]}}, Alignment -> 
                    Left], 
                    If[
                    And[
                    CalculateScan`PlotterScanner`Private`SC$$ === False, 
                    CalculateScan`PlotterScanner`Private`embeddingCurvePlots$ === \
{}], 
                    Style["no curves to show", Gray], 
                    
                    Show[{CalculateScan`PlotterScanner`Private`\
embeddingCurvePlots$, 
                    CalculateScan`PlotterScanner`Private`originalCurvePlot$}, 
                    PlotRange -> {
                    Automatic, CalculateScan`PlotterScanner`Private`pRY$}, 
                    ImageSize -> 360, ImagePadding -> 12, 
                    If[CalculateScan`PlotterScanner`Private`Sa$$, 
                    Apply[Sequence, {Axes -> True, AxesStyle -> Gray}], 
                    Apply[Sequence, {Axes -> False}]], 
                    If[CalculateScan`PlotterScanner`Private`Sat$$, 
                    Apply[Sequence, {Ticks -> True}], 
                    Apply[Sequence, {Ticks -> False}]]]], 
                    If[
                    And[
                    CalculateScan`PlotterScanner`Private`SC$$ === False, 
                    
                    CalculateScan`PlotterScanner`Private`embeddingCurvePlots$ === \
{}], 
                    Apply[Sequence, {}], 
                    Grid[{{
                    Style["\[LongDash]", Bold, Black], 
                    Style["original function", 
                    GrayLevel[0.3]], 
                    
                    ReplaceAll[(E^(2 Global`x) C[2]) 
                    Cos[2 Global`x] + (E^(2 Global`x) C[1]) Sin[2 Global`x], {
                    C[1] -> 1/4, C[2] -> (-1)/4}]}, 
                    If[CalculateScan`PlotterScanner`Private`SC$$ === True, {
                    Style["\[LongDash]", Bold, Gray], 
                    Style[
                    Row[{
                    Subscript[
                    RawBoxes["c"], 
                    RawBoxes["j"]], "\[Hyphen]values function"}], 
                    GrayLevel[0.3]], 
                    
                    ReplaceAll[(E^(2 Global`x) C[2]) 
                    Cos[2 Global`x] + (E^(2 Global`x) C[1]) Sin[2 Global`x], 
                    Apply[Rule, 
                    Transpose[{{
                    C[1], 
                    C[2]}, 
                    Tan[{Global`sc1$$, Global`sc2$$}]}], {1}]]}, 
                    Apply[Sequence, {}]], 
                    Apply[Sequence, 
                    DeleteCases[
                    Table[
                    If[
                    Part[{Global`scTF1$$, Global`scTF2$$}, 
                    CalculateScan`PlotterScanner`Private`j] === True, {
                    Style["\[LongDash]", Bold, 
                    
                    Part[{Global`scColor1$$, Global`scColor2$$}, 
                    CalculateScan`PlotterScanner`Private`j]], 
                    Style[
                    Row[{
                    Subscript[
                    RawBoxes["c"], CalculateScan`PlotterScanner`Private`j], 
                    "\[Hyphen]family"}], 
                    GrayLevel[0.3]], 
                    ReplaceAll[
                    
                    HoldForm[(E^(2 Global`x) C[2]) 
                    Cos[2 Global`x] + (E^(2 Global`x) C[1]) Sin[2 Global`x]], 
                    
                    Apply[Rule, 
                    Transpose[{{
                    C[1], 
                    C[2]}, 
                    MapAt[Subscript[
                    RawBoxes["c"], CalculateScan`PlotterScanner`Private`j]& , 
                    
                    Tan[{Global`sc1$$, Global`sc2$$}], 
                    CalculateScan`PlotterScanner`Private`j]}], {1}]]}, {}], {
                    CalculateScan`PlotterScanner`Private`j, 2}], {}]]}, 
                    Alignment -> Left]]}, 
                    Dividers -> {False, {False, False, False}}], Global`x -> 
                    Global`x37]], 
                  "Specifications" :> {{
                    CalculateUtilities`GraphicsUtilities`Private`more$$, {
                    False, True}, ControlType -> None}, {{
                    CalculateScan`PlotterScanner`Private`x1$$, \
-0.7853981633974483, 
                    Subscript[
                    Style["x", Italic], "min"]}, -1.5692255304681018`, 
                    1.5692255304681018`, ImageSize -> Small, ControlPlacement -> 
                    1}, {{CalculateScan`PlotterScanner`Private`x2$$, 
                    0.7853981633974483, 
                    Subscript[
                    Style["x", Italic], "max"]}, -1.5692255304681018`, 
                    1.5692255304681018`, ImageSize -> Small, ControlPlacement -> 
                    2}, {{CalculateScan`PlotterScanner`Private`Sa$$, True, 
                    "show axes"}, {True, False}, ControlPlacement -> 3}, {{
                    CalculateScan`PlotterScanner`Private`Sat$$, False, 
                    "show ticks"}, {True, False}, ControlPlacement -> 4}, {{
                    Global`sc1$$, 
                    ArcTan[
                    Rational[1, 8]], 
                    Row[{
                    Subscript[
                    RawBoxes["c"], 1], " value"}]}, -1.5692255304681018`, 
                    1.5692255304681018`, ImageSize -> Small, ControlPlacement -> 
                    5}, {{Global`sc2$$, -ArcTan[
                    Rational[1, 8]], 
                    Row[{
                    Subscript[
                    RawBoxes["c"], 2], " value"}]}, -1.5692255304681018`, 
                    1.5692255304681018`, ImageSize -> Small, ControlPlacement -> 
                    6}, {{CalculateScan`PlotterScanner`Private`SC$$, True, 
                    "show single curve"}, {True, False}, ControlPlacement -> 
                    7}, {{Global`scTF1$$, True, 
                    Row[{"show ", 
                    Subscript[
                    RawBoxes["c"], 1], " family"}]}, {True, False}, 
                    ControlPlacement -> 8}, {{Global`scColor1$$, 
                    RGBColor[0.24720000000000014`, 0.24, 0.6], " color"}, 
                    RGBColor[1, 0, 0], ImageSize -> Tiny, ControlPlacement -> 
                    9}, {{Global`sc1min$$, -ArcTan[
                    Rational[3, 4]], 
                    Subscript[
                    RawBoxes["c"], 1, "min"]}, -1.5692255304681018`, 
                    1.5692255304681018`, ImageSize -> Tiny, ControlPlacement -> 
                    10}, {{Global`sc1max$$, 
                    ArcTan[
                    Rational[5, 4]], 
                    Subscript[
                    RawBoxes["c"], 1, "max"]}, -1.5692255304681018`, 
                    1.5692255304681018`, ImageSize -> Tiny, ControlPlacement -> 
                    11}, {{Global`scCount1$$, 12, " curve count"}, 2, 60, 1, 
                    ImageSize -> Tiny, ControlPlacement -> 12}, {{
                    Global`scTF2$$, False, 
                    Row[{"show ", 
                    Subscript[
                    RawBoxes["c"], 2], " family"}]}, {True, False}, 
                    ControlPlacement -> 13}, {{Global`scColor2$$, 
                    RGBColor[0.6, 0.24, 0.4428931686004542], " color"}, 
                    RGBColor[1, 0, 0], ImageSize -> Tiny, ControlPlacement -> 
                    14}, {{Global`sc2min$$, -ArcTan[
                    Rational[5, 4]], 
                    Subscript[
                    RawBoxes["c"], 2, "min"]}, -1.5692255304681018`, 
                    1.5692255304681018`, ImageSize -> Tiny, ControlPlacement -> 
                    15}, {{Global`sc2max$$, 
                    ArcTan[
                    Rational[3, 4]], 
                    Subscript[
                    RawBoxes["c"], 2, "max"]}, -1.5692255304681018`, 
                    1.5692255304681018`, ImageSize -> Tiny, ControlPlacement -> 
                    16}, {{Global`scCount2$$, 12, " curve count"}, 2, 60, 1, 
                    ImageSize -> Tiny, ControlPlacement -> 17}, 
                    Style[
                    Overlay[{
                    RawBoxes[
                    PaneBox[
                    GraphicsBox[
                    
                    RasterBox[{{{0, 0, 0, 24}}, {{0, 0, 0, 9}}, {{0, 0, 0, 
                    10}}, {{0, 0, 0, 10}}, {{0, 0, 0, 9}}, {{0, 0, 0, 9}}, {{
                    0, 0, 0, 8}}, {{0, 0, 0, 8}}, {{0, 0, 0, 9}}, {{0, 0, 0, 
                    8}}, {{0, 0, 0, 7}}, {{0, 0, 0, 7}}, {{0, 0, 0, 8}}, {{0, 
                    0, 0, 6}}, {{0, 0, 0, 6}}, {{0, 0, 0, 6}}, {{0, 0, 0, 
                    6}}, {{0, 0, 0, 5}}, {{0, 0, 0, 6}}, {{0, 0, 0, 5}}, {{0, 
                    0, 0, 4}}, {{0, 0, 0, 4}}, {{0, 0, 0, 5}}, {{0, 0, 0, 
                    5}}, {{0, 0, 0, 3}}, {{0, 0, 0, 4}}, {{0, 0, 0, 3}}, {{0, 
                    0, 0, 3}}, {{0, 0, 0, 3}}, {{0, 0, 0, 3}}, {{0, 0, 0, 
                    2}}, {{0, 0, 0, 2}}, {{0, 0, 0, 2}}, {{0, 0, 0, 2}}, {{0, 
                    0, 0, 1}}, {{0, 0, 0, 2}}, {{0, 0, 0, 2}}, {{0, 0, 0, 
                    0}}, {{0, 0, 0, 1}}, {{255, 255, 255, 0}}, {{255, 255, 
                    255, 0}}, {{255, 255, 255, 0}}, {{255, 255, 255, 0}}, {{
                    255, 255, 255, 0}}, {{255, 255, 255, 0}}}, {{0, 45}, {
                    2500, 0}}, {0, 255}, ColorFunction -> RGBColor], 
                    ImageSize -> {2500, 45}, 
                    PlotRange -> {{0, 2500}, {0, 45}}], ImageSize -> 
                    Scaled[1], ScrollPosition -> {0., 0.}]], 
                    Pane[
                    Column[{
                    Row[{
                    Invisible[
                    RawBoxes[
                    GraphicsBox[
                    TagBox[
                    
                    RasterBox[{{{255, 132, 0}, {255, 132, 0}, {255, 132, 0}, {
                    255, 132, 0}, {255, 132, 0}, {255, 132, 0}}, {{255, 132, 
                    0}, {255, 132, 0}, {255, 132, 0}, {255, 132, 0}, {255, 
                    132, 0}, {255, 132, 0}}}, {{0, 2}, {6, 0}}, {0, 255}, 
                    ColorFunction -> RGBColor], 
                    BoxForm`ImageTag[
                    "Byte", ColorSpace -> "RGB", Interleaving -> True], 
                    Selectable -> False], BaseStyle -> "ImageGraphics", 
                    ImageSize -> Magnification[1], ImageSizeRaw -> {6, 2}, 
                    BaselinePosition -> (Scaled[0] -> Center), 
                    PlotRange -> {{0, 6}, {0, 2}}]]], " ", 
                    Column[{"Horizontal plot range", 
                    Row[{
                    Manipulate`Place[1], "  ", 
                    Manipulate`Place[2]}], 
                    Row[{
                    Manipulate`Place[3], "  ", 
                    Manipulate`Place[4]}]}]}], 
                    PaneSelector[{True -> Grid[{{
                    Button[
                    Row[{
                    RawBoxes[
                    GraphicsBox[
                    TagBox[
                    
                    RasterBox[{{{255, 132, 0}, {255, 132, 0}, {255, 132, 0}, {
                    255, 132, 0}, {255, 132, 0}, {255, 132, 0}}, {{255, 132, 
                    0}, {255, 132, 0}, {255, 132, 0}, {255, 132, 0}, {255, 
                    132, 0}, {255, 132, 0}}}, {{0, 2}, {6, 0}}, {0, 255}, 
                    ColorFunction -> RGBColor], 
                    BoxForm`ImageTag[
                    "Byte", ColorSpace -> "RGB", Interleaving -> True], 
                    Selectable -> False], BaseStyle -> "ImageGraphics", 
                    ImageSize -> Magnification[1], ImageSizeRaw -> {6, 2}, 
                    BaselinePosition -> (Scaled[0] -> Center), 
                    PlotRange -> {{0, 6}, {0, 2}}]], " "}], 
                    CalculateUtilities`GraphicsUtilities`Private`more$$ = 
                    False, Appearance -> None, BaseStyle -> {}], 
                    Button[
                    "Fewer controls", 
                    CalculateUtilities`GraphicsUtilities`Private`more$$ = 
                    False, Appearance -> None, BaseStyle -> {}]}, {"", 
                    Item[
                    Column[{
                    Style["Curve parameters", Plain], 
                    Column[{
                    Manipulate`Place[5], 
                    Manipulate`Place[6]}], 
                    Manipulate`Place[7], 
                    Style["Show curve families", Plain], 
                    Column[{
                    Row[{
                    Manipulate`Place[8], " | ", 
                    Manipulate`Place[9]}], 
                    Row[{
                    Manipulate`Place[10], "  ", 
                    Manipulate`Place[11], "  ", 
                    Manipulate`Place[12]}], 
                    Row[{
                    Manipulate`Place[13], " | ", 
                    Manipulate`Place[14]}], 
                    Row[{
                    Manipulate`Place[15], "  ", 
                    Manipulate`Place[16], "  ", 
                    Manipulate`Place[17]}]}]}], ItemSize -> Scaled[1], 
                    Frame -> {None, None, True, None}]}}, FrameStyle -> 
                    GrayLevel[0.9], Alignment -> Left, Spacings -> {0, 0.8}], 
                    False -> Button[
                    Row[{
                    RawBoxes[
                    GraphicsBox[
                    TagBox[
                    
                    RasterBox[{{{255, 255, 255}, {255, 255, 255}, {255, 132, 
                    0}, {255, 132, 0}, {255, 255, 255}, {255, 255, 255}}, {{
                    255, 255, 255}, {255, 255, 255}, {255, 132, 0}, {255, 132,
                     0}, {255, 255, 255}, {255, 255, 255}}, {{255, 132, 0}, {
                    255, 132, 0}, {255, 132, 0}, {255, 132, 0}, {255, 132, 
                    0}, {255, 132, 0}}, {{255, 132, 0}, {255, 132, 0}, {255, 
                    132, 0}, {255, 132, 0}, {255, 132, 0}, {255, 132, 0}}, {{
                    255, 255, 255}, {255, 255, 255}, {255, 132, 0}, {255, 132,
                     0}, {255, 255, 255}, {255, 255, 255}}, {{255, 255, 
                    255}, {255, 255, 255}, {255, 132, 0}, {255, 132, 0}, {255,
                     255, 255}, {255, 255, 255}}}, {{0, 6}, {6, 0}}, {0, 255},
                     ColorFunction -> RGBColor], 
                    BoxForm`ImageTag[
                    "Byte", ColorSpace -> "RGB", Interleaving -> True], 
                    Selectable -> False], BaseStyle -> "ImageGraphics", 
                    ImageSize -> Magnification[1], ImageSizeRaw -> {6, 6}, 
                    BaselinePosition -> (Scaled[0.3] -> Center), 
                    PlotRange -> {{0, 6}, {0, 6}}]], " More controls"}], 
                    CalculateUtilities`GraphicsUtilities`Private`more$$ = 
                    True, Appearance -> None, BaseStyle -> {}]}, 
                    Dynamic[
                    CalculateUtilities`GraphicsUtilities`Private`more$$], 
                    ImageSize -> Automatic]}], 
                    ImageMargins -> {{20, 30}, {10, 10}}]}, {1, 2}, 2, 
                    Alignment -> {Left, Top}]]}, 
                  "Options" :> {
                   ControlPlacement -> Bottom, TrackedSymbols :> Manipulate, 
                    Paneled -> False, ControlPlacement -> Bottom, 
                    FrameMargins -> {{0, 0}, {0, 10}}, Paneled -> False, 
                    AppearanceElements -> {}, 
                    LabelStyle -> {
                    "DialogStyle", FontColor -> GrayLevel[0.25]}}, 
                  "DefaultOptions" :> {}], SingleEvaluation -> True], 
                Initialization :> ({{
                    Attributes[CalculateScan`PlotterScanner`Private`x1L$] = {
                    Temporary}, 
                    Attributes[CalculateScan`PlotterScanner`Private`x2L$] = {
                    Temporary}, 
                    Attributes[CalculateScan`PlotterScanner`Private`xL$] = {
                    Temporary}, 
                    Attributes[CalculateScan`PlotterScanner`Private`xU$] = {
                    Temporary}, 
                    Attributes[CalculateScan`PlotterScanner`Private`yL$] = {
                    Temporary}, 
                    Attributes[CalculateScan`PlotterScanner`Private`yU$] = {
                    Temporary}, 
                    Attributes[
                    CalculateScan`PlotterScanner`Private`\[CapitalDelta]y$] = \
{Temporary}, Attributes[CalculateScan`PlotterScanner`Private`pRY$] = {
                    Temporary}, 
                    Attributes[
                    CalculateScan`PlotterScanner`Private`originalCurvePlot$] = \
{Temporary}, Attributes[
                    CalculateScan`PlotterScanner`Private`\
curveParametersAndColorsToPlot$] = {Temporary}, 
                    Attributes[
                    CalculateScan`PlotterScanner`Private`embeddingCurvePlots$]\
 = {Temporary}, Attributes[
                    CalculateScan`PlotterScanner`Private`curveParameterLists$]\
 = {Temporary}, Attributes[
                    CalculateScan`PlotterScanner`Private`colorLists$] = {
                    Temporary}, 
                    Attributes[
                    CalculateScan`PlotterScanner`Private`\
functionsToPlotHeldList$] = {Temporary}, 
                    Attributes[
                    CalculateScan`PlotterScanner`Private`curveList$] = {
                    Temporary}, Attributes[Subscript] = {NHoldRest}, 
                    Attributes[RawBoxes] = {ReadProtected}, 
                    Attributes[Derivative] = {NHoldAll, ReadProtected}}; {
                    MakeBoxes[Global`x37, 
                    Pattern[CalculateScan`PlotterScanner`Private`form$, 
                    Blank[]]] := "x"}}; Typeset`initDone$$ = True), 
                DynamicModuleValues :> {}, Deinitialization :> None, 
                UntrackedVariables :> {Typeset`size$$}, 
                SynchronousInitialization -> True, 
                UnsavedVariables :> {Typeset`initDone$$}], "Manipulate", 
               Deployed -> True, StripOnInput -> False], TraditionalForm], 
             Manipulate`InterpretManipulate[1]], TraditionalForm]], 
          "Output"]}], 
       XMLElement["dataformats", {}, {}]}]}], Typeset`pod3$$ = XMLElement[
   "pod", {"title" -> "Alternate forms of the integral", "scanner" -> 
     "Integral", "id" -> "AlternateForm", "position" -> "300", "error" -> 
     "false", "numsubpods" -> "3"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {"Apart[(E^(2 x) (-Cos[2 x] + Sin[2 x]))/4]"}], 
       XMLElement["moutput", {}, {"-(E^(2 x) (Cos[2 x] - Sin[2 x]))/4"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            StyleBox[
             RowBox[{
               StyleBox[
                RowBox[{
                  RowBox[{"-", 
                    FractionBox["1", "4"]}], " ", 
                  SuperscriptBox["\[ExponentialE]", 
                   RowBox[{"2", " ", "x"}]], " ", 
                  RowBox[{"(", 
                    RowBox[{
                    RowBox[{"cos", "(", 
                    RowBox[{"2", " ", "x"}], ")"}], "-", 
                    RowBox[{"sin", "(", 
                    RowBox[{"2", " ", "x"}], ")"}]}], ")"}]}], 
                GrayLevel[0]], "+", 
               StyleBox[
               "constant", FontFamily -> "Helvetica", Magnification -> 
                0.9 Inherited]}], 
             GrayLevel[0.6]], TraditionalForm]], "Output"]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata,formuladata"}]}\
], 
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["moutput", {}, {"E^(2 x) (-Cos[2 x]/4 + Sin[2 x]/4)"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            StyleBox[
             RowBox[{
               StyleBox[
                RowBox[{
                  SuperscriptBox["\[ExponentialE]", 
                   RowBox[{"2", " ", "x"}]], " ", 
                  RowBox[{"(", 
                    RowBox[{
                    RowBox[{
                    FractionBox["1", "4"], " ", 
                    RowBox[{"sin", "(", 
                    RowBox[{"2", " ", "x"}], ")"}]}], "-", 
                    RowBox[{
                    FractionBox["1", "4"], " ", 
                    RowBox[{"cos", "(", 
                    RowBox[{"2", " ", "x"}], ")"}]}]}], ")"}]}], 
                GrayLevel[0]], "+", 
               StyleBox[
               "constant", FontFamily -> "Helvetica", Magnification -> 
                0.9 Inherited]}], 
             GrayLevel[0.6]], TraditionalForm]], "Output"]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,moutput,computabledata,formatteddata,formuladata"}]}], 
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {"TrigFactor[(E^(2 x) (-Cos[2 x] + Sin[2 x]))/4]"}], 
       XMLElement["moutput", {}, {"-(E^(2 x) Sin[Pi/4 - 2 x])/(2 Sqrt[2])"}], 
       
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            StyleBox[
             RowBox[{
               StyleBox[
                RowBox[{"-", 
                  FractionBox[
                   RowBox[{
                    SuperscriptBox["\[ExponentialE]", 
                    RowBox[{"2", " ", "x"}]], " ", 
                    RowBox[{"sin", "(", 
                    RowBox[{
                    FractionBox["\[Pi]", "4"], "-", 
                    RowBox[{"2", " ", "x"}]}], ")"}]}], 
                   RowBox[{"2", " ", 
                    SqrtBox["2"]}]]}], 
                GrayLevel[0]], "+", 
               StyleBox[
               "constant", FontFamily -> "Helvetica", Magnification -> 
                0.9 Inherited]}], 
             GrayLevel[0.6]], TraditionalForm]], "Output"]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata,formuladata"}]}\
], 
     XMLElement["states", {"count" -> "1"}, {
       XMLElement[
       "state", {"name" -> "More", "input" -> "AlternateForm__More"}, {}]}]}],
    Typeset`pod4$$, Typeset`pod5$$, Typeset`pod6$$, Typeset`pod7$$, 
   Typeset`pod8$$, Typeset`pod9$$, Typeset`pod10$$, Typeset`pod11$$, 
   Typeset`pod12$$, Typeset`pod13$$, Typeset`pod14$$, Typeset`pod15$$, 
   Typeset`pod16$$, Typeset`pod17$$, Typeset`pod18$$, Typeset`pod19$$, 
   Typeset`pod20$$, Typeset`pod21$$, Typeset`pod22$$, Typeset`pod23$$, 
   Typeset`pod24$$, Typeset`pod25$$, Typeset`pod26$$, Typeset`pod27$$, 
   Typeset`pod28$$, Typeset`pod29$$, Typeset`pod30$$, Typeset`pod31$$, 
   Typeset`pod32$$, Typeset`pod33$$, Typeset`aux1$$ = {
   True, False, {False, False}, True}, Typeset`aux2$$ = {
   True, False, {False, False, False, False}, True}, Typeset`aux3$$ = {
   True, False, {False, False, False}, True}, Typeset`aux4$$ = {
   True, False, {False}, True}, Typeset`aux5$$ = {True, False, {False}, True},
    Typeset`aux6$$ = {True, False, {False}, True}, Typeset`aux7$$ = {
   True, False, {False}, True}, Typeset`aux8$$ = {True, False, {False}, True},
    Typeset`aux9$$ = {True, False, {False}, True}, Typeset`aux10$$ = {
   True, False, {False}, True}, Typeset`aux11$$ = {
   True, False, {False}, True}, Typeset`aux12$$ = {
   True, False, {False}, True}, Typeset`aux13$$ = {
   True, False, {False}, True}, Typeset`aux14$$ = {
   True, False, {False}, True}, Typeset`aux15$$ = {
   True, False, {False}, True}, Typeset`aux16$$ = {
   True, False, {False}, True}, Typeset`aux17$$ = {
   True, False, {False}, True}, Typeset`aux18$$ = {
   True, False, {False}, True}, Typeset`aux19$$ = {
   True, False, {False}, True}, Typeset`aux20$$ = {
   True, False, {False}, True}, Typeset`aux21$$ = {
   True, False, {False}, True}, Typeset`aux22$$ = {
   True, False, {False}, True}, Typeset`aux23$$ = {
   True, False, {False}, True}, Typeset`aux24$$ = {
   True, False, {False}, True}, Typeset`aux25$$ = {
   True, False, {False}, True}, Typeset`aux26$$ = {
   True, False, {False}, True}, Typeset`aux27$$ = {
   True, False, {False}, True}, Typeset`aux28$$ = {
   True, False, {False}, True}, Typeset`aux29$$ = {
   True, False, {False}, True}, Typeset`aux30$$ = {
   True, False, {False}, True}, Typeset`aux31$$ = {
   True, False, {False}, True}, Typeset`aux32$$ = {
   True, False, {False}, True}, Typeset`aux33$$ = {
   True, False, {False}, True}, Typeset`asyncpods$$ = {}, 
   Typeset`nonpods$$ = {}, Typeset`initdone$$ = True, 
   Typeset`queryinfo$$ = {{
    "success" -> "true", "error" -> "false", "numpods" -> "3", "datatypes" -> 
     "", "timedout" -> 
     "Integral,MultiDimensionalIntegration,Series,Plot,Plotter,Simplification,\
Sequence", "timing" -> "4.384", "parsetiming" -> "0.4", "parsetimedout" -> 
     "false", "recalculate" -> 
     "http://www4c.wolframalpha.com/api/v2/recalc.jsp?id=\
MSP85019h2g7801216967h00001d7c909db2dfbchh&s=61", "id" -> 
     "MSP85119h2g7801216967h000050b09h13f26c80g6&s=61", "related" -> 
     "http://www4c.wolframalpha.com/api/v2/relatedQueries.jsp?id=\
MSP85219h2g7801216967h00001a9g5bc2hg6a5i59&s=61", "version" -> "2.1"}, {
    "success" -> "true", "error" -> "false", "numpods" -> "1", "datatypes" -> 
     "", "timedout" -> 
     "Integral,MultiDimensionalIntegration,Series,Plot,Plotter,Simplification,\
Sequence", "timing" -> "5.73", "parsetiming" -> "0.", "parsetimedout" -> 
     "false", "recalculate" -> "", "id" -> "", "related" -> "", "version" -> 
     "2.1"}}, Typeset`sessioninfo$$ = {
   "TimeZone" -> -6., 
    "Date" -> {2011, 8, 31, 10, 13, 31.892317`8.256261052903374}, "Line" -> 9,
     "SessionID" -> 23093400895694277690}, Typeset`showpods$$ = {1, 2, 3}, 
   Typeset`failedpods$$ = {4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 
   18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33}, 
   Typeset`chosen$$ = {
   "Fast parse", "Fast parse", 1, 0, "Input", 
    "Integrate[E^(2*x)*Sin[2*x], x]"}, Typeset`open$$ = False, 
   Typeset`newq$$ = "Integrate[ E^(2*x) Sin[2 x],x]"}, 
   DynamicBox[ToBoxes[
     AlphaIntegration`FormatAlphaResults[
      Dynamic[{
       2, {Typeset`pod1$$, Typeset`pod2$$, Typeset`pod3$$, Typeset`pod4$$, 
         Typeset`pod5$$, Typeset`pod6$$, Typeset`pod7$$, Typeset`pod8$$, 
         Typeset`pod9$$, Typeset`pod10$$, Typeset`pod11$$, Typeset`pod12$$, 
         Typeset`pod13$$, Typeset`pod14$$, Typeset`pod15$$, Typeset`pod16$$, 
         Typeset`pod17$$, Typeset`pod18$$, Typeset`pod19$$, Typeset`pod20$$, 
         Typeset`pod21$$, Typeset`pod22$$, Typeset`pod23$$, Typeset`pod24$$, 
         Typeset`pod25$$, Typeset`pod26$$, Typeset`pod27$$, Typeset`pod28$$, 
         Typeset`pod29$$, Typeset`pod30$$, Typeset`pod31$$, Typeset`pod32$$, 
         Typeset`pod33$$}, {
        Typeset`aux1$$, Typeset`aux2$$, Typeset`aux3$$, Typeset`aux4$$, 
         Typeset`aux5$$, Typeset`aux6$$, Typeset`aux7$$, Typeset`aux8$$, 
         Typeset`aux9$$, Typeset`aux10$$, Typeset`aux11$$, Typeset`aux12$$, 
         Typeset`aux13$$, Typeset`aux14$$, Typeset`aux15$$, Typeset`aux16$$, 
         Typeset`aux17$$, Typeset`aux18$$, Typeset`aux19$$, Typeset`aux20$$, 
         Typeset`aux21$$, Typeset`aux22$$, Typeset`aux23$$, Typeset`aux24$$, 
         Typeset`aux25$$, Typeset`aux26$$, Typeset`aux27$$, Typeset`aux28$$, 
         Typeset`aux29$$, Typeset`aux30$$, Typeset`aux31$$, Typeset`aux32$$, 
         Typeset`aux33$$}, Typeset`chosen$$, Typeset`open$$, 
        Typeset`elements$$, Typeset`q$$, Typeset`opts$$, Typeset`nonpods$$, 
        Typeset`queryinfo$$, Typeset`sessioninfo$$, Typeset`showpods$$, 
        Typeset`failedpods$$, Typeset`newq$$}]], StandardForm],
    ImageSizeCache->{237., {27., 16.}},
    TrackedSymbols:>{Typeset`showpods$$, Typeset`failedpods$$}],
   DynamicModuleValues:>{},
   Initialization:>If[
     Not[Typeset`initdone$$], AlphaIntegration`DoAsyncInitialization[
       Hold[{
        2, {Typeset`pod1$$, Typeset`pod2$$, Typeset`pod3$$, Typeset`pod4$$, 
          Typeset`pod5$$, Typeset`pod6$$, Typeset`pod7$$, Typeset`pod8$$, 
          Typeset`pod9$$, Typeset`pod10$$, Typeset`pod11$$, Typeset`pod12$$, 
          Typeset`pod13$$, Typeset`pod14$$, Typeset`pod15$$, Typeset`pod16$$, 
          Typeset`pod17$$, Typeset`pod18$$, Typeset`pod19$$, Typeset`pod20$$, 
          Typeset`pod21$$, Typeset`pod22$$, Typeset`pod23$$, Typeset`pod24$$, 
          Typeset`pod25$$, Typeset`pod26$$, Typeset`pod27$$, Typeset`pod28$$, 
          Typeset`pod29$$, Typeset`pod30$$, Typeset`pod31$$, Typeset`pod32$$, 
          Typeset`pod33$$}, {
         Typeset`aux1$$, Typeset`aux2$$, Typeset`aux3$$, Typeset`aux4$$, 
          Typeset`aux5$$, Typeset`aux6$$, Typeset`aux7$$, Typeset`aux8$$, 
          Typeset`aux9$$, Typeset`aux10$$, Typeset`aux11$$, Typeset`aux12$$, 
          Typeset`aux13$$, Typeset`aux14$$, Typeset`aux15$$, Typeset`aux16$$, 
          Typeset`aux17$$, Typeset`aux18$$, Typeset`aux19$$, Typeset`aux20$$, 
          Typeset`aux21$$, Typeset`aux22$$, Typeset`aux23$$, Typeset`aux24$$, 
          Typeset`aux25$$, Typeset`aux26$$, Typeset`aux27$$, Typeset`aux28$$, 
          Typeset`aux29$$, Typeset`aux30$$, Typeset`aux31$$, Typeset`aux32$$, 
          Typeset`aux33$$}, Typeset`chosen$$, Typeset`open$$, 
         Typeset`elements$$, Typeset`q$$, Typeset`opts$$, Typeset`nonpods$$, 
         Typeset`queryinfo$$, Typeset`sessioninfo$$, Typeset`showpods$$, 
         Typeset`failedpods$$, Typeset`newq$$, 
         "http://www4c.wolframalpha.com/api/v2/recalc.jsp?id=\
MSP85019h2g7801216967h00001d7c909db2dfbchh&s=61", Typeset`asyncpods$$}]]; 
     Typeset`asyncpods$$ = {}; Typeset`initdone$$ = True],
   SynchronousInitialization->False],
  BaseStyle->{Deployed -> True},
  DeleteWithContents->True,
  Editable->False,
  SelectWithContents->True]], "WolframAlphaShortInput"],

Cell[BoxData[
 FormBox[
  RowBox[{
   FractionBox["1", "4"], " ", 
   SuperscriptBox["\[ExponentialE]", 
    RowBox[{"2", " ", "x"}]], " ", 
   RowBox[{"(", 
    RowBox[{
     RowBox[{"sin", "(", 
      RowBox[{"2", " ", "x"}], ")"}], "-", 
     RowBox[{"cos", "(", 
      RowBox[{"2", " ", "x"}], ")"}]}], ")"}]}], TraditionalForm]], "Output",
 CellChangeTimes->{{3.523795982260934*^9, 3.523796002292948*^9}}]
}, Closed]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Integrate", "[", 
  RowBox[{
   RowBox[{"Exp", "[", 
    RowBox[{"4", "x"}], "]"}], ",", "x"}], "]"}]], "Input",
 CellChangeTimes->{{3.52379646917521*^9, 3.5237964851517153`*^9}}],

Cell[BoxData[
 FormBox[
  FractionBox[
   SuperscriptBox["\[ExponentialE]", 
    RowBox[{"4", " ", "x"}]], "4"], TraditionalForm]], "Output",
 CellChangeTimes->{{3.523796478794178*^9, 3.523796485787126*^9}}]
}, Closed]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Exp", "[", 
  RowBox[{"4", "x"}], "]"}]], "Input",
 CellChangeTimes->{{3.5237964927473593`*^9, 3.523796495248623*^9}}],

Cell[BoxData[
 FormBox[
  SuperscriptBox["\[ExponentialE]", 
   RowBox[{"4", " ", "x"}]], TraditionalForm]], "Output",
 CellChangeTimes->{3.52379649563977*^9}]
}, Closed]],

Cell[CellGroupData[{

Cell[BoxData[
 NamespaceBox["WolframAlphaQueryResults",
  DynamicModuleBox[{Typeset`q$$ = "Integrate[ Exp[4*x]*x^2,x]", 
   Typeset`opts$$ = {
   AppearanceElements -> {"Extrusion", "Warnings", "Assumptions", "Pods"}, 
    Asynchronous -> All, 
    Method -> {
     "ExtrusionChosen" -> {
       "Fast parse", "Fast parse", 1, 0, "Input", 
        "Integrate[Exp[4*x]*x^2, x]"}, "ExtrusionOpen" -> False, 
      "Formats" -> {"cell", "minput", "moutput", "msound", "dataformats"}}, 
    PodStates -> {"IndefiniteIntegral__Show steps"}}, Typeset`elements$$ = {
   "Extrusion", "Warnings", "Assumptions", "Pods"}, Typeset`pod1$$ = 
   XMLElement[
   "pod", {"title" -> "Indefinite integrals", "scanner" -> "Integral", "id" -> 
     "IndefiniteIntegral", "position" -> "100", "error" -> "false", 
     "numsubpods" -> "2", "primary" -> "true"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["minput", {}, {"Integrate[Exp[4 x] x^2, x]"}], 
       XMLElement["moutput", {}, {"(E^(4 x) (1 - 4 x + 8 x^2))/32"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            RowBox[{
              TagBox[
               TagBox[
                RowBox[{"\[Integral]", 
                  RowBox[{
                    RowBox[{
                    RowBox[{"exp", "(", 
                    RowBox[{"4", " ", "x"}], ")"}], " ", 
                    SuperscriptBox["x", "2"]}], 
                    RowBox[{"\[DifferentialD]", "x"}]}]}], HoldForm], 
               PolynomialForm[#, TraditionalOrder -> False]& ], 
              "\[LongEqual]", 
              StyleBox[
               RowBox[{
                 StyleBox[
                  RowBox[{
                    FractionBox["1", "32"], " ", 
                    SuperscriptBox["\[ExponentialE]", 
                    RowBox[{"4", " ", "x"}]], " ", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"8", " ", 
                    SuperscriptBox["x", "2"]}], "-", 
                    RowBox[{"4", " ", "x"}], "+", "1"}], ")"}]}], 
                  GrayLevel[0]], "+", 
                 StyleBox[
                 "constant", FontFamily -> "Helvetica", Magnification -> 
                  0.9 Inherited]}], 
               GrayLevel[0.6]]}], TraditionalForm]], "Output"]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata,formuladata"}]}\
], 
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["cell", {"compressed" -> True, "string" -> False}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             GridBox[{{
                StyleBox[
                 StyleBox[
                 "\"Possible intermediate steps:\"", 
                  LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                  0, StripOnInput -> False], FontColor -> GrayLevel[0.5], 
                 FontSize -> Smaller, StripOnInput -> False]}, {
                InterpretationBox[
                 Cell[
                  BoxData[
                   FormBox[
                    TagBox[
                    RowBox[{"\[Integral]", 
                    RowBox[{
                    RowBox[{
                    SuperscriptBox["\[ExponentialE]", 
                    RowBox[{"4", " ", "x"}]], " ", 
                    SuperscriptBox["x", "2"]}], 
                    RowBox[{"\[DifferentialD]", "x"}]}]}], HoldForm], 
                    TraditionalForm]]], 
                 ExpressionCell[
                  HoldForm[
                   Integrate[E^(4 Global`x) Global`x^2, Global`x]]]]}, {
                StyleBox[
                 StyleBox[
                  TemplateBox[{"\"For the integrand \"", 
                    InterpretationBox[
                    Cell[
                    BoxData[
                    FormBox[
                    RowBox[{
                    SuperscriptBox["\[ExponentialE]", 
                    RowBox[{"4", " ", "x"}]], " ", 
                    SuperscriptBox["x", "2"]}], TraditionalForm]]], 
                    ExpressionCell[E^(4 Global`x) Global`x^2]], 
                    "\", integrate by parts, \"", 
                    InterpretationBox[
                    Cell[
                    BoxData[
                    FormBox[
                    RowBox[{
                    TagBox[
                    RowBox[{"\[Integral]", 
                    RowBox[{"f", 
                    RowBox[{"\[DifferentialD]", "g"}]}]}], HoldForm], 
                    "\[LongEqual]", 
                    RowBox[{
                    RowBox[{"f", " ", "g"}], "-", 
                    TagBox[
                    RowBox[{"\[Integral]", 
                    RowBox[{"g", 
                    RowBox[{"\[DifferentialD]", "f"}]}]}], HoldForm]}]}], 
                    TraditionalForm]]], 
                    ExpressionCell[HoldForm[
                    Integrate[Global`f, Global`g]] == 
                    Global`f Global`g - HoldForm[
                    Integrate[Global`g, Global`f]]]], "\", where \\n \"", 
                    InterpretationBox[
                    Cell[
                    BoxData[
                    FormBox[
                    RowBox[{"f", "\[LongEqual]", 
                    SuperscriptBox["x", "2"]}], TraditionalForm]]], 
                    ExpressionCell[Global`f == Global`x^2]], "\",    \"", 
                    InterpretationBox[
                    Cell[
                    BoxData[
                    FormBox[
                    RowBox[{
                    
                    RowBox[{
                    "\[DifferentialD]", "\[NegativeVeryThinSpace]", "g"}], 
                    "\[LongEqual]", 
                    SuperscriptBox["\[ExponentialE]", 
                    RowBox[{"4", " ", "x"}]]}], TraditionalForm]]], 
                    ExpressionCell[
                    CalculateScan`StepByStepIntegrate`CommonFunctions`dd[
                    Global`g] == E^(4 Global`x)]], 
                    InterpretationBox[
                    Cell[
                    BoxData[
                    FormBox[
                    
                    RowBox[{
                    "\[DifferentialD]", "\[NegativeVeryThinSpace]", "x"}], 
                    TraditionalForm]]], 
                    ExpressionCell[
                    CalculateScan`StepByStepIntegrate`CommonFunctions`dd[
                    Global`x]]], "\",\\n\"", 
                    InterpretationBox[
                    Cell[
                    BoxData[
                    FormBox[
                    RowBox[{
                    
                    RowBox[{
                    "\[DifferentialD]", "\[NegativeVeryThinSpace]", "f"}], 
                    "\[LongEqual]", 
                    RowBox[{"2", " ", "x"}]}], TraditionalForm]]], 
                    ExpressionCell[
                    CalculateScan`StepByStepIntegrate`CommonFunctions`dd[
                    Global`f] == 2 Global`x]], 
                    InterpretationBox[
                    Cell[
                    BoxData[
                    FormBox[
                    
                    RowBox[{
                    "\[DifferentialD]", "\[NegativeVeryThinSpace]", "x"}], 
                    TraditionalForm]]], 
                    ExpressionCell[
                    CalculateScan`StepByStepIntegrate`CommonFunctions`dd[
                    Global`x]]], "\",     \"", 
                    InterpretationBox[
                    Cell[
                    BoxData[
                    FormBox[
                    RowBox[{"g", "\[LongEqual]", 
                    FractionBox[
                    SuperscriptBox["\[ExponentialE]", 
                    RowBox[{"4", " ", "x"}]], "4"]}], TraditionalForm]]], 
                    ExpressionCell[
                    Global`g == Rational[1, 4] E^(4 Global`x)]], "\":\""}, 
                   "Row", DisplayFunction -> (
                    RowBox[{#, "\[InvisibleSpace]", #2, 
                    "\[InvisibleSpace]", #3, "\[InvisibleSpace]", #4, 
                    "\[InvisibleSpace]", #5, "\[InvisibleSpace]", #6, 
                    "\[InvisibleSpace]", #7, "\[InvisibleSpace]", #8, 
                    "\[InvisibleSpace]", #9, "\[InvisibleSpace]", #10, 
                    "\[InvisibleSpace]", #11, "\[InvisibleSpace]", #12, 
                    "\[InvisibleSpace]", #13, "\[InvisibleSpace]", #14, 
                    "\[InvisibleSpace]", #15}]& ), 
                   InterpretationFunction -> (RowBox[{
                    StyleBox[
                    "Row", FontFamily -> "Bitstream Vera Sans", 
                    FontSize -> -1 + Inherited], "[", 
                    RowBox[{"{", 
                    
                    RowBox[{#, ",", #2, ",", #3, ",", #4, ",", #5, ",", #6, 
                    ",", #7, ",", #8, ",", #9, ",", #10, ",", #11, ",", #12, 
                    ",", #13, ",", #14, ",", #15}], "}"}], "]"}]& )], 
                  LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                  0, StripOnInput -> False], FontColor -> GrayLevel[0.5], 
                 FontSize -> Smaller, StripOnInput -> False]}, {
                InterpretationBox[
                 Cell[
                  BoxData[
                   FormBox[
                    RowBox[{
                    TagBox["\"\"", HoldForm], "\[LongEqual]", 
                    RowBox[{
                    RowBox[{
                    FractionBox["1", "4"], " ", 
                    SuperscriptBox["\[ExponentialE]", 
                    RowBox[{"4", " ", "x"}]], " ", 
                    SuperscriptBox["x", "2"]}], "-", 
                    RowBox[{
                    FractionBox["1", "2"], 
                    RowBox[{"\[Integral]", 
                    RowBox[{
                    RowBox[{
                    SuperscriptBox["\[ExponentialE]", 
                    RowBox[{"4", " ", "x"}]], " ", "x"}], 
                    RowBox[{"\[DifferentialD]", "x"}]}]}]}]}]}], 
                    TraditionalForm]]], 
                 ExpressionCell[
                 HoldForm[""] == (Rational[1, 4] E^(4 Global`x)) Global`x^2 + 
                   Rational[-1, 2] 
                    CalculateScan`StepByStepIntegrate`CommonFunctions`IntRun[
                    E^(4 Global`x) Global`x, Global`x]]]}, {
                StyleBox[
                 StyleBox[
                  TemplateBox[{"\"For the integrand \"", 
                    InterpretationBox[
                    Cell[
                    BoxData[
                    FormBox[
                    RowBox[{
                    SuperscriptBox["\[ExponentialE]", 
                    RowBox[{"4", " ", "x"}]], " ", "x"}], TraditionalForm]]], 
                    
                    ExpressionCell[E^(4 Global`x) Global`x]], 
                    "\", integrate by parts, \"", 
                    InterpretationBox[
                    Cell[
                    BoxData[
                    FormBox[
                    RowBox[{
                    TagBox[
                    RowBox[{"\[Integral]", 
                    RowBox[{"f", 
                    RowBox[{"\[DifferentialD]", "g"}]}]}], HoldForm], 
                    "\[LongEqual]", 
                    RowBox[{
                    RowBox[{"f", " ", "g"}], "-", 
                    TagBox[
                    RowBox[{"\[Integral]", 
                    RowBox[{"g", 
                    RowBox[{"\[DifferentialD]", "f"}]}]}], HoldForm]}]}], 
                    TraditionalForm]]], 
                    ExpressionCell[HoldForm[
                    Integrate[Global`f, Global`g]] == 
                    Global`f Global`g - HoldForm[
                    Integrate[Global`g, Global`f]]]], "\", where \\n \"", 
                    InterpretationBox[
                    Cell[
                    BoxData[
                    FormBox[
                    RowBox[{"f", "\[LongEqual]", "x"}], TraditionalForm]]], 
                    ExpressionCell[Global`f == Global`x]], "\",    \"", 
                    InterpretationBox[
                    Cell[
                    BoxData[
                    FormBox[
                    RowBox[{
                    
                    RowBox[{
                    "\[DifferentialD]", "\[NegativeVeryThinSpace]", "g"}], 
                    "\[LongEqual]", 
                    SuperscriptBox["\[ExponentialE]", 
                    RowBox[{"4", " ", "x"}]]}], TraditionalForm]]], 
                    ExpressionCell[
                    CalculateScan`StepByStepIntegrate`CommonFunctions`dd[
                    Global`g] == E^(4 Global`x)]], 
                    InterpretationBox[
                    Cell[
                    BoxData[
                    FormBox[
                    
                    RowBox[{
                    "\[DifferentialD]", "\[NegativeVeryThinSpace]", "x"}], 
                    TraditionalForm]]], 
                    ExpressionCell[
                    CalculateScan`StepByStepIntegrate`CommonFunctions`dd[
                    Global`x]]], "\",\\n\"", 
                    InterpretationBox[
                    Cell[
                    BoxData[
                    FormBox[
                    RowBox[{
                    
                    RowBox[{
                    "\[DifferentialD]", "\[NegativeVeryThinSpace]", "f"}], 
                    "\[LongEqual]", "\"\""}], TraditionalForm]]], 
                    ExpressionCell[
                    CalculateScan`StepByStepIntegrate`CommonFunctions`dd[
                    Global`f] == ""]], 
                    InterpretationBox[
                    Cell[
                    BoxData[
                    FormBox[
                    
                    RowBox[{
                    "\[DifferentialD]", "\[NegativeVeryThinSpace]", "x"}], 
                    TraditionalForm]]], 
                    ExpressionCell[
                    CalculateScan`StepByStepIntegrate`CommonFunctions`dd[
                    Global`x]]], "\",     \"", 
                    InterpretationBox[
                    Cell[
                    BoxData[
                    FormBox[
                    RowBox[{"g", "\[LongEqual]", 
                    FractionBox[
                    SuperscriptBox["\[ExponentialE]", 
                    RowBox[{"4", " ", "x"}]], "4"]}], TraditionalForm]]], 
                    ExpressionCell[
                    Global`g == Rational[1, 4] E^(4 Global`x)]], "\":\""}, 
                   "Row", DisplayFunction -> (
                    RowBox[{#, "\[InvisibleSpace]", #2, 
                    "\[InvisibleSpace]", #3, "\[InvisibleSpace]", #4, 
                    "\[InvisibleSpace]", #5, "\[InvisibleSpace]", #6, 
                    "\[InvisibleSpace]", #7, "\[InvisibleSpace]", #8, 
                    "\[InvisibleSpace]", #9, "\[InvisibleSpace]", #10, 
                    "\[InvisibleSpace]", #11, "\[InvisibleSpace]", #12, 
                    "\[InvisibleSpace]", #13, "\[InvisibleSpace]", #14, 
                    "\[InvisibleSpace]", #15}]& ), 
                   InterpretationFunction -> (RowBox[{
                    StyleBox[
                    "Row", FontFamily -> "Bitstream Vera Sans", 
                    FontSize -> -1 + Inherited], "[", 
                    RowBox[{"{", 
                    
                    RowBox[{#, ",", #2, ",", #3, ",", #4, ",", #5, ",", #6, 
                    ",", #7, ",", #8, ",", #9, ",", #10, ",", #11, ",", #12, 
                    ",", #13, ",", #14, ",", #15}], "}"}], "]"}]& )], 
                  LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                  0, StripOnInput -> False], FontColor -> GrayLevel[0.5], 
                 FontSize -> Smaller, StripOnInput -> False]}, {
                InterpretationBox[
                 Cell[
                  BoxData[
                   FormBox[
                    RowBox[{
                    TagBox["\"\"", HoldForm], "\[LongEqual]", 
                    RowBox[{
                    RowBox[{
                    FractionBox["1", "4"], " ", 
                    SuperscriptBox["\[ExponentialE]", 
                    RowBox[{"4", " ", "x"}]], " ", 
                    SuperscriptBox["x", "2"]}], "-", 
                    RowBox[{
                    FractionBox["1", "8"], " ", 
                    SuperscriptBox["\[ExponentialE]", 
                    RowBox[{"4", " ", "x"}]], " ", "x"}], "+", 
                    RowBox[{
                    FractionBox["1", "8"], 
                    RowBox[{"\[Integral]", 
                    RowBox[{
                    SuperscriptBox["\[ExponentialE]", 
                    RowBox[{"4", " ", "x"}]], 
                    RowBox[{"\[DifferentialD]", "x"}]}]}]}]}]}], 
                    TraditionalForm]]], 
                 ExpressionCell[
                 HoldForm[
                   ""] == (Rational[-1, 8] E^(4 Global`x)) 
                    Global`x + (Rational[1, 4] E^(4 Global`x)) Global`x^2 + 
                   Rational[1, 8] 
                    CalculateScan`StepByStepIntegrate`CommonFunctions`IntRun[
                    E^(4 Global`x), Global`x]]]}, {
                StyleBox[
                 StyleBox[
                  TemplateBox[{"\"The integral of \"", 
                    InterpretationBox[
                    Cell[
                    BoxData[
                    FormBox[
                    SuperscriptBox["\[ExponentialE]", 
                    RowBox[{"4", " ", "x"}]], TraditionalForm]]], 
                    ExpressionCell[E^(4 Global`x)]], "\" is \"", 
                    InterpretationBox[
                    Cell[
                    BoxData[
                    FormBox[
                    FractionBox[
                    SuperscriptBox["\[ExponentialE]", 
                    RowBox[{"4", " ", "x"}]], "4"], TraditionalForm]]], 
                    ExpressionCell[Rational[1, 4] E^(4 Global`x)]], "\":\""}, 
                   "Row", DisplayFunction -> (
                    RowBox[{#, "\[InvisibleSpace]", #2, 
                    "\[InvisibleSpace]", #3, "\[InvisibleSpace]", #4, 
                    "\[InvisibleSpace]", #5}]& ), 
                   InterpretationFunction -> (RowBox[{
                    StyleBox[
                    "Row", FontFamily -> "Bitstream Vera Sans", 
                    FontSize -> -1 + Inherited], "[", 
                    RowBox[{"{", 
                    RowBox[{#, ",", #2, ",", #3, ",", #4, ",", #5}], "}"}], 
                    "]"}]& )], LinebreakAdjustments -> {1, 100, 1, 0, 100}, 
                  LineIndent -> 0, StripOnInput -> False], FontColor -> 
                 GrayLevel[0.5], FontSize -> Smaller, StripOnInput -> 
                 False]}, {
                InterpretationBox[
                 Cell[
                  BoxData[
                   FormBox[
                    RowBox[{
                    TagBox["\"\"", HoldForm], "\[LongEqual]", 
                    StyleBox[
                    RowBox[{
                    StyleBox[
                    RowBox[{
                    RowBox[{
                    FractionBox["1", "4"], " ", 
                    SuperscriptBox["\[ExponentialE]", 
                    RowBox[{"4", " ", "x"}]], " ", 
                    SuperscriptBox["x", "2"]}], "-", 
                    RowBox[{
                    FractionBox["1", "8"], " ", 
                    SuperscriptBox["\[ExponentialE]", 
                    RowBox[{"4", " ", "x"}]], " ", "x"}], "+", 
                    FractionBox[
                    SuperscriptBox["\[ExponentialE]", 
                    RowBox[{"4", " ", "x"}]], "32"]}], 
                    GrayLevel[0]], "+", 
                    StyleBox[
                    "constant", FontFamily -> "Helvetica", Magnification -> 
                    0.9 Inherited]}], 
                    GrayLevel[0.6]]}], TraditionalForm]]], 
                 ExpressionCell[
                 HoldForm[""] == 
                  CalculateScan`StepByStepIntegrate`integralPlusC[
                   Rational[1, 32] 
                    E^(4 Global`x) + (Rational[-1, 8] E^(4 Global`x)) 
                    Global`x + (Rational[1, 4] E^(4 Global`x)) 
                    Global`x^2]]]}, {
                StyleBox[
                 StyleBox[
                 "\"Which is equal to:\"", 
                  LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                  0, StripOnInput -> False], FontColor -> GrayLevel[0.5], 
                 FontSize -> Smaller, StripOnInput -> False]}, {
                InterpretationBox[
                 Cell[
                  BoxData[
                   FormBox[
                    RowBox[{
                    TagBox["\"\"", HoldForm], "\[LongEqual]", 
                    StyleBox[
                    RowBox[{
                    StyleBox[
                    RowBox[{
                    FractionBox["1", "32"], " ", 
                    SuperscriptBox["\[ExponentialE]", 
                    RowBox[{"4", " ", "x"}]], " ", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"8", " ", 
                    SuperscriptBox["x", "2"]}], "-", 
                    RowBox[{"4", " ", "x"}], "+", "1"}], ")"}]}], 
                    GrayLevel[0]], "+", 
                    StyleBox[
                    "constant", FontFamily -> "Helvetica", Magnification -> 
                    0.9 Inherited]}], 
                    GrayLevel[0.6]]}], TraditionalForm]]], 
                 ExpressionCell[
                 HoldForm[""] == 
                  CalculateScan`StepByStepIntegrate`integralPlusC[(
                    Rational[1, 32] E^(4 Global`x)) (1 - 4 Global`x + 
                    8 Global`x^2)]]]}}, 
              GridBoxAlignment -> {"Columns" -> {{Left}}}, 
              GridBoxItemSize -> {
               "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
              GridBoxSpacings -> {
               "Columns" -> {{None}}, "Rows" -> {None, {Plain, 1}}}], 
             "Column"], TraditionalForm]], "Output"]}], 
       XMLElement[
       "dataformats", {}, {"plaintext,computabledata,formatteddata"}]}], 
     XMLElement["states", {"count" -> "1"}, {
       XMLElement[
       "state", {
        "name" -> "Hide steps", "input" -> 
         "IndefiniteIntegral__Hide steps"}, {}]}]}], Typeset`pod2$$ = 
   XMLElement[
   "pod", {"title" -> "Plots of the integral", "scanner" -> "Integral", "id" -> 
     "Plot of the integral", "position" -> "200", "error" -> "false", 
     "numsubpods" -> "3"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {
        "Plot[(E^(4 x) (1 - 4 x + 8 x^2))/32, {x, -0.75, 0.75}]"}], 
       XMLElement["cell", {"compressed" -> True, "string" -> False}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             FormBox[
              StyleBox[
               
               DynamicModuleBox[{
                Global`max50$$ = 0.5, Global`min49$$ = -0.5, 
                 CalculateUtilities`GraphicsUtilities`Private`more$$ = False, 
                 Typeset`show$$ = True, Typeset`bookmarkList$$ = {}, 
                 Typeset`bookmarkMode$$ = "Menu", Typeset`animator$$, 
                 Typeset`animvar$$ = 1, Typeset`name$$ = "\"untitled\"", 
                 Typeset`specs$$ = {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`more$$], {
                    False, True}}, {{
                    Hold[Global`min49$$], -0.5, "min"}, -1, 1}, {{
                    Hold[Global`max50$$], 0.5, "max"}, -1, 1}, {
                    Hold[
                    Style[
                    Overlay[{
                    RawBoxes[
                    PaneBox[
                    GraphicsBox[
                    
                    RasterBox[{{{0, 0, 0, 24}}, {{0, 0, 0, 9}}, {{0, 0, 0, 
                    10}}, {{0, 0, 0, 10}}, {{0, 0, 0, 9}}, {{0, 0, 0, 9}}, {{
                    0, 0, 0, 8}}, {{0, 0, 0, 8}}, {{0, 0, 0, 9}}, {{0, 0, 0, 
                    8}}, {{0, 0, 0, 7}}, {{0, 0, 0, 7}}, {{0, 0, 0, 8}}, {{0, 
                    0, 0, 6}}, {{0, 0, 0, 6}}, {{0, 0, 0, 6}}, {{0, 0, 0, 
                    6}}, {{0, 0, 0, 5}}, {{0, 0, 0, 6}}, {{0, 0, 0, 5}}, {{0, 
                    0, 0, 4}}, {{0, 0, 0, 4}}, {{0, 0, 0, 5}}, {{0, 0, 0, 
                    5}}, {{0, 0, 0, 3}}, {{0, 0, 0, 4}}, {{0, 0, 0, 3}}, {{0, 
                    0, 0, 3}}, {{0, 0, 0, 3}}, {{0, 0, 0, 3}}, {{0, 0, 0, 
                    2}}, {{0, 0, 0, 2}}, {{0, 0, 0, 2}}, {{0, 0, 0, 2}}, {{0, 
                    0, 0, 1}}, {{0, 0, 0, 2}}, {{0, 0, 0, 2}}, {{0, 0, 0, 
                    0}}, {{0, 0, 0, 1}}, {{255, 255, 255, 0}}, {{255, 255, 
                    255, 0}}, {{255, 255, 255, 0}}, {{255, 255, 255, 0}}, {{
                    255, 255, 255, 0}}, {{255, 255, 255, 0}}}, {{0, 45}, {
                    2500, 0}}, {0, 255}, ColorFunction -> RGBColor], 
                    ImageSize -> {2500, 45}, 
                    PlotRange -> {{0, 2500}, {0, 45}}], ImageSize -> 
                    Scaled[1], ScrollPosition -> {0., 0.}]], 
                    Pane[
                    Column[{
                    Grid[{{
                    Manipulate`Place[1], 
                    Manipulate`Place[2]}}]}], 
                    ImageMargins -> {{20, 30}, {10, 10}}]}, {1, 2}, 2, 
                    Alignment -> {Left, Top}]]], 
                    Manipulate`Dump`ThisIsNotAControl}}, Typeset`size$$ = 
                 Automatic, Typeset`update$$ = 0, Typeset`initDone$$ = False, 
                 Typeset`skipInitDone$$ = False, 
                 CalculateUtilities`GraphicsUtilities`Private`more$252926$$ = 
                 False, Global`min49$252931$$ = 0, Global`max50$252932$$ = 0}, 
                DynamicBox[
                 Manipulate`ManipulateBoxes[
                 2, TraditionalForm, 
                  "Variables" :> {
                   Global`max50$$ = 0.5, Global`min49$$ = -0.5, 
                    CalculateUtilities`GraphicsUtilities`Private`more$$ = 
                    False}, "ControllerVariables" :> {
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`more$$, 
                    
                    CalculateUtilities`GraphicsUtilities`Private`more$252926$$\
, False], 
                    Hold[Global`min49$$, Global`min49$252931$$, 0], 
                    Hold[Global`max50$$, Global`max50$252932$$, 0]}, 
                  "OtherVariables" :> {
                   Typeset`show$$, Typeset`bookmarkList$$, 
                    Typeset`bookmarkMode$$, Typeset`animator$$, 
                    Typeset`animvar$$, Typeset`name$$, Typeset`specs$$, 
                    Typeset`size$$, Typeset`update$$, Typeset`initDone$$, 
                    Typeset`skipInitDone$$}, "Body" :> Function[Null, 
                    CalculateUtilities`GraphicsUtilities`Private`post$252918[
                    Plot[
                    SlotSequence[1]]], 
                    HoldAll][(Rational[1, 32] E^(4 Global`x)) (1 - 4 Global`x + 
                    8 Global`x^2), {
                    Global`x, 0. + 
                    0.8017837257372731 
                    Tan[1.5040801783846716` Global`min49$$], 0. + 
                    0.8017837257372731 
                    Tan[1.5040801783846716` 
                    If[Global`min49$$ == Global`max50$$, 
                    Global`min49$$ + (0.75 - 0.75)/1000, Global`max50$$]]}, 
                    LabelStyle -> {FontFamily -> "Bitstream Charter"}, 
                    WorkingPrecision -> MachinePrecision, 
                    PlotRange -> {Automatic, Automatic}, Ticks -> Automatic, 
                    ImageSize -> 200, AxesLabel -> {
                    RawBoxes[
                    FormBox["x", TraditionalForm]], None}], 
                  "Specifications" :> {{
                    CalculateUtilities`GraphicsUtilities`Private`more$$, {
                    False, True}, ControlType -> None}, {{
                    Global`min49$$, -0.5, "min"}, -1, 1, ImageSize -> Tiny, 
                    ControlPlacement -> 1}, {{Global`max50$$, 0.5, "max"}, -1,
                     1, ImageSize -> Tiny, ControlPlacement -> 2}, 
                    Style[
                    Overlay[{
                    RawBoxes[
                    PaneBox[
                    GraphicsBox[
                    
                    RasterBox[{{{0, 0, 0, 24}}, {{0, 0, 0, 9}}, {{0, 0, 0, 
                    10}}, {{0, 0, 0, 10}}, {{0, 0, 0, 9}}, {{0, 0, 0, 9}}, {{
                    0, 0, 0, 8}}, {{0, 0, 0, 8}}, {{0, 0, 0, 9}}, {{0, 0, 0, 
                    8}}, {{0, 0, 0, 7}}, {{0, 0, 0, 7}}, {{0, 0, 0, 8}}, {{0, 
                    0, 0, 6}}, {{0, 0, 0, 6}}, {{0, 0, 0, 6}}, {{0, 0, 0, 6}},
                     {{0, 0, 0, 5}}, {{0, 0, 0, 6}}, {{0, 0, 0, 5}}, {{0, 0, 
                    0, 4}}, {{0, 0, 0, 4}}, {{0, 0, 0, 5}}, {{0, 0, 0, 5}}, {{
                    0, 0, 0, 3}}, {{0, 0, 0, 4}}, {{0, 0, 0, 3}}, {{0, 0, 0, 
                    3}}, {{0, 0, 0, 3}}, {{0, 0, 0, 3}}, {{0, 0, 0, 2}}, {{0, 
                    0, 0, 2}}, {{0, 0, 0, 2}}, {{0, 0, 0, 2}}, {{0, 0, 0, 
                    1}}, {{0, 0, 0, 2}}, {{0, 0, 0, 2}}, {{0, 0, 0, 0}}, {{0, 
                    0, 0, 1}}, {{255, 255, 255, 0}}, {{255, 255, 255, 0}}, {{
                    255, 255, 255, 0}}, {{255, 255, 255, 0}}, {{255, 255, 255,
                     0}}, {{255, 255, 255, 0}}}, {{0, 45}, {2500, 0}}, {0, 
                    255}, ColorFunction -> RGBColor], ImageSize -> {2500, 45},
                     PlotRange -> {{0, 2500}, {0, 45}}], ImageSize -> 
                    Scaled[1], ScrollPosition -> {0., 0.}]], 
                    Pane[
                    Column[{
                    Grid[{{
                    Manipulate`Place[1], 
                    Manipulate`Place[2]}}]}], 
                    ImageMargins -> {{20, 30}, {10, 10}}]}, {1, 2}, 2, 
                    Alignment -> {Left, Top}]]}, 
                  "Options" :> {
                   TrackedSymbols -> True, ControlPlacement -> Bottom, 
                    FrameMargins -> {{0, 0}, {0, 10}}, Paneled -> False, 
                    AppearanceElements -> {}, 
                    LabelStyle -> {
                    "DialogStyle", FontColor -> GrayLevel[0.25]}}, 
                  "DefaultOptions" :> {}], SingleEvaluation -> True], 
                Initialization :> (ReleaseHold[
                   Hold[
                   CalculateUtilities`GraphicsUtilities`Private`WACleanTicks[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Blank[]]] := 
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`res, 
                    CalculateUtilities`GraphicsUtilities`Private`unitformat}, 
                    CalculateUtilities`GraphicsUtilities`Private`res = 
                    ReplaceAll[
                    ReplaceAll[
                    Part[
                    DeleteCases[
                    ReplaceAll[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Alternatives[
                    Style, Global`UnitNumberForm, NumberForm] -> (#& )], {
                    Blank[], "", 
                    BlankNullSequence[]}], All, 
                    Span[1, 2]], Superscript[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[Integer]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`p, 
                    Blank[Integer]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`b^
                    CalculateUtilities`GraphicsUtilities`Private`p], Row[{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    BlankSequence[]]}, "\[Times]"] :> 
                    Times[CalculateUtilities`GraphicsUtilities`Private`a]]; If[
                    MatchQ[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, All, 2], 
                    Condition[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`quants, {
                    Alternatives[
                    BlankSequence[Global`ShortQuantity], 
                    BlankSequence[Global`Quantity]]}], Length[
                    Union[
                    Map[
                    Global`UnitObjectPart, 
                    CalculateUtilities`GraphicsUtilities`Private`quants]]] == 
                    1]], CalculateUtilities`GraphicsUtilities`Private`\
unitformat = Global`ToCDFQuantityFunction[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, 1, 2]]; 
                    CalculateUtilities`GraphicsUtilities`Private`unitformat -> 
                    Thread[{
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, All, 1], 
                    Global`QuantityPart[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, All, 2], 
                    Global`UnitObjectPart[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, 1, 
                    2]]]}], 
                    CalculateUtilities`GraphicsUtilities`Private`res]]; 
                    Options[
                    CalculateUtilities`GraphicsUtilities`Private`post$252918] = \
{"ReturnInteractiveTypes" -> False, "Nearest" -> Automatic}; 
                    CalculateUtilities`GraphicsUtilities`Private`post$252918[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Blank[Graphics]], 
                    OptionsPattern[]] := 
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`lines, 
                    CalculateUtilities`GraphicsUtilities`Private`pts, 
                    CalculateUtilities`GraphicsUtilities`Private`gg, 
                    CalculateUtilities`GraphicsUtilities`Private`type, 
                    CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r, 
                    CalculateUtilities`GraphicsUtilities`Private`oldepilog, 
                    CalculateUtilities`GraphicsUtilities`Private`range, 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines, 
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines,
                     CalculateUtilities`GraphicsUtilities`Private`\
neareststyle = OptionValue["Nearest"]}, 
                    CalculateUtilities`GraphicsUtilities`Private`oldepilog = 
                    Replace[
                    ReplaceAll[Epilog, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]], 
                    Epilog -> Sequence[]]; Switch[
                    ReplaceAll[{Frame, Axes}, 
                    Options[
                    CalculateUtilities`GraphicsUtilities`Private`g]], {True, 
                    Blank[]}, 
                    CalculateUtilities`GraphicsUtilities`Private`type = 
                    Frame; {
                    CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r} = 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, 
                    ReplaceAll[FrameTicks, 
                    Options[
                    CalculateUtilities`GraphicsUtilities`Private`g]]], {
                    Blank[], True}, 
                    CalculateUtilities`GraphicsUtilities`Private`type = 
                    Axes; {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l} = 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, 
                    ReplaceAll[Ticks, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]]], 
                    Blank[], 
                    CalculateUtilities`GraphicsUtilities`Private`type = None]; 
                    If[
                    And[
                    CalculateUtilities`GraphicsUtilities`Private`type === 
                    Frame, 
                    Or[
                    Not[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`t === None, 
                    CalculateUtilities`GraphicsUtilities`Private`b === 
                    CalculateUtilities`GraphicsUtilities`Private`t]], 
                    Not[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`r === None, 
                    CalculateUtilities`GraphicsUtilities`Private`l === 
                    CalculateUtilities`GraphicsUtilities`Private`r]]]], 
                    CalculateUtilities`GraphicsUtilities`Private`type = None]; 
                    If[
                    TrueQ[
                    OptionValue["ReturnInteractiveTypes"]], 
                    Which[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`type === 
                    None, CalculateUtilities`GraphicsUtilities`Private`b === 
                    None, CalculateUtilities`GraphicsUtilities`Private`l === 
                    None], {}, 
                    FreeQ[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Alternatives[Line, Point]], {}, True, {
                    "Tooltips", "Coordinates"}], If[
                    FreeQ[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Alternatives[Line, Point]], 
                    Return[CalculateUtilities`GraphicsUtilities`Private`g]]; 
                    CalculateUtilities`GraphicsUtilities`Private`gg = 
                    Normal[CalculateUtilities`GraphicsUtilities`Private`g]; 
                    CalculateUtilities`GraphicsUtilities`Private`pts = 
                    Partition[
                    Flatten[
                    Cases[
                    Part[CalculateUtilities`GraphicsUtilities`Private`gg, 1], 
                    Point[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Blank[]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`a, 
                    Infinity]], 2]; 
                    If[Length[
                    CalculateUtilities`GraphicsUtilities`Private`pts] < 2, 
                    CalculateUtilities`GraphicsUtilities`Private`lines = Cases[
                    Part[CalculateUtilities`GraphicsUtilities`Private`gg, 1], 
                    
                    Blank[Line], Infinity]; 
                    If[CalculateUtilities`GraphicsUtilities`Private`lines === \
{}, 
                    Return[CalculateUtilities`GraphicsUtilities`Private`g]]; 
                    CalculateUtilities`GraphicsUtilities`Private`pts = Flatten[
                    Cases[
                    CalculateUtilities`GraphicsUtilities`Private`lines, Line[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Blank[]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`a, Infinity],
                     1]; If[
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle === 
                    Automatic, If[
                    CalculateUtilities`GraphicsUtilities`Private`orderedLines[
                    CalculateUtilities`GraphicsUtilities`Private`lines], 
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle = 
                    "1D", CalculateUtilities`GraphicsUtilities`Private`\
neareststyle = "2D"]; Null], 
                    If[
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle === 
                    Automatic, 
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle = 
                    "2D"]]; 
                    CalculateUtilities`GraphicsUtilities`Private`range = 
                    Replace[
                    ReplaceAll[PlotRange, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]], 
                    Except[{{
                    PatternTest[
                    Blank[], NumberQ], 
                    PatternTest[
                    Blank[], NumberQ]}, {
                    PatternTest[
                    Blank[], NumberQ], 
                    PatternTest[
                    Blank[], NumberQ]}}] :> {
                    Through[
                    {Min, Max}[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    1]]], 
                    Through[
                    {Min, Max}[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    2]]]}]; CalculateUtilities`GraphicsUtilities`Private`b = 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[CalculateUtilities`GraphicsUtilities`Private`b, 
                    First[CalculateUtilities`GraphicsUtilities`Private`range], 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    1]]; CalculateUtilities`GraphicsUtilities`Private`l = 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[CalculateUtilities`GraphicsUtilities`Private`l, 
                    Last[CalculateUtilities`GraphicsUtilities`Private`range], 
                    
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    2]]; CalculateUtilities`GraphicsUtilities`Private`\
oldgridlines = ReplaceAll[GridLines, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]]; 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines = 
                    With[{CalculateUtilities`GraphicsUtilities`Private`gray = 
                    GrayLevel[0.7]}, 
                    Replace[
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines,\
 {Pattern[CalculateUtilities`GraphicsUtilities`Private`a, {
                    Blank[List], 
                    Blank[List]}] :> Dynamic[
                    Join[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Replace[
                    MousePosition[{"Graphics", Graphics}, None], {
                    None -> {{}, {}}, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`x, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`y, 
                    Blank[]]} :> {{{
                    CalculateUtilities`GraphicsUtilities`Private`x, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}, {{
                    CalculateUtilities`GraphicsUtilities`Private`y, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}}}], 
                    2]], {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Blank[List]], Automatic} :> 
                    With[{CalculateUtilities`GraphicsUtilities`Private`\
divisions = {CalculateUtilities`GraphicsUtilities`Private`a, 
                    FindDivisions[
                    Last[CalculateUtilities`GraphicsUtilities`Private`range], 
                    7]}}, 
                    Dynamic[
                    Join[
                    CalculateUtilities`GraphicsUtilities`Private`divisions, 
                    Replace[
                    MousePosition[{"Graphics", Graphics}, None], {
                    None -> {{}, {}}, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`x, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`y, 
                    Blank[]]} :> {{{
                    CalculateUtilities`GraphicsUtilities`Private`x, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}, {{
                    CalculateUtilities`GraphicsUtilities`Private`y, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}}}], 
                    2]]], Blank[] -> Dynamic[
                    
                    Map[{{#, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}& , 
                    MousePosition[{"Graphics", Graphics}, None]]]}]]; If[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`type === 
                    None, CalculateUtilities`GraphicsUtilities`Private`b === 
                    None, CalculateUtilities`GraphicsUtilities`Private`l === 
                    None], 
                    Show[
                    CalculateUtilities`GraphicsUtilities`Private`g, GridLines -> 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines, 
                    If[
                    MatchQ[
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines, 
                    Alternatives[None, GridLines]], 
                    Method -> {"GridLinesInFront" -> True}, 
                    Apply[Sequence, {}]]], 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`nf = 
                    If[CalculateUtilities`GraphicsUtilities`Private`\
neareststyle === "1D", 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`n = 
                    Nearest[Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 1] -> 
                    CalculateUtilities`GraphicsUtilities`Private`pts]}, 
                    CalculateUtilities`GraphicsUtilities`Private`n[
                    Part[#, 1]]& ], 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`n = 
                    Nearest[Transpose[
                    Transpose[
                    CalculateUtilities`GraphicsUtilities`Private`pts]/Abs[
                    Apply[
                    Subtract, 
                    CalculateUtilities`GraphicsUtilities`Private`range, {
                    1}]]] -> 
                    CalculateUtilities`GraphicsUtilities`Private`pts], 
                    CalculateUtilities`GraphicsUtilities`Private`scale = Abs[
                    Apply[
                    Subtract, 
                    CalculateUtilities`GraphicsUtilities`Private`range, {
                    1}]]}, CalculateUtilities`GraphicsUtilities`Private`n[#/
                    CalculateUtilities`GraphicsUtilities`Private`scale]& ]], 
                    CalculateUtilities`GraphicsUtilities`Private`left = 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`bottom = 
                    CalculateUtilities`GraphicsUtilities`Private`b}, 
                    Show[
                    CalculateUtilities`GraphicsUtilities`Private`g, GridLines -> 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines, 
                    If[
                    MatchQ[
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines, 
                    Alternatives[None, GridLines]], 
                    Method -> {"GridLinesInFront" -> True}, 
                    Apply[Sequence, {}]], 
                    Epilog -> {
                    CalculateUtilities`GraphicsUtilities`Private`oldepilog, 
                    Dynamic[
                    
                    DynamicModule[{
                    CalculateUtilities`GraphicsUtilities`Private`pt = 
                    CalculateUtilities`GraphicsUtilities`Private`nf[
                    MousePosition[{"Graphics", Graphics}, {0, 0}]], 
                    CalculateUtilities`GraphicsUtilities`Private`scaled = 
                    MousePosition[{"GraphicsScaled", Graphics}, None]}, 
                    If[
                    CalculateUtilities`GraphicsUtilities`Private`scaled === 
                    None, {}, {
                    Text[
                    Style[
                    Row[{
                    CalculateUtilities`GraphicsUtilities`Private`bottom[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pt, 1, 1]], 
                    CalculateUtilities`GraphicsUtilities`Private`left[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pt, 1, 2]]}, 
                    ","], 12], 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pt, 1], {
                    1.5 Sign[Part[
                    CalculateUtilities`GraphicsUtilities`Private`scaled, 1] - 
                    0.5], 0}, Background -> White], 
                    AbsolutePointSize[7], 
                    Point[CalculateUtilities`GraphicsUtilities`Private`pt], 
                    White, 
                    AbsolutePointSize[5], 
                    Point[
                    CalculateUtilities`GraphicsUtilities`Private`pt]}]]]}]]]]]\
; CalculateUtilities`GraphicsUtilities`Private`post$252918[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Blank[]], 
                    BlankNullSequence[]] := 
                    CalculateUtilities`GraphicsUtilities`Private`g; 
                    CalculateUtilities`GraphicsUtilities`Private`orderedLines[{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`l, 
                    BlankSequence[Line]]}] := 
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`ordered, 
                    CalculateUtilities`GraphicsUtilities`Private`intervals}, 
                    CalculateUtilities`GraphicsUtilities`Private`ordered = 
                    Apply[And, 
                    Map[OrderedQ[
                    Part[#, 1, All, 1]]& , 
                    Hold[CalculateUtilities`GraphicsUtilities`Private`l]]]; If[
                    Not[
                    TrueQ[
                    CalculateUtilities`GraphicsUtilities`Private`ordered]], 
                    Return[False]]; 
                    CalculateUtilities`GraphicsUtilities`Private`intervals = 
                    Part[{CalculateUtilities`GraphicsUtilities`Private`l}, 
                    All, 1, {1, -1}, 1]; Length[
                    Apply[
                    Interval, 
                    CalculateUtilities`GraphicsUtilities`Private`intervals]] === 
                    Length[CalculateUtilities`GraphicsUtilities`Private`\
intervals]]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, 
                    Alternatives[Automatic, FrameTicks]] = {
                    Identity, Identity, Identity, Identity}; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`l, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`t, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`r, 
                    Blank[]]}] := 
                    Map[CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction, {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r}]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, {{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`l, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`r, 
                    Blank[]]}, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`t, 
                    Blank[]]}}] := 
                    Map[CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction, {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r}]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, 
                    Blank[]] = {None, None, None, None}; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, 
                    Alternatives[Automatic, Ticks]] = {Identity, Identity}; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`h, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`v, 
                    Blank[]]}] := 
                    Map[CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction, {CalculateUtilities`GraphicsUtilities`Private`h, 
                    CalculateUtilities`GraphicsUtilities`Private`v}]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, 
                    Blank[]] = {None, None}; 
                    CalculateUtilities`GraphicsUtilities`Private`CDFCleanTicks[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Blank[]]] := ReplaceAll[
                    ReplaceAll[
                    Part[
                    DeleteCases[
                    ReplaceAll[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Alternatives[Style, NumberForm] -> (#& )], {
                    Blank[], "", 
                    BlankNullSequence[]}], All, 
                    Span[1, 2]], Superscript[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[Integer]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`p, 
                    Blank[Integer]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`b^
                    CalculateUtilities`GraphicsUtilities`Private`p], Row[{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    BlankSequence[]]}, "\[Times]"] :> 
                    Times[CalculateUtilities`GraphicsUtilities`Private`a]]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks$, 
                    Blank[]]] := 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    CalculateUtilities`GraphicsUtilities`Private`WACleanTicks[
                    CalculateUtilities`GraphicsUtilities`Private`ticks$]]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[None] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[True] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[Automatic] = Identity; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[All] = Identity; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[Pattern[CalculateUtilities`GraphicsUtilities`Private`func, 
                    Blank[]] -> 
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Blank[]]] := Replace[
                    
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[CalculateUtilities`GraphicsUtilities`Private`ticks], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`f, 
                    Except[None]] :> 
                    Composition[
                    CalculateUtilities`GraphicsUtilities`Private`func, 
                    CalculateUtilities`GraphicsUtilities`Private`f]]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[{}] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {
                    Repeated[{
                    Blank[Integer], 
                    Blank[String]}]}]] := Which[
                    Quiet[
                    MatchQ[
                    Apply[SameQ, 
                    Map[Part[
                    DateList[#], 
                    Span[2, All]]& , 
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {
                    2}], {1}], {
                    Repeated[True]}]], DateString, 
                    Apply[And, 
                    StringMatchQ[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, All, 
                    2], NumberString]], 
                    
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Transpose[{
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, All, 
                    1], 
                    ToExpression[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, All, 
                    2]]}]], True, None]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {
                    Repeated[{
                    PatternTest[
                    Blank[], NumericQ], 
                    PatternTest[
                    Blank[], NumericQ]}]}]] := Which[
                    MatchQ[
                    Apply[
                    Equal, CalculateUtilities`GraphicsUtilities`Private`ticks,\
 {1}], {
                    Repeated[True]}], Identity, 
                    MatchQ[
                    
                    Apply[# == Log[#2]& , 
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {1}], {
                    Repeated[True]}], Exp, 
                    TrueQ[
                    Quiet[
                    Apply[Equal, 
                    Apply[Divide, Transpose[
                    Rest[CalculateUtilities`GraphicsUtilities`Private`ticks]] - 
                    Part[CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    1]]]]], 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`slope = 
                    Apply[Divide, 
                    Apply[Subtract, 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {-1, 
                    1}]]]}, 
                    SetPrecision[(# - Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 1, 
                    1])/CalculateUtilities`GraphicsUtilities`Private`slope + 
                    Part[CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    1, 2], 3]& ], True, None]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Blank[]] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`type, 
                    Blank[]], 
                    BlankNullSequence[]] := 
                    CalculateUtilities`GraphicsUtilities`Private`type; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[Identity, {
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`min, 
                    Blank[]], 
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`max, 
                    Blank[]]}, 
                    Blank[]] := 
                    With[{CalculateUtilities`GraphicsUtilities`Private`nf = 
                    CalculateUtilities`GraphicsUtilities`Private`numberForm, 
                    CalculateUtilities`GraphicsUtilities`Private`acc = 
                    Floor[Max[
                    Ceiling[Log[10, 
                    Max[
                    
                    Abs[{CalculateUtilities`GraphicsUtilities`Private`min, 
                    CalculateUtilities`GraphicsUtilities`Private`max}]]] - 
                    Log[10, (CalculateUtilities`GraphicsUtilities`Private`max - 
                    CalculateUtilities`GraphicsUtilities`Private`min)/100]], 
                    3] - RealExponent[
                    Max[
                    Abs[{CalculateUtilities`GraphicsUtilities`Private`min, 
                    CalculateUtilities`GraphicsUtilities`Private`max}]]]]}, 
                    CalculateUtilities`GraphicsUtilities`Private`nf[#, 
                    CalculateUtilities`GraphicsUtilities`Private`acc]& ]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[Exp, {
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`min, 
                    Blank[]], 
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`max, 
                    Blank[]]}, 
                    Blank[]] := 
                    With[{CalculateUtilities`GraphicsUtilities`Private`prec = 
                    Max[
                    Ceiling[Log[10, 
                    Max[
                    
                    Abs[{CalculateUtilities`GraphicsUtilities`Private`min, 
                    CalculateUtilities`GraphicsUtilities`Private`max}]]] - 
                    Log[10, (CalculateUtilities`GraphicsUtilities`Private`max - 
                    CalculateUtilities`GraphicsUtilities`Private`min)/100]], 
                    3]}, Quiet[
                    RawBoxes[
                    ToBoxes[
                    NumberForm[
                    Exp[#], 
                    CalculateUtilities`GraphicsUtilities`Private`prec]]]]& ]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[DateString, {
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`min, 
                    Blank[]], 
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`max, 
                    Blank[]]}, 
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`pts, 
                    Blank[]]] := 
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`dates, 
                    CalculateUtilities`GraphicsUtilities`Private`spec}, 
                    CalculateUtilities`GraphicsUtilities`Private`dates = 
                    Map[DateList, 
                    CalculateUtilities`GraphicsUtilities`Private`pts]; 
                    CalculateUtilities`GraphicsUtilities`Private`spec = Switch[
                    Map[Length, 
                    Map[Union, 
                    Transpose[
                    CalculateUtilities`GraphicsUtilities`Private`dates]]], {
                    Blank[], 1, 1, 
                    BlankSequence[]}, {"Year"}, {
                    Blank[], 
                    Blank[], 1, 
                    BlankSequence[]}, {"MonthNameShort", " ", "Year"}, 
                    Blank[], {
                    "DayShort", " ", "MonthNameShort", " ", "Year"}]; 
                    If[(CalculateUtilities`GraphicsUtilities`Private`max - 
                    CalculateUtilities`GraphicsUtilities`Private`min)/
                    31536000 > 25, 
                    CalculateUtilities`GraphicsUtilities`Private`spec = {
                    "Year"}]; 
                    With[{CalculateUtilities`GraphicsUtilities`Private`s = 
                    CalculateUtilities`GraphicsUtilities`Private`spec}, 
                    DateString[#, 
                    CalculateUtilities`GraphicsUtilities`Private`s]& ]]; 
                    CalculateUtilities`GraphicsUtilities`Private`numberForm = 
                    Function[{
                    CalculateUtilities`GraphicsUtilities`Private`a, 
                    CalculateUtilities`GraphicsUtilities`Private`acc}, 
                    Quiet[
                    RawBoxes[
                    ToBoxes[
                    NumberForm[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Max[1, 
                    Ceiling[
                    RealExponent[
                    CalculateUtilities`GraphicsUtilities`Private`a] + 
                    CalculateUtilities`GraphicsUtilities`Private`acc]], 
                    ExponentFunction -> (Null& ), 
                    NumberFormat -> (StringReplace[#, StringExpression[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`s, 
                    BlankSequence[]], ".", EndOfString] -> 
                    CalculateUtilities`GraphicsUtilities`Private`s]& )]]]]]]]; 
                 Typeset`initDone$$ = True), DynamicModuleValues :> {}, 
                Deinitialization :> None, 
                UntrackedVariables :> {Typeset`size$$}, 
                SynchronousInitialization -> True, 
                UnsavedVariables :> {Typeset`initDone$$}], "Manipulate", 
               Deployed -> True, StripOnInput -> False], TraditionalForm], 
             Manipulate`InterpretManipulate[1]], TraditionalForm]], 
          "Output"]}], 
       XMLElement["dataformats", {}, {"minput"}]}], 
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {
        "Plot[(E^(4 x) (1 - 4 x + 8 x^2))/32, {x, -4.5, 4.5}]"}], 
       XMLElement["cell", {"compressed" -> True, "string" -> False}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             FormBox[
              StyleBox[
               
               DynamicModuleBox[{
                Global`max52$$ = 0.5, Global`min51$$ = -0.5, 
                 CalculateUtilities`GraphicsUtilities`Private`more$$ = False, 
                 Typeset`show$$ = True, Typeset`bookmarkList$$ = {}, 
                 Typeset`bookmarkMode$$ = "Menu", Typeset`animator$$, 
                 Typeset`animvar$$ = 1, Typeset`name$$ = "\"untitled\"", 
                 Typeset`specs$$ = {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`more$$], {
                    False, True}}, {{
                    Hold[Global`min51$$], -0.5, "min"}, -1, 1}, {{
                    Hold[Global`max52$$], 0.5, "max"}, -1, 1}, {
                    Hold[
                    Style[
                    Overlay[{
                    RawBoxes[
                    PaneBox[
                    GraphicsBox[
                    
                    RasterBox[{{{0, 0, 0, 24}}, {{0, 0, 0, 9}}, {{0, 0, 0, 
                    10}}, {{0, 0, 0, 10}}, {{0, 0, 0, 9}}, {{0, 0, 0, 9}}, {{
                    0, 0, 0, 8}}, {{0, 0, 0, 8}}, {{0, 0, 0, 9}}, {{0, 0, 0, 
                    8}}, {{0, 0, 0, 7}}, {{0, 0, 0, 7}}, {{0, 0, 0, 8}}, {{0, 
                    0, 0, 6}}, {{0, 0, 0, 6}}, {{0, 0, 0, 6}}, {{0, 0, 0, 
                    6}}, {{0, 0, 0, 5}}, {{0, 0, 0, 6}}, {{0, 0, 0, 5}}, {{0, 
                    0, 0, 4}}, {{0, 0, 0, 4}}, {{0, 0, 0, 5}}, {{0, 0, 0, 
                    5}}, {{0, 0, 0, 3}}, {{0, 0, 0, 4}}, {{0, 0, 0, 3}}, {{0, 
                    0, 0, 3}}, {{0, 0, 0, 3}}, {{0, 0, 0, 3}}, {{0, 0, 0, 
                    2}}, {{0, 0, 0, 2}}, {{0, 0, 0, 2}}, {{0, 0, 0, 2}}, {{0, 
                    0, 0, 1}}, {{0, 0, 0, 2}}, {{0, 0, 0, 2}}, {{0, 0, 0, 
                    0}}, {{0, 0, 0, 1}}, {{255, 255, 255, 0}}, {{255, 255, 
                    255, 0}}, {{255, 255, 255, 0}}, {{255, 255, 255, 0}}, {{
                    255, 255, 255, 0}}, {{255, 255, 255, 0}}}, {{0, 45}, {
                    2500, 0}}, {0, 255}, ColorFunction -> RGBColor], 
                    ImageSize -> {2500, 45}, 
                    PlotRange -> {{0, 2500}, {0, 45}}], ImageSize -> 
                    Scaled[1], ScrollPosition -> {0., 0.}]], 
                    Pane[
                    Column[{
                    Grid[{{
                    Manipulate`Place[1], 
                    Manipulate`Place[2]}}]}], 
                    ImageMargins -> {{20, 30}, {10, 10}}]}, {1, 2}, 2, 
                    Alignment -> {Left, Top}]]], 
                    Manipulate`Dump`ThisIsNotAControl}}, Typeset`size$$ = 
                 Automatic, Typeset`update$$ = 0, Typeset`initDone$$ = False, 
                 Typeset`skipInitDone$$ = False, 
                 CalculateUtilities`GraphicsUtilities`Private`more$252984$$ = 
                 False, Global`min51$252985$$ = 0, Global`max52$252986$$ = 0}, 
                DynamicBox[
                 Manipulate`ManipulateBoxes[
                 2, TraditionalForm, 
                  "Variables" :> {
                   Global`max52$$ = 0.5, Global`min51$$ = -0.5, 
                    CalculateUtilities`GraphicsUtilities`Private`more$$ = 
                    False}, "ControllerVariables" :> {
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`more$$, 
                    CalculateUtilities`GraphicsUtilities`Private`more$252984$$\
, False], 
                    Hold[Global`min51$$, Global`min51$252985$$, 0], 
                    Hold[Global`max52$$, Global`max52$252986$$, 0]}, 
                  "OtherVariables" :> {
                   Typeset`show$$, Typeset`bookmarkList$$, 
                    Typeset`bookmarkMode$$, Typeset`animator$$, 
                    Typeset`animvar$$, Typeset`name$$, Typeset`specs$$, 
                    Typeset`size$$, Typeset`update$$, Typeset`initDone$$, 
                    Typeset`skipInitDone$$}, "Body" :> Function[Null, 
                    CalculateUtilities`GraphicsUtilities`Private`post$252976[
                    Plot[
                    SlotSequence[1]]], 
                    HoldAll][(Rational[1, 32] E^(4 Global`x)) (1 - 4 Global`x + 
                    8 Global`x^2), {
                    Global`x, 0. + 
                    4.810702354423638 Tan[1.5040801783846716` Global`min51$$],
                     0. + 4.810702354423638 
                    Tan[1.5040801783846716` 
                    If[Global`min51$$ == Global`max52$$, 
                    Global`min51$$ + (4.5 - 4.5)/1000, Global`max52$$]]}, 
                    LabelStyle -> {FontFamily -> "Bitstream Charter"}, 
                    WorkingPrecision -> MachinePrecision, 
                    PlotRange -> {Automatic, Automatic}, Ticks -> Automatic, 
                    ImageSize -> 200, AxesLabel -> {
                    RawBoxes[
                    FormBox["x", TraditionalForm]], None}], 
                  "Specifications" :> {{
                    CalculateUtilities`GraphicsUtilities`Private`more$$, {
                    False, True}, ControlType -> None}, {{
                    Global`min51$$, -0.5, "min"}, -1, 1, ImageSize -> Tiny, 
                    ControlPlacement -> 1}, {{Global`max52$$, 0.5, "max"}, -1,
                     1, ImageSize -> Tiny, ControlPlacement -> 2}, 
                    Style[
                    Overlay[{
                    RawBoxes[
                    PaneBox[
                    GraphicsBox[
                    
                    RasterBox[{{{0, 0, 0, 24}}, {{0, 0, 0, 9}}, {{0, 0, 0, 
                    10}}, {{0, 0, 0, 10}}, {{0, 0, 0, 9}}, {{0, 0, 0, 9}}, {{
                    0, 0, 0, 8}}, {{0, 0, 0, 8}}, {{0, 0, 0, 9}}, {{0, 0, 0, 
                    8}}, {{0, 0, 0, 7}}, {{0, 0, 0, 7}}, {{0, 0, 0, 8}}, {{0, 
                    0, 0, 6}}, {{0, 0, 0, 6}}, {{0, 0, 0, 6}}, {{0, 0, 0, 
                    6}}, {{0, 0, 0, 5}}, {{0, 0, 0, 6}}, {{0, 0, 0, 5}}, {{0, 
                    0, 0, 4}}, {{0, 0, 0, 4}}, {{0, 0, 0, 5}}, {{0, 0, 0, 
                    5}}, {{0, 0, 0, 3}}, {{0, 0, 0, 4}}, {{0, 0, 0, 3}}, {{0, 
                    0, 0, 3}}, {{0, 0, 0, 3}}, {{0, 0, 0, 3}}, {{0, 0, 0, 
                    2}}, {{0, 0, 0, 2}}, {{0, 0, 0, 2}}, {{0, 0, 0, 2}}, {{0, 
                    0, 0, 1}}, {{0, 0, 0, 2}}, {{0, 0, 0, 2}}, {{0, 0, 0, 
                    0}}, {{0, 0, 0, 1}}, {{255, 255, 255, 0}}, {{255, 255, 
                    255, 0}}, {{255, 255, 255, 0}}, {{255, 255, 255, 0}}, {{
                    255, 255, 255, 0}}, {{255, 255, 255, 0}}}, {{0, 45}, {
                    2500, 0}}, {0, 255}, ColorFunction -> RGBColor], 
                    ImageSize -> {2500, 45}, 
                    PlotRange -> {{0, 2500}, {0, 45}}], ImageSize -> 
                    Scaled[1], ScrollPosition -> {0., 0.}]], 
                    Pane[
                    Column[{
                    Grid[{{
                    Manipulate`Place[1], 
                    Manipulate`Place[2]}}]}], 
                    ImageMargins -> {{20, 30}, {10, 10}}]}, {1, 2}, 2, 
                    Alignment -> {Left, Top}]]}, 
                  "Options" :> {
                   TrackedSymbols -> True, ControlPlacement -> Bottom, 
                    FrameMargins -> {{0, 0}, {0, 10}}, Paneled -> False, 
                    AppearanceElements -> {}, 
                    LabelStyle -> {
                    "DialogStyle", FontColor -> GrayLevel[0.25]}}, 
                  "DefaultOptions" :> {}], SingleEvaluation -> True], 
                Initialization :> (ReleaseHold[
                   Hold[
                   CalculateUtilities`GraphicsUtilities`Private`WACleanTicks[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Blank[]]] := 
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`res, 
                    CalculateUtilities`GraphicsUtilities`Private`unitformat}, 
                    CalculateUtilities`GraphicsUtilities`Private`res = 
                    ReplaceAll[
                    ReplaceAll[
                    Part[
                    DeleteCases[
                    ReplaceAll[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Alternatives[
                    Style, Global`UnitNumberForm, NumberForm] -> (#& )], {
                    Blank[], "", 
                    BlankNullSequence[]}], All, 
                    Span[1, 2]], Superscript[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[Integer]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`p, 
                    Blank[Integer]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`b^
                    CalculateUtilities`GraphicsUtilities`Private`p], Row[{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    BlankSequence[]]}, "\[Times]"] :> 
                    Times[CalculateUtilities`GraphicsUtilities`Private`a]]; If[
                    MatchQ[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, All, 2], 
                    Condition[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`quants, {
                    Alternatives[
                    BlankSequence[Global`ShortQuantity], 
                    BlankSequence[Global`Quantity]]}], Length[
                    Union[
                    Map[
                    Global`UnitObjectPart, 
                    CalculateUtilities`GraphicsUtilities`Private`quants]]] == 
                    1]], CalculateUtilities`GraphicsUtilities`Private`\
unitformat = Global`ToCDFQuantityFunction[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, 1, 2]]; 
                    CalculateUtilities`GraphicsUtilities`Private`unitformat -> 
                    Thread[{
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, All, 1], 
                    Global`QuantityPart[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, All, 2], 
                    Global`UnitObjectPart[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, 1, 
                    2]]]}], 
                    CalculateUtilities`GraphicsUtilities`Private`res]]; 
                    Options[
                    CalculateUtilities`GraphicsUtilities`Private`post$252976] = \
{"ReturnInteractiveTypes" -> False, "Nearest" -> Automatic}; 
                    CalculateUtilities`GraphicsUtilities`Private`post$252976[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Blank[Graphics]], 
                    OptionsPattern[]] := 
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`lines, 
                    CalculateUtilities`GraphicsUtilities`Private`pts, 
                    CalculateUtilities`GraphicsUtilities`Private`gg, 
                    CalculateUtilities`GraphicsUtilities`Private`type, 
                    CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r, 
                    CalculateUtilities`GraphicsUtilities`Private`oldepilog, 
                    CalculateUtilities`GraphicsUtilities`Private`range, 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines, 
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines,
                     CalculateUtilities`GraphicsUtilities`Private`\
neareststyle = OptionValue["Nearest"]}, 
                    CalculateUtilities`GraphicsUtilities`Private`oldepilog = 
                    Replace[
                    ReplaceAll[Epilog, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]], 
                    Epilog -> Sequence[]]; Switch[
                    ReplaceAll[{Frame, Axes}, 
                    Options[
                    CalculateUtilities`GraphicsUtilities`Private`g]], {True, 
                    Blank[]}, 
                    CalculateUtilities`GraphicsUtilities`Private`type = 
                    Frame; {
                    CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r} = 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, 
                    ReplaceAll[FrameTicks, 
                    Options[
                    CalculateUtilities`GraphicsUtilities`Private`g]]], {
                    Blank[], True}, 
                    CalculateUtilities`GraphicsUtilities`Private`type = 
                    Axes; {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l} = 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, 
                    ReplaceAll[Ticks, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]]], 
                    Blank[], 
                    CalculateUtilities`GraphicsUtilities`Private`type = None]; 
                    If[
                    And[
                    CalculateUtilities`GraphicsUtilities`Private`type === 
                    Frame, 
                    Or[
                    Not[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`t === None, 
                    CalculateUtilities`GraphicsUtilities`Private`b === 
                    CalculateUtilities`GraphicsUtilities`Private`t]], 
                    Not[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`r === None, 
                    CalculateUtilities`GraphicsUtilities`Private`l === 
                    CalculateUtilities`GraphicsUtilities`Private`r]]]], 
                    CalculateUtilities`GraphicsUtilities`Private`type = None]; 
                    If[
                    TrueQ[
                    OptionValue["ReturnInteractiveTypes"]], 
                    Which[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`type === 
                    None, CalculateUtilities`GraphicsUtilities`Private`b === 
                    None, CalculateUtilities`GraphicsUtilities`Private`l === 
                    None], {}, 
                    FreeQ[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Alternatives[Line, Point]], {}, True, {
                    "Tooltips", "Coordinates"}], If[
                    FreeQ[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Alternatives[Line, Point]], 
                    Return[CalculateUtilities`GraphicsUtilities`Private`g]]; 
                    CalculateUtilities`GraphicsUtilities`Private`gg = 
                    Normal[CalculateUtilities`GraphicsUtilities`Private`g]; 
                    CalculateUtilities`GraphicsUtilities`Private`pts = 
                    Partition[
                    Flatten[
                    Cases[
                    Part[CalculateUtilities`GraphicsUtilities`Private`gg, 1], 
                    Point[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Blank[]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`a, 
                    Infinity]], 2]; 
                    If[Length[
                    CalculateUtilities`GraphicsUtilities`Private`pts] < 2, 
                    CalculateUtilities`GraphicsUtilities`Private`lines = Cases[
                    Part[CalculateUtilities`GraphicsUtilities`Private`gg, 1], 
                    
                    Blank[Line], Infinity]; 
                    If[CalculateUtilities`GraphicsUtilities`Private`lines === \
{}, 
                    Return[CalculateUtilities`GraphicsUtilities`Private`g]]; 
                    CalculateUtilities`GraphicsUtilities`Private`pts = Flatten[
                    Cases[
                    CalculateUtilities`GraphicsUtilities`Private`lines, Line[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Blank[]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`a, Infinity],
                     1]; If[
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle === 
                    Automatic, If[
                    CalculateUtilities`GraphicsUtilities`Private`orderedLines[
                    CalculateUtilities`GraphicsUtilities`Private`lines], 
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle = 
                    "1D", CalculateUtilities`GraphicsUtilities`Private`\
neareststyle = "2D"]; Null], 
                    If[
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle === 
                    Automatic, 
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle = 
                    "2D"]]; 
                    CalculateUtilities`GraphicsUtilities`Private`range = 
                    Replace[
                    ReplaceAll[PlotRange, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]], 
                    Except[{{
                    PatternTest[
                    Blank[], NumberQ], 
                    PatternTest[
                    Blank[], NumberQ]}, {
                    PatternTest[
                    Blank[], NumberQ], 
                    PatternTest[
                    Blank[], NumberQ]}}] :> {
                    Through[
                    {Min, Max}[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    1]]], 
                    Through[
                    {Min, Max}[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    2]]]}]; CalculateUtilities`GraphicsUtilities`Private`b = 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[CalculateUtilities`GraphicsUtilities`Private`b, 
                    First[CalculateUtilities`GraphicsUtilities`Private`range], 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    1]]; CalculateUtilities`GraphicsUtilities`Private`l = 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[CalculateUtilities`GraphicsUtilities`Private`l, 
                    Last[CalculateUtilities`GraphicsUtilities`Private`range], 
                    
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    2]]; CalculateUtilities`GraphicsUtilities`Private`\
oldgridlines = ReplaceAll[GridLines, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]]; 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines = 
                    With[{CalculateUtilities`GraphicsUtilities`Private`gray = 
                    GrayLevel[0.7]}, 
                    Replace[
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines,\
 {Pattern[CalculateUtilities`GraphicsUtilities`Private`a, {
                    Blank[List], 
                    Blank[List]}] :> Dynamic[
                    Join[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Replace[
                    MousePosition[{"Graphics", Graphics}, None], {
                    None -> {{}, {}}, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`x, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`y, 
                    Blank[]]} :> {{{
                    CalculateUtilities`GraphicsUtilities`Private`x, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}, {{
                    CalculateUtilities`GraphicsUtilities`Private`y, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}}}], 
                    2]], {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Blank[List]], Automatic} :> 
                    With[{CalculateUtilities`GraphicsUtilities`Private`\
divisions = {CalculateUtilities`GraphicsUtilities`Private`a, 
                    FindDivisions[
                    Last[CalculateUtilities`GraphicsUtilities`Private`range], 
                    7]}}, 
                    Dynamic[
                    Join[
                    CalculateUtilities`GraphicsUtilities`Private`divisions, 
                    Replace[
                    MousePosition[{"Graphics", Graphics}, None], {
                    None -> {{}, {}}, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`x, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`y, 
                    Blank[]]} :> {{{
                    CalculateUtilities`GraphicsUtilities`Private`x, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}, {{
                    CalculateUtilities`GraphicsUtilities`Private`y, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}}}], 
                    2]]], Blank[] -> Dynamic[
                    
                    Map[{{#, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}& , 
                    MousePosition[{"Graphics", Graphics}, None]]]}]]; If[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`type === 
                    None, CalculateUtilities`GraphicsUtilities`Private`b === 
                    None, CalculateUtilities`GraphicsUtilities`Private`l === 
                    None], 
                    Show[
                    CalculateUtilities`GraphicsUtilities`Private`g, GridLines -> 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines, 
                    If[
                    MatchQ[
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines, 
                    Alternatives[None, GridLines]], 
                    Method -> {"GridLinesInFront" -> True}, 
                    Apply[Sequence, {}]]], 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`nf = 
                    If[CalculateUtilities`GraphicsUtilities`Private`\
neareststyle === "1D", 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`n = 
                    Nearest[Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 1] -> 
                    CalculateUtilities`GraphicsUtilities`Private`pts]}, 
                    CalculateUtilities`GraphicsUtilities`Private`n[
                    Part[#, 1]]& ], 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`n = 
                    Nearest[Transpose[
                    Transpose[
                    CalculateUtilities`GraphicsUtilities`Private`pts]/Abs[
                    Apply[Subtract, 
                    CalculateUtilities`GraphicsUtilities`Private`range, {
                    1}]]] -> 
                    CalculateUtilities`GraphicsUtilities`Private`pts], 
                    CalculateUtilities`GraphicsUtilities`Private`scale = Abs[
                    Apply[
                    Subtract, 
                    CalculateUtilities`GraphicsUtilities`Private`range, {
                    1}]]}, CalculateUtilities`GraphicsUtilities`Private`n[#/
                    CalculateUtilities`GraphicsUtilities`Private`scale]& ]], 
                    CalculateUtilities`GraphicsUtilities`Private`left = 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`bottom = 
                    CalculateUtilities`GraphicsUtilities`Private`b}, 
                    Show[
                    CalculateUtilities`GraphicsUtilities`Private`g, GridLines -> 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines, 
                    If[
                    MatchQ[
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines, 
                    Alternatives[None, GridLines]], 
                    Method -> {"GridLinesInFront" -> True}, 
                    Apply[Sequence, {}]], 
                    Epilog -> {
                    CalculateUtilities`GraphicsUtilities`Private`oldepilog, 
                    Dynamic[
                    
                    DynamicModule[{
                    CalculateUtilities`GraphicsUtilities`Private`pt = 
                    CalculateUtilities`GraphicsUtilities`Private`nf[
                    MousePosition[{"Graphics", Graphics}, {0, 0}]], 
                    CalculateUtilities`GraphicsUtilities`Private`scaled = 
                    MousePosition[{"GraphicsScaled", Graphics}, None]}, 
                    If[
                    CalculateUtilities`GraphicsUtilities`Private`scaled === 
                    None, {}, {
                    Text[
                    Style[
                    Row[{
                    CalculateUtilities`GraphicsUtilities`Private`bottom[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pt, 1, 1]], 
                    CalculateUtilities`GraphicsUtilities`Private`left[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pt, 1, 2]]}, 
                    ","], 12], 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pt, 1], {
                    1.5 Sign[Part[
                    CalculateUtilities`GraphicsUtilities`Private`scaled, 1] - 
                    0.5], 0}, Background -> White], 
                    AbsolutePointSize[7], 
                    Point[CalculateUtilities`GraphicsUtilities`Private`pt], 
                    White, 
                    AbsolutePointSize[5], 
                    Point[
                    CalculateUtilities`GraphicsUtilities`Private`pt]}]]]}]]]]]\
; CalculateUtilities`GraphicsUtilities`Private`post$252976[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Blank[]], 
                    BlankNullSequence[]] := 
                    CalculateUtilities`GraphicsUtilities`Private`g; 
                    CalculateUtilities`GraphicsUtilities`Private`orderedLines[{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`l, 
                    BlankSequence[Line]]}] := 
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`ordered, 
                    CalculateUtilities`GraphicsUtilities`Private`intervals}, 
                    CalculateUtilities`GraphicsUtilities`Private`ordered = 
                    Apply[And, 
                    Map[OrderedQ[
                    Part[#, 1, All, 1]]& , 
                    Hold[CalculateUtilities`GraphicsUtilities`Private`l]]]; If[
                    Not[
                    TrueQ[
                    CalculateUtilities`GraphicsUtilities`Private`ordered]], 
                    Return[False]]; 
                    CalculateUtilities`GraphicsUtilities`Private`intervals = 
                    Part[{CalculateUtilities`GraphicsUtilities`Private`l}, 
                    All, 1, {1, -1}, 1]; Length[
                    Apply[
                    Interval, 
                    CalculateUtilities`GraphicsUtilities`Private`intervals]] === 
                    Length[CalculateUtilities`GraphicsUtilities`Private`\
intervals]]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, 
                    Alternatives[Automatic, FrameTicks]] = {
                    Identity, Identity, Identity, Identity}; 
                    
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`l, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`t, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`r, 
                    Blank[]]}] := 
                    Map[CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction, {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r}]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, {{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`l, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`r, 
                    Blank[]]}, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`t, 
                    Blank[]]}}] := 
                    Map[CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction, {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r}]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, 
                    Blank[]] = {None, None, None, None}; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, 
                    Alternatives[Automatic, Ticks]] = {Identity, Identity}; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`h, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`v, 
                    Blank[]]}] := 
                    Map[CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction, {CalculateUtilities`GraphicsUtilities`Private`h, 
                    CalculateUtilities`GraphicsUtilities`Private`v}]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, 
                    Blank[]] = {None, None}; 
                    CalculateUtilities`GraphicsUtilities`Private`CDFCleanTicks[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Blank[]]] := ReplaceAll[
                    ReplaceAll[
                    Part[
                    DeleteCases[
                    ReplaceAll[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Alternatives[Style, NumberForm] -> (#& )], {
                    Blank[], "", 
                    BlankNullSequence[]}], All, 
                    Span[1, 2]], Superscript[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[Integer]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`p, 
                    Blank[Integer]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`b^
                    CalculateUtilities`GraphicsUtilities`Private`p], Row[{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    BlankSequence[]]}, "\[Times]"] :> 
                    Times[CalculateUtilities`GraphicsUtilities`Private`a]]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks$, 
                    Blank[]]] := 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    CalculateUtilities`GraphicsUtilities`Private`WACleanTicks[
                    CalculateUtilities`GraphicsUtilities`Private`ticks$]]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[None] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[True] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[Automatic] = Identity; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[All] = Identity; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[Pattern[CalculateUtilities`GraphicsUtilities`Private`func, 
                    Blank[]] -> 
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Blank[]]] := Replace[
                    
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[CalculateUtilities`GraphicsUtilities`Private`ticks], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`f, 
                    Except[None]] :> 
                    Composition[
                    CalculateUtilities`GraphicsUtilities`Private`func, 
                    CalculateUtilities`GraphicsUtilities`Private`f]]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[{}] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {
                    Repeated[{
                    Blank[Integer], 
                    Blank[String]}]}]] := Which[
                    Quiet[
                    MatchQ[
                    Apply[SameQ, 
                    Map[Part[
                    DateList[#], 
                    Span[2, All]]& , 
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {
                    2}], {1}], {
                    Repeated[True]}]], DateString, 
                    Apply[And, 
                    StringMatchQ[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, All, 
                    2], NumberString]], 
                    
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Transpose[{
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, All, 
                    1], 
                    ToExpression[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, All, 
                    2]]}]], True, None]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {
                    Repeated[{
                    PatternTest[
                    Blank[], NumericQ], 
                    PatternTest[
                    Blank[], NumericQ]}]}]] := Which[
                    MatchQ[
                    Apply[
                    Equal, CalculateUtilities`GraphicsUtilities`Private`ticks,\
 {1}], {
                    Repeated[True]}], Identity, 
                    MatchQ[
                    
                    Apply[# == Log[#2]& , 
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {1}], {
                    Repeated[True]}], Exp, 
                    TrueQ[
                    Quiet[
                    Apply[Equal, 
                    Apply[Divide, Transpose[
                    Rest[CalculateUtilities`GraphicsUtilities`Private`ticks]] - 
                    Part[CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    1]]]]], 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`slope = 
                    Apply[Divide, 
                    Apply[Subtract, 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {-1, 
                    1}]]]}, 
                    SetPrecision[(# - Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 1, 
                    1])/CalculateUtilities`GraphicsUtilities`Private`slope + 
                    Part[CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    1, 2], 3]& ], True, None]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Blank[]] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`type, 
                    Blank[]], 
                    BlankNullSequence[]] := 
                    CalculateUtilities`GraphicsUtilities`Private`type; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[Identity, {
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`min, 
                    Blank[]], 
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`max, 
                    Blank[]]}, 
                    Blank[]] := 
                    With[{CalculateUtilities`GraphicsUtilities`Private`nf = 
                    CalculateUtilities`GraphicsUtilities`Private`numberForm, 
                    CalculateUtilities`GraphicsUtilities`Private`acc = 
                    Floor[Max[
                    Ceiling[Log[10, 
                    Max[
                    
                    Abs[{CalculateUtilities`GraphicsUtilities`Private`min, 
                    CalculateUtilities`GraphicsUtilities`Private`max}]]] - 
                    Log[10, (CalculateUtilities`GraphicsUtilities`Private`max - 
                    CalculateUtilities`GraphicsUtilities`Private`min)/100]], 
                    3] - RealExponent[
                    Max[
                    
                    Abs[{CalculateUtilities`GraphicsUtilities`Private`min, 
                    CalculateUtilities`GraphicsUtilities`Private`max}]]]]}, 
                    CalculateUtilities`GraphicsUtilities`Private`nf[#, 
                    CalculateUtilities`GraphicsUtilities`Private`acc]& ]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[Exp, {
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`min, 
                    Blank[]], 
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`max, 
                    Blank[]]}, 
                    Blank[]] := 
                    With[{CalculateUtilities`GraphicsUtilities`Private`prec = 
                    Max[
                    Ceiling[Log[10, 
                    Max[
                    
                    Abs[{CalculateUtilities`GraphicsUtilities`Private`min, 
                    CalculateUtilities`GraphicsUtilities`Private`max}]]] - 
                    Log[10, (CalculateUtilities`GraphicsUtilities`Private`max - 
                    CalculateUtilities`GraphicsUtilities`Private`min)/100]], 
                    3]}, Quiet[
                    RawBoxes[
                    ToBoxes[
                    NumberForm[
                    Exp[#], 
                    CalculateUtilities`GraphicsUtilities`Private`prec]]]]& ]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[DateString, {
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`min, 
                    Blank[]], 
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`max, 
                    Blank[]]}, 
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`pts, 
                    Blank[]]] := 
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`dates, 
                    CalculateUtilities`GraphicsUtilities`Private`spec}, 
                    CalculateUtilities`GraphicsUtilities`Private`dates = 
                    Map[DateList, 
                    CalculateUtilities`GraphicsUtilities`Private`pts]; 
                    CalculateUtilities`GraphicsUtilities`Private`spec = Switch[
                    Map[Length, 
                    Map[Union, 
                    Transpose[
                    CalculateUtilities`GraphicsUtilities`Private`dates]]], {
                    Blank[], 1, 1, 
                    BlankSequence[]}, {"Year"}, {
                    Blank[], 
                    Blank[], 1, 
                    BlankSequence[]}, {"MonthNameShort", " ", "Year"}, 
                    Blank[], {
                    "DayShort", " ", "MonthNameShort", " ", "Year"}]; 
                    If[(CalculateUtilities`GraphicsUtilities`Private`max - 
                    CalculateUtilities`GraphicsUtilities`Private`min)/
                    31536000 > 25, 
                    CalculateUtilities`GraphicsUtilities`Private`spec = {
                    "Year"}]; 
                    With[{CalculateUtilities`GraphicsUtilities`Private`s = 
                    CalculateUtilities`GraphicsUtilities`Private`spec}, 
                    DateString[#, 
                    CalculateUtilities`GraphicsUtilities`Private`s]& ]]; 
                    CalculateUtilities`GraphicsUtilities`Private`numberForm = 
                    Function[{
                    CalculateUtilities`GraphicsUtilities`Private`a, 
                    CalculateUtilities`GraphicsUtilities`Private`acc}, 
                    Quiet[
                    RawBoxes[
                    ToBoxes[
                    NumberForm[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Max[1, 
                    Ceiling[
                    RealExponent[
                    CalculateUtilities`GraphicsUtilities`Private`a] + 
                    CalculateUtilities`GraphicsUtilities`Private`acc]], 
                    ExponentFunction -> (Null& ), 
                    NumberFormat -> (StringReplace[#, StringExpression[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`s, 
                    BlankSequence[]], ".", EndOfString] -> 
                    CalculateUtilities`GraphicsUtilities`Private`s]& )]]]]]]]; 
                 Typeset`initDone$$ = True), DynamicModuleValues :> {}, 
                Deinitialization :> None, 
                UntrackedVariables :> {Typeset`size$$}, 
                SynchronousInitialization -> True, 
                UnsavedVariables :> {Typeset`initDone$$}], "Manipulate", 
               Deployed -> True, StripOnInput -> False], TraditionalForm], 
             Manipulate`InterpretManipulate[1]], TraditionalForm]], 
          "Output"]}], 
       XMLElement["dataformats", {}, {"minput"}]}], 
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["cell", {"compressed" -> True, "string" -> False}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             FormBox[
              StyleBox[
               
               DynamicModuleBox[{
                CalculateScan`PlotterScanner`Private`ar$$ = 1, 
                 CalculateScan`PlotterScanner`Private`contraPedalCurveColor$$ = 
                 RGBColor[0.7464574, 0.2952580000000001, 0.2454606], 
                 CalculateScan`PlotterScanner`Private`\
contraPedalCurveCountFactor$$ = 0.3, 
                 CalculateScan`PlotterScanner`Private`\
contraPedalCurveLastParamaters$$ = {}, 
                 CalculateScan`PlotterScanner`Private`contraPedalCurveOpacity$\
$ = 0.8, CalculateScan`PlotterScanner`Private`contraPedalCurvePlotCurves$$ = \
{}, CalculateScan`PlotterScanner`Private`contraPedalCurvePoints$$ = "curve", 
                 CalculateScan`PlotterScanner`Private`contraPedalCurveTF$$ = 
                 False, CalculateScan`PlotterScanner`Private`\
contraPedalCurveThickness$$ = -3., 
                 CalculateScan`PlotterScanner`Private`dualCurveColor$$ = 
                 RGBColor[0.2860602, 0.4663408, 0.29410879999999995`], 
                 CalculateScan`PlotterScanner`Private`dualCurveCountFactor$$ = 
                 0.3, CalculateScan`PlotterScanner`Private`\
dualCurveLastParamaters$$ = {}, 
                 CalculateScan`PlotterScanner`Private`dualCurveOpacity$$ = 
                 0.8, CalculateScan`PlotterScanner`Private`\
dualCurvePlotCurves$$ = {}, 
                 CalculateScan`PlotterScanner`Private`dualCurveTF$$ = False, 
                 CalculateScan`PlotterScanner`Private`dualCurveThickness$$ = \
-3., CalculateScan`PlotterScanner`Private`dualPedalCurvePoints$$ = "curve", 
                 CalculateScan`PlotterScanner`Private`evoluteColor$$ = 
                 RGBColor[0.813033, 0.766292, 0.303458], 
                 CalculateScan`PlotterScanner`Private`evoluteOpacity$$ = 0.8, 
                 CalculateScan`PlotterScanner`Private`evoluteTF$$ = False, 
                 CalculateScan`PlotterScanner`Private`evoluteThickness$$ = \
-3., CalculateScan`PlotterScanner`Private`fy1$$ = 0.982793723247329, 
                 CalculateScan`PlotterScanner`Private`fy2$$ = 
                 0.982793723247329, 
                 CalculateScan`PlotterScanner`Private`\
inverseCurveCircleRadiusFactor$$ = 0.4636476090008061, 
                 CalculateScan`PlotterScanner`Private`inverseCurveColor$$ = 
                 RGBColor[0.2860602, 0.4663408, 0.29410879999999995`], 
                 CalculateScan`PlotterScanner`Private`inverseCurveCountFactor$\
$ = 0.3, CalculateScan`PlotterScanner`Private`inverseCurveOpacity$$ = 0.8, 
                 CalculateScan`PlotterScanner`Private`inverseCurvePlotCurves$$\
 = {}, CalculateScan`PlotterScanner`Private`inverseCurvePoints$$ = "grid", 
                 CalculateScan`PlotterScanner`Private`inverseCurveTF$$ = 
                 False, CalculateScan`PlotterScanner`Private`\
inverseCurveThickness$$ = -3., 
                 CalculateScan`PlotterScanner`Private`inverseLastParamaters$$ = \
{}, CalculateScan`PlotterScanner`Private`involuteColor$$ = 
                 RGBColor[0.49978279999999997`, 0.6025278, 0.2508104], 
                 CalculateScan`PlotterScanner`Private`involuteCount$$ = 60, 
                 CalculateScan`PlotterScanner`Private`involuteOpacity$$ = 0.8,
                  CalculateScan`PlotterScanner`Private`involutesLeftTF$$ = 
                 False, CalculateScan`PlotterScanner`Private`involutesRightTF$\
$ = True, CalculateScan`PlotterScanner`Private`involuteTF$$ = False, 
                 CalculateScan`PlotterScanner`Private`involuteThickness$$ = \
-3., CalculateScan`PlotterScanner`Private`isopticCurveAngle$$ = 
                 Rational[1, 3] Pi, 
                 CalculateScan`PlotterScanner`Private`isopticCurveColor$$ = 
                 RGBColor[
                  0.8519382, 0.7451437999999999, 0.31752080000000005`], 
                 CalculateScan`PlotterScanner`Private`isopticCurveOpacity$$ = 
                 0.8, CalculateScan`PlotterScanner`Private`\
isopticCurvePlotCurves$$ = {}, 
                 CalculateScan`PlotterScanner`Private`isopticCurveTF$$ = 
                 False, CalculateScan`PlotterScanner`Private`\
isopticCurveThickness$$ = -3., 
                 CalculateScan`PlotterScanner`Private`isopticLastParamaters$$ = \
{}, CalculateUtilities`GraphicsUtilities`Private`more$$ = False, 
                 CalculateScan`PlotterScanner`Private`negativePedalCurveColor$\
$ = RGBColor[0.7464574, 0.2952580000000001, 0.2454606], 
                 CalculateScan`PlotterScanner`Private`\
negativePedalCurveCountFactor$$ = 0.3, 
                 CalculateScan`PlotterScanner`Private`\
negativePedalCurveLastParamaters$$ = {}, 
                 CalculateScan`PlotterScanner`Private`\
negativePedalCurveOpacity$$ = 0.8, 
                 CalculateScan`PlotterScanner`Private`\
negativePedalCurvePlotCurves$$ = {}, 
                 CalculateScan`PlotterScanner`Private`\
negativePedalCurvePoints$$ = "curve", 
                 CalculateScan`PlotterScanner`Private`negativePedalCurveTF$$ = 
                 False, CalculateScan`PlotterScanner`Private`\
negativePedalCurveThickness$$ = -3., 
                 CalculateScan`PlotterScanner`Private`normalColor$$ = 
                 RGBColor[0.237, 0.34, 0.575], 
                 CalculateScan`PlotterScanner`Private`normalCount$$ = 120, 
                 CalculateScan`PlotterScanner`Private`normalLength$$ = 
                 0.41822432957922906`, 
                 CalculateScan`PlotterScanner`Private`normalOpacity$$ = 0.8, 
                 CalculateScan`PlotterScanner`Private`normalTF$$ = True, 
                 CalculateScan`PlotterScanner`Private`normalThickness$$ = -3.,
                  CalculateScan`PlotterScanner`Private`offsetCurveColor$$ = 
                 RGBColor[0.877875, 0.731045, 0.326896], 
                 CalculateScan`PlotterScanner`Private`offsetCurveCount$$ = 12,
                  CalculateScan`PlotterScanner`Private`offsetCurveDistance$$ = 
                 0.41822432957922906`, 
                 CalculateScan`PlotterScanner`Private`\
offsetCurveLastParamaters$$ = {}, 
                 CalculateScan`PlotterScanner`Private`offsetCurveOpacity$$ = 
                 0.8, CalculateScan`PlotterScanner`Private`\
offsetCurvePlotCurves$$ = {}, 
                 CalculateScan`PlotterScanner`Private`offsetCurveTF$$ = False,
                  CalculateScan`PlotterScanner`Private`offsetCurveThickness$$ = \
-3., CalculateScan`PlotterScanner`Private`orthotomicCurveAngle$$ = 
                 Rational[1, 3] Pi, 
                 CalculateScan`PlotterScanner`Private`orthotomicCurveColor$$ = 
                 RGBColor[
                  0.8519382, 0.7451437999999999, 0.31752080000000005`], 
                 CalculateScan`PlotterScanner`Private`\
orthotomicCurveCountFactor$$ = 0.3, 
                 CalculateScan`PlotterScanner`Private`orthotomicCurveOpacity$$\
 = 0.8, CalculateScan`PlotterScanner`Private`orthotomicCurvePlotCurves$$ = {},
                  CalculateScan`PlotterScanner`Private`orthotomicCurvePoints$$\
 = "curve", CalculateScan`PlotterScanner`Private`orthotomicCurveTF$$ = False, 
                 CalculateScan`PlotterScanner`Private`\
orthotomicCurveThickness$$ = -3., 
                 CalculateScan`PlotterScanner`Private`\
orthotomicLastParamaters$$ = {}, 
                 CalculateScan`PlotterScanner`Private`osculatingCircleColor$$ = 
                 RGBColor[0.2752426, 0.4446824, 0.33950440000000004`], 
                 CalculateScan`PlotterScanner`Private`osculatingCircleCount$$ = 
                 60, CalculateScan`PlotterScanner`Private`\
osculatingCircleLastParamaters$$ = {}, 
                 CalculateScan`PlotterScanner`Private`osculatingCircleOpacity$\
$ = 0.8, CalculateScan`PlotterScanner`Private`osculatingCircleRadiiTF$$ = 
                 False, CalculateScan`PlotterScanner`Private`\
osculatingCircles$$ = {}, 
                 CalculateScan`PlotterScanner`Private`osculatingCircleTF$$ = 
                 False, CalculateScan`PlotterScanner`Private`\
osculatingCircleThickness$$ = -3., 
                 CalculateScan`PlotterScanner`Private`pedalCurveColor$$ = 
                 RGBColor[0.32894650000000003`, 0.5006225, 0.2625337], 
                 CalculateScan`PlotterScanner`Private`pedalCurveCountFactor$$ = 
                 0.3, CalculateScan`PlotterScanner`Private`\
pedalCurveLastParamaters$$ = {}, 
                 CalculateScan`PlotterScanner`Private`pedalCurveOpacity$$ = 
                 0.8, CalculateScan`PlotterScanner`Private`\
pedalCurvePlotCurves$$ = {}, 
                 CalculateScan`PlotterScanner`Private`pedalCurvePoints$$ = 
                 "curve", CalculateScan`PlotterScanner`Private`pedalCurveTF$$ = 
                 False, CalculateScan`PlotterScanner`Private`\
pedalCurveThickness$$ = -3., CalculateScan`PlotterScanner`Private`sa$$ = 
                 False, CalculateScan`PlotterScanner`Private`sqPRQ$$ = False, 
                 CalculateScan`PlotterScanner`Private`st$$ = False, 
                 CalculateScan`PlotterScanner`Private`symmxQ$$ = False, 
                 CalculateScan`PlotterScanner`Private`symmyQ$$ = True, 
                 CalculateScan`PlotterScanner`Private`tangentColor$$ = 
                 RGBColor[0.237736, 0.340215, 0.575113], 
                 CalculateScan`PlotterScanner`Private`tangentCount$$ = 60, 
                 CalculateScan`PlotterScanner`Private`tangentLength$$ = 
                 0.41822432957922906`, 
                 CalculateScan`PlotterScanner`Private`tangentOpacity$$ = 0.8, 
                 CalculateScan`PlotterScanner`Private`tangentTF$$ = False, 
                 CalculateScan`PlotterScanner`Private`tangentThickness$$ = \
-3., CalculateScan`PlotterScanner`Private`taylorParabolaColor$$ = 
                 RGBColor[0.7189495000000001, 0.719797, 0.283877], 
                 CalculateScan`PlotterScanner`Private`taylorParabolaCount$$ = 
                 36, CalculateScan`PlotterScanner`Private`\
taylorParabolaLastParamaters$$ = {}, 
                 CalculateScan`PlotterScanner`Private`taylorParabolaOpacity$$ = 
                 0.8, CalculateScan`PlotterScanner`Private`taylorParabolas$$ = \
{}, CalculateScan`PlotterScanner`Private`taylorParabolaTF$$ = False, 
                 CalculateScan`PlotterScanner`Private`taylorParabolaThickness$\
$ = -3., CalculateScan`PlotterScanner`Private`tiltedOffsetCurveAngle$$ = 
                 Rational[1, 4] Pi, 
                 CalculateScan`PlotterScanner`Private`tiltedOffsetCurveColor$$\
 = RGBColor[0.49978279999999997`, 0.6025278, 0.2508104], 
                 CalculateScan`PlotterScanner`Private`tiltedOffsetCurveCount$$\
 = 12, CalculateScan`PlotterScanner`Private`tiltedOffsetCurveDistance$$ = 
                 0.41822432957922906`, 
                 CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveLastParamaters$$ = {}, 
                 CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveOpacity$$ = 0.8, 
                 CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurvePlotCurves$$ = {}, 
                 CalculateScan`PlotterScanner`Private`tiltedOffsetCurveTF$$ = 
                 False, CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveThickness$$ = -3., 
                 CalculateScan`PlotterScanner`Private`tiltedTangentAngle$$ = 
                 Rational[1, 4] Pi, 
                 CalculateScan`PlotterScanner`Private`tiltedTangentColor$$ = 
                 RGBColor[
                  0.2622702, 0.40739780000000003`, 0.41955020000000004`], 
                 CalculateScan`PlotterScanner`Private`tiltedTangentCount$$ = 
                 60, CalculateScan`PlotterScanner`Private`tiltedTangentLength$\
$ = 0.41822432957922906`, 
                 CalculateScan`PlotterScanner`Private`tiltedTangentOpacity$$ = 
                 0.8, CalculateScan`PlotterScanner`Private`tiltedTangentTF$$ = 
                 False, CalculateScan`PlotterScanner`Private`\
tiltedTangentThickness$$ = -3., 
                 CalculateScan`PlotterScanner`Private`x1$$ = \
-0.7853981633974483, CalculateScan`PlotterScanner`Private`x2$$ = 
                 0.7853981633974483, Typeset`show$$ = True, 
                 Typeset`bookmarkList$$ = {}, Typeset`bookmarkMode$$ = "Menu",
                  Typeset`animator$$, Typeset`animvar$$ = 1, Typeset`name$$ = 
                 "\"untitled\"", Typeset`specs$$ = {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`more$$], {
                    False, True}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`x1$$], \
-0.7853981633974483, 
                    Subscript[
                    Style["x", Italic], "min"]}, -1.5393804002589986`, 
                    1.5393804002589986`}, {{
                    Hold[CalculateScan`PlotterScanner`Private`x2$$], 
                    0.7853981633974483, 
                    Subscript[
                    Style["x", Italic], "max"]}, -1.5393804002589986`, 
                    1.5393804002589986`}, {{
                    Hold[CalculateScan`PlotterScanner`Private`symmxQ$$], 
                    False, "symmetric"}, {True, False}}, {{
                    Hold[CalculateScan`PlotterScanner`Private`fy1$$], 
                    0.982793723247329, 
                    Subscript["y", "min"]}, 0, 1.5393804002589986`}, {{
                    Hold[CalculateScan`PlotterScanner`Private`fy2$$], 
                    0.982793723247329, 
                    Subscript["y", "max"]}, 0, 1.5393804002589986`}, {{
                    Hold[CalculateScan`PlotterScanner`Private`symmyQ$$], True,
                     "symmetric"}, {True, False}}, {{
                    Hold[CalculateScan`PlotterScanner`Private`sqPRQ$$], False, 
                    Dynamic[
                    Style["same as horizontal-range", 
                    If[
                    CalculateScan`PlotterScanner`Private`symmxQ$$, Black, 
                    Gray]]]}, {True, False}}, {{
                    Hold[CalculateScan`PlotterScanner`Private`sa$$], False, 
                    "show axes"}, {True, False}}, {{
                    Hold[CalculateScan`PlotterScanner`Private`st$$], False, 
                    Dynamic[
                    Style["show ticks", 
                    If[
                    CalculateScan`PlotterScanner`Private`sa$$ === True, Black,
                     Gray]]]}, {True, False}}, {{
                    Hold[CalculateScan`PlotterScanner`Private`ar$$], 1, 
                    "aspect ratio"}, 
                    Rational[1, 4], 4}, {{
                    Hold[CalculateScan`PlotterScanner`Private`tangentTF$$], 
                    False, ""}, {True, False}}, {{
                    Hold[CalculateScan`PlotterScanner`Private`tangentCount$$],
                     60, ""}, 2, 360, 1}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`tangentLength$$], 
                    0.41822432957922906`, ""}, 0, 1.5393804002589986`}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`tangentThickness$$], \
-3., ""}, -4, -0.5}, {{
                    Hold[CalculateScan`PlotterScanner`Private`tangentColor$$], 
                    RGBColor[0.237736, 0.340215, 0.575113], ""}, 
                    RGBColor[1, 0, 0]}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`tangentOpacity$$], 
                    0.8, ""}, 0, 1}, {{
                    Hold[CalculateScan`PlotterScanner`Private`normalTF$$], 
                    True, ""}, {True, False}}, {{
                    Hold[CalculateScan`PlotterScanner`Private`normalCount$$], 
                    120, ""}, 2, 360, 1}, {{
                    Hold[CalculateScan`PlotterScanner`Private`normalLength$$],
                     0.41822432957922906`, ""}, 0, 1.5393804002589986`}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`normalThickness$$], \
-3., ""}, -4, -0.5}, {{
                    Hold[CalculateScan`PlotterScanner`Private`normalColor$$], 
                    
                    RGBColor[0.237, 0.34, 0.575], ""}, 
                    RGBColor[1, 0, 0]}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`normalOpacity$$], 
                    0.8, ""}, 0, 1}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`tiltedTangentTF$$], 
                    False, ""}, {True, False}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`tiltedTangentAngle$$]\
, Rational[1, 4] Pi, ""}, -Pi, Pi}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`tiltedTangentCount$$]\
, 60, ""}, 2, 360, 1}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`tiltedTangentLength$$\
], 0.41822432957922906`, ""}, 0, 1.5393804002589986`}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
tiltedTangentThickness$$], -3., ""}, -4, -0.5}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`tiltedTangentColor$$]\
, 
                    RGBColor[
                    0.2622702, 0.40739780000000003`, 0.41955020000000004`], 
                    ""}, 
                    RGBColor[1, 0, 0]}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`tiltedTangentOpacity$\
$], 0.8, ""}, 0, 1}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`osculatingCircleTF$$]\
, False, ""}, {True, False}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleCount$$], 60, ""}, 2, 360, 1}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleThickness$$], -3., ""}, -4, -0.5}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleColor$$], 
                    RGBColor[0.2752426, 0.4446824, 0.33950440000000004`], ""}, 
                    RGBColor[1, 0, 0]}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleOpacity$$], 0.8, ""}, 0, 1}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleRadiiTF$$], False, ""}, {True, False}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`taylorParabolaTF$$], 
                    False, ""}, {True, False}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`taylorParabolaCount$$\
], 36, ""}, 2, 120, 1}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
taylorParabolaThickness$$], -3., ""}, -4, -0.5}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`taylorParabolaColor$$\
], 
                    RGBColor[0.7189495000000001, 0.719797, 0.283877], ""}, 
                    RGBColor[1, 0, 0]}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
taylorParabolaOpacity$$], 0.8, ""}, 0, 1}, {{
                    Hold[CalculateScan`PlotterScanner`Private`involuteTF$$], 
                    False, ""}, {True, False}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`involuteCount$$], 60,
                     ""}, 1, 120, 1}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`involuteThickness$$],\
 -3., ""}, -4, -0.5}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`involuteColor$$], 
                    RGBColor[0.49978279999999997`, 0.6025278, 0.2508104], ""}, 
                    RGBColor[1, 0, 0]}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`involuteOpacity$$], 
                    0.8, ""}, 0, 1}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`involutesLeftTF$$], 
                    False, ""}, {True, False}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`involutesRightTF$$], 
                    True, ""}, {True, False}}, {{
                    Hold[CalculateScan`PlotterScanner`Private`evoluteTF$$], 
                    False, ""}, {True, False}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`evoluteThickness$$], \
-3., ""}, -4, -0.5}, {{
                    Hold[CalculateScan`PlotterScanner`Private`evoluteColor$$], 
                    RGBColor[0.813033, 0.766292, 0.303458], ""}, 
                    RGBColor[1, 0, 0]}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`evoluteOpacity$$], 
                    0.8, ""}, 0, 1}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`offsetCurveTF$$], 
                    False, ""}, {True, False}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`offsetCurveDistance$$\
], 0.41822432957922906`, ""}, 0, 1.5393804002589986`}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`offsetCurveCount$$], 
                    12, ""}, 1, 60, 1}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`offsetCurveThickness$\
$], -3., ""}, -4, -0.5}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`offsetCurveColor$$], 
                    
                    RGBColor[0.877875, 0.731045, 0.326896], ""}, 
                    RGBColor[1, 0, 0]}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`offsetCurveOpacity$$]\
, 0.8, ""}, 0, 1}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`tiltedOffsetCurveTF$$\
], False, ""}, {True, False}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveAngle$$], Rational[1, 4] Pi, ""}, -Pi, Pi}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveDistance$$], 0.41822432957922906`, ""}, 0, 
                    1.5393804002589986`}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveCount$$], 12, ""}, 1, 60, 1}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveThickness$$], -3., ""}, -4, -0.5}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveColor$$], 
                    RGBColor[0.49978279999999997`, 0.6025278, 0.2508104], ""}, 
                    RGBColor[1, 0, 0]}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveOpacity$$], 0.8, ""}, 0, 1}, {{
                    Hold[CalculateScan`PlotterScanner`Private`pedalCurveTF$$],
                     False, ""}, {True, False}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
pedalCurveCountFactor$$], 0.3, ""}, 0, 1}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`pedalCurveThickness$$\
], -3., ""}, -4, -0.5}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`pedalCurveColor$$], 
                    RGBColor[0.32894650000000003`, 0.5006225, 0.2625337], ""}, 
                    RGBColor[1, 0, 0]}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`pedalCurveOpacity$$],
                     0.8, ""}, 0, 1}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`pedalCurvePoints$$], 
                    "curve", ""}, {"grid", "curve"}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`negativePedalCurveTF$\
$], False, ""}, {True, False}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurveCountFactor$$], 0.3, ""}, 0, 1}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurveThickness$$], -3., ""}, -4, -0.5}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurveColor$$], 
                    RGBColor[0.7464574, 0.2952580000000001, 0.2454606], ""}, 
                    RGBColor[1, 0, 0]}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurveOpacity$$], 0.8, ""}, 0, 1}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurvePoints$$], "curve", ""}, {"curve", "grid"}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`contraPedalCurveTF$$]\
, False, ""}, {True, False}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurveCountFactor$$], 0.3, ""}, 0, 1}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurveThickness$$], -3., ""}, -4, -0.5}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurveColor$$], 
                    RGBColor[0.7464574, 0.2952580000000001, 0.2454606], ""}, 
                    RGBColor[1, 0, 0]}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurveOpacity$$], 0.8, ""}, 0, 1}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurvePoints$$], "curve", ""}, {"curve", "grid"}}, {{
                    Hold[CalculateScan`PlotterScanner`Private`dualCurveTF$$], 
                    False, ""}, {True, False}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`dualCurveCountFactor$\
$], 0.3, ""}, 0, 1}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`dualCurveThickness$$]\
, -3., ""}, -4, -0.5}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`dualCurveColor$$], 
                    RGBColor[0.2860602, 0.4663408, 0.29410879999999995`], ""}, 
                    RGBColor[1, 0, 0]}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`dualCurveOpacity$$], 
                    0.8, ""}, 0, 1}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`dualPedalCurvePoints$\
$], "curve", ""}, {"curve", "grid"}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`inverseCurveTF$$], 
                    False, ""}, {True, False}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
inverseCurveCountFactor$$], 0.3, ""}, 0, 1}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
inverseCurveThickness$$], -3., ""}, -4, -0.5}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`inverseCurveColor$$], 
                    RGBColor[0.2860602, 0.4663408, 0.29410879999999995`], ""}, 
                    RGBColor[1, 0, 0]}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`inverseCurveOpacity$$\
], 0.8, ""}, 0, 1}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`inverseCurvePoints$$]\
, "grid", ""}, {"curve", "grid"}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
inverseCurveCircleRadiusFactor$$], 0.4636476090008061, ""}, 0, 1}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`isopticCurveTF$$], 
                    False, ""}, {True, False}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`isopticCurveAngle$$],
                     Rational[1, 3] Pi, ""}, 0, Pi}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
isopticCurveThickness$$], -3., ""}, -4, -0.5}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`isopticCurveColor$$], 
                    RGBColor[
                    0.8519382, 0.7451437999999999, 0.31752080000000005`], ""}, 
                    RGBColor[1, 0, 0]}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`isopticCurveOpacity$$\
], 0.8, ""}, 0, 1}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`orthotomicCurveTF$$],
                     False, ""}, {True, False}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`orthotomicCurveAngle$\
$], Rational[1, 3] Pi, ""}, 0, Pi}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
orthotomicCurveCountFactor$$], 0.3, ""}, 0, 1}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
orthotomicCurveThickness$$], -3., ""}, -4, -0.5}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`orthotomicCurveColor$\
$], 
                    RGBColor[
                    0.8519382, 0.7451437999999999, 0.31752080000000005`], ""}, 
                    RGBColor[1, 0, 0]}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
orthotomicCurveOpacity$$], 0.8, ""}, 0, 1}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
orthotomicCurvePoints$$], "curve", ""}, {"curve", "grid"}}, {
                    Hold[
                    Style[
                    Overlay[{
                    RawBoxes[
                    PaneBox[
                    GraphicsBox[
                    
                    RasterBox[{{{0, 0, 0, 24}}, {{0, 0, 0, 9}}, {{0, 0, 0, 
                    10}}, {{0, 0, 0, 10}}, {{0, 0, 0, 9}}, {{0, 0, 0, 9}}, {{
                    0, 0, 0, 8}}, {{0, 0, 0, 8}}, {{0, 0, 0, 9}}, {{0, 0, 0, 
                    8}}, {{0, 0, 0, 7}}, {{0, 0, 0, 7}}, {{0, 0, 0, 8}}, {{0, 
                    0, 0, 6}}, {{0, 0, 0, 6}}, {{0, 0, 0, 6}}, {{0, 0, 0, 
                    6}}, {{0, 0, 0, 5}}, {{0, 0, 0, 6}}, {{0, 0, 0, 5}}, {{0, 
                    0, 0, 4}}, {{0, 0, 0, 4}}, {{0, 0, 0, 5}}, {{0, 0, 0, 
                    5}}, {{0, 0, 0, 3}}, {{0, 0, 0, 4}}, {{0, 0, 0, 3}}, {{0, 
                    0, 0, 3}}, {{0, 0, 0, 3}}, {{0, 0, 0, 3}}, {{0, 0, 0, 
                    2}}, {{0, 0, 0, 2}}, {{0, 0, 0, 2}}, {{0, 0, 0, 2}}, {{0, 
                    0, 0, 1}}, {{0, 0, 0, 2}}, {{0, 0, 0, 2}}, {{0, 0, 0, 
                    0}}, {{0, 0, 0, 1}}, {{255, 255, 255, 0}}, {{255, 255, 
                    255, 0}}, {{255, 255, 255, 0}}, {{255, 255, 255, 0}}, {{
                    255, 255, 255, 0}}, {{255, 255, 255, 0}}}, {{0, 45}, {
                    2500, 0}}, {0, 255}, ColorFunction -> RGBColor], 
                    ImageSize -> {2500, 45}, 
                    PlotRange -> {{0, 2500}, {0, 45}}], ImageSize -> 
                    Scaled[1], ScrollPosition -> {0., 0.}]], 
                    Pane[
                    Column[{
                    Row[{
                    Invisible[
                    RawBoxes[
                    GraphicsBox[
                    TagBox[
                    
                    RasterBox[{{{255, 132, 0}, {255, 132, 0}, {255, 132, 0}, {
                    255, 132, 0}, {255, 132, 0}, {255, 132, 0}}, {{255, 132, 
                    0}, {255, 132, 0}, {255, 132, 0}, {255, 132, 0}, {255, 
                    132, 0}, {255, 132, 0}}}, {{0, 2}, {6, 0}}, {0, 255}, 
                    ColorFunction -> RGBColor], 
                    BoxForm`ImageTag[
                    "Byte", ColorSpace -> "RGB", Interleaving -> True], 
                    Selectable -> False], BaseStyle -> "ImageGraphics", 
                    ImageSize -> Magnification[1], ImageSizeRaw -> {6, 2}, 
                    BaselinePosition -> (Scaled[0] -> Center), 
                    PlotRange -> {{0, 6}, {0, 2}}]]], " ", 
                    Column[{"Horizontal plot range:", 
                    Row[{
                    Manipulate`Place[1], "  ", 
                    Manipulate`Place[2], "  ", 
                    Manipulate`Place[3]}]}]}], 
                    PaneSelector[{True -> Grid[{{
                    Button[
                    Row[{
                    RawBoxes[
                    GraphicsBox[
                    TagBox[
                    
                    RasterBox[{{{255, 132, 0}, {255, 132, 0}, {255, 132, 0}, {
                    255, 132, 0}, {255, 132, 0}, {255, 132, 0}}, {{255, 132, 
                    0}, {255, 132, 0}, {255, 132, 0}, {255, 132, 0}, {255, 
                    132, 0}, {255, 132, 0}}}, {{0, 2}, {6, 0}}, {0, 255}, 
                    ColorFunction -> RGBColor], 
                    BoxForm`ImageTag[
                    "Byte", ColorSpace -> "RGB", Interleaving -> True], 
                    Selectable -> False], BaseStyle -> "ImageGraphics", 
                    ImageSize -> Magnification[1], ImageSizeRaw -> {6, 2}, 
                    BaselinePosition -> (Scaled[0] -> Center), 
                    PlotRange -> {{0, 6}, {0, 2}}]], " "}], 
                    CalculateUtilities`GraphicsUtilities`Private`more$$ = 
                    False, Appearance -> None, BaseStyle -> {}], 
                    Button[
                    "Fewer controls", 
                    CalculateUtilities`GraphicsUtilities`Private`more$$ = 
                    False, Appearance -> None, BaseStyle -> {}]}, {"", 
                    Item[
                    Column[{
                    Column[{"Vertical plot range:", 
                    Row[{
                    Manipulate`Place[4], "  ", 
                    Manipulate`Place[5], "  ", 
                    Manipulate`Place[6]}], 
                    Manipulate`Place[7]}], 
                    Column[{
                    Row[{
                    Manipulate`Place[8], "  ", 
                    Manipulate`Place[9]}], 
                    Row[{
                    Manipulate`Place[10], "   settings: ", 
                    Button[
                    "1", CalculateScan`PlotterScanner`Private`ar$$ = 1, 
                    ImageSize -> Small, Appearance -> "Palette", 
                    BaseStyle -> {}], "  ", 
                    Button["unscaled axes", 
                    (If[
                    1/4 <= # <= 4, 
                    CalculateScan`PlotterScanner`Private`ar$$ = #]& )[Abs[
                    Apply[
                    Subtract, CalculateScan`PlotterScanner`Private`pRY]]/Abs[
                    Apply[
                    Subtract, CalculateScan`PlotterScanner`Private`pRX]]], 
                    ImageSize -> Small, Appearance -> "Palette", 
                    BaseStyle -> {}]}]}], 
                    TabView[{Row[{" ", 
                    Dynamic[
                    If[CalculateScan`PlotterScanner`Private`tangentTF$$, 
                    Style[
                    "\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`tangentColor$$, 
                    Bold], " "]], 
                    Tooltip[" tangents             ", 
                    Style[" family of tangents at points along the curve ", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> 
                    Grid[{{"show tangents", 
                    Manipulate`Place[11]}, {"tangent count", 
                    Manipulate`Place[12]}, {"tangent length", 
                    Manipulate`Place[13]}, {"tangent thickness", 
                    Manipulate`Place[14]}, {"tangent color", 
                    Manipulate`Place[15]}, {"tangent opacity", 
                    Manipulate`Place[16]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    False}}], Row[{" ", 
                    Dynamic[
                    If[CalculateScan`PlotterScanner`Private`normalTF$$, 
                    Style[
                    "\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`normalColor$$, Bold],
                     " "]], 
                    Tooltip[" normals              ", 
                    Style[" family of normals at points along the curve ", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> 
                    Grid[{{"show normals", 
                    Manipulate`Place[17]}, {"normal count", 
                    Manipulate`Place[18]}, {"normal length", 
                    Manipulate`Place[19]}, {"normal thickness", 
                    Manipulate`Place[20]}, {"normal color", 
                    Manipulate`Place[21]}, {"normal opacity", 
                    Manipulate`Place[22]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    False}}], Row[{" ", 
                    Dynamic[
                    If[CalculateScan`PlotterScanner`Private`tiltedTangentTF$$, 
                    Style[
                    "\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`tiltedTangentColor$$,
                     Bold], " "]], 
                    Tooltip[" tilted tangents      ", 
                    Style[
                    " family of tilted tangents at points along the curve ", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> 
                    Grid[{{"show tilted tangents", 
                    Manipulate`Place[23]}, {"tilted tangent angle", 
                    Manipulate`Place[24]}, {"tilted tangent count", 
                    Manipulate`Place[25]}, {"tilted tangent length", 
                    Manipulate`Place[26]}, {"tilted tangent thickness", 
                    Manipulate`Place[27]}, {"tilted tangent color", 
                    Manipulate`Place[28]}, {"tilted tangent opacity", 
                    Manipulate`Place[29]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    False}}], Row[{" ", 
                    Dynamic[
                    If[
                    CalculateScan`PlotterScanner`Private`osculatingCircleTF$$, 
                    Style[
                    "\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleColor$$, Bold], " "]], 
                    Tooltip[" osculating circles   ", 
                    Style[
                    " family of osculating circles (circles that are tangent \
to the curve) at points along the curve", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> Column[{
                    Grid[{{"show osculating circles", 
                    Manipulate`Place[30]}, {"osculating circle count", 
                    Manipulate`Place[31]}, {"osculating circle thickness", 
                    Manipulate`Place[32]}, {"osculating circle color", 
                    Manipulate`Place[33]}, {"osculating circle opacity", 
                    Manipulate`Place[34]}, {"show circle radii", 
                    Manipulate`Place[35]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    True}}], 
                    Dynamic[
                    Style[
                    If[
                    And[
                    CalculateScan`PlotterScanner`Private`osculatingCircleTF$$, 
                    Not[
                    0.98 < CalculateScan`PlotterScanner`Private`ar$$ < 1.02]],
                     "(note than circles appear as ellipses for unequally\n\
scaled horizontal and vertical axes)", ""]], 
                    RGBColor[
                    0.6666666666666666, 0.6666666666666666, 
                    0.6666666666666666]]}, Alignment -> Left], Row[{" ", 
                    Dynamic[
                    If[
                    CalculateScan`PlotterScanner`Private`taylorParabolaTF$$, 
                    Style[
                    "\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`taylorParabolaColor$$\
, Bold], " "]], 
                    Tooltip[" Taylor parabolas     ", 
                    Style[" family of second order Taylor approximations", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> Column[{
                    Grid[{{"show Taylor parabolas", 
                    Manipulate`Place[36]}, {"Taylor parabola count", 
                    Manipulate`Place[37]}, {"Taylor parabola thickness", 
                    Manipulate`Place[38]}, {"Taylor parabola color", 
                    Manipulate`Place[39]}, {"Taylor parabola opacity", 
                    Manipulate`Place[40]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    True}}]}, Alignment -> Left], Row[{" ", 
                    Dynamic[
                    If[CalculateScan`PlotterScanner`Private`involuteTF$$, 
                    Style[
                    "\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`involuteColor$$, 
                    Bold], " "]], 
                    Tooltip[" involutes            ", 
                    Style[
                    " family of involutes (curves traced out by strings \
unwound from the curve) of the curve", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> 
                    Grid[{{"show involutes", 
                    Manipulate`Place[41]}, {"involute count", 
                    Manipulate`Place[42]}, {"involute thickness", 
                    Manipulate`Place[43]}, {"involute color", 
                    Manipulate`Place[44]}, {"involute opacity", 
                    Manipulate`Place[45]}, {"directions", 
                    Row[{"\[DoubleLongLeftArrow]", 
                    Manipulate`Place[46], "  \[DoubleLongRightArrow]", 
                    Manipulate`Place[47]}]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    True}}], Row[{" ", 
                    Dynamic[
                    If[CalculateScan`PlotterScanner`Private`evoluteTF$$, 
                    Style[
                    "\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`evoluteColor$$, 
                    Bold], " "]], 
                    Tooltip[" evolute              ", 
                    Style[
                    " the evolute of a given curve (curve of the centers of \
the osculating circles))", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> 
                    Grid[{{"show evolute", 
                    Manipulate`Place[48]}, {"evolute thickness", 
                    Manipulate`Place[49]}, {"evolute color", 
                    Manipulate`Place[50]}, {"evolute opacity", 
                    Manipulate`Place[51]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    False}}], Row[{" ", 
                    Dynamic[
                    If[CalculateScan`PlotterScanner`Private`offsetCurveTF$$, 
                    Style[
                    "\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`offsetCurveColor$$, 
                    Bold], " "]], 
                    Tooltip[" offset curves        ", 
                    Style[
                    " family of offset curves (curves shifted a fixed \
distance perpendicular to each point of the original curve) ", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> 
                    Grid[{{"show offset curves", 
                    Manipulate`Place[52]}, {"offset curve distance", 
                    Manipulate`Place[53]}, {"offset curve count", 
                    Manipulate`Place[54]}, {"offset curve thickness", 
                    Manipulate`Place[55]}, {"offset curve color", 
                    Manipulate`Place[56]}, {"offset curve opacity", 
                    Manipulate`Place[57]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    False}}], Row[{" ", 
                    Dynamic[
                    If[
                    CalculateScan`PlotterScanner`Private`tiltedOffsetCurveTF$$\
, 
                    Style["\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveColor$$, Bold], " "]], 
                    Tooltip[" tilted offset curves ", 
                    Style[
                    " family of tilted offset curves (curves shifted a fixed \
distance in a direction with a fixed angle \n                                 \
     to the local normal to each point of the original curve) ", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> 
                    Grid[{{"show tilted offset curves", 
                    Manipulate`Place[58]}, {"tilted offset curve angle", 
                    Manipulate`Place[59]}, {"tilted offset curve distance", 
                    Manipulate`Place[60]}, {"tilted offset curve count", 
                    Manipulate`Place[61]}, {"tilted offset curve thickness", 
                    Manipulate`Place[62]}, {"tilted offset curve color", 
                    Manipulate`Place[63]}, {"tilted offset curve opacity", 
                    Manipulate`Place[64]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    False}}], Row[{" ", 
                    Dynamic[
                    If[CalculateScan`PlotterScanner`Private`pedalCurveTF$$, 
                    Style[
                    "\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`pedalCurveColor$$, 
                    Bold], " "]], 
                    Tooltip[" pedal curves         ", 
                    Style[
                    " family of pedal curves (curves on the tangents of the \
given curve perpendicular to a given point) ", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> 
                    Grid[{{"show pedal curves", 
                    Manipulate`Place[65]}, {"pedal curve count", 
                    Manipulate`Place[66]}, {"pedal curve thickness", 
                    Manipulate`Place[67]}, {"pedal curve color", 
                    Manipulate`Place[68]}, {"pedal curve opacity", 
                    Manipulate`Place[69]}, {"pedal points", 
                    Manipulate`Place[70]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    True}}], Row[{" ", 
                    Dynamic[
                    If[
                    CalculateScan`PlotterScanner`Private`negativePedalCurveTF$\
$, 
                    Style["\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurveColor$$, Bold], " "]], 
                    Tooltip[" negative pedal curves", 
                    Style[
                    " family of negative pedal curves (envelope curves of \
lines perpendicular to the given curve and a given point) ", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> 
                    Grid[{{"show negative pedal curves", 
                    Manipulate`Place[71]}, {"negative pedal curve count", 
                    Manipulate`Place[72]}, {
                    "negative pedal curve thickness", 
                    Manipulate`Place[73]}, {"negative pedal curve color", 
                    Manipulate`Place[74]}, {"negative pedal curve opacity", 
                    Manipulate`Place[75]}, {"negative pedal points", 
                    Manipulate`Place[76]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    False}}], Row[{" ", 
                    Dynamic[
                    If[
                    CalculateScan`PlotterScanner`Private`contraPedalCurveTF$$, 
                    Style[
                    "\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurveColor$$, Bold], " "]], 
                    Tooltip[" contrapedal curves   ", 
                    Style[
                    " family of contrapedal curves (curves on the normals of \
the given curve perpendicular to a given point) ", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> 
                    Grid[{{"show contrapedal curves", 
                    Manipulate`Place[77]}, {"contrapedal curve count", 
                    Manipulate`Place[78]}, {"contrapedal curve thickness", 
                    Manipulate`Place[79]}, {"contrapedal curve color", 
                    Manipulate`Place[80]}, {"contrapedal curve opacity", 
                    Manipulate`Place[81]}, {"contrapedal pedal points", 
                    Manipulate`Place[82]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    False}}], Row[{" ", 
                    Dynamic[
                    If[CalculateScan`PlotterScanner`Private`dualCurveTF$$, 
                    Style[
                    "\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`dualCurveColor$$, 
                    Bold], " "]], 
                    Tooltip[" dual curves          ", 
                    Style[
                    " dual curve of the given curve (the dual curbe maps \
inflection points to cusps) ", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> 
                    Grid[{{"show dual curves", 
                    Manipulate`Place[83]}, {"dual curve count", 
                    Manipulate`Place[84]}, {"dual curve thickness", 
                    Manipulate`Place[85]}, {"dual curve color", 
                    Manipulate`Place[86]}, {"dual curve opacity", 
                    Manipulate`Place[87]}, {"dual curve points", 
                    Manipulate`Place[88]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    False}}], Row[{" ", 
                    Dynamic[
                    If[
                    CalculateScan`PlotterScanner`Private`inverseCurveTF$$, 
                    Style[
                    "\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`inverseCurveColor$$, 
                    Bold], " "]], 
                    Tooltip[" inverse curves       ", 
                    Style[
                    " inverse curves (curves resulting from carrying of an \
inversion on circles) ", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> 
                    Grid[{{"show inverse curves", 
                    Manipulate`Place[89]}, {"inverse curve count", 
                    Manipulate`Place[90]}, {"inverse curve thickness", 
                    Manipulate`Place[91]}, {"inverse curve color", 
                    Manipulate`Place[92]}, {"inverse curve opacity", 
                    Manipulate`Place[93]}, {"inversion curve points", 
                    Manipulate`Place[94]}, {"inversion circle radius", 
                    Manipulate`Place[95]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    False}}], Row[{" ", 
                    Dynamic[
                    If[
                    CalculateScan`PlotterScanner`Private`isopticCurveTF$$, 
                    Style[
                    "\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`isopticCurveColor$$, 
                    Bold], " "]], 
                    Tooltip[" isoptic curves       ", 
                    Style[
                    " inverse curves (points on isoptic curves have two \
tangents with the given curve and the two tangents meet with the specified \
angle)) ", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> Column[{
                    Grid[{{"show isoptic curves", 
                    Manipulate`Place[96]}, {"isoptic curve angle", 
                    Manipulate`Place[97]}, {"isoptic curve thickness", 
                    Manipulate`Place[98]}, {"isoptic curve color", 
                    Manipulate`Place[99]}, {"isoptic curve opacity", 
                    Manipulate`Place[100]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    False}}], 
                    Dynamic[
                    Style[
                    If[
                    TrueQ[
                    And[
                    CalculateScan`PlotterScanner`Private`isopticCurveTF$$, 
                    CalculateScan`PlotterScanner`Private`x1x2SCPCurves === \
{}]], "(note than the set of isoptic curves for a given angle can be empty)", 
                    ""]], 
                    RGBColor[
                    0.6666666666666666, 0.6666666666666666, 
                    0.6666666666666666]]}, Alignment -> Left], Row[{" ", 
                    Dynamic[
                    If[
                    CalculateScan`PlotterScanner`Private`orthotomicCurveTF$$, 
                    
                    Style[
                    "\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`orthotomicCurveColor$\
$, Bold], " "]], 
                    Tooltip[" orthotomic curves    ", 
                    Style[
                    " orthotomic curves (points of reflections of a given \
point on curve tangents)) ", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> 
                    Grid[{{"show orthotomic curves", 
                    Manipulate`Place[101]}, {"orthotomic curve angle", 
                    Manipulate`Place[102]}, {"orthotomic curve count", 
                    Manipulate`Place[103]}, {"orthotomic curve thickness", 
                    Manipulate`Place[104]}, {"orthotomic curve color", 
                    Manipulate`Place[105]}, {"orthotomic curve opacity", 
                    Manipulate`Place[106]}, {"orthotomic curve points", 
                    Manipulate`Place[107]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    False}}]}, 2, ImageSize -> {All, Automatic}, 
                    ControlPlacement -> Left]}, 
                    Dividers -> {None, {False, True, True, True}}, Spacings -> 
                    1], ItemSize -> Scaled[1], 
                    Frame -> {None, None, True, None}]}}, FrameStyle -> 
                    GrayLevel[0.9], Alignment -> Left, Spacings -> {0, 0.8}], 
                    False -> Button[
                    Row[{
                    RawBoxes[
                    GraphicsBox[
                    TagBox[
                    
                    RasterBox[{{{255, 255, 255}, {255, 255, 255}, {255, 132, 
                    0}, {255, 132, 0}, {255, 255, 255}, {255, 255, 255}}, {{
                    255, 255, 255}, {255, 255, 255}, {255, 132, 0}, {255, 132,
                     0}, {255, 255, 255}, {255, 255, 255}}, {{255, 132, 0}, {
                    255, 132, 0}, {255, 132, 0}, {255, 132, 0}, {255, 132, 
                    0}, {255, 132, 0}}, {{255, 132, 0}, {255, 132, 0}, {255, 
                    132, 0}, {255, 132, 0}, {255, 132, 0}, {255, 132, 0}}, {{
                    255, 255, 255}, {255, 255, 255}, {255, 132, 0}, {255, 132,
                     0}, {255, 255, 255}, {255, 255, 255}}, {{255, 255, 
                    255}, {255, 255, 255}, {255, 132, 0}, {255, 132, 0}, {255,
                     255, 255}, {255, 255, 255}}}, {{0, 6}, {6, 0}}, {0, 255},
                     ColorFunction -> RGBColor], 
                    BoxForm`ImageTag[
                    "Byte", ColorSpace -> "RGB", Interleaving -> True], 
                    Selectable -> False], BaseStyle -> "ImageGraphics", 
                    ImageSize -> Magnification[1], ImageSizeRaw -> {6, 6}, 
                    BaselinePosition -> (Scaled[0.3] -> Center), 
                    PlotRange -> {{0, 6}, {0, 6}}]], " More controls"}], 
                    CalculateUtilities`GraphicsUtilities`Private`more$$ = 
                    True, Appearance -> None, BaseStyle -> {}]}, 
                    Dynamic[
                    CalculateUtilities`GraphicsUtilities`Private`more$$], 
                    ImageSize -> Automatic]}], 
                    ImageMargins -> {{20, 30}, {10, 10}}]}, {1, 2}, 2, 
                    Alignment -> {Left, Top}]]], 
                    Manipulate`Dump`ThisIsNotAControl}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleLastParamaters$$], {}}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`osculatingCircles$$],\
 {}}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
taylorParabolaLastParamaters$$], {}}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`taylorParabolas$$], \
{}}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
offsetCurveLastParamaters$$], {}}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
offsetCurvePlotCurves$$], {}}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveLastParamaters$$], {}}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurvePlotCurves$$], {}}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
pedalCurveLastParamaters$$], {}}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`pedalCurvePlotCurves$\
$], {}}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurveLastParamaters$$], {}}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurvePlotCurves$$], {}}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurveLastParamaters$$], {}}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurvePlotCurves$$], {}}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
dualCurveLastParamaters$$], {}}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`dualCurvePlotCurves$$\
], {}}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
inverseLastParamaters$$], {}}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
inverseCurvePlotCurves$$], {}}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
orthotomicLastParamaters$$], {}}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
orthotomicCurvePlotCurves$$], {}}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
isopticLastParamaters$$], {}}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
isopticCurvePlotCurves$$], {}}}}, Typeset`size$$ = Automatic, 
                 Typeset`update$$ = 0, Typeset`initDone$$ = False, 
                 Typeset`skipInitDone$$ = False, 
                 CalculateUtilities`GraphicsUtilities`Private`more$253019$$ = 
                 False, CalculateScan`PlotterScanner`Private`x1$253020$$ = 0, 
                 CalculateScan`PlotterScanner`Private`x2$253021$$ = 0, 
                 CalculateScan`PlotterScanner`Private`symmxQ$253022$$ = False,
                  CalculateScan`PlotterScanner`Private`fy1$253023$$ = 0, 
                 CalculateScan`PlotterScanner`Private`fy2$253024$$ = 0, 
                 CalculateScan`PlotterScanner`Private`symmyQ$253025$$ = False,
                  CalculateScan`PlotterScanner`Private`sqPRQ$253026$$ = False,
                  CalculateScan`PlotterScanner`Private`ar$253027$$ = 0, 
                 CalculateScan`PlotterScanner`Private`tangentCount$253028$$ = 
                 0, 
                 CalculateScan`PlotterScanner`Private`tangentLength$253029$$ = 
                 0, CalculateScan`PlotterScanner`Private`tangentThickness$\
253030$$ = 0, CalculateScan`PlotterScanner`Private`tangentOpacity$253031$$ = 
                 0, CalculateScan`PlotterScanner`Private`normalCount$253032$$ = 
                 0}, 
                DynamicBox[
                 Manipulate`ManipulateBoxes[
                 2, TraditionalForm, 
                  "Variables" :> {
                   CalculateScan`PlotterScanner`Private`ar$$ = 1, 
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurveColor$$ = RGBColor[0.7464574, 0.2952580000000001, 0.2454606], 
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurveCountFactor$$ = 0.3, 
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurveLastParamaters$$ = {}, 
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurveOpacity$$ = 0.8, 
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurvePlotCurves$$ = {}, 
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurvePoints$$ = "curve", 
                    CalculateScan`PlotterScanner`Private`contraPedalCurveTF$$ = 
                    False, CalculateScan`PlotterScanner`Private`\
contraPedalCurveThickness$$ = -3., 
                    CalculateScan`PlotterScanner`Private`dualCurveColor$$ = 
                    RGBColor[0.2860602, 0.4663408, 0.29410879999999995`], 
                    CalculateScan`PlotterScanner`Private`dualCurveCountFactor$\
$ = 0.3, CalculateScan`PlotterScanner`Private`dualCurveLastParamaters$$ = {}, 
                    CalculateScan`PlotterScanner`Private`dualCurveOpacity$$ = 
                    0.8, CalculateScan`PlotterScanner`Private`\
dualCurvePlotCurves$$ = {}, 
                    CalculateScan`PlotterScanner`Private`dualCurveTF$$ = 
                    False, CalculateScan`PlotterScanner`Private`\
dualCurveThickness$$ = -3., 
                    CalculateScan`PlotterScanner`Private`dualPedalCurvePoints$\
$ = "curve", CalculateScan`PlotterScanner`Private`evoluteColor$$ = 
                    RGBColor[0.813033, 0.766292, 0.303458], 
                    CalculateScan`PlotterScanner`Private`evoluteOpacity$$ = 
                    0.8, CalculateScan`PlotterScanner`Private`evoluteTF$$ = 
                    False, CalculateScan`PlotterScanner`Private`\
evoluteThickness$$ = -3., CalculateScan`PlotterScanner`Private`fy1$$ = 
                    0.982793723247329, 
                    CalculateScan`PlotterScanner`Private`fy2$$ = 
                    0.982793723247329, 
                    CalculateScan`PlotterScanner`Private`\
inverseCurveCircleRadiusFactor$$ = 0.4636476090008061, 
                    CalculateScan`PlotterScanner`Private`inverseCurveColor$$ = 
                    RGBColor[0.2860602, 0.4663408, 0.29410879999999995`], 
                    CalculateScan`PlotterScanner`Private`\
inverseCurveCountFactor$$ = 0.3, 
                    CalculateScan`PlotterScanner`Private`inverseCurveOpacity$$\
 = 0.8, CalculateScan`PlotterScanner`Private`inverseCurvePlotCurves$$ = {}, 
                    CalculateScan`PlotterScanner`Private`inverseCurvePoints$$ = 
                    "grid", 
                    CalculateScan`PlotterScanner`Private`inverseCurveTF$$ = 
                    False, CalculateScan`PlotterScanner`Private`\
inverseCurveThickness$$ = -3., 
                    CalculateScan`PlotterScanner`Private`\
inverseLastParamaters$$ = {}, 
                    CalculateScan`PlotterScanner`Private`involuteColor$$ = 
                    RGBColor[0.49978279999999997`, 0.6025278, 0.2508104], 
                    CalculateScan`PlotterScanner`Private`involuteCount$$ = 60,
                     CalculateScan`PlotterScanner`Private`involuteOpacity$$ = 
                    0.8, CalculateScan`PlotterScanner`Private`involutesLeftTF$\
$ = False, CalculateScan`PlotterScanner`Private`involutesRightTF$$ = True, 
                    CalculateScan`PlotterScanner`Private`involuteTF$$ = False,
                     CalculateScan`PlotterScanner`Private`involuteThickness$$ = \
-3., CalculateScan`PlotterScanner`Private`isopticCurveAngle$$ = 
                    Rational[1, 3] Pi, 
                    CalculateScan`PlotterScanner`Private`isopticCurveColor$$ = 
                    RGBColor[
                    0.8519382, 0.7451437999999999, 0.31752080000000005`], 
                    CalculateScan`PlotterScanner`Private`isopticCurveOpacity$$\
 = 0.8, CalculateScan`PlotterScanner`Private`isopticCurvePlotCurves$$ = {}, 
                    CalculateScan`PlotterScanner`Private`isopticCurveTF$$ = 
                    False, CalculateScan`PlotterScanner`Private`\
isopticCurveThickness$$ = -3., 
                    CalculateScan`PlotterScanner`Private`\
isopticLastParamaters$$ = {}, 
                    CalculateUtilities`GraphicsUtilities`Private`more$$ = 
                    False, 
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurveColor$$ = 
                    RGBColor[0.7464574, 0.2952580000000001, 0.2454606], 
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurveCountFactor$$ = 0.3, 
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurveLastParamaters$$ = {}, 
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurveOpacity$$ = 0.8, 
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurvePlotCurves$$ = {}, 
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurvePoints$$ = "curve", 
                    CalculateScan`PlotterScanner`Private`negativePedalCurveTF$\
$ = False, 
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurveThickness$$ = -3., 
                    CalculateScan`PlotterScanner`Private`normalColor$$ = 
                    RGBColor[0.237, 0.34, 0.575], 
                    CalculateScan`PlotterScanner`Private`normalCount$$ = 120, 
                    CalculateScan`PlotterScanner`Private`normalLength$$ = 
                    0.41822432957922906`, 
                    CalculateScan`PlotterScanner`Private`normalOpacity$$ = 
                    0.8, CalculateScan`PlotterScanner`Private`normalTF$$ = 
                    True, CalculateScan`PlotterScanner`Private`\
normalThickness$$ = -3., 
                    CalculateScan`PlotterScanner`Private`offsetCurveColor$$ = 
                    RGBColor[0.877875, 0.731045, 0.326896], 
                    CalculateScan`PlotterScanner`Private`offsetCurveCount$$ = 
                    12, CalculateScan`PlotterScanner`Private`\
offsetCurveDistance$$ = 0.41822432957922906`, 
                    CalculateScan`PlotterScanner`Private`\
offsetCurveLastParamaters$$ = {}, 
                    CalculateScan`PlotterScanner`Private`offsetCurveOpacity$$ = 
                    0.8, CalculateScan`PlotterScanner`Private`\
offsetCurvePlotCurves$$ = {}, 
                    CalculateScan`PlotterScanner`Private`offsetCurveTF$$ = 
                    False, CalculateScan`PlotterScanner`Private`\
offsetCurveThickness$$ = -3., 
                    CalculateScan`PlotterScanner`Private`orthotomicCurveAngle$\
$ = Rational[1, 3] Pi, 
                    CalculateScan`PlotterScanner`Private`orthotomicCurveColor$\
$ = RGBColor[0.8519382, 0.7451437999999999, 0.31752080000000005`], 
                    CalculateScan`PlotterScanner`Private`\
orthotomicCurveCountFactor$$ = 0.3, 
                    CalculateScan`PlotterScanner`Private`\
orthotomicCurveOpacity$$ = 0.8, 
                    CalculateScan`PlotterScanner`Private`\
orthotomicCurvePlotCurves$$ = {}, 
                    CalculateScan`PlotterScanner`Private`\
orthotomicCurvePoints$$ = "curve", 
                    CalculateScan`PlotterScanner`Private`orthotomicCurveTF$$ = 
                    False, CalculateScan`PlotterScanner`Private`\
orthotomicCurveThickness$$ = -3., 
                    CalculateScan`PlotterScanner`Private`\
orthotomicLastParamaters$$ = {}, 
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleColor$$ = 
                    RGBColor[0.2752426, 0.4446824, 0.33950440000000004`], 
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleCount$$ = 60, 
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleLastParamaters$$ = {}, 
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleOpacity$$ = 0.8, 
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleRadiiTF$$ = False, 
                    CalculateScan`PlotterScanner`Private`osculatingCircles$$ = \
{}, CalculateScan`PlotterScanner`Private`osculatingCircleTF$$ = False, 
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleThickness$$ = -3., 
                    CalculateScan`PlotterScanner`Private`pedalCurveColor$$ = 
                    RGBColor[0.32894650000000003`, 0.5006225, 0.2625337], 
                    CalculateScan`PlotterScanner`Private`\
pedalCurveCountFactor$$ = 0.3, 
                    CalculateScan`PlotterScanner`Private`\
pedalCurveLastParamaters$$ = {}, 
                    CalculateScan`PlotterScanner`Private`pedalCurveOpacity$$ = 
                    0.8, CalculateScan`PlotterScanner`Private`\
pedalCurvePlotCurves$$ = {}, 
                    CalculateScan`PlotterScanner`Private`pedalCurvePoints$$ = 
                    "curve", 
                    CalculateScan`PlotterScanner`Private`pedalCurveTF$$ = 
                    False, CalculateScan`PlotterScanner`Private`\
pedalCurveThickness$$ = -3., CalculateScan`PlotterScanner`Private`sa$$ = 
                    False, CalculateScan`PlotterScanner`Private`sqPRQ$$ = 
                    False, CalculateScan`PlotterScanner`Private`st$$ = False, 
                    CalculateScan`PlotterScanner`Private`symmxQ$$ = False, 
                    CalculateScan`PlotterScanner`Private`symmyQ$$ = True, 
                    CalculateScan`PlotterScanner`Private`tangentColor$$ = 
                    RGBColor[0.237736, 0.340215, 0.575113], 
                    CalculateScan`PlotterScanner`Private`tangentCount$$ = 60, 
                    CalculateScan`PlotterScanner`Private`tangentLength$$ = 
                    0.41822432957922906`, 
                    CalculateScan`PlotterScanner`Private`tangentOpacity$$ = 
                    0.8, CalculateScan`PlotterScanner`Private`tangentTF$$ = 
                    False, CalculateScan`PlotterScanner`Private`\
tangentThickness$$ = -3., 
                    CalculateScan`PlotterScanner`Private`taylorParabolaColor$$\
 = RGBColor[0.7189495000000001, 0.719797, 0.283877], 
                    CalculateScan`PlotterScanner`Private`taylorParabolaCount$$\
 = 36, CalculateScan`PlotterScanner`Private`taylorParabolaLastParamaters$$ = \
{}, CalculateScan`PlotterScanner`Private`taylorParabolaOpacity$$ = 0.8, 
                    CalculateScan`PlotterScanner`Private`taylorParabolas$$ = \
{}, CalculateScan`PlotterScanner`Private`taylorParabolaTF$$ = False, 
                    CalculateScan`PlotterScanner`Private`\
taylorParabolaThickness$$ = -3., 
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveAngle$$ = Rational[1, 4] Pi, 
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveColor$$ = 
                    RGBColor[0.49978279999999997`, 0.6025278, 0.2508104], 
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveCount$$ = 12, 
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveDistance$$ = 0.41822432957922906`, 
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveLastParamaters$$ = {}, 
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveOpacity$$ = 0.8, 
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurvePlotCurves$$ = {}, 
                    CalculateScan`PlotterScanner`Private`tiltedOffsetCurveTF$$\
 = False, 
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveThickness$$ = -3., 
                    CalculateScan`PlotterScanner`Private`tiltedTangentAngle$$ = 
                    Rational[1, 4] Pi, 
                    CalculateScan`PlotterScanner`Private`tiltedTangentColor$$ = 
                    RGBColor[
                    0.2622702, 0.40739780000000003`, 0.41955020000000004`], 
                    CalculateScan`PlotterScanner`Private`tiltedTangentCount$$ = 
                    60, CalculateScan`PlotterScanner`Private`\
tiltedTangentLength$$ = 0.41822432957922906`, 
                    CalculateScan`PlotterScanner`Private`tiltedTangentOpacity$\
$ = 0.8, CalculateScan`PlotterScanner`Private`tiltedTangentTF$$ = False, 
                    CalculateScan`PlotterScanner`Private`\
tiltedTangentThickness$$ = -3., 
                    CalculateScan`PlotterScanner`Private`x1$$ = \
-0.7853981633974483, CalculateScan`PlotterScanner`Private`x2$$ = 
                    0.7853981633974483}, "ControllerVariables" :> {
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`more$$, 
                    CalculateUtilities`GraphicsUtilities`Private`more$253019$$\
, False], 
                    Hold[
                    CalculateScan`PlotterScanner`Private`x1$$, 
                    CalculateScan`PlotterScanner`Private`x1$253020$$, 0], 
                    Hold[
                    CalculateScan`PlotterScanner`Private`x2$$, 
                    CalculateScan`PlotterScanner`Private`x2$253021$$, 0], 
                    Hold[
                    CalculateScan`PlotterScanner`Private`symmxQ$$, 
                    CalculateScan`PlotterScanner`Private`symmxQ$253022$$, 
                    False], 
                    Hold[
                    CalculateScan`PlotterScanner`Private`fy1$$, 
                    CalculateScan`PlotterScanner`Private`fy1$253023$$, 0], 
                    Hold[
                    CalculateScan`PlotterScanner`Private`fy2$$, 
                    CalculateScan`PlotterScanner`Private`fy2$253024$$, 0], 
                    Hold[
                    CalculateScan`PlotterScanner`Private`symmyQ$$, 
                    CalculateScan`PlotterScanner`Private`symmyQ$253025$$, 
                    False], 
                    Hold[
                    CalculateScan`PlotterScanner`Private`sqPRQ$$, 
                    CalculateScan`PlotterScanner`Private`sqPRQ$253026$$, 
                    False], 
                    Hold[
                    CalculateScan`PlotterScanner`Private`ar$$, 
                    CalculateScan`PlotterScanner`Private`ar$253027$$, 0], 
                    Hold[
                    CalculateScan`PlotterScanner`Private`tangentCount$$, 
                    CalculateScan`PlotterScanner`Private`tangentCount$253028$$\
, 0], 
                    Hold[
                    CalculateScan`PlotterScanner`Private`tangentLength$$, 
                    
                    CalculateScan`PlotterScanner`Private`tangentLength$253029$\
$, 0], 
                    Hold[
                    CalculateScan`PlotterScanner`Private`tangentThickness$$, 
                    CalculateScan`PlotterScanner`Private`tangentThickness$\
253030$$, 0], 
                    Hold[
                    CalculateScan`PlotterScanner`Private`tangentOpacity$$, 
                    CalculateScan`PlotterScanner`Private`tangentOpacity$\
253031$$, 0], 
                    Hold[
                    CalculateScan`PlotterScanner`Private`normalCount$$, 
                    CalculateScan`PlotterScanner`Private`normalCount$253032$$,
                     0]}, "OtherVariables" :> {
                   Typeset`show$$, Typeset`bookmarkList$$, 
                    Typeset`bookmarkMode$$, Typeset`animator$$, 
                    Typeset`animvar$$, Typeset`name$$, Typeset`specs$$, 
                    Typeset`size$$, Typeset`update$$, Typeset`initDone$$, 
                    Typeset`skipInitDone$$}, "Body" :> Quiet[
                    
                    Module[{
                    CalculateScan`PlotterScanner`Private`x1Old$, 
                    CalculateScan`PlotterScanner`Private`x2Old$, 
                    CalculateScan`PlotterScanner`Private`fy1Old$, 
                    CalculateScan`PlotterScanner`Private`fy2Old$, 
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$, 
                    CalculateScan`PlotterScanner`Private`singularities$, 
                    CalculateScan`PlotterScanner`Private`ts$, 
                    CalculateScan`PlotterScanner`Private`xL$, 
                    CalculateScan`PlotterScanner`Private`xU$, 
                    CalculateScan`PlotterScanner`Private`yL$, 
                    CalculateScan`PlotterScanner`Private`yU$, 
                    CalculateScan`PlotterScanner`Private`pRX$, 
                    CalculateScan`PlotterScanner`Private`\[CapitalDelta]X$, 
                    CalculateScan`PlotterScanner`Private`\[CapitalDelta]y$, 
                    CalculateScan`PlotterScanner`Private`Y1$, 
                    CalculateScan`PlotterScanner`Private`Y2$, 
                    CalculateScan`PlotterScanner`Private`pRY$, 
                    CalculateScan`PlotterScanner`Private`originalCurvePlot0$, 
                    CalculateScan`PlotterScanner`Private`originalCurvePlot$, 
                    CalculateScan`PlotterScanner`Private`tangentsLines$, 
                    CalculateScan`PlotterScanner`Private`tangentLinePlot$, 
                    CalculateScan`PlotterScanner`Private`normalLines$, 
                    CalculateScan`PlotterScanner`Private`normalLinePlot$, 
                    CalculateScan`PlotterScanner`Private`tiltedTangentLines$, 
                    CalculateScan`PlotterScanner`Private`\
tiltedTangentLinePlot$, 
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleRadii$, 
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleLastParamaters$, 
                    CalculateScan`PlotterScanner`Private`osculatingCirclePlot$\
, CalculateScan`PlotterScanner`Private`taylorParabolaPlot$, 
                    CalculateScan`PlotterScanner`Private`evolutePlot$, 
                    CalculateScan`PlotterScanner`Private`involutePlotCurves$, 
                    CalculateScan`PlotterScanner`Private`\
involutePlotCurveLastParamaters$, 
                    CalculateScan`PlotterScanner`Private`involutePlot$, 
                    CalculateScan`PlotterScanner`Private`iTab$, 
                    CalculateScan`PlotterScanner`Private`xLi$, 
                    CalculateScan`PlotterScanner`Private`xUi$, 
                    CalculateScan`PlotterScanner`Private`arcLength$, 
                    CalculateScan`PlotterScanner`Private`arcL$, 
                    CalculateScan`PlotterScanner`Private`xi1$, 
                    CalculateScan`PlotterScanner`Private`xi2$, 
                    CalculateScan`PlotterScanner`Private`lineSegments$, 
                    CalculateScan`PlotterScanner`Private`baseSegments$, 
                    CalculateScan`PlotterScanner`Private`oSegments$, 
                    CalculateScan`PlotterScanner`Private`arcFactors$, 
                    CalculateScan`PlotterScanner`Private`iTabRight$, 
                    CalculateScan`PlotterScanner`Private`iTabLeft$, 
                    CalculateScan`PlotterScanner`Private`signedArcFactors$, 
                    CalculateScan`PlotterScanner`Private`curvePoints$}, If[
                    And[
                    CalculateScan`PlotterScanner`Private`sa$$ === False, 
                    CalculateScan`PlotterScanner`Private`st$$ == True], 
                    CalculateScan`PlotterScanner`Private`st$$ = False]; 
                    If[CalculateScan`PlotterScanner`Private`symmxQ$$, 
                    If[
                    And[
                    CalculateScan`PlotterScanner`Private`x1$$ == 
                    CalculateScan`PlotterScanner`Private`x1Old$, 
                    CalculateScan`PlotterScanner`Private`x2$$ != 
                    CalculateScan`PlotterScanner`Private`x2Old$], 
                    CalculateScan`PlotterScanner`Private`x1$$ = -
                    CalculateScan`PlotterScanner`Private`x2$$, 
                    CalculateScan`PlotterScanner`Private`x2$$ = -
                    CalculateScan`PlotterScanner`Private`x1$$]]; 
                    CalculateScan`PlotterScanner`Private`x1Old$ = 
                    CalculateScan`PlotterScanner`Private`x1$$; 
                    CalculateScan`PlotterScanner`Private`x2Old$ = 
                    CalculateScan`PlotterScanner`Private`x2$$; 
                    If[CalculateScan`PlotterScanner`Private`symmyQ$$, 
                    If[
                    And[
                    CalculateScan`PlotterScanner`Private`fy1$$ == 
                    CalculateScan`PlotterScanner`Private`fy1Old$, 
                    CalculateScan`PlotterScanner`Private`fy2$$ != 
                    CalculateScan`PlotterScanner`Private`fy2Old$], 
                    CalculateScan`PlotterScanner`Private`fy1$$ = 
                    CalculateScan`PlotterScanner`Private`fy2$$, 
                    CalculateScan`PlotterScanner`Private`fy2$$ = 
                    CalculateScan`PlotterScanner`Private`fy1$$]]; 
                    CalculateScan`PlotterScanner`Private`fy1Old$ = 
                    CalculateScan`PlotterScanner`Private`fy1$$; 
                    CalculateScan`PlotterScanner`Private`fy2Old$ = 
                    CalculateScan`PlotterScanner`Private`fy2$$; 
                    If[CalculateScan`PlotterScanner`Private`x1$$ == 
                    CalculateScan`PlotterScanner`Private`x2$$, 
                    CalculateScan`PlotterScanner`Private`x2$$ = 
                    CalculateScan`PlotterScanner`Private`x1$$ + 4.5/100]; {
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$} = Sort[
                    N[{
                    
                    Function[{
                    CalculateScan`PlotterScanner`Private`y, 
                    CalculateScan`PlotterScanner`Private`L}, (
                    Sign[CalculateScan`PlotterScanner`Private`y] 
                    CalculateScan`PlotterScanner`Private`L) Tan[
                    Abs[CalculateScan`PlotterScanner`Private`y]]^1][
                    CalculateScan`PlotterScanner`Private`x1$$, 2.25], 
                    
                    Function[{
                    CalculateScan`PlotterScanner`Private`y, 
                    CalculateScan`PlotterScanner`Private`L}, (
                    Sign[CalculateScan`PlotterScanner`Private`y] 
                    CalculateScan`PlotterScanner`Private`L) Tan[
                    Abs[CalculateScan`PlotterScanner`Private`y]]^1][
                    CalculateScan`PlotterScanner`Private`x2$$, 2.25]}]]; 
                    CalculateScan`PlotterScanner`Private`singularities$ = (
                    CalculateScan`PlotterScanner`Private`ts$ = 
                    TimeConstrained[
                    CalculateScan`PlotterScanner`Private`red = Reduce[
                    And[
                    1/((E^(4 Global`x) (1 - 4 Global`x + 8 Global`x^2))/32) == 
                    0, CalculateScan`PlotterScanner`Private`X1$ < Global`x < 
                    CalculateScan`PlotterScanner`Private`X2$], Global`x, 
                    Reals], 0.2, False]; 
                    If[CalculateScan`PlotterScanner`Private`ts$ === False, {}, 
                    Cases[
                    ReplaceAll[Global`x, {
                    ToRules[CalculateScan`PlotterScanner`Private`ts$]}], 
                    Blank[Real]]]); 
                    CalculateScan`PlotterScanner`Private`originalCurvePlot0$ = 
                    Plot[
                    CompiledFunction[{8, 8., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    2}}, {{-4, {2, 0, 2}}, {0.03125, {3, 0, 1}}, {
                    8, {2, 0, 3}}, {1, {2, 0, 1}}, {4, {2, 0, 0}}}, {0, 4, 6, 
                    0, 0}, {{10, 0, 2}, {16, 2, 0, 2}, {40, 34, 3, 0, 2, 3, 0,
                     3}, {10, 2, 2}, {16, 2, 0, 2}, {40, 56, 3, 0, 0, 3, 0, 
                    4}, {10, 3, 5}, {16, 5, 4, 5}, {10, 1, 4}, {13, 4, 2, 5, 
                    4}, {16, 1, 3, 4, 2}, {1}}, 
                    
                    Function[{
                    Global`x}, (
                    E^(4 Global`x) (1 - 4 Global`x + 8 Global`x^2))/32], 
                    Evaluate][Global`x], {
                    Global`x, CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$}, PlotStyle -> 
                    Directive[Black, Thick], Evaluated -> False, Exclusions -> 
                    CalculateScan`PlotterScanner`Private`singularities$]; {{
                    CalculateScan`PlotterScanner`Private`xL$, 
                    CalculateScan`PlotterScanner`Private`xU$}, {
                    CalculateScan`PlotterScanner`Private`yL$, 
                    CalculateScan`PlotterScanner`Private`yU$}} = 
                    FullOptions[
                    CalculateScan`PlotterScanner`Private`originalCurvePlot0$, 
                    PlotRange]; CalculateScan`PlotterScanner`Private`pRX$ = {
                    Min[
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$], 
                    Max[CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$]}; 
                    CalculateScan`PlotterScanner`Private`\[CapitalDelta]X$ = 
                    Abs[CalculateScan`PlotterScanner`Private`X2$ - 
                    CalculateScan`PlotterScanner`Private`X1$]; 
                    CalculateScan`PlotterScanner`Private`\[CapitalDelta]y$ = 
                    CalculateScan`PlotterScanner`Private`yU$ - 
                    CalculateScan`PlotterScanner`Private`yL$; If[
                    And[
                    CalculateScan`PlotterScanner`Private`sqPRQ$$, 
                    CalculateScan`PlotterScanner`Private`symmyQ$$, 
                    Sign[CalculateScan`PlotterScanner`Private`X1$] === -
                    Sign[CalculateScan`PlotterScanner`Private`X2$], 
                    Abs[1 - CalculateScan`PlotterScanner`Private`fy1$$/
                    CalculateScan`PlotterScanner`Private`fy2$$] < 10^(-3)], 
                    CalculateScan`PlotterScanner`Private`fy1$$ = 
                    ArcTan[((-100) CalculateScan`PlotterScanner`Private`xL$ - 
                    100 CalculateScan`PlotterScanner`Private`yL$ + 
                    CalculateScan`PlotterScanner`Private`\[CapitalDelta]y$)/(
                    100 CalculateScan`PlotterScanner`Private`\[CapitalDelta]y$\
)]; CalculateScan`PlotterScanner`Private`fy2$$ = 
                    CalculateScan`PlotterScanner`Private`fy1$$; Null]; {
                    CalculateScan`PlotterScanner`Private`Y1$, 
                    CalculateScan`PlotterScanner`Private`Y2$} = {
                    CalculateScan`PlotterScanner`Private`yL$ - 
                    CalculateScan`PlotterScanner`Private`\[CapitalDelta]y$/
                    100 - Function[{
                    CalculateScan`PlotterScanner`Private`y, 
                    CalculateScan`PlotterScanner`Private`L}, (
                    Sign[CalculateScan`PlotterScanner`Private`y] 
                    CalculateScan`PlotterScanner`Private`L) Tan[
                    Abs[CalculateScan`PlotterScanner`Private`y]]^1][
                    CalculateScan`PlotterScanner`Private`fy1$$, 1] 
                    CalculateScan`PlotterScanner`Private`\[CapitalDelta]y$, 
                    CalculateScan`PlotterScanner`Private`yU$ + 
                    CalculateScan`PlotterScanner`Private`\[CapitalDelta]y$/
                    100 + Function[{
                    CalculateScan`PlotterScanner`Private`y, 
                    CalculateScan`PlotterScanner`Private`L}, (
                    Sign[CalculateScan`PlotterScanner`Private`y] 
                    CalculateScan`PlotterScanner`Private`L) Tan[
                    Abs[CalculateScan`PlotterScanner`Private`y]]^1][
                    CalculateScan`PlotterScanner`Private`fy2$$, 1] 
                    CalculateScan`PlotterScanner`Private`\[CapitalDelta]y$}; 
                    CalculateScan`PlotterScanner`Private`pRY$ = {
                    CalculateScan`PlotterScanner`Private`Y1$, 
                    CalculateScan`PlotterScanner`Private`Y2$}; 
                    CalculateScan`PlotterScanner`Private`originalCurvePlot$ = 
                    Plot[
                    CompiledFunction[{8, 8., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    2}}, {{-4, {2, 0, 2}}, {0.03125, {3, 0, 1}}, {
                    8, {2, 0, 3}}, {1, {2, 0, 1}}, {4, {2, 0, 0}}}, {0, 4, 6, 
                    0, 0}, {{10, 0, 2}, {16, 2, 0, 2}, {40, 34, 3, 0, 2, 3, 0,
                     3}, {10, 2, 2}, {16, 2, 0, 2}, {40, 56, 3, 0, 0, 3, 0, 
                    4}, {10, 3, 5}, {16, 5, 4, 5}, {10, 1, 4}, {13, 4, 2, 5, 
                    4}, {16, 1, 3, 4, 2}, {1}}, 
                    
                    Function[{
                    Global`x}, (
                    E^(4 Global`x) (1 - 4 Global`x + 8 Global`x^2))/32], 
                    Evaluate][Global`x], {
                    Global`x, CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$}, PlotStyle -> 
                    Directive[Black, Thick], PlotRange -> 
                    CalculateScan`PlotterScanner`Private`pRY$, Evaluated -> 
                    False, Exclusions -> 
                    CalculateScan`PlotterScanner`Private`singularities$]; 
                    CalculateScan`PlotterScanner`Private`tangentsLines$ = 
                    If[CalculateScan`PlotterScanner`Private`tangentTF$$, 
                    CalculateScan`PlotterScanner`Private`addTangents[{
                    CompiledFunction[{8, 8., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    2}}, {{-4, {2, 0, 2}}, {0.03125, {3, 0, 1}}, {
                    8, {2, 0, 3}}, {1, {2, 0, 1}}, {4, {2, 0, 0}}}, {0, 4, 6, 
                    0, 0}, {{10, 0, 2}, {16, 2, 0, 2}, {40, 34, 3, 0, 2, 3, 0,
                     3}, {10, 2, 2}, {16, 2, 0, 2}, {40, 56, 3, 0, 0, 3, 0, 
                    4}, {10, 3, 5}, {16, 5, 4, 5}, {10, 1, 4}, {13, 4, 2, 5, 
                    4}, {16, 1, 3, 4, 2}, {1}}, 
                    
                    Function[{
                    Global`x}, (
                    E^(4 Global`x) (1 - 4 Global`x + 8 Global`x^2))/32], 
                    Evaluate], 
                    CompiledFunction[{8, 8., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    4}}, {{-4, {2, 0, 1}}, {0.03125, {3, 0, 3}}, {
                    8, {2, 0, 4}}, {0.125, {3, 0, 6}}, {16, {2, 0, 2}}, {
                    1, {2, 0, 3}}, {4, {2, 0, 0}}}, {0, 5, 9, 0, 
                    0}, {{10, 0, 1}, {16, 1, 0, 1}, {40, 34, 3, 0, 1, 3, 0, 
                    2}, {10, 2, 4}, {16, 4, 0, 4}, {10, 1, 5}, {13, 5, 4, 
                    5}, {16, 3, 2, 5, 4}, {10, 1, 5}, {16, 5, 0, 5}, {40, 56, 
                    3, 0, 0, 3, 0, 7}, {10, 4, 8}, {16, 8, 7, 8}, {10, 3, 
                    7}, {13, 7, 5, 8, 7}, {16, 6, 2, 7, 5}, {13, 4, 5, 4}, {
                    1}}, 
                    Function[{Global`x}, 
                    
                    Block[{Compile`$167, Compile`$285}, 
                    Compile`$167 = 4 Global`x; 
                    Compile`$285 = 
                    E^Compile`$167; (Compile`$285 (-4 + 16 Global`x))/
                    32 + (Compile`$285 (1 - 4 Global`x + 8 Global`x^2))/8]], 
                    Evaluate]}, {
                    Global`x, CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$}, 
                    CalculateScan`PlotterScanner`Private`tangentCount$$, 
                    "LengthFactor" -> 
                    Function[{
                    CalculateScan`PlotterScanner`Private`y, 
                    CalculateScan`PlotterScanner`Private`L}, (
                    Sign[CalculateScan`PlotterScanner`Private`y] 
                    CalculateScan`PlotterScanner`Private`L) Tan[
                    Abs[CalculateScan`PlotterScanner`Private`y]]^1][
                    CalculateScan`PlotterScanner`Private`tangentLength$$, 
                    2.25]], {}]; 
                    CalculateScan`PlotterScanner`Private`tangentLinePlot$ = 
                    Graphics[{
                    Directive[
                    CalculateScan`PlotterScanner`Private`tangentColor$$, 
                    Opacity[
                    CalculateScan`PlotterScanner`Private`tangentOpacity$$], 
                    Thickness[
                    10^CalculateScan`PlotterScanner`Private`tangentThickness$$\
]], CalculateScan`PlotterScanner`Private`tangentsLines$}]; 
                    CalculateScan`PlotterScanner`Private`normalLines$ = 
                    If[CalculateScan`PlotterScanner`Private`normalTF$$, 
                    CalculateScan`PlotterScanner`Private`addTangents[{
                    CompiledFunction[{8, 8., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    2}}, {{-4, {2, 0, 2}}, {0.03125, {3, 0, 1}}, {
                    8, {2, 0, 3}}, {1, {2, 0, 1}}, {4, {2, 0, 0}}}, {0, 4, 6, 
                    0, 0}, {{10, 0, 2}, {16, 2, 0, 2}, {40, 34, 3, 0, 2, 3, 0,
                     3}, {10, 2, 2}, {16, 2, 0, 2}, {40, 56, 3, 0, 0, 3, 0, 
                    4}, {10, 3, 5}, {16, 5, 4, 5}, {10, 1, 4}, {13, 4, 2, 5, 
                    4}, {16, 1, 3, 4, 2}, {1}}, 
                    
                    Function[{
                    Global`x}, (
                    E^(4 Global`x) (1 - 4 Global`x + 8 Global`x^2))/32], 
                    Evaluate], 
                    CompiledFunction[{8, 8., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    4}}, {{-4, {2, 0, 1}}, {0.03125, {3, 0, 3}}, {
                    8, {2, 0, 4}}, {0.125, {3, 0, 6}}, {16, {2, 0, 2}}, {
                    1, {2, 0, 3}}, {4, {2, 0, 0}}}, {0, 5, 9, 0, 
                    0}, {{10, 0, 1}, {16, 1, 0, 1}, {40, 34, 3, 0, 1, 3, 0, 
                    2}, {10, 2, 4}, {16, 4, 0, 4}, {10, 1, 5}, {13, 5, 4, 
                    5}, {16, 3, 2, 5, 4}, {10, 1, 5}, {16, 5, 0, 5}, {40, 56, 
                    3, 0, 0, 3, 0, 7}, {10, 4, 8}, {16, 8, 7, 8}, {10, 3, 
                    7}, {13, 7, 5, 8, 7}, {16, 6, 2, 7, 5}, {13, 4, 5, 4}, {
                    1}}, 
                    Function[{Global`x}, 
                    
                    Block[{Compile`$167, Compile`$285}, 
                    Compile`$167 = 4 Global`x; 
                    Compile`$285 = 
                    E^Compile`$167; (Compile`$285 (-4 + 16 Global`x))/
                    32 + (Compile`$285 (1 - 4 Global`x + 8 Global`x^2))/8]], 
                    Evaluate]}, {Global`x, 
                    Min[
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$], 
                    Max[
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$]}, 
                    CalculateScan`PlotterScanner`Private`normalCount$$, 
                    "LengthFactor" -> 
                    Function[{
                    CalculateScan`PlotterScanner`Private`y, 
                    CalculateScan`PlotterScanner`Private`L}, (
                    Sign[CalculateScan`PlotterScanner`Private`y] 
                    CalculateScan`PlotterScanner`Private`L) Tan[
                    Abs[CalculateScan`PlotterScanner`Private`y]]^1][
                    CalculateScan`PlotterScanner`Private`normalLength$$, 
                    2.25], "TiltAngle" -> Pi/2], {}]; 
                    CalculateScan`PlotterScanner`Private`normalLinePlot$ = 
                    Graphics[{
                    Directive[
                    CalculateScan`PlotterScanner`Private`normalColor$$, 
                    Opacity[
                    CalculateScan`PlotterScanner`Private`normalOpacity$$], 
                    Thickness[
                    10^CalculateScan`PlotterScanner`Private`normalThickness$$]\
], CalculateScan`PlotterScanner`Private`normalLines$}]; 
                    CalculateScan`PlotterScanner`Private`tiltedTangentLines$ = 
                    If[CalculateScan`PlotterScanner`Private`tiltedTangentTF$$, 
                    CalculateScan`PlotterScanner`Private`addTangents[{
                    CompiledFunction[{8, 8., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    2}}, {{-4, {2, 0, 2}}, {0.03125, {3, 0, 1}}, {
                    8, {2, 0, 3}}, {1, {2, 0, 1}}, {4, {2, 0, 0}}}, {0, 4, 6, 
                    0, 0}, {{10, 0, 2}, {16, 2, 0, 2}, {40, 34, 3, 0, 2, 3, 0,
                     3}, {10, 2, 2}, {16, 2, 0, 2}, {40, 56, 3, 0, 0, 3, 0, 
                    4}, {10, 3, 5}, {16, 5, 4, 5}, {10, 1, 4}, {13, 4, 2, 5, 
                    4}, {16, 1, 3, 4, 2}, {1}}, 
                    
                    Function[{
                    Global`x}, (
                    E^(4 Global`x) (1 - 4 Global`x + 8 Global`x^2))/32], 
                    Evaluate], 
                    CompiledFunction[{8, 8., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    4}}, {{-4, {2, 0, 1}}, {0.03125, {3, 0, 3}}, {
                    8, {2, 0, 4}}, {0.125, {3, 0, 6}}, {16, {2, 0, 2}}, {
                    1, {2, 0, 3}}, {4, {2, 0, 0}}}, {0, 5, 9, 0, 
                    0}, {{10, 0, 1}, {16, 1, 0, 1}, {40, 34, 3, 0, 1, 3, 0, 
                    2}, {10, 2, 4}, {16, 4, 0, 4}, {10, 1, 5}, {13, 5, 4, 
                    5}, {16, 3, 2, 5, 4}, {10, 1, 5}, {16, 5, 0, 5}, {40, 56, 
                    3, 0, 0, 3, 0, 7}, {10, 4, 8}, {16, 8, 7, 8}, {10, 3, 
                    7}, {13, 7, 5, 8, 7}, {16, 6, 2, 7, 5}, {13, 4, 5, 4}, {
                    1}}, 
                    Function[{Global`x}, 
                    
                    Block[{Compile`$167, Compile`$285}, 
                    Compile`$167 = 4 Global`x; 
                    Compile`$285 = 
                    E^Compile`$167; (Compile`$285 (-4 + 16 Global`x))/
                    32 + (Compile`$285 (1 - 4 Global`x + 8 Global`x^2))/8]], 
                    Evaluate]}, {Global`x, 
                    Min[
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$], 
                    Max[
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$]}, 
                    CalculateScan`PlotterScanner`Private`tiltedTangentCount$$,
                     "LengthFactor" -> 
                    Function[{
                    CalculateScan`PlotterScanner`Private`y, 
                    CalculateScan`PlotterScanner`Private`L}, (
                    Sign[CalculateScan`PlotterScanner`Private`y] 
                    CalculateScan`PlotterScanner`Private`L) Tan[
                    Abs[CalculateScan`PlotterScanner`Private`y]]^1][
                    CalculateScan`PlotterScanner`Private`tiltedTangentLength$$\
, 2.25], "TiltAngle" -> 
                    CalculateScan`PlotterScanner`Private`tiltedTangentAngle$$]\
, {}]; CalculateScan`PlotterScanner`Private`tiltedTangentLinePlot$ = Graphics[{
                    Directive[
                    CalculateScan`PlotterScanner`Private`tiltedTangentColor$$, 
                    Opacity[
                    CalculateScan`PlotterScanner`Private`tiltedTangentOpacity$\
$], 
                    Thickness[
                    10^CalculateScan`PlotterScanner`Private`\
tiltedTangentThickness$$]], 
                    CalculateScan`PlotterScanner`Private`tiltedTangentLines$}]\
; If[
                    And[
                    CalculateScan`PlotterScanner`Private`osculatingCircleTF$$,
                     CalculateScan`PlotterScanner`Private`\
osculatingCircleLastParamaters$ =!= {{
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$}, 
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleCount$$}], 
                    CalculateScan`PlotterScanner`Private`osculatingCircles$$ = 
                    If[CalculateScan`PlotterScanner`Private`\
osculatingCircleTF$$, 
                    CalculateScan`PlotterScanner`Private`addOsculatingCircles[{
                    CompiledFunction[{8, 8., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    2}}, {{-4, {2, 0, 2}}, {0.03125, {3, 0, 1}}, {
                    8, {2, 0, 3}}, {1, {2, 0, 1}}, {4, {2, 0, 0}}}, {0, 4, 6, 
                    0, 0}, {{10, 0, 2}, {16, 2, 0, 2}, {40, 34, 3, 0, 2, 3, 0,
                     3}, {10, 2, 2}, {16, 2, 0, 2}, {40, 56, 3, 0, 0, 3, 0, 
                    4}, {10, 3, 5}, {16, 5, 4, 5}, {10, 1, 4}, {13, 4, 2, 5, 
                    4}, {16, 1, 3, 4, 2}, {1}}, 
                    
                    Function[{Global`x}, (
                    E^(4 Global`x) (1 - 4 Global`x + 8 Global`x^2))/32], 
                    Evaluate], 
                    CompiledFunction[{8, 8., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    4}}, {{-4, {2, 0, 1}}, {0.03125, {3, 0, 3}}, {
                    8, {2, 0, 4}}, {0.125, {3, 0, 6}}, {16, {2, 0, 2}}, {
                    1, {2, 0, 3}}, {4, {2, 0, 0}}}, {0, 5, 9, 0, 
                    0}, {{10, 0, 1}, {16, 1, 0, 1}, {40, 34, 3, 0, 1, 3, 0, 
                    2}, {10, 2, 4}, {16, 4, 0, 4}, {10, 1, 5}, {13, 5, 4, 
                    5}, {16, 3, 2, 5, 4}, {10, 1, 5}, {16, 5, 0, 5}, {40, 56, 
                    3, 0, 0, 3, 0, 7}, {10, 4, 8}, {16, 8, 7, 8}, {10, 3, 
                    7}, {13, 7, 5, 8, 7}, {16, 6, 2, 7, 5}, {13, 4, 5, 4}, {
                    1}}, 
                    Function[{Global`x}, 
                    
                    Block[{Compile`$167, Compile`$285}, 
                    Compile`$167 = 4 Global`x; 
                    Compile`$285 = 
                    E^Compile`$167; (Compile`$285 (-4 + 16 Global`x))/
                    32 + (Compile`$285 (1 - 4 Global`x + 8 Global`x^2))/8]], 
                    Evaluate], 
                    CompiledFunction[{8, 8., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    4}}, {{-4, {2, 0, 1}}, {8, {2, 0, 4}}, {
                    0.25, {3, 0, 5}}, {16, {2, 0, 2}}, {1, {2, 0, 3}}, {
                    0.5, {3, 0, 3}}, {4, {2, 0, 0}}}, {0, 5, 10, 0, 
                    0}, {{10, 0, 1}, {16, 1, 0, 1}, {40, 34, 3, 0, 1, 3, 0, 
                    2}, {16, 3, 2, 4}, {10, 2, 6}, {16, 6, 0, 6}, {10, 1, 
                    7}, {13, 7, 6, 7}, {16, 5, 2, 7, 6}, {10, 1, 7}, {16, 7, 
                    0, 7}, {40, 56, 3, 0, 0, 3, 0, 8}, {10, 4, 9}, {16, 9, 8, 
                    9}, {10, 3, 8}, {13, 8, 7, 9, 8}, {16, 3, 2, 8, 7}, {13, 
                    4, 6, 7, 4}, {1}}, 
                    Function[{Global`x}, 
                    
                    Block[{Compile`$616, Compile`$626}, 
                    Compile`$616 = 4 Global`x; Compile`$626 = E^Compile`$616; 
                    Compile`$626/2 + (Compile`$626 (-4 + 16 Global`x))/
                    4 + (Compile`$626 (1 - 4 Global`x + 8 Global`x^2))/2]], 
                    Evaluate]}, {Global`x, 
                    Min[
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$], 
                    Max[
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$]}, 
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleCount$$], {}]; 
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleRadii$ = If[
                    And[
                    CalculateScan`PlotterScanner`Private`osculatingCircleTF$$,
                     CalculateScan`PlotterScanner`Private`\
osculatingCircleRadiiTF$$], 
                    
                    CalculateScan`PlotterScanner`Private`\
addOsculatingCircleRadii[{
                    CompiledFunction[{8, 8., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    2}}, {{-4, {2, 0, 2}}, {0.03125, {3, 0, 1}}, {
                    8, {2, 0, 3}}, {1, {2, 0, 1}}, {4, {2, 0, 0}}}, {0, 4, 6, 
                    0, 0}, {{10, 0, 2}, {16, 2, 0, 2}, {40, 34, 3, 0, 2, 3, 0,
                     3}, {10, 2, 2}, {16, 2, 0, 2}, {40, 56, 3, 0, 0, 3, 0, 
                    4}, {10, 3, 5}, {16, 5, 4, 5}, {10, 1, 4}, {13, 4, 2, 5, 
                    4}, {16, 1, 3, 4, 2}, {1}}, 
                    
                    Function[{Global`x}, (
                    E^(4 Global`x) (1 - 4 Global`x + 8 Global`x^2))/32], 
                    Evaluate], 
                    CompiledFunction[{8, 8., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    4}}, {{-4, {2, 0, 1}}, {0.03125, {3, 0, 3}}, {
                    8, {2, 0, 4}}, {0.125, {3, 0, 6}}, {16, {2, 0, 2}}, {
                    1, {2, 0, 3}}, {4, {2, 0, 0}}}, {0, 5, 9, 0, 
                    0}, {{10, 0, 1}, {16, 1, 0, 1}, {40, 34, 3, 0, 1, 3, 0, 
                    2}, {10, 2, 4}, {16, 4, 0, 4}, {10, 1, 5}, {13, 5, 4, 
                    5}, {16, 3, 2, 5, 4}, {10, 1, 5}, {16, 5, 0, 5}, {40, 56, 
                    3, 0, 0, 3, 0, 7}, {10, 4, 8}, {16, 8, 7, 8}, {10, 3, 
                    7}, {13, 7, 5, 8, 7}, {16, 6, 2, 7, 5}, {13, 4, 5, 4}, {
                    1}}, 
                    Function[{Global`x}, 
                    
                    Block[{Compile`$167, Compile`$285}, 
                    Compile`$167 = 4 Global`x; 
                    Compile`$285 = 
                    E^Compile`$167; (Compile`$285 (-4 + 16 Global`x))/
                    32 + (Compile`$285 (1 - 4 Global`x + 8 Global`x^2))/8]], 
                    Evaluate], 
                    CompiledFunction[{8, 8., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    4}}, {{-4, {2, 0, 1}}, {8, {2, 0, 4}}, {
                    0.25, {3, 0, 5}}, {16, {2, 0, 2}}, {1, {2, 0, 3}}, {
                    0.5, {3, 0, 3}}, {4, {2, 0, 0}}}, {0, 5, 10, 0, 
                    0}, {{10, 0, 1}, {16, 1, 0, 1}, {40, 34, 3, 0, 1, 3, 0, 
                    2}, {16, 3, 2, 4}, {10, 2, 6}, {16, 6, 0, 6}, {10, 1, 
                    7}, {13, 7, 6, 7}, {16, 5, 2, 7, 6}, {10, 1, 7}, {16, 7, 
                    0, 7}, {40, 56, 3, 0, 0, 3, 0, 8}, {10, 4, 9}, {16, 9, 8, 
                    9}, {10, 3, 8}, {13, 8, 7, 9, 8}, {16, 3, 2, 8, 7}, {13, 
                    4, 6, 7, 4}, {1}}, 
                    Function[{Global`x}, 
                    
                    Block[{Compile`$616, Compile`$626}, 
                    Compile`$616 = 4 Global`x; Compile`$626 = E^Compile`$616; 
                    Compile`$626/2 + (Compile`$626 (-4 + 16 Global`x))/
                    4 + (Compile`$626 (1 - 4 Global`x + 8 Global`x^2))/2]], 
                    Evaluate]}, {Global`x, 
                    Min[
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$], 
                    Max[
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$]}, 
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleCount$$], {}]; 
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleLastParamaters$ = {{
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$}, 
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleCount$$}]; 
                    CalculateScan`PlotterScanner`Private`osculatingCirclePlot$\
 = Graphics[{
                    Directive[
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleColor$$, 
                    Opacity[
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleOpacity$$], 
                    Thickness[
                    10^CalculateScan`PlotterScanner`Private`\
osculatingCircleThickness$$]], 
                    If[
                    CalculateScan`PlotterScanner`Private`osculatingCircleTF$$,
                     CalculateScan`PlotterScanner`Private`osculatingCircles$$,\
 {}], 
                    If[
                    And[
                    CalculateScan`PlotterScanner`Private`osculatingCircleTF$$,
                     CalculateScan`PlotterScanner`Private`\
osculatingCircleRadiiTF$$], 
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleRadii$, {}]}]; If[
                    And[
                    CalculateScan`PlotterScanner`Private`taylorParabolaTF$$, 
                    CalculateScan`PlotterScanner`Private`\
taylorParabolaLastParamaters$$ =!= {{
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$}, 
                    CalculateScan`PlotterScanner`Private`taylorParabolaCount$$\
}], CalculateScan`PlotterScanner`Private`taylorParabolas$$ = 
                    If[CalculateScan`PlotterScanner`Private`taylorParabolaTF$$\
, 
                    CalculateScan`PlotterScanner`Private`addTaylorParabolas[{
                    CompiledFunction[{8, 8., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    2}}, {{-4, {2, 0, 2}}, {0.03125, {3, 0, 1}}, {
                    8, {2, 0, 3}}, {1, {2, 0, 1}}, {4, {2, 0, 0}}}, {0, 4, 6, 
                    0, 0}, {{10, 0, 2}, {16, 2, 0, 2}, {40, 34, 3, 0, 2, 3, 0,
                     3}, {10, 2, 2}, {16, 2, 0, 2}, {40, 56, 3, 0, 0, 3, 0, 
                    4}, {10, 3, 5}, {16, 5, 4, 5}, {10, 1, 4}, {13, 4, 2, 5, 
                    4}, {16, 1, 3, 4, 2}, {1}}, 
                    
                    Function[{Global`x}, (
                    E^(4 Global`x) (1 - 4 Global`x + 8 Global`x^2))/32], 
                    Evaluate], 
                    CompiledFunction[{8, 8., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    4}}, {{-4, {2, 0, 1}}, {0.03125, {3, 0, 3}}, {
                    8, {2, 0, 4}}, {0.125, {3, 0, 6}}, {16, {2, 0, 2}}, {
                    1, {2, 0, 3}}, {4, {2, 0, 0}}}, {0, 5, 9, 0, 
                    0}, {{10, 0, 1}, {16, 1, 0, 1}, {40, 34, 3, 0, 1, 3, 0, 
                    2}, {10, 2, 4}, {16, 4, 0, 4}, {10, 1, 5}, {13, 5, 4, 
                    5}, {16, 3, 2, 5, 4}, {10, 1, 5}, {16, 5, 0, 5}, {40, 56, 
                    3, 0, 0, 3, 0, 7}, {10, 4, 8}, {16, 8, 7, 8}, {10, 3, 
                    7}, {13, 7, 5, 8, 7}, {16, 6, 2, 7, 5}, {13, 4, 5, 4}, {
                    1}}, 
                    Function[{Global`x}, 
                    
                    Block[{Compile`$167, Compile`$285}, 
                    Compile`$167 = 4 Global`x; 
                    Compile`$285 = 
                    E^Compile`$167; (Compile`$285 (-4 + 16 Global`x))/
                    32 + (Compile`$285 (1 - 4 Global`x + 8 Global`x^2))/8]], 
                    Evaluate], 
                    CompiledFunction[{8, 8., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    4}}, {{-4, {2, 0, 1}}, {8, {2, 0, 4}}, {
                    0.25, {3, 0, 5}}, {16, {2, 0, 2}}, {1, {2, 0, 3}}, {
                    0.5, {3, 0, 3}}, {4, {2, 0, 0}}}, {0, 5, 10, 0, 
                    0}, {{10, 0, 1}, {16, 1, 0, 1}, {40, 34, 3, 0, 1, 3, 0, 
                    2}, {16, 3, 2, 4}, {10, 2, 6}, {16, 6, 0, 6}, {10, 1, 
                    7}, {13, 7, 6, 7}, {16, 5, 2, 7, 6}, {10, 1, 7}, {16, 7, 
                    0, 7}, {40, 56, 3, 0, 0, 3, 0, 8}, {10, 4, 9}, {16, 9, 8, 
                    9}, {10, 3, 8}, {13, 8, 7, 9, 8}, {16, 3, 2, 8, 7}, {13, 
                    4, 6, 7, 4}, {1}}, 
                    Function[{Global`x}, 
                    
                    Block[{Compile`$616, Compile`$626}, 
                    Compile`$616 = 4 Global`x; Compile`$626 = E^Compile`$616; 
                    Compile`$626/2 + (Compile`$626 (-4 + 16 Global`x))/
                    4 + (Compile`$626 (1 - 4 Global`x + 8 Global`x^2))/2]], 
                    Evaluate]}, {Global`x, 
                    Min[
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$], 
                    Max[
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$]}, 
                    CalculateScan`PlotterScanner`Private`taylorParabolaCount$$\
], {}]; CalculateScan`PlotterScanner`Private`taylorParabolaLastParamaters$$ = \
{{CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$}, 
                    CalculateScan`PlotterScanner`Private`taylorParabolaCount$$\
}]; CalculateScan`PlotterScanner`Private`taylorParabolaPlot$ = Graphics[{
                    Directive[
                    CalculateScan`PlotterScanner`Private`taylorParabolaColor$$\
, 
                    Opacity[
                    
                    CalculateScan`PlotterScanner`Private`\
taylorParabolaOpacity$$], 
                    Thickness[
                    10^CalculateScan`PlotterScanner`Private`\
taylorParabolaThickness$$]], 
                    If[
                    CalculateScan`PlotterScanner`Private`taylorParabolaTF$$, 
                    CalculateScan`PlotterScanner`Private`taylorParabolas$$, \
{}]}]; CalculateScan`PlotterScanner`Private`evolutePlot$ = 
                    If[CalculateScan`PlotterScanner`Private`evoluteTF$$, 
                    ParametricPlot[{Global`x, 
                    CompiledFunction[{8, 8., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    2}}, {{-4, {2, 0, 2}}, {0.03125, {3, 0, 1}}, {
                    8, {2, 0, 3}}, {1, {2, 0, 1}}, {4, {2, 0, 0}}}, {0, 4, 6, 
                    0, 0}, {{10, 0, 2}, {16, 2, 0, 2}, {40, 34, 3, 0, 2, 3, 0,
                     3}, {10, 2, 2}, {16, 2, 0, 2}, {40, 56, 3, 0, 0, 3, 0, 
                    4}, {10, 3, 5}, {16, 5, 4, 5}, {10, 1, 4}, {13, 4, 2, 5, 
                    4}, {16, 1, 3, 4, 2}, {1}}, 
                    
                    Function[{
                    Global`x}, (
                    E^(4 Global`x) (1 - 4 Global`x + 8 Global`x^2))/32], 
                    Evaluate][Global`x]} + ({-CompiledFunction[{8, 8., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    4}}, {{-4, {2, 0, 1}}, {0.03125, {3, 0, 3}}, {
                    8, {2, 0, 4}}, {0.125, {3, 0, 6}}, {16, {2, 0, 2}}, {
                    1, {2, 0, 3}}, {4, {2, 0, 0}}}, {0, 5, 9, 0, 
                    0}, {{10, 0, 1}, {16, 1, 0, 1}, {40, 34, 3, 0, 1, 3, 0, 
                    2}, {10, 2, 4}, {16, 4, 0, 4}, {10, 1, 5}, {13, 5, 4, 
                    5}, {16, 3, 2, 5, 4}, {10, 1, 5}, {16, 5, 0, 5}, {40, 56, 
                    3, 0, 0, 3, 0, 7}, {10, 4, 8}, {16, 8, 7, 8}, {10, 3, 
                    7}, {13, 7, 5, 8, 7}, {16, 6, 2, 7, 5}, {13, 4, 5, 4}, {
                    1}}, 
                    Function[{Global`x}, 
                    
                    Block[{Compile`$167, Compile`$285}, 
                    Compile`$167 = 4 Global`x; 
                    Compile`$285 = E^
                    Compile`$167; (Compile`$285 (-4 + 16 Global`x))/
                    32 + (Compile`$285 (1 - 4 Global`x + 8 Global`x^2))/8]], 
                    Evaluate][Global`x], 1} (1 + 
                    CompiledFunction[{8, 8., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    4}}, {{-4, {2, 0, 1}}, {0.03125, {3, 0, 3}}, {
                    8, {2, 0, 4}}, {0.125, {3, 0, 6}}, {16, {2, 0, 2}}, {
                    1, {2, 0, 3}}, {4, {2, 0, 0}}}, {0, 5, 9, 0, 
                    0}, {{10, 0, 1}, {16, 1, 0, 1}, {40, 34, 3, 0, 1, 3, 0, 
                    2}, {10, 2, 4}, {16, 4, 0, 4}, {10, 1, 5}, {13, 5, 4, 
                    5}, {16, 3, 2, 5, 4}, {10, 1, 5}, {16, 5, 0, 5}, {40, 56, 
                    3, 0, 0, 3, 0, 7}, {10, 4, 8}, {16, 8, 7, 8}, {10, 3, 
                    7}, {13, 7, 5, 8, 7}, {16, 6, 2, 7, 5}, {13, 4, 5, 4}, {
                    1}}, 
                    Function[{Global`x}, 
                    
                    Block[{Compile`$167, Compile`$285}, 
                    Compile`$167 = 4 Global`x; 
                    Compile`$285 = E^
                    Compile`$167; (Compile`$285 (-4 + 16 Global`x))/
                    32 + (Compile`$285 (1 - 4 Global`x + 8 Global`x^2))/8]], 
                    Evaluate][Global`x]^2))/CompiledFunction[{8, 8., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    4}}, {{-4, {2, 0, 1}}, {8, {2, 0, 4}}, {
                    0.25, {3, 0, 5}}, {16, {2, 0, 2}}, {1, {2, 0, 3}}, {
                    0.5, {3, 0, 3}}, {4, {2, 0, 0}}}, {0, 5, 10, 0, 
                    0}, {{10, 0, 1}, {16, 1, 0, 1}, {40, 34, 3, 0, 1, 3, 0, 
                    2}, {16, 3, 2, 4}, {10, 2, 6}, {16, 6, 0, 6}, {10, 1, 
                    7}, {13, 7, 6, 7}, {16, 5, 2, 7, 6}, {10, 1, 7}, {16, 7, 
                    0, 7}, {40, 56, 3, 0, 0, 3, 0, 8}, {10, 4, 9}, {16, 9, 8, 
                    9}, {10, 3, 8}, {13, 8, 7, 9, 8}, {16, 3, 2, 8, 7}, {13, 
                    4, 6, 7, 4}, {1}}, 
                    Function[{Global`x}, 
                    
                    Block[{Compile`$616, Compile`$626}, 
                    Compile`$616 = 4 Global`x; Compile`$626 = E^Compile`$616; 
                    Compile`$626/2 + (Compile`$626 (-4 + 16 Global`x))/
                    4 + (Compile`$626 (1 - 4 Global`x + 8 Global`x^2))/2]], 
                    Evaluate][Global`x], {
                    Global`x, 
                    Min[CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$] - 
                    CalculateScan`PlotterScanner`Private`\[CapitalDelta]X$/2, 
                    Max[CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$] + 
                    CalculateScan`PlotterScanner`Private`\[CapitalDelta]X$/2},
                     PlotStyle -> Directive[
                    Opacity[
                    CalculateScan`PlotterScanner`Private`evoluteOpacity$$], 
                    CalculateScan`PlotterScanner`Private`evoluteColor$$, 
                    Thickness[
                    10^CalculateScan`PlotterScanner`Private`evoluteThickness$$\
]], PlotRange -> CalculateScan`PlotterScanner`Private`pRY$, Evaluated -> 
                    False, Exclusions -> {
                    CalculateScan`PlotterScanner`Private`functionD[Global`x] == 
                    0}], {}]; If[
                    And[
                    CalculateScan`PlotterScanner`Private`involuteTF$$, 
                    CalculateScan`PlotterScanner`Private`\
involutePlotCurveLastParamaters$ =!= {{
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$}, 
                    CalculateScan`PlotterScanner`Private`involuteCount$$}], 
                    CalculateScan`PlotterScanner`Private`involutePlotCurves$ = 
                    If[CalculateScan`PlotterScanner`Private`involuteTF$$, 
                    CalculateScan`PlotterScanner`Private`singularities$ = 
                    TimeConstrained[
                    Reduce[
                    1/((E^(4 Global`x) (1 - 4 Global`x + 8 Global`x^2))/32) == 
                    0, Global`x, Reals], 1, False]; 
                    CalculateScan`PlotterScanner`Private`domainsAndCounts = If[
                    Or[
                    CalculateScan`PlotterScanner`Private`singularities$ === 
                    False, Head[
                    CalculateScan`PlotterScanner`Private`singularities$] === 
                    Reduce], {{{
                    CalculateScan`PlotterScanner`Private`xL$, 
                    CalculateScan`PlotterScanner`Private`xU$}, 
                    CalculateScan`PlotterScanner`Private`involuteCount$$}}, 
                    CalculateScan`PlotterScanner`Private`singularityPoints = 
                    Cases[
                    Chop[
                    N[
                    ReplaceAll[Global`x, {
                    ToRules[
                    CalculateScan`PlotterScanner`Private`singularities$]}]]], 
                    
                    Blank[Real]]; 
                    CalculateScan`PlotterScanner`Private`\
singularityPointsRelevant = Sort[
                    Select[
                    CalculateScan`PlotterScanner`Private`singularityPoints, 
                    CalculateScan`PlotterScanner`Private`xL$ < # < 
                    CalculateScan`PlotterScanner`Private`xU$& ], Less]; 
                    CalculateScan`PlotterScanner`Private`pureDomains = 
                    Partition[{CalculateScan`PlotterScanner`Private`xL$, 
                    Apply[
                    Sequence, 
                    CalculateScan`PlotterScanner`Private`\
singularityPointsRelevant], CalculateScan`PlotterScanner`Private`xU$}, 2, 1]; 
                    Table[CalculateScan`PlotterScanner`Private`iLength = Abs[
                    Apply[Subtract, 
                    Part[
                    CalculateScan`PlotterScanner`Private`pureDomains, 
                    CalculateScan`PlotterScanner`Private`i]]]; 
                    CalculateScan`PlotterScanner`Private`involuteCounti = 
                    Ceiling[(CalculateScan`PlotterScanner`Private`iLength 
                    CalculateScan`PlotterScanner`Private`involuteCount$$)/(
                    CalculateScan`PlotterScanner`Private`xU$ - 
                    CalculateScan`PlotterScanner`Private`xL$)]; 
                    CalculateScan`PlotterScanner`Private`iScale = 
                    CalculateScan`PlotterScanner`Private`iLength/
                    CalculateScan`PlotterScanner`Private`involuteCounti; {{
                    Part[CalculateScan`PlotterScanner`Private`pureDomains, 
                    CalculateScan`PlotterScanner`Private`i, 1] + 
                    CalculateScan`PlotterScanner`Private`iScale/4, 
                    Part[CalculateScan`PlotterScanner`Private`pureDomains, 
                    CalculateScan`PlotterScanner`Private`i, 2] - 
                    CalculateScan`PlotterScanner`Private`iScale/4}, 
                    CalculateScan`PlotterScanner`Private`involuteCounti}, {
                    CalculateScan`PlotterScanner`Private`i, 
                    Length[
                    CalculateScan`PlotterScanner`Private`pureDomains]}]]; 
                    CalculateScan`PlotterScanner`Private`iTab$ = Transpose[
                    
                    Table[{{CalculateScan`PlotterScanner`Private`xLi$, 
                    CalculateScan`PlotterScanner`Private`xUi$}, 
                    CalculateScan`PlotterScanner`Private`involuteCounti} = 
                    Part[CalculateScan`PlotterScanner`Private`\
domainsAndCounts, CalculateScan`PlotterScanner`Private`i]; 
                    CalculateScan`PlotterScanner`Private`arcLength$ = Part[
                    
                    NDSolve[{Derivative[1][
                    CalculateScan`PlotterScanner`Private`arcL$][Global`x] == 
                    Sqrt[1 + D[(E^(4 Global`x) (1 - 4 Global`x + 
                    8 Global`x^2))/32, Global`x]^2], 
                    CalculateScan`PlotterScanner`Private`arcL$[
                    CalculateScan`PlotterScanner`Private`xLi$] == 0}, 
                    CalculateScan`PlotterScanner`Private`arcL$, {
                    Global`x, CalculateScan`PlotterScanner`Private`xLi$, 
                    CalculateScan`PlotterScanner`Private`xUi$}], 1, 1, 2]; {
                    CalculateScan`PlotterScanner`Private`xi1$, 
                    CalculateScan`PlotterScanner`Private`xi2$} = 
                    Part[CalculateScan`PlotterScanner`Private`arcLength$, 1, 
                    1]; CalculateScan`PlotterScanner`Private`oCurve = 
                    ParametricPlot3D[
                    Prepend[
                    Normalize[{1, 
                    CompiledFunction[{8, 8., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    4}}, {{-4, {2, 0, 1}}, {0.03125, {3, 0, 3}}, {
                    8, {2, 0, 4}}, {0.125, {3, 0, 6}}, {16, {2, 0, 2}}, {
                    1, {2, 0, 3}}, {4, {2, 0, 0}}}, {0, 5, 9, 0, 
                    0}, {{10, 0, 1}, {16, 1, 0, 1}, {40, 34, 3, 0, 1, 3, 0, 
                    2}, {10, 2, 4}, {16, 4, 0, 4}, {10, 1, 5}, {13, 5, 4, 
                    5}, {16, 3, 2, 5, 4}, {10, 1, 5}, {16, 5, 0, 5}, {40, 56, 
                    3, 0, 0, 3, 0, 7}, {10, 4, 8}, {16, 8, 7, 8}, {10, 3, 
                    7}, {13, 7, 5, 8, 7}, {16, 6, 2, 7, 5}, {13, 4, 5, 4}, {
                    1}}, 
                    Function[{Global`x}, 
                    
                    Block[{Compile`$167, Compile`$285}, 
                    Compile`$167 = 4 Global`x; 
                    Compile`$285 = E^Compile`$167; (
                    Compile`$285 (-4 + 16 Global`x))/
                    32 + (Compile`$285 (1 - 4 Global`x + 8 Global`x^2))/8]], 
                    Evaluate][Global`x]}], Global`x], {
                    Global`x, CalculateScan`PlotterScanner`Private`xLi$, 
                    CalculateScan`PlotterScanner`Private`xUi$}, PlotRange -> 
                    All, Evaluated -> False, MaxRecursion -> 4]; 
                    CalculateScan`PlotterScanner`Private`lineSegments$ = 
                    Select[
                    Map[First, 
                    Cases[
                    Normal[CalculateScan`PlotterScanner`Private`oCurve], 
                    Blank[Line], Infinity]], Length[#] > 3& ]; 
                    CalculateScan`PlotterScanner`Private`baseSegments$ = 
                    Map[{
                    Part[#, 1], 
                    CompiledFunction[{8, 8., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    2}}, {{-4, {2, 0, 2}}, {0.03125, {3, 0, 1}}, {
                    8, {2, 0, 3}}, {1, {2, 0, 1}}, {4, {2, 0, 0}}}, {0, 4, 6, 
                    0, 0}, {{10, 0, 2}, {16, 2, 0, 2}, {40, 34, 3, 0, 2, 3, 0,
                     3}, {10, 2, 2}, {16, 2, 0, 2}, {40, 56, 3, 0, 0, 3, 0, 
                    4}, {10, 3, 5}, {16, 5, 4, 5}, {10, 1, 4}, {13, 4, 2, 5, 
                    4}, {16, 1, 3, 4, 2}, {1}}, 
                    
                    Function[{Global`x}, (
                    E^(4 Global`x) (1 - 4 Global`x + 8 Global`x^2))/32], 
                    Evaluate][
                    Part[#, 1]]}& , 
                    CalculateScan`PlotterScanner`Private`lineSegments$, {-2}]; 
                    CalculateScan`PlotterScanner`Private`oSegments$ = 
                    Map[Rest, 
                    CalculateScan`PlotterScanner`Private`lineSegments$, {-2}]; 
                    CalculateScan`PlotterScanner`Private`arcFactors$ = 
                    Map[CalculateScan`PlotterScanner`Private`arcLength$[
                    Part[#, 1]]& , 
                    CalculateScan`PlotterScanner`Private`lineSegments$, {-2}]; 
                    CalculateScan`PlotterScanner`Private`iTabRight$ = If[True, 
                    Table[
                    CalculateScan`PlotterScanner`Private`x0 = 
                    CalculateScan`PlotterScanner`Private`xi1$ + (
                    CalculateScan`PlotterScanner`Private`jk (
                    CalculateScan`PlotterScanner`Private`xi2$ - 
                    CalculateScan`PlotterScanner`Private`xi1$))/(
                    CalculateScan`PlotterScanner`Private`involuteCounti + 1); 
                    CalculateScan`PlotterScanner`Private`signedArcFactors$ = 
                    Map[Map[Max[#, 0]& , #]& , 
                    CalculateScan`PlotterScanner`Private`arcFactors$ - 
                    CalculateScan`PlotterScanner`Private`arcLength$[
                    CalculateScan`PlotterScanner`Private`x0]]; 
                    CalculateScan`PlotterScanner`Private`curvePoints$ = 
                    CalculateScan`PlotterScanner`Private`baseSegments$ + 
                    CalculateScan`PlotterScanner`Private`signedArcFactors$ 
                    CalculateScan`PlotterScanner`Private`oSegments$; If[
                    MemberQ[CalculateScan`PlotterScanner`Private`curvePoints$, 
                    Blank[Complex], {0, Infinity}], {}, 
                    Map[BSplineCurve, 
                    CalculateScan`PlotterScanner`Private`curvePoints$]], {
                    CalculateScan`PlotterScanner`Private`jk, 1, 
                    CalculateScan`PlotterScanner`Private`involuteCounti}], \
{}]; CalculateScan`PlotterScanner`Private`iTabLeft$ = If[True, 
                    Table[
                    CalculateScan`PlotterScanner`Private`x0 = 
                    CalculateScan`PlotterScanner`Private`xi2$ + (
                    CalculateScan`PlotterScanner`Private`jk (
                    CalculateScan`PlotterScanner`Private`xi1$ - 
                    CalculateScan`PlotterScanner`Private`xi2$))/(
                    CalculateScan`PlotterScanner`Private`involuteCounti + 1); 
                    CalculateScan`PlotterScanner`Private`signedArcFactors$ = 
                    Map[Map[Min[#, 0]& , #]& , 
                    CalculateScan`PlotterScanner`Private`arcFactors$ - (
                    CalculateScan`PlotterScanner`Private`arcLength$[
                    CalculateScan`PlotterScanner`Private`xi2$] - 
                    CalculateScan`PlotterScanner`Private`arcLength$[
                    CalculateScan`PlotterScanner`Private`x0])]; 
                    CalculateScan`PlotterScanner`Private`curvePoints$ = 
                    CalculateScan`PlotterScanner`Private`baseSegments$ + 
                    CalculateScan`PlotterScanner`Private`signedArcFactors$ 
                    CalculateScan`PlotterScanner`Private`oSegments$; If[
                    MemberQ[CalculateScan`PlotterScanner`Private`curvePoints$, 
                    Blank[Complex], {0, Infinity}], {}, 
                    Map[
                    BSplineCurve, 
                    CalculateScan`PlotterScanner`Private`curvePoints$]], {
                    CalculateScan`PlotterScanner`Private`jk, 1, 
                    CalculateScan`PlotterScanner`Private`involuteCounti}], \
{}]; {CalculateScan`PlotterScanner`Private`iTabRight$, 
                    CalculateScan`PlotterScanner`Private`iTabLeft$}, {
                    CalculateScan`PlotterScanner`Private`i, 
                    Length[
                    CalculateScan`PlotterScanner`Private`domainsAndCounts]}]]; 
                    CalculateScan`PlotterScanner`Private`iTab$, {}]; 
                    CalculateScan`PlotterScanner`Private`\
involutePlotCurveLastParamaters$ = {{
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$}, 
                    CalculateScan`PlotterScanner`Private`involuteCount$$}; 
                    Null]; 
                    CalculateScan`PlotterScanner`Private`involutePlot$ = 
                    Graphics[{
                    Directive[
                    CalculateScan`PlotterScanner`Private`involuteColor$$, 
                    Opacity[
                    CalculateScan`PlotterScanner`Private`involuteOpacity$$], 
                    Thickness[
                    10^CalculateScan`PlotterScanner`Private`involuteThickness$\
$]], 
                    If[
                    And[
                    CalculateScan`PlotterScanner`Private`involuteTF$$, 
                    CalculateScan`PlotterScanner`Private`involutesRightTF$$], 
                    
                    Part[
                    CalculateScan`PlotterScanner`Private`involutePlotCurves$, 
                    1], {}], 
                    If[
                    And[
                    CalculateScan`PlotterScanner`Private`involuteTF$$, 
                    CalculateScan`PlotterScanner`Private`involutesLeftTF$$], 
                    Part[
                    CalculateScan`PlotterScanner`Private`involutePlotCurves$, 
                    2], {}]}]; If[
                    And[
                    CalculateScan`PlotterScanner`Private`offsetCurveTF$$, 
                    CalculateScan`PlotterScanner`Private`\
offsetCurveLastParamaters$$ =!= {{
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$}, 
                    CalculateScan`PlotterScanner`Private`offsetCurveCount$$}],
                     CalculateScan`PlotterScanner`Private`\
offsetCurvePlotCurves$$ = 
                    If[CalculateScan`PlotterScanner`Private`offsetCurveTF$$, 
                    
                    With[{CalculateScan`PlotterScanner`Private`maxDist$ = 
                    Function[{CalculateScan`PlotterScanner`Private`y, 
                    CalculateScan`PlotterScanner`Private`L}, (
                    Sign[CalculateScan`PlotterScanner`Private`y] 
                    CalculateScan`PlotterScanner`Private`L) Tan[
                    Abs[CalculateScan`PlotterScanner`Private`y]]^1][
                    CalculateScan`PlotterScanner`Private`offsetCurveDistance$$\
, 2.25]}, CalculateScan`PlotterScanner`Private`oCurve = ParametricPlot3D[
                    Prepend[
                    Normalize[{-CompiledFunction[{8, 8., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    4}}, {{-4, {2, 0, 1}}, {0.03125, {3, 0, 3}}, {
                    8, {2, 0, 4}}, {0.125, {3, 0, 6}}, {16, {2, 0, 2}}, {
                    1, {2, 0, 3}}, {4, {2, 0, 0}}}, {0, 5, 9, 0, 
                    0}, {{10, 0, 1}, {16, 1, 0, 1}, {40, 34, 3, 0, 1, 3, 0, 
                    2}, {10, 2, 4}, {16, 4, 0, 4}, {10, 1, 5}, {13, 5, 4, 
                    5}, {16, 3, 2, 5, 4}, {10, 1, 5}, {16, 5, 0, 5}, {40, 56, 
                    3, 0, 0, 3, 0, 7}, {10, 4, 8}, {16, 8, 7, 8}, {10, 3, 
                    7}, {13, 7, 5, 8, 7}, {16, 6, 2, 7, 5}, {13, 4, 5, 4}, {
                    1}}, 
                    Function[{Global`x}, 
                    
                    Block[{Compile`$167, Compile`$285}, 
                    Compile`$167 = 4 Global`x; 
                    Compile`$285 = E^Compile`$167; (
                    Compile`$285 (-4 + 16 Global`x))/
                    32 + (Compile`$285 (1 - 4 Global`x + 8 Global`x^2))/8]], 
                    Evaluate][Global`x], 1}], Global`x], {
                    Global`x, Min[
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$] - 
                    CalculateScan`PlotterScanner`Private`\[CapitalDelta]X$/2, 
                    Max[CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$] + 
                    CalculateScan`PlotterScanner`Private`\[CapitalDelta]X$/2},
                     PlotRange -> All, Evaluated -> False, MaxRecursion -> 5]; 
                    CalculateScan`PlotterScanner`Private`lineSegments$ = 
                    Select[
                    Map[First, 
                    Cases[
                    Normal[CalculateScan`PlotterScanner`Private`oCurve], 
                    Blank[Line], Infinity]], Length[#] > 3& ]; 
                    CalculateScan`PlotterScanner`Private`baseSegments$ = 
                    Map[{
                    Part[#, 1], 
                    CompiledFunction[{8, 8., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    2}}, {{-4, {2, 0, 2}}, {0.03125, {3, 0, 1}}, {
                    8, {2, 0, 3}}, {1, {2, 0, 1}}, {4, {2, 0, 0}}}, {0, 4, 6, 
                    0, 0}, {{10, 0, 2}, {16, 2, 0, 2}, {40, 34, 3, 0, 2, 3, 0,
                     3}, {10, 2, 2}, {16, 2, 0, 2}, {40, 56, 3, 0, 0, 3, 0, 
                    4}, {10, 3, 5}, {16, 5, 4, 5}, {10, 1, 4}, {13, 4, 2, 5, 
                    4}, {16, 1, 3, 4, 2}, {1}}, 
                    Function[{Global`x}, (
                    E^(4 Global`x) (1 - 4 Global`x + 8 Global`x^2))/32], 
                    Evaluate][
                    Part[#, 1]]}& , 
                    CalculateScan`PlotterScanner`Private`lineSegments$, {-2}]; 
                    CalculateScan`PlotterScanner`Private`oSegments$ = 
                    Map[Rest, 
                    CalculateScan`PlotterScanner`Private`lineSegments$, {-2}]; 
                    Table[{
                    Map[
                    BSplineCurve, 
                    CalculateScan`PlotterScanner`Private`baseSegments$ + ((
                    CalculateScan`PlotterScanner`Private`j 
                    CalculateScan`PlotterScanner`Private`maxDist$) 
                    CalculateScan`PlotterScanner`Private`oSegments$)/
                    CalculateScan`PlotterScanner`Private`offsetCurveCount$$], 
                    
                    Map[
                    BSplineCurve, 
                    CalculateScan`PlotterScanner`Private`baseSegments$ - ((
                    CalculateScan`PlotterScanner`Private`j 
                    CalculateScan`PlotterScanner`Private`maxDist$) 
                    CalculateScan`PlotterScanner`Private`oSegments$)/
                    CalculateScan`PlotterScanner`Private`offsetCurveCount$$]},\
 {CalculateScan`PlotterScanner`Private`j, 
                    CalculateScan`PlotterScanner`Private`offsetCurveCount$$}]]\
, {}]; CalculateScan`PlotterScanner`Private`offsetCurveLastParamaters$$ =!= {{
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$}, 
                    CalculateScan`PlotterScanner`Private`offsetCurveCount$$}]; 
                    CalculateScan`PlotterScanner`Private`offsetCurvePlot = 
                    Graphics[{
                    Directive[
                    CalculateScan`PlotterScanner`Private`offsetCurveColor$$, 
                    Opacity[
                    CalculateScan`PlotterScanner`Private`offsetCurveOpacity$$]\
, 
                    Thickness[
                    10^CalculateScan`PlotterScanner`Private`\
offsetCurveThickness$$]], 
                    If[
                    CalculateScan`PlotterScanner`Private`offsetCurveTF$$, 
                    CalculateScan`PlotterScanner`Private`\
offsetCurvePlotCurves$$, {}]}]; If[
                    And[
                    CalculateScan`PlotterScanner`Private`tiltedOffsetCurveTF$$\
, CalculateScan`PlotterScanner`Private`tiltedOffsetCurveLastParamaters$$ =!= \
{{CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$}, 
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveCount$$, 
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveAngle$$}], 
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurvePlotCurves$$ = 
                    If[CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveTF$$, 
                    
                    With[{CalculateScan`PlotterScanner`Private`maxDist$ = 
                    Function[{CalculateScan`PlotterScanner`Private`y, 
                    CalculateScan`PlotterScanner`Private`L}, (
                    Sign[CalculateScan`PlotterScanner`Private`y] 
                    CalculateScan`PlotterScanner`Private`L) Tan[
                    Abs[CalculateScan`PlotterScanner`Private`y]]^1][
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveDistance$$, 2.25], 
                    CalculateScan`PlotterScanner`Private`M$ = {{
                    Cos[
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveAngle$$], 
                    Sin[
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveAngle$$]}, {-Sin[
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveAngle$$], 
                    Cos[
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveAngle$$]}}}, 
                    CalculateScan`PlotterScanner`Private`oCurve = 
                    ParametricPlot3D[
                    Prepend[
                    Dot[CalculateScan`PlotterScanner`Private`M$, 
                    Normalize[{-CompiledFunction[{8, 8., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    4}}, {{-4, {2, 0, 1}}, {0.03125, {3, 0, 3}}, {
                    8, {2, 0, 4}}, {0.125, {3, 0, 6}}, {16, {2, 0, 2}}, {
                    1, {2, 0, 3}}, {4, {2, 0, 0}}}, {0, 5, 9, 0, 
                    0}, {{10, 0, 1}, {16, 1, 0, 1}, {40, 34, 3, 0, 1, 3, 0, 
                    2}, {10, 2, 4}, {16, 4, 0, 4}, {10, 1, 5}, {13, 5, 4, 
                    5}, {16, 3, 2, 5, 4}, {10, 1, 5}, {16, 5, 0, 5}, {40, 56, 
                    3, 0, 0, 3, 0, 7}, {10, 4, 8}, {16, 8, 7, 8}, {10, 3, 
                    7}, {13, 7, 5, 8, 7}, {16, 6, 2, 7, 5}, {13, 4, 5, 4}, {
                    1}}, 
                    Function[{Global`x}, 
                    Block[{Compile`$167, Compile`$285}, 
                    Compile`$167 = 4 Global`x; 
                    Compile`$285 = E^Compile`$167; (
                    Compile`$285 (-4 + 16 Global`x))/
                    32 + (Compile`$285 (1 - 4 Global`x + 8 Global`x^2))/8]], 
                    Evaluate][Global`x], 1}]], Global`x], {
                    Global`x, Min[
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$] - 
                    CalculateScan`PlotterScanner`Private`\[CapitalDelta]X$/2, 
                    Max[CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$] + 
                    CalculateScan`PlotterScanner`Private`\[CapitalDelta]X$/2},
                     PlotRange -> All, Evaluated -> False, MaxRecursion -> 5]; 
                    CalculateScan`PlotterScanner`Private`lineSegments$ = 
                    Select[
                    Map[First, 
                    Cases[
                    Normal[CalculateScan`PlotterScanner`Private`oCurve], 
                    Blank[Line], Infinity]], Length[#] > 3& ]; 
                    CalculateScan`PlotterScanner`Private`baseSegments$ = 
                    Map[{
                    Part[#, 1], 
                    CompiledFunction[{8, 8., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    2}}, {{-4, {2, 0, 2}}, {0.03125, {3, 0, 1}}, {
                    8, {2, 0, 3}}, {1, {2, 0, 1}}, {4, {2, 0, 0}}}, {0, 4, 6, 
                    0, 0}, {{10, 0, 2}, {16, 2, 0, 2}, {40, 34, 3, 0, 2, 3, 0,
                     3}, {10, 2, 2}, {16, 2, 0, 2}, {40, 56, 3, 0, 0, 3, 0, 
                    4}, {10, 3, 5}, {16, 5, 4, 5}, {10, 1, 4}, {13, 4, 2, 5, 
                    4}, {16, 1, 3, 4, 2}, {1}}, 
                    
                    Function[{Global`x}, (
                    E^(4 Global`x) (1 - 4 Global`x + 8 Global`x^2))/32], 
                    Evaluate][
                    Part[#, 1]]}& , 
                    CalculateScan`PlotterScanner`Private`lineSegments$, {-2}]; 
                    CalculateScan`PlotterScanner`Private`oSegments$ = 
                    Map[Rest, 
                    CalculateScan`PlotterScanner`Private`lineSegments$, {-2}]; 
                    Table[{
                    Map[
                    BSplineCurve, 
                    CalculateScan`PlotterScanner`Private`baseSegments$ + ((
                    CalculateScan`PlotterScanner`Private`j 
                    CalculateScan`PlotterScanner`Private`maxDist$) 
                    CalculateScan`PlotterScanner`Private`oSegments$)/
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveCount$$], 
                    Map[
                    BSplineCurve, 
                    CalculateScan`PlotterScanner`Private`baseSegments$ - ((
                    CalculateScan`PlotterScanner`Private`j 
                    CalculateScan`PlotterScanner`Private`maxDist$) 
                    CalculateScan`PlotterScanner`Private`oSegments$)/
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveCount$$]}, {
                    CalculateScan`PlotterScanner`Private`j, 
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveCount$$}]], {}]; 
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveLastParamaters$$ =!= {{
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$}, 
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveCount$$, 
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveAngle$$}]; 
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurvePlot = Graphics[{
                    Directive[
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveColor$$, 
                    Opacity[
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveOpacity$$], 
                    Thickness[
                    10^CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveThickness$$]], 
                    If[
                    CalculateScan`PlotterScanner`Private`tiltedOffsetCurveTF$$\
, CalculateScan`PlotterScanner`Private`tiltedOffsetCurvePlotCurves$$, {}]}]; 
                    If[
                    And[
                    CalculateScan`PlotterScanner`Private`pedalCurveTF$$, 
                    CalculateScan`PlotterScanner`Private`\
pedalCurveLastParamaters$$ =!= {{
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$}, 
                    CalculateScan`PlotterScanner`Private`\
pedalCurveCountFactor$$, 
                    CalculateScan`PlotterScanner`Private`\
pedalCurveCountFactor$$}], 
                    CalculateScan`PlotterScanner`Private`pedalCurvePlotCurves$\
$ = If[CalculateScan`PlotterScanner`Private`pedalCurveTF$$, 
                    
                    With[{CalculateScan`PlotterScanner`Private`\
pedalCurveCount$ = If[CalculateScan`PlotterScanner`Private`pedalCurvePoints$$ === 
                    "grid", 
                    Max[1, 
                    Round[
                    16 CalculateScan`PlotterScanner`Private`\
pedalCurveCountFactor$$]], 
                    Max[1, 
                    Round[
                    120 CalculateScan`PlotterScanner`Private`\
pedalCurveCountFactor$$]]]}, 
                    (Cases[
                    Normal[#], 
                    Blank[Line], {0, Infinity}]& )[
                    If[
                    CalculateScan`PlotterScanner`Private`pedalCurvePoints$$ === 
                    "grid", 
                    Table[
                    
                    With[{CalculateScan`PlotterScanner`Private`px$ = 
                    CalculateScan`PlotterScanner`Private`px, 
                    CalculateScan`PlotterScanner`Private`py$ = 
                    CalculateScan`PlotterScanner`Private`py}, 
                    ParametricPlot[{Global`x, 
                    CompiledFunction[{8, 8., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    2}}, {{-4, {2, 0, 2}}, {0.03125, {3, 0, 1}}, {
                    8, {2, 0, 3}}, {1, {2, 0, 1}}, {4, {2, 0, 0}}}, {0, 4, 6, 
                    0, 0}, {{10, 0, 2}, {16, 2, 0, 2}, {40, 34, 3, 0, 2, 3, 0,
                     3}, {10, 2, 2}, {16, 2, 0, 2}, {40, 56, 3, 0, 0, 3, 0, 
                    4}, {10, 3, 5}, {16, 5, 4, 5}, {10, 1, 4}, {13, 4, 2, 5, 
                    4}, {16, 1, 3, 4, 2}, {1}}, 
                    
                    Function[{Global`x}, (
                    E^(4 Global`x) (1 - 4 Global`x + 8 Global`x^2))/32], 
                    Evaluate][Global`x]} + ((
                    1 (CalculateScan`PlotterScanner`Private`px$ - Global`x) + 
                    CompiledFunction[{8, 8., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    4}}, {{-4, {2, 0, 1}}, {0.03125, {3, 0, 3}}, {
                    8, {2, 0, 4}}, {0.125, {3, 0, 6}}, {16, {2, 0, 2}}, {
                    1, {2, 0, 3}}, {4, {2, 0, 0}}}, {0, 5, 9, 0, 
                    0}, {{10, 0, 1}, {16, 1, 0, 1}, {40, 34, 3, 0, 1, 3, 0, 
                    2}, {10, 2, 4}, {16, 4, 0, 4}, {10, 1, 5}, {13, 5, 4, 
                    5}, {16, 3, 2, 5, 4}, {10, 1, 5}, {16, 5, 0, 5}, {40, 56, 
                    3, 0, 0, 3, 0, 7}, {10, 4, 8}, {16, 8, 7, 8}, {10, 3, 
                    7}, {13, 7, 5, 8, 7}, {16, 6, 2, 7, 5}, {13, 4, 5, 4}, {
                    1}}, 
                    Function[{Global`x}, 
                    
                    Block[{Compile`$167, Compile`$285}, 
                    Compile`$167 = 4 Global`x; 
                    Compile`$285 = E^Compile`$167; (
                    Compile`$285 (-4 + 16 Global`x))/
                    32 + (Compile`$285 (1 - 4 Global`x + 8 Global`x^2))/8]], 
                    Evaluate][Global`x] (
                    CalculateScan`PlotterScanner`Private`py$ - 
                    CompiledFunction[{8, 8., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    2}}, {{-4, {2, 0, 2}}, {0.03125, {3, 0, 1}}, {
                    8, {2, 0, 3}}, {1, {2, 0, 1}}, {4, {2, 0, 0}}}, {0, 4, 6, 
                    0, 0}, {{10, 0, 2}, {16, 2, 0, 2}, {40, 34, 3, 0, 2, 3, 0,
                     3}, {10, 2, 2}, {16, 2, 0, 2}, {40, 56, 3, 0, 0, 3, 0, 
                    4}, {10, 3, 5}, {16, 5, 4, 5}, {10, 1, 4}, {13, 4, 2, 5, 
                    4}, {16, 1, 3, 4, 2}, {1}}, 
                    
                    Function[{Global`x}, (
                    E^(4 Global`x) (1 - 4 Global`x + 8 Global`x^2))/32], 
                    Evaluate][Global`x])) {1, 
                    CompiledFunction[{8, 8., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    2}}, {{-4, {2, 0, 2}}, {0.03125, {3, 0, 1}}, {
                    8, {2, 0, 3}}, {1, {2, 0, 1}}, {4, {2, 0, 0}}}, {0, 4, 6, 
                    0, 0}, {{10, 0, 2}, {16, 2, 0, 2}, {40, 34, 3, 0, 2, 3, 0,
                     3}, {10, 2, 2}, {16, 2, 0, 2}, {40, 56, 3, 0, 0, 3, 0, 
                    4}, {10, 3, 5}, {16, 5, 4, 5}, {10, 1, 4}, {13, 4, 2, 5, 
                    4}, {16, 1, 3, 4, 2}, {1}}, 
                    
                    Function[{Global`x}, (
                    E^(4 Global`x) (1 - 4 Global`x + 8 Global`x^2))/32], 
                    Evaluate][Global`x]})/(1 + 
                    CompiledFunction[{8, 8., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    4}}, {{-4, {2, 0, 1}}, {0.03125, {3, 0, 3}}, {
                    8, {2, 0, 4}}, {0.125, {3, 0, 6}}, {16, {2, 0, 2}}, {
                    1, {2, 0, 3}}, {4, {2, 0, 0}}}, {0, 5, 9, 0, 
                    0}, {{10, 0, 1}, {16, 1, 0, 1}, {40, 34, 3, 0, 1, 3, 0, 
                    2}, {10, 2, 4}, {16, 4, 0, 4}, {10, 1, 5}, {13, 5, 4, 
                    5}, {16, 3, 2, 5, 4}, {10, 1, 5}, {16, 5, 0, 5}, {40, 56, 
                    3, 0, 0, 3, 0, 7}, {10, 4, 8}, {16, 8, 7, 8}, {10, 3, 
                    7}, {13, 7, 5, 8, 7}, {16, 6, 2, 7, 5}, {13, 4, 5, 4}, {
                    1}}, 
                    Function[{Global`x}, 
                    
                    Block[{Compile`$167, Compile`$285}, 
                    Compile`$167 = 4 Global`x; 
                    Compile`$285 = E^Compile`$167; (
                    Compile`$285 (-4 + 16 Global`x))/
                    32 + (Compile`$285 (1 - 4 Global`x + 8 Global`x^2))/8]], 
                    Evaluate][Global`x]^2), {
                    Global`x, CalculateScan`PlotterScanner`Private`xL$, 
                    CalculateScan`PlotterScanner`Private`xU$}, 
                    PlotRange -> {
                    CalculateScan`PlotterScanner`Private`pRX$, 
                    CalculateScan`PlotterScanner`Private`pRY$}, Evaluated -> 
                    False]], {CalculateScan`PlotterScanner`Private`px, 
                    CalculateScan`PlotterScanner`Private`xL$, 
                    CalculateScan`PlotterScanner`Private`xU$, (
                    CalculateScan`PlotterScanner`Private`xU$ - 
                    CalculateScan`PlotterScanner`Private`xL$)/
                    CalculateScan`PlotterScanner`Private`pedalCurveCount$}, {
                    CalculateScan`PlotterScanner`Private`py, 
                    CalculateScan`PlotterScanner`Private`yL$, 
                    CalculateScan`PlotterScanner`Private`yU$, (
                    CalculateScan`PlotterScanner`Private`yU$ - 
                    CalculateScan`PlotterScanner`Private`yL$)/
                    CalculateScan`PlotterScanner`Private`pedalCurveCount$}], 
                    Table[
                    
                    With[{CalculateScan`PlotterScanner`Private`px$ = 
                    CalculateScan`PlotterScanner`Private`px, 
                    CalculateScan`PlotterScanner`Private`py$ = 
                    CompiledFunction[{8, 8., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    2}}, {{-4, {2, 0, 2}}, {0.03125, {3, 0, 1}}, {
                    8, {2, 0, 3}}, {1, {2, 0, 1}}, {4, {2, 0, 0}}}, {0, 4, 6, 
                    0, 0}, {{10, 0, 2}, {16, 2, 0, 2}, {40, 34, 3, 0, 2, 3, 0,
                     3}, {10, 2, 2}, {16, 2, 0, 2}, {40, 56, 3, 0, 0, 3, 0, 
                    4}, {10, 3, 5}, {16, 5, 4, 5}, {10, 1, 4}, {13, 4, 2, 5, 
                    4}, {16, 1, 3, 4, 2}, {1}}, 
                    
                    Function[{Global`x}, (
                    E^(4 Global`x) (1 - 4 Global`x + 8 Global`x^2))/32], 
                    Evaluate][CalculateScan`PlotterScanner`Private`px]}, 
                    ParametricPlot[{Global`x, 
                    CompiledFunction[{8, 8., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    2}}, {{-4, {2, 0, 2}}, {0.03125, {3, 0, 1}}, {
                    8, {2, 0, 3}}, {1, {2, 0, 1}}, {4, {2, 0, 0}}}, {0, 4, 6, 
                    0, 0}, {{10, 0, 2}, {16, 2, 0, 2}, {40, 34, 3, 0, 2, 3, 0,
                     3}, {10, 2, 2}, {16, 2, 0, 2}, {40, 56, 3, 0, 0, 3, 0, 
                    4}, {10, 3, 5}, {16, 5, 4, 5}, {10, 1, 4}, {13, 4, 2, 5, 
                    4}, {16, 1, 3, 4, 2}, {1}}, 
                    
                    Function[{Global`x}, (
                    E^(4 Global`x) (1 - 4 Global`x + 8 Global`x^2))/32], 
                    Evaluate][Global`x]} + ((
                    1 (CalculateScan`PlotterScanner`Private`px$ - Global`x) + 
                    CompiledFunction[{8, 8., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    4}}, {{-4, {2, 0, 1}}, {0.03125, {3, 0, 3}}, {
                    8, {2, 0, 4}}, {0.125, {3, 0, 6}}, {16, {2, 0, 2}}, {
                    1, {2, 0, 3}}, {4, {2, 0, 0}}}, {0, 5, 9, 0, 
                    0}, {{10, 0, 1}, {16, 1, 0, 1}, {40, 34, 3, 0, 1, 3, 0, 
                    2}, {10, 2, 4}, {16, 4, 0, 4}, {10, 1, 5}, {13, 5, 4, 
                    5}, {16, 3, 2, 5, 4}, {10, 1, 5}, {16, 5, 0, 5}, {40, 56, 
                    3, 0, 0, 3, 0, 7}, {10, 4, 8}, {16, 8, 7, 8}, {10, 3, 
                    7}, {13, 7, 5, 8, 7}, {16, 6, 2, 7, 5}, {13, 4, 5, 4}, {
                    1}}, 
                    Function[{Global`x}, 
                    
                    Block[{Compile`$167, Compile`$285}, 
                    Compile`$167 = 4 Global`x; 
                    Compile`$285 = E^Compile`$167; (
                    Compile`$285 (-4 + 16 Global`x))/
                    32 + (Compile`$285 (1 - 4 Global`x + 8 Global`x^2))/8]], 
                    Evaluate][Global`x] (
                    CalculateScan`PlotterScanner`Private`py$ - 
                    CompiledFunction[{8, 8., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    2}}, {{-4, {2, 0, 2}}, {0.03125, {3, 0, 1}}, {
                    8, {2, 0, 3}}, {1, {2, 0, 1}}, {4, {2, 0, 0}}}, {0, 4, 6, 
                    0, 0}, {{10, 0, 2}, {16, 2, 0, 2}, {40, 34, 3, 0, 2, 3, 0,
                     3}, {10, 2, 2}, {16, 2, 0, 2}, {40, 56, 3, 0, 0, 3, 0, 
                    4}, {10, 3, 5}, {16, 5, 4, 5}, {10, 1, 4}, {13, 4, 2, 5, 
                    4}, {16, 1, 3, 4, 2}, {1}}, 
                    
                    Function[{Global`x}, (
                    E^(4 Global`x) (1 - 4 Global`x + 8 Global`x^2))/32], 
                    Evaluate][Global`x])) {1, 
                    CompiledFunction[{8, 8., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    2}}, {{-4, {2, 0, 2}}, {0.03125, {3, 0, 1}}, {
                    8, {2, 0, 3}}, {1, {2, 0, 1}}, {4, {2, 0, 0}}}, {0, 4, 6, 
                    0, 0}, {{10, 0, 2}, {16, 2, 0, 2}, {40, 34, 3, 0, 2, 3, 0,
                     3}, {10, 2, 2}, {16, 2, 0, 2}, {40, 56, 3, 0, 0, 3, 0, 
                    4}, {10, 3, 5}, {16, 5, 4, 5}, {10, 1, 4}, {13, 4, 2, 5, 
                    4}, {16, 1, 3, 4, 2}, {1}}, 
                    
                    Function[{Global`x}, (
                    E^(4 Global`x) (1 - 4 Global`x + 8 Global`x^2))/32], 
                    Evaluate][Global`x]})/(1 + 
                    CompiledFunction[{8, 8., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    4}}, {{-4, {2, 0, 1}}, {0.03125, {3, 0, 3}}, {
                    8, {2, 0, 4}}, {0.125, {3, 0, 6}}, {16, {2, 0, 2}}, {
                    1, {2, 0, 3}}, {4, {2, 0, 0}}}, {0, 5, 9, 0, 
                    0}, {{10, 0, 1}, {16, 1, 0, 1}, {40, 34, 3, 0, 1, 3, 0, 
                    2}, {10, 2, 4}, {16, 4, 0, 4}, {10, 1, 5}, {13, 5, 4, 
                    5}, {16, 3, 2, 5, 4}, {10, 1, 5}, {16, 5, 0, 5}, {40, 56, 
                    3, 0, 0, 3, 0, 7}, {10, 4, 8}, {16, 8, 7, 8}, {10, 3, 
                    7}, {13, 7, 5, 8, 7}, {16, 6, 2, 7, 5}, {13, 4, 5, 4}, {
                    1}}, 
                    Function[{Global`x}, 
                    
                    Block[{Compile`$167, Compile`$285}, 
                    Compile`$167 = 4 Global`x; 
                    Compile`$285 = E^Compile`$167; (
                    Compile`$285 (-4 + 16 Global`x))/
                    32 + (Compile`$285 (1 - 4 Global`x + 8 Global`x^2))/8]], 
                    Evaluate][Global`x]^2), {
                    Global`x, CalculateScan`PlotterScanner`Private`xL$, 
                    CalculateScan`PlotterScanner`Private`xU$}, 
                    PlotRange -> {
                    CalculateScan`PlotterScanner`Private`pRX$, 
                    CalculateScan`PlotterScanner`Private`pRY$}, Evaluated -> 
                    False]], {CalculateScan`PlotterScanner`Private`px, 
                    CalculateScan`PlotterScanner`Private`xL$, 
                    CalculateScan`PlotterScanner`Private`xU$, (
                    CalculateScan`PlotterScanner`Private`xU$ - 
                    CalculateScan`PlotterScanner`Private`xL$)/
                    CalculateScan`PlotterScanner`Private`pedalCurveCount$}]]]]\
, {}]; CalculateScan`PlotterScanner`Private`pedalCurveLastParamaters$$ =!= {{
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$}, 
                    CalculateScan`PlotterScanner`Private`\
pedalCurveCountFactor$$, 
                    CalculateScan`PlotterScanner`Private`pedalCurvePoints$$}]; 
                    CalculateScan`PlotterScanner`Private`pedalCurvePlot = 
                    Graphics[{
                    Directive[
                    CalculateScan`PlotterScanner`Private`pedalCurveColor$$, 
                    Opacity[
                    CalculateScan`PlotterScanner`Private`pedalCurveOpacity$$], 
                    Thickness[
                    10^CalculateScan`PlotterScanner`Private`\
pedalCurveThickness$$]], 
                    If[
                    CalculateScan`PlotterScanner`Private`pedalCurveTF$$, 
                    CalculateScan`PlotterScanner`Private`pedalCurvePlotCurves$\
$, {}]}]; If[
                    And[
                    CalculateScan`PlotterScanner`Private`negativePedalCurveTF$\
$, CalculateScan`PlotterScanner`Private`negativePedalCurveLastParamaters$$ =!= \
{{CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$}, 
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurveCountFactor$$, 
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurvePoints$$}], 
                    If[CalculateScan`PlotterScanner`Private`\
negativePedalCurveTF$$, 
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurvePlotCurves$$ = 
                    With[{CalculateScan`PlotterScanner`Private`\
negativePedalCurveCount$ = If[
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurvePoints$$ === "grid", 
                    Max[1, 
                    Round[
                    16 CalculateScan`PlotterScanner`Private`\
negativePedalCurveCountFactor$$]], 
                    Max[1, 
                    Round[
                    120 CalculateScan`PlotterScanner`Private`\
negativePedalCurveCountFactor$$]]]}, 
                    (Cases[
                    Normal[#], 
                    Blank[Line], {0, Infinity}]& )[
                    If[
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurvePoints$$ === "grid", 
                    Table[
                    
                    With[{CalculateScan`PlotterScanner`Private`px$ = 
                    CalculateScan`PlotterScanner`Private`px, 
                    CalculateScan`PlotterScanner`Private`py$ = 
                    CalculateScan`PlotterScanner`Private`py}, 
                    
                    ParametricPlot[{-((
                    CalculateScan`PlotterScanner`Private`px$ - 2 Global`x) (
                    CalculateScan`PlotterScanner`Private`py$ - 
                    CompiledFunction[{8, 8., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    2}}, {{-4, {2, 0, 2}}, {0.03125, {3, 0, 1}}, {
                    8, {2, 0, 3}}, {1, {2, 0, 1}}, {4, {2, 0, 0}}}, {0, 4, 6, 
                    0, 0}, {{10, 0, 2}, {16, 2, 0, 2}, {40, 34, 3, 0, 2, 3, 0,
                     3}, {10, 2, 2}, {16, 2, 0, 2}, {40, 56, 3, 0, 0, 3, 0, 
                    4}, {10, 3, 5}, {16, 5, 4, 5}, {10, 1, 4}, {13, 4, 2, 5, 
                    4}, {16, 1, 3, 4, 2}, {1}}, 
                    
                    Function[{Global`x}, (
                    E^(4 Global`x) (1 - 4 Global`x + 8 Global`x^2))/32], 
                    Evaluate][Global`x])) - ((
                    CalculateScan`PlotterScanner`Private`px$ - Global`x) 
                    Global`x + (CalculateScan`PlotterScanner`Private`py$ - 
                    CompiledFunction[{8, 8., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    2}}, {{-4, {2, 0, 2}}, {0.03125, {3, 0, 1}}, {
                    8, {2, 0, 3}}, {1, {2, 0, 1}}, {4, {2, 0, 0}}}, {0, 4, 6, 
                    0, 0}, {{10, 0, 2}, {16, 2, 0, 2}, {40, 34, 3, 0, 2, 3, 0,
                     3}, {10, 2, 2}, {16, 2, 0, 2}, {40, 56, 3, 0, 0, 3, 0, 
                    4}, {10, 3, 5}, {16, 5, 4, 5}, {10, 1, 4}, {13, 4, 2, 5, 
                    4}, {16, 1, 3, 4, 2}, {1}}, 
                    
                    Function[{Global`x}, (
                    E^(4 Global`x) (1 - 4 Global`x + 8 Global`x^2))/32], 
                    Evaluate][Global`x])^2) CompiledFunction[{8, 8., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    4}}, {{-4, {2, 0, 1}}, {0.03125, {3, 0, 3}}, {
                    8, {2, 0, 4}}, {0.125, {3, 0, 6}}, {16, {2, 0, 2}}, {
                    1, {2, 0, 3}}, {4, {2, 0, 0}}}, {0, 5, 9, 0, 
                    0}, {{10, 0, 1}, {16, 1, 0, 1}, {40, 34, 3, 0, 1, 3, 0, 
                    2}, {10, 2, 4}, {16, 4, 0, 4}, {10, 1, 5}, {13, 5, 4, 
                    5}, {16, 3, 2, 5, 4}, {10, 1, 5}, {16, 5, 0, 5}, {40, 56, 
                    3, 0, 0, 3, 0, 7}, {10, 4, 8}, {16, 8, 7, 8}, {10, 3, 
                    7}, {13, 7, 5, 8, 7}, {16, 6, 2, 7, 5}, {13, 4, 5, 4}, {
                    1}}, 
                    Function[{Global`x}, 
                    
                    Block[{Compile`$167, Compile`$285}, 
                    Compile`$167 = 4 Global`x; 
                    Compile`$285 = E^Compile`$167; (
                    Compile`$285 (-4 + 16 Global`x))/
                    32 + (Compile`$285 (1 - 4 Global`x + 8 Global`x^2))/8]], 
                    Evaluate][Global`x], (
                    CalculateScan`PlotterScanner`Private`px$ - Global`x)^2 + 
                    CalculateScan`PlotterScanner`Private`py$ 
                    CompiledFunction[{8, 8., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    2}}, {{-4, {2, 0, 2}}, {0.03125, {3, 0, 1}}, {
                    8, {2, 0, 3}}, {1, {2, 0, 1}}, {4, {2, 0, 0}}}, {0, 4, 6, 
                    0, 0}, {{10, 0, 2}, {16, 2, 0, 2}, {40, 34, 3, 0, 2, 3, 0,
                     3}, {10, 2, 2}, {16, 2, 0, 2}, {40, 56, 3, 0, 0, 3, 0, 
                    4}, {10, 3, 5}, {16, 5, 4, 5}, {10, 1, 4}, {13, 4, 2, 5, 
                    4}, {16, 1, 3, 4, 2}, {1}}, 
                    
                    Function[{Global`x}, (
                    E^(4 Global`x) (1 - 4 Global`x + 8 Global`x^2))/32], 
                    Evaluate][Global`x] - CompiledFunction[{8, 8., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    2}}, {{-4, {2, 0, 2}}, {0.03125, {3, 0, 1}}, {
                    8, {2, 0, 3}}, {1, {2, 0, 1}}, {4, {2, 0, 0}}}, {0, 4, 6, 
                    0, 0}, {{10, 0, 2}, {16, 2, 0, 2}, {40, 34, 3, 0, 2, 3, 0,
                     3}, {10, 2, 2}, {16, 2, 0, 2}, {40, 56, 3, 0, 0, 3, 0, 
                    4}, {10, 3, 5}, {16, 5, 4, 5}, {10, 1, 4}, {13, 4, 2, 5, 
                    4}, {16, 1, 3, 4, 2}, {1}}, 
                    
                    Function[{Global`x}, (
                    E^(4 Global`x) (1 - 4 Global`x + 8 Global`x^2))/32], 
                    Evaluate][Global`x]^2 + ((
                    CalculateScan`PlotterScanner`Private`px$ - Global`x) (
                    CalculateScan`PlotterScanner`Private`py$ - 2 
                    CompiledFunction[{8, 8., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    2}}, {{-4, {2, 0, 2}}, {0.03125, {3, 0, 1}}, {
                    8, {2, 0, 3}}, {1, {2, 0, 1}}, {4, {2, 0, 0}}}, {0, 4, 6, 
                    0, 0}, {{10, 0, 2}, {16, 2, 0, 2}, {40, 34, 3, 0, 2, 3, 0,
                     3}, {10, 2, 2}, {16, 2, 0, 2}, {40, 56, 3, 0, 0, 3, 0, 
                    4}, {10, 3, 5}, {16, 5, 4, 5}, {10, 1, 4}, {13, 4, 2, 5, 
                    4}, {16, 1, 3, 4, 2}, {1}}, 
                    
                    Function[{Global`x}, (
                    E^(4 Global`x) (1 - 4 Global`x + 8 Global`x^2))/32], 
                    Evaluate][Global`x])) CompiledFunction[{8, 8., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    4}}, {{-4, {2, 0, 1}}, {0.03125, {3, 0, 3}}, {
                    8, {2, 0, 4}}, {0.125, {3, 0, 6}}, {16, {2, 0, 2}}, {
                    1, {2, 0, 3}}, {4, {2, 0, 0}}}, {0, 5, 9, 0, 
                    0}, {{10, 0, 1}, {16, 1, 0, 1}, {40, 34, 3, 0, 1, 3, 0, 
                    2}, {10, 2, 4}, {16, 4, 0, 4}, {10, 1, 5}, {13, 5, 4, 
                    5}, {16, 3, 2, 5, 4}, {10, 1, 5}, {16, 5, 0, 5}, {40, 56, 
                    3, 0, 0, 3, 0, 7}, {10, 4, 8}, {16, 8, 7, 8}, {10, 3, 
                    7}, {13, 7, 5, 8, 7}, {16, 6, 2, 7, 5}, {13, 4, 5, 4}, {
                    1}}, 
                    Function[{Global`x}, 
                    
                    Block[{Compile`$167, Compile`$285}, 
                    Compile`$167 = 4 Global`x; 
                    Compile`$285 = E^Compile`$167; (
                    Compile`$285 (-4 + 16 Global`x))/
                    32 + (Compile`$285 (1 - 4 Global`x + 8 Global`x^2))/8]], 
                    Evaluate][Global`x]}/(
                    CalculateScan`PlotterScanner`Private`py$ - 
                    CompiledFunction[{8, 8., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    2}}, {{-4, {2, 0, 2}}, {0.03125, {3, 0, 1}}, {
                    8, {2, 0, 3}}, {1, {2, 0, 1}}, {4, {2, 0, 0}}}, {0, 4, 6, 
                    0, 0}, {{10, 0, 2}, {16, 2, 0, 2}, {40, 34, 3, 0, 2, 3, 0,
                     3}, {10, 2, 2}, {16, 2, 0, 2}, {40, 56, 3, 0, 0, 3, 0, 
                    4}, {10, 3, 5}, {16, 5, 4, 5}, {10, 1, 4}, {13, 4, 2, 5, 
                    4}, {16, 1, 3, 4, 2}, {1}}, 
                    
                    Function[{Global`x}, (
                    E^(4 Global`x) (1 - 4 Global`x + 8 Global`x^2))/32], 
                    Evaluate][Global`x] + (-
                    CalculateScan`PlotterScanner`Private`px$ + Global`x) 
                    CompiledFunction[{8, 8., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    4}}, {{-4, {2, 0, 1}}, {0.03125, {3, 0, 3}}, {
                    8, {2, 0, 4}}, {0.125, {3, 0, 6}}, {16, {2, 0, 2}}, {
                    1, {2, 0, 3}}, {4, {2, 0, 0}}}, {0, 5, 9, 0, 
                    0}, {{10, 0, 1}, {16, 1, 0, 1}, {40, 34, 3, 0, 1, 3, 0, 
                    2}, {10, 2, 4}, {16, 4, 0, 4}, {10, 1, 5}, {13, 5, 4, 
                    5}, {16, 3, 2, 5, 4}, {10, 1, 5}, {16, 5, 0, 5}, {40, 56, 
                    3, 0, 0, 3, 0, 7}, {10, 4, 8}, {16, 8, 7, 8}, {10, 3, 
                    7}, {13, 7, 5, 8, 7}, {16, 6, 2, 7, 5}, {13, 4, 5, 4}, {
                    1}}, 
                    Function[{Global`x}, 
                    
                    Block[{Compile`$167, Compile`$285}, 
                    Compile`$167 = 4 Global`x; 
                    Compile`$285 = E^Compile`$167; (
                    Compile`$285 (-4 + 16 Global`x))/
                    32 + (Compile`$285 (1 - 4 Global`x + 8 Global`x^2))/8]], 
                    Evaluate][Global`x]), {
                    Global`x, CalculateScan`PlotterScanner`Private`xL$, 
                    CalculateScan`PlotterScanner`Private`xU$}, 
                    PlotRange -> {
                    CalculateScan`PlotterScanner`Private`pRX$, 
                    CalculateScan`PlotterScanner`Private`pRY$}, Evaluated -> 
                    False]], {CalculateScan`PlotterScanner`Private`px, 
                    CalculateScan`PlotterScanner`Private`xL$, 
                    CalculateScan`PlotterScanner`Private`xU$, (
                    CalculateScan`PlotterScanner`Private`xU$ - 
                    CalculateScan`PlotterScanner`Private`xL$)/
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurveCount$}, {CalculateScan`PlotterScanner`Private`py, 
                    CalculateScan`PlotterScanner`Private`yL$, 
                    CalculateScan`PlotterScanner`Private`yU$, (
                    CalculateScan`PlotterScanner`Private`yU$ - 
                    CalculateScan`PlotterScanner`Private`yL$)/
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurveCount$}], 
                    Table[
                    
                    With[{CalculateScan`PlotterScanner`Private`px$ = 
                    CalculateScan`PlotterScanner`Private`px, 
                    CalculateScan`PlotterScanner`Private`py$ = 
                    CompiledFunction[{8, 8., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    2}}, {{-4, {2, 0, 2}}, {0.03125, {3, 0, 1}}, {
                    8, {2, 0, 3}}, {1, {2, 0, 1}}, {4, {2, 0, 0}}}, {0, 4, 6, 
                    0, 0}, {{10, 0, 2}, {16, 2, 0, 2}, {40, 34, 3, 0, 2, 3, 0,
                     3}, {10, 2, 2}, {16, 2, 0, 2}, {40, 56, 3, 0, 0, 3, 0, 
                    4}, {10, 3, 5}, {16, 5, 4, 5}, {10, 1, 4}, {13, 4, 2, 5, 
                    4}, {16, 1, 3, 4, 2}, {1}}, 
                    
                    Function[{Global`x}, (
                    E^(4 Global`x) (1 - 4 Global`x + 8 Global`x^2))/32], 
                    Evaluate][CalculateScan`PlotterScanner`Private`px]}, 
                    
                    ParametricPlot[{-((
                    CalculateScan`PlotterScanner`Private`px$ - 2 Global`x) (
                    CalculateScan`PlotterScanner`Private`py$ - 
                    CompiledFunction[{8, 8., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    2}}, {{-4, {2, 0, 2}}, {0.03125, {3, 0, 1}}, {
                    8, {2, 0, 3}}, {1, {2, 0, 1}}, {4, {2, 0, 0}}}, {0, 4, 6, 
                    0, 0}, {{10, 0, 2}, {16, 2, 0, 2}, {40, 34, 3, 0, 2, 3, 0,
                     3}, {10, 2, 2}, {16, 2, 0, 2}, {40, 56, 3, 0, 0, 3, 0, 
                    4}, {10, 3, 5}, {16, 5, 4, 5}, {10, 1, 4}, {13, 4, 2, 5, 
                    4}, {16, 1, 3, 4, 2}, {1}}, 
                    
                    Function[{Global`x}, (
                    E^(4 Global`x) (1 - 4 Global`x + 8 Global`x^2))/32], 
                    Evaluate][Global`x])) - ((
                    CalculateScan`PlotterScanner`Private`px$ - Global`x) 
                    Global`x + (CalculateScan`PlotterScanner`Private`py$ - 
                    CompiledFunction[{8, 8., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    2}}, {{-4, {2, 0, 2}}, {0.03125, {3, 0, 1}}, {
                    8, {2, 0, 3}}, {1, {2, 0, 1}}, {4, {2, 0, 0}}}, {0, 4, 6, 
                    0, 0}, {{10, 0, 2}, {16, 2, 0, 2}, {40, 34, 3, 0, 2, 3, 0,
                     3}, {10, 2, 2}, {16, 2, 0, 2}, {40, 56, 3, 0, 0, 3, 0, 
                    4}, {10, 3, 5}, {16, 5, 4, 5}, {10, 1, 4}, {13, 4, 2, 5, 
                    4}, {16, 1, 3, 4, 2}, {1}}, 
                    
                    Function[{Global`x}, (
                    E^(4 Global`x) (1 - 4 Global`x + 8 Global`x^2))/32], 
                    Evaluate][Global`x])^2) CompiledFunction[{8, 8., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    4}}, {{-4, {2, 0, 1}}, {0.03125, {3, 0, 3}}, {
                    8, {2, 0, 4}}, {0.125, {3, 0, 6}}, {16, {2, 0, 2}}, {
                    1, {2, 0, 3}}, {4, {2, 0, 0}}}, {0, 5, 9, 0, 
                    0}, {{10, 0, 1}, {16, 1, 0, 1}, {40, 34, 3, 0, 1, 3, 0, 
                    2}, {10, 2, 4}, {16, 4, 0, 4}, {10, 1, 5}, {13, 5, 4, 
                    5}, {16, 3, 2, 5, 4}, {10, 1, 5}, {16, 5, 0, 5}, {40, 56, 
                    3, 0, 0, 3, 0, 7}, {10, 4, 8}, {16, 8, 7, 8}, {10, 3, 
                    7}, {13, 7, 5, 8, 7}, {16, 6, 2, 7, 5}, {13, 4, 5, 4}, {
                    1}}, 
                    Function[{Global`x}, 
                    
                    Block[{Compile`$167, Compile`$285}, 
                    Compile`$167 = 4 Global`x; 
                    Compile`$285 = E^Compile`$167; (
                    Compile`$285 (-4 + 16 Global`x))/
                    32 + (Compile`$285 (1 - 4 Global`x + 8 Global`x^2))/8]], 
                    Evaluate][Global`x], (
                    CalculateScan`PlotterScanner`Private`px$ - Global`x)^2 + 
                    CalculateScan`PlotterScanner`Private`py$ 
                    CompiledFunction[{8, 8., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    2}}, {{-4, {2, 0, 2}}, {0.03125, {3, 0, 1}}, {
                    8, {2, 0, 3}}, {1, {2, 0, 1}}, {4, {2, 0, 0}}}, {0, 4, 6, 
                    0, 0}, {{10, 0, 2}, {16, 2, 0, 2}, {40, 34, 3, 0, 2, 3, 0,
                     3}, {10, 2, 2}, {16, 2, 0, 2}, {40, 56, 3, 0, 0, 3, 0, 
                    4}, {10, 3, 5}, {16, 5, 4, 5}, {10, 1, 4}, {13, 4, 2, 5, 
                    4}, {16, 1, 3, 4, 2}, {1}}, 
                    
                    Function[{Global`x}, (
                    E^(4 Global`x) (1 - 4 Global`x + 8 Global`x^2))/32], 
                    Evaluate][Global`x] - CompiledFunction[{8, 8., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    2}}, {{-4, {2, 0, 2}}, {0.03125, {3, 0, 1}}, {
                    8, {2, 0, 3}}, {1, {2, 0, 1}}, {4, {2, 0, 0}}}, {0, 4, 6, 
                    0, 0}, {{10, 0, 2}, {16, 2, 0, 2}, {40, 34, 3, 0, 2, 3, 0,
                     3}, {10, 2, 2}, {16, 2, 0, 2}, {40, 56, 3, 0, 0, 3, 0, 
                    4}, {10, 3, 5}, {16, 5, 4, 5}, {10, 1, 4}, {13, 4, 2, 5, 
                    4}, {16, 1, 3, 4, 2}, {1}}, 
                    
                    Function[{Global`x}, (
                    E^(4 Global`x) (1 - 4 Global`x + 8 Global`x^2))/32], 
                    Evaluate][Global`x]^2 + ((
                    CalculateScan`PlotterScanner`Private`px$ - Global`x) (
                    CalculateScan`PlotterScanner`Private`py$ - 2 
                    CompiledFunction[{8, 8., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    2}}, {{-4, {2, 0, 2}}, {0.03125, {3, 0, 1}}, {
                    8, {2, 0, 3}}, {1, {2, 0, 1}}, {4, {2, 0, 0}}}, {0, 4, 6, 
                    0, 0}, {{10, 0, 2}, {16, 2, 0, 2}, {40, 34, 3, 0, 2, 3, 0,
                     3}, {10, 2, 2}, {16, 2, 0, 2}, {40, 56, 3, 0, 0, 3, 0, 
                    4}, {10, 3, 5}, {16, 5, 4, 5}, {10, 1, 4}, {13, 4, 2, 5, 
                    4}, {16, 1, 3, 4, 2}, {1}}, 
                    
                    Function[{Global`x}, (
                    E^(4 Global`x) (1 - 4 Global`x + 8 Global`x^2))/32], 
                    Evaluate][Global`x])) CompiledFunction[{8, 8., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    4}}, {{-4, {2, 0, 1}}, {0.03125, {3, 0, 3}}, {
                    8, {2, 0, 4}}, {0.125, {3, 0, 6}}, {16, {2, 0, 2}}, {
                    1, {2, 0, 3}}, {4, {2, 0, 0}}}, {0, 5, 9, 0, 
                    0}, {{10, 0, 1}, {16, 1, 0, 1}, {40, 34, 3, 0, 1, 3, 0, 
                    2}, {10, 2, 4}, {16, 4, 0, 4}, {10, 1, 5}, {13, 5, 4, 
                    5}, {16, 3, 2, 5, 4}, {10, 1, 5}, {16, 5, 0, 5}, {40, 56, 
                    3, 0, 0, 3, 0, 7}, {10, 4, 8}, {16, 8, 7, 8}, {10, 3, 
                    7}, {13, 7, 5, 8, 7}, {16, 6, 2, 7, 5}, {13, 4, 5, 4}, {
                    1}}, 
                    Function[{Global`x}, 
                    
                    Block[{Compile`$167, Compile`$285}, 
                    Compile`$167 = 4 Global`x; 
                    Compile`$285 = E^Compile`$167; (
                    Compile`$285 (-4 + 16 Global`x))/
                    32 + (Compile`$285 (1 - 4 Global`x + 8 Global`x^2))/8]], 
                    Evaluate][Global`x]}/(
                    CalculateScan`PlotterScanner`Private`py$ - 
                    CompiledFunction[{8, 8., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    2}}, {{-4, {2, 0, 2}}, {0.03125, {3, 0, 1}}, {
                    8, {2, 0, 3}}, {1, {2, 0, 1}}, {4, {2, 0, 0}}}, {0, 4, 6, 
                    0, 0}, {{10, 0, 2}, {16, 2, 0, 2}, {40, 34, 3, 0, 2, 3, 0,
                     3}, {10, 2, 2}, {16, 2, 0, 2}, {40, 56, 3, 0, 0, 3, 0, 
                    4}, {10, 3, 5}, {16, 5, 4, 5}, {10, 1, 4}, {13, 4, 2, 5, 
                    4}, {16, 1, 3, 4, 2}, {1}}, 
                    
                    Function[{Global`x}, (
                    E^(4 Global`x) (1 - 4 Global`x + 8 Global`x^2))/32], 
                    Evaluate][Global`x] + (-
                    CalculateScan`PlotterScanner`Private`px$ + Global`x) 
                    CompiledFunction[{8, 8., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    4}}, {{-4, {2, 0, 1}}, {0.03125, {3, 0, 3}}, {
                    8, {2, 0, 4}}, {0.125, {3, 0, 6}}, {16, {2, 0, 2}}, {
                    1, {2, 0, 3}}, {4, {2, 0, 0}}}, {0, 5, 9, 0, 
                    0}, {{10, 0, 1}, {16, 1, 0, 1}, {40, 34, 3, 0, 1, 3, 0, 
                    2}, {10, 2, 4}, {16, 4, 0, 4}, {10, 1, 5}, {13, 5, 4, 
                    5}, {16, 3, 2, 5, 4}, {10, 1, 5}, {16, 5, 0, 5}, {40, 56, 
                    3, 0, 0, 3, 0, 7}, {10, 4, 8}, {16, 8, 7, 8}, {10, 3, 
                    7}, {13, 7, 5, 8, 7}, {16, 6, 2, 7, 5}, {13, 4, 5, 4}, {
                    1}}, 
                    Function[{Global`x}, 
                    
                    Block[{Compile`$167, Compile`$285}, 
                    Compile`$167 = 4 Global`x; 
                    Compile`$285 = E^Compile`$167; (
                    Compile`$285 (-4 + 16 Global`x))/
                    32 + (Compile`$285 (1 - 4 Global`x + 8 Global`x^2))/8]], 
                    Evaluate][Global`x]), {
                    Global`x, CalculateScan`PlotterScanner`Private`xL$, 
                    CalculateScan`PlotterScanner`Private`xU$}, 
                    PlotRange -> {
                    CalculateScan`PlotterScanner`Private`pRX$, 
                    CalculateScan`PlotterScanner`Private`pRY$}, Evaluated -> 
                    False]], {CalculateScan`PlotterScanner`Private`px, 
                    CalculateScan`PlotterScanner`Private`xL$, 
                    CalculateScan`PlotterScanner`Private`xU$, (
                    CalculateScan`PlotterScanner`Private`xU$ - 
                    CalculateScan`PlotterScanner`Private`xL$)/
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurveCount$}]]]], {}]; 
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurveLastParamaters$$ = {{
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$}, 
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurveCountFactor$$, 
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurvePoints$$}]; 
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurvePlot = Graphics[{
                    Directive[
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurveColor$$, 
                    Opacity[
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurveOpacity$$], 
                    Thickness[
                    10^CalculateScan`PlotterScanner`Private`\
negativePedalCurveThickness$$]], 
                    If[
                    CalculateScan`PlotterScanner`Private`negativePedalCurveTF$\
$, CalculateScan`PlotterScanner`Private`negativePedalCurvePlotCurves$$, {}]}]; 
                    If[
                    And[
                    CalculateScan`PlotterScanner`Private`contraPedalCurveTF$$,
                     CalculateScan`PlotterScanner`Private`\
contraPedalCurveLastParamaters$$ =!= {{
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$}, 
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurveCountFactor$$, 
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurvePoints$$}], 
                    If[CalculateScan`PlotterScanner`Private`\
contraPedalCurveTF$$, 
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurvePlotCurves$$ = 
                    With[{CalculateScan`PlotterScanner`Private`\
contraPedalCurveCount$ = 
                    If[CalculateScan`PlotterScanner`Private`\
contraPedalCurvePoints$$ === "grid", 
                    Max[1, 
                    Round[
                    16 CalculateScan`PlotterScanner`Private`\
contraPedalCurveCountFactor$$]], 
                    Max[1, 
                    Round[
                    120 CalculateScan`PlotterScanner`Private`\
contraPedalCurveCountFactor$$]]]}, 
                    (Cases[
                    Normal[#], 
                    Blank[Line], {0, Infinity}]& )[
                    If[
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurvePoints$$ === "grid", 
                    Table[
                    
                    With[{CalculateScan`PlotterScanner`Private`px$ = 
                    CalculateScan`PlotterScanner`Private`px, 
                    CalculateScan`PlotterScanner`Private`py$ = 
                    CalculateScan`PlotterScanner`Private`py}, 
                    ParametricPlot[{Global`x, 
                    CompiledFunction[{8, 8., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    2}}, {{-4, {2, 0, 2}}, {0.03125, {3, 0, 1}}, {
                    8, {2, 0, 3}}, {1, {2, 0, 1}}, {4, {2, 0, 0}}}, {0, 4, 6, 
                    0, 0}, {{10, 0, 2}, {16, 2, 0, 2}, {40, 34, 3, 0, 2, 3, 0,
                     3}, {10, 2, 2}, {16, 2, 0, 2}, {40, 56, 3, 0, 0, 3, 0, 
                    4}, {10, 3, 5}, {16, 5, 4, 5}, {10, 1, 4}, {13, 4, 2, 5, 
                    4}, {16, 1, 3, 4, 2}, {1}}, 
                    
                    Function[{Global`x}, (
                    E^(4 Global`x) (1 - 4 Global`x + 8 Global`x^2))/32], 
                    Evaluate][Global`x]} + ((
                    1 (CalculateScan`PlotterScanner`Private`py$ - 
                    CompiledFunction[{8, 8., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    2}}, {{-4, {2, 0, 2}}, {0.03125, {3, 0, 1}}, {
                    8, {2, 0, 3}}, {1, {2, 0, 1}}, {4, {2, 0, 0}}}, {0, 4, 6, 
                    0, 0}, {{10, 0, 2}, {16, 2, 0, 2}, {40, 34, 3, 0, 2, 3, 0,
                     3}, {10, 2, 2}, {16, 2, 0, 2}, {40, 56, 3, 0, 0, 3, 0, 
                    4}, {10, 3, 5}, {16, 5, 4, 5}, {10, 1, 4}, {13, 4, 2, 5, 
                    4}, {16, 1, 3, 4, 2}, {1}}, 
                    
                    Function[{Global`x}, (
                    E^(4 Global`x) (1 - 4 Global`x + 8 Global`x^2))/32], 
                    Evaluate][Global`x]) + CompiledFunction[{8, 8., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    4}}, {{-4, {2, 0, 1}}, {0.03125, {3, 0, 3}}, {
                    8, {2, 0, 4}}, {0.125, {3, 0, 6}}, {16, {2, 0, 2}}, {
                    1, {2, 0, 3}}, {4, {2, 0, 0}}}, {0, 5, 9, 0, 
                    0}, {{10, 0, 1}, {16, 1, 0, 1}, {40, 34, 3, 0, 1, 3, 0, 
                    2}, {10, 2, 4}, {16, 4, 0, 4}, {10, 1, 5}, {13, 5, 4, 
                    5}, {16, 3, 2, 5, 4}, {10, 1, 5}, {16, 5, 0, 5}, {40, 56, 
                    3, 0, 0, 3, 0, 7}, {10, 4, 8}, {16, 8, 7, 8}, {10, 3, 
                    7}, {13, 7, 5, 8, 7}, {16, 6, 2, 7, 5}, {13, 4, 5, 4}, {
                    1}}, 
                    Function[{Global`x}, 
                    
                    Block[{Compile`$167, Compile`$285}, 
                    Compile`$167 = 4 Global`x; 
                    Compile`$285 = E^Compile`$167; (
                    Compile`$285 (-4 + 16 Global`x))/
                    32 + (Compile`$285 (1 - 4 Global`x + 8 Global`x^2))/8]], 
                    Evaluate][Global`x] (-
                    CalculateScan`PlotterScanner`Private`px$ + Global`x)) {-
                    CompiledFunction[{8, 8., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    2}}, {{-4, {2, 0, 2}}, {0.03125, {3, 0, 1}}, {
                    8, {2, 0, 3}}, {1, {2, 0, 1}}, {4, {2, 0, 0}}}, {0, 4, 6, 
                    0, 0}, {{10, 0, 2}, {16, 2, 0, 2}, {40, 34, 3, 0, 2, 3, 0,
                     3}, {10, 2, 2}, {16, 2, 0, 2}, {40, 56, 3, 0, 0, 3, 0, 
                    4}, {10, 3, 5}, {16, 5, 4, 5}, {10, 1, 4}, {13, 4, 2, 5, 
                    4}, {16, 1, 3, 4, 2}, {1}}, 
                    
                    Function[{Global`x}, (
                    E^(4 Global`x) (1 - 4 Global`x + 8 Global`x^2))/32], 
                    Evaluate][Global`x], 1})/(1 + 
                    CompiledFunction[{8, 8., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    4}}, {{-4, {2, 0, 1}}, {0.03125, {3, 0, 3}}, {
                    8, {2, 0, 4}}, {0.125, {3, 0, 6}}, {16, {2, 0, 2}}, {
                    1, {2, 0, 3}}, {4, {2, 0, 0}}}, {0, 5, 9, 0, 
                    0}, {{10, 0, 1}, {16, 1, 0, 1}, {40, 34, 3, 0, 1, 3, 0, 
                    2}, {10, 2, 4}, {16, 4, 0, 4}, {10, 1, 5}, {13, 5, 4, 
                    5}, {16, 3, 2, 5, 4}, {10, 1, 5}, {16, 5, 0, 5}, {40, 56, 
                    3, 0, 0, 3, 0, 7}, {10, 4, 8}, {16, 8, 7, 8}, {10, 3, 
                    7}, {13, 7, 5, 8, 7}, {16, 6, 2, 7, 5}, {13, 4, 5, 4}, {
                    1}}, 
                    Function[{Global`x}, 
                    
                    Block[{Compile`$167, Compile`$285}, 
                    Compile`$167 = 4 Global`x; 
                    Compile`$285 = E^Compile`$167; (
                    Compile`$285 (-4 + 16 Global`x))/
                    32 + (Compile`$285 (1 - 4 Global`x + 8 Global`x^2))/8]], 
                    Evaluate][Global`x]^2), {
                    Global`x, CalculateScan`PlotterScanner`Private`xL$, 
                    CalculateScan`PlotterScanner`Private`xU$}, 
                    PlotRange -> {
                    CalculateScan`PlotterScanner`Private`pRX$, 
                    CalculateScan`PlotterScanner`Private`pRY$}, Evaluated -> 
                    False]], {CalculateScan`PlotterScanner`Private`px, 
                    CalculateScan`PlotterScanner`Private`xL$, 
                    CalculateScan`PlotterScanner`Private`xU$, (
                    CalculateScan`PlotterScanner`Private`xU$ - 
                    CalculateScan`PlotterScanner`Private`xL$)/
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurveCount$}, {CalculateScan`PlotterScanner`Private`py, 
                    CalculateScan`PlotterScanner`Private`yL$, 
                    CalculateScan`PlotterScanner`Private`yU$, (
                    CalculateScan`PlotterScanner`Private`yU$ - 
                    CalculateScan`PlotterScanner`Private`yL$)/
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurveCount$}], 
                    Table[
                    
                    With[{CalculateScan`PlotterScanner`Private`px$ = 
                    CalculateScan`PlotterScanner`Private`px, 
                    CalculateScan`PlotterScanner`Private`py$ = 
                    CompiledFunction[{8, 8., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    2}}, {{-4, {2, 0, 2}}, {0.03125, {3, 0, 1}}, {
                    8, {2, 0, 3}}, {1, {2, 0, 1}}, {4, {2, 0, 0}}}, {0, 4, 6, 
                    0, 0}, {{10, 0, 2}, {16, 2, 0, 2}, {40, 34, 3, 0, 2, 3, 0,
                     3}, {10, 2, 2}, {16, 2, 0, 2}, {40, 56, 3, 0, 0, 3, 0, 
                    4}, {10, 3, 5}, {16, 5, 4, 5}, {10, 1, 4}, {13, 4, 2, 5, 
                    4}, {16, 1, 3, 4, 2}, {1}}, 
                    
                    Function[{Global`x}, (
                    E^(4 Global`x) (1 - 4 Global`x + 8 Global`x^2))/32], 
                    Evaluate][CalculateScan`PlotterScanner`Private`px]}, 
                    ParametricPlot[{Global`x, 
                    CompiledFunction[{8, 8., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    2}}, {{-4, {2, 0, 2}}, {0.03125, {3, 0, 1}}, {
                    8, {2, 0, 3}}, {1, {2, 0, 1}}, {4, {2, 0, 0}}}, {0, 4, 6, 
                    0, 0}, {{10, 0, 2}, {16, 2, 0, 2}, {40, 34, 3, 0, 2, 3, 0,
                     3}, {10, 2, 2}, {16, 2, 0, 2}, {40, 56, 3, 0, 0, 3, 0, 
                    4}, {10, 3, 5}, {16, 5, 4, 5}, {10, 1, 4}, {13, 4, 2, 5, 
                    4}, {16, 1, 3, 4, 2}, {1}}, 
                    
                    Function[{Global`x}, (
                    E^(4 Global`x) (1 - 4 Global`x + 8 Global`x^2))/32], 
                    Evaluate][Global`x]} + ((
                    1 (CalculateScan`PlotterScanner`Private`py$ - 
                    CompiledFunction[{8, 8., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    2}}, {{-4, {2, 0, 2}}, {0.03125, {3, 0, 1}}, {
                    8, {2, 0, 3}}, {1, {2, 0, 1}}, {4, {2, 0, 0}}}, {0, 4, 6, 
                    0, 0}, {{10, 0, 2}, {16, 2, 0, 2}, {40, 34, 3, 0, 2, 3, 0,
                     3}, {10, 2, 2}, {16, 2, 0, 2}, {40, 56, 3, 0, 0, 3, 0, 
                    4}, {10, 3, 5}, {16, 5, 4, 5}, {10, 1, 4}, {13, 4, 2, 5, 
                    4}, {16, 1, 3, 4, 2}, {1}}, 
                    
                    Function[{Global`x}, (
                    E^(4 Global`x) (1 - 4 Global`x + 8 Global`x^2))/32], 
                    Evaluate][Global`x]) + CompiledFunction[{8, 8., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    4}}, {{-4, {2, 0, 1}}, {0.03125, {3, 0, 3}}, {
                    8, {2, 0, 4}}, {0.125, {3, 0, 6}}, {16, {2, 0, 2}}, {
                    1, {2, 0, 3}}, {4, {2, 0, 0}}}, {0, 5, 9, 0, 
                    0}, {{10, 0, 1}, {16, 1, 0, 1}, {40, 34, 3, 0, 1, 3, 0, 
                    2}, {10, 2, 4}, {16, 4, 0, 4}, {10, 1, 5}, {13, 5, 4, 
                    5}, {16, 3, 2, 5, 4}, {10, 1, 5}, {16, 5, 0, 5}, {40, 56, 
                    3, 0, 0, 3, 0, 7}, {10, 4, 8}, {16, 8, 7, 8}, {10, 3, 
                    7}, {13, 7, 5, 8, 7}, {16, 6, 2, 7, 5}, {13, 4, 5, 4}, {
                    1}}, 
                    Function[{Global`x}, 
                    
                    Block[{Compile`$167, Compile`$285}, 
                    Compile`$167 = 4 Global`x; 
                    Compile`$285 = E^Compile`$167; (
                    Compile`$285 (-4 + 16 Global`x))/
                    32 + (Compile`$285 (1 - 4 Global`x + 8 Global`x^2))/8]], 
                    Evaluate][Global`x] (-
                    CalculateScan`PlotterScanner`Private`px$ + Global`x)) {-
                    CompiledFunction[{8, 8., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    2}}, {{-4, {2, 0, 2}}, {0.03125, {3, 0, 1}}, {
                    8, {2, 0, 3}}, {1, {2, 0, 1}}, {4, {2, 0, 0}}}, {0, 4, 6, 
                    0, 0}, {{10, 0, 2}, {16, 2, 0, 2}, {40, 34, 3, 0, 2, 3, 0,
                     3}, {10, 2, 2}, {16, 2, 0, 2}, {40, 56, 3, 0, 0, 3, 0, 
                    4}, {10, 3, 5}, {16, 5, 4, 5}, {10, 1, 4}, {13, 4, 2, 5, 
                    4}, {16, 1, 3, 4, 2}, {1}}, 
                    
                    Function[{Global`x}, (
                    E^(4 Global`x) (1 - 4 Global`x + 8 Global`x^2))/32], 
                    Evaluate][Global`x], 1})/(1 + 
                    CompiledFunction[{8, 8., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    4}}, {{-4, {2, 0, 1}}, {0.03125, {3, 0, 3}}, {
                    8, {2, 0, 4}}, {0.125, {3, 0, 6}}, {16, {2, 0, 2}}, {
                    1, {2, 0, 3}}, {4, {2, 0, 0}}}, {0, 5, 9, 0, 
                    0}, {{10, 0, 1}, {16, 1, 0, 1}, {40, 34, 3, 0, 1, 3, 0, 
                    2}, {10, 2, 4}, {16, 4, 0, 4}, {10, 1, 5}, {13, 5, 4, 
                    5}, {16, 3, 2, 5, 4}, {10, 1, 5}, {16, 5, 0, 5}, {40, 56, 
                    3, 0, 0, 3, 0, 7}, {10, 4, 8}, {16, 8, 7, 8}, {10, 3, 
                    7}, {13, 7, 5, 8, 7}, {16, 6, 2, 7, 5}, {13, 4, 5, 4}, {
                    1}}, 
                    Function[{Global`x}, 
                    
                    Block[{Compile`$167, Compile`$285}, 
                    Compile`$167 = 4 Global`x; 
                    Compile`$285 = E^Compile`$167; (
                    Compile`$285 (-4 + 16 Global`x))/
                    32 + (Compile`$285 (1 - 4 Global`x + 8 Global`x^2))/8]], 
                    Evaluate][Global`x]^2), {
                    Global`x, CalculateScan`PlotterScanner`Private`xL$, 
                    CalculateScan`PlotterScanner`Private`xU$}, 
                    PlotRange -> {
                    CalculateScan`PlotterScanner`Private`pRX$, 
                    CalculateScan`PlotterScanner`Private`pRY$}, Evaluated -> 
                    False]], {CalculateScan`PlotterScanner`Private`px, 
                    CalculateScan`PlotterScanner`Private`xL$, 
                    CalculateScan`PlotterScanner`Private`xU$, (
                    CalculateScan`PlotterScanner`Private`xU$ - 
                    CalculateScan`PlotterScanner`Private`xL$)/
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurveCount$}]]]], {}]; 
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurveLastParamaters$$ = {{
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$}, 
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurveCountFactor$$, 
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurvePoints$$}]; 
                    CalculateScan`PlotterScanner`Private`contraPedalCurvePlot = 
                    Graphics[{
                    Directive[
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurveColor$$, 
                    Opacity[
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurveOpacity$$], 
                    Thickness[
                    10^CalculateScan`PlotterScanner`Private`\
contraPedalCurveThickness$$]], 
                    If[
                    CalculateScan`PlotterScanner`Private`contraPedalCurveTF$$,
                     CalculateScan`PlotterScanner`Private`\
contraPedalCurvePlotCurves$$, {}]}]; If[
                    And[
                    CalculateScan`PlotterScanner`Private`dualCurveTF$$, 
                    CalculateScan`PlotterScanner`Private`\
dualCurveLastParamaters$$ =!= {{
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$}, 
                    CalculateScan`PlotterScanner`Private`dualCurveCountFactor$\
$, CalculateScan`PlotterScanner`Private`dualCurvePoints}], 
                    If[CalculateScan`PlotterScanner`Private`dualCurveTF$$, 
                    CalculateScan`PlotterScanner`Private`dualCurvePlotCurves$$\
 = With[{CalculateScan`PlotterScanner`Private`dualCurveCount$ = 
                    If[CalculateScan`PlotterScanner`Private`dualCurvePoints === 
                    "grid", 
                    Max[1, 
                    Round[
                    16 CalculateScan`PlotterScanner`Private`\
dualCurveCountFactor$$]], 
                    Max[1, 
                    Round[
                    120 CalculateScan`PlotterScanner`Private`\
dualCurveCountFactor$$]]]}, 
                    (Cases[
                    Normal[#], 
                    Blank[Line], {0, Infinity}]& )[
                    If[
                    CalculateScan`PlotterScanner`Private`dualCurvePoints === 
                    "grid", 
                    Table[
                    
                    With[{CalculateScan`PlotterScanner`Private`px$ = 
                    CalculateScan`PlotterScanner`Private`px, 
                    CalculateScan`PlotterScanner`Private`py$ = 
                    CalculateScan`PlotterScanner`Private`py}, 
                    ParametricPlot[{-CompiledFunction[{8, 8., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    4}}, {{-4, {2, 0, 1}}, {0.03125, {3, 0, 3}}, {
                    8, {2, 0, 4}}, {0.125, {3, 0, 6}}, {16, {2, 0, 2}}, {
                    1, {2, 0, 3}}, {4, {2, 0, 0}}}, {0, 5, 9, 0, 
                    0}, {{10, 0, 1}, {16, 1, 0, 1}, {40, 34, 3, 0, 1, 3, 0, 
                    2}, {10, 2, 4}, {16, 4, 0, 4}, {10, 1, 5}, {13, 5, 4, 
                    5}, {16, 3, 2, 5, 4}, {10, 1, 5}, {16, 5, 0, 5}, {40, 56, 
                    3, 0, 0, 3, 0, 7}, {10, 4, 8}, {16, 8, 7, 8}, {10, 3, 
                    7}, {13, 7, 5, 8, 7}, {16, 6, 2, 7, 5}, {13, 4, 5, 4}, {
                    1}}, 
                    Function[{Global`x}, 
                    
                    Block[{Compile`$167, Compile`$285}, 
                    Compile`$167 = 4 Global`x; 
                    Compile`$285 = E^Compile`$167; (
                    Compile`$285 (-4 + 16 Global`x))/
                    32 + (Compile`$285 (1 - 4 Global`x + 8 Global`x^2))/8]], 
                    Evaluate][Global`x], 1}/((Global`x + 
                    CalculateScan`PlotterScanner`Private`px$) 
                    CompiledFunction[{8, 8., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    4}}, {{-4, {2, 0, 1}}, {0.03125, {3, 0, 3}}, {
                    8, {2, 0, 4}}, {0.125, {3, 0, 6}}, {16, {2, 0, 2}}, {
                    1, {2, 0, 3}}, {4, {2, 0, 0}}}, {0, 5, 9, 0, 
                    0}, {{10, 0, 1}, {16, 1, 0, 1}, {40, 34, 3, 0, 1, 3, 0, 2}
                    , {10, 2, 4}, {16, 4, 0, 4}, {10, 1, 5}, {13, 5, 4, 5}, {
                    16, 3, 2, 5, 4}, {10, 1, 5}, {16, 5, 0, 5}, {40, 56, 3, 0,
                     0, 3, 0, 7}, {10, 4, 8}, {16, 8, 7, 8}, {10, 3, 7}, {13, 
                    7, 5, 8, 7}, {16, 6, 2, 7, 5}, {13, 4, 5, 4}, {1}}, 
                    Function[{Global`x}, 
                    
                    Block[{Compile`$167, Compile`$285}, 
                    Compile`$167 = 4 Global`x; 
                    Compile`$285 = E^Compile`$167; (
                    Compile`$285 (-4 + 16 Global`x))/
                    32 + (Compile`$285 (1 - 4 Global`x + 8 Global`x^2))/8]], 
                    Evaluate][Global`x] - 
                    1 (CompiledFunction[{8, 8., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    2}}, {{-4, {2, 0, 2}}, {0.03125, {3, 0, 1}}, {
                    8, {2, 0, 3}}, {1, {2, 0, 1}}, {4, {2, 0, 0}}}, {0, 4, 6, 
                    0, 0}, {{10, 0, 2}, {16, 2, 0, 2}, {40, 34, 3, 0, 2, 3, 0,
                     3}, {10, 2, 2}, {16, 2, 0, 2}, {40, 56, 3, 0, 0, 3, 0, 
                    4}, {10, 3, 5}, {16, 5, 4, 5}, {10, 1, 4}, {13, 4, 2, 5, 
                    4}, {16, 1, 3, 4, 2}, {1}}, 
                    
                    Function[{Global`x}, (
                    E^(4 Global`x) (1 - 4 Global`x + 8 Global`x^2))/32], 
                    Evaluate][Global`x] + 
                    CalculateScan`PlotterScanner`Private`py$)), {
                    Global`x, Min[CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$] - 
                    CalculateScan`PlotterScanner`Private`\[CapitalDelta]X$/2, 
                    Max[CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$] + 
                    CalculateScan`PlotterScanner`Private`\[CapitalDelta]X$/2},
                     PlotStyle -> Directive[
                    Opacity[
                    CalculateScan`PlotterScanner`Private`dualCurveOpacity$$], 
                    CalculateScan`PlotterScanner`Private`dualCurveColor$$, 
                    Thickness[
                    10^CalculateScan`PlotterScanner`Private`\
dualCurveThickness$$]], PlotRange -> 
                    CalculateScan`PlotterScanner`Private`pRY$, Evaluated -> 
                    False, Exclusions -> {(Global`x + 
                    CalculateScan`PlotterScanner`Private`px$) 
                    CompiledFunction[{8, 8., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    4}}, {{-4, {2, 0, 1}}, {0.03125, {3, 0, 3}}, {
                    8, {2, 0, 4}}, {0.125, {3, 0, 6}}, {16, {2, 0, 2}}, {
                    1, {2, 0, 3}}, {4, {2, 0, 0}}}, {0, 5, 9, 0, 
                    0}, {{10, 0, 1}, {16, 1, 0, 1}, {40, 34, 3, 0, 1, 3, 0, 
                    2}, {10, 2, 4}, {16, 4, 0, 4}, {10, 1, 5}, {13, 5, 4, 
                    5}, {16, 3, 2, 5, 4}, {10, 1, 5}, {16, 5, 0, 5}, {40, 56, 
                    3, 0, 0, 3, 0, 7}, {10, 4, 8}, {16, 8, 7, 8}, {10, 3, 
                    7}, {13, 7, 5, 8, 7}, {16, 6, 2, 7, 5}, {13, 4, 5, 4}, {
                    1}}, 
                    Function[{Global`x}, 
                    
                    Block[{Compile`$167, Compile`$285}, 
                    Compile`$167 = 4 Global`x; 
                    Compile`$285 = E^Compile`$167; (
                    Compile`$285 (-4 + 16 Global`x))/
                    32 + (Compile`$285 (1 - 4 Global`x + 8 Global`x^2))/8]], 
                    Evaluate][Global`x] - 
                    1 (CompiledFunction[{8, 8., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    2}}, {{-4, {2, 0, 2}}, {0.03125, {3, 0, 1}}, {
                    8, {2, 0, 3}}, {1, {2, 0, 1}}, {4, {2, 0, 0}}}, {0, 4, 6, 
                    0, 0}, {{10, 0, 2}, {16, 2, 0, 2}, {40, 34, 3, 0, 2, 3, 0,
                     3}, {10, 2, 2}, {16, 2, 0, 2}, {40, 56, 3, 0, 0, 3, 0, 
                    4}, {10, 3, 5}, {16, 5, 4, 5}, {10, 1, 4}, {13, 4, 2, 5, 
                    4}, {16, 1, 3, 4, 2}, {1}}, 
                    
                    Function[{Global`x}, (
                    E^(4 Global`x) (1 - 4 Global`x + 8 Global`x^2))/32], 
                    Evaluate][Global`x] + 
                    CalculateScan`PlotterScanner`Private`py$) == 0}]], {
                    CalculateScan`PlotterScanner`Private`px, 
                    CalculateScan`PlotterScanner`Private`xL$, 
                    CalculateScan`PlotterScanner`Private`xU$, (
                    CalculateScan`PlotterScanner`Private`xU$ - 
                    CalculateScan`PlotterScanner`Private`xL$)/
                    CalculateScan`PlotterScanner`Private`dualCurveCount$}, {
                    CalculateScan`PlotterScanner`Private`py, 
                    CalculateScan`PlotterScanner`Private`yL$, 
                    CalculateScan`PlotterScanner`Private`yU$, (
                    CalculateScan`PlotterScanner`Private`yU$ - 
                    CalculateScan`PlotterScanner`Private`yL$)/
                    CalculateScan`PlotterScanner`Private`dualCurveCount$}], 
                    Table[
                    
                    With[{CalculateScan`PlotterScanner`Private`px$ = 
                    CalculateScan`PlotterScanner`Private`px, 
                    CalculateScan`PlotterScanner`Private`py$ = 
                    CompiledFunction[{8, 8., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    2}}, {{-4, {2, 0, 2}}, {0.03125, {3, 0, 1}}, {
                    8, {2, 0, 3}}, {1, {2, 0, 1}}, {4, {2, 0, 0}}}, {0, 4, 6, 
                    0, 0}, {{10, 0, 2}, {16, 2, 0, 2}, {40, 34, 3, 0, 2, 3, 0,
                     3}, {10, 2, 2}, {16, 2, 0, 2}, {40, 56, 3, 0, 0, 3, 0, 
                    4}, {10, 3, 5}, {16, 5, 4, 5}, {10, 1, 4}, {13, 4, 2, 5, 
                    4}, {16, 1, 3, 4, 2}, {1}}, 
                    
                    Function[{Global`x}, (
                    E^(4 Global`x) (1 - 4 Global`x + 8 Global`x^2))/32], 
                    Evaluate][CalculateScan`PlotterScanner`Private`px]}, 
                    ParametricPlot[{-CompiledFunction[{8, 8., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    4}}, {{-4, {2, 0, 1}}, {0.03125, {3, 0, 3}}, {
                    8, {2, 0, 4}}, {0.125, {3, 0, 6}}, {16, {2, 0, 2}}, {
                    1, {2, 0, 3}}, {4, {2, 0, 0}}}, {0, 5, 9, 0, 
                    0}, {{10, 0, 1}, {16, 1, 0, 1}, {40, 34, 3, 0, 1, 3, 0, 
                    2}, {10, 2, 4}, {16, 4, 0, 4}, {10, 1, 5}, {13, 5, 4, 
                    5}, {16, 3, 2, 5, 4}, {10, 1, 5}, {16, 5, 0, 5}, {40, 56, 
                    3, 0, 0, 3, 0, 7}, {10, 4, 8}, {16, 8, 7, 8}, {10, 3, 
                    7}, {13, 7, 5, 8, 7}, {16, 6, 2, 7, 5}, {13, 4, 5, 4}, {
                    1}}, 
                    Function[{Global`x}, 
                    
                    Block[{Compile`$167, Compile`$285}, 
                    Compile`$167 = 4 Global`x; 
                    Compile`$285 = E^Compile`$167; (
                    Compile`$285 (-4 + 16 Global`x))/
                    32 + (Compile`$285 (1 - 4 Global`x + 8 Global`x^2))/8]], 
                    Evaluate][Global`x], 1}/((Global`x + 
                    CalculateScan`PlotterScanner`Private`px$) 
                    CompiledFunction[{8, 8., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    4}}, {{-4, {2, 0, 1}}, {0.03125, {3, 0, 3}}, {
                    8, {2, 0, 4}}, {0.125, {3, 0, 6}}, {16, {2, 0, 2}}, {
                    1, {2, 0, 3}}, {4, {2, 0, 0}}}, {0, 5, 9, 0, 
                    0}, {{10, 0, 1}, {16, 1, 0, 1}, {40, 34, 3, 0, 1, 3, 0, 
                    2}, {10, 2, 4}, {16, 4, 0, 4}, {10, 1, 5}, {13, 5, 4, 
                    5}, {16, 3, 2, 5, 4}, {10, 1, 5}, {16, 5, 0, 5}, {40, 56, 
                    3, 0, 0, 3, 0, 7}, {10, 4, 8}, {16, 8, 7, 8}, {10, 3, 
                    7}, {13, 7, 5, 8, 7}, {16, 6, 2, 7, 5}, {13, 4, 5, 4}, {
                    1}}, 
                    Function[{Global`x}, 
                    
                    Block[{Compile`$167, Compile`$285}, 
                    Compile`$167 = 4 Global`x; 
                    Compile`$285 = E^Compile`$167; (
                    Compile`$285 (-4 + 16 Global`x))/
                    32 + (Compile`$285 (1 - 4 Global`x + 8 Global`x^2))/8]], 
                    Evaluate][Global`x] - 
                    1 (CompiledFunction[{8, 8., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    2}}, {{-4, {2, 0, 2}}, {0.03125, {3, 0, 1}}, {
                    8, {2, 0, 3}}, {1, {2, 0, 1}}, {4, {2, 0, 0}}}, {0, 4, 6, 
                    0, 0}, {{10, 0, 2}, {16, 2, 0, 2}, {40, 34, 3, 0, 2, 3, 0,
                     3}, {10, 2, 2}, {16, 2, 0, 2}, {40, 56, 3, 0, 0, 3, 0, 
                    4}, {10, 3, 5}, {16, 5, 4, 5}, {10, 1, 4}, {13, 4, 2, 5, 
                    4}, {16, 1, 3, 4, 2}, {1}}, 
                    
                    Function[{Global`x}, (
                    E^(4 Global`x) (1 - 4 Global`x + 8 Global`x^2))/32], 
                    Evaluate][Global`x] + 
                    CalculateScan`PlotterScanner`Private`py$)), {
                    Global`x, Min[CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$] - 
                    CalculateScan`PlotterScanner`Private`\[CapitalDelta]X$/2, 
                    Max[CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$] + 
                    CalculateScan`PlotterScanner`Private`\[CapitalDelta]X$/2},
                     PlotStyle -> Directive[
                    Opacity[
                    CalculateScan`PlotterScanner`Private`dualCurveOpacity$$], 
                    CalculateScan`PlotterScanner`Private`dualCurveColor$$, 
                    Thickness[
                    10^CalculateScan`PlotterScanner`Private`\
dualCurveThickness$$]], PlotRange -> 
                    CalculateScan`PlotterScanner`Private`pRY$, Evaluated -> 
                    False, Exclusions -> {(Global`x + 
                    CalculateScan`PlotterScanner`Private`px$) 
                    CompiledFunction[{8, 8., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    4}}, {{-4, {2, 0, 1}}, {0.03125, {3, 0, 3}}, {
                    8, {2, 0, 4}}, {0.125, {3, 0, 6}}, {16, {2, 0, 2}}, {
                    1, {2, 0, 3}}, {4, {2, 0, 0}}}, {0, 5, 9, 0, 
                    0}, {{10, 0, 1}, {16, 1, 0, 1}, {40, 34, 3, 0, 1, 3, 0, 
                    2}, {10, 2, 4}, {16, 4, 0, 4}, {10, 1, 5}, {13, 5, 4, 
                    5}, {16, 3, 2, 5, 4}, {10, 1, 5}, {16, 5, 0, 5}, {40, 56, 
                    3, 0, 0, 3, 0, 7}, {10, 4, 8}, {16, 8, 7, 8}, {10, 3, 
                    7}, {13, 7, 5, 8, 7}, {16, 6, 2, 7, 5}, {13, 4, 5, 4}, {
                    1}}, 
                    Function[{Global`x}, 
                    
                    Block[{Compile`$167, Compile`$285}, 
                    Compile`$167 = 4 Global`x; 
                    Compile`$285 = E^Compile`$167; (
                    Compile`$285 (-4 + 16 Global`x))/
                    32 + (Compile`$285 (1 - 4 Global`x + 8 Global`x^2))/8]], 
                    Evaluate][Global`x] - 
                    1 (CompiledFunction[{8, 8., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    2}}, {{-4, {2, 0, 2}}, {0.03125, {3, 0, 1}}, {
                    8, {2, 0, 3}}, {1, {2, 0, 1}}, {4, {2, 0, 0}}}, {0, 4, 6, 
                    0, 0}, {{10, 0, 2}, {16, 2, 0, 2}, {40, 34, 3, 0, 2, 3, 0,
                     3}, {10, 2, 2}, {16, 2, 0, 2}, {40, 56, 3, 0, 0, 3, 0, 
                    4}, {10, 3, 5}, {16, 5, 4, 5}, {10, 1, 4}, {13, 4, 2, 5, 
                    4}, {16, 1, 3, 4, 2}, {1}}, 
                    
                    Function[{Global`x}, (
                    E^(4 Global`x) (1 - 4 Global`x + 8 Global`x^2))/32], 
                    Evaluate][Global`x] + 
                    CalculateScan`PlotterScanner`Private`py$) == 0}]], {
                    CalculateScan`PlotterScanner`Private`px, 
                    CalculateScan`PlotterScanner`Private`xL$, 
                    CalculateScan`PlotterScanner`Private`xU$, (
                    CalculateScan`PlotterScanner`Private`xU$ - 
                    CalculateScan`PlotterScanner`Private`xL$)/
                    CalculateScan`PlotterScanner`Private`dualCurveCount$}]]]],\
 {}]; CalculateScan`PlotterScanner`Private`dualCurveLastParamaters$$ = {{
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$}, 
                    CalculateScan`PlotterScanner`Private`dualCurveCountFactor$\
$, CalculateScan`PlotterScanner`Private`dualCurvePoints}]; 
                    CalculateScan`PlotterScanner`Private`dualCurvePlot = 
                    Graphics[{
                    Directive[
                    Opacity[
                    CalculateScan`PlotterScanner`Private`dualCurveOpacity$$], 
                    CalculateScan`PlotterScanner`Private`dualCurveColor$$, 
                    Thickness[
                    10^CalculateScan`PlotterScanner`Private`\
dualCurveThickness$$]], 
                    If[
                    CalculateScan`PlotterScanner`Private`dualCurveTF$$, 
                    CalculateScan`PlotterScanner`Private`dualCurvePlotCurves$$\
, {}]}]; If[
                    And[
                    CalculateScan`PlotterScanner`Private`inverseCurveTF$$, 
                    CalculateScan`PlotterScanner`Private`\
inverseLastParamaters$$ =!= {{
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$}, 
                    CalculateScan`PlotterScanner`Private`\
inverseCurveCountFactor$$, 
                    CalculateScan`PlotterScanner`Private`inverseCurvePoints$$,
                     CalculateScan`PlotterScanner`Private`\
inverseCurveCountFactor$$, 
                    CalculateScan`PlotterScanner`Private`\
inverseCurveCircleRadiusFactor$$}], 
                    If[CalculateScan`PlotterScanner`Private`inverseCurveTF$$, 
                    CalculateScan`PlotterScanner`Private`\
inverseCurvePlotCurves$$ = (Cases[
                    Normal[#], 
                    Blank[Line], {0, Infinity}]& )[
                    
                    With[{CalculateScan`PlotterScanner`Private`\
inverseCurveCount$ = 
                    If[CalculateScan`PlotterScanner`Private`\
inverseCurvePoints$$ === "grid", 
                    Max[1, 
                    Round[
                    16 CalculateScan`PlotterScanner`Private`\
inverseCurveCountFactor$$]], 
                    Max[1, 
                    Round[
                    120 CalculateScan`PlotterScanner`Private`\
inverseCurveCountFactor$$]]], CalculateScan`PlotterScanner`Private`R$ = 
                    Function[{CalculateScan`PlotterScanner`Private`y, 
                    CalculateScan`PlotterScanner`Private`L}, (
                    Sign[CalculateScan`PlotterScanner`Private`y] 
                    CalculateScan`PlotterScanner`Private`L) Tan[
                    Abs[CalculateScan`PlotterScanner`Private`y]]^1][
                    CalculateScan`PlotterScanner`Private`\
inverseCurveCircleRadiusFactor$$, 1] 
                    Abs[CalculateScan`PlotterScanner`Private`X2$ - 
                    CalculateScan`PlotterScanner`Private`X1$]}, 
                    If[
                    CalculateScan`PlotterScanner`Private`inverseCurvePoints$$ === 
                    "grid", 
                    Table[
                    
                    With[{CalculateScan`PlotterScanner`Private`px$ = 
                    CalculateScan`PlotterScanner`Private`px, 
                    CalculateScan`PlotterScanner`Private`py$ = 
                    CalculateScan`PlotterScanner`Private`py}, 
                    
                    ParametricPlot[{
                    CalculateScan`PlotterScanner`Private`px$, 
                    CalculateScan`PlotterScanner`Private`py$} + (
                    CalculateScan`PlotterScanner`Private`R$^2 {
                    Global`x - CalculateScan`PlotterScanner`Private`px$, 
                    CompiledFunction[{8, 8., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    2}}, {{-4, {2, 0, 2}}, {0.03125, {3, 0, 1}}, {
                    8, {2, 0, 3}}, {1, {2, 0, 1}}, {4, {2, 0, 0}}}, {0, 4, 6, 
                    0, 0}, {{10, 0, 2}, {16, 2, 0, 2}, {40, 34, 3, 0, 2, 3, 0,
                     3}, {10, 2, 2}, {16, 2, 0, 2}, {40, 56, 3, 0, 0, 3, 0, 
                    4}, {10, 3, 5}, {16, 5, 4, 5}, {10, 1, 4}, {13, 4, 2, 5, 
                    4}, {16, 1, 3, 4, 2}, {1}}, 
                    
                    Function[{Global`x}, (
                    E^(4 Global`x) (1 - 4 Global`x + 8 Global`x^2))/32], 
                    Evaluate][Global`x] - 
                    CalculateScan`PlotterScanner`Private`py$})/((Global`x - 
                    CalculateScan`PlotterScanner`Private`px$)^2 + (
                    CompiledFunction[{8, 8., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    2}}, {{-4, {2, 0, 2}}, {0.03125, {3, 0, 1}}, {
                    8, {2, 0, 3}}, {1, {2, 0, 1}}, {4, {2, 0, 0}}}, {0, 4, 6, 
                    0, 0}, {{10, 0, 2}, {16, 2, 0, 2}, {40, 34, 3, 0, 2, 3, 0,
                     3}, {10, 2, 2}, {16, 2, 0, 2}, {40, 56, 3, 0, 0, 3, 0, 
                    4}, {10, 3, 5}, {16, 5, 4, 5}, {10, 1, 4}, {13, 4, 2, 5, 
                    4}, {16, 1, 3, 4, 2}, {1}}, 
                    
                    Function[{Global`x}, (
                    E^(4 Global`x) (1 - 4 Global`x + 8 Global`x^2))/32], 
                    Evaluate][Global`x] - 
                    CalculateScan`PlotterScanner`Private`py$)^2), {
                    Global`x, Min[CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$] - 
                    CalculateScan`PlotterScanner`Private`\[CapitalDelta]X$/2, 
                    Max[CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$] + 
                    CalculateScan`PlotterScanner`Private`\[CapitalDelta]X$/2},
                     PlotRange -> CalculateScan`PlotterScanner`Private`pRY$, 
                    Evaluated -> False]], {
                    CalculateScan`PlotterScanner`Private`px, 
                    CalculateScan`PlotterScanner`Private`xL$, 
                    CalculateScan`PlotterScanner`Private`xU$, (
                    CalculateScan`PlotterScanner`Private`xU$ - 
                    CalculateScan`PlotterScanner`Private`xL$)/
                    CalculateScan`PlotterScanner`Private`inverseCurveCount$}, \
{CalculateScan`PlotterScanner`Private`py, 
                    CalculateScan`PlotterScanner`Private`yL$, 
                    CalculateScan`PlotterScanner`Private`yU$, (
                    CalculateScan`PlotterScanner`Private`yU$ - 
                    CalculateScan`PlotterScanner`Private`yL$)/
                    CalculateScan`PlotterScanner`Private`inverseCurveCount$}], 
                    Table[
                    
                    With[{CalculateScan`PlotterScanner`Private`px$ = 
                    CalculateScan`PlotterScanner`Private`px, 
                    CalculateScan`PlotterScanner`Private`py$ = 
                    CompiledFunction[{8, 8., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    2}}, {{-4, {2, 0, 2}}, {0.03125, {3, 0, 1}}, {
                    8, {2, 0, 3}}, {1, {2, 0, 1}}, {4, {2, 0, 0}}}, {0, 4, 6, 
                    0, 0}, {{10, 0, 2}, {16, 2, 0, 2}, {40, 34, 3, 0, 2, 3, 0,
                     3}, {10, 2, 2}, {16, 2, 0, 2}, {40, 56, 3, 0, 0, 3, 0, 
                    4}, {10, 3, 5}, {16, 5, 4, 5}, {10, 1, 4}, {13, 4, 2, 5, 
                    4}, {16, 1, 3, 4, 2}, {1}}, 
                    
                    Function[{Global`x}, (
                    E^(4 Global`x) (1 - 4 Global`x + 8 Global`x^2))/32], 
                    Evaluate][CalculateScan`PlotterScanner`Private`px]}, 
                    
                    ParametricPlot[{
                    CalculateScan`PlotterScanner`Private`px$, 
                    CalculateScan`PlotterScanner`Private`py$} + (
                    CalculateScan`PlotterScanner`Private`R$^2 {
                    Global`x - CalculateScan`PlotterScanner`Private`px$, 
                    CompiledFunction[{8, 8., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    2}}, {{-4, {2, 0, 2}}, {0.03125, {3, 0, 1}}, {
                    8, {2, 0, 3}}, {1, {2, 0, 1}}, {4, {2, 0, 0}}}, {0, 4, 6, 
                    0, 0}, {{10, 0, 2}, {16, 2, 0, 2}, {40, 34, 3, 0, 2, 3, 0,
                     3}, {10, 2, 2}, {16, 2, 0, 2}, {40, 56, 3, 0, 0, 3, 0, 
                    4}, {10, 3, 5}, {16, 5, 4, 5}, {10, 1, 4}, {13, 4, 2, 5, 
                    4}, {16, 1, 3, 4, 2}, {1}}, 
                    
                    Function[{Global`x}, (
                    E^(4 Global`x) (1 - 4 Global`x + 8 Global`x^2))/32], 
                    Evaluate][Global`x] - 
                    CalculateScan`PlotterScanner`Private`py$})/((Global`x - 
                    CalculateScan`PlotterScanner`Private`px$)^2 + (
                    CompiledFunction[{8, 8., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    2}}, {{-4, {2, 0, 2}}, {0.03125, {3, 0, 1}}, {
                    8, {2, 0, 3}}, {1, {2, 0, 1}}, {4, {2, 0, 0}}}, {0, 4, 6, 
                    0, 0}, {{10, 0, 2}, {16, 2, 0, 2}, {40, 34, 3, 0, 2, 3, 0,
                     3}, {10, 2, 2}, {16, 2, 0, 2}, {40, 56, 3, 0, 0, 3, 0, 
                    4}, {10, 3, 5}, {16, 5, 4, 5}, {10, 1, 4}, {13, 4, 2, 5, 
                    4}, {16, 1, 3, 4, 2}, {1}}, 
                    
                    Function[{Global`x}, (
                    E^(4 Global`x) (1 - 4 Global`x + 8 Global`x^2))/32], 
                    Evaluate][Global`x] - 
                    CalculateScan`PlotterScanner`Private`py$)^2), {
                    Global`x, Min[CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$] - 
                    CalculateScan`PlotterScanner`Private`\[CapitalDelta]X$/2, 
                    Max[CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$] + 
                    CalculateScan`PlotterScanner`Private`\[CapitalDelta]X$/2},
                     PlotRange -> CalculateScan`PlotterScanner`Private`pRY$, 
                    Evaluated -> False]], {
                    CalculateScan`PlotterScanner`Private`px, 
                    CalculateScan`PlotterScanner`Private`xL$, 
                    CalculateScan`PlotterScanner`Private`xU$, (
                    CalculateScan`PlotterScanner`Private`xU$ - 
                    CalculateScan`PlotterScanner`Private`xL$)/
                    CalculateScan`PlotterScanner`Private`inverseCurveCount$}]]\
]], {}]; CalculateScan`PlotterScanner`Private`inverseLastParamaters$$ = {{
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$}, 
                    CalculateScan`PlotterScanner`Private`\
inverseCurveCountFactor$$, 
                    CalculateScan`PlotterScanner`Private`inverseCurvePoints$$,
                     
                    CalculateScan`PlotterScanner`Private`\
inverseCurveCountFactor$$, 
                    CalculateScan`PlotterScanner`Private`\
inverseCurveCircleRadiusFactor$$}]; 
                    CalculateScan`PlotterScanner`Private`inverseCurvePlot = 
                    Graphics[{
                    Directive[
                    Opacity[
                    CalculateScan`PlotterScanner`Private`inverseCurveOpacity$$\
], CalculateScan`PlotterScanner`Private`inverseCurveColor$$, 
                    Thickness[
                    10^CalculateScan`PlotterScanner`Private`\
inverseCurveThickness$$]], 
                    If[
                    CalculateScan`PlotterScanner`Private`inverseCurveTF$$, 
                    CalculateScan`PlotterScanner`Private`\
inverseCurvePlotCurves$$, {}]}]; If[
                    And[
                    CalculateScan`PlotterScanner`Private`orthotomicCurveTF$$, 
                    CalculateScan`PlotterScanner`Private`\
orthotomicLastParamaters$$ =!= {{
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$}, 
                    CalculateScan`PlotterScanner`Private`\
orthotomicCurveCountFactor$$, 
                    CalculateScan`PlotterScanner`Private`\
orthotomicCurvePoints$$}], 
                    If[CalculateScan`PlotterScanner`Private`orthotomicCurveTF$\
$, CalculateScan`PlotterScanner`Private`orthotomicCurvePlotCurves$$ = (Cases[
                    Normal[#], 
                    Blank[Line], {0, Infinity}]& )[
                    
                    With[{CalculateScan`PlotterScanner`Private`\
orthotomicCurveCount$ = 
                    If[CalculateScan`PlotterScanner`Private`\
orthotomicCurvePoints$$ === "grid", 
                    Max[1, 
                    Round[
                    16 CalculateScan`PlotterScanner`Private`\
orthotomicCurveCountFactor$$]], 
                    Max[1, 
                    Round[
                    120 CalculateScan`PlotterScanner`Private`\
orthotomicCurveCountFactor$$]]]}, 
                    If[
                    CalculateScan`PlotterScanner`Private`\
orthotomicCurvePoints$$ === "grid", 
                    Table[
                    
                    With[{CalculateScan`PlotterScanner`Private`px$ = 
                    CalculateScan`PlotterScanner`Private`px, 
                    CalculateScan`PlotterScanner`Private`py$ = 
                    CalculateScan`PlotterScanner`Private`py}, 
                    ParametricPlot[{Global`x, 
                    CompiledFunction[{8, 8., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    2}}, {{-4, {2, 0, 2}}, {0.03125, {3, 0, 1}}, {
                    8, {2, 0, 3}}, {1, {2, 0, 1}}, {4, {2, 0, 0}}}, {0, 4, 6, 
                    0, 0}, {{10, 0, 2}, {16, 2, 0, 2}, {40, 34, 3, 0, 2, 3, 0,
                     3}, {10, 2, 2}, {16, 2, 0, 2}, {40, 56, 3, 0, 0, 3, 0, 
                    4}, {10, 3, 5}, {16, 5, 4, 5}, {10, 1, 4}, {13, 4, 2, 5, 
                    4}, {16, 1, 3, 4, 2}, {1}}, 
                    
                    Function[{Global`x}, (
                    E^(4 Global`x) (1 - 4 Global`x + 8 Global`x^2))/32], 
                    Evaluate][Global`x]} + {((-2) 
                    CompiledFunction[{8, 8., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    4}}, {{-4, {2, 0, 1}}, {0.03125, {3, 0, 3}}, {
                    8, {2, 0, 4}}, {0.125, {3, 0, 6}}, {16, {2, 0, 2}}, {
                    1, {2, 0, 3}}, {4, {2, 0, 0}}}, {0, 5, 9, 0, 
                    0}, {{10, 0, 1}, {16, 1, 0, 1}, {40, 34, 3, 0, 1, 3, 0, 
                    2}, {10, 2, 4}, {16, 4, 0, 4}, {10, 1, 5}, {13, 5, 4, 
                    5}, {16, 3, 2, 5, 4}, {10, 1, 5}, {16, 5, 0, 5}, {40, 56, 
                    3, 0, 0, 3, 0, 7}, {10, 4, 8}, {16, 8, 7, 8}, {10, 3, 
                    7}, {13, 7, 5, 8, 7}, {16, 6, 2, 7, 5}, {13, 4, 5, 4}, {
                    1}}, 
                    Function[{Global`x}, 
                    
                    Block[{Compile`$167, Compile`$285}, 
                    Compile`$167 = 4 Global`x; 
                    Compile`$285 = E^Compile`$167; (
                    Compile`$285 (-4 + 16 Global`x))/
                    32 + (Compile`$285 (1 - 4 Global`x + 8 Global`x^2))/8]], 
                    Evaluate][Global`x]) (
                    1 (CompiledFunction[{8, 8., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    2}}, {{-4, {2, 0, 2}}, {0.03125, {3, 0, 1}}, {
                    8, {2, 0, 3}}, {1, {2, 0, 1}}, {4, {2, 0, 0}}}, {0, 4, 6, 
                    0, 0}, {{10, 0, 2}, {16, 2, 0, 2}, {40, 34, 3, 0, 2, 3, 0,
                     3}, {10, 2, 2}, {16, 2, 0, 2}, {40, 56, 3, 0, 0, 3, 0, 
                    4}, {10, 3, 5}, {16, 5, 4, 5}, {10, 1, 4}, {13, 4, 2, 5, 
                    4}, {16, 1, 3, 4, 2}, {1}}, 
                    Function[{Global`x}, (E^(4 Global`x) (1 - 4 Global`x + 
                    8 Global`x^2))/32], Evaluate][Global`x] - 
                    CalculateScan`PlotterScanner`Private`py$) - 
                    CompiledFunction[{8, 8., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    4}}, {{-4, {2, 0, 1}}, {0.03125, {3, 0, 3}}, {
                    8, {2, 0, 4}}, {0.125, {3, 0, 6}}, {16, {2, 0, 2}}, {
                    1, {2, 0, 3}}, {4, {2, 0, 0}}}, {0, 5, 9, 0, 
                    0}, {{10, 0, 1}, {16, 1, 0, 1}, {40, 34, 3, 0, 1, 3, 0, 
                    2}, {10, 2, 4}, {16, 4, 0, 4}, {10, 1, 5}, {13, 5, 4, 
                    5}, {16, 3, 2, 5, 4}, {10, 1, 5}, {16, 5, 0, 5}, {40, 56, 
                    3, 0, 0, 3, 0, 7}, {10, 4, 8}, {16, 8, 7, 8}, {10, 3, 
                    7}, {13, 7, 5, 8, 7}, {16, 6, 2, 7, 5}, {13, 4, 5, 4}, {
                    1}}, 
                    Function[{Global`x}, 
                    
                    Block[{Compile`$167, Compile`$285}, 
                    Compile`$167 = 4 Global`x; 
                    Compile`$285 = E^Compile`$167; (
                    Compile`$285 (-4 + 16 Global`x))/
                    32 + (Compile`$285 (1 - 4 Global`x + 8 Global`x^2))/8]], 
                    Evaluate][Global`x] (Global`x - 
                    CalculateScan`PlotterScanner`Private`px$)), (2 1) (
                    1 (CompiledFunction[{8, 8., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    2}}, {{-4, {2, 0, 2}}, {0.03125, {3, 0, 1}}, {
                    8, {2, 0, 3}}, {1, {2, 0, 1}}, {4, {2, 0, 0}}}, {0, 4, 6, 
                    0, 0}, {{10, 0, 2}, {16, 2, 0, 2}, {40, 34, 3, 0, 2, 3, 0,
                     3}, {10, 2, 2}, {16, 2, 0, 2}, {40, 56, 3, 0, 0, 3, 0, 
                    4}, {10, 3, 5}, {16, 5, 4, 5}, {10, 1, 4}, {13, 4, 2, 5, 
                    4}, {16, 1, 3, 4, 2}, {1}}, 
                    
                    Function[{Global`x}, (E^(4 Global`x) (1 - 4 Global`x + 
                    8 Global`x^2))/32], Evaluate][Global`x] - 
                    CalculateScan`PlotterScanner`Private`py$) - 
                    CompiledFunction[{8, 8., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    4}}, {{-4, {2, 0, 1}}, {0.03125, {3, 0, 3}}, {
                    8, {2, 0, 4}}, {0.125, {3, 0, 6}}, {16, {2, 0, 2}}, {
                    1, {2, 0, 3}}, {4, {2, 0, 0}}}, {0, 5, 9, 0, 
                    0}, {{10, 0, 1}, {16, 1, 0, 1}, {40, 34, 3, 0, 1, 3, 0, 
                    2}, {10, 2, 4}, {16, 4, 0, 4}, {10, 1, 5}, {13, 5, 4, 
                    5}, {16, 3, 2, 5, 4}, {10, 1, 5}, {16, 5, 0, 5}, {40, 56, 
                    3, 0, 0, 3, 0, 7}, {10, 4, 8}, {16, 8, 7, 8}, {10, 3, 
                    7}, {13, 7, 5, 8, 7}, {16, 6, 2, 7, 5}, {13, 4, 5, 4}, {
                    1}}, 
                    Function[{Global`x}, 
                    
                    Block[{Compile`$167, Compile`$285}, 
                    Compile`$167 = 4 Global`x; 
                    Compile`$285 = E^Compile`$167; (
                    Compile`$285 (-4 + 16 Global`x))/
                    32 + (Compile`$285 (1 - 4 Global`x + 8 Global`x^2))/8]], 
                    Evaluate][Global`x] (Global`x - 
                    CalculateScan`PlotterScanner`Private`px$))}/(1 + 
                    CompiledFunction[{8, 8., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    4}}, {{-4, {2, 0, 1}}, {0.03125, {3, 0, 3}}, {
                    8, {2, 0, 4}}, {0.125, {3, 0, 6}}, {16, {2, 0, 2}}, {
                    1, {2, 0, 3}}, {4, {2, 0, 0}}}, {0, 5, 9, 0, 
                    0}, {{10, 0, 1}, {16, 1, 0, 1}, {40, 34, 3, 0, 1, 3, 0, 
                    2}, {10, 2, 4}, {16, 4, 0, 4}, {10, 1, 5}, {13, 5, 4, 
                    5}, {16, 3, 2, 5, 4}, {10, 1, 5}, {16, 5, 0, 5}, {40, 56, 
                    3, 0, 0, 3, 0, 7}, {10, 4, 8}, {16, 8, 7, 8}, {10, 3, 
                    7}, {13, 7, 5, 8, 7}, {16, 6, 2, 7, 5}, {13, 4, 5, 4}, {
                    1}}, 
                    Function[{Global`x}, 
                    
                    Block[{Compile`$167, Compile`$285}, 
                    Compile`$167 = 4 Global`x; 
                    Compile`$285 = E^Compile`$167; (
                    Compile`$285 (-4 + 16 Global`x))/
                    32 + (Compile`$285 (1 - 4 Global`x + 8 Global`x^2))/8]], 
                    Evaluate][Global`x]^2), {
                    Global`x, CalculateScan`PlotterScanner`Private`xL$, 
                    CalculateScan`PlotterScanner`Private`xU$}, 
                    PlotRange -> {
                    CalculateScan`PlotterScanner`Private`pRX$, 
                    CalculateScan`PlotterScanner`Private`pRY$}, Evaluated -> 
                    False]], {CalculateScan`PlotterScanner`Private`px, 
                    CalculateScan`PlotterScanner`Private`xL$, 
                    CalculateScan`PlotterScanner`Private`xU$, (
                    CalculateScan`PlotterScanner`Private`xU$ - 
                    CalculateScan`PlotterScanner`Private`xL$)/
                    CalculateScan`PlotterScanner`Private`orthotomicCurveCount$\
}, {CalculateScan`PlotterScanner`Private`py, 
                    CalculateScan`PlotterScanner`Private`yL$, 
                    CalculateScan`PlotterScanner`Private`yU$, (
                    CalculateScan`PlotterScanner`Private`yU$ - 
                    CalculateScan`PlotterScanner`Private`yL$)/
                    CalculateScan`PlotterScanner`Private`orthotomicCurveCount$\
}], 
                    Table[
                    
                    With[{CalculateScan`PlotterScanner`Private`px$ = 
                    CalculateScan`PlotterScanner`Private`px, 
                    CalculateScan`PlotterScanner`Private`py$ = 
                    CompiledFunction[{8, 8., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    2}}, {{-4, {2, 0, 2}}, {0.03125, {3, 0, 1}}, {
                    8, {2, 0, 3}}, {1, {2, 0, 1}}, {4, {2, 0, 0}}}, {0, 4, 6, 
                    0, 0}, {{10, 0, 2}, {16, 2, 0, 2}, {40, 34, 3, 0, 2, 3, 0,
                     3}, {10, 2, 2}, {16, 2, 0, 2}, {40, 56, 3, 0, 0, 3, 0, 
                    4}, {10, 3, 5}, {16, 5, 4, 5}, {10, 1, 4}, {13, 4, 2, 5, 
                    4}, {16, 1, 3, 4, 2}, {1}}, 
                    
                    Function[{Global`x}, (
                    E^(4 Global`x) (1 - 4 Global`x + 8 Global`x^2))/32], 
                    Evaluate][Global`x]}, 
                    ParametricPlot[{Global`x, 
                    CompiledFunction[{8, 8., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    2}}, {{-4, {2, 0, 2}}, {0.03125, {3, 0, 1}}, {
                    8, {2, 0, 3}}, {1, {2, 0, 1}}, {4, {2, 0, 0}}}, {0, 4, 6, 
                    0, 0}, {{10, 0, 2}, {16, 2, 0, 2}, {40, 34, 3, 0, 2, 3, 0,
                     3}, {10, 2, 2}, {16, 2, 0, 2}, {40, 56, 3, 0, 0, 3, 0, 
                    4}, {10, 3, 5}, {16, 5, 4, 5}, {10, 1, 4}, {13, 4, 2, 5, 
                    4}, {16, 1, 3, 4, 2}, {1}}, 
                    
                    Function[{Global`x}, (
                    E^(4 Global`x) (1 - 4 Global`x + 8 Global`x^2))/32], 
                    Evaluate][Global`x]} + {((-2) 
                    CompiledFunction[{8, 8., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    4}}, {{-4, {2, 0, 1}}, {0.03125, {3, 0, 3}}, {
                    8, {2, 0, 4}}, {0.125, {3, 0, 6}}, {16, {2, 0, 2}}, {
                    1, {2, 0, 3}}, {4, {2, 0, 0}}}, {0, 5, 9, 0, 
                    0}, {{10, 0, 1}, {16, 1, 0, 1}, {40, 34, 3, 0, 1, 3, 0, 
                    2}, {10, 2, 4}, {16, 4, 0, 4}, {10, 1, 5}, {13, 5, 4, 
                    5}, {16, 3, 2, 5, 4}, {10, 1, 5}, {16, 5, 0, 5}, {40, 56, 
                    3, 0, 0, 3, 0, 7}, {10, 4, 8}, {16, 8, 7, 8}, {10, 3, 
                    7}, {13, 7, 5, 8, 7}, {16, 6, 2, 7, 5}, {13, 4, 5, 4}, {
                    1}}, 
                    Function[{Global`x}, 
                    
                    Block[{Compile`$167, Compile`$285}, 
                    Compile`$167 = 4 Global`x; 
                    Compile`$285 = E^Compile`$167; (
                    Compile`$285 (-4 + 16 Global`x))/
                    32 + (Compile`$285 (1 - 4 Global`x + 8 Global`x^2))/8]], 
                    Evaluate][Global`x]) (
                    1 (CompiledFunction[{8, 8., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    2}}, {{-4, {2, 0, 2}}, {0.03125, {3, 0, 1}}, {
                    8, {2, 0, 3}}, {1, {2, 0, 1}}, {4, {2, 0, 0}}}, {0, 4, 6, 
                    0, 0}, {{10, 0, 2}, {16, 2, 0, 2}, {40, 34, 3, 0, 2, 3, 0,
                     3}, {10, 2, 2}, {16, 2, 0, 2}, {40, 56, 3, 0, 0, 3, 0, 
                    4}, {10, 3, 5}, {16, 5, 4, 5}, {10, 1, 4}, {13, 4, 2, 5, 
                    4}, {16, 1, 3, 4, 2}, {1}}, 
                    
                    Function[{Global`x}, (E^(4 Global`x) (1 - 4 Global`x + 
                    8 Global`x^2))/32], Evaluate][Global`x] - 
                    CalculateScan`PlotterScanner`Private`py$) - 
                    CompiledFunction[{8, 8., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    4}}, {{-4, {2, 0, 1}}, {0.03125, {3, 0, 3}}, {
                    8, {2, 0, 4}}, {0.125, {3, 0, 6}}, {16, {2, 0, 2}}, {
                    1, {2, 0, 3}}, {4, {2, 0, 0}}}, {0, 5, 9, 0, 
                    0}, {{10, 0, 1}, {16, 1, 0, 1}, {40, 34, 3, 0, 1, 3, 0, 
                    2}, {10, 2, 4}, {16, 4, 0, 4}, {10, 1, 5}, {13, 5, 4, 
                    5}, {16, 3, 2, 5, 4}, {10, 1, 5}, {16, 5, 0, 5}, {40, 56, 
                    3, 0, 0, 3, 0, 7}, {10, 4, 8}, {16, 8, 7, 8}, {10, 3, 
                    7}, {13, 7, 5, 8, 7}, {16, 6, 2, 7, 5}, {13, 4, 5, 4}, {
                    1}}, 
                    Function[{Global`x}, 
                    
                    Block[{Compile`$167, Compile`$285}, 
                    Compile`$167 = 4 Global`x; 
                    Compile`$285 = E^Compile`$167; (
                    Compile`$285 (-4 + 16 Global`x))/
                    32 + (Compile`$285 (1 - 4 Global`x + 8 Global`x^2))/8]], 
                    Evaluate][Global`x] (Global`x - 
                    CalculateScan`PlotterScanner`Private`px$)), (2 1) (
                    1 (CompiledFunction[{8, 8., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    2}}, {{-4, {2, 0, 2}}, {0.03125, {3, 0, 1}}, {
                    8, {2, 0, 3}}, {1, {2, 0, 1}}, {4, {2, 0, 0}}}, {0, 4, 6, 
                    0, 0}, {{10, 0, 2}, {16, 2, 0, 2}, {40, 34, 3, 0, 2, 3, 0,
                     3}, {10, 2, 2}, {16, 2, 0, 2}, {40, 56, 3, 0, 0, 3, 0, 
                    4}, {10, 3, 5}, {16, 5, 4, 5}, {10, 1, 4}, {13, 4, 2, 5, 
                    4}, {16, 1, 3, 4, 2}, {1}}, 
                    
                    Function[{Global`x}, (E^(4 Global`x) (1 - 4 Global`x + 
                    8 Global`x^2))/32], Evaluate][Global`x] - 
                    CalculateScan`PlotterScanner`Private`py$) - 
                    CompiledFunction[{8, 8., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    4}}, {{-4, {2, 0, 1}}, {0.03125, {3, 0, 3}}, {
                    8, {2, 0, 4}}, {0.125, {3, 0, 6}}, {16, {2, 0, 2}}, {
                    1, {2, 0, 3}}, {4, {2, 0, 0}}}, {0, 5, 9, 0, 
                    0}, {{10, 0, 1}, {16, 1, 0, 1}, {40, 34, 3, 0, 1, 3, 0, 
                    2}, {10, 2, 4}, {16, 4, 0, 4}, {10, 1, 5}, {13, 5, 4, 
                    5}, {16, 3, 2, 5, 4}, {10, 1, 5}, {16, 5, 0, 5}, {40, 56, 
                    3, 0, 0, 3, 0, 7}, {10, 4, 8}, {16, 8, 7, 8}, {10, 3, 
                    7}, {13, 7, 5, 8, 7}, {16, 6, 2, 7, 5}, {13, 4, 5, 4}, {
                    1}}, 
                    Function[{Global`x}, 
                    
                    Block[{Compile`$167, Compile`$285}, 
                    Compile`$167 = 4 Global`x; 
                    Compile`$285 = E^Compile`$167; (
                    Compile`$285 (-4 + 16 Global`x))/
                    32 + (Compile`$285 (1 - 4 Global`x + 8 Global`x^2))/8]], 
                    Evaluate][Global`x] (Global`x - 
                    CalculateScan`PlotterScanner`Private`px$))}/(1 + 
                    CompiledFunction[{8, 8., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    4}}, {{-4, {2, 0, 1}}, {0.03125, {3, 0, 3}}, {
                    8, {2, 0, 4}}, {0.125, {3, 0, 6}}, {16, {2, 0, 2}}, {
                    1, {2, 0, 3}}, {4, {2, 0, 0}}}, {0, 5, 9, 0, 
                    0}, {{10, 0, 1}, {16, 1, 0, 1}, {40, 34, 3, 0, 1, 3, 0, 
                    2}, {10, 2, 4}, {16, 4, 0, 4}, {10, 1, 5}, {13, 5, 4, 
                    5}, {16, 3, 2, 5, 4}, {10, 1, 5}, {16, 5, 0, 5}, {40, 56, 
                    3, 0, 0, 3, 0, 7}, {10, 4, 8}, {16, 8, 7, 8}, {10, 3, 
                    7}, {13, 7, 5, 8, 7}, {16, 6, 2, 7, 5}, {13, 4, 5, 4}, {
                    1}}, 
                    Function[{Global`x}, 
                    Block[{Compile`$167, Compile`$285}, 
                    Compile`$167 = 4 Global`x; 
                    Compile`$285 = E^Compile`$167; (
                    Compile`$285 (-4 + 16 Global`x))/
                    32 + (Compile`$285 (1 - 4 Global`x + 8 Global`x^2))/8]], 
                    Evaluate][Global`x]^2), {
                    Global`x, CalculateScan`PlotterScanner`Private`xL$, 
                    CalculateScan`PlotterScanner`Private`xU$}, 
                    PlotRange -> {
                    CalculateScan`PlotterScanner`Private`pRX$, 
                    CalculateScan`PlotterScanner`Private`pRY$}, Evaluated -> 
                    False]], {CalculateScan`PlotterScanner`Private`px, 
                    CalculateScan`PlotterScanner`Private`xL$, 
                    CalculateScan`PlotterScanner`Private`xU$, (
                    CalculateScan`PlotterScanner`Private`xU$ - 
                    CalculateScan`PlotterScanner`Private`xL$)/
                    CalculateScan`PlotterScanner`Private`orthotomicCurveCount$\
}]]]], {}]; 
                    CalculateScan`PlotterScanner`Private`\
orthotomicLastParamaters$$ = {{
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$}, 
                    CalculateScan`PlotterScanner`Private`\
orthotomicCurveCountFactor$$, 
                    CalculateScan`PlotterScanner`Private`\
orthotomicCurvePoints$$}]; 
                    CalculateScan`PlotterScanner`Private`orthotomicCurvePlot = 
                    Graphics[{
                    Directive[
                    CalculateScan`PlotterScanner`Private`orthotomicCurveColor$\
$, 
                    Opacity[
                    CalculateScan`PlotterScanner`Private`\
orthotomicCurveOpacity$$], 
                    Thickness[
                    10^CalculateScan`PlotterScanner`Private`\
orthotomicCurveThickness$$]], 
                    If[
                    CalculateScan`PlotterScanner`Private`orthotomicCurveTF$$, 
                    CalculateScan`PlotterScanner`Private`\
orthotomicCurvePlotCurves$$, {}]}]; 
                    CalculateScan`PlotterScanner`Private`getSplineSegments[
                    Line[
                    Pattern[CalculateScan`PlotterScanner`Private`l, 
                    Blank[]]]] := 
                    Module[{}, 
                    CalculateScan`PlotterScanner`Private`posis = 
                    Position[CalculateScan`PlotterScanner`Private`l, 
                    Except[{
                    Blank[Real], 
                    Blank[Real]}], {1}, Heads -> False]; 
                    If[CalculateScan`PlotterScanner`Private`posis === {}, 
                    BSplineCurve[CalculateScan`PlotterScanner`Private`l], 
                    Map[BSplineCurve, 
                    Select[
                    Map[DeleteCases[
                    Take[CalculateScan`PlotterScanner`Private`l, #], 
                    Except[{
                    Blank[Real], 
                    Blank[Real]}]]& , 
                    Partition[
                    Flatten[{1, 
                    
                    Map[{# - 1, # + 1}& , 
                    CalculateScan`PlotterScanner`Private`posis], 
                    Length[CalculateScan`PlotterScanner`Private`l]}], 2]], 
                    Length[#] >= 3& ]]]]; If[
                    And[
                    CalculateScan`PlotterScanner`Private`isopticCurveTF$$, 
                    CalculateScan`PlotterScanner`Private`\
isopticLastParamaters$$ =!= {{
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$}, 
                    CalculateScan`PlotterScanner`Private`isopticCurveAngle$$}]\
, CalculateScan`PlotterScanner`Private`isopticCurvePlotCurves$$ = Quiet[
                    If[
                    CalculateScan`PlotterScanner`Private`isopticCurveTF$$, 
                    
                    With[{CalculateScan`PlotterScanner`Private`\[Alpha]$ = 
                    CalculateScan`PlotterScanner`Private`isopticCurveAngle$$},
                     CalculateScan`PlotterScanner`Private`cpIsoptic = 
                    ContourPlot[(1 + CompiledFunction[{8, 8., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    4}}, {{-4, {2, 0, 1}}, {0.03125, {3, 0, 3}}, {
                    8, {2, 0, 4}}, {0.125, {3, 0, 6}}, {16, {2, 0, 2}}, {
                    1, {2, 0, 3}}, {4, {2, 0, 0}}}, {0, 5, 9, 0, 
                    0}, {{10, 0, 1}, {16, 1, 0, 1}, {40, 34, 3, 0, 1, 3, 0, 
                    2}, {10, 2, 4}, {16, 4, 0, 4}, {10, 1, 5}, {13, 5, 4, 
                    5}, {16, 3, 2, 5, 4}, {10, 1, 5}, {16, 5, 0, 5}, {40, 56, 
                    3, 0, 0, 3, 0, 7}, {10, 4, 8}, {16, 8, 7, 8}, {10, 3, 
                    7}, {13, 7, 5, 8, 7}, {16, 6, 2, 7, 5}, {13, 4, 5, 4}, {
                    1}}, 
                    Function[{Global`x}, 
                    
                    Block[{Compile`$167, Compile`$285}, 
                    Compile`$167 = 4 Global`x; 
                    Compile`$285 = E^Compile`$167; (
                    Compile`$285 (-4 + 16 Global`x))/
                    32 + (Compile`$285 (1 - 4 Global`x + 8 Global`x^2))/8]], 
                    Evaluate][CalculateScan`PlotterScanner`Private`x1$$] 
                    CompiledFunction[{8, 8., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    4}}, {{-4, {2, 0, 1}}, {0.03125, {3, 0, 3}}, {
                    8, {2, 0, 4}}, {0.125, {3, 0, 6}}, {16, {2, 0, 2}}, {
                    1, {2, 0, 3}}, {4, {2, 0, 0}}}, {0, 5, 9, 0, 
                    0}, {{10, 0, 1}, {16, 1, 0, 1}, {40, 34, 3, 0, 1, 3, 0, 
                    2}, {10, 2, 4}, {16, 4, 0, 4}, {10, 1, 5}, {13, 5, 4, 
                    5}, {16, 3, 2, 5, 4}, {10, 1, 5}, {16, 5, 0, 5}, {40, 56, 
                    3, 0, 0, 3, 0, 7}, {10, 4, 8}, {16, 8, 7, 8}, {10, 3, 
                    7}, {13, 7, 5, 8, 7}, {16, 6, 2, 7, 5}, {13, 4, 5, 4}, {
                    1}}, 
                    Function[{Global`x}, 
                    
                    Block[{Compile`$167, Compile`$285}, 
                    Compile`$167 = 4 Global`x; 
                    Compile`$285 = E^Compile`$167; (
                    Compile`$285 (-4 + 16 Global`x))/
                    32 + (Compile`$285 (1 - 4 Global`x + 8 Global`x^2))/8]], 
                    Evaluate][CalculateScan`PlotterScanner`Private`x2$$])/
                    Sqrt[(1 + CompiledFunction[{8, 8., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    4}}, {{-4, {2, 0, 1}}, {0.03125, {3, 0, 3}}, {
                    8, {2, 0, 4}}, {0.125, {3, 0, 6}}, {16, {2, 0, 2}}, {
                    1, {2, 0, 3}}, {4, {2, 0, 0}}}, {0, 5, 9, 0, 
                    0}, {{10, 0, 1}, {16, 1, 0, 1}, {40, 34, 3, 0, 1, 3, 0, 
                    2}, {10, 2, 4}, {16, 4, 0, 4}, {10, 1, 5}, {13, 5, 4, 
                    5}, {16, 3, 2, 5, 4}, {10, 1, 5}, {16, 5, 0, 5}, {40, 56, 
                    3, 0, 0, 3, 0, 7}, {10, 4, 8}, {16, 8, 7, 8}, {10, 3, 
                    7}, {13, 7, 5, 8, 7}, {16, 6, 2, 7, 5}, {13, 4, 5, 4}, {
                    1}}, 
                    Function[{Global`x}, 
                    
                    Block[{Compile`$167, Compile`$285}, 
                    Compile`$167 = 4 Global`x; 
                    Compile`$285 = E^Compile`$167; (
                    Compile`$285 (-4 + 16 Global`x))/
                    32 + (Compile`$285 (1 - 4 Global`x + 8 Global`x^2))/8]], 
                    Evaluate][CalculateScan`PlotterScanner`Private`x1$$]^2) (
                    1 + CompiledFunction[{8, 8., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    4}}, {{-4, {2, 0, 1}}, {0.03125, {3, 0, 3}}, {
                    8, {2, 0, 4}}, {0.125, {3, 0, 6}}, {16, {2, 0, 2}}, {
                    1, {2, 0, 3}}, {4, {2, 0, 0}}}, {0, 5, 9, 0, 
                    0}, {{10, 0, 1}, {16, 1, 0, 1}, {40, 34, 3, 0, 1, 3, 0, 
                    2}, {10, 2, 4}, {16, 4, 0, 4}, {10, 1, 5}, {13, 5, 4, 
                    5}, {16, 3, 2, 5, 4}, {10, 1, 5}, {16, 5, 0, 5}, {40, 56, 
                    3, 0, 0, 3, 0, 7}, {10, 4, 8}, {16, 8, 7, 8}, {10, 3, 
                    7}, {13, 7, 5, 8, 7}, {16, 6, 2, 7, 5}, {13, 4, 5, 4}, {
                    1}}, 
                    Function[{Global`x}, 
                    
                    Block[{Compile`$167, Compile`$285}, 
                    Compile`$167 = 4 Global`x; 
                    Compile`$285 = E^Compile`$167; (
                    Compile`$285 (-4 + 16 Global`x))/
                    32 + (Compile`$285 (1 - 4 Global`x + 8 Global`x^2))/8]], 
                    Evaluate][CalculateScan`PlotterScanner`Private`x2$$]^2)] == 
                    Cos[CalculateScan`PlotterScanner`Private`\[Alpha]$], {
                    CalculateScan`PlotterScanner`Private`x1$$, (-2) Pi, 2 
                    Pi}, {CalculateScan`PlotterScanner`Private`x2$$, (-2) Pi, 
                    2 Pi}, Exclusions -> {
                    Function[{Global`x}, (E^(4 Global`x) (-4 + 16 Global`x))/
                    32 + (E^(4 Global`x) (1 - 4 Global`x + 8 Global`x^2))/8][
                    CalculateScan`PlotterScanner`Private`x1$$] - 
                    Function[{Global`x}, (E^(4 Global`x) (-4 + 16 Global`x))/
                    32 + (E^(4 Global`x) (1 - 4 Global`x + 8 Global`x^2))/8][
                    CalculateScan`PlotterScanner`Private`x2$$] == 0}, 
                    Evaluated -> False]; 
                    CalculateScan`PlotterScanner`Private`x1x2SCPCurves = Cases[
                    Normal[CalculateScan`PlotterScanner`Private`cpIsoptic], 
                    Blank[Line], Infinity]; 
                    If[CalculateScan`PlotterScanner`Private`x1x2SCPCurves === \
{}, {}, 
                    Map[
                    CalculateScan`PlotterScanner`Private`getSplineSegments, 
                    Map[
                    CalculateScan`PlotterScanner`Private`\
tangentIntersectionPoint[#, {
                    CompiledFunction[{8, 8., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    2}}, {{-4, {2, 0, 2}}, {0.03125, {3, 0, 1}}, {
                    8, {2, 0, 3}}, {1, {2, 0, 1}}, {4, {2, 0, 0}}}, {0, 4, 6, 
                    0, 0}, {{10, 0, 2}, {16, 2, 0, 2}, {40, 34, 3, 0, 2, 3, 0,
                     3}, {10, 2, 2}, {16, 2, 0, 2}, {40, 56, 3, 0, 0, 3, 0, 
                    4}, {10, 3, 5}, {16, 5, 4, 5}, {10, 1, 4}, {13, 4, 2, 5, 
                    4}, {16, 1, 3, 4, 2}, {1}}, 
                    
                    Function[{Global`x}, (
                    E^(4 Global`x) (1 - 4 Global`x + 8 Global`x^2))/32], 
                    Evaluate], 
                    CompiledFunction[{8, 8., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    4}}, {{-4, {2, 0, 1}}, {0.03125, {3, 0, 3}}, {
                    8, {2, 0, 4}}, {0.125, {3, 0, 6}}, {16, {2, 0, 2}}, {
                    1, {2, 0, 3}}, {4, {2, 0, 0}}}, {0, 5, 9, 0, 
                    0}, {{10, 0, 1}, {16, 1, 0, 1}, {40, 34, 3, 0, 1, 3, 0, 
                    2}, {10, 2, 4}, {16, 4, 0, 4}, {10, 1, 5}, {13, 5, 4, 
                    5}, {16, 3, 2, 5, 4}, {10, 1, 5}, {16, 5, 0, 5}, {40, 56, 
                    3, 0, 0, 3, 0, 7}, {10, 4, 8}, {16, 8, 7, 8}, {10, 3, 
                    7}, {13, 7, 5, 8, 7}, {16, 6, 2, 7, 5}, {13, 4, 5, 4}, {
                    1}}, 
                    Function[{Global`x}, 
                    
                    Block[{Compile`$167, Compile`$285}, 
                    Compile`$167 = 4 Global`x; 
                    Compile`$285 = E^Compile`$167; (
                    Compile`$285 (-4 + 16 Global`x))/
                    32 + (Compile`$285 (1 - 4 Global`x + 8 Global`x^2))/8]], 
                    Evaluate]}]& , 
                    CalculateScan`PlotterScanner`Private`x1x2SCPCurves, \
{-2}]]]], {}]]; 
                    CalculateScan`PlotterScanner`Private`\
isopticLastParamaters$$ =!= {{
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$}, 
                    CalculateScan`PlotterScanner`Private`isopticCurveAngle$$}]\
; CalculateScan`PlotterScanner`Private`isopticCurvePlot = Graphics[{
                    Directive[
                    CalculateScan`PlotterScanner`Private`isopticCurveColor$$, 
                    
                    Opacity[
                    CalculateScan`PlotterScanner`Private`isopticCurveOpacity$$\
], 
                    Thickness[
                    10^
                    CalculateScan`PlotterScanner`Private`\
isopticCurveThickness$$]], 
                    If[
                    CalculateScan`PlotterScanner`Private`isopticCurveTF$$, 
                    CalculateScan`PlotterScanner`Private`\
isopticCurvePlotCurves$$, {}]}]; 
                    CalculateScan`PlotterScanner`Private`annotatedPlotList = {
                    "tangentLinePlot" -> 
                    CalculateScan`PlotterScanner`Private`tangentLinePlot$, 
                    "normalLinePlot" -> 
                    CalculateScan`PlotterScanner`Private`normalLinePlot$, 
                    "tiltedTangentLinePlot" -> 
                    CalculateScan`PlotterScanner`Private`\
tiltedTangentLinePlot$, "osculatingCirclePlot" -> 
                    CalculateScan`PlotterScanner`Private`osculatingCirclePlot$\
, "taylorParabolaPlot" -> 
                    CalculateScan`PlotterScanner`Private`taylorParabolaPlot$, 
                    "involutePlot" -> 
                    CalculateScan`PlotterScanner`Private`involutePlot$, 
                    "evolutePlot" -> 
                    CalculateScan`PlotterScanner`Private`evolutePlot$, 
                    "dualCurvePlot" -> 
                    CalculateScan`PlotterScanner`Private`dualCurvePlot, 
                    "offsetCurvePlot" -> 
                    CalculateScan`PlotterScanner`Private`offsetCurvePlot, 
                    "tiltedOffsetCurvePlot" -> 
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurvePlot, "pedalCurvePlot" -> 
                    CalculateScan`PlotterScanner`Private`pedalCurvePlot, 
                    "negativePedalCurvePlot" -> 
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurvePlot, "contraPedalCurvePlot" -> 
                    CalculateScan`PlotterScanner`Private`contraPedalCurvePlot,
                     "inverseCurvePlot" -> 
                    CalculateScan`PlotterScanner`Private`inverseCurvePlot, 
                    "isopticCurvePlot" -> 
                    CalculateScan`PlotterScanner`Private`isopticCurvePlot, 
                    "orthotomicCurvePlot" -> 
                    CalculateScan`PlotterScanner`Private`orthotomicCurvePlot, 
                    "originalCurvePlot" -> 
                    CalculateScan`PlotterScanner`Private`originalCurvePlot$}; 
                    CalculateScan`PlotterScanner`Private`labelGrid = (
                    DeleteCases[#, {}]& )[{
                    If[
                    TrueQ[True], {
                    RawBoxes[
                    FormBox[
                    RowBox[{
                    FractionBox["1", "32"], " ", 
                    SuperscriptBox["\[ExponentialE]", 
                    RowBox[{"4", " ", "x"}]], " ", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"8", " ", 
                    SuperscriptBox["x", "2"]}], "-", 
                    RowBox[{"4", " ", "x"}], "+", "1"}], ")"}]}], 
                    TraditionalForm]], 
                    Style["\[LongDash]", Bold, Black]}, {}], 
                    If[
                    TrueQ[CalculateScan`PlotterScanner`Private`tangentTF$$], {
                    "tangents", 
                    Style[
                    "\[LongDash]", Bold, 
                    CalculateScan`PlotterScanner`Private`tangentColor$$]}, \
{}], 
                    If[
                    TrueQ[CalculateScan`PlotterScanner`Private`normalTF$$], {
                    "normals", 
                    Style[
                    "\[LongDash]", Bold, 
                    CalculateScan`PlotterScanner`Private`normalColor$$]}, {}], 
                    If[
                    TrueQ[
                    CalculateScan`PlotterScanner`Private`tiltedTangentTF$$], {
                    "tilted tangents", 
                    Style[
                    "\[LongDash]", Bold, 
                    CalculateScan`PlotterScanner`Private`tiltedTangentColor$$]\
}, {}], 
                    If[
                    TrueQ[
                    CalculateScan`PlotterScanner`Private`osculatingCircleTF$$]\
, {"osculating circles", 
                    Style[
                    "\[LongDash]", Bold, 
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleColor$$]}, {}], 
                    If[
                    TrueQ[
                    CalculateScan`PlotterScanner`Private`taylorParabolaTF$$], \
{"Taylor parabolas", 
                    Style[
                    "\[LongDash]", Bold, 
                    CalculateScan`PlotterScanner`Private`taylorParabolaColor$$\
]}, {}], 
                    If[
                    TrueQ[
                    CalculateScan`PlotterScanner`Private`involuteTF$$], {
                    "involutes", 
                    Style[
                    "\[LongDash]", Bold, 
                    CalculateScan`PlotterScanner`Private`involuteColor$$]}, \
{}], 
                    If[
                    TrueQ[CalculateScan`PlotterScanner`Private`evoluteTF$$], {
                    "evolute", 
                    Style[
                    "\[LongDash]", Bold, 
                    CalculateScan`PlotterScanner`Private`evoluteColor$$]}, \
{}], 
                    If[
                    TrueQ[
                    CalculateScan`PlotterScanner`Private`offsetCurveTF$$], {
                    "offset curves", 
                    Style[
                    "\[LongDash]", Bold, 
                    CalculateScan`PlotterScanner`Private`offsetCurveColor$$]},\
 {}], 
                    If[
                    TrueQ[
                    CalculateScan`PlotterScanner`Private`tiltedOffsetCurveTF$$\
], {"tilted offset curves", 
                    Style[
                    "\[LongDash]", Bold, 
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveColor$$]}, {}], 
                    If[
                    TrueQ[
                    CalculateScan`PlotterScanner`Private`negativePedalCurveTF$\
$], {"contrapedal curves", 
                    Style[
                    "\[LongDash]", Bold, 
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurveColor$$]}, {}], 
                    If[
                    TrueQ[
                    CalculateScan`PlotterScanner`Private`contraPedalCurveTF$$]\
, {"normals", 
                    Style[
                    "\[LongDash]", Bold, 
                    CalculateScan`PlotterScanner`Private`tiltedTangentColor$$]\
}, {}], 
                    If[
                    TrueQ[
                    CalculateScan`PlotterScanner`Private`dualCurveTF$$], {
                    "dual curves", 
                    Style[
                    "\[LongDash]", Bold, 
                    CalculateScan`PlotterScanner`Private`dualCurveColor$$]}, \
{}], 
                    If[
                    TrueQ[
                    CalculateScan`PlotterScanner`Private`inverseCurveTF$$], {
                    "inverse curves", 
                    Style[
                    "\[LongDash]", Bold, 
                    CalculateScan`PlotterScanner`Private`inverseCurveColor$$]}\
, {}], 
                    If[
                    TrueQ[
                    CalculateScan`PlotterScanner`Private`isopticCurveTF$$], {
                    "isoptic curves", 
                    Style[
                    "\[LongDash]", Bold, 
                    CalculateScan`PlotterScanner`Private`isopticCurveColor$$]}\
, {}], 
                    If[
                    TrueQ[
                    CalculateScan`PlotterScanner`Private`orthotomicCurveTF$$],\
 {"orthotomic curves", 
                    Style[
                    "\[LongDash]", Bold, 
                    CalculateScan`PlotterScanner`Private`orthotomicCurveColor$\
$]}, {}]}]; Column[{
                    Show[
                    Map[
                    Last, CalculateScan`PlotterScanner`Private`\
annotatedPlotList], PlotRange -> {
                    CalculateScan`PlotterScanner`Private`pRX$, 
                    CalculateScan`PlotterScanner`Private`pRY$}, ImageSize -> 
                    300, ImagePadding -> 5, AspectRatio -> 
                    CalculateScan`PlotterScanner`Private`ar$$, 
                    If[CalculateScan`PlotterScanner`Private`sa$$, 
                    Apply[
                    Sequence, {
                    Axes -> True, AxesOrigin -> {0, 0}, AxesStyle -> 
                    Lighter[Gray]}], 
                    Apply[Sequence, {}]], 
                    If[CalculateScan`PlotterScanner`Private`st$$, 
                    Apply[Sequence, {Ticks -> Automatic}], 
                    Apply[Sequence, {Ticks -> None}]]], 
                    Grid[{
                    Map[Grid[
                    Map[Reverse, #], Alignment -> Left]& , 
                    
                    With[{CalculateScan`PlotterScanner`Private`\[Lambda]T = 
                    Max[
                    Floor[
                    Length[CalculateScan`PlotterScanner`Private`labelGrid]/2],
                     1]}, 
                    Partition[
                    CalculateScan`PlotterScanner`Private`labelGrid, 
                    CalculateScan`PlotterScanner`Private`\[Lambda]T, 
                    CalculateScan`PlotterScanner`Private`\[Lambda]T, 
                    1, {}]]]}, Dividers -> {False, False}, 
                    Spacings -> {4, Automatic}]}]]], 
                  "Specifications" :> {{
                    CalculateUtilities`GraphicsUtilities`Private`more$$, {
                    False, True}, ControlType -> None}, {{
                    CalculateScan`PlotterScanner`Private`x1$$, \
-0.7853981633974483, 
                    Subscript[
                    Style["x", Italic], "min"]}, -1.5393804002589986`, 
                    1.5393804002589986`, ImageSize -> Small, ControlPlacement -> 
                    1}, {{CalculateScan`PlotterScanner`Private`x2$$, 
                    0.7853981633974483, 
                    Subscript[
                    Style["x", Italic], "max"]}, -1.5393804002589986`, 
                    1.5393804002589986`, ImageSize -> Small, ControlPlacement -> 
                    2}, {{CalculateScan`PlotterScanner`Private`symmxQ$$, 
                    False, "symmetric"}, {True, False}, ControlPlacement -> 
                    3}, {{CalculateScan`PlotterScanner`Private`fy1$$, 
                    0.982793723247329, 
                    Subscript["y", "min"]}, 0, 1.5393804002589986`, ImageSize -> 
                    Small, ControlPlacement -> 4}, {{
                    CalculateScan`PlotterScanner`Private`fy2$$, 
                    0.982793723247329, 
                    Subscript["y", "max"]}, 0, 1.5393804002589986`, ImageSize -> 
                    Small, ControlPlacement -> 5}, {{
                    CalculateScan`PlotterScanner`Private`symmyQ$$, True, 
                    "symmetric"}, {True, False}, ControlPlacement -> 6}, {{
                    CalculateScan`PlotterScanner`Private`sqPRQ$$, False, 
                    Dynamic[
                    Style["same as horizontal-range", 
                    If[
                    CalculateScan`PlotterScanner`Private`symmxQ$$, Black, 
                    Gray]]]}, {True, False}, ImageSize -> Small, 
                    ControlPlacement -> 7}, {{
                    CalculateScan`PlotterScanner`Private`sa$$, False, 
                    "show axes"}, {True, False}, ImageSize -> Small, 
                    ControlPlacement -> 8}, {{
                    CalculateScan`PlotterScanner`Private`st$$, False, 
                    Dynamic[
                    Style["show ticks", 
                    If[
                    CalculateScan`PlotterScanner`Private`sa$$ === True, Black,
                     Gray]]]}, {True, False}, ImageSize -> Small, 
                    ControlPlacement -> 9}, {{
                    CalculateScan`PlotterScanner`Private`ar$$, 1, 
                    "aspect ratio"}, 
                    Rational[1, 4], 4, ImageSize -> Small, ControlPlacement -> 
                    10}, {{CalculateScan`PlotterScanner`Private`tangentTF$$, 
                    False, ""}, {True, False}, ControlPlacement -> 11}, {{
                    CalculateScan`PlotterScanner`Private`tangentCount$$, 60, 
                    ""}, 2, 360, 1, ImageSize -> Small, ControlPlacement -> 
                    12}, {{CalculateScan`PlotterScanner`Private`tangentLength$\
$, 0.41822432957922906`, ""}, 0, 1.5393804002589986`, ImageSize -> Small, 
                    ControlPlacement -> 13}, {{
                    CalculateScan`PlotterScanner`Private`tangentThickness$$, \
-3., ""}, -4, -0.5, ImageSize -> Small, ControlPlacement -> 14}, {{
                    CalculateScan`PlotterScanner`Private`tangentColor$$, 
                    RGBColor[0.237736, 0.340215, 0.575113], ""}, 
                    RGBColor[1, 0, 0], ImageSize -> Tiny, AppearanceElements -> 
                    "Spectrum", ControlPlacement -> 15}, {{
                    CalculateScan`PlotterScanner`Private`tangentOpacity$$, 
                    0.8, ""}, 0, 1, ImageSize -> Small, ControlPlacement -> 
                    16}, {{CalculateScan`PlotterScanner`Private`normalTF$$, 
                    True, ""}, {True, False}, ControlPlacement -> 17}, {{
                    CalculateScan`PlotterScanner`Private`normalCount$$, 120, 
                    ""}, 2, 360, 1, ImageSize -> Small, ControlPlacement -> 
                    18}, {{CalculateScan`PlotterScanner`Private`normalLength$$\
, 0.41822432957922906`, ""}, 0, 1.5393804002589986`, ImageSize -> Small, 
                    ControlPlacement -> 19}, {{
                    CalculateScan`PlotterScanner`Private`normalThickness$$, \
-3., ""}, -4, -0.5, ImageSize -> Small, ControlPlacement -> 20}, {{
                    CalculateScan`PlotterScanner`Private`normalColor$$, 
                    RGBColor[0.237, 0.34, 0.575], ""}, 
                    RGBColor[1, 0, 0], ImageSize -> Tiny, AppearanceElements -> 
                    "Spectrum", ControlPlacement -> 21}, {{
                    CalculateScan`PlotterScanner`Private`normalOpacity$$, 0.8,
                     ""}, 0, 1, ImageSize -> Small, ControlPlacement -> 
                    22}, {{CalculateScan`PlotterScanner`Private`\
tiltedTangentTF$$, False, ""}, {True, False}, ControlPlacement -> 23}, {{
                    CalculateScan`PlotterScanner`Private`tiltedTangentAngle$$,
                     Rational[1, 4] Pi, ""}, -Pi, Pi, ImageSize -> Small, 
                    ControlPlacement -> 24}, {{
                    CalculateScan`PlotterScanner`Private`tiltedTangentCount$$,
                     60, ""}, 2, 360, 1, ImageSize -> Small, ControlPlacement -> 
                    25}, {{CalculateScan`PlotterScanner`Private`\
tiltedTangentLength$$, 0.41822432957922906`, ""}, 0, 1.5393804002589986`, 
                    ImageSize -> Small, ControlPlacement -> 26}, {{
                    CalculateScan`PlotterScanner`Private`\
tiltedTangentThickness$$, -3., ""}, -4, -0.5, ImageSize -> Small, 
                    ControlPlacement -> 27}, {{
                    CalculateScan`PlotterScanner`Private`tiltedTangentColor$$, 
                    RGBColor[
                    0.2622702, 0.40739780000000003`, 0.41955020000000004`], 
                    ""}, 
                    RGBColor[1, 0, 0], ImageSize -> Tiny, AppearanceElements -> 
                    "Spectrum", ControlPlacement -> 28}, {{
                    CalculateScan`PlotterScanner`Private`tiltedTangentOpacity$\
$, 0.8, ""}, 0, 1, ImageSize -> Small, ControlPlacement -> 29}, {{
                    CalculateScan`PlotterScanner`Private`osculatingCircleTF$$,
                     False, ""}, {True, False}, ControlPlacement -> 30}, {{
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleCount$$, 60, ""}, 2, 360, 1, ImageSize -> Small, 
                    ControlPlacement -> 31}, {{
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleThickness$$, -3., ""}, -4, -0.5, ImageSize -> Small, 
                    ControlPlacement -> 32}, {{
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleColor$$, 
                    RGBColor[0.2752426, 0.4446824, 0.33950440000000004`], ""}, 
                    RGBColor[1, 0, 0], ImageSize -> Tiny, AppearanceElements -> 
                    "Spectrum", ControlPlacement -> 33}, {{
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleOpacity$$, 0.8, ""}, 0, 1, ImageSize -> Small, 
                    ControlPlacement -> 34}, {{
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleRadiiTF$$, False, ""}, {True, False}, ImageSize -> Small, 
                    ControlPlacement -> 35}, {{
                    CalculateScan`PlotterScanner`Private`taylorParabolaTF$$, 
                    False, ""}, {True, False}, ControlPlacement -> 36}, {{
                    CalculateScan`PlotterScanner`Private`taylorParabolaCount$$\
, 36, ""}, 2, 120, 1, ImageSize -> Small, ControlPlacement -> 37}, {{
                    CalculateScan`PlotterScanner`Private`\
taylorParabolaThickness$$, -3., ""}, -4, -0.5, ImageSize -> Small, 
                    ControlPlacement -> 38}, {{
                    CalculateScan`PlotterScanner`Private`taylorParabolaColor$$\
, 
                    RGBColor[0.7189495000000001, 0.719797, 0.283877], ""}, 
                    RGBColor[1, 0, 0], ImageSize -> Tiny, AppearanceElements -> 
                    "Spectrum", ControlPlacement -> 39}, {{
                    CalculateScan`PlotterScanner`Private`\
taylorParabolaOpacity$$, 0.8, ""}, 0, 1, ImageSize -> Small, ControlPlacement -> 
                    40}, {{CalculateScan`PlotterScanner`Private`involuteTF$$, 
                    False, ""}, {True, False}, ControlPlacement -> 41}, {{
                    CalculateScan`PlotterScanner`Private`involuteCount$$, 60, 
                    ""}, 1, 120, 1, ImageSize -> Small, ControlPlacement -> 
                    42}, {{CalculateScan`PlotterScanner`Private`\
involuteThickness$$, -3., ""}, -4, -0.5, ImageSize -> Small, ControlPlacement -> 
                    43}, {{CalculateScan`PlotterScanner`Private`involuteColor$\
$, 
                    RGBColor[0.49978279999999997`, 0.6025278, 0.2508104], ""}, 
                    RGBColor[1, 0, 0], ImageSize -> Tiny, AppearanceElements -> 
                    "Spectrum", ControlPlacement -> 44}, {{
                    CalculateScan`PlotterScanner`Private`involuteOpacity$$, 
                    0.8, ""}, 0, 1, ImageSize -> Small, ControlPlacement -> 
                    45}, {{CalculateScan`PlotterScanner`Private`\
involutesLeftTF$$, False, ""}, {True, False}, ControlPlacement -> 46}, {{
                    CalculateScan`PlotterScanner`Private`involutesRightTF$$, 
                    True, ""}, {True, False}, ControlPlacement -> 47}, {{
                    CalculateScan`PlotterScanner`Private`evoluteTF$$, False, 
                    ""}, {True, False}, ControlPlacement -> 48}, {{
                    CalculateScan`PlotterScanner`Private`evoluteThickness$$, \
-3., ""}, -4, -0.5, ImageSize -> Small, ControlPlacement -> 49}, {{
                    CalculateScan`PlotterScanner`Private`evoluteColor$$, 
                    RGBColor[0.813033, 0.766292, 0.303458], ""}, 
                    RGBColor[1, 0, 0], ImageSize -> Tiny, AppearanceElements -> 
                    "Spectrum", ControlPlacement -> 50}, {{
                    CalculateScan`PlotterScanner`Private`evoluteOpacity$$, 
                    0.8, ""}, 0, 1, ImageSize -> Small, ControlPlacement -> 
                    51}, {{CalculateScan`PlotterScanner`Private`offsetCurveTF$\
$, False, ""}, {True, False}, ControlPlacement -> 52}, {{
                    CalculateScan`PlotterScanner`Private`offsetCurveDistance$$\
, 0.41822432957922906`, ""}, 0, 1.5393804002589986`, ImageSize -> Small, 
                    ControlPlacement -> 53}, {{
                    CalculateScan`PlotterScanner`Private`offsetCurveCount$$, 
                    12, ""}, 1, 60, 1, ImageSize -> Small, ControlPlacement -> 
                    54}, {{CalculateScan`PlotterScanner`Private`\
offsetCurveThickness$$, -3., ""}, -4, -0.5, ImageSize -> Small, 
                    ControlPlacement -> 55}, {{
                    CalculateScan`PlotterScanner`Private`offsetCurveColor$$, 
                    RGBColor[0.877875, 0.731045, 0.326896], ""}, 
                    RGBColor[1, 0, 0], ImageSize -> Tiny, AppearanceElements -> 
                    "Spectrum", ControlPlacement -> 56}, {{
                    CalculateScan`PlotterScanner`Private`offsetCurveOpacity$$,
                     0.8, ""}, 0, 1, ImageSize -> Small, ControlPlacement -> 
                    57}, {{CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveTF$$, False, ""}, {True, False}, ControlPlacement -> 58}, {{
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveAngle$$, Rational[1, 4] Pi, ""}, -Pi, Pi, ImageSize -> Small,
                     ControlPlacement -> 59}, {{
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveDistance$$, 0.41822432957922906`, ""}, 0, 
                    1.5393804002589986`, ImageSize -> Small, ControlPlacement -> 
                    60}, {{CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveCount$$, 12, ""}, 1, 60, 1, ImageSize -> Small, 
                    ControlPlacement -> 61}, {{
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveThickness$$, -3., ""}, -4, -0.5, ImageSize -> Small, 
                    ControlPlacement -> 62}, {{
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveColor$$, 
                    RGBColor[0.49978279999999997`, 0.6025278, 0.2508104], ""}, 
                    RGBColor[1, 0, 0], ImageSize -> Tiny, AppearanceElements -> 
                    "Spectrum", ControlPlacement -> 63}, {{
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveOpacity$$, 0.8, ""}, 0, 1, ImageSize -> Small, 
                    ControlPlacement -> 64}, {{
                    CalculateScan`PlotterScanner`Private`pedalCurveTF$$, 
                    False, ""}, {True, False}, ControlPlacement -> 65}, {{
                    CalculateScan`PlotterScanner`Private`\
pedalCurveCountFactor$$, 0.3, ""}, 0, 1, ImageSize -> Small, ControlPlacement -> 
                    66}, {{CalculateScan`PlotterScanner`Private`\
pedalCurveThickness$$, -3., ""}, -4, -0.5, ImageSize -> Small, 
                    ControlPlacement -> 67}, {{
                    CalculateScan`PlotterScanner`Private`pedalCurveColor$$, 
                    RGBColor[0.32894650000000003`, 0.5006225, 0.2625337], ""}, 
                    RGBColor[1, 0, 0], ImageSize -> Tiny, AppearanceElements -> 
                    "Spectrum", ControlPlacement -> 68}, {{
                    CalculateScan`PlotterScanner`Private`pedalCurveOpacity$$, 
                    0.8, ""}, 0, 1, ImageSize -> Small, ControlPlacement -> 
                    69}, {{CalculateScan`PlotterScanner`Private`\
pedalCurvePoints$$, "curve", ""}, {"grid", "curve"}, ImageSize -> Small, 
                    ControlPlacement -> 70}, {{
                    CalculateScan`PlotterScanner`Private`negativePedalCurveTF$\
$, False, ""}, {True, False}, ControlPlacement -> 71}, {{
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurveCountFactor$$, 0.3, ""}, 0, 1, ImageSize -> Small, 
                    ControlPlacement -> 72}, {{
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurveThickness$$, -3., ""}, -4, -0.5, ImageSize -> Small, 
                    ControlPlacement -> 73}, {{
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurveColor$$, 
                    RGBColor[0.7464574, 0.2952580000000001, 0.2454606], ""}, 
                    RGBColor[1, 0, 0], ImageSize -> Tiny, AppearanceElements -> 
                    "Spectrum", ControlPlacement -> 74}, {{
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurveOpacity$$, 0.8, ""}, 0, 1, ImageSize -> Small, 
                    ControlPlacement -> 75}, {{
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurvePoints$$, "curve", ""}, {"curve", "grid"}, ImageSize -> 
                    Small, ControlPlacement -> 76}, {{
                    CalculateScan`PlotterScanner`Private`contraPedalCurveTF$$,
                     False, ""}, {True, False}, ControlPlacement -> 77}, {{
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurveCountFactor$$, 0.3, ""}, 0, 1, ImageSize -> Small, 
                    ControlPlacement -> 78}, {{
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurveThickness$$, -3., ""}, -4, -0.5, ImageSize -> Small, 
                    ControlPlacement -> 79}, {{
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurveColor$$, 
                    RGBColor[0.7464574, 0.2952580000000001, 0.2454606], ""}, 
                    RGBColor[1, 0, 0], ImageSize -> Tiny, AppearanceElements -> 
                    "Spectrum", ControlPlacement -> 80}, {{
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurveOpacity$$, 0.8, ""}, 0, 1, ImageSize -> Small, 
                    ControlPlacement -> 81}, {{
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurvePoints$$, "curve", ""}, {"curve", "grid"}, ImageSize -> Small,
                     ControlPlacement -> 82}, {{
                    CalculateScan`PlotterScanner`Private`dualCurveTF$$, False,
                     ""}, {True, False}, ControlPlacement -> 83}, {{
                    CalculateScan`PlotterScanner`Private`dualCurveCountFactor$\
$, 0.3, ""}, 0, 1, ImageSize -> Small, ControlPlacement -> 84}, {{
                    CalculateScan`PlotterScanner`Private`dualCurveThickness$$,\
 -3., ""}, -4, -0.5, ImageSize -> Small, ControlPlacement -> 85}, {{
                    CalculateScan`PlotterScanner`Private`dualCurveColor$$, 
                    RGBColor[0.2860602, 0.4663408, 0.29410879999999995`], ""}, 
                    RGBColor[1, 0, 0], ImageSize -> Tiny, AppearanceElements -> 
                    "Spectrum", ControlPlacement -> 86}, {{
                    CalculateScan`PlotterScanner`Private`dualCurveOpacity$$, 
                    0.8, ""}, 0, 1, ImageSize -> Small, ControlPlacement -> 
                    87}, {{CalculateScan`PlotterScanner`Private`\
dualPedalCurvePoints$$, "curve", ""}, {"curve", "grid"}, ImageSize -> Small, 
                    ControlPlacement -> 88}, {{
                    CalculateScan`PlotterScanner`Private`inverseCurveTF$$, 
                    False, ""}, {True, False}, ControlPlacement -> 89}, {{
                    CalculateScan`PlotterScanner`Private`\
inverseCurveCountFactor$$, 0.3, ""}, 0, 1, ImageSize -> Small, 
                    ControlPlacement -> 90}, {{
                    CalculateScan`PlotterScanner`Private`\
inverseCurveThickness$$, -3., ""}, -4, -0.5, ImageSize -> Small, 
                    ControlPlacement -> 91}, {{
                    CalculateScan`PlotterScanner`Private`inverseCurveColor$$, 
                    
                    RGBColor[0.2860602, 0.4663408, 0.29410879999999995`], ""}, 
                    RGBColor[1, 0, 0], ImageSize -> Tiny, AppearanceElements -> 
                    "Spectrum", ControlPlacement -> 92}, {{
                    CalculateScan`PlotterScanner`Private`inverseCurveOpacity$$\
, 0.8, ""}, 0, 1, ImageSize -> Small, ControlPlacement -> 93}, {{
                    CalculateScan`PlotterScanner`Private`inverseCurvePoints$$,
                     "grid", ""}, {"curve", "grid"}, ImageSize -> Small, 
                    ControlPlacement -> 94}, {{
                    CalculateScan`PlotterScanner`Private`\
inverseCurveCircleRadiusFactor$$, 0.4636476090008061, ""}, 0, 1, ImageSize -> 
                    Small, ControlPlacement -> 95}, {{
                    CalculateScan`PlotterScanner`Private`isopticCurveTF$$, 
                    False, ""}, {True, False}, ControlPlacement -> 96}, {{
                    CalculateScan`PlotterScanner`Private`isopticCurveAngle$$, 
                    Rational[1, 3] Pi, ""}, 0, Pi, ImageSize -> Small, 
                    ControlPlacement -> 97}, {{
                    CalculateScan`PlotterScanner`Private`\
isopticCurveThickness$$, -3., ""}, -4, -0.5, ImageSize -> Small, 
                    ControlPlacement -> 98}, {{
                    CalculateScan`PlotterScanner`Private`isopticCurveColor$$, 
                    
                    RGBColor[
                    0.8519382, 0.7451437999999999, 0.31752080000000005`], ""}, 
                    RGBColor[1, 0, 0], ImageSize -> Tiny, AppearanceElements -> 
                    "Spectrum", ControlPlacement -> 99}, {{
                    CalculateScan`PlotterScanner`Private`isopticCurveOpacity$$\
, 0.8, ""}, 0, 1, ImageSize -> Small, ControlPlacement -> 100}, {{
                    CalculateScan`PlotterScanner`Private`orthotomicCurveTF$$, 
                    False, ""}, {True, False}, ControlPlacement -> 101}, {{
                    CalculateScan`PlotterScanner`Private`orthotomicCurveAngle$\
$, Rational[1, 3] Pi, ""}, 0, Pi, ImageSize -> Small, ControlPlacement -> 
                    102}, {{
                    CalculateScan`PlotterScanner`Private`\
orthotomicCurveCountFactor$$, 0.3, ""}, 0, 1, ImageSize -> Small, 
                    ControlPlacement -> 103}, {{
                    CalculateScan`PlotterScanner`Private`\
orthotomicCurveThickness$$, -3., ""}, -4, -0.5, ImageSize -> Small, 
                    ControlPlacement -> 104}, {{
                    CalculateScan`PlotterScanner`Private`orthotomicCurveColor$\
$, 
                    RGBColor[
                    0.8519382, 0.7451437999999999, 0.31752080000000005`], ""}, 
                    RGBColor[1, 0, 0], ImageSize -> Tiny, AppearanceElements -> 
                    "Spectrum", ControlPlacement -> 105}, {{
                    CalculateScan`PlotterScanner`Private`\
orthotomicCurveOpacity$$, 0.8, ""}, 0, 1, ImageSize -> Small, 
                    ControlPlacement -> 106}, {{
                    CalculateScan`PlotterScanner`Private`\
orthotomicCurvePoints$$, "curve", ""}, {"curve", "grid"}, ImageSize -> Small, 
                    ControlPlacement -> 107}, 
                    Style[
                    Overlay[{
                    RawBoxes[
                    PaneBox[
                    GraphicsBox[
                    
                    RasterBox[{{{0, 0, 0, 24}}, {{0, 0, 0, 9}}, {{0, 0, 0, 
                    10}}, {{0, 0, 0, 10}}, {{0, 0, 0, 9}}, {{0, 0, 0, 9}}, {{
                    0, 0, 0, 8}}, {{0, 0, 0, 8}}, {{0, 0, 0, 9}}, {{0, 0, 0, 
                    8}}, {{0, 0, 0, 7}}, {{0, 0, 0, 7}}, {{0, 0, 0, 8}}, {{0, 
                    0, 0, 6}}, {{0, 0, 0, 6}}, {{0, 0, 0, 6}}, {{0, 0, 0, 
                    6}}, {{0, 0, 0, 5}}, {{0, 0, 0, 6}}, {{0, 0, 0, 5}}, {{0, 
                    0, 0, 4}}, {{0, 0, 0, 4}}, {{0, 0, 0, 5}}, {{0, 0, 0, 
                    5}}, {{0, 0, 0, 3}}, {{0, 0, 0, 4}}, {{0, 0, 0, 3}}, {{0, 
                    0, 0, 3}}, {{0, 0, 0, 3}}, {{0, 0, 0, 3}}, {{0, 0, 0, 
                    2}}, {{0, 0, 0, 2}}, {{0, 0, 0, 2}}, {{0, 0, 0, 2}}, {{0, 
                    0, 0, 1}}, {{0, 0, 0, 2}}, {{0, 0, 0, 2}}, {{0, 0, 0, 
                    0}}, {{0, 0, 0, 1}}, {{255, 255, 255, 0}}, {{255, 255, 
                    255, 0}}, {{255, 255, 255, 0}}, {{255, 255, 255, 0}}, {{
                    255, 255, 255, 0}}, {{255, 255, 255, 0}}}, {{0, 45}, {
                    2500, 0}}, {0, 255}, ColorFunction -> RGBColor], 
                    ImageSize -> {2500, 45}, 
                    PlotRange -> {{0, 2500}, {0, 45}}], ImageSize -> 
                    Scaled[1], ScrollPosition -> {0., 0.}]], 
                    Pane[
                    Column[{
                    Row[{
                    Invisible[
                    RawBoxes[
                    GraphicsBox[
                    TagBox[
                    
                    RasterBox[{{{255, 132, 0}, {255, 132, 0}, {255, 132, 0}, {
                    255, 132, 0}, {255, 132, 0}, {255, 132, 0}}, {{255, 132, 
                    0}, {255, 132, 0}, {255, 132, 0}, {255, 132, 0}, {255, 
                    132, 0}, {255, 132, 0}}}, {{0, 2}, {6, 0}}, {0, 255}, 
                    ColorFunction -> RGBColor], 
                    BoxForm`ImageTag[
                    "Byte", ColorSpace -> "RGB", Interleaving -> True], 
                    Selectable -> False], BaseStyle -> "ImageGraphics", 
                    ImageSize -> Magnification[1], ImageSizeRaw -> {6, 2}, 
                    BaselinePosition -> (Scaled[0] -> Center), 
                    PlotRange -> {{0, 6}, {0, 2}}]]], " ", 
                    Column[{"Horizontal plot range:", 
                    Row[{
                    Manipulate`Place[1], "  ", 
                    Manipulate`Place[2], "  ", 
                    Manipulate`Place[3]}]}]}], 
                    PaneSelector[{True -> Grid[{{
                    Button[
                    Row[{
                    RawBoxes[
                    GraphicsBox[
                    TagBox[
                    
                    RasterBox[{{{255, 132, 0}, {255, 132, 0}, {255, 132, 0}, {
                    255, 132, 0}, {255, 132, 0}, {255, 132, 0}}, {{255, 132, 
                    0}, {255, 132, 0}, {255, 132, 0}, {255, 132, 0}, {255, 
                    132, 0}, {255, 132, 0}}}, {{0, 2}, {6, 0}}, {0, 255}, 
                    ColorFunction -> RGBColor], 
                    BoxForm`ImageTag[
                    "Byte", ColorSpace -> "RGB", Interleaving -> True], 
                    Selectable -> False], BaseStyle -> "ImageGraphics", 
                    ImageSize -> Magnification[1], ImageSizeRaw -> {6, 2}, 
                    BaselinePosition -> (Scaled[0] -> Center), 
                    PlotRange -> {{0, 6}, {0, 2}}]], " "}], 
                    CalculateUtilities`GraphicsUtilities`Private`more$$ = 
                    False, Appearance -> None, BaseStyle -> {}], 
                    Button["Fewer controls", 
                    CalculateUtilities`GraphicsUtilities`Private`more$$ = 
                    False, Appearance -> None, BaseStyle -> {}]}, {"", 
                    Item[
                    Column[{
                    Column[{"Vertical plot range:", 
                    Row[{
                    Manipulate`Place[4], "  ", 
                    Manipulate`Place[5], "  ", 
                    Manipulate`Place[6]}], 
                    Manipulate`Place[7]}], 
                    Column[{
                    Row[{
                    Manipulate`Place[8], "  ", 
                    Manipulate`Place[9]}], 
                    Row[{
                    Manipulate`Place[10], "   settings: ", 
                    Button[
                    "1", CalculateScan`PlotterScanner`Private`ar$$ = 1, 
                    ImageSize -> Small, Appearance -> "Palette", 
                    BaseStyle -> {}], "  ", 
                    Button["unscaled axes", 
                    (If[
                    1/4 <= # <= 4, 
                    CalculateScan`PlotterScanner`Private`ar$$ = #]& )[Abs[
                    Apply[
                    Subtract, CalculateScan`PlotterScanner`Private`pRY]]/Abs[
                    Apply[
                    Subtract, CalculateScan`PlotterScanner`Private`pRX]]], 
                    ImageSize -> Small, Appearance -> "Palette", 
                    BaseStyle -> {}]}]}], 
                    TabView[{Row[{" ", 
                    Dynamic[
                    If[CalculateScan`PlotterScanner`Private`tangentTF$$, 
                    Style[
                    "\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`tangentColor$$, 
                    Bold], " "]], 
                    Tooltip[" tangents             ", 
                    Style[" family of tangents at points along the curve ", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> 
                    Grid[{{"show tangents", 
                    Manipulate`Place[11]}, {"tangent count", 
                    Manipulate`Place[12]}, {"tangent length", 
                    Manipulate`Place[13]}, {"tangent thickness", 
                    Manipulate`Place[14]}, {"tangent color", 
                    Manipulate`Place[15]}, {"tangent opacity", 
                    Manipulate`Place[16]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    False}}], Row[{" ", 
                    Dynamic[
                    If[CalculateScan`PlotterScanner`Private`normalTF$$, 
                    Style[
                    "\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`normalColor$$, Bold],
                     " "]], 
                    Tooltip[" normals              ", 
                    Style[" family of normals at points along the curve ", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> 
                    Grid[{{"show normals", 
                    Manipulate`Place[17]}, {"normal count", 
                    Manipulate`Place[18]}, {"normal length", 
                    Manipulate`Place[19]}, {"normal thickness", 
                    Manipulate`Place[20]}, {"normal color", 
                    Manipulate`Place[21]}, {"normal opacity", 
                    Manipulate`Place[22]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    False}}], Row[{" ", 
                    Dynamic[
                    If[CalculateScan`PlotterScanner`Private`tiltedTangentTF$$, 
                    Style[
                    "\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`tiltedTangentColor$$,
                     Bold], " "]], 
                    Tooltip[" tilted tangents      ", 
                    Style[
                    " family of tilted tangents at points along the curve ", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> 
                    Grid[{{"show tilted tangents", 
                    Manipulate`Place[23]}, {"tilted tangent angle", 
                    Manipulate`Place[24]}, {"tilted tangent count", 
                    Manipulate`Place[25]}, {"tilted tangent length", 
                    Manipulate`Place[26]}, {"tilted tangent thickness", 
                    Manipulate`Place[27]}, {"tilted tangent color", 
                    Manipulate`Place[28]}, {"tilted tangent opacity", 
                    Manipulate`Place[29]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    False}}], Row[{" ", 
                    Dynamic[
                    If[
                    CalculateScan`PlotterScanner`Private`osculatingCircleTF$$, 
                    Style[
                    "\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleColor$$, Bold], " "]], 
                    Tooltip[" osculating circles   ", 
                    Style[
                    " family of osculating circles (circles that are tangent \
to the curve) at points along the curve", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> Column[{
                    Grid[{{"show osculating circles", 
                    Manipulate`Place[30]}, {"osculating circle count", 
                    Manipulate`Place[31]}, {"osculating circle thickness", 
                    Manipulate`Place[32]}, {"osculating circle color", 
                    Manipulate`Place[33]}, {"osculating circle opacity", 
                    Manipulate`Place[34]}, {"show circle radii", 
                    Manipulate`Place[35]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    True}}], 
                    Dynamic[
                    Style[
                    If[
                    And[
                    CalculateScan`PlotterScanner`Private`osculatingCircleTF$$, 
                    Not[
                    0.98 < CalculateScan`PlotterScanner`Private`ar$$ < 1.02]],
                     "(note than circles appear as ellipses for unequally\n\
scaled horizontal and vertical axes)", ""]], 
                    RGBColor[
                    0.6666666666666666, 0.6666666666666666, 
                    0.6666666666666666]]}, Alignment -> Left], Row[{" ", 
                    Dynamic[
                    If[
                    CalculateScan`PlotterScanner`Private`taylorParabolaTF$$, 
                    Style["\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`taylorParabolaColor$$\
, Bold], " "]], 
                    Tooltip[" Taylor parabolas     ", 
                    Style[" family of second order Taylor approximations", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> Column[{
                    Grid[{{"show Taylor parabolas", 
                    Manipulate`Place[36]}, {"Taylor parabola count", 
                    Manipulate`Place[37]}, {"Taylor parabola thickness", 
                    Manipulate`Place[38]}, {"Taylor parabola color", 
                    Manipulate`Place[39]}, {"Taylor parabola opacity", 
                    Manipulate`Place[40]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    True}}]}, Alignment -> Left], Row[{" ", 
                    Dynamic[
                    If[CalculateScan`PlotterScanner`Private`involuteTF$$, 
                    Style[
                    "\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`involuteColor$$, 
                    Bold], " "]], 
                    Tooltip[" involutes            ", 
                    Style[
                    " family of involutes (curves traced out by strings \
unwound from the curve) of the curve", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> 
                    Grid[{{"show involutes", 
                    Manipulate`Place[41]}, {"involute count", 
                    Manipulate`Place[42]}, {"involute thickness", 
                    Manipulate`Place[43]}, {"involute color", 
                    Manipulate`Place[44]}, {"involute opacity", 
                    Manipulate`Place[45]}, {"directions", 
                    Row[{"\[DoubleLongLeftArrow]", 
                    Manipulate`Place[46], "  \[DoubleLongRightArrow]", 
                    Manipulate`Place[47]}]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    True}}], Row[{" ", 
                    Dynamic[
                    If[CalculateScan`PlotterScanner`Private`evoluteTF$$, 
                    Style[
                    "\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`evoluteColor$$, 
                    Bold], " "]], 
                    Tooltip[" evolute              ", 
                    Style[
                    " the evolute of a given curve (curve of the centers of \
the osculating circles))", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> 
                    Grid[{{"show evolute", 
                    Manipulate`Place[48]}, {"evolute thickness", 
                    Manipulate`Place[49]}, {"evolute color", 
                    Manipulate`Place[50]}, {"evolute opacity", 
                    Manipulate`Place[51]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    False}}], Row[{" ", 
                    Dynamic[
                    If[CalculateScan`PlotterScanner`Private`offsetCurveTF$$, 
                    Style[
                    "\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`offsetCurveColor$$, 
                    Bold], " "]], 
                    Tooltip[" offset curves        ", 
                    Style[
                    " family of offset curves (curves shifted a fixed \
distance perpendicular to each point of the original curve) ", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> 
                    Grid[{{"show offset curves", 
                    Manipulate`Place[52]}, {"offset curve distance", 
                    Manipulate`Place[53]}, {"offset curve count", 
                    Manipulate`Place[54]}, {"offset curve thickness", 
                    Manipulate`Place[55]}, {"offset curve color", 
                    Manipulate`Place[56]}, {"offset curve opacity", 
                    Manipulate`Place[57]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    False}}], Row[{" ", 
                    Dynamic[
                    If[
                    CalculateScan`PlotterScanner`Private`tiltedOffsetCurveTF$$\
, 
                    Style["\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveColor$$, Bold], " "]], 
                    Tooltip[" tilted offset curves ", 
                    Style[
                    " family of tilted offset curves (curves shifted a fixed \
distance in a direction with a fixed angle \n                                 \
     to the local normal to each point of the original curve) ", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> 
                    Grid[{{"show tilted offset curves", 
                    Manipulate`Place[58]}, {"tilted offset curve angle", 
                    Manipulate`Place[59]}, {"tilted offset curve distance", 
                    Manipulate`Place[60]}, {"tilted offset curve count", 
                    Manipulate`Place[61]}, {"tilted offset curve thickness", 
                    Manipulate`Place[62]}, {"tilted offset curve color", 
                    Manipulate`Place[63]}, {"tilted offset curve opacity", 
                    Manipulate`Place[64]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    False}}], Row[{" ", 
                    Dynamic[
                    If[CalculateScan`PlotterScanner`Private`pedalCurveTF$$, 
                    Style[
                    "\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`pedalCurveColor$$, 
                    Bold], " "]], 
                    Tooltip[" pedal curves         ", 
                    Style[
                    " family of pedal curves (curves on the tangents of the \
given curve perpendicular to a given point) ", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> 
                    Grid[{{"show pedal curves", 
                    Manipulate`Place[65]}, {"pedal curve count", 
                    Manipulate`Place[66]}, {"pedal curve thickness", 
                    Manipulate`Place[67]}, {"pedal curve color", 
                    Manipulate`Place[68]}, {"pedal curve opacity", 
                    Manipulate`Place[69]}, {"pedal points", 
                    Manipulate`Place[70]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    True}}], Row[{" ", 
                    Dynamic[
                    If[
                    CalculateScan`PlotterScanner`Private`negativePedalCurveTF$\
$, 
                    Style["\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurveColor$$, Bold], " "]], 
                    Tooltip[" negative pedal curves", 
                    Style[
                    " family of negative pedal curves (envelope curves of \
lines perpendicular to the given curve and a given point) ", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> 
                    Grid[{{"show negative pedal curves", 
                    Manipulate`Place[71]}, {"negative pedal curve count", 
                    Manipulate`Place[72]}, {
                    "negative pedal curve thickness", 
                    Manipulate`Place[73]}, {"negative pedal curve color", 
                    Manipulate`Place[74]}, {"negative pedal curve opacity", 
                    Manipulate`Place[75]}, {"negative pedal points", 
                    Manipulate`Place[76]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    False}}], Row[{" ", 
                    Dynamic[
                    If[
                    CalculateScan`PlotterScanner`Private`contraPedalCurveTF$$, 
                    Style[
                    "\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurveColor$$, Bold], " "]], 
                    Tooltip[" contrapedal curves   ", 
                    Style[
                    " family of contrapedal curves (curves on the normals of \
the given curve perpendicular to a given point) ", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> 
                    Grid[{{"show contrapedal curves", 
                    Manipulate`Place[77]}, {"contrapedal curve count", 
                    Manipulate`Place[78]}, {"contrapedal curve thickness", 
                    Manipulate`Place[79]}, {"contrapedal curve color", 
                    Manipulate`Place[80]}, {"contrapedal curve opacity", 
                    Manipulate`Place[81]}, {"contrapedal pedal points", 
                    Manipulate`Place[82]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    False}}], Row[{" ", 
                    Dynamic[
                    If[CalculateScan`PlotterScanner`Private`dualCurveTF$$, 
                    Style[
                    "\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`dualCurveColor$$, 
                    Bold], " "]], 
                    Tooltip[" dual curves          ", 
                    Style[
                    " dual curve of the given curve (the dual curbe maps \
inflection points to cusps) ", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> 
                    Grid[{{"show dual curves", 
                    Manipulate`Place[83]}, {"dual curve count", 
                    Manipulate`Place[84]}, {"dual curve thickness", 
                    Manipulate`Place[85]}, {"dual curve color", 
                    Manipulate`Place[86]}, {"dual curve opacity", 
                    Manipulate`Place[87]}, {"dual curve points", 
                    Manipulate`Place[88]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    False}}], Row[{" ", 
                    Dynamic[
                    If[
                    CalculateScan`PlotterScanner`Private`inverseCurveTF$$, 
                    Style[
                    "\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`inverseCurveColor$$, 
                    Bold], " "]], 
                    Tooltip[" inverse curves       ", 
                    Style[
                    " inverse curves (curves resulting from carrying of an \
inversion on circles) ", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> 
                    Grid[{{"show inverse curves", 
                    Manipulate`Place[89]}, {"inverse curve count", 
                    Manipulate`Place[90]}, {"inverse curve thickness", 
                    Manipulate`Place[91]}, {"inverse curve color", 
                    Manipulate`Place[92]}, {"inverse curve opacity", 
                    Manipulate`Place[93]}, {"inversion curve points", 
                    Manipulate`Place[94]}, {"inversion circle radius", 
                    Manipulate`Place[95]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    False}}], Row[{" ", 
                    Dynamic[
                    If[
                    CalculateScan`PlotterScanner`Private`isopticCurveTF$$, 
                    Style[
                    "\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`isopticCurveColor$$, 
                    Bold], " "]], 
                    Tooltip[" isoptic curves       ", 
                    Style[
                    " inverse curves (points on isoptic curves have two \
tangents with the given curve and the two tangents meet with the specified \
angle)) ", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> Column[{
                    Grid[{{"show isoptic curves", 
                    Manipulate`Place[96]}, {"isoptic curve angle", 
                    Manipulate`Place[97]}, {"isoptic curve thickness", 
                    Manipulate`Place[98]}, {"isoptic curve color", 
                    Manipulate`Place[99]}, {"isoptic curve opacity", 
                    Manipulate`Place[100]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    False}}], 
                    Dynamic[
                    Style[
                    If[
                    TrueQ[
                    And[
                    CalculateScan`PlotterScanner`Private`isopticCurveTF$$, 
                    CalculateScan`PlotterScanner`Private`x1x2SCPCurves === \
{}]], "(note than the set of isoptic curves for a given angle can be empty)", 
                    ""]], 
                    RGBColor[
                    0.6666666666666666, 0.6666666666666666, 
                    0.6666666666666666]]}, Alignment -> Left], Row[{" ", 
                    Dynamic[
                    If[
                    CalculateScan`PlotterScanner`Private`orthotomicCurveTF$$, 
                    
                    Style[
                    "\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`orthotomicCurveColor$\
$, Bold], " "]], 
                    Tooltip[" orthotomic curves    ", 
                    Style[
                    " orthotomic curves (points of reflections of a given \
point on curve tangents)) ", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> 
                    Grid[{{"show orthotomic curves", 
                    Manipulate`Place[101]}, {"orthotomic curve angle", 
                    Manipulate`Place[102]}, {"orthotomic curve count", 
                    Manipulate`Place[103]}, {"orthotomic curve thickness", 
                    Manipulate`Place[104]}, {"orthotomic curve color", 
                    Manipulate`Place[105]}, {"orthotomic curve opacity", 
                    Manipulate`Place[106]}, {"orthotomic curve points", 
                    Manipulate`Place[107]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    False}}]}, 2, ImageSize -> {All, Automatic}, 
                    ControlPlacement -> Left]}, 
                    Dividers -> {None, {False, True, True, True}}, Spacings -> 
                    1], ItemSize -> Scaled[1], 
                    Frame -> {None, None, True, None}]}}, FrameStyle -> 
                    GrayLevel[0.9], Alignment -> Left, Spacings -> {0, 0.8}], 
                    False -> Button[
                    Row[{
                    RawBoxes[
                    GraphicsBox[
                    TagBox[
                    
                    RasterBox[{{{255, 255, 255}, {255, 255, 255}, {255, 132, 
                    0}, {255, 132, 0}, {255, 255, 255}, {255, 255, 255}}, {{
                    255, 255, 255}, {255, 255, 255}, {255, 132, 0}, {255, 132,
                     0}, {255, 255, 255}, {255, 255, 255}}, {{255, 132, 0}, {
                    255, 132, 0}, {255, 132, 0}, {255, 132, 0}, {255, 132, 
                    0}, {255, 132, 0}}, {{255, 132, 0}, {255, 132, 0}, {255, 
                    132, 0}, {255, 132, 0}, {255, 132, 0}, {255, 132, 0}}, {{
                    255, 255, 255}, {255, 255, 255}, {255, 132, 0}, {255, 132,
                     0}, {255, 255, 255}, {255, 255, 255}}, {{255, 255, 
                    255}, {255, 255, 255}, {255, 132, 0}, {255, 132, 0}, {255,
                     255, 255}, {255, 255, 255}}}, {{0, 6}, {6, 0}}, {0, 255},
                     ColorFunction -> RGBColor], 
                    BoxForm`ImageTag[
                    "Byte", ColorSpace -> "RGB", Interleaving -> True], 
                    Selectable -> False], BaseStyle -> "ImageGraphics", 
                    ImageSize -> Magnification[1], ImageSizeRaw -> {6, 6}, 
                    BaselinePosition -> (Scaled[0.3] -> Center), 
                    PlotRange -> {{0, 6}, {0, 6}}]], " More controls"}], 
                    CalculateUtilities`GraphicsUtilities`Private`more$$ = 
                    True, Appearance -> None, BaseStyle -> {}]}, 
                    Dynamic[
                    CalculateUtilities`GraphicsUtilities`Private`more$$], 
                    ImageSize -> Automatic]}], 
                    ImageMargins -> {{20, 30}, {10, 10}}]}, {1, 2}, 2, 
                    Alignment -> {Left, Top}]], {{
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleLastParamaters$$, {}}, ControlType -> None}, {{
                    CalculateScan`PlotterScanner`Private`osculatingCircles$$, \
{}}, ControlType -> None}, {{
                    CalculateScan`PlotterScanner`Private`\
taylorParabolaLastParamaters$$, {}}, ControlType -> None}, {{
                    CalculateScan`PlotterScanner`Private`taylorParabolas$$, \
{}}, ControlType -> None}, {{
                    CalculateScan`PlotterScanner`Private`\
offsetCurveLastParamaters$$, {}}, ControlType -> None}, {{
                    CalculateScan`PlotterScanner`Private`\
offsetCurvePlotCurves$$, {}}, ControlType -> None}, {{
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveLastParamaters$$, {}}, ControlType -> None}, {{
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurvePlotCurves$$, {}}, ControlType -> None}, {{
                    CalculateScan`PlotterScanner`Private`\
pedalCurveLastParamaters$$, {}}, ControlType -> None}, {{
                    CalculateScan`PlotterScanner`Private`pedalCurvePlotCurves$\
$, {}}, ControlType -> None}, {{
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurveLastParamaters$$, {}}, ControlType -> None}, {{
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurvePlotCurves$$, {}}, ControlType -> None}, {{
                    
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurveLastParamaters$$, {}}, ControlType -> None}, {{
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurvePlotCurves$$, {}}, ControlType -> None}, {{
                    CalculateScan`PlotterScanner`Private`\
dualCurveLastParamaters$$, {}}, ControlType -> None}, {{
                    CalculateScan`PlotterScanner`Private`dualCurvePlotCurves$$\
, {}}, ControlType -> None}, {{
                    CalculateScan`PlotterScanner`Private`\
inverseLastParamaters$$, {}}, ControlType -> None}, {{
                    CalculateScan`PlotterScanner`Private`\
inverseCurvePlotCurves$$, {}}, ControlType -> None}, {{
                    CalculateScan`PlotterScanner`Private`\
orthotomicLastParamaters$$, {}}, ControlType -> None}, {{
                    CalculateScan`PlotterScanner`Private`\
orthotomicCurvePlotCurves$$, {}}, ControlType -> None}, {{
                    CalculateScan`PlotterScanner`Private`\
isopticLastParamaters$$, {}}, ControlType -> None}, {{
                    CalculateScan`PlotterScanner`Private`\
isopticCurvePlotCurves$$, {}}, ControlType -> None}}, 
                  "Options" :> {
                   ControlPlacement -> {
                    Bottom, Bottom, Bottom, Bottom, Bottom, Bottom, Bottom, 
                    Bottom, Bottom, Bottom, Bottom, Bottom, Bottom, Bottom, 
                    Bottom, Bottom, Bottom, Bottom, Bottom, Bottom}, 
                    TrackedSymbols :> Manipulate, Paneled -> False, 
                    ControlPlacement -> Bottom, 
                    FrameMargins -> {{0, 0}, {0, 10}}, Paneled -> False, 
                    AppearanceElements -> {}, 
                    LabelStyle -> {
                    "DialogStyle", FontColor -> GrayLevel[0.25]}}, 
                  "DefaultOptions" :> {}], SingleEvaluation -> True], 
                Initialization :> ({
                  Attributes[CalculateScan`PlotterScanner`Private`x1Old$] = {
                    Temporary}, 
                   Attributes[CalculateScan`PlotterScanner`Private`x2Old$] = {
                    Temporary}, 
                   Attributes[
                    CalculateScan`PlotterScanner`Private`fy1Old$] = {
                    Temporary}, 
                   Attributes[
                    CalculateScan`PlotterScanner`Private`fy2Old$] = {
                    Temporary}, 
                   Attributes[CalculateScan`PlotterScanner`Private`X1$] = {
                    Temporary}, 
                   Attributes[CalculateScan`PlotterScanner`Private`X2$] = {
                    Temporary}, 
                   Attributes[
                    CalculateScan`PlotterScanner`Private`singularities$] = {
                    Temporary}, 
                   Attributes[CalculateScan`PlotterScanner`Private`ts$] = {
                    Temporary}, 
                   Attributes[CalculateScan`PlotterScanner`Private`xL$] = {
                    Temporary}, 
                   Attributes[CalculateScan`PlotterScanner`Private`xU$] = {
                    Temporary}, 
                   Attributes[CalculateScan`PlotterScanner`Private`yL$] = {
                    Temporary}, 
                   Attributes[CalculateScan`PlotterScanner`Private`yU$] = {
                    Temporary}, 
                   Attributes[CalculateScan`PlotterScanner`Private`pRX$] = {
                    Temporary}, 
                   Attributes[
                    CalculateScan`PlotterScanner`Private`\[CapitalDelta]X$] = \
{Temporary}, Attributes[
                    CalculateScan`PlotterScanner`Private`\[CapitalDelta]y$] = \
{Temporary}, Attributes[CalculateScan`PlotterScanner`Private`Y1$] = {
                    Temporary}, 
                   Attributes[CalculateScan`PlotterScanner`Private`Y2$] = {
                    Temporary}, 
                   Attributes[CalculateScan`PlotterScanner`Private`pRY$] = {
                    Temporary}, 
                   Attributes[
                    CalculateScan`PlotterScanner`Private`originalCurvePlot0$] = \
{Temporary}, Attributes[
                    CalculateScan`PlotterScanner`Private`originalCurvePlot$] = \
{Temporary}, Attributes[
                    CalculateScan`PlotterScanner`Private`tangentsLines$] = {
                    Temporary}, 
                   Attributes[
                    CalculateScan`PlotterScanner`Private`tangentLinePlot$] = {
                    Temporary}, 
                   Attributes[
                    CalculateScan`PlotterScanner`Private`normalLines$] = {
                    Temporary}, 
                   Attributes[
                    CalculateScan`PlotterScanner`Private`normalLinePlot$] = {
                    Temporary}, 
                   Attributes[
                    CalculateScan`PlotterScanner`Private`tiltedTangentLines$] = \
{Temporary}, Attributes[
                    CalculateScan`PlotterScanner`Private`\
tiltedTangentLinePlot$] = {Temporary}, 
                   Attributes[
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleRadii$] = {Temporary}, 
                   Attributes[
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleLastParamaters$] = {Temporary}, 
                   Attributes[
                    CalculateScan`PlotterScanner`Private`osculatingCirclePlot$\
] = {Temporary}, Attributes[
                    CalculateScan`PlotterScanner`Private`taylorParabolaPlot$] = \
{Temporary}, Attributes[CalculateScan`PlotterScanner`Private`evolutePlot$] = {
                    Temporary}, 
                   Attributes[
                    CalculateScan`PlotterScanner`Private`involutePlotCurves$] = \
{Temporary}, Attributes[
                    CalculateScan`PlotterScanner`Private`\
involutePlotCurveLastParamaters$] = {Temporary}, 
                   Attributes[
                    CalculateScan`PlotterScanner`Private`involutePlot$] = {
                    Temporary}, 
                   Attributes[CalculateScan`PlotterScanner`Private`iTab$] = {
                    Temporary}, 
                   Attributes[CalculateScan`PlotterScanner`Private`xLi$] = {
                    Temporary}, 
                   Attributes[CalculateScan`PlotterScanner`Private`xUi$] = {
                    Temporary}, 
                   Attributes[
                    CalculateScan`PlotterScanner`Private`arcLength$] = {
                    Temporary}, 
                   Attributes[CalculateScan`PlotterScanner`Private`arcL$] = {
                    Temporary}, 
                   Attributes[CalculateScan`PlotterScanner`Private`xi1$] = {
                    Temporary}, 
                   Attributes[CalculateScan`PlotterScanner`Private`xi2$] = {
                    Temporary}, 
                   Attributes[
                    CalculateScan`PlotterScanner`Private`lineSegments$] = {
                    Temporary}, 
                   Attributes[
                    CalculateScan`PlotterScanner`Private`baseSegments$] = {
                    Temporary}, 
                   Attributes[
                    CalculateScan`PlotterScanner`Private`oSegments$] = {
                    Temporary}, 
                   Attributes[
                    CalculateScan`PlotterScanner`Private`arcFactors$] = {
                    Temporary}, 
                   Attributes[
                    CalculateScan`PlotterScanner`Private`iTabRight$] = {
                    Temporary}, 
                   Attributes[
                    CalculateScan`PlotterScanner`Private`iTabLeft$] = {
                    Temporary}, 
                   Attributes[
                    CalculateScan`PlotterScanner`Private`signedArcFactors$] = \
{Temporary}, Attributes[CalculateScan`PlotterScanner`Private`curvePoints$] = {
                    Temporary}, 
                   CalculateScan`PlotterScanner`Private`addTangents[{
                    Pattern[CalculateScan`PlotterScanner`Private`fD0, 
                    Blank[]], 
                    Pattern[CalculateScan`PlotterScanner`Private`fD1, 
                    Blank[]]}, {
                    Pattern[CalculateScan`PlotterScanner`Private`x, 
                    Blank[]], 
                    Pattern[CalculateScan`PlotterScanner`Private`xMin, 
                    Blank[]], 
                    Pattern[CalculateScan`PlotterScanner`Private`xMax, 
                    Blank[]]}, 
                    Pattern[CalculateScan`PlotterScanner`Private`n, 
                    Blank[]], 
                    Pattern[CalculateScan`PlotterScanner`Private`opts, 
                    OptionsPattern[]]] := Quiet[
                    
                    Module[{}, 
                    CalculateScan`PlotterScanner`Private`\[Alpha] = 
                    OptionValue["TiltAngle"]; 
                    CalculateScan`PlotterScanner`Private`f = 
                    OptionValue["LengthFactor"]; 
                    CalculateScan`PlotterScanner`Private`bdq = 
                    OptionValue["Bidirectional"]; 
                    CalculateScan`PlotterScanner`Private`L = 
                    CalculateScan`PlotterScanner`Private`xMax - 
                    CalculateScan`PlotterScanner`Private`xMin; 
                    CalculateScan`PlotterScanner`Private`M = {{
                    Cos[CalculateScan`PlotterScanner`Private`\[Alpha]], 
                    Sin[CalculateScan`PlotterScanner`Private`\[Alpha]]}, {-
                    Sin[CalculateScan`PlotterScanner`Private`\[Alpha]], 
                    Cos[CalculateScan`PlotterScanner`Private`\[Alpha]]}}; 
                    CalculateScan`PlotterScanner`Private`pointsAndDirections = 
                    Cases[
                    Chop[
                    N[
                    Table[{{CalculateScan`PlotterScanner`Private`x, 
                    CalculateScan`PlotterScanner`Private`fD0[
                    CalculateScan`PlotterScanner`Private`x]}, (
                    CalculateScan`PlotterScanner`Private`f 
                    CalculateScan`PlotterScanner`Private`L) 
                    Dot[CalculateScan`PlotterScanner`Private`M, 
                    Normalize[{1, 
                    CalculateScan`PlotterScanner`Private`fD1[
                    CalculateScan`PlotterScanner`Private`x]}]]}, {
                    CalculateScan`PlotterScanner`Private`x, 
                    CalculateScan`PlotterScanner`Private`xMin, 
                    CalculateScan`PlotterScanner`Private`xMax, (
                    CalculateScan`PlotterScanner`Private`xMax - 
                    CalculateScan`PlotterScanner`Private`xMin)/
                    CalculateScan`PlotterScanner`Private`n}]]], {{
                    Blank[Real], 
                    Blank[Real]}, {
                    Blank[Real], 
                    Blank[Real]}}]; 
                    If[CalculateScan`PlotterScanner`Private`bdq === False, 
                    Line[
                    
                    Apply[{#, # + #2}& , 
                    CalculateScan`PlotterScanner`Private`pointsAndDirections, \
{1}]], 
                    Line[
                    
                    Apply[{# - #2, # + #2}& , 
                    CalculateScan`PlotterScanner`Private`pointsAndDirections, \
{1}]]]]], Options[CalculateScan`PlotterScanner`Private`addTangents] = {
                    "TiltAngle" -> 0, "LengthFactor" -> 1, "Bidirectional" -> 
                    True}, CalculateScan`PlotterScanner`Private`\
addOsculatingCircles[{
                    Pattern[CalculateScan`PlotterScanner`Private`fD0, 
                    Blank[]], 
                    Pattern[CalculateScan`PlotterScanner`Private`fD1, 
                    Blank[]], 
                    Pattern[CalculateScan`PlotterScanner`Private`fD2, 
                    Blank[]]}, {
                    Pattern[CalculateScan`PlotterScanner`Private`x, 
                    Blank[]], 
                    Pattern[CalculateScan`PlotterScanner`Private`xMin, 
                    Blank[]], 
                    Pattern[CalculateScan`PlotterScanner`Private`xMax, 
                    Blank[]]}, 
                    Pattern[CalculateScan`PlotterScanner`Private`n, 
                    Blank[]]] := Quiet[
                    
                    Module[{}, 
                    CalculateScan`PlotterScanner`Private`centersAndRadii = 
                    Cases[
                    N[
                    Chop[
                    N[
                    Table[{{CalculateScan`PlotterScanner`Private`x, 
                    CalculateScan`PlotterScanner`Private`fD0[
                    CalculateScan`PlotterScanner`Private`x]} + ({-
                    CalculateScan`PlotterScanner`Private`fD1[
                    CalculateScan`PlotterScanner`Private`x], 1} (1 + 
                    CalculateScan`PlotterScanner`Private`fD1[
                    CalculateScan`PlotterScanner`Private`x]^2))/
                    CalculateScan`PlotterScanner`Private`fD2[
                    CalculateScan`PlotterScanner`Private`x], 
                    Abs[
                    1/(CalculateScan`PlotterScanner`Private`fD2[
                    CalculateScan`PlotterScanner`Private`x]/(1 + 
                    CalculateScan`PlotterScanner`Private`fD1[
                    CalculateScan`PlotterScanner`Private`x]^2)^(3/2))]}, {
                    CalculateScan`PlotterScanner`Private`x, 
                    CalculateScan`PlotterScanner`Private`xMin, 
                    CalculateScan`PlotterScanner`Private`xMax, (
                    CalculateScan`PlotterScanner`Private`xMax - 
                    CalculateScan`PlotterScanner`Private`xMin)/
                    CalculateScan`PlotterScanner`Private`n}]]]], {{
                    Blank[Real], 
                    Blank[Real]}, 
                    Blank[Real]}]; 
                    Apply[Circle, 
                    CalculateScan`PlotterScanner`Private`centersAndRadii, {
                    1}]]], CalculateScan`PlotterScanner`Private`\
addOsculatingCircleRadii[{
                    Pattern[CalculateScan`PlotterScanner`Private`fD0, 
                    Blank[]], 
                    Pattern[CalculateScan`PlotterScanner`Private`fD1, 
                    Blank[]], 
                    Pattern[CalculateScan`PlotterScanner`Private`fD2, 
                    Blank[]]}, {
                    Pattern[CalculateScan`PlotterScanner`Private`x, 
                    Blank[]], 
                    Pattern[CalculateScan`PlotterScanner`Private`xMin, 
                    Blank[]], 
                    Pattern[CalculateScan`PlotterScanner`Private`xMax, 
                    Blank[]]}, 
                    Pattern[CalculateScan`PlotterScanner`Private`n, 
                    Blank[]]] := Quiet[
                    
                    Module[{}, 
                    CalculateScan`PlotterScanner`Private`\
touchPointsAndCenters = Cases[
                    Chop[
                    N[
                    Table[{{CalculateScan`PlotterScanner`Private`x, 
                    CalculateScan`PlotterScanner`Private`fD0[
                    CalculateScan`PlotterScanner`Private`x]}, {
                    CalculateScan`PlotterScanner`Private`x, 
                    CalculateScan`PlotterScanner`Private`fD0[
                    CalculateScan`PlotterScanner`Private`x]} + ({-
                    CalculateScan`PlotterScanner`Private`fD1[
                    CalculateScan`PlotterScanner`Private`x], 1} (1 + 
                    CalculateScan`PlotterScanner`Private`fD1[
                    CalculateScan`PlotterScanner`Private`x]^2))/
                    CalculateScan`PlotterScanner`Private`fD2[
                    CalculateScan`PlotterScanner`Private`x]}, {
                    CalculateScan`PlotterScanner`Private`x, 
                    CalculateScan`PlotterScanner`Private`xMin, 
                    CalculateScan`PlotterScanner`Private`xMax, (
                    CalculateScan`PlotterScanner`Private`xMax - 
                    CalculateScan`PlotterScanner`Private`xMin)/
                    CalculateScan`PlotterScanner`Private`n}]]], {{
                    Blank[Real], 
                    Blank[Real]}, {
                    Blank[Real], 
                    Blank[Real]}}]; 
                    Line[CalculateScan`PlotterScanner`Private`\
touchPointsAndCenters]]], 
                   CalculateScan`PlotterScanner`Private`addTaylorParabolas[{
                    Pattern[CalculateScan`PlotterScanner`Private`fD0, 
                    Blank[]], 
                    Pattern[CalculateScan`PlotterScanner`Private`fD1, 
                    Blank[]], 
                    Pattern[CalculateScan`PlotterScanner`Private`fD2, 
                    Blank[]]}, {
                    Pattern[CalculateScan`PlotterScanner`Private`x, 
                    Blank[]], 
                    Pattern[CalculateScan`PlotterScanner`Private`xMin, 
                    Blank[]], 
                    Pattern[CalculateScan`PlotterScanner`Private`xMax, 
                    Blank[]]}, 
                    Pattern[CalculateScan`PlotterScanner`Private`n, 
                    Blank[]]] := Quiet[
                    
                    Module[{}, 
                    CalculateScan`PlotterScanner`Private`parabolas = 
                    Table[CalculateScan`PlotterScanner`Private`fD0[
                    CalculateScan`PlotterScanner`Private`y] + 
                    CalculateScan`PlotterScanner`Private`fD1[
                    CalculateScan`PlotterScanner`Private`y] (
                    CalculateScan`PlotterScanner`Private`x - 
                    CalculateScan`PlotterScanner`Private`y) + (
                    CalculateScan`PlotterScanner`Private`fD2[
                    CalculateScan`PlotterScanner`Private`y] (
                    CalculateScan`PlotterScanner`Private`x - 
                    CalculateScan`PlotterScanner`Private`y)^2)/2, {
                    CalculateScan`PlotterScanner`Private`y, 
                    CalculateScan`PlotterScanner`Private`xMin, 
                    CalculateScan`PlotterScanner`Private`xMax, (
                    CalculateScan`PlotterScanner`Private`xMax - 
                    CalculateScan`PlotterScanner`Private`xMin)/
                    CalculateScan`PlotterScanner`Private`n}]; Cases[
                    Plot[
                    Evaluate[
                    CalculateScan`PlotterScanner`Private`parabolas], {
                    CalculateScan`PlotterScanner`Private`x, 
                    CalculateScan`PlotterScanner`Private`xMin, 
                    CalculateScan`PlotterScanner`Private`xMax}], 
                    Blank[Line], Infinity]]], 
                   Attributes[Derivative] = {NHoldAll, ReadProtected}, 
                   Attributes[
                    CalculateScan`PlotterScanner`Private`maxDist$] = {
                    Temporary}, 
                   Attributes[CalculateScan`PlotterScanner`Private`M$] = {
                    Temporary}, 
                   Attributes[
                    CalculateScan`PlotterScanner`Private`pedalCurveCount$] = {
                    Temporary}, 
                   Attributes[CalculateScan`PlotterScanner`Private`px$] = {
                    Temporary}, 
                   Attributes[CalculateScan`PlotterScanner`Private`py$] = {
                    Temporary}, 
                   Attributes[
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurveCount$] = {Temporary}, 
                   Attributes[
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurveCount$] = {Temporary}, 
                   Attributes[
                    CalculateScan`PlotterScanner`Private`dualCurveCount$] = {
                    Temporary}, 
                   Attributes[
                    CalculateScan`PlotterScanner`Private`inverseCurveCount$] = \
{Temporary}, Attributes[CalculateScan`PlotterScanner`Private`R$] = {
                    Temporary}, 
                   Attributes[
                    CalculateScan`PlotterScanner`Private`orthotomicCurveCount$\
] = {Temporary}, Attributes[
                    CalculateScan`PlotterScanner`Private`\[Alpha]$] = {
                    Temporary}, 
                   CalculateScan`PlotterScanner`Private`\
tangentIntersectionPoint[{
                    Pattern[CalculateScan`PlotterScanner`Private`x1, 
                    Blank[]], 
                    Pattern[CalculateScan`PlotterScanner`Private`x2, 
                    Blank[]]}, {
                    Pattern[CalculateScan`PlotterScanner`Private`fD0, 
                    Blank[]], 
                    Pattern[CalculateScan`PlotterScanner`Private`fD1, 
                    Blank[]]}] := {(-
                    CalculateScan`PlotterScanner`Private`fD0[
                    CalculateScan`PlotterScanner`Private`x1] + 
                    CalculateScan`PlotterScanner`Private`fD0[
                    CalculateScan`PlotterScanner`Private`x2] + 
                    CalculateScan`PlotterScanner`Private`x1 
                    CalculateScan`PlotterScanner`Private`fD1[
                    CalculateScan`PlotterScanner`Private`x1] - 
                    CalculateScan`PlotterScanner`Private`x2 
                    CalculateScan`PlotterScanner`Private`fD1[
                    CalculateScan`PlotterScanner`Private`x2])/(
                    CalculateScan`PlotterScanner`Private`fD1[
                    CalculateScan`PlotterScanner`Private`x1] - 
                    CalculateScan`PlotterScanner`Private`fD1[
                    CalculateScan`PlotterScanner`Private`x2]), 
                    CalculateScan`PlotterScanner`Private`fD0[
                    CalculateScan`PlotterScanner`Private`x1] + (
                    CalculateScan`PlotterScanner`Private`fD1[
                    CalculateScan`PlotterScanner`Private`x1] (-
                    CalculateScan`PlotterScanner`Private`fD0[
                    CalculateScan`PlotterScanner`Private`x1] + 
                    CalculateScan`PlotterScanner`Private`fD0[
                    CalculateScan`PlotterScanner`Private`x2] + (
                    CalculateScan`PlotterScanner`Private`x1 - 
                    CalculateScan`PlotterScanner`Private`x2) 
                    CalculateScan`PlotterScanner`Private`fD1[
                    CalculateScan`PlotterScanner`Private`x2]))/(
                    CalculateScan`PlotterScanner`Private`fD1[
                    CalculateScan`PlotterScanner`Private`x1] - 
                    CalculateScan`PlotterScanner`Private`fD1[
                    CalculateScan`PlotterScanner`Private`x2])}, 
                   Attributes[RawBoxes] = {ReadProtected}, 
                   Attributes[Subscript] = {NHoldRest}}; 
                 Typeset`initDone$$ = True), DynamicModuleValues :> {}, 
                Deinitialization :> None, 
                UntrackedVariables :> {Typeset`size$$}, 
                SynchronousInitialization -> True, 
                UnsavedVariables :> {Typeset`initDone$$}], "Manipulate", 
               Deployed -> True, StripOnInput -> False], TraditionalForm], 
             Manipulate`InterpretManipulate[1]], TraditionalForm]], 
          "Output"]}], 
       XMLElement["dataformats", {}, {}]}]}], Typeset`pod3$$ = XMLElement[
   "pod", {"title" -> "Alternate forms of the integral", "scanner" -> 
     "Integral", "id" -> "AlternateForm", "position" -> "300", "error" -> 
     "false", "numsubpods" -> "2"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["moutput", {}, {"E^(4 x) (1/32 - x/8 + x^2/4)"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            StyleBox[
             RowBox[{
               StyleBox[
                RowBox[{
                  SuperscriptBox["\[ExponentialE]", 
                   RowBox[{"4", " ", "x"}]], " ", 
                  RowBox[{"(", 
                    RowBox[{
                    FractionBox[
                    SuperscriptBox["x", "2"], "4"], "-", 
                    FractionBox["x", "8"], "+", 
                    FractionBox["1", "32"]}], ")"}]}], 
                GrayLevel[0]], "+", 
               StyleBox[
               "constant", FontFamily -> "Helvetica", Magnification -> 
                0.9 Inherited]}], 
             GrayLevel[0.6]], TraditionalForm]], "Output"]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,moutput,computabledata,formatteddata,formuladata"}]}], 
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {
        "PowerExpand[(E^(4 x) (1 - 4 x + 8 x^2))/32, Assumptions -> {}]"}], 
       XMLElement[
       "moutput", {}, {"E^(4 x)/32 - (E^(4 x) x)/8 + (E^(4 x) x^2)/4"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            StyleBox[
             RowBox[{
               StyleBox[
                RowBox[{
                  RowBox[{
                    FractionBox["1", "4"], " ", 
                    SuperscriptBox["\[ExponentialE]", 
                    RowBox[{"4", " ", "x"}]], " ", 
                    SuperscriptBox["x", "2"]}], "-", 
                  RowBox[{
                    FractionBox["1", "8"], " ", 
                    SuperscriptBox["\[ExponentialE]", 
                    RowBox[{"4", " ", "x"}]], " ", "x"}], "+", 
                  FractionBox[
                   SuperscriptBox["\[ExponentialE]", 
                    RowBox[{"4", " ", "x"}]], "32"]}], 
                GrayLevel[0]], "+", 
               StyleBox[
               "constant", FontFamily -> "Helvetica", Magnification -> 
                0.9 Inherited]}], 
             GrayLevel[0.6]], TraditionalForm]], "Output"]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata,formuladata"}]}\
]}], Typeset`pod4$$ = XMLElement[
   "pod", {"title" -> "Series expansion of the integral at x=0", "scanner" -> 
     "Series", "id" -> "SeriesExpansionOfTheIntegralAtX=0", "position" -> 
     "400", "error" -> "false", "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {"Series[(E^(4 x) (1 - 4 x + 8 x^2))/32, {x, 0, 7}]"}], 
       XMLElement[
       "moutput", {}, {
        "SeriesData[x, 0, {1/32, 0, 0, 1/3, 1, 8/5, 16/9, 32/21}, 0, 8, 1]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            InterpretationBox[
             RowBox[{
               FractionBox["1", "32"], "+", 
               FractionBox[
                SuperscriptBox["x", "3"], "3"], "+", 
               SuperscriptBox["x", "4"], "+", 
               FractionBox[
                RowBox[{"8", " ", 
                  SuperscriptBox["x", "5"]}], "5"], "+", 
               FractionBox[
                RowBox[{"16", " ", 
                  SuperscriptBox["x", "6"]}], "9"], "+", 
               FractionBox[
                RowBox[{"32", " ", 
                  SuperscriptBox["x", "7"]}], "21"], "+", 
               InterpretationBox[
                RowBox[{"O", "(", 
                  SuperscriptBox["x", "8"], ")"}], 
                SeriesData[$CellContext`x, 0, {}, 0, 8, 1], Editable -> 
                False]}], 
             SeriesData[$CellContext`x, 0, {
               Rational[1, 32], 0, 0, 
               Rational[1, 3], 1, 
               Rational[8, 5], 
               Rational[16, 9], 
               Rational[32, 21]}, 0, 8, 1], Editable -> False], 
            TraditionalForm]], "Output"]}], 
       XMLElement["dataformats", {}, {"plaintext,minput,moutput"}]}], 
     XMLElement["states", {"count" -> "1"}, {
       XMLElement[
       "state", {
        "name" -> "More terms", "input" -> 
         "SeriesExpansionOfTheIntegralAtX=0__More terms"}, {}]}]}], 
   Typeset`pod5$$ = XMLElement[
   "pod", {"title" -> "Series expansion of the integral at x=\[Infinity]", 
     "scanner" -> "Series", "id" -> 
     "SeriesExpansionOfTheIntegralAtX=Infinity", "position" -> "500", "error" -> 
     "false", "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {
        "Series[(E^(4 x) (1 - 4 x + 8 x^2))/32, {x, Infinity, 7}]"}], 
       XMLElement[
       "moutput", {}, {
        "E^(4 x) SeriesData[x, Infinity, {1/4, -1/8, 1/32}, -2, 8, 1]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            RowBox[{
              SuperscriptBox["\[ExponentialE]", 
               RowBox[{"4", " ", "x"}]], " ", 
              RowBox[{"(", 
                RowBox[{
                  FractionBox[
                   SuperscriptBox["x", "2"], "4"], "-", 
                  FractionBox["x", "8"], "+", 
                  FractionBox["1", "32"]}], ")"}]}], TraditionalForm]], 
          "Output"]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata,formuladata"}]}\
]}], Typeset`pod6$$ = XMLElement[
   "pod", {"title" -> "Definite integral", "scanner" -> "Integral", "id" -> 
     "DefiniteIntegral", "position" -> "600", "error" -> "false", 
     "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {"N[Integrate[E^(4 x) x^2, {x, -Infinity, 0}]]"}], 
       XMLElement["moutput", {}, {"0.03125"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            RowBox[{
              TagBox[
               RowBox[{
                 SubsuperscriptBox["\[Integral]", 
                  RowBox[{"-", "\[Infinity]"}], "0"], 
                 RowBox[{
                   RowBox[{
                    SuperscriptBox["\[ExponentialE]", 
                    RowBox[{"4", " ", "x"}]], " ", 
                    SuperscriptBox["x", "2"]}], 
                   RowBox[{"\[DifferentialD]", "x"}]}]}], HoldForm], 
              "\[LongEqual]", 
              FractionBox["1", "32"], "\[TildeTilde]", "0.03125`"}], 
            TraditionalForm]], "Output"]}], 
       XMLElement["dataformats", {}, {"plaintext,minput,moutput"}], 
       XMLElement["states", {"count" -> "1"}, {
         XMLElement[
         "state", {
          "name" -> "More digits", "input" -> 
           "DefiniteIntegral___More digits"}, {}]}]}]}], Typeset`aux1$$ = {
   True, False, {False, False}, True}, Typeset`aux2$$ = {
   True, False, {False, False, False}, True}, Typeset`aux3$$ = {
   True, False, {False, False}, True}, Typeset`aux4$$ = {
   True, False, {False}, True}, Typeset`aux5$$ = {True, False, {False}, True},
    Typeset`aux6$$ = {True, False, {False}, True}, Typeset`asyncpods$$ = {}, 
   Typeset`nonpods$$ = {}, Typeset`initdone$$ = True, Typeset`queryinfo$$ = {
   "success" -> "true", "error" -> "false", "numpods" -> "6", "datatypes" -> 
    "", "timedout" -> "", "timing" -> "3.123", "parsetiming" -> "0.387", 
    "parsetimedout" -> "false", "recalculate" -> "", "id" -> 
    "MSP60619h2g89144di8e0g000049ai7i97ifbc1gh5&s=20", "related" -> 
    "http://www4c.wolframalpha.com/api/v2/relatedQueries.jsp?id=\
MSP60719h2g89144di8e0g00001bgc6g8iebf136ge&s=20", "version" -> "2.1"}, 
   Typeset`sessioninfo$$ = {
   "TimeZone" -> -6., 
    "Date" -> {2011, 8, 31, 10, 26, 47.66611`8.430784687225684}, "Line" -> 13,
     "SessionID" -> 23093400895694277690}, Typeset`showpods$$ = {1, 2, 3, 4, 
   5, 6}, Typeset`failedpods$$ = {}, Typeset`chosen$$ = {
   "Fast parse", "Fast parse", 1, 0, "Input", "Integrate[Exp[4*x]*x^2, x]"}, 
   Typeset`open$$ = False, Typeset`newq$$ = "Integrate[ Exp[4*x]*x^2,x]"}, 
   DynamicBox[ToBoxes[
     AlphaIntegration`FormatAlphaResults[
      Dynamic[{
       1, {Typeset`pod1$$, Typeset`pod2$$, Typeset`pod3$$, Typeset`pod4$$, 
         Typeset`pod5$$, Typeset`pod6$$}, {
        Typeset`aux1$$, Typeset`aux2$$, Typeset`aux3$$, Typeset`aux4$$, 
         Typeset`aux5$$, Typeset`aux6$$}, Typeset`chosen$$, Typeset`open$$, 
        Typeset`elements$$, Typeset`q$$, Typeset`opts$$, Typeset`nonpods$$, 
        Typeset`queryinfo$$, Typeset`sessioninfo$$, Typeset`showpods$$, 
        Typeset`failedpods$$, Typeset`newq$$}]], StandardForm],
    ImageSizeCache->{205., {27., 16.}},
    TrackedSymbols:>{Typeset`showpods$$, Typeset`failedpods$$}],
   DynamicModuleValues:>{},
   Initialization:>If[
     Not[Typeset`initdone$$], WolframAlphaClient`Private`doAsyncUpdates[
       Hold[{
        Typeset`pod1$$, Typeset`pod2$$, Typeset`pod3$$, Typeset`pod4$$, 
         Typeset`pod5$$, Typeset`pod6$$}], Typeset`asyncpods$$, 
       Dynamic[Typeset`failedpods$$]]; Typeset`asyncpods$$ = {}; 
     Typeset`initdone$$ = True],
   SynchronousInitialization->False],
  BaseStyle->{Deployed -> True},
  DeleteWithContents->True,
  Editable->False,
  SelectWithContents->True]], "WolframAlphaShortInput"],

Cell[BoxData[
 FormBox[
  RowBox[{
   FractionBox["1", "32"], " ", 
   SuperscriptBox["\[ExponentialE]", 
    RowBox[{"4", " ", "x"}]], " ", 
   RowBox[{"(", 
    RowBox[{
     RowBox[{"8", " ", 
      SuperscriptBox["x", "2"]}], "-", 
     RowBox[{"4", " ", "x"}], "+", "1"}], ")"}]}], TraditionalForm]], "Output",\

 CellChangeTimes->{3.523796743590962*^9}]
}, Closed]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Integrate", "[", 
  RowBox[{
   RowBox[{"Integrate", "[", 
    RowBox[{
     RowBox[{
      SuperscriptBox["x", "2"], 
      SuperscriptBox["y", "2"]}], ",", 
     RowBox[{"{", 
      RowBox[{"x", ",", "x1", ",", "x2"}], "}"}]}], "]"}], ",", 
   RowBox[{"{", 
    RowBox[{"y", ",", "y1", ",", "y2"}], "}"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.5237971956037197`*^9, 3.523797222800378*^9}}],

Cell[BoxData[
 FormBox[
  RowBox[{
   FractionBox[
    RowBox[{
     SuperscriptBox["x1", "3"], " ", 
     SuperscriptBox["y1", "3"]}], "9"], "-", 
   FractionBox[
    RowBox[{
     SuperscriptBox["x1", "3"], " ", 
     SuperscriptBox["y2", "3"]}], "9"], "-", 
   FractionBox[
    RowBox[{
     SuperscriptBox["x2", "3"], " ", 
     SuperscriptBox["y1", "3"]}], "9"], "+", 
   FractionBox[
    RowBox[{
     SuperscriptBox["x2", "3"], " ", 
     SuperscriptBox["y2", "3"]}], "9"]}], TraditionalForm]], "Output",
 CellChangeTimes->{3.523797223630962*^9}]
}, Closed]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Simplify", "[", "%", "]"}]], "Input",
 CellChangeTimes->{{3.523797228773223*^9, 3.523797235961541*^9}}],

Cell[BoxData[
 FormBox[
  RowBox[{
   FractionBox["1", "9"], " ", 
   RowBox[{"(", 
    RowBox[{
     SuperscriptBox["x1", "3"], "-", 
     SuperscriptBox["x2", "3"]}], ")"}], " ", 
   RowBox[{"(", 
    RowBox[{
     SuperscriptBox["y1", "3"], "-", 
     SuperscriptBox["y2", "3"]}], ")"}]}], TraditionalForm]], "Output",
 CellChangeTimes->{3.523797236355968*^9}]
}, Closed]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Integrate", "[", 
  RowBox[{
   RowBox[{"Integrate", "[", 
    RowBox[{
     RowBox[{"x", "*", 
      SuperscriptBox["y", "4"]}], ",", 
     RowBox[{"{", 
      RowBox[{"x", ",", "0", ",", "1.4"}], "}"}]}], "]"}], ",", 
   RowBox[{"{", 
    RowBox[{"y", ",", "0", ",", "6.1"}], "}"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.523797343308589*^9, 3.523797374984126*^9}, {
  3.52379744763206*^9, 3.5237974486052217`*^9}}],

Cell[BoxData[
 FormBox["1655.4087499599993`", TraditionalForm]], "Output",
 CellChangeTimes->{3.523797376748645*^9, 3.5237974490842953`*^9}]
}, Closed]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  SuperscriptBox["6.1", "5"], "/", "5"}]], "Input",
 CellChangeTimes->{{3.5237973825054617`*^9, 3.5237973852458897`*^9}}],

Cell[BoxData[
 FormBox["1689.1926019999996`", TraditionalForm]], "Output",
 CellChangeTimes->{3.523797385780031*^9}]
}, Closed]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"%", " ", 
  RowBox[{"(", 
   RowBox[{
    RowBox[{"1.4", "^", "2"}], "/", "2"}], ")"}]}]], "Input",
 CellChangeTimes->{{3.523797388882709*^9, 3.523797399061838*^9}}],

Cell[BoxData[
 FormBox["1655.4087499599993`", TraditionalForm]], "Output",
 CellChangeTimes->{3.52379740098833*^9}]
}, Closed]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Cos", "[", "0", "]"}]], "Input",
 CellChangeTimes->{{3.523797549743126*^9, 3.523797551936544*^9}}],

Cell[BoxData[
 FormBox["1", TraditionalForm]], "Output",
 CellChangeTimes->{3.523797552767312*^9}]
}, Closed]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Cos", "[", 
  RowBox[{"\[Pi]", "/", "2"}], "]"}]], "Input",
 CellChangeTimes->{{3.5237975540175962`*^9, 3.5237975577132053`*^9}}],

Cell[BoxData[
 FormBox["0", TraditionalForm]], "Output",
 CellChangeTimes->{3.523797558096447*^9}]
}, Closed]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Integrate", "[", 
  RowBox[{
   RowBox[{"Exp", "[", 
    RowBox[{"I", " ", "*", " ", "p"}], "]"}], ",", "p"}], "]"}]], "Input",
 CellChangeTimes->{{3.523797587171358*^9, 3.523797598790711*^9}}],

Cell[BoxData[
 FormBox[
  RowBox[{
   RowBox[{"-", "\[ImaginaryI]"}], " ", 
   SuperscriptBox["\[ExponentialE]", 
    RowBox[{"\[ImaginaryI]", " ", "p"}]]}], TraditionalForm]], "Output",
 CellChangeTimes->{3.523797599304474*^9}]
}, Closed]]
}, Closed]],

Cell[CellGroupData[{

Cell["Homework 2: Due 9-6-11", "Subsubsection",
 CellChangeTimes->{{3.524306758699484*^9, 3.524306767305282*^9}}],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"l", "[", 
    RowBox[{"l1_", ",", "\[Beta]_"}], "]"}], " ", "=", " ", 
   FractionBox["l1", 
    RowBox[{"1", "/", 
     SqrtBox[
      RowBox[{"1", "-", 
       SuperscriptBox["\[Beta]", "2"]}]]}]]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"t", " ", "[", 
    RowBox[{"t1_", ",", "\[Beta]_"}], "]"}], " ", "=", " ", 
   RowBox[{"t", "*", " ", 
    RowBox[{"(", 
     FractionBox["1", 
      SqrtBox[
       RowBox[{"1", "-", " ", 
        SuperscriptBox["\[Beta]", "2"]}]]], ")"}]}]}], ";"}]}], "Input",
 CellChangeTimes->{{3.52430773371498*^9, 3.52430783294829*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"1", "*", 
  SqrtBox[
   RowBox[{"1", "-", 
    SuperscriptBox[".69", "2"]}]]}]], "Input",
 CellChangeTimes->{{3.5243069871770573`*^9, 3.52430699616392*^9}}],

Cell[BoxData[
 FormBox["0.7238093671679029`", TraditionalForm]], "Output",
 CellChangeTimes->{3.524306997761322*^9}]
}, Closed]],

Cell[CellGroupData[{

Cell[BoxData[
 FractionBox[".723809", 
  RowBox[{".69", "*", "3", "*", 
   SuperscriptBox["10", "8"]}]]], "Input",
 CellChangeTimes->{{3.524307153056964*^9, 3.524307188533886*^9}}],

Cell[BoxData[
 FormBox["3.496661835748793`*^-9", TraditionalForm]], "Output",
 CellChangeTimes->{{3.524307167997415*^9, 3.5243071891126423`*^9}}]
}, Closed]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"10835", "*", 
   RowBox[{"1000", "/", "3600"}]}], "//", "N"}]], "Input",
 CellChangeTimes->{{3.524308051363161*^9, 3.524308069379952*^9}, {
  3.5243082460178213`*^9, 3.524308249414297*^9}}],

Cell[BoxData[
 FormBox["3009.722222222222`", TraditionalForm]], "Output",
 CellChangeTimes->{{3.524308430176186*^9, 3.524308435083311*^9}}]
}, Closed]],

Cell[BoxData[
 RowBox[{"%", "/", 
  RowBox[{"(", 
   RowBox[{"3", "*", 
    SuperscriptBox["10", "8"]}], ")"}]}]], "Input",
 CellChangeTimes->{{3.5243080890936613`*^9, 3.524308097914783*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 FormBox[
  RowBox[{"a", " ", "=", " ", "0.000010032407407407408`"}], 
  TraditionalForm]], "Input",
 CellChangeTimes->{{3.5243089973351917`*^9, 3.524308998100136*^9}}],

Cell[BoxData[
 FormBox["0.000010032407407407408`", TraditionalForm]], "Output",
 CellChangeTimes->{3.524309002452818*^9}]
}, Closed]],

Cell[CellGroupData[{

Cell[BoxData["a"], "Input",
 CellChangeTimes->{3.52430900387127*^9}],

Cell[BoxData[
 FormBox["0.000010032407407407408`", TraditionalForm]], "Output",
 CellChangeTimes->{3.524309004055867*^9}]
}, Closed]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"l", "[", 
  RowBox[{"3.6", ",", "%"}], "]"}]], "Input",
 CellChangeTimes->{{3.524308333370358*^9, 3.524308340140604*^9}}],

Cell[BoxData[
 FormBox["3.5999999998188312`", TraditionalForm]], "Output",
 CellChangeTimes->{3.524308346773423*^9, 3.5243084370527153`*^9}]
}, Closed]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"3.6", "-", 
  RowBox[{"(", 
   RowBox[{"3.6", "*", 
    SqrtBox[
     RowBox[{"1", "-", 
      SuperscriptBox[
       RowBox[{"(", "0.0000100324", ")"}], "2"]}]]}], ")"}]}]], "Input",
 CellChangeTimes->{{3.5243083679619303`*^9, 3.524308385226289*^9}, {
  3.5243087041638393`*^9, 3.524308706587016*^9}}],

Cell[BoxData[
 FormBox["1.811684136043823`*^-10", TraditionalForm]], "Output",
 CellChangeTimes->{3.524308915245367*^9}]
}, Closed]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"10", "-", 
  RowBox[{"(", 
   RowBox[{"10", "*", 
    RowBox[{"(", 
     FractionBox["1", 
      SqrtBox[
       RowBox[{"1", "-", 
        SuperscriptBox["a", "2"]}]]], ")"}]}], ")"}]}]], "Input",
 CellChangeTimes->{{3.5243089182992363`*^9, 3.524308943297812*^9}, 
   3.524309008216812*^9}],

Cell[BoxData[
 FormBox[
  RowBox[{"-", "5.032454453157698`*^-10"}], TraditionalForm]], "Output",
 CellChangeTimes->{3.5243089438409147`*^9, 3.5243090087455063`*^9}]
}, Closed]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"10.4", "/", "3090"}]], "Input",
 CellChangeTimes->{{3.524309123281618*^9, 3.524309125700816*^9}, {
  3.524313859192273*^9, 3.524313864783725*^9}}],

Cell[BoxData[
 FormBox["0.003365695792880259`", TraditionalForm]], "Output",
 CellChangeTimes->{3.524309126236669*^9, 3.524313865585599*^9}]
}, Closed]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Solve", " ", "[", 
  RowBox[{
   RowBox[{"\[Gamma]", "==", " ", 
    FractionBox["1", 
     SqrtBox[
      RowBox[{"1", "-", 
       SuperscriptBox["\[Beta]", "2"]}]]]}], ",", "\[Beta]"}], "]"}]], "Input",\

 CellChangeTimes->{{3.524314237254203*^9, 3.5243142931939573`*^9}, {
  3.524314335319641*^9, 3.524314335503194*^9}}],

Cell[BoxData[
 FormBox[
  RowBox[{"{", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"\[Beta]", "\[Rule]", 
      RowBox[{"-", 
       FractionBox[
        SqrtBox[
         RowBox[{
          SuperscriptBox["\[Gamma]", "2"], "-", "1"}]], "\[Gamma]"]}]}], 
     "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"\[Beta]", "\[Rule]", 
      FractionBox[
       SqrtBox[
        RowBox[{
         SuperscriptBox["\[Gamma]", "2"], "-", "1"}]], "\[Gamma]"]}], "}"}]}],
    "}"}], TraditionalForm]], "Output",
 CellChangeTimes->{{3.5243142693980627`*^9, 3.5243142936786213`*^9}, 
   3.524314335864586*^9}]
}, Closed]],

Cell[CellGroupData[{

Cell[BoxData[
 FormBox[
  FractionBox[
   SqrtBox["9548099"], "3090"], TraditionalForm]], "Input",
 CellChangeTimes->{{3.5243143039149017`*^9, 3.5243143234311953`*^9}}],

Cell[BoxData[
 FormBox["2.999999842900678`*^8", TraditionalForm]], "Output",
 CellChangeTimes->{{3.524314310507333*^9, 3.524314318153947*^9}}]
}, Closed]]
}, Closed]],

Cell[CellGroupData[{

Cell["Homework 3: Due 9-8-11", "Subsubsection",
 CellChangeTimes->{{3.52448835792514*^9, 3.524488365708385*^9}}],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"\[Delta]m", " ", "[", 
    RowBox[{"m_", ",", "eTNT_"}], "]"}], ":=", 
   RowBox[{
    RowBox[{"m", "*", "2000", "*", ".454"}], " ", "-", " ", 
    FractionBox[
     RowBox[{"(", 
      RowBox[{
       RowBox[{"m", "*", "2000", "*", ".454", "*", 
        SuperscriptBox[
         RowBox[{"(", "3*^8", ")"}], "2"]}], "-", 
       RowBox[{"eTNT", "*", "m"}]}], ")"}], 
     SuperscriptBox[
      RowBox[{"(", "3*^8", ")"}], "2"]]}]}], " ", 
  RowBox[{"(*", 
   RowBox[{
    RowBox[{"Problem", " ", "1", " ", "function"}], ",", " ", 
    RowBox[{"units", " ", "are", " ", "tons", " ", "and", " ", "Joules"}]}], 
   " ", "*)"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"work", " ", "[", 
     RowBox[{"\[Beta]2_", ",", "\[Beta]1_", ",", "mass_"}], "]"}], " ", ":=", 
    " ", 
    RowBox[{
     RowBox[{
      RowBox[{"(", 
       RowBox[{
        RowBox[{"\[Gamma]", "[", 
         RowBox[{"\[Beta]2", "/", "3"}], "]"}], "-", "1"}], ")"}], "*", 
      "mass"}], " ", "-", " ", 
     RowBox[{
      RowBox[{"(", 
       RowBox[{
        RowBox[{"\[Gamma]", "[", 
         RowBox[{"\[Beta]1", "/", "3"}], "]"}], "-", "1"}], ")"}], "*", 
      "mass"}]}]}], " ", ";"}], " ", 
  RowBox[{"(*", 
   RowBox[{
    RowBox[{"problem", " ", "2", " ", "function"}], ",", " ", 
    RowBox[{"units", " ", "are", " ", 
     RowBox[{"m", "/", "sec"}], " ", "*", 
     RowBox[{"6", "^"}]}], ",", " ", 
    RowBox[{
     RowBox[{"don", "'"}], "t", " ", "put", " ", "the", " ", "*", 
     RowBox[{"^", " ", "part"}]}], ",", " ", 
    RowBox[{"and", " ", 
     FractionBox["Mev", 
      SuperscriptBox["c", "2"]]}]}], " ", "*)"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"time", "[", 
     RowBox[{"totalenergy_", ",", "restenergy_", ",", "distance_"}], "]"}], 
    " ", ":=", " ", 
    FractionBox["distance", 
     SqrtBox[
      RowBox[{"1", "-", 
       FractionBox["1", 
        SuperscriptBox[
         RowBox[{"(", 
          RowBox[{"totalenergy", "/", "restenergy"}], ")"}], "2"]]}]]]}], 
   ";"}], " ", 
  RowBox[{"(*", 
   RowBox[{
    RowBox[{"Problem", " ", "3", " ", "function"}], ",", " ", 
    RowBox[{
    "units", " ", "are", " ", "MeV", " ", "and", " ", "lightyears"}]}], 
   "*)"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"energy", " ", "[", 
   RowBox[{"velocity_", ",", "mass_"}], "]"}], " ", ":=", " ", 
  RowBox[{
   RowBox[{"\[Gamma]", "[", 
    RowBox[{"\[Beta]", "[", "velocity", "]"}], "]"}], "*", "mass", "*", 
   SuperscriptBox[
    RowBox[{"(", "3*^8", ")"}], "2"], " ", 
   RowBox[{"(*", 
    RowBox[{
     RowBox[{"Problem", " ", "4", " ", "function"}], ",", " ", 
     RowBox[{"units", " ", "are", " ", 
      RowBox[{"m", "/", "sec"}], " ", "and", " ", "kg"}]}], " ", 
    "*)"}]}]}]}], "Input",
 CellChangeTimes->{{3.524492680008505*^9, 3.5244926894614353`*^9}, {
  3.524493302158265*^9, 3.524493304747875*^9}, {3.5244933424411793`*^9, 
  3.524493418351009*^9}, {3.5244934878263817`*^9, 3.5244936723522053`*^9}, {
  3.52449372793961*^9, 3.524493735974229*^9}, {3.524493952782379*^9, 
  3.524494004492939*^9}, {3.524494117458809*^9, 3.5244941393217573`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{"\[Delta]m", "[", 
  RowBox[{"19.1*^6", ",", "4.18*^9"}], "]"}], "\[IndentingNewLine]", 
 RowBox[{"work", "[", 
  RowBox[{"2.68", ",", "1.43", ",", ".511"}], "]"}], "\[IndentingNewLine]", 
 RowBox[{"time", "[", 
  RowBox[{"9600", ",", "2890", ",", "6.2"}], "]"}], "\[IndentingNewLine]", 
 RowBox[{"energy", "[", 
  RowBox[{
   RowBox[{".48", "*", "3*^8"}], ",", ".00088"}], "]"}]}], "Input",
 CellChangeTimes->{{3.524494150861071*^9, 3.524494210047162*^9}, {
  3.524494254487815*^9, 3.5244942813799467`*^9}}],

Cell[BoxData[
 FormBox["0.8870887756347656`", TraditionalForm]], "Output",
 CellChangeTimes->{{3.524494184127151*^9, 3.5244942106864967`*^9}, 
   3.524494281852146*^9}],

Cell[BoxData[
 FormBox["0.555798370189648`", TraditionalForm]], "Output",
 CellChangeTimes->{{3.524494184127151*^9, 3.5244942106864967`*^9}, 
   3.5244942818539333`*^9}],

Cell[BoxData[
 FormBox["6.5016029420230375`", TraditionalForm]], "Output",
 CellChangeTimes->{{3.524494184127151*^9, 3.5244942106864967`*^9}, 
   3.524494281855822*^9}],

Cell[BoxData[
 FormBox["9.028022901233553`*^13", TraditionalForm]], "Output",
 CellChangeTimes->{{3.524494184127151*^9, 3.5244942106864967`*^9}, 
   3.524494281857768*^9}]
}, Closed]]
}, Closed]],

Cell["Homework 4: Due 9-13-11", "Subsubsection",
 CellChangeTimes->{{3.525007438306932*^9, 3.525007444082932*^9}}],

Cell[CellGroupData[{

Cell["Homework 5: Due 9-15-11", "Subsubsection",
 CellChangeTimes->{{3.5250074229159317`*^9, 3.525007431266932*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"56", "/", "20"}], "*", "6.02214*^23"}], " ", "//", "N", " ", 
  RowBox[{"(*", 
   RowBox[{
   "replace", " ", "the", " ", "54", " ", "and", " ", "this", " ", "is", " ", 
    "the", " ", "formula", " ", "for", " ", "#1"}], "*)"}]}]], "Input",
 CellChangeTimes->{{3.525008047692932*^9, 3.525008051120932*^9}, 
   3.525089637309857*^9, {3.525089735209289*^9, 3.525089735255971*^9}, {
   3.525093091628071*^9, 3.525093116278654*^9}, {3.525093475026705*^9, 
   3.525093475143403*^9}}],

Cell[BoxData[
 FormBox["1.6861991999999998`*^24", TraditionalForm]], "Output",
 GeneratedCell->False,
 CellAutoOverwrite->False,
 CellChangeTimes->{3.525008051335932*^9, 3.525089637310028*^9, 
  3.525089735738194*^9, 3.5250931022205153`*^9, 3.525093475733645*^9}]
}, Closed]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  FractionBox["2.0", "1.00794"], "*", 
  FractionBox["1", "4"], "*", "12", " ", 
  RowBox[{"(*", 
   RowBox[{
   "replace", " ", "the", " ", "6.2", " ", "and", " ", "this", " ", "is", " ",
     "it", " ", "for", " ", "#2"}], " ", "*)"}]}]], "Input",
 CellChangeTimes->{{3.525008697528932*^9, 3.525008707754932*^9}, {
  3.525089987353736*^9, 3.525090002836458*^9}, {3.525093129594453*^9, 
  3.525093171162808*^9}, {3.525093482695682*^9, 3.5250934841889067`*^9}}],

Cell[BoxData[
 FormBox["5.952735281862015`", TraditionalForm]], "Output",
 CellChangeTimes->{
  3.525008708470932*^9, {3.525089976113406*^9, 3.5250900034440203`*^9}, 
   3.525093147760807*^9, 3.5250934847390842`*^9}]
}, Closed]],

Cell[BoxData[
 RowBox[{
  RowBox[{"raduis", "[", "numberOfMolecules_", "]"}], ":=", " ", 
  SuperscriptBox[
   RowBox[{"(", 
    FractionBox[
     RowBox[{"3", "*", "numberOfMolecules", " ", "*", " ", "k", "*", "273"}], 
     
     RowBox[{"4", "*", "\[Pi]", "*", "1.01*^5"}]], ")"}], 
   RowBox[{"1", "/", "3"}]], " ", 
  RowBox[{"(*", 
   RowBox[{
   "this", " ", "is", " ", "the", " ", "equation", " ", "for", " ", "#3"}], 
   "*)"}]}]], "Input",
 CellChangeTimes->{{3.525093236292603*^9, 3.525093348694316*^9}}],

Cell[BoxData[
 RowBox[{" ", 
  RowBox[{
   RowBox[{"lamda", " ", "[", "pressure_", "]"}], ":=", " ", 
   FractionBox[
    RowBox[{"(", 
     RowBox[{"k", "*", "300"}], ")"}], 
    RowBox[{"2.8*^-19", "*", "pressure"}]], " ", 
   RowBox[{"(*", 
    RowBox[{
    "This", " ", "is", " ", "the", " ", "equation", " ", "for", " ", "#4"}], 
    "*)"}]}]}]], "Input",
 CellChangeTimes->{{3.525093380136181*^9, 3.525093429077448*^9}}],

Cell[BoxData[""], "Input",
 CellChangeTimes->{{3.525093605572844*^9, 3.525093608086381*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  FractionBox[
   SuperscriptBox[
    RowBox[{"Sin", "[", 
     RowBox[{
      RowBox[{"154", "/", "2"}], "Degree"}], "]"}], "4"], 
   SuperscriptBox[
    RowBox[{"Sin", "[", 
     RowBox[{
      RowBox[{"9", "/", "2"}], "Degree"}], "]"}], "4"]], "//", "N", " ", 
  RowBox[{"(*", 
   RowBox[{
   "replace", " ", "angles", " ", "and", " ", "this", " ", "is", " ", "the", 
    " ", "formula", " ", "for", " ", "%5"}], " ", "*)"}]}]], "Input",
 CellChangeTimes->{{3.525091886094082*^9, 3.525091908336176*^9}, {
  3.525092993864936*^9, 3.525093011198307*^9}, {3.525093504223794*^9, 
  3.525093506750757*^9}}],

Cell[BoxData[
 FormBox["23786.06151259272`", TraditionalForm]], "Output",
 CellChangeTimes->{{3.5250919056687527`*^9, 3.5250919087402973`*^9}, 
   3.525093012838303*^9, 3.525093507617799*^9}]
}, Closed]]
}, Closed]],

Cell[CellGroupData[{

Cell["Homework 6", "Subsubsection",
 CellChangeTimes->{{3.5255310894257917`*^9, 3.5255310954633713`*^9}}],

Cell[BoxData[{
 RowBox[{
  RowBox[{"e", "[", "\[Lambda]_", "]"}], ":=", 
  FractionBox["1240", "\[Lambda]"]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"\[Lambda]", "[", 
   RowBox[{"p_", ",", "\[Phi]_"}], "]"}], ":=", 
  FractionBox["1240", 
   RowBox[{
    SqrtBox[
     RowBox[{
      SuperscriptBox["p", "2"], "+", 
      SuperscriptBox[
       RowBox[{"(", ".511*^6", ")"}], "2"]}]], "-", ".511*^6", "+", 
    "\[Phi]"}]]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"f", "[", "e_", "]"}], ":=", 
  FractionBox[
   RowBox[{"(", 
    RowBox[{"e", "*", "3*^8"}], ")"}], "1240*^-9"]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"\[Lambda]4", "[", "e_", "]"}], " ", ":=", " ", 
  FractionBox["1240*^-9", "e"]}]}], "Input",
 CellChangeTimes->{{3.525531099453909*^9, 3.5255311368093557`*^9}, {
   3.525531197520916*^9, 3.52553120750388*^9}, 3.525531357669628*^9, {
   3.525531589228613*^9, 3.5255316137313232`*^9}, {3.525531768186943*^9, 
   3.525531768736742*^9}, {3.525531953857382*^9, 3.5255319811359262`*^9}, {
   3.525532203132827*^9, 3.525532219449944*^9}, 3.525532291543212*^9}],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"e", "[", "683", "]"}], "//", "N"}], "\[IndentingNewLine]", 
 RowBox[{"\[Lambda]", "[", 
  RowBox[{"16.3*^3", ",", "2.09"}], "]"}], "\[IndentingNewLine]", 
 RowBox[{"f", "[", "8.1*^3", "]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"\[Lambda]4", "[", "98*^6", "]"}], "//", "N"}]}], "Input",
 CellChangeTimes->{{3.5255311405707617`*^9, 3.5255311503528*^9}, {
  3.525531240238558*^9, 3.525531240782301*^9}, {3.525531616789364*^9, 
  3.5255316276973267`*^9}, {3.525532224536281*^9, 3.525532226982822*^9}, {
  3.5255322692709312`*^9, 3.525532358155038*^9}}],

Cell[BoxData[
 FormBox["1.8155197657393851`", TraditionalForm]], "Output",
 CellChangeTimes->{
  3.525531150736829*^9, {3.525531211728162*^9, 3.5255312410592823`*^9}, {
   3.525531623866843*^9, 3.525531628192709*^9}, 3.525531772439783*^9, {
   3.525532272333221*^9, 3.5255323230053673`*^9}, 3.525532359744219*^9}],

Cell[BoxData[
 FormBox["4.732922887896282`", TraditionalForm]], "Output",
 CellChangeTimes->{
  3.525531150736829*^9, {3.525531211728162*^9, 3.5255312410592823`*^9}, {
   3.525531623866843*^9, 3.525531628192709*^9}, 3.525531772439783*^9, {
   3.525532272333221*^9, 3.5255323230053673`*^9}, 3.5255323597465277`*^9}],

Cell[BoxData[
 FormBox["1.9596774193548388`*^18", TraditionalForm]], "Output",
 CellChangeTimes->{
  3.525531150736829*^9, {3.525531211728162*^9, 3.5255312410592823`*^9}, {
   3.525531623866843*^9, 3.525531628192709*^9}, 3.525531772439783*^9, {
   3.525532272333221*^9, 3.5255323230053673`*^9}, 3.5255323597483892`*^9}],

Cell[BoxData[
 FormBox["1.2653061224489797`*^-14", TraditionalForm]], "Output",
 CellChangeTimes->{
  3.525531150736829*^9, {3.525531211728162*^9, 3.5255312410592823`*^9}, {
   3.525531623866843*^9, 3.525531628192709*^9}, 3.525531772439783*^9, {
   3.525532272333221*^9, 3.5255323230053673`*^9}, 3.5255323597502403`*^9}]
}, Closed]],

Cell[BoxData[""], "Input",
 CellChangeTimes->{{3.52553114685921*^9, 3.525531147229473*^9}}]
}, Closed]],

Cell[CellGroupData[{

Cell["Homework 7: Due 9-22-11", "Subsubsection",
 CellChangeTimes->{{3.525609625458912*^9, 3.525609640216476*^9}}],

Cell[BoxData[{
 RowBox[{
  RowBox[{"\[Theta]", "[", 
   RowBox[{"\[Lambda]1_", ",", "\[Lambda]2_"}], "]"}], ":=", 
  RowBox[{
   RowBox[{"ArcCos", "[", 
    RowBox[{"1", "-", 
     FractionBox[
      RowBox[{"(", 
       RowBox[{"\[Lambda]2", "-", "\[Lambda]1"}], ")"}], "2.43*^-12"]}], 
    "]"}], "*", 
   FractionBox["180", "\[Pi]"]}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"d", "[", 
   RowBox[{"\[Theta]_", ",", "\[Lambda]_"}], "]"}], ":=", " ", 
  FractionBox["\[Lambda]", 
   RowBox[{"2", "*", 
    RowBox[{"Sin", "[", 
     RowBox[{"\[Theta]", " ", "Degree"}], "]"}]}]]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"\[Lambda]", "[", "k_", "]"}], ":=", 
  FractionBox["1240", "k"]}]}], "Input",
 CellChangeTimes->{{3.525610019149227*^9, 3.525610061864027*^9}, {
  3.525610124836615*^9, 3.525610132540141*^9}, {3.5256101781053247`*^9, 
  3.525610181779114*^9}, {3.5256103214578667`*^9, 3.52561034437643*^9}, {
  3.525610548947278*^9, 3.5256105652661963`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{"\[Theta]", "[", 
  RowBox[{"7.014*^-11", ",", "7.251*^-11"}], "]"}], "\[IndentingNewLine]", 
 RowBox[{"d", "[", 
  RowBox[{"20.2", ",", ".32"}], "]"}], "\[IndentingNewLine]", 
 RowBox[{"\[Lambda]", "[", "11.07*^3", "]"}]}], "Input",
 CellChangeTimes->{{3.525610064754723*^9, 3.525610092365322*^9}, {
  3.5256103486367407`*^9, 3.525610357140127*^9}, {3.525610568943653*^9, 
  3.525610581806254*^9}}],

Cell[BoxData[
 FormBox["88.58514560579702`", TraditionalForm]], "Output",
 CellChangeTimes->{
  3.5256100943314667`*^9, 3.5256101282888412`*^9, {3.525610174143519*^9, 
   3.525610183040883*^9}, 3.5256103577072372`*^9, 3.525610591020604*^9}],

Cell[BoxData[
 FormBox["0.46336760650373104`", TraditionalForm]], "Output",
 CellChangeTimes->{
  3.5256100943314667`*^9, 3.5256101282888412`*^9, {3.525610174143519*^9, 
   3.525610183040883*^9}, 3.5256103577072372`*^9, 3.525610591022354*^9}],

Cell[BoxData[
 FormBox["0.11201445347786812`", TraditionalForm]], "Output",
 CellChangeTimes->{
  3.5256100943314667`*^9, 3.5256101282888412`*^9, {3.525610174143519*^9, 
   3.525610183040883*^9}, 3.5256103577072372`*^9, 3.525610591023533*^9}]
}, Closed]]
}, Closed]],

Cell[CellGroupData[{

Cell["Homework 8 Due: 9-27-11", "Subsubsection",
 CellChangeTimes->{{3.5260418503092766`*^9, 3.526041860928427*^9}}],

Cell[BoxData[{
 RowBox[{
  RowBox[{"v", "[", 
   RowBox[{"n_", ",", "z_"}], "]"}], ":=", 
  SqrtBox[
   FractionBox[
    RowBox[{
     SuperscriptBox["z", "2"], "*", 
     RowBox[{"(", 
      RowBox[{"2.", "*", "13.6", "*", 
       SuperscriptBox[
        RowBox[{"(", "3*^8", ")"}], "2"]}], ")"}]}], 
    RowBox[{
     SuperscriptBox["n", "2"], "*", ".511*^6"}]]]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"e", " ", "[", "\[Lambda]_", "]"}], ":=", 
  RowBox[{
   RowBox[{"1240", "/", "\[Lambda]"}], " ", "-", " ", 
   "13.6"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"\[Lambda]", "[", 
   RowBox[{"n2_", ",", "n1_", ",", "z_"}], "]"}], ":=", 
  FractionBox["1240", 
   RowBox[{"13.6", "*", 
    SuperscriptBox["z", "2"], 
    RowBox[{"(", 
     RowBox[{
      FractionBox["1", 
       SuperscriptBox["n2", "2"]], "-", 
      FractionBox["1", 
       SuperscriptBox["n1", "2"]]}], ")"}]}]]}]}], "Input",
 CellChangeTimes->{{3.526087110475031*^9, 3.526087148926092*^9}, {
  3.526087220469963*^9, 3.526087277613398*^9}, {3.52608753651608*^9, 
  3.5260875968857403`*^9}, {3.526087965227475*^9, 3.5260879841215*^9}, {
  3.526089466300399*^9, 3.526089488256283*^9}, {3.526128143792424*^9, 
  3.526128164571385*^9}}],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{"v", "[", 
  RowBox[{"20", ",", "6"}], "]"}], "\[IndentingNewLine]", 
 RowBox[{"e", "[", "58.5", "]"}], "\[IndentingNewLine]", 
 RowBox[{"\[Lambda]", "[", 
  RowBox[{"4", ",", "12", ",", "19"}], "]"}]}], "Input",
 CellChangeTimes->{{3.526087280901079*^9, 3.526087283635826*^9}, {
  3.526087602844824*^9, 3.526087609234682*^9}, {3.5260879942085752`*^9, 
  3.526087994441884*^9}, {3.5261281718810196`*^9, 3.5261281746808796`*^9}, {
  3.5261284814823723`*^9, 3.526128499161665*^9}}],

Cell[BoxData["656623.6355979212`"], "Output",
 CellChangeTimes->{
  3.526087284290904*^9, 3.526087609655361*^9, {3.526087988882701*^9, 
   3.5260879947125483`*^9}, 3.526089493833396*^9, {3.526128167711228*^9, 
   3.526128170531087*^9}, 3.5261285001016273`*^9}],

Cell[BoxData["7.5965811965812`"], "Output",
 CellChangeTimes->{
  3.526087284290904*^9, 3.526087609655361*^9, {3.526087988882701*^9, 
   3.5260879947125483`*^9}, 3.526089493833396*^9, {3.526128167711228*^9, 
   3.526128170531087*^9}, 3.5261285001016273`*^9}],

Cell[BoxData["4.546195209385694`"], "Output",
 CellChangeTimes->{
  3.526087284290904*^9, 3.526087609655361*^9, {3.526087988882701*^9, 
   3.5260879947125483`*^9}, 3.526089493833396*^9, {3.526128167711228*^9, 
   3.526128170531087*^9}, 3.5261285001016273`*^9}]
}, Closed]]
}, Closed]],

Cell[CellGroupData[{

Cell["Homework 9: Due 9-29-11", "Subsubsection",
 CellChangeTimes->{{3.526218534004795*^9, 3.5262185404146667`*^9}}],

Cell[BoxData[{
 RowBox[{
  RowBox[{"e1", "[", "factor_", "]"}], ":=", 
  SqrtBox[
   FractionBox[
    RowBox[{"(", 
     RowBox[{
      SuperscriptBox["factor", "2"], "*", 
      RowBox[{"-", 
       SuperscriptBox[
        RowBox[{"(", ".511", ")"}], "2"]}]}], ")"}], 
    RowBox[{"1", "-", 
     SuperscriptBox["factor", "2"]}]]]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"\[Lambda]2", "[", "e_", "]"}], ":=", 
  FractionBox["1240", 
   SqrtBox[
    RowBox[{
     RowBox[{"e", "^", "2"}], "-", 
     SuperscriptBox[
      RowBox[{"(", ".511*^6", ")"}], "2"]}]]]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"rn3", " ", "[", 
   RowBox[{"n_", ",", "z_"}], "]"}], ":=", 
  FractionBox[
   RowBox[{
    SuperscriptBox["n", "2"], "*", ".0529"}], "z"]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"\[Lambda]4", "[", 
   RowBox[{"m_", ",", "v_"}], "]"}], ":=", 
  FractionBox[
   RowBox[{"(", 
    RowBox[{"6.626", "*", " ", 
     RowBox[{"10", "^", 
      RowBox[{"(", 
       RowBox[{"-", "34"}], ")"}]}]}], ")"}], 
   RowBox[{"m", "*", "v"}]]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"z5", "[", "\[Lambda]_", "]"}], ":=", 
  SqrtBox[
   RowBox[{
    FractionBox["4", "3"], "*", 
    FractionBox[
     RowBox[{"1240", "/", "\[Lambda]"}], "13.6"]}]], " ", 
  RowBox[{"(*", "wrong", "*)"}]}]}], "Input",
 CellChangeTimes->{{3.526219539099732*^9, 3.5262195599693146`*^9}, 
   3.5262195935186434`*^9, {3.5262204605948515`*^9, 3.5262205038878517`*^9}, {
   3.526220617513852*^9, 3.526220618200852*^9}, {3.526221050975852*^9, 
   3.5262210785598516`*^9}, {3.5262211615735626`*^9, 
   3.5262211751432915`*^9}, {3.526226592269742*^9, 3.5262267043353767`*^9}, {
   3.526226754552505*^9, 3.526226755173994*^9}, {3.526227150471442*^9, 
   3.526227180250557*^9}, {3.526227314145481*^9, 3.526227314365446*^9}, {
   3.526227357909563*^9, 3.526227373820118*^9}, {3.526228067325182*^9, 
   3.526228121206175*^9}, {3.526228165595023*^9, 3.5262281984341288`*^9}, {
   3.5263185909260902`*^9, 3.526318605675205*^9}, {3.5263192046711807`*^9, 
   3.5263192382688894`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{"e1", "[", "1.17", "]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"\[Lambda]2", "[", "7.2*^6", "]"}], "*", 
  "1*^6"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"rn3", "[", 
   RowBox[{"1", ",", "59"}], "]"}], "*", "1*^3"}], "\[IndentingNewLine]", 
 RowBox[{"\[Lambda]4", "[", 
  RowBox[{"1.07*^-6", ",", "0.90*^-2"}], "]"}], "\[IndentingNewLine]", 
 RowBox[{"z5", "[", "1.005", "]"}]}], "Input",
 CellChangeTimes->{{3.526219563339247*^9, 3.5262195736290417`*^9}, {
  3.5262205067168517`*^9, 3.5262205113568516`*^9}, {3.526221082827852*^9, 
  3.526221093386852*^9}, {3.5262211500737925`*^9, 3.5262211551136923`*^9}, {
  3.526226595080142*^9, 3.5262266601434317`*^9}, {3.526226708445038*^9, 
  3.526226746619926*^9}, {3.5262271825910273`*^9, 3.526227196422724*^9}, {
  3.526228124048635*^9, 3.526228129368403*^9}, {3.5263186689585457`*^9, 
  3.5263186939067993`*^9}, {3.5263187757086716`*^9, 3.526318776388624*^9}, {
  3.5263188175282803`*^9, 3.526318819658131*^9}, {3.526319249363227*^9, 
  3.526319302785038*^9}}],

Cell[BoxData["0.9843565472653762`"], "Output",
 CellChangeTimes->{{3.5262195771789703`*^9, 3.5262195960785923`*^9}, 
   3.526220512595852*^9, 3.526220620942852*^9, 3.526221096478852*^9, 
   3.5262211557136803`*^9, {3.526226603002441*^9, 3.526226660427211*^9}, {
   3.5262267137005*^9, 3.526226746734272*^9}, 3.5262271968148193`*^9, 
   3.526227319011064*^9, 3.5262273760405912`*^9, 3.526228130327732*^9, 
   3.526228168905416*^9, 3.5263186261014843`*^9, {3.5263186944367623`*^9, 
   3.5263187227873015`*^9}, 3.526318776958584*^9, 3.5263188206380625`*^9, {
   3.5263192408987317`*^9, 3.526319249793201*^9}, 3.5263193047449207`*^9}],

Cell[BoxData["172.6576142520829`"], "Output",
 CellChangeTimes->{{3.5262195771789703`*^9, 3.5262195960785923`*^9}, 
   3.526220512595852*^9, 3.526220620942852*^9, 3.526221096478852*^9, 
   3.5262211557136803`*^9, {3.526226603002441*^9, 3.526226660427211*^9}, {
   3.5262267137005*^9, 3.526226746734272*^9}, 3.5262271968148193`*^9, 
   3.526227319011064*^9, 3.5262273760405912`*^9, 3.526228130327732*^9, 
   3.526228168905416*^9, 3.5263186261014843`*^9, {3.5263186944367623`*^9, 
   3.5263187227873015`*^9}, 3.526318776958584*^9, 3.5263188206380625`*^9, {
   3.5263192408987317`*^9, 3.526319249793201*^9}, 3.5263193047449207`*^9}],

Cell[BoxData["0.8966101694915255`"], "Output",
 CellChangeTimes->{{3.5262195771789703`*^9, 3.5262195960785923`*^9}, 
   3.526220512595852*^9, 3.526220620942852*^9, 3.526221096478852*^9, 
   3.5262211557136803`*^9, {3.526226603002441*^9, 3.526226660427211*^9}, {
   3.5262267137005*^9, 3.526226746734272*^9}, 3.5262271968148193`*^9, 
   3.526227319011064*^9, 3.5262273760405912`*^9, 3.526228130327732*^9, 
   3.526228168905416*^9, 3.5263186261014843`*^9, {3.5263186944367623`*^9, 
   3.5263187227873015`*^9}, 3.526318776958584*^9, 3.5263188206380625`*^9, {
   3.5263192408987317`*^9, 3.526319249793201*^9}, 3.52631930475492*^9}],

Cell[BoxData["6.880581516095537`*^-26"], "Output",
 CellChangeTimes->{{3.5262195771789703`*^9, 3.5262195960785923`*^9}, 
   3.526220512595852*^9, 3.526220620942852*^9, 3.526221096478852*^9, 
   3.5262211557136803`*^9, {3.526226603002441*^9, 3.526226660427211*^9}, {
   3.5262267137005*^9, 3.526226746734272*^9}, 3.5262271968148193`*^9, 
   3.526227319011064*^9, 3.5262273760405912`*^9, 3.526228130327732*^9, 
   3.526228168905416*^9, 3.5263186261014843`*^9, {3.5263186944367623`*^9, 
   3.5263187227873015`*^9}, 3.526318776958584*^9, 3.5263188206380625`*^9, {
   3.5263192408987317`*^9, 3.526319249793201*^9}, 3.52631930475492*^9}],

Cell[BoxData["10.998354804648544`"], "Output",
 CellChangeTimes->{{3.5262195771789703`*^9, 3.5262195960785923`*^9}, 
   3.526220512595852*^9, 3.526220620942852*^9, 3.526221096478852*^9, 
   3.5262211557136803`*^9, {3.526226603002441*^9, 3.526226660427211*^9}, {
   3.5262267137005*^9, 3.526226746734272*^9}, 3.5262271968148193`*^9, 
   3.526227319011064*^9, 3.5262273760405912`*^9, 3.526228130327732*^9, 
   3.526228168905416*^9, 3.5263186261014843`*^9, {3.5263186944367623`*^9, 
   3.5263187227873015`*^9}, 3.526318776958584*^9, 3.5263188206380625`*^9, {
   3.5263192408987317`*^9, 3.526319249793201*^9}, 3.52631930475492*^9}]
}, Closed]],

Cell[BoxData[""], "Input",
 CellChangeTimes->{{3.526220650159852*^9, 3.5262206597958517`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"2", "*", 
  RowBox[{".511", "/", "1.11"}]}]], "Input",
 CellChangeTimes->{{3.5263187537351832`*^9, 3.526318756315003*^9}}],

Cell[BoxData["0.9207207207207206`"], "Output",
 CellChangeTimes->{3.5263187570749493`*^9}]
}, Closed]]
}, Closed]],

Cell[CellGroupData[{

Cell["Homework due 10-11-11", "Subsubsection",
 CellChangeTimes->{{3.527343205977703*^9, 3.527343215527321*^9}}],

Cell[BoxData[{
 RowBox[{
  RowBox[{"energy3", "[", "w_", "]"}], ":=", 
  FractionBox[
   RowBox[{
    SuperscriptBox["\[Pi]", "2"], "*", 
    SuperscriptBox[
     RowBox[{"(", "6.58*^-16", ")"}], "2"]}], 
   RowBox[{"2", "*", 
    FractionBox[".511*^6", 
     SuperscriptBox[
      RowBox[{"(", "3.00*^8", ")"}], "2"]], "*", 
    SuperscriptBox["w", "2"]}]]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"prob", "[", 
   RowBox[{"b_", ",", "c_"}], "]"}], ":=", 
  RowBox[{
   RowBox[{"Integrate", "[", 
    RowBox[{
     SuperscriptBox[
      RowBox[{"(", 
       RowBox[{
        SqrtBox[
         RowBox[{"2", "/", "a"}]], "*", 
        RowBox[{"Sin", "[", 
         FractionBox[
          RowBox[{"\[Pi]", "*", "x"}], "a"], "]"}]}], ")"}], "2"], ",", 
     RowBox[{"{", 
      RowBox[{"x", ",", 
       RowBox[{"b", "*", "a"}], ",", 
       RowBox[{"c", "*", "a"}]}], "}"}]}], "]"}], "//", "N"}]}]}], "Input",
 CellChangeTimes->{{3.527343403169815*^9, 3.5273434639573836`*^9}, {
  3.527343610416525*^9, 3.52734361279643*^9}, {3.527343655822209*^9, 
  3.52734368529103*^9}, {3.5273438614414835`*^9, 3.5273438899478436`*^9}, {
  3.5273439816391754`*^9, 3.5273439977885294`*^9}, {3.527344433588597*^9, 
  3.527344536484481*^9}}],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{"energy3", "[", 
  RowBox[{"(", "2.68*^-9", ")"}], "]"}], "\[IndentingNewLine]", 
 RowBox[{"prob", "[", 
  RowBox[{".21", ",", ".83"}], "]"}]}], "Input",
 CellChangeTimes->{{3.5273434674472437`*^9, 3.527343475136936*^9}, {
  3.5273435593060694`*^9, 3.5273435599760427`*^9}, {3.527343598267011*^9, 
  3.52734359928697*^9}, {3.527343687600938*^9, 3.5273437094750624`*^9}, {
  3.527343742086258*^9, 3.5273437429762225`*^9}, {3.527344492656234*^9, 
  3.5273445078156276`*^9}, {3.5273446922232513`*^9, 3.5273447023328466`*^9}, {
  3.527347445659793*^9, 3.527347471624959*^9}}],

Cell[BoxData[
 FormBox["0.05239303516992842`", TraditionalForm]], "Output",
 CellChangeTimes->{
  3.5273434764268847`*^9, 3.5273435607360125`*^9, 3.527343615696314*^9, {
   3.5273436763313885`*^9, 3.527343709995042*^9}, 3.527343743516201*^9, {
   3.527343868361207*^9, 3.5273438924977417`*^9}, 3.527344000708413*^9, {
   3.527344504175773*^9, 3.527344538034419*^9}, {3.527344693633195*^9, 
   3.527344703652794*^9}, {3.527347454018112*^9, 3.527347472061557*^9}}],

Cell[BoxData[
 FormBox["0.9136233376826242`", TraditionalForm]], "Output",
 CellChangeTimes->{
  3.5273434764268847`*^9, 3.5273435607360125`*^9, 3.527343615696314*^9, {
   3.5273436763313885`*^9, 3.527343709995042*^9}, 3.527343743516201*^9, {
   3.527343868361207*^9, 3.5273438924977417`*^9}, 3.527344000708413*^9, {
   3.527344504175773*^9, 3.527344538034419*^9}, {3.527344693633195*^9, 
   3.527344703652794*^9}, {3.527347454018112*^9, 3.527347472097633*^9}}]
}, Open  ]],

Cell[BoxData[""], "Input",
 CellChangeTimes->{{3.527344513405404*^9, 3.5273445175752373`*^9}}]
}, Open  ]]
}, Open  ]]
}, Open  ]]
}, Open  ]]
},
WindowSize->{784, 1122},
WindowMargins->{{Automatic, 0}, {0, Automatic}},
FrontEndVersion->"8.0 for Mac OS X x86 (32-bit, 64-bit Kernel) (February 23, \
2011)",
StyleDefinitions->"Default.nb"
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{}
*)
(*CellTagsIndex
CellTagsIndex->{}
*)
(*NotebookFileOutline
Notebook[{
Cell[CellGroupData[{
Cell[579, 22, 105, 1, 76, "Title"],
Cell[687, 25, 225, 5, 27, "Input"],
Cell[915, 32, 67, 1, 27, "Input"],
Cell[CellGroupData[{
Cell[1007, 37, 33986, 686, 3772, "Input"],
Cell[34996, 725, 29837, 516, 370, "Output"]
}, {2}]],
Cell[CellGroupData[{
Cell[64867, 1246, 7697, 186, 592, "Input"],
Cell[72567, 1434, 6635, 145, 427, "Output"]
}, {2}]],
Cell[CellGroupData[{
Cell[79236, 1584, 96, 1, 67, "Section"],
Cell[79335, 1587, 258, 6, 23, "Item"]
}, Open  ]],
Cell[CellGroupData[{
Cell[79630, 1598, 100, 1, 67, "Section"],
Cell[CellGroupData[{
Cell[79755, 1603, 96, 1, 34, "Subsection"],
Cell[CellGroupData[{
Cell[79876, 1608, 108, 1, 24, "Subsubsection"],
Cell[79987, 1611, 2171, 74, 206, "Text"],
Cell[82161, 1687, 151, 2, 27, "Input"],
Cell[82315, 1691, 566, 14, 94, "Input"],
Cell[82884, 1707, 244, 5, 43, "Input"]
}, Open  ]],
Cell[CellGroupData[{
Cell[83165, 1717, 116, 1, 24, "Subsubsection"],
Cell[83284, 1720, 264, 6, 70, "Text"]
}, Closed]],
Cell[CellGroupData[{
Cell[83585, 1731, 113, 1, 18, "Subsubsection"],
Cell[CellGroupData[{
Cell[83723, 1736, 177, 4, 70, "Input"],
Cell[83903, 1742, 183, 4, 70, "Output"]
}, Closed]],
Cell[CellGroupData[{
Cell[84123, 1751, 133, 3, 70, "Input"],
Cell[84259, 1756, 211, 7, 70, "Output"]
}, Closed]],
Cell[CellGroupData[{
Cell[84507, 1768, 126, 2, 70, "Input"],
Cell[84636, 1772, 213, 7, 70, "Output"]
}, Closed]],
Cell[CellGroupData[{
Cell[84886, 1784, 153, 3, 70, "Input"],
Cell[85042, 1789, 289, 9, 70, "Output"]
}, Closed]],
Cell[CellGroupData[{
Cell[85368, 1803, 123, 1, 70, "WolframAlphaLong"],
Cell[85494, 1806, 518663, 9600, 70, "Print"]
}, Closed]],
Cell[CellGroupData[{
Cell[604194, 11411, 503248, 9153, 70, "WolframAlphaShortInput"],
Cell[1107445, 20566, 410, 12, 70, "Output"]
}, Closed]],
Cell[CellGroupData[{
Cell[1107892, 20583, 203, 5, 70, "Input"],
Cell[1108098, 20590, 207, 5, 70, "Output"]
}, Closed]],
Cell[CellGroupData[{
Cell[1108342, 20600, 142, 3, 70, "Input"],
Cell[1108487, 20605, 159, 4, 70, "Output"]
}, Closed]],
Cell[CellGroupData[{
Cell[1108683, 20614, 458079, 8339, 70, "WolframAlphaShortInput"],
Cell[1566765, 28955, 359, 12, 70, "Output"]
}, Closed]],
Cell[CellGroupData[{
Cell[1567161, 28972, 418, 12, 70, "Input"],
Cell[1567582, 28986, 553, 19, 70, "Output"]
}, Closed]],
Cell[CellGroupData[{
Cell[1568172, 29010, 127, 2, 70, "Input"],
Cell[1568302, 29014, 363, 12, 70, "Output"]
}, Closed]],
Cell[CellGroupData[{
Cell[1568702, 29031, 443, 12, 70, "Input"],
Cell[1569148, 29045, 140, 2, 70, "Output"]
}, Closed]],
Cell[CellGroupData[{
Cell[1569325, 29052, 145, 3, 70, "Input"],
Cell[1569473, 29057, 116, 2, 70, "Output"]
}, Closed]],
Cell[CellGroupData[{
Cell[1569626, 29064, 189, 5, 70, "Input"],
Cell[1569818, 29071, 115, 2, 70, "Output"]
}, Closed]],
Cell[CellGroupData[{
Cell[1569970, 29078, 122, 2, 70, "Input"],
Cell[1570095, 29082, 98, 2, 70, "Output"]
}, Closed]],
Cell[CellGroupData[{
Cell[1570230, 29089, 153, 3, 70, "Input"],
Cell[1570386, 29094, 98, 2, 70, "Output"]
}, Closed]],
Cell[CellGroupData[{
Cell[1570521, 29101, 217, 5, 70, "Input"],
Cell[1570741, 29108, 228, 6, 70, "Output"]
}, Closed]]
}, Closed]],
Cell[CellGroupData[{
Cell[1571018, 29120, 113, 1, 18, "Subsubsection"],
Cell[1571134, 29123, 640, 20, 70, "Input"],
Cell[CellGroupData[{
Cell[1571799, 29147, 180, 5, 70, "Input"],
Cell[1571982, 29154, 116, 2, 70, "Output"]
}, Closed]],
Cell[CellGroupData[{
Cell[1572135, 29161, 180, 4, 70, "Input"],
Cell[1572318, 29167, 145, 2, 70, "Output"]
}, Closed]],
Cell[CellGroupData[{
Cell[1572500, 29174, 224, 5, 70, "Input"],
Cell[1572727, 29181, 139, 2, 70, "Output"]
}, Closed]],
Cell[1572881, 29186, 191, 5, 70, "Input"],
Cell[CellGroupData[{
Cell[1573097, 29195, 182, 4, 70, "Input"],
Cell[1573282, 29201, 121, 2, 70, "Output"]
}, Closed]],
Cell[CellGroupData[{
Cell[1573440, 29208, 68, 1, 70, "Input"],
Cell[1573511, 29211, 121, 2, 70, "Output"]
}, Closed]],
Cell[CellGroupData[{
Cell[1573669, 29218, 145, 3, 70, "Input"],
Cell[1573817, 29223, 140, 2, 70, "Output"]
}, Closed]],
Cell[CellGroupData[{
Cell[1573994, 29230, 326, 9, 70, "Input"],
Cell[1574323, 29241, 120, 2, 70, "Output"]
}, Closed]],
Cell[CellGroupData[{
Cell[1574480, 29248, 315, 10, 70, "Input"],
Cell[1574798, 29260, 164, 3, 70, "Output"]
}, Closed]],
Cell[CellGroupData[{
Cell[1574999, 29268, 170, 3, 70, "Input"],
Cell[1575172, 29273, 140, 2, 70, "Output"]
}, Closed]],
Cell[CellGroupData[{
Cell[1575349, 29280, 348, 10, 70, "Input"],
Cell[1575700, 29292, 593, 20, 70, "Output"]
}, Closed]],
Cell[CellGroupData[{
Cell[1576330, 29317, 168, 4, 70, "Input"],
Cell[1576501, 29323, 142, 2, 70, "Output"]
}, Closed]]
}, Closed]],
Cell[CellGroupData[{
Cell[1576692, 29331, 112, 1, 18, "Subsubsection"],
Cell[1576807, 29334, 3187, 90, 70, "Input"],
Cell[CellGroupData[{
Cell[1580019, 29428, 532, 11, 70, "Input"],
Cell[1580554, 29441, 168, 3, 70, "Output"],
Cell[1580725, 29446, 169, 3, 70, "Output"],
Cell[1580897, 29451, 168, 3, 70, "Output"],
Cell[1581068, 29456, 171, 3, 70, "Output"]
}, Closed]]
}, Closed]],
Cell[1581266, 29463, 114, 1, 18, "Subsubsection"],
Cell[CellGroupData[{
Cell[1581405, 29468, 116, 1, 18, "Subsubsection"],
Cell[CellGroupData[{
Cell[1581546, 29473, 526, 11, 31, "Input"],
Cell[1582075, 29486, 263, 5, 70, "Output"]
}, Closed]],
Cell[CellGroupData[{
Cell[1582375, 29496, 485, 10, 41, "Input"],
Cell[1582863, 29508, 216, 4, 70, "Output"]
}, Closed]],
Cell[1583094, 29515, 515, 14, 63, "Input"],
Cell[1583612, 29531, 426, 12, 49, "Input"],
Cell[1584041, 29545, 92, 1, 31, "Input"],
Cell[CellGroupData[{
Cell[1584158, 29550, 628, 17, 52, "Input"],
Cell[1584789, 29569, 191, 3, 70, "Output"]
}, Closed]]
}, Closed]],
Cell[CellGroupData[{
Cell[1585029, 29578, 105, 1, 18, "Subsubsection"],
Cell[1585137, 29581, 1091, 27, 168, "Input"],
Cell[CellGroupData[{
Cell[1586253, 29612, 592, 11, 92, "Input"],
Cell[1586848, 29625, 313, 5, 30, "Output"],
Cell[1587164, 29632, 314, 5, 30, "Output"],
Cell[1587481, 29639, 319, 5, 32, "Output"],
Cell[1587803, 29646, 320, 5, 32, "Output"]
}, Closed]],
Cell[1588138, 29654, 91, 1, 31, "Input"]
}, Closed]],
Cell[CellGroupData[{
Cell[1588266, 29660, 114, 1, 18, "Subsubsection"],
Cell[1588383, 29663, 975, 25, 121, "Input"],
Cell[CellGroupData[{
Cell[1589383, 29692, 423, 8, 72, "Input"],
Cell[1589809, 29702, 240, 4, 30, "Output"],
Cell[1590052, 29708, 242, 4, 30, "Output"],
Cell[1590297, 29714, 242, 4, 30, "Output"]
}, Closed]]
}, Closed]],
Cell[CellGroupData[{
Cell[1590588, 29724, 116, 1, 18, "Subsubsection"],
Cell[1590707, 29727, 1222, 35, 138, "Input"],
Cell[CellGroupData[{
Cell[1591954, 29766, 503, 9, 72, "Input"],
Cell[1592460, 29777, 260, 4, 30, "Output"],
Cell[1592723, 29783, 258, 4, 30, "Output"],
Cell[1592984, 29789, 260, 4, 30, "Output"]
}, Closed]]
}, Closed]],
Cell[CellGroupData[{
Cell[1593293, 29799, 116, 1, 18, "Subsubsection"],
Cell[1593412, 29802, 2064, 55, 237, "Input"],
Cell[CellGroupData[{
Cell[1595501, 29861, 1045, 19, 112, "Input"],
Cell[1596549, 29882, 630, 8, 30, "Output"],
Cell[1597182, 29892, 629, 8, 30, "Output"],
Cell[1597814, 29902, 627, 8, 30, "Output"],
Cell[1598444, 29912, 631, 8, 30, "Output"],
Cell[1599078, 29922, 627, 8, 30, "Output"]
}, Closed]],
Cell[1599720, 29933, 94, 1, 31, "Input"],
Cell[CellGroupData[{
Cell[1599839, 29938, 146, 3, 31, "Input"],
Cell[1599988, 29943, 90, 1, 30, "Output"]
}, Closed]]
}, Closed]],
Cell[CellGroupData[{
Cell[1600127, 29950, 112, 1, 18, "Subsubsection"],
Cell[1600242, 29953, 1229, 35, 100, "Input"],
Cell[CellGroupData[{
Cell[1601496, 29992, 595, 10, 43, "Input"],
Cell[1602094, 30004, 462, 7, 27, "Output"],
Cell[1602559, 30013, 461, 7, 27, "Output"]
}, Open  ]],
Cell[1603035, 30023, 94, 1, 27, "Input"]
}, Open  ]]
}, Open  ]]
}, Open  ]]
}, Open  ]]
}
]
*)

(* End of internal cache information *)
